/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./development/admin/js/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/admin/js/script.js":
/*!****************************************!*\
  !*** ./development/admin/js/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/resource-timeline */ "./node_modules/@fullcalendar/resource-timeline/main.esm.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.esm.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * All of the code for your admin-facing JavaScript source
 * should reside in the file "development/admin/js/script.js".
 *
 * Note: It has been assumed you will write jQuery code here, so the
 * $ function reference has been prepared (import $ from 'jquery')for usage within the scope
 * of this function.
 *
 * This enables you to define handlers, for when the DOM is ready:
 *
 * $(function() {
 *
 * });
 *
 * When the window is loaded:
 *
 * $( window ).load(function() {
 *
 * });
 *
 * ...and/or other possibilities.
 *
 * Ideally, it is not considered best practise to attach more than a
 * single DOM-ready or window-load handler for a particular page.
 * Although scripts in the WordPress core, Plugins and Themes may be
 * practising this, we should strive to set a better example in our own work.
 *
 * The file is enqueued from src/admin/class-assets.php.
 */



 // Constants for internationalization purposes

var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    _x = _wp$i18n._x,
    _n = _wp$i18n._n,
    _nx = _wp$i18n._nx;
jQuery(document).ready(function () {
  var ROOMFORM = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-roombooking-room-form');
  var ROOMID = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-id');
  var ROOMNUMBER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-roomnumber');
  var FLOORNUMBER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-floornumber');
  var ROOMADULTS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-adults');
  var ROOMKIDS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-kids');
  var ROOMPRICE = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-price');
  var ROOMDESC = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-desc');
  var ROOMACTIVE = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-active');
  var ROOMSUBMITBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-submit');
  var ROOMSUBMITMODIFY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-form-submit-modify');
  var ROOMDELETEBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-delete-btn');
  var ROOMCANCELBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-cancel-btn');
  var RESFORM = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-form');
  var RESCANCELBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-cancel-btn');
  var RESBGMODAL = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".joeee-booking-reservation-bg-modal");
  var RESROOMID = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-roomid');
  var RESARRIVAL = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#joeee-booking-reservation-arrival");
  var RESDEPARTURE = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#joeee-booking-reservation-departure");
  var RESPERSONS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-persons');
  var RESEMAIL = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-email');
  var RESFIRSTNAME = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-firstname');
  var RESLASTNAME = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-lastname');
  var RESNATIONALITY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-nationality-select');
  var RESGENDER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-gender');
  var RESBIRTHDAY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-birthday');
  var RESSTREET = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-street');
  var RESZIP = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-zip');
  var RESCITY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-city');
  var RESCOUNTRY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-country-select');
  var RESSUBMIT = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-submit');
  var RESFREEROOM = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-free-rooms-table');

  function cancel(ev, comesfrom) {
    ev.preventDefault();

    if (comesfrom === "room") {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-roombooking-room-form').trigger('reset');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "none");
    }

    if (comesfrom === "reservation") {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-form').trigger('reset');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-bg-modal').css("display", "none");
    }

    location.reload();
  }

  function getSelectedReservationCheckboxes() {
    var allVals = [];
    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.reservationRoomFormCheckbox:checked').each(function () {
      allVals.push(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).val());
    });
    return allVals;
  }

  function getAllReservationExtras() {
    var allExtras = {};
    jquery__WEBPACK_IMPORTED_MODULE_0___default()("[id^=extra-id]").each(function () {
      allExtras[this.id.replace("extra-id", "")] = this.value;
    });
    return allExtras;
  }

  function createReservation(user_id) {
    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
      type: 'POST',
      dataType: 'json',
      contentType: 'application/json',
      url: joeeeRest.restURL + 'joeee-booking/v1/room',
      success: function success(data) {
        var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
        success.addClass('success');
        success.text(__('Saved changes successfully.', 'joeee-booking'));
        setTimeout(function () {
          ROOMCANCELBTN.trigger('click');
          location.reload();
        }, 2000);
      },
      error: function error(data) {
        var err = data.responseJSON.message;
        var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
        submitError.addClass('error');
        submitError.text(err);
      },
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
      },
      data: JSON.stringify(checked)
    });
  }

  function emailIsValid(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  function checkReservationFormInputs(comesfrom) {
    var formout = {};
    var arrival = RESARRIVAL.val();
    var departure = RESDEPARTURE.val();
    var persons = RESPERSONS.val();
    var email = RESEMAIL.val();
    var firstName = RESFIRSTNAME.val().trim();
    var lastName = RESLASTNAME.val().trim();
    var nationality = RESNATIONALITY.val();
    var gender = RESGENDER.val();
    var birthday = RESBIRTHDAY.val();
    var street = RESSTREET.val().trim();
    var zip = RESZIP.val().trim();
    var city = RESCITY.val().trim();
    var country = RESCOUNTRY.val();

    if (arrival === '') {
      setErrorFor(RESARRIVAL, __('The arrival date is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESARRIVAL);
    }

    if (departure === '') {
      setErrorFor(RESDEPARTURE, __('The departure date is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESDEPARTURE);
    }

    if (isNaN(persons) || persons === '') {
      setErrorFor(RESPERSONS, __('The adults field is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESPERSONS);
    }

    if (email === "" || emailIsValid(email)) {
      setSuccessFor(RESEMAIL);
    } else {
      setErrorFor(RESEMAIL, __('The E-Mail has a wrong format.', 'joeee-booking'));
      return false;
    }

    if (typeof firstName === 'string') {
      setSuccessFor(RESFIRSTNAME);

      if (firstName !== "") {}
    } else {
      setErrorFor(RESFIRSTNAME, __('The first name have to be in string format!', 'joeee-booking'));
      return false;
    }

    if (lastName === "" || typeof lastName !== 'string') {
      setErrorFor(RESLASTNAME, __('The last name is required and has to be in string format', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESLASTNAME);
    }

    if (birthday !== "") {
      setSuccessFor(RESBIRTHDAY);
    }

    if (typeof street === 'string') {
      setSuccessFor(RESSTREET);
    } else {
      setErrorFor(RESSTREET, __('The street has to be a string', 'joeee-booking'));
      return false;
    }

    if (typeof zip === 'string' || typeof zip === 'number') {
      setSuccessFor(RESZIP);
    } else {
      setErrorFor(RESZIP, __('There is an error with your given zip.', 'joeee-booking'));
      return false;
    }

    if (typeof city === 'string') {
      setSuccessFor(RESCITY);
    } else {
      setErrorFor(RESCITY, __('The city has to be a string.', 'joeee-booking'));
      return false;
    }

    var formDataHelper = {};
    var resformdata = RESFORM.serializeArray();
    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(resformdata, function (i, field) {
      formDataHelper[field.name] = field.value;
    });
    var resRoomIDs = getSelectedReservationCheckboxes();

    if (resRoomIDs.length > 0) {
      formDataHelper.rooms = resRoomIDs;
    } else {
      return 1;
    }

    formout = formDataHelper;
    return formout;
  }

  function checkRoomFormInputs(comesfrom) {
    var formout = {};
    var roomnumberValue = ROOMNUMBER.val().trim();
    var floornumberValue = FLOORNUMBER.val().trim();
    var roomAdultsValue = ROOMADULTS.val().trim();
    var roomKidsValue = ROOMKIDS.val().trim();
    var roompriceValue = ROOMPRICE.val().trim().replace(',', '.');
    var roomDescription = ROOMDESC.val().trim();

    if (isNaN(roomnumberValue.toString()) || roomnumberValue === '') {
      setErrorFor(ROOMNUMBER, __('The room number must be set as string!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMNUMBER);
      formout.number = roomnumberValue.toString();
    }

    if (isNaN(floornumberValue) || floornumberValue === '') {
      setErrorFor(FLOORNUMBER, __('The floor number must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(FLOORNUMBER);
      formout.floor = floornumberValue;
    }

    if (isNaN(roomAdultsValue) || roomAdultsValue === '') {
      setErrorFor(ROOMADULTS, __('The adults must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMADULTS);
      formout.adults = parseInt(roomAdultsValue);
    }

    if (isNaN(roomKidsValue) || roomKidsValue === '') {
      setErrorFor(ROOMKIDS, __('The kids must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMKIDS);
      formout.kids = parseInt(roomKidsValue);
    }

    if (isNaN(roompriceValue) || roompriceValue === '') {
      setErrorFor(ROOMPRICE, __('The price must be a float number!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMPRICE);
      formout.price = parseFloat(roompriceValue);
    }

    if (typeof roomDescription === 'string') {
      formout.description = roomDescription;
    }

    if (ROOMACTIVE.is(":checked")) {
      formout.active = true;
    } else {
      formout.active = false;
    }

    return formout;
  }

  function setErrorFor(input, message) {
    var formControl = input.parent();
    var small = formControl.find('small');
    formControl.addClass('error');
    small.text(message);
  }

  function setSuccessFor(input) {
    var formControl = input.parent();
    formControl.addClass('success');
  }

  var setLocale = 'en';
  var calendarEl = document.getElementById('joeeeBookingCalendar');
  var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_1__["Calendar"](calendarEl, {
    schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
    plugins: [_fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_3__["default"], _fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_2__["default"]],
    aspectRatio: 1.5,
    resourceAreaWidth: '10%',
    slotDuration: '12:00',
    scrollTime: '00:00',
    // undo default 6am scrollTime
    locale: setLocale,
    header: {
      left: 'addRoom, addReservation, today, prev, next',
      center: 'title',
      right: 'resourceTimelineMonth, resourceTimelineWeek'
    },
    customButtons: {
      addRoom: {
        text: __('Add room', 'joeee-booking'),
        click: function click() {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "flex");
        }
      },
      addReservation: {
        text: __('Add reservation', 'joeee-booking'),
        click: function click() {
          RESBGMODAL.css("display", "flex");
        }
      }
    },
    defaultView: 'resourceTimelineMonth',
    selectable: true,
    selectHelper: true,
    editable: true,
    // enable draggable events
    resourceColumns: [{
      labelText: __('Room', 'joeee-booking'),
      field: 'title',
      width: '15px'
    }, {
      labelText: __('Beds', 'joeee-booking'),
      field: 'adults'
    }],
    resourceOrder: 'title',
    resources: {
      url: joeeeRest.restURL + 'joeee-booking/v1/room',
      method: 'GET'
    },
    resourceRender: function resourceRender(renderInfo) {
      renderInfo.el.addEventListener('click', function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
          type: 'GET',
          dataType: 'json',
          contentType: 'application/json',
          url: joeeeRest.restURL + 'joeee-booking/v1/room/' + renderInfo.resource.id,
          success: function success(data) {
            ROOMID.val(data.id);
            ROOMNUMBER.val(data.number);
            ROOMADULTS.val(data.adults);
            ROOMKIDS.val(data.kids);
            FLOORNUMBER.val(data.floor);
            ROOMPRICE.val(data.price);
            ROOMDESC.val(data.description);

            if (data.active == 1) {
              ROOMACTIVE.prop('checked', true);
            } else {
              ROOMACTIVE.prop('checked', false);
            }

            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "flex");
            ROOMSUBMITBTN.addClass('close');
            ROOMSUBMITMODIFY.addClass('open');
            ROOMDELETEBTN.addClass('open');
          },
          error: function error(data) {
            alert(__("Error by receiving the room information.", 'joeee-booking'));
          },
          beforeSend: function beforeSend(xhr) {
            xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
          },
          data: ""
        });
      });
    },
    timeZone: 'UTC',
    events: {
      url: joeeeRest.restURL + 'joeee-booking/v1/reservation',
      method: 'GET'
    },
    eventClick: function eventClick(info) {
      console.log('Event: ' + info.event.title);
    },
    select: function select(arg) {
      var arrival = arg.start.toISOString().substr(0, 10);
      var departure = arg.end.toISOString().substr(0, 10);
      RESBGMODAL.css("display", "flex");
      RESROOMID.val(arg.resource.id);
      RESARRIVAL.val(arrival);
      RESDEPARTURE.val(departure);
      console.log('select callback', arg.startStr, arg.endStr, arg.resource ? arg.resource.id : '(no resource)');
    },
    dateClick: function dateClick(arg) {
      RESBGMODAL.css("display", "flex");
      var date = arg.date.toISOString().substr(0, 10);
      RESROOMID.val(arg.resource.id);
      RESARRIVAL.val(date);
      console.log('dateClick', arg.date, arg.resource ? arg.resource.id : '(no resource)', arg.date.toISOString(), arg.date.toString());
    }
  });
  calendar.render();
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-close').click(function () {
    ROOMCANCELBTN.trigger('click');
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-close').click(function () {
    RESCANCELBTN.trigger('click');
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-submit').click(function (ev) {
    ev.preventDefault();
    var checked = checkRoomFormInputs("submit");

    if (checked) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room',
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            ROOMCANCELBTN.trigger('click');
            location.reload();
          }, 2000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: JSON.stringify(checked)
      });
    }
  });
  ROOMCANCELBTN.click(function (ev) {
    cancel(ev, "room");
  });
  RESCANCELBTN.click(function (ev) {
    cancel(ev, "reservation");
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-form-submit-modify').click(function (ev) {
    ev.preventDefault();
    var checked = checkRoomFormInputs("update");

    if (checked) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'PUT',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room/' + ROOMID.val(),
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            ROOMCANCELBTN.trigger('click');
          }, 1000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: JSON.stringify(checked)
      });
    }
  });
  ROOMDELETEBTN.click(function (ev) {
    ev.preventDefault();

    if (confirm(__('You really wanna delete this room? Every booking in this room will be removed too by doing so!', 'joeee-booking'))) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'DELETE',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room/' + ROOMID.val(),
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-cancel-btn').trigger('click');
          }, 1000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: ""
      });
    } else {
      ROOMCANCELBTN.trigger('click');
    }
  });
  RESSUBMIT.click(function (ev) {
    ev.preventDefault();
    var checked = checkReservationFormInputs();
    var extras = getAllReservationExtras();
    console.log(extras);
    var userdata = {};
    userdata.email = checked.reservationEmail;
    userdata.first_name = checked.reservationFirstName;
    userdata.last_name = checked.reservationLastName;
    userdata.gender = parseInt(checked.genderselect);
    userdata.birthday = checked.reservationBirthday + "T12:00:00";
    userdata.nationality = checked.nationalityselect;
    userdata.tin = checked.reservationTIN;
    userdata.street = checked.reservationStreet;
    userdata.zip = checked.reservationZip;
    userdata.city = checked.reservationCity;
    userdata.country = checked.countryselect;
    console.log(userdata);
    jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
      type: 'POST',
      dataType: 'json',
      contentType: 'application/json',
      url: joeeeRest.restURL + 'joeee-booking/v1/user',
      success: function success(data) {
        var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-success');
        success.addClass('success');
        success.text(__('Saved changes successfully.', 'joeee-booking'));
        console.log(data);
        createReservation(data.id);
      },
      error: function error(data) {
        var err = data.responseJSON.message;
        var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-error');
        submitError.addClass('error');
        submitError.text(err);
      },
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
      },
      data: JSON.stringify(userdata)
    });
  });
  RESDEPARTURE.on("keyup change", function () {
    RESFREEROOM.empty();
    var data = {};

    if (typeof RESARRIVAL.val() !== "undefined") {
      var arrival = RESARRIVAL.val();
      var departure = RESDEPARTURE.val();
      console.log(_typeof(departure));
      data.from = arrival.concat(" 12:01:00");
      data.to = departure.concat(" 11:59:00");
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room/availability',
        success: function success(response) {
          var freeRooms = response;
          var j = 0;

          if (freeRooms.length !== 0) {
            RESFREEROOM.append('<tr id="joeee-booking-reservation-free-room-row"><th>Room Number</th><th>Adults</th><th>Kids</th><th>Book</th></tr>');

            for (var i = 0; i < freeRooms.length; i++) {
              console.log(freeRooms[i]);
              RESFREEROOM.append('<tr id="joeee-booking-reservation-free-room-row' + i + '"><td>' + freeRooms[i].number + '</td><td>' + freeRooms[i].adults + '</td><td>' + freeRooms[i].kids + '</td><td><input name="reservationRoomCheck' + i + '" type="checkbox" id="joeee-booking-reservation-free-room-id' + freeRooms[i].number + '" value="' + freeRooms[i].id + '" class="reservationRoomFormCheckbox"></td></tr>');
            }
          } else {
            RESFREEROOM.append('<tr><td>' + __('There are no free rooms in the given period!', 'joeee-booking') + '</td></tr>');
          }
        },
        error: function error(response) {
          console.log(response);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: JSON.stringify(data)
      });
    }
  });
});

/***/ }),

/***/ "./node_modules/@fullcalendar/core/main.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/core/main.esm.js ***!
  \*****************************************************/
/*! exports provided: Calendar, Component, ComponentContext, DateComponent, DateEnv, DateProfileGenerator, DayHeader, DaySeries, DayTable, ElementDragging, ElementScrollController, EmitterMixin, EventApi, FgEventRenderer, FillRenderer, Interaction, Mixin, NamedTimeZoneImpl, PositionCache, ScrollComponent, ScrollController, Slicer, Splitter, Theme, View, WindowScrollController, addDays, addDurations, addMs, addWeeks, allowContextMenu, allowSelection, appendToElement, applyAll, applyMutationToEventStore, applyStyle, applyStyleProp, asRoughMinutes, asRoughMs, asRoughSeconds, buildGotoAnchorHtml, buildSegCompareObj, capitaliseFirstLetter, combineEventUis, compareByFieldSpec, compareByFieldSpecs, compareNumbers, compensateScroll, computeClippingRect, computeEdges, computeEventDraggable, computeEventEndResizable, computeEventStartResizable, computeFallbackHeaderFormat, computeHeightAndMargins, computeInnerRect, computeRect, computeVisibleDayRange, config, constrainPoint, createDuration, createElement, createEmptyEventStore, createEventInstance, createFormatter, createPlugin, cssToStr, debounce, diffDates, diffDayAndTime, diffDays, diffPoints, diffWeeks, diffWholeDays, diffWholeWeeks, disableCursor, distributeHeight, elementClosest, elementMatches, enableCursor, eventTupleToStore, filterEventStoreDefs, filterHash, findChildren, findElements, flexibleCompare, forceClassName, formatDate, formatIsoTimeString, formatRange, getAllDayHtml, getClippingParents, getDayClasses, getElSeg, getRectCenter, getRelevantEvents, globalDefaults, greatestDurationDenominator, hasBgRendering, htmlEscape, htmlToElement, insertAfterElement, interactionSettingsStore, interactionSettingsToStore, intersectRanges, intersectRects, isArraysEqual, isDateSpansEqual, isInt, isInteractionValid, isMultiDayRange, isPropsEqual, isPropsValid, isSingleDay, isValidDate, listenBySelector, mapHash, matchCellWidths, memoize, memoizeOutput, memoizeRendering, mergeEventStores, multiplyDuration, padStart, parseBusinessHours, parseDragMeta, parseEventDef, parseFieldSpecs, parseMarker, pointInsideRect, prependToElement, preventContextMenu, preventDefault, preventSelection, processScopedUiProps, rangeContainsMarker, rangeContainsRange, rangesEqual, rangesIntersect, refineProps, removeElement, removeExact, renderDateCell, requestJson, sliceEventStore, startOfDay, subtractInnerElHeight, translateRect, uncompensateScroll, undistributeHeight, unpromisify, version, whenTransitionDone, wholeDivideDurations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calendar", function() { return Calendar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentContext", function() { return ComponentContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateComponent", function() { return DateComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateEnv", function() { return DateEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateProfileGenerator", function() { return DateProfileGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayHeader", function() { return DayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DaySeries", function() { return DaySeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayTable", function() { return DayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementDragging", function() { return ElementDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementScrollController", function() { return ElementScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmitterMixin", function() { return EmitterMixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventApi", function() { return EventApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FgEventRenderer", function() { return FgEventRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FillRenderer", function() { return FillRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interaction", function() { return Interaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mixin", function() { return Mixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedTimeZoneImpl", function() { return NamedTimeZoneImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionCache", function() { return PositionCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollComponent", function() { return ScrollComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollController", function() { return ScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slicer", function() { return Slicer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Splitter", function() { return Splitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Theme", function() { return Theme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View", function() { return View; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindowScrollController", function() { return WindowScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDays", function() { return addDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDurations", function() { return addDurations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMs", function() { return addMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addWeeks", function() { return addWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowContextMenu", function() { return allowContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowSelection", function() { return allowSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToElement", function() { return appendToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyAll", function() { return applyAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMutationToEventStore", function() { return applyMutationToEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyle", function() { return applyStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyleProp", function() { return applyStyleProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMinutes", function() { return asRoughMinutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMs", function() { return asRoughMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughSeconds", function() { return asRoughSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildGotoAnchorHtml", function() { return buildGotoAnchorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildSegCompareObj", function() { return buildSegCompareObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitaliseFirstLetter", function() { return capitaliseFirstLetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineEventUis", function() { return combineEventUis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpec", function() { return compareByFieldSpec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpecs", function() { return compareByFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareNumbers", function() { return compareNumbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compensateScroll", function() { return compensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeClippingRect", function() { return computeClippingRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEdges", function() { return computeEdges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEventDraggable", function() { return computeEventDraggable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEventEndResizable", function() { return computeEventEndResizable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEventStartResizable", function() { return computeEventStartResizable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeFallbackHeaderFormat", function() { return computeFallbackHeaderFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeHeightAndMargins", function() { return computeHeightAndMargins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeInnerRect", function() { return computeInnerRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeRect", function() { return computeRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeVisibleDayRange", function() { return computeVisibleDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constrainPoint", function() { return constrainPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDuration", function() { return createDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEmptyEventStore", function() { return createEmptyEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEventInstance", function() { return createEventInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFormatter", function() { return createFormatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlugin", function() { return createPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssToStr", function() { return cssToStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDates", function() { return diffDates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDayAndTime", function() { return diffDayAndTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDays", function() { return diffDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffPoints", function() { return diffPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWeeks", function() { return diffWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeDays", function() { return diffWholeDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeWeeks", function() { return diffWholeWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableCursor", function() { return disableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distributeHeight", function() { return distributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementClosest", function() { return elementClosest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementMatches", function() { return elementMatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableCursor", function() { return enableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventTupleToStore", function() { return eventTupleToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterEventStoreDefs", function() { return filterEventStoreDefs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterHash", function() { return filterHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findChildren", function() { return findChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findElements", function() { return findElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flexibleCompare", function() { return flexibleCompare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceClassName", function() { return forceClassName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatIsoTimeString", function() { return formatIsoTimeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatRange", function() { return formatRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllDayHtml", function() { return getAllDayHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClippingParents", function() { return getClippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDayClasses", function() { return getDayClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElSeg", function() { return getElSeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRectCenter", function() { return getRectCenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelevantEvents", function() { return getRelevantEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "globalDefaults", function() { return globalDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greatestDurationDenominator", function() { return greatestDurationDenominator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasBgRendering", function() { return hasBgRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlEscape", function() { return htmlEscape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlToElement", function() { return htmlToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfterElement", function() { return insertAfterElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsStore", function() { return interactionSettingsStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsToStore", function() { return interactionSettingsToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRanges", function() { return intersectRanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRects", function() { return intersectRects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArraysEqual", function() { return isArraysEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDateSpansEqual", function() { return isDateSpansEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return isInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteractionValid", function() { return isInteractionValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMultiDayRange", function() { return isMultiDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsEqual", function() { return isPropsEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsValid", function() { return isPropsValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSingleDay", function() { return isSingleDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidDate", function() { return isValidDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listenBySelector", function() { return listenBySelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapHash", function() { return mapHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchCellWidths", function() { return matchCellWidths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return memoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeOutput", function() { return memoizeOutput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeRendering", function() { return memoizeRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeEventStores", function() { return mergeEventStores; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyDuration", function() { return multiplyDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padStart", function() { return padStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBusinessHours", function() { return parseBusinessHours; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDragMeta", function() { return parseDragMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseEventDef", function() { return parseEventDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFieldSpecs", function() { return parseFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseMarker", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointInsideRect", function() { return pointInsideRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToElement", function() { return prependToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventContextMenu", function() { return preventContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventDefault", function() { return preventDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventSelection", function() { return preventSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processScopedUiProps", function() { return processScopedUiProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsMarker", function() { return rangeContainsMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsRange", function() { return rangeContainsRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesEqual", function() { return rangesEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesIntersect", function() { return rangesIntersect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refineProps", function() { return refineProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeElement", function() { return removeElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeExact", function() { return removeExact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDateCell", function() { return renderDateCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestJson", function() { return requestJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceEventStore", function() { return sliceEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startOfDay", function() { return startOfDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtractInnerElHeight", function() { return subtractInnerElHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateRect", function() { return translateRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncompensateScroll", function() { return uncompensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undistributeHeight", function() { return undistributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unpromisify", function() { return unpromisify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenTransitionDone", function() { return whenTransitionDone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wholeDivideDurations", function() { return wholeDivideDurations; });
/*!
FullCalendar Core Package v4.4.0
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/
// Creating
// ----------------------------------------------------------------------------------------------------------------
var elementPropHash = {
  className: true,
  colSpan: true,
  rowSpan: true
};
var containerTagHash = {
  '<tr': 'tbody',
  '<td': 'tr'
};

function createElement(tagName, attrs, content) {
  var el = document.createElement(tagName);

  if (attrs) {
    for (var attrName in attrs) {
      if (attrName === 'style') {
        applyStyle(el, attrs[attrName]);
      } else if (elementPropHash[attrName]) {
        el[attrName] = attrs[attrName];
      } else {
        el.setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  if (typeof content === 'string') {
    el.innerHTML = content; // shortcut. no need to process HTML in any way
  } else if (content != null) {
    appendToElement(el, content);
  }

  return el;
}

function htmlToElement(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.firstChild;
}

function htmlToElements(html) {
  return Array.prototype.slice.call(htmlToNodeList(html));
}

function htmlToNodeList(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.childNodes;
} // assumes html already trimmed and tag names are lowercase


function computeContainerTag(html) {
  return containerTagHash[html.substr(0, 3) // faster than using regex
  ] || 'div';
}

function appendToElement(el, content) {
  var childNodes = normalizeContent(content);

  for (var i = 0; i < childNodes.length; i++) {
    el.appendChild(childNodes[i]);
  }
}

function prependToElement(parent, content) {
  var newEls = normalizeContent(content);
  var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children

  for (var i = 0; i < newEls.length; i++) {
    parent.insertBefore(newEls[i], afterEl);
  }
}

function insertAfterElement(refEl, content) {
  var newEls = normalizeContent(content);
  var afterEl = refEl.nextSibling || null;

  for (var i = 0; i < newEls.length; i++) {
    refEl.parentNode.insertBefore(newEls[i], afterEl);
  }
}

function normalizeContent(content) {
  var els;

  if (typeof content === 'string') {
    els = htmlToElements(content);
  } else if (content instanceof Node) {
    els = [content];
  } else {
    // Node[] or NodeList
    els = Array.prototype.slice.call(content);
  }

  return els;
}

function removeElement(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
} // Querying
// ----------------------------------------------------------------------------------------------------------------
// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


var matchesMethod = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.msMatchesSelector;

var closestMethod = Element.prototype.closest || function (selector) {
  // polyfill
  var el = this;

  if (!document.documentElement.contains(el)) {
    return null;
  }

  do {
    if (elementMatches(el, selector)) {
      return el;
    }

    el = el.parentElement || el.parentNode;
  } while (el !== null && el.nodeType === 1);

  return null;
};

function elementClosest(el, selector) {
  return closestMethod.call(el, selector);
}

function elementMatches(el, selector) {
  return matchesMethod.call(el, selector);
} // accepts multiple subject els
// returns a real array. good for methods like forEach


function findElements(container, selector) {
  var containers = container instanceof HTMLElement ? [container] : container;
  var allMatches = [];

  for (var i = 0; i < containers.length; i++) {
    var matches = containers[i].querySelectorAll(selector);

    for (var j = 0; j < matches.length; j++) {
      allMatches.push(matches[j]);
    }
  }

  return allMatches;
} // accepts multiple subject els
// only queries direct child elements


function findChildren(parent, selector) {
  var parents = parent instanceof HTMLElement ? [parent] : parent;
  var allMatches = [];

  for (var i = 0; i < parents.length; i++) {
    var childNodes = parents[i].children; // only ever elements

    for (var j = 0; j < childNodes.length; j++) {
      var childNode = childNodes[j];

      if (!selector || elementMatches(childNode, selector)) {
        allMatches.push(childNode);
      }
    }
  }

  return allMatches;
} // Attributes
// ----------------------------------------------------------------------------------------------------------------


function forceClassName(el, className, bool) {
  if (bool) {
    el.classList.add(className);
  } else {
    el.classList.remove(className);
  }
} // Style
// ----------------------------------------------------------------------------------------------------------------


var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;

function applyStyle(el, props) {
  for (var propName in props) {
    applyStyleProp(el, propName, props[propName]);
  }
}

function applyStyleProp(el, name, val) {
  if (val == null) {
    el.style[name] = '';
  } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {
    el.style[name] = val + 'px';
  } else {
    el.style[name] = val;
  }
}

function pointInsideRect(point, rect) {
  return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
} // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false


function intersectRects(rect1, rect2) {
  var res = {
    left: Math.max(rect1.left, rect2.left),
    right: Math.min(rect1.right, rect2.right),
    top: Math.max(rect1.top, rect2.top),
    bottom: Math.min(rect1.bottom, rect2.bottom)
  };

  if (res.left < res.right && res.top < res.bottom) {
    return res;
  }

  return false;
}

function translateRect(rect, deltaX, deltaY) {
  return {
    left: rect.left + deltaX,
    right: rect.right + deltaX,
    top: rect.top + deltaY,
    bottom: rect.bottom + deltaY
  };
} // Returns a new point that will have been moved to reside within the given rectangle


function constrainPoint(point, rect) {
  return {
    left: Math.min(Math.max(point.left, rect.left), rect.right),
    top: Math.min(Math.max(point.top, rect.top), rect.bottom)
  };
} // Returns a point that is the center of the given rectangle


function getRectCenter(rect) {
  return {
    left: (rect.left + rect.right) / 2,
    top: (rect.top + rect.bottom) / 2
  };
} // Subtracts point2's coordinates from point1's coordinates, returning a delta


function diffPoints(point1, point2) {
  return {
    left: point1.left - point2.left,
    top: point1.top - point2.top
  };
} // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side


var isRtlScrollbarOnLeft = null;

function getIsRtlScrollbarOnLeft() {
  if (isRtlScrollbarOnLeft === null) {
    isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
  }

  return isRtlScrollbarOnLeft;
}

function computeIsRtlScrollbarOnLeft() {
  var outerEl = createElement('div', {
    style: {
      position: 'absolute',
      top: -1000,
      left: 0,
      border: 0,
      padding: 0,
      overflow: 'scroll',
      direction: 'rtl'
    }
  }, '<div></div>');
  document.body.appendChild(outerEl);
  var innerEl = outerEl.firstChild;
  var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
  removeElement(outerEl);
  return res;
} // The scrollbar width computations in computeEdges are sometimes flawed when it comes to
// retina displays, rounding, and IE11. Massage them into a usable value.


function sanitizeScrollbarWidth(width) {
  width = Math.max(0, width); // no negatives

  width = Math.round(width);
  return width;
}

function computeEdges(el, getPadding) {
  if (getPadding === void 0) {
    getPadding = false;
  }

  var computedStyle = window.getComputedStyle(el);
  var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
  var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
  var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
  var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0; // must use offset(Width|Height) because compatible with client(Width|Height)

  var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);
  var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);
  var res = {
    borderLeft: borderLeft,
    borderRight: borderRight,
    borderTop: borderTop,
    borderBottom: borderBottom,
    scrollbarBottom: scrollbarBottom,
    scrollbarLeft: 0,
    scrollbarRight: 0
  };

  if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {
    // is the scrollbar on the left side?
    res.scrollbarLeft = scrollbarLeftRight;
  } else {
    res.scrollbarRight = scrollbarLeftRight;
  }

  if (getPadding) {
    res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
    res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
    res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
    res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
  }

  return res;
}

function computeInnerRect(el, goWithinPadding) {
  if (goWithinPadding === void 0) {
    goWithinPadding = false;
  }

  var outerRect = computeRect(el);
  var edges = computeEdges(el, goWithinPadding);
  var res = {
    left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
    right: outerRect.right - edges.borderRight - edges.scrollbarRight,
    top: outerRect.top + edges.borderTop,
    bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
  };

  if (goWithinPadding) {
    res.left += edges.paddingLeft;
    res.right -= edges.paddingRight;
    res.top += edges.paddingTop;
    res.bottom -= edges.paddingBottom;
  }

  return res;
}

function computeRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + window.pageXOffset,
    top: rect.top + window.pageYOffset,
    right: rect.right + window.pageXOffset,
    bottom: rect.bottom + window.pageYOffset
  };
}

function computeViewportRect() {
  return {
    left: window.pageXOffset,
    right: window.pageXOffset + document.documentElement.clientWidth,
    top: window.pageYOffset,
    bottom: window.pageYOffset + document.documentElement.clientHeight
  };
}

function computeHeightAndMargins(el) {
  return el.getBoundingClientRect().height + computeVMargins(el);
}

function computeVMargins(el) {
  var computed = window.getComputedStyle(el);
  return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);
} // does not return window


function getClippingParents(el) {
  var parents = [];

  while (el instanceof HTMLElement) {
    // will stop when gets to document or null
    var computedStyle = window.getComputedStyle(el);

    if (computedStyle.position === 'fixed') {
      break;
    }

    if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {
      parents.push(el);
    }

    el = el.parentNode;
  }

  return parents;
}

function computeClippingRect(el) {
  return getClippingParents(el).map(function (el) {
    return computeInnerRect(el);
  }).concat(computeViewportRect()).reduce(function (rect0, rect1) {
    return intersectRects(rect0, rect1) || rect1; // should always intersect
  });
} // Stops a mouse/touch event from doing it's native browser action


function preventDefault(ev) {
  ev.preventDefault();
} // Event Delegation
// ----------------------------------------------------------------------------------------------------------------


function listenBySelector(container, eventType, selector, handler) {
  function realHandler(ev) {
    var matchedChild = elementClosest(ev.target, selector);

    if (matchedChild) {
      handler.call(matchedChild, ev, matchedChild);
    }
  }

  container.addEventListener(eventType, realHandler);
  return function () {
    container.removeEventListener(eventType, realHandler);
  };
}

function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
  var currentMatchedChild;
  return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {
    if (matchedChild !== currentMatchedChild) {
      currentMatchedChild = matchedChild;
      onMouseEnter(ev, matchedChild);

      var realOnMouseLeave_1 = function (ev) {
        currentMatchedChild = null;
        onMouseLeave(ev, matchedChild);
        matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);
      }; // listen to the next mouseleave, and then unattach


      matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);
    }
  });
} // Animation
// ----------------------------------------------------------------------------------------------------------------


var transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend']; // triggered only when the next single subsequent transition finishes

function whenTransitionDone(el, callback) {
  var realCallback = function (ev) {
    callback(ev);
    transitionEventNames.forEach(function (eventName) {
      el.removeEventListener(eventName, realCallback);
    });
  };

  transitionEventNames.forEach(function (eventName) {
    el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
  });
}

var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']; // Adding

function addWeeks(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n * 7;
  return arrayToUtcDate(a);
}

function addDays(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n;
  return arrayToUtcDate(a);
}

function addMs(m, n) {
  var a = dateToUtcArray(m);
  a[6] += n;
  return arrayToUtcDate(a);
} // Diffing (all return floats)


function diffWeeks(m0, m1) {
  return diffDays(m0, m1) / 7;
}

function diffDays(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);
}

function diffHours(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);
}

function diffMinutes(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60);
}

function diffSeconds(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / 1000;
}

function diffDayAndTime(m0, m1) {
  var m0day = startOfDay(m0);
  var m1day = startOfDay(m1);
  return {
    years: 0,
    months: 0,
    days: Math.round(diffDays(m0day, m1day)),
    milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
  };
} // Diffing Whole Units


function diffWholeWeeks(m0, m1) {
  var d = diffWholeDays(m0, m1);

  if (d !== null && d % 7 === 0) {
    return d / 7;
  }

  return null;
}

function diffWholeDays(m0, m1) {
  if (timeAsMs(m0) === timeAsMs(m1)) {
    return Math.round(diffDays(m0, m1));
  }

  return null;
} // Start-Of


function startOfDay(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);
}

function startOfHour(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);
}

function startOfMinute(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);
}

function startOfSecond(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);
} // Week Computation


function weekOfYear(marker, dow, doy) {
  var y = marker.getUTCFullYear();
  var w = weekOfGivenYear(marker, y, dow, doy);

  if (w < 1) {
    return weekOfGivenYear(marker, y - 1, dow, doy);
  }

  var nextW = weekOfGivenYear(marker, y + 1, dow, doy);

  if (nextW >= 1) {
    return Math.min(w, nextW);
  }

  return w;
}

function weekOfGivenYear(marker, year, dow, doy) {
  var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);
  var dayStart = startOfDay(marker);
  var days = Math.round(diffDays(firstWeekStart, dayStart));
  return Math.floor(days / 7) + 1; // zero-indexed
} // start-of-first-week - start-of-year


function firstWeekOffset(year, dow, doy) {
  // first-week day -- which january is always in the first week (4 for iso, 1 for other)
  var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd

  var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
} // Array Conversion


function dateToLocalArray(date) {
  return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];
}

function arrayToLocalDate(a) {
  return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month
  a[3] || 0, a[4] || 0, a[5] || 0);
}

function dateToUtcArray(date) {
  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];
}

function arrayToUtcDate(a) {
  // according to web standards (and Safari), a month index is required.
  // massage if only given a year.
  if (a.length === 1) {
    a = a.concat([0]);
  }

  return new Date(Date.UTC.apply(Date, a));
} // Other Utils


function isValidDate(m) {
  return !isNaN(m.valueOf());
}

function timeAsMs(m) {
  return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
}

var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];
var PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/; // Parsing and Creation

function createDuration(input, unit) {
  var _a;

  if (typeof input === 'string') {
    return parseString(input);
  } else if (typeof input === 'object' && input) {
    // non-null object
    return normalizeObject(input);
  } else if (typeof input === 'number') {
    return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));
  } else {
    return null;
  }
}

function parseString(s) {
  var m = PARSE_RE.exec(s);

  if (m) {
    var sign = m[1] ? -1 : 1;
    return {
      years: 0,
      months: 0,
      days: sign * (m[2] ? parseInt(m[2], 10) : 0),
      milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours
      (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes
      (m[5] ? parseInt(m[5], 10) : 0) * 1000 + ( // seconds
      m[6] ? parseInt(m[6], 10) : 0) // ms
      )
    };
  }

  return null;
}

function normalizeObject(obj) {
  return {
    years: obj.years || obj.year || 0,
    months: obj.months || obj.month || 0,
    days: (obj.days || obj.day || 0) + getWeeksFromInput(obj) * 7,
    milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours
    (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes
    (obj.seconds || obj.second || 0) * 1000 + ( // seconds
    obj.milliseconds || obj.millisecond || obj.ms || 0) // ms

  };
}

function getWeeksFromInput(obj) {
  return obj.weeks || obj.week || 0;
} // Equality


function durationsEqual(d0, d1) {
  return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
}

function isSingleDay(dur) {
  return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;
} // Simple Math


function addDurations(d0, d1) {
  return {
    years: d0.years + d1.years,
    months: d0.months + d1.months,
    days: d0.days + d1.days,
    milliseconds: d0.milliseconds + d1.milliseconds
  };
}

function subtractDurations(d1, d0) {
  return {
    years: d1.years - d0.years,
    months: d1.months - d0.months,
    days: d1.days - d0.days,
    milliseconds: d1.milliseconds - d0.milliseconds
  };
}

function multiplyDuration(d, n) {
  return {
    years: d.years * n,
    months: d.months * n,
    days: d.days * n,
    milliseconds: d.milliseconds * n
  };
} // Conversions
// "Rough" because they are based on average-case Gregorian months/years


function asRoughYears(dur) {
  return asRoughDays(dur) / 365;
}

function asRoughMonths(dur) {
  return asRoughDays(dur) / 30;
}

function asRoughDays(dur) {
  return asRoughMs(dur) / 864e5;
}

function asRoughMinutes(dur) {
  return asRoughMs(dur) / (1000 * 60);
}

function asRoughSeconds(dur) {
  return asRoughMs(dur) / 1000;
}

function asRoughMs(dur) {
  return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
} // Advanced Math


function wholeDivideDurations(numerator, denominator) {
  var res = null;

  for (var i = 0; i < INTERNAL_UNITS.length; i++) {
    var unit = INTERNAL_UNITS[i];

    if (denominator[unit]) {
      var localRes = numerator[unit] / denominator[unit];

      if (!isInt(localRes) || res !== null && res !== localRes) {
        return null;
      }

      res = localRes;
    } else if (numerator[unit]) {
      // needs to divide by something but can't!
      return null;
    }
  }

  return res;
}

function greatestDurationDenominator(dur, dontReturnWeeks) {
  var ms = dur.milliseconds;

  if (ms) {
    if (ms % 1000 !== 0) {
      return {
        unit: 'millisecond',
        value: ms
      };
    }

    if (ms % (1000 * 60) !== 0) {
      return {
        unit: 'second',
        value: ms / 1000
      };
    }

    if (ms % (1000 * 60 * 60) !== 0) {
      return {
        unit: 'minute',
        value: ms / (1000 * 60)
      };
    }

    if (ms) {
      return {
        unit: 'hour',
        value: ms / (1000 * 60 * 60)
      };
    }
  }

  if (dur.days) {
    if (!dontReturnWeeks && dur.days % 7 === 0) {
      return {
        unit: 'week',
        value: dur.days / 7
      };
    }

    return {
      unit: 'day',
      value: dur.days
    };
  }

  if (dur.months) {
    return {
      unit: 'month',
      value: dur.months
    };
  }

  if (dur.years) {
    return {
      unit: 'year',
      value: dur.years
    };
  }

  return {
    unit: 'millisecond',
    value: 0
  };
}
/* FullCalendar-specific DOM Utilities
----------------------------------------------------------------------------------------------------------------------*/
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.


function compensateScroll(rowEl, scrollbarWidths) {
  if (scrollbarWidths.left) {
    applyStyle(rowEl, {
      borderLeftWidth: 1,
      marginLeft: scrollbarWidths.left - 1
    });
  }

  if (scrollbarWidths.right) {
    applyStyle(rowEl, {
      borderRightWidth: 1,
      marginRight: scrollbarWidths.right - 1
    });
  }
} // Undoes compensateScroll and restores all borders/margins


function uncompensateScroll(rowEl) {
  applyStyle(rowEl, {
    marginLeft: '',
    marginRight: '',
    borderLeftWidth: '',
    borderRightWidth: ''
  });
} // Make the mouse cursor express that an event is not allowed in the current area


function disableCursor() {
  document.body.classList.add('fc-not-allowed');
} // Returns the mouse cursor to its original look


function enableCursor() {
  document.body.classList.remove('fc-not-allowed');
} // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
// reduces the available height.


function distributeHeight(els, availableHeight, shouldRedistribute) {
  // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
  // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
  var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element

  var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*

  var flexEls = []; // elements that are allowed to expand. array of DOM nodes

  var flexOffsets = []; // amount of vertical space it takes up

  var flexHeights = []; // actual css height

  var usedHeight = 0;
  undistributeHeight(els); // give all elements their natural height
  // find elements that are below the recommended height (expandable).
  // important to query for heights in a single first pass (to avoid reflow oscillation).

  els.forEach(function (el, i) {
    var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
    var naturalHeight = el.getBoundingClientRect().height;
    var naturalOffset = naturalHeight + computeVMargins(el);

    if (naturalOffset < minOffset) {
      flexEls.push(el);
      flexOffsets.push(naturalOffset);
      flexHeights.push(naturalHeight);
    } else {
      // this element stretches past recommended height (non-expandable). mark the space as occupied.
      usedHeight += naturalOffset;
    }
  }); // readjust the recommended height to only consider the height available to non-maxed-out rows.

  if (shouldRedistribute) {
    availableHeight -= usedHeight;
    minOffset1 = Math.floor(availableHeight / flexEls.length);
    minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
  } // assign heights to all expandable elements


  flexEls.forEach(function (el, i) {
    var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
    var naturalOffset = flexOffsets[i];
    var naturalHeight = flexHeights[i];
    var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding

    if (naturalOffset < minOffset) {
      // we check this again because redistribution might have changed things
      el.style.height = newHeight + 'px';
    }
  });
} // Undoes distrubuteHeight, restoring all els to their natural height


function undistributeHeight(els) {
  els.forEach(function (el) {
    el.style.height = '';
  });
} // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline


function matchCellWidths(els) {
  var maxInnerWidth = 0;
  els.forEach(function (el) {
    var innerEl = el.firstChild; // hopefully an element

    if (innerEl instanceof HTMLElement) {
      var innerWidth_1 = innerEl.getBoundingClientRect().width;

      if (innerWidth_1 > maxInnerWidth) {
        maxInnerWidth = innerWidth_1;
      }
    }
  });
  maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance

  els.forEach(function (el) {
    el.style.width = maxInnerWidth + 'px';
  });
  return maxInnerWidth;
} // Given one element that resides inside another,
// Subtracts the height of the inner element from the outer element.


function subtractInnerElHeight(outerEl, innerEl) {
  // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
  var reflowStyleProps = {
    position: 'relative',
    left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll

  };
  applyStyle(outerEl, reflowStyleProps);
  applyStyle(innerEl, reflowStyleProps);
  var diff = // grab the dimensions
  outerEl.getBoundingClientRect().height - innerEl.getBoundingClientRect().height; // undo hack

  var resetStyleProps = {
    position: '',
    left: ''
  };
  applyStyle(outerEl, resetStyleProps);
  applyStyle(innerEl, resetStyleProps);
  return diff;
}
/* Selection
----------------------------------------------------------------------------------------------------------------------*/


function preventSelection(el) {
  el.classList.add('fc-unselectable');
  el.addEventListener('selectstart', preventDefault);
}

function allowSelection(el) {
  el.classList.remove('fc-unselectable');
  el.removeEventListener('selectstart', preventDefault);
}
/* Context Menu
----------------------------------------------------------------------------------------------------------------------*/


function preventContextMenu(el) {
  el.addEventListener('contextmenu', preventDefault);
}

function allowContextMenu(el) {
  el.removeEventListener('contextmenu', preventDefault);
}
/* Object Ordering by Field
----------------------------------------------------------------------------------------------------------------------*/


function parseFieldSpecs(input) {
  var specs = [];
  var tokens = [];
  var i;
  var token;

  if (typeof input === 'string') {
    tokens = input.split(/\s*,\s*/);
  } else if (typeof input === 'function') {
    tokens = [input];
  } else if (Array.isArray(input)) {
    tokens = input;
  }

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    if (typeof token === 'string') {
      specs.push(token.charAt(0) === '-' ? {
        field: token.substring(1),
        order: -1
      } : {
        field: token,
        order: 1
      });
    } else if (typeof token === 'function') {
      specs.push({
        func: token
      });
    }
  }

  return specs;
}

function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
  var i;
  var cmp;

  for (i = 0; i < fieldSpecs.length; i++) {
    cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);

    if (cmp) {
      return cmp;
    }
  }

  return 0;
}

function compareByFieldSpec(obj0, obj1, fieldSpec) {
  if (fieldSpec.func) {
    return fieldSpec.func(obj0, obj1);
  }

  return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
}

function flexibleCompare(a, b) {
  if (!a && !b) {
    return 0;
  }

  if (b == null) {
    return -1;
  }

  if (a == null) {
    return 1;
  }

  if (typeof a === 'string' || typeof b === 'string') {
    return String(a).localeCompare(String(b));
  }

  return a - b;
}
/* String Utilities
----------------------------------------------------------------------------------------------------------------------*/


function capitaliseFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function padStart(val, len) {
  var s = String(val);
  return '000'.substr(0, len - s.length) + s;
}
/* Number Utilities
----------------------------------------------------------------------------------------------------------------------*/


function compareNumbers(a, b) {
  return a - b;
}

function isInt(n) {
  return n % 1 === 0;
}
/* Weird Utilities
----------------------------------------------------------------------------------------------------------------------*/


function applyAll(functions, thisObj, args) {
  if (typeof functions === 'function') {
    // supplied a single function
    functions = [functions];
  }

  if (functions) {
    var i = void 0;
    var ret = void 0;

    for (i = 0; i < functions.length; i++) {
      ret = functions[i].apply(thisObj, args) || ret;
    }

    return ret;
  }
}

function firstDefined() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  for (var i = 0; i < args.length; i++) {
    if (args[i] !== undefined) {
      return args[i];
    }
  }
} // Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714


function debounce(func, wait) {
  var timeout;
  var args;
  var context;
  var timestamp;
  var result;

  var later = function () {
    var last = new Date().valueOf() - timestamp;

    if (last < wait) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    }
  };

  return function () {
    context = this;
    args = arguments;
    timestamp = new Date().valueOf();

    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    return result;
  };
} // Number and Boolean are only types that defaults or not computed for
// TODO: write more comments


function refineProps(rawProps, processors, defaults, leftoverProps) {
  if (defaults === void 0) {
    defaults = {};
  }

  var refined = {};

  for (var key in processors) {
    var processor = processors[key];

    if (rawProps[key] !== undefined) {
      // found
      if (processor === Function) {
        refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;
      } else if (processor) {
        // a refining function?
        refined[key] = processor(rawProps[key]);
      } else {
        refined[key] = rawProps[key];
      }
    } else if (defaults[key] !== undefined) {
      // there's an explicit default
      refined[key] = defaults[key];
    } else {
      // must compute a default
      if (processor === String) {
        refined[key] = ''; // empty string is default for String
      } else if (!processor || processor === Number || processor === Boolean || processor === Function) {
        refined[key] = null; // assign null for other non-custom processor funcs
      } else {
        refined[key] = processor(null); // run the custom processor func
      }
    }
  }

  if (leftoverProps) {
    for (var key in rawProps) {
      if (processors[key] === undefined) {
        leftoverProps[key] = rawProps[key];
      }
    }
  }

  return refined;
}
/* Date stuff that doesn't belong in datelib core
----------------------------------------------------------------------------------------------------------------------*/
// given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.


function computeAlignedDayRange(timedRange) {
  var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
  var start = startOfDay(timedRange.start);
  var end = addDays(start, dayCnt);
  return {
    start: start,
    end: end
  };
} // given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg


function computeVisibleDayRange(timedRange, nextDayThreshold) {
  if (nextDayThreshold === void 0) {
    nextDayThreshold = createDuration(0);
  }

  var startDay = null;
  var endDay = null;

  if (timedRange.end) {
    endDay = startOfDay(timedRange.end);
    var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
    // If the end time is actually inclusively part of the next day and is equal to or
    // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
    // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.

    if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {
      endDay = addDays(endDay, 1);
    }
  }

  if (timedRange.start) {
    startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
    // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.

    if (endDay && endDay <= startDay) {
      endDay = addDays(startDay, 1);
    }
  }

  return {
    start: startDay,
    end: endDay
  };
} // spans from one day into another?


function isMultiDayRange(range) {
  var visibleRange = computeVisibleDayRange(range);
  return diffDays(visibleRange.start, visibleRange.end) > 1;
}

function diffDates(date0, date1, dateEnv, largeUnit) {
  if (largeUnit === 'year') {
    return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
  } else if (largeUnit === 'month') {
    return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
  } else {
    return diffDayAndTime(date0, date1); // returns a duration
  }
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */


var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {
  for (var i = 0; i < recurringTypes.length; i++) {
    var localLeftovers = {};
    var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);

    if (parsed) {
      var allDay = localLeftovers.allDay;
      delete localLeftovers.allDay; // remove from leftovers

      if (allDay == null) {
        allDay = allDayDefault;

        if (allDay == null) {
          allDay = parsed.allDayGuess;

          if (allDay == null) {
            allDay = false;
          }
        }
      }

      __assign(leftovers, localLeftovers);

      return {
        allDay: allDay,
        duration: parsed.duration,
        typeData: parsed.typeData,
        typeId: i
      };
    }
  }

  return null;
}
/*
Event MUST have a recurringDef
*/


function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
  var typeDef = recurringTypes[eventDef.recurringDef.typeId];
  var markers = typeDef.expand(eventDef.recurringDef.typeData, {
    start: dateEnv.subtract(framingRange.start, duration),
    end: framingRange.end
  }, dateEnv); // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to

  if (eventDef.allDay) {
    markers = markers.map(startOfDay);
  }

  return markers;
}

var hasOwnProperty = Object.prototype.hasOwnProperty; // Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.

function mergeProps(propObjs, complexProps) {
  var dest = {};
  var i;
  var name;
  var complexObjs;
  var j;
  var val;
  var props;

  if (complexProps) {
    for (i = 0; i < complexProps.length; i++) {
      name = complexProps[i];
      complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered

      for (j = propObjs.length - 1; j >= 0; j--) {
        val = propObjs[j][name];

        if (typeof val === 'object' && val) {
          // non-null object
          complexObjs.unshift(val);
        } else if (val !== undefined) {
          dest[name] = val; // if there were no objects, this value will be used

          break;
        }
      } // if the trailing values were objects, use the merged value


      if (complexObjs.length) {
        dest[name] = mergeProps(complexObjs);
      }
    }
  } // copy values into the destination, going from last to first


  for (i = propObjs.length - 1; i >= 0; i--) {
    props = propObjs[i];

    for (name in props) {
      if (!(name in dest)) {
        // if already assigned by previous props or complex props, don't reassign
        dest[name] = props[name];
      }
    }
  }

  return dest;
}

function filterHash(hash, func) {
  var filtered = {};

  for (var key in hash) {
    if (func(hash[key], key)) {
      filtered[key] = hash[key];
    }
  }

  return filtered;
}

function mapHash(hash, func) {
  var newHash = {};

  for (var key in hash) {
    newHash[key] = func(hash[key], key);
  }

  return newHash;
}

function arrayToHash(a) {
  var hash = {};

  for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
    var item = a_1[_i];
    hash[item] = true;
  }

  return hash;
}

function hashValuesToArray(obj) {
  var a = [];

  for (var key in obj) {
    a.push(obj[key]);
  }

  return a;
}

function isPropsEqual(obj0, obj1) {
  for (var key in obj0) {
    if (hasOwnProperty.call(obj0, key)) {
      if (!(key in obj1)) {
        return false;
      }
    }
  }

  for (var key in obj1) {
    if (hasOwnProperty.call(obj1, key)) {
      if (obj0[key] !== obj1[key]) {
        return false;
      }
    }
  }

  return true;
}

function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {
  var eventStore = createEmptyEventStore();

  for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {
    var rawEvent = rawEvents_1[_i];
    var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);

    if (tuple) {
      eventTupleToStore(tuple, eventStore);
    }
  }

  return eventStore;
}

function eventTupleToStore(tuple, eventStore) {
  if (eventStore === void 0) {
    eventStore = createEmptyEventStore();
  }

  eventStore.defs[tuple.def.defId] = tuple.def;

  if (tuple.instance) {
    eventStore.instances[tuple.instance.instanceId] = tuple.instance;
  }

  return eventStore;
}

function expandRecurring(eventStore, framingRange, calendar) {
  var dateEnv = calendar.dateEnv;
  var defs = eventStore.defs,
      instances = eventStore.instances; // remove existing recurring instances

  instances = filterHash(instances, function (instance) {
    return !defs[instance.defId].recurringDef;
  });

  for (var defId in defs) {
    var def = defs[defId];

    if (def.recurringDef) {
      var duration = def.recurringDef.duration;

      if (!duration) {
        duration = def.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration;
      }

      var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);

      for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {
        var start = starts_1[_i];
        var instance = createEventInstance(defId, {
          start: start,
          end: dateEnv.add(start, duration)
        });
        instances[instance.instanceId] = instance;
      }
    }
  }

  return {
    defs: defs,
    instances: instances
  };
} // retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?


function getRelevantEvents(eventStore, instanceId) {
  var instance = eventStore.instances[instanceId];

  if (instance) {
    var def_1 = eventStore.defs[instance.defId]; // get events/instances with same group

    var newStore = filterEventStoreDefs(eventStore, function (lookDef) {
      return isEventDefsGrouped(def_1, lookDef);
    }); // add the original
    // TODO: wish we could use eventTupleToStore or something like it

    newStore.defs[def_1.defId] = def_1;
    newStore.instances[instance.instanceId] = instance;
    return newStore;
  }

  return createEmptyEventStore();
}

function isEventDefsGrouped(def0, def1) {
  return Boolean(def0.groupId && def0.groupId === def1.groupId);
}

function transformRawEvents(rawEvents, eventSource, calendar) {
  var calEachTransform = calendar.opt('eventDataTransform');
  var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;

  if (sourceEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
  }

  if (calEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
  }

  return rawEvents;
}

function transformEachRawEvent(rawEvents, func) {
  var refinedEvents;

  if (!func) {
    refinedEvents = rawEvents;
  } else {
    refinedEvents = [];

    for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {
      var rawEvent = rawEvents_2[_i];
      var refinedEvent = func(rawEvent);

      if (refinedEvent) {
        refinedEvents.push(refinedEvent);
      } else if (refinedEvent == null) {
        refinedEvents.push(rawEvent);
      } // if a different falsy value, do nothing

    }
  }

  return refinedEvents;
}

function createEmptyEventStore() {
  return {
    defs: {},
    instances: {}
  };
}

function mergeEventStores(store0, store1) {
  return {
    defs: __assign({}, store0.defs, store1.defs),
    instances: __assign({}, store0.instances, store1.instances)
  };
}

function filterEventStoreDefs(eventStore, filterFunc) {
  var defs = filterHash(eventStore.defs, filterFunc);
  var instances = filterHash(eventStore.instances, function (instance) {
    return defs[instance.defId]; // still exists?
  });
  return {
    defs: defs,
    instances: instances
  };
}

function parseRange(input, dateEnv) {
  var start = null;
  var end = null;

  if (input.start) {
    start = dateEnv.createMarker(input.start);
  }

  if (input.end) {
    end = dateEnv.createMarker(input.end);
  }

  if (!start && !end) {
    return null;
  }

  if (start && end && end < start) {
    return null;
  }

  return {
    start: start,
    end: end
  };
} // SIDE-EFFECT: will mutate ranges.
// Will return a new array result.


function invertRanges(ranges, constraintRange) {
  var invertedRanges = [];
  var start = constraintRange.start; // the end of the previous range. the start of the new range

  var i;
  var dateRange; // ranges need to be in order. required for our date-walking algorithm

  ranges.sort(compareRanges);

  for (i = 0; i < ranges.length; i++) {
    dateRange = ranges[i]; // add the span of time before the event (if there is any)

    if (dateRange.start > start) {
      // compare millisecond time (skip any ambig logic)
      invertedRanges.push({
        start: start,
        end: dateRange.start
      });
    }

    if (dateRange.end > start) {
      start = dateRange.end;
    }
  } // add the span of time after the last event (if there is any)


  if (start < constraintRange.end) {
    // compare millisecond time (skip any ambig logic)
    invertedRanges.push({
      start: start,
      end: constraintRange.end
    });
  }

  return invertedRanges;
}

function compareRanges(range0, range1) {
  return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
}

function intersectRanges(range0, range1) {
  var start = range0.start;
  var end = range0.end;
  var newRange = null;

  if (range1.start !== null) {
    if (start === null) {
      start = range1.start;
    } else {
      start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
    }
  }

  if (range1.end != null) {
    if (end === null) {
      end = range1.end;
    } else {
      end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
    }
  }

  if (start === null || end === null || start < end) {
    newRange = {
      start: start,
      end: end
    };
  }

  return newRange;
}

function rangesEqual(range0, range1) {
  return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
}

function rangesIntersect(range0, range1) {
  return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
}

function rangeContainsRange(outerRange, innerRange) {
  return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
}

function rangeContainsMarker(range, date) {
  return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
} // If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).


function constrainMarkerToRange(date, range) {
  if (range.start != null && date < range.start) {
    return range.start;
  }

  if (range.end != null && date >= range.end) {
    return new Date(range.end.valueOf() - 1);
  }

  return date;
}

function removeExact(array, exactVal) {
  var removeCnt = 0;
  var i = 0;

  while (i < array.length) {
    if (array[i] === exactVal) {
      array.splice(i, 1);
      removeCnt++;
    } else {
      i++;
    }
  }

  return removeCnt;
}

function isArraysEqual(a0, a1) {
  var len = a0.length;
  var i;

  if (len !== a1.length) {
    // not array? or not same length?
    return false;
  }

  for (i = 0; i < len; i++) {
    if (a0[i] !== a1[i]) {
      return false;
    }
  }

  return true;
}

function memoize(workerFunc) {
  var args;
  var res;
  return function () {
    if (!args || !isArraysEqual(args, arguments)) {
      args = arguments;
      res = workerFunc.apply(this, arguments);
    }

    return res;
  };
}
/*
always executes the workerFunc, but if the result is equal to the previous result,
return the previous result instead.
*/


function memoizeOutput(workerFunc, equalityFunc) {
  var cachedRes = null;
  return function () {
    var newRes = workerFunc.apply(this, arguments);

    if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {
      cachedRes = newRes;
    }

    return cachedRes;
  };
}

var EXTENDED_SETTINGS_AND_SEVERITIES = {
  week: 3,
  separator: 0,
  omitZeroMinute: 0,
  meridiem: 0,
  omitCommas: 0
};
var STANDARD_DATE_PROP_SEVERITIES = {
  timeZoneName: 7,
  era: 6,
  year: 5,
  month: 4,
  day: 2,
  weekday: 2,
  hour: 1,
  minute: 1,
  second: 1
};
var MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too

var COMMA_RE = /,/g; // we need re for globalness

var MULTI_SPACE_RE = /\s+/g;
var LTR_RE = /\u200e/g; // control character

var UTC_RE = /UTC|GMT/;

var NativeFormatter =
/** @class */
function () {
  function NativeFormatter(formatSettings) {
    var standardDateProps = {};
    var extendedSettings = {};
    var severity = 0;

    for (var name_1 in formatSettings) {
      if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {
        extendedSettings[name_1] = formatSettings[name_1];
        severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);
      } else {
        standardDateProps[name_1] = formatSettings[name_1];

        if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {
          severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);
        }
      }
    }

    this.standardDateProps = standardDateProps;
    this.extendedSettings = extendedSettings;
    this.severity = severity;
    this.buildFormattingFunc = memoize(buildFormattingFunc);
  }

  NativeFormatter.prototype.format = function (date, context) {
    return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
  };

  NativeFormatter.prototype.formatRange = function (start, end, context) {
    var _a = this,
        standardDateProps = _a.standardDateProps,
        extendedSettings = _a.extendedSettings;

    var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);

    if (!diffSeverity) {
      return this.format(start, context);
    }

    var biggestUnitForPartial = diffSeverity;

    if (biggestUnitForPartial > 1 && ( // the two dates are different in a way that's larger scale than time
    standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {
      biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
    }

    var full0 = this.format(start, context);
    var full1 = this.format(end, context);

    if (full0 === full1) {
      return full0;
    }

    var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
    var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
    var partial0 = partialFormattingFunc(start);
    var partial1 = partialFormattingFunc(end);
    var insertion = findCommonInsertion(full0, partial0, full1, partial1);
    var separator = extendedSettings.separator || '';

    if (insertion) {
      return insertion.before + partial0 + separator + partial1 + insertion.after;
    }

    return full0 + separator + full1;
  };

  NativeFormatter.prototype.getLargestUnit = function () {
    switch (this.severity) {
      case 7:
      case 6:
      case 5:
        return 'year';

      case 4:
        return 'month';

      case 3:
        return 'week';

      default:
        return 'day';
    }
  };

  return NativeFormatter;
}();

function buildFormattingFunc(standardDateProps, extendedSettings, context) {
  var standardDatePropCnt = Object.keys(standardDateProps).length;

  if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {
    return function (date) {
      return formatTimeZoneOffset(date.timeZoneOffset);
    };
  }

  if (standardDatePropCnt === 0 && extendedSettings.week) {
    return function (date) {
      return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);
    };
  }

  return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
}

function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
  standardDateProps = __assign({}, standardDateProps); // copy

  extendedSettings = __assign({}, extendedSettings); // copy

  sanitizeSettings(standardDateProps, extendedSettings);
  standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers

  var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
  var zeroFormat; // needed?

  if (extendedSettings.omitZeroMinute) {
    var zeroProps = __assign({}, standardDateProps);

    delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings

    zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
  }

  return function (date) {
    var marker = date.marker;
    var format;

    if (zeroFormat && !marker.getUTCMinutes()) {
      format = zeroFormat;
    } else {
      format = normalFormat;
    }

    var s = format.format(marker);
    return postProcess(s, date, standardDateProps, extendedSettings, context);
  };
}

function sanitizeSettings(standardDateProps, extendedSettings) {
  // deal with a browser inconsistency where formatting the timezone
  // requires that the hour/minute be present.
  if (standardDateProps.timeZoneName) {
    if (!standardDateProps.hour) {
      standardDateProps.hour = '2-digit';
    }

    if (!standardDateProps.minute) {
      standardDateProps.minute = '2-digit';
    }
  } // only support short timezone names


  if (standardDateProps.timeZoneName === 'long') {
    standardDateProps.timeZoneName = 'short';
  } // if requesting to display seconds, MUST display minutes


  if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {
    delete extendedSettings.omitZeroMinute;
  }
}

function postProcess(s, date, standardDateProps, extendedSettings, context) {
  s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes

  if (standardDateProps.timeZoneName === 'short') {
    s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : // important to normalize for IE, which does "GMT"
    formatTimeZoneOffset(date.timeZoneOffset));
  }

  if (extendedSettings.omitCommas) {
    s = s.replace(COMMA_RE, '').trim();
  }

  if (extendedSettings.omitZeroMinute) {
    s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
  } // ^ do anything that might create adjacent spaces before this point,
  // because MERIDIEM_RE likes to eat up loading spaces


  if (extendedSettings.meridiem === false) {
    s = s.replace(MERIDIEM_RE, '').trim();
  } else if (extendedSettings.meridiem === 'narrow') {
    // a/p
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase();
    });
  } else if (extendedSettings.meridiem === 'short') {
    // am/pm
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase() + 'm';
    });
  } else if (extendedSettings.meridiem === 'lowercase') {
    // other meridiem transformers already converted to lowercase
    s = s.replace(MERIDIEM_RE, function (m0) {
      return m0.toLocaleLowerCase();
    });
  }

  s = s.replace(MULTI_SPACE_RE, ' ');
  s = s.trim();
  return s;
}

function injectTzoStr(s, tzoStr) {
  var replaced = false;
  s = s.replace(UTC_RE, function () {
    replaced = true;
    return tzoStr;
  }); // IE11 doesn't include UTC/GMT in the original string, so append to end

  if (!replaced) {
    s += ' ' + tzoStr;
  }

  return s;
}

function formatWeekNumber(num, weekLabel, locale, display) {
  var parts = [];

  if (display === 'narrow') {
    parts.push(weekLabel);
  } else if (display === 'short') {
    parts.push(weekLabel, ' ');
  } // otherwise, considered 'numeric'


  parts.push(locale.simpleNumberFormat.format(num));

  if (locale.options.isRtl) {
    // TODO: use control characters instead?
    parts.reverse();
  }

  return parts.join('');
} // Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger


function computeMarkerDiffSeverity(d0, d1, ca) {
  if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {
    return 5;
  }

  if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {
    return 4;
  }

  if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {
    return 2;
  }

  if (timeAsMs(d0) !== timeAsMs(d1)) {
    return 1;
  }

  return 0;
}

function computePartialFormattingOptions(options, biggestUnit) {
  var partialOptions = {};

  for (var name_2 in options) {
    if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
    STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {
      partialOptions[name_2] = options[name_2];
    }
  }

  return partialOptions;
}

function findCommonInsertion(full0, partial0, full1, partial1) {
  var i0 = 0;

  while (i0 < full0.length) {
    var found0 = full0.indexOf(partial0, i0);

    if (found0 === -1) {
      break;
    }

    var before0 = full0.substr(0, found0);
    i0 = found0 + partial0.length;
    var after0 = full0.substr(i0);
    var i1 = 0;

    while (i1 < full1.length) {
      var found1 = full1.indexOf(partial1, i1);

      if (found1 === -1) {
        break;
      }

      var before1 = full1.substr(0, found1);
      i1 = found1 + partial1.length;
      var after1 = full1.substr(i1);

      if (before0 === before1 && after0 === after1) {
        return {
          before: before0,
          after: after0
        };
      }
    }
  }

  return null;
}
/*
TODO: fix the terminology of "formatter" vs "formatting func"
*/

/*
At the time of instantiation, this object does not know which cmd-formatting system it will use.
It receives this at the time of formatting, as a setting.
*/


var CmdFormatter =
/** @class */
function () {
  function CmdFormatter(cmdStr, separator) {
    this.cmdStr = cmdStr;
    this.separator = separator;
  }

  CmdFormatter.prototype.format = function (date, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));
  };

  CmdFormatter.prototype.formatRange = function (start, end, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));
  };

  return CmdFormatter;
}();

var FuncFormatter =
/** @class */
function () {
  function FuncFormatter(func) {
    this.func = func;
  }

  FuncFormatter.prototype.format = function (date, context) {
    return this.func(createVerboseFormattingArg(date, null, context));
  };

  FuncFormatter.prototype.formatRange = function (start, end, context) {
    return this.func(createVerboseFormattingArg(start, end, context));
  };

  return FuncFormatter;
}(); // Formatter Object Creation


function createFormatter(input, defaultSeparator) {
  if (typeof input === 'object' && input) {
    // non-null object
    if (typeof defaultSeparator === 'string') {
      input = __assign({
        separator: defaultSeparator
      }, input);
    }

    return new NativeFormatter(input);
  } else if (typeof input === 'string') {
    return new CmdFormatter(input, defaultSeparator);
  } else if (typeof input === 'function') {
    return new FuncFormatter(input);
  }
} // String Utils
// timeZoneOffset is in minutes


function buildIsoString(marker, timeZoneOffset, stripZeroTime) {
  if (stripZeroTime === void 0) {
    stripZeroTime = false;
  }

  var s = marker.toISOString();
  s = s.replace('.000', '');

  if (stripZeroTime) {
    s = s.replace('T00:00:00Z', '');
  }

  if (s.length > 10) {
    // time part wasn't stripped, can add timezone info
    if (timeZoneOffset == null) {
      s = s.replace('Z', '');
    } else if (timeZoneOffset !== 0) {
      s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
    } // otherwise, its UTC-0 and we want to keep the Z

  }

  return s;
}

function formatIsoTimeString(marker) {
  return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
}

function formatTimeZoneOffset(minutes, doIso) {
  if (doIso === void 0) {
    doIso = false;
  }

  var sign = minutes < 0 ? '-' : '+';
  var abs = Math.abs(minutes);
  var hours = Math.floor(abs / 60);
  var mins = Math.round(abs % 60);

  if (doIso) {
    return sign + padStart(hours, 2) + ':' + padStart(mins, 2);
  } else {
    return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');
  }
} // Arg Utils


function createVerboseFormattingArg(start, end, context, separator) {
  var startInfo = expandZonedMarker(start, context.calendarSystem);
  var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
  return {
    date: startInfo,
    start: startInfo,
    end: endInfo,
    timeZone: context.timeZone,
    localeCodes: context.locale.codes,
    separator: separator
  };
}

function expandZonedMarker(dateInfo, calendarSystem) {
  var a = calendarSystem.markerToArray(dateInfo.marker);
  return {
    marker: dateInfo.marker,
    timeZoneOffset: dateInfo.timeZoneOffset,
    array: a,
    year: a[0],
    month: a[1],
    day: a[2],
    hour: a[3],
    minute: a[4],
    second: a[5],
    millisecond: a[6]
  };
}

var EventSourceApi =
/** @class */
function () {
  function EventSourceApi(calendar, internalEventSource) {
    this.calendar = calendar;
    this.internalEventSource = internalEventSource;
  }

  EventSourceApi.prototype.remove = function () {
    this.calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: this.internalEventSource.sourceId
    });
  };

  EventSourceApi.prototype.refetch = function () {
    this.calendar.dispatch({
      type: 'FETCH_EVENT_SOURCES',
      sourceIds: [this.internalEventSource.sourceId]
    });
  };

  Object.defineProperty(EventSourceApi.prototype, "id", {
    get: function () {
      return this.internalEventSource.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventSourceApi.prototype, "url", {
    // only relevant to json-feed event sources
    get: function () {
      return this.internalEventSource.meta.url;
    },
    enumerable: true,
    configurable: true
  });
  return EventSourceApi;
}();

var EventApi =
/** @class */
function () {
  function EventApi(calendar, def, instance) {
    this._calendar = calendar;
    this._def = def;
    this._instance = instance || null;
  }
  /*
  TODO: make event struct more responsible for this
  */


  EventApi.prototype.setProp = function (name, val) {
    var _a, _b;

    if (name in DATE_PROPS) ;else if (name in NON_DATE_PROPS) {
      if (typeof NON_DATE_PROPS[name] === 'function') {
        val = NON_DATE_PROPS[name](val);
      }

      this.mutate({
        standardProps: (_a = {}, _a[name] = val, _a)
      });
    } else if (name in UNSCOPED_EVENT_UI_PROPS) {
      var ui = void 0;

      if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {
        val = UNSCOPED_EVENT_UI_PROPS[name](val);
      }

      if (name === 'color') {
        ui = {
          backgroundColor: val,
          borderColor: val
        };
      } else if (name === 'editable') {
        ui = {
          startEditable: val,
          durationEditable: val
        };
      } else {
        ui = (_b = {}, _b[name] = val, _b);
      }

      this.mutate({
        standardProps: {
          ui: ui
        }
      });
    }
  };

  EventApi.prototype.setExtendedProp = function (name, val) {
    var _a;

    this.mutate({
      extendedProps: (_a = {}, _a[name] = val, _a)
    });
  };

  EventApi.prototype.setStart = function (startInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var start = dateEnv.createMarker(startInput);

    if (start && this._instance) {
      // TODO: warning if parsed bad
      var instanceRange = this._instance.range;
      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?

      if (options.maintainDuration) {
        this.mutate({
          datesDelta: startDelta
        });
      } else {
        this.mutate({
          startDelta: startDelta
        });
      }
    }
  };

  EventApi.prototype.setEnd = function (endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var end;

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        return; // TODO: warning if parsed bad
      }
    }

    if (this._instance) {
      if (end) {
        var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
        this.mutate({
          endDelta: endDelta
        });
      } else {
        this.mutate({
          standardProps: {
            hasEnd: false
          }
        });
      }
    }
  };

  EventApi.prototype.setDates = function (startInput, endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var standardProps = {
      allDay: options.allDay
    };
    var start = dateEnv.createMarker(startInput);
    var end;

    if (!start) {
      return; // TODO: warning if parsed bad
    }

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        // TODO: warning if parsed bad
        return;
      }
    }

    if (this._instance) {
      var instanceRange = this._instance.range; // when computing the diff for an event being converted to all-day,
      // compute diff off of the all-day values the way event-mutation does.

      if (options.allDay === true) {
        instanceRange = computeAlignedDayRange(instanceRange);
      }

      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);

      if (end) {
        var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);

        if (durationsEqual(startDelta, endDelta)) {
          this.mutate({
            datesDelta: startDelta,
            standardProps: standardProps
          });
        } else {
          this.mutate({
            startDelta: startDelta,
            endDelta: endDelta,
            standardProps: standardProps
          });
        }
      } else {
        // means "clear the end"
        standardProps.hasEnd = false;
        this.mutate({
          datesDelta: startDelta,
          standardProps: standardProps
        });
      }
    }
  };

  EventApi.prototype.moveStart = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        startDelta: delta
      });
    }
  };

  EventApi.prototype.moveEnd = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        endDelta: delta
      });
    }
  };

  EventApi.prototype.moveDates = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        datesDelta: delta
      });
    }
  };

  EventApi.prototype.setAllDay = function (allDay, options) {
    if (options === void 0) {
      options = {};
    }

    var standardProps = {
      allDay: allDay
    };
    var maintainDuration = options.maintainDuration;

    if (maintainDuration == null) {
      maintainDuration = this._calendar.opt('allDayMaintainDuration');
    }

    if (this._def.allDay !== allDay) {
      standardProps.hasEnd = maintainDuration;
    }

    this.mutate({
      standardProps: standardProps
    });
  };

  EventApi.prototype.formatRange = function (formatInput) {
    var dateEnv = this._calendar.dateEnv;
    var instance = this._instance;
    var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));

    if (this._def.hasEnd) {
      return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
        forcedStartTzo: instance.forcedStartTzo,
        forcedEndTzo: instance.forcedEndTzo
      });
    } else {
      return dateEnv.format(instance.range.start, formatter, {
        forcedTzo: instance.forcedStartTzo
      });
    }
  };

  EventApi.prototype.mutate = function (mutation) {
    var def = this._def;
    var instance = this._instance;

    if (instance) {
      this._calendar.dispatch({
        type: 'MUTATE_EVENTS',
        instanceId: instance.instanceId,
        mutation: mutation,
        fromApi: true
      });

      var eventStore = this._calendar.state.eventStore;
      this._def = eventStore.defs[def.defId];
      this._instance = eventStore.instances[instance.instanceId];
    }
  };

  EventApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_EVENT_DEF',
      defId: this._def.defId
    });
  };

  Object.defineProperty(EventApi.prototype, "source", {
    get: function () {
      var sourceId = this._def.sourceId;

      if (sourceId) {
        return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "start", {
    get: function () {
      return this._instance ? this._calendar.dateEnv.toDate(this._instance.range.start) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "end", {
    get: function () {
      return this._instance && this._def.hasEnd ? this._calendar.dateEnv.toDate(this._instance.range.end) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "id", {
    // computable props that all access the def
    // TODO: find a TypeScript-compatible way to do this at scale
    get: function () {
      return this._def.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "groupId", {
    get: function () {
      return this._def.groupId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allDay", {
    get: function () {
      return this._def.allDay;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "title", {
    get: function () {
      return this._def.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "url", {
    get: function () {
      return this._def.url;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "rendering", {
    get: function () {
      return this._def.rendering;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "startEditable", {
    get: function () {
      return this._def.ui.startEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "durationEditable", {
    get: function () {
      return this._def.ui.durationEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "constraint", {
    get: function () {
      return this._def.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "overlap", {
    get: function () {
      return this._def.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allow", {
    get: function () {
      return this._def.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "backgroundColor", {
    get: function () {
      return this._def.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "borderColor", {
    get: function () {
      return this._def.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "textColor", {
    get: function () {
      return this._def.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "classNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._def.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "extendedProps", {
    get: function () {
      return this._def.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return EventApi;
}();
/*
Specifying nextDayThreshold signals that all-day ranges should be sliced.
*/


function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
  var inverseBgByGroupId = {};
  var inverseBgByDefId = {};
  var defByGroupId = {};
  var bgRanges = [];
  var fgRanges = [];
  var eventUis = compileEventUis(eventStore.defs, eventUiBases);

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];

    if (def.rendering === 'inverse-background') {
      if (def.groupId) {
        inverseBgByGroupId[def.groupId] = [];

        if (!defByGroupId[def.groupId]) {
          defByGroupId[def.groupId] = def;
        }
      } else {
        inverseBgByDefId[defId] = [];
      }
    }
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = eventStore.defs[instance.defId];
    var ui = eventUis[def.defId];
    var origRange = instance.range;
    var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
    var slicedRange = intersectRanges(normalRange, framingRange);

    if (slicedRange) {
      if (def.rendering === 'inverse-background') {
        if (def.groupId) {
          inverseBgByGroupId[def.groupId].push(slicedRange);
        } else {
          inverseBgByDefId[instance.defId].push(slicedRange);
        }
      } else {
        (def.rendering === 'background' ? bgRanges : fgRanges).push({
          def: def,
          ui: ui,
          instance: instance,
          range: slicedRange,
          isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
          isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
        });
      }
    }
  }

  for (var groupId in inverseBgByGroupId) {
    // BY GROUP
    var ranges = inverseBgByGroupId[groupId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {
      var invertedRange = invertedRanges_1[_i];
      var def = defByGroupId[groupId];
      var ui = eventUis[def.defId];
      bgRanges.push({
        def: def,
        ui: ui,
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  for (var defId in inverseBgByDefId) {
    var ranges = inverseBgByDefId[defId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {
      var invertedRange = invertedRanges_2[_a];
      bgRanges.push({
        def: eventStore.defs[defId],
        ui: eventUis[defId],
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  return {
    bg: bgRanges,
    fg: fgRanges
  };
}

function hasBgRendering(def) {
  return def.rendering === 'background' || def.rendering === 'inverse-background';
}

function filterSegsViaEls(context, segs, isMirror) {
  var calendar = context.calendar,
      view = context.view;

  if (calendar.hasPublicHandlers('eventRender')) {
    segs = segs.filter(function (seg) {
      var custom = calendar.publiclyTrigger('eventRender', [{
        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
        isMirror: isMirror,
        isStart: seg.isStart,
        isEnd: seg.isEnd,
        // TODO: include seg.range once all components consistently generate it
        el: seg.el,
        view: view
      }]);

      if (custom === false) {
        // means don't render at all
        return false;
      } else if (custom && custom !== true) {
        seg.el = custom;
      }

      return true;
    });
  }

  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
    var seg = segs_1[_i];
    setElSeg(seg.el, seg);
  }

  return segs;
}

function setElSeg(el, seg) {
  el.fcSeg = seg;
}

function getElSeg(el) {
  return el.fcSeg || null;
} // event ui computation


function compileEventUis(eventDefs, eventUiBases) {
  return mapHash(eventDefs, function (eventDef) {
    return compileEventUi(eventDef, eventUiBases);
  });
}

function compileEventUi(eventDef, eventUiBases) {
  var uis = [];

  if (eventUiBases['']) {
    uis.push(eventUiBases['']);
  }

  if (eventUiBases[eventDef.defId]) {
    uis.push(eventUiBases[eventDef.defId]);
  }

  uis.push(eventDef.ui);
  return combineEventUis(uis);
} // triggers


function triggerRenderedSegs(context, segs, isMirrors) {
  var calendar = context.calendar,
      view = context.view;

  if (calendar.hasPublicHandlers('eventPositioned')) {
    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      calendar.publiclyTriggerAfterSizing('eventPositioned', [{
        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
        isMirror: isMirrors,
        isStart: seg.isStart,
        isEnd: seg.isEnd,
        el: seg.el,
        view: view
      }]);
    }
  }

  if (!calendar.state.loadingLevel) {
    // avoid initial empty state while pending
    calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once
  }
}

function triggerWillRemoveSegs(context, segs, isMirrors) {
  var calendar = context.calendar,
      view = context.view;

  for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
    var seg = segs_3[_i];
    calendar.trigger('eventElRemove', seg.el);
  }

  if (calendar.hasPublicHandlers('eventDestroy')) {
    for (var _a = 0, segs_4 = segs; _a < segs_4.length; _a++) {
      var seg = segs_4[_a];
      calendar.publiclyTrigger('eventDestroy', [{
        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
        isMirror: isMirrors,
        el: seg.el,
        view: view
      }]);
    }
  }
} // is-interactable


function computeEventDraggable(context, eventDef, eventUi) {
  var calendar = context.calendar,
      view = context.view;
  var transformers = calendar.pluginSystem.hooks.isDraggableTransformers;
  var val = eventUi.startEditable;

  for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
    var transformer = transformers_1[_i];
    val = transformer(val, eventDef, eventUi, view);
  }

  return val;
}

function computeEventStartResizable(context, eventDef, eventUi) {
  return eventUi.durationEditable && context.options.eventResizableFromStart;
}

function computeEventEndResizable(context, eventDef, eventUi) {
  return eventUi.durationEditable;
} // applies the mutation to ALL defs/instances within the event store


function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {
  var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
  var dest = createEmptyEventStore();

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];
    dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = dest.defs[instance.defId]; // important to grab the newly modified def

    dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);
  }

  return dest;
}

function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {
  var standardProps = mutation.standardProps || {}; // if hasEnd has not been specified, guess a good value based on deltas.
  // if duration will change, there's no way the default duration will persist,
  // and thus, we need to mark the event as having a real end

  if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {
    standardProps.hasEnd = true; // TODO: is this mutation okay?
  }

  var copy = __assign({}, eventDef, standardProps, {
    ui: __assign({}, eventDef.ui, standardProps.ui)
  });

  if (mutation.extendedProps) {
    copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);
  }

  for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {
    var applier = appliers_1[_i];
    applier(copy, mutation, calendar);
  }

  if (!copy.hasEnd && calendar.opt('forceEventDuration')) {
    copy.hasEnd = true;
  }

  return copy;
}

function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef
eventConfig, mutation, calendar) {
  var dateEnv = calendar.dateEnv;
  var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
  var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;

  var copy = __assign({}, eventInstance);

  if (forceAllDay) {
    copy.range = computeAlignedDayRange(copy.range);
  }

  if (mutation.datesDelta && eventConfig.startEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.datesDelta),
      end: dateEnv.add(copy.range.end, mutation.datesDelta)
    };
  }

  if (mutation.startDelta && eventConfig.durationEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.startDelta),
      end: copy.range.end
    };
  }

  if (mutation.endDelta && eventConfig.durationEditable) {
    copy.range = {
      start: copy.range.start,
      end: dateEnv.add(copy.range.end, mutation.endDelta)
    };
  }

  if (clearEnd) {
    copy.range = {
      start: copy.range.start,
      end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)
    };
  } // in case event was all-day but the supplied deltas were not
  // better util for this?


  if (eventDef.allDay) {
    copy.range = {
      start: startOfDay(copy.range.start),
      end: startOfDay(copy.range.end)
    };
  } // handle invalid durations


  if (copy.range.end < copy.range.start) {
    copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);
  }

  return copy;
}

function reduceEventStore(eventStore, action, eventSources, dateProfile, calendar) {
  switch (action.type) {
    case 'RECEIVE_EVENTS':
      // raw
      return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);

    case 'ADD_EVENTS':
      // already parsed, but not expanded
      return addEvent(eventStore, action.eventStore, // new ones
      dateProfile ? dateProfile.activeRange : null, calendar);

    case 'MERGE_EVENTS':
      // already parsed and expanded
      return mergeEventStores(eventStore, action.eventStore);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return expandRecurring(eventStore, dateProfile.activeRange, calendar);
      } else {
        return eventStore;
      }

    case 'CHANGE_TIMEZONE':
      return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);

    case 'MUTATE_EVENTS':
      return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);

    case 'REMOVE_EVENT_INSTANCES':
      return excludeInstances(eventStore, action.instances);

    case 'REMOVE_EVENT_DEF':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return eventDef.defId !== action.defId;
      });

    case 'REMOVE_EVENT_SOURCE':
      return excludeEventsBySourceId(eventStore, action.sourceId);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return !eventDef.sourceId; // only keep events with no source id
      });

    case 'REMOVE_ALL_EVENTS':
      return createEmptyEventStore();

    case 'RESET_EVENTS':
      return {
        defs: eventStore.defs,
        instances: eventStore.instances
      };

    default:
      return eventStore;
  }
}

function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {
  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
  ) {
      var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);

      if (fetchRange) {
        subset = expandRecurring(subset, fetchRange, calendar);
      }

      return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
    }

  return eventStore;
}

function addEvent(eventStore, subset, expandRange, calendar) {
  if (expandRange) {
    subset = expandRecurring(subset, expandRange, calendar);
  }

  return mergeEventStores(eventStore, subset);
}

function rezoneDates(eventStore, oldDateEnv, newDateEnv) {
  var defs = eventStore.defs;
  var instances = mapHash(eventStore.instances, function (instance) {
    var def = defs[instance.defId];

    if (def.allDay || def.recurringDef) {
      return instance; // isn't dependent on timezone
    } else {
      return __assign({}, instance, {
        range: {
          start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
          end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
        },
        forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
        forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
      });
    }
  });
  return {
    defs: defs,
    instances: instances
  };
}

function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {
  var relevant = getRelevantEvents(eventStore, instanceId);
  var eventConfigBase = fromApi ? {
    '': {
      startEditable: true,
      durationEditable: true,
      constraints: [],
      overlap: null,
      allows: [],
      backgroundColor: '',
      borderColor: '',
      textColor: '',
      classNames: []
    }
  } : calendar.eventUiBases;
  relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);
  return mergeEventStores(eventStore, relevant);
}

function excludeEventsBySourceId(eventStore, sourceId) {
  return filterEventStoreDefs(eventStore, function (eventDef) {
    return eventDef.sourceId !== sourceId;
  });
} // QUESTION: why not just return instances? do a general object-property-exclusion util


function excludeInstances(eventStore, removals) {
  return {
    defs: eventStore.defs,
    instances: filterHash(eventStore.instances, function (instance) {
      return !removals[instance.instanceId];
    })
  };
} // high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionValid(interaction, calendar) {
  return isNewPropsValid({
    eventDrag: interaction
  }, calendar); // HACK: the eventDrag props is used for ALL interactions
}

function isDateSelectionValid(dateSelection, calendar) {
  return isNewPropsValid({
    dateSelection: dateSelection
  }, calendar);
}

function isNewPropsValid(newProps, calendar) {
  var view = calendar.view;

  var props = __assign({
    businessHours: view ? view.props.businessHours : createEmptyEventStore(),
    dateSelection: '',
    eventStore: calendar.state.eventStore,
    eventUiBases: calendar.eventUiBases,
    eventSelection: '',
    eventDrag: null,
    eventResize: null
  }, newProps);

  return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);
}

function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  if (dateSpanMeta === void 0) {
    dateSpanMeta = {};
  }

  if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  return true;
} // Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions

  var subjectEventStore = interaction.mutatedEvents;
  var subjectDefs = subjectEventStore.defs;
  var subjectInstances = subjectEventStore.instances;
  var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
    '': calendar.selectionConfig
  } // if not a real event, validate as a selection
  );

  if (filterConfig) {
    subjectConfigs = mapHash(subjectConfigs, filterConfig);
  }

  var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?

  var otherDefs = otherEventStore.defs;
  var otherInstances = otherEventStore.instances;
  var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);

  for (var subjectInstanceId in subjectInstances) {
    var subjectInstance = subjectInstances[subjectInstanceId];
    var subjectRange = subjectInstance.range;
    var subjectConfig = subjectConfigs[subjectInstance.defId];
    var subjectDef = subjectDefs[subjectInstance.defId]; // constraint

    if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {
      return false;
    } // overlap


    var overlapFunc = calendar.opt('eventOverlap');

    if (typeof overlapFunc !== 'function') {
      overlapFunc = null;
    }

    for (var otherInstanceId in otherInstances) {
      var otherInstance = otherInstances[otherInstanceId]; // intersect! evaluate

      if (rangesIntersect(subjectRange, otherInstance.range)) {
        var otherOverlap = otherConfigs[otherInstance.defId].overlap; // consider the other event's overlap. only do this if the subject event is a "real" event

        if (otherOverlap === false && interaction.isEvent) {
          return false;
        }

        if (subjectConfig.overlap === false) {
          return false;
        }

        if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event
        new EventApi(calendar, subjectDef, subjectInstance) // moving event
        )) {
          return false;
        }
      }
    } // allow (a function)


    var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state

    for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {
      var subjectAllow = _a[_i];

      var subjectDateSpan = __assign({}, dateSpanMeta, {
        range: subjectInstance.range,
        allDay: subjectDef.allDay
      });

      var origDef = calendarEventStore.defs[subjectDef.defId];
      var origInstance = calendarEventStore.instances[subjectInstanceId];
      var eventApi = void 0;

      if (origDef) {
        // was previously in the calendar
        eventApi = new EventApi(calendar, origDef, origInstance);
      } else {
        // was an external event
        eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates
      }

      if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {
        return false;
      }
    }
  }

  return true;
} // Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------


function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var relevantEventStore = state.eventStore;
  var relevantDefs = relevantEventStore.defs;
  var relevantInstances = relevantEventStore.instances;
  var selection = state.dateSelection;
  var selectionRange = selection.range;
  var selectionConfig = calendar.selectionConfig;

  if (filterConfig) {
    selectionConfig = filterConfig(selectionConfig);
  } // constraint


  if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {
    return false;
  } // overlap


  var overlapFunc = calendar.opt('selectOverlap');

  if (typeof overlapFunc !== 'function') {
    overlapFunc = null;
  }

  for (var relevantInstanceId in relevantInstances) {
    var relevantInstance = relevantInstances[relevantInstanceId]; // intersect! evaluate

    if (rangesIntersect(selectionRange, relevantInstance.range)) {
      if (selectionConfig.overlap === false) {
        return false;
      }

      if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {
        return false;
      }
    }
  } // allow (a function)


  for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {
    var selectionAllow = _a[_i];

    var fullDateSpan = __assign({}, dateSpanMeta, selection);

    if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {
      return false;
    }
  }

  return true;
} // Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------


function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {
  for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
    var constraint = constraints_1[_i];

    if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {
      return false;
    }
  }

  return true;
}

function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours
otherEventStore, // for if constraint is an even group ID
businessHoursUnexpanded, // for if constraint is 'businessHours'
calendar // for expanding businesshours
) {
  if (constraint === 'businessHours') {
    return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));
  } else if (typeof constraint === 'string') {
    // an group ID
    return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {
      return eventDef.groupId === constraint;
    }));
  } else if (typeof constraint === 'object' && constraint) {
    // non-null object
    return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));
  }

  return []; // if it's false
} // TODO: move to event-store file?


function eventStoreToRanges(eventStore) {
  var instances = eventStore.instances;
  var ranges = [];

  for (var instanceId in instances) {
    ranges.push(instances[instanceId].range);
  }

  return ranges;
} // TODO: move to geom file?


function anyRangesContainRange(outerRanges, innerRange) {
  for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {
    var outerRange = outerRanges_1[_i];

    if (rangeContainsRange(outerRange, innerRange)) {
      return true;
    }
  }

  return false;
} // Parsing
// ------------------------------------------------------------------------------------------------------------------------


function normalizeConstraint(input, calendar) {
  if (Array.isArray(input)) {
    return parseEvents(input, '', calendar, true); // allowOpenRange=true
  } else if (typeof input === 'object' && input) {
    // non-null object
    return parseEvents([input], '', calendar, true); // allowOpenRange=true
  } else if (input != null) {
    return String(input);
  } else {
    return null;
  }
}

function htmlEscape(s) {
  return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/\n/g, '<br />');
} // Given a hash of CSS properties, returns a string of CSS.
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.


function cssToStr(cssProps) {
  var statements = [];

  for (var name_1 in cssProps) {
    var val = cssProps[name_1];

    if (val != null && val !== '') {
      statements.push(name_1 + ':' + val);
    }
  }

  return statements.join(';');
} // Given an object hash of HTML attribute names to values,
// generates a string that can be injected between < > in HTML


function attrsToStr(attrs) {
  var parts = [];

  for (var name_2 in attrs) {
    var val = attrs[name_2];

    if (val != null) {
      parts.push(name_2 + '="' + htmlEscape(val) + '"');
    }
  }

  return parts.join(' ');
}

function parseClassName(raw) {
  if (Array.isArray(raw)) {
    return raw;
  } else if (typeof raw === 'string') {
    return raw.split(/\s+/);
  } else {
    return [];
  }
}

var UNSCOPED_EVENT_UI_PROPS = {
  editable: Boolean,
  startEditable: Boolean,
  durationEditable: Boolean,
  constraint: null,
  overlap: null,
  allow: null,
  className: parseClassName,
  classNames: parseClassName,
  color: String,
  backgroundColor: String,
  borderColor: String,
  textColor: String
};

function processUnscopedUiProps(rawProps, calendar, leftovers) {
  var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);
  var constraint = normalizeConstraint(props.constraint, calendar);
  return {
    startEditable: props.startEditable != null ? props.startEditable : props.editable,
    durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,
    constraints: constraint != null ? [constraint] : [],
    overlap: props.overlap,
    allows: props.allow != null ? [props.allow] : [],
    backgroundColor: props.backgroundColor || props.color,
    borderColor: props.borderColor || props.color,
    textColor: props.textColor,
    classNames: props.classNames.concat(props.className)
  };
}

function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {
  var rawUnscoped = {};
  var wasFound = {};

  for (var key in UNSCOPED_EVENT_UI_PROPS) {
    var scopedKey = prefix + capitaliseFirstLetter(key);
    rawUnscoped[key] = rawScoped[scopedKey];
    wasFound[scopedKey] = true;
  }

  if (prefix === 'event') {
    rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'
  }

  if (leftovers) {
    for (var key in rawScoped) {
      if (!wasFound[key]) {
        leftovers[key] = rawScoped[key];
      }
    }
  }

  return processUnscopedUiProps(rawUnscoped, calendar);
}

var EMPTY_EVENT_UI = {
  startEditable: null,
  durationEditable: null,
  constraints: [],
  overlap: null,
  allows: [],
  backgroundColor: '',
  borderColor: '',
  textColor: '',
  classNames: []
}; // prevent against problems with <2 args!

function combineEventUis(uis) {
  return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
}

function combineTwoEventUis(item0, item1) {
  return {
    startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
    durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
    constraints: item0.constraints.concat(item1.constraints),
    overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
    allows: item0.allows.concat(item1.allows),
    backgroundColor: item1.backgroundColor || item0.backgroundColor,
    borderColor: item1.borderColor || item0.borderColor,
    textColor: item1.textColor || item0.textColor,
    classNames: item0.classNames.concat(item1.classNames)
  };
}

var NON_DATE_PROPS = {
  id: String,
  groupId: String,
  title: String,
  url: String,
  rendering: String,
  extendedProps: null
};
var DATE_PROPS = {
  start: null,
  date: null,
  end: null,
  allDay: null
};
var uid = 0;

function parseEvent(raw, sourceId, calendar, allowOpenRange) {
  var allDayDefault = computeIsAllDayDefault(sourceId, calendar);
  var leftovers0 = {};
  var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out
  allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props
  );

  if (recurringRes) {
    var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);
    def.recurringDef = {
      typeId: recurringRes.typeId,
      typeData: recurringRes.typeData,
      duration: recurringRes.duration
    };
    return {
      def: def,
      instance: null
    };
  } else {
    var leftovers1 = {};
    var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);

    if (singleRes) {
      var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);
      var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
      return {
        def: def,
        instance: instance
      };
    }
  }

  return null;
}
/*
Will NOT populate extendedProps with the leftover properties.
Will NOT populate date-related props.
The EventNonDateInput has been normalized (id => publicId, etc).
*/


function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {
  var leftovers = {};
  var def = pluckNonDateProps(raw, calendar, leftovers);
  def.defId = String(uid++);
  def.sourceId = sourceId;
  def.allDay = allDay;
  def.hasEnd = hasEnd;

  for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {
    var eventDefParser = _a[_i];
    var newLeftovers = {};
    eventDefParser(def, leftovers, newLeftovers);
    leftovers = newLeftovers;
  }

  def.extendedProps = __assign(leftovers, def.extendedProps || {}); // help out EventApi from having user modify props

  Object.freeze(def.ui.classNames);
  Object.freeze(def.extendedProps);
  return def;
}

function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
  return {
    instanceId: String(uid++),
    defId: defId,
    range: range,
    forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
    forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
  };
}

function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {
  var props = pluckDateProps(raw, leftovers);
  var allDay = props.allDay;
  var startMeta;
  var startMarker = null;
  var hasEnd = false;
  var endMeta;
  var endMarker = null;
  startMeta = calendar.dateEnv.createMarkerMeta(props.start);

  if (startMeta) {
    startMarker = startMeta.marker;
  } else if (!allowOpenRange) {
    return null;
  }

  if (props.end != null) {
    endMeta = calendar.dateEnv.createMarkerMeta(props.end);
  }

  if (allDay == null) {
    if (allDayDefault != null) {
      allDay = allDayDefault;
    } else {
      // fall back to the date props LAST
      allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
    }
  }

  if (allDay && startMarker) {
    startMarker = startOfDay(startMarker);
  }

  if (endMeta) {
    endMarker = endMeta.marker;

    if (allDay) {
      endMarker = startOfDay(endMarker);
    }

    if (startMarker && endMarker <= startMarker) {
      endMarker = null;
    }
  }

  if (endMarker) {
    hasEnd = true;
  } else if (!allowOpenRange) {
    hasEnd = calendar.opt('forceEventDuration') || false;
    endMarker = calendar.dateEnv.add(startMarker, allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);
  }

  return {
    allDay: allDay,
    hasEnd: hasEnd,
    range: {
      start: startMarker,
      end: endMarker
    },
    forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
    forcedEndTzo: endMeta ? endMeta.forcedTzo : null
  };
}

function pluckDateProps(raw, leftovers) {
  var props = refineProps(raw, DATE_PROPS, {}, leftovers);
  props.start = props.start !== null ? props.start : props.date;
  delete props.date;
  return props;
}

function pluckNonDateProps(raw, calendar, leftovers) {
  var preLeftovers = {};
  var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);
  var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);
  props.publicId = props.id;
  delete props.id;
  props.ui = ui;
  return props;
}

function computeIsAllDayDefault(sourceId, calendar) {
  var res = null;

  if (sourceId) {
    var source = calendar.state.eventSources[sourceId];
    res = source.allDayDefault;
  }

  if (res == null) {
    res = calendar.opt('allDayDefault');
  }

  return res;
}

var DEF_DEFAULTS = {
  startTime: '09:00',
  endTime: '17:00',
  daysOfWeek: [1, 2, 3, 4, 5],
  rendering: 'inverse-background',
  classNames: 'fc-nonbusiness',
  groupId: '_businessHours' // so multiple defs get grouped

};
/*
TODO: pass around as EventDefHash!!!
*/

function parseBusinessHours(input, calendar) {
  return parseEvents(refineInputs(input), '', calendar);
}

function refineInputs(input) {
  var rawDefs;

  if (input === true) {
    rawDefs = [{}]; // will get DEF_DEFAULTS verbatim
  } else if (Array.isArray(input)) {
    // if specifying an array, every sub-definition NEEDS a day-of-week
    rawDefs = input.filter(function (rawDef) {
      return rawDef.daysOfWeek;
    });
  } else if (typeof input === 'object' && input) {
    // non-null object
    rawDefs = [input];
  } else {
    // is probably false
    rawDefs = [];
  }

  rawDefs = rawDefs.map(function (rawDef) {
    return __assign({}, DEF_DEFAULTS, rawDef);
  });
  return rawDefs;
}

function memoizeRendering(renderFunc, unrenderFunc, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }

  var dependents = [];
  var thisContext;
  var prevArgs;

  function unrender() {
    if (prevArgs) {
      for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {
        var dependent = dependents_1[_i];
        dependent.unrender();
      }

      if (unrenderFunc) {
        unrenderFunc.apply(thisContext, prevArgs);
      }

      prevArgs = null;
    }
  }

  function res() {
    if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {
      unrender();
      thisContext = this;
      prevArgs = arguments;
      renderFunc.apply(this, arguments);
    }
  }

  res.dependents = dependents;
  res.unrender = unrender;

  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
    var dependency = dependencies_1[_i];
    dependency.dependents.push(res);
  }

  return res;
}

var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere

var Splitter =
/** @class */
function () {
  function Splitter() {
    this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
    this.splitDateSelection = memoize(this._splitDateSpan);
    this.splitEventStore = memoize(this._splitEventStore);
    this.splitIndividualUi = memoize(this._splitIndividualUi);
    this.splitEventDrag = memoize(this._splitInteraction);
    this.splitEventResize = memoize(this._splitInteraction);
    this.eventUiBuilders = {}; // TODO: typescript protection
  }

  Splitter.prototype.splitProps = function (props) {
    var _this = this;

    var keyInfos = this.getKeyInfo(props);
    var defKeys = this.getKeysForEventDefs(props.eventStore);
    var dateSelections = this.splitDateSelection(props.dateSelection);
    var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*

    var eventStores = this.splitEventStore(props.eventStore, defKeys);
    var eventDrags = this.splitEventDrag(props.eventDrag);
    var eventResizes = this.splitEventResize(props.eventResize);
    var splitProps = {};
    this.eventUiBuilders = mapHash(keyInfos, function (info, key) {
      return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);
    });

    for (var key in keyInfos) {
      var keyInfo = keyInfos[key];
      var eventStore = eventStores[key] || EMPTY_EVENT_STORE;
      var buildEventUi = this.eventUiBuilders[key];
      splitProps[key] = {
        businessHours: keyInfo.businessHours || props.businessHours,
        dateSelection: dateSelections[key] || null,
        eventStore: eventStore,
        eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
        eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
        eventDrag: eventDrags[key] || null,
        eventResize: eventResizes[key] || null
      };
    }

    return splitProps;
  };

  Splitter.prototype._splitDateSpan = function (dateSpan) {
    var dateSpans = {};

    if (dateSpan) {
      var keys = this.getKeysForDateSpan(dateSpan);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        dateSpans[key] = dateSpan;
      }
    }

    return dateSpans;
  };

  Splitter.prototype._getKeysForEventDefs = function (eventStore) {
    var _this = this;

    return mapHash(eventStore.defs, function (eventDef) {
      return _this.getKeysForEventDef(eventDef);
    });
  };

  Splitter.prototype._splitEventStore = function (eventStore, defKeys) {
    var defs = eventStore.defs,
        instances = eventStore.instances;
    var splitStores = {};

    for (var defId in defs) {
      for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
        var key = _a[_i];

        if (!splitStores[key]) {
          splitStores[key] = createEmptyEventStore();
        }

        splitStores[key].defs[defId] = defs[defId];
      }
    }

    for (var instanceId in instances) {
      var instance = instances[instanceId];

      for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {
        var key = _c[_b];

        if (splitStores[key]) {
          // must have already been created
          splitStores[key].instances[instanceId] = instance;
        }
      }
    }

    return splitStores;
  };

  Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {
    var splitHashes = {};

    for (var defId in eventUiBases) {
      if (defId) {
        // not the '' key
        for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
          var key = _a[_i];

          if (!splitHashes[key]) {
            splitHashes[key] = {};
          }

          splitHashes[key][defId] = eventUiBases[defId];
        }
      }
    }

    return splitHashes;
  };

  Splitter.prototype._splitInteraction = function (interaction) {
    var splitStates = {};

    if (interaction) {
      var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar
      ); // can't rely on defKeys because event data is mutated


      var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);

      var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);

      var populate = function (key) {
        if (!splitStates[key]) {
          splitStates[key] = {
            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,
            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,
            isEvent: interaction.isEvent,
            origSeg: interaction.origSeg
          };
        }
      };

      for (var key in affectedStores_1) {
        populate(key);
      }

      for (var key in mutatedStores_1) {
        populate(key);
      }
    }

    return splitStates;
  };

  return Splitter;
}();

function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
  var baseParts = [];

  if (allUi) {
    baseParts.push(allUi);
  }

  if (eventUiForKey) {
    baseParts.push(eventUiForKey);
  }

  var stuff = {
    '': combineEventUis(baseParts)
  };

  if (individualUi) {
    __assign(stuff, individualUi);
  }

  return stuff;
} // Generates HTML for an anchor to another view into the calendar.
// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
// `gotoOptions` can either be a DateMarker, or an object with the form:
// { date, type, forceOff }
// `type` is a view-type like "day" or "week". default value is "day".
// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.


function buildGotoAnchorHtml(allOptions, dateEnv, gotoOptions, attrs, innerHtml) {
  var date;
  var type;
  var forceOff;
  var finalOptions;

  if (gotoOptions instanceof Date) {
    date = gotoOptions; // a single date-like input
  } else {
    date = gotoOptions.date;
    type = gotoOptions.type;
    forceOff = gotoOptions.forceOff;
  }

  finalOptions = {
    date: dateEnv.formatIso(date, {
      omitTime: true
    }),
    type: type || 'day'
  };

  if (typeof attrs === 'string') {
    innerHtml = attrs;
    attrs = null;
  }

  attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space

  innerHtml = innerHtml || '';

  if (!forceOff && allOptions.navLinks) {
    return '<a' + attrs + ' data-goto="' + htmlEscape(JSON.stringify(finalOptions)) + '">' + innerHtml + '</a>';
  } else {
    return '<span' + attrs + '>' + innerHtml + '</span>';
  }
}

function getAllDayHtml(allOptions) {
  return allOptions.allDayHtml || htmlEscape(allOptions.allDayText);
} // Computes HTML classNames for a single-day element


function getDayClasses(date, dateProfile, context, noThemeHighlight) {
  var calendar = context.calendar,
      options = context.options,
      theme = context.theme,
      dateEnv = context.dateEnv;
  var classes = [];
  var todayStart;
  var todayEnd;

  if (!rangeContainsMarker(dateProfile.activeRange, date)) {
    classes.push('fc-disabled-day');
  } else {
    classes.push('fc-' + DAY_IDS[date.getUTCDay()]);

    if (options.monthMode && dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {
      classes.push('fc-other-month');
    }

    todayStart = startOfDay(calendar.getNow());
    todayEnd = addDays(todayStart, 1);

    if (date < todayStart) {
      classes.push('fc-past');
    } else if (date >= todayEnd) {
      classes.push('fc-future');
    } else {
      classes.push('fc-today');

      if (noThemeHighlight !== true) {
        classes.push(theme.getClass('today'));
      }
    }
  }

  return classes;
} // given a function that resolves a result asynchronously.
// the function can either call passed-in success and failure callbacks,
// or it can return a promise.
// if you need to pass additional params to func, bind them first.


function unpromisify(func, success, failure) {
  // guard against success/failure callbacks being called more than once
  // and guard against a promise AND callback being used together.
  var isResolved = false;

  var wrappedSuccess = function () {
    if (!isResolved) {
      isResolved = true;
      success.apply(this, arguments);
    }
  };

  var wrappedFailure = function () {
    if (!isResolved) {
      isResolved = true;

      if (failure) {
        failure.apply(this, arguments);
      }
    }
  };

  var res = func(wrappedSuccess, wrappedFailure);

  if (res && typeof res.then === 'function') {
    res.then(wrappedSuccess, wrappedFailure);
  }
}

var Mixin =
/** @class */
function () {
  function Mixin() {} // mix into a CLASS


  Mixin.mixInto = function (destClass) {
    this.mixIntoObj(destClass.prototype);
  }; // mix into ANY object


  Mixin.mixIntoObj = function (destObj) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      if (!destObj[name]) {
        // if destination doesn't already define it
        destObj[name] = _this.prototype[name];
      }
    });
  };
  /*
  will override existing methods
  TODO: remove! not used anymore
  */


  Mixin.mixOver = function (destClass) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      destClass.prototype[name] = _this.prototype[name];
    });
  };

  return Mixin;
}();
/*
USAGE:
  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
in class:
  on: EmitterInterface['on']
  one: EmitterInterface['one']
  off: EmitterInterface['off']
  trigger: EmitterInterface['trigger']
  triggerWith: EmitterInterface['triggerWith']
  hasHandlers: EmitterInterface['hasHandlers']
after class:
  EmitterMixin.mixInto(TheClass)
*/


var EmitterMixin =
/** @class */
function (_super) {
  __extends(EmitterMixin, _super);

  function EmitterMixin() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EmitterMixin.prototype.on = function (type, handler) {
    addToHash(this._handlers || (this._handlers = {}), type, handler);
    return this; // for chaining
  }; // todo: add comments


  EmitterMixin.prototype.one = function (type, handler) {
    addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);
    return this; // for chaining
  };

  EmitterMixin.prototype.off = function (type, handler) {
    if (this._handlers) {
      removeFromHash(this._handlers, type, handler);
    }

    if (this._oneHandlers) {
      removeFromHash(this._oneHandlers, type, handler);
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.trigger = function (type) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    this.triggerWith(type, this, args);
    return this; // for chaining
  };

  EmitterMixin.prototype.triggerWith = function (type, context, args) {
    if (this._handlers) {
      applyAll(this._handlers[type], context, args);
    }

    if (this._oneHandlers) {
      applyAll(this._oneHandlers[type], context, args);
      delete this._oneHandlers[type]; // will never fire again
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.hasHandlers = function (type) {
    return this._handlers && this._handlers[type] && this._handlers[type].length || this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length;
  };

  return EmitterMixin;
}(Mixin);

function addToHash(hash, type, handler) {
  (hash[type] || (hash[type] = [])).push(handler);
}

function removeFromHash(hash, type, handler) {
  if (handler) {
    if (hash[type]) {
      hash[type] = hash[type].filter(function (func) {
        return func !== handler;
      });
    }
  } else {
    delete hash[type]; // remove all handler funcs for this type
  }
}
/*
Records offset information for a set of elements, relative to an origin element.
Can record the left/right OR the top/bottom OR both.
Provides methods for querying the cache by position.
*/


var PositionCache =
/** @class */
function () {
  function PositionCache(originEl, els, isHorizontal, isVertical) {
    this.originEl = originEl;
    this.els = els;
    this.isHorizontal = isHorizontal;
    this.isVertical = isVertical;
  } // Queries the els for coordinates and stores them.
  // Call this method before using and of the get* methods below.


  PositionCache.prototype.build = function () {
    var originEl = this.originEl;
    var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left

    if (this.isHorizontal) {
      this.buildElHorizontals(originClientRect.left);
    }

    if (this.isVertical) {
      this.buildElVerticals(originClientRect.top);
    }
  }; // Populates the left/right internal coordinate arrays


  PositionCache.prototype.buildElHorizontals = function (originClientLeft) {
    var lefts = [];
    var rights = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      lefts.push(rect.left - originClientLeft);
      rights.push(rect.right - originClientLeft);
    }

    this.lefts = lefts;
    this.rights = rights;
  }; // Populates the top/bottom internal coordinate arrays


  PositionCache.prototype.buildElVerticals = function (originClientTop) {
    var tops = [];
    var bottoms = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      tops.push(rect.top - originClientTop);
      bottoms.push(rect.bottom - originClientTop);
    }

    this.tops = tops;
    this.bottoms = bottoms;
  }; // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.leftToIndex = function (leftPosition) {
    var lefts = this.lefts;
    var rights = this.rights;
    var len = lefts.length;
    var i;

    for (i = 0; i < len; i++) {
      if (leftPosition >= lefts[i] && leftPosition < rights[i]) {
        return i;
      }
    }
  }; // Given a top offset (from document top), returns the index of the el that it vertically intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.topToIndex = function (topPosition) {
    var tops = this.tops;
    var bottoms = this.bottoms;
    var len = tops.length;
    var i;

    for (i = 0; i < len; i++) {
      if (topPosition >= tops[i] && topPosition < bottoms[i]) {
        return i;
      }
    }
  }; // Gets the width of the element at the given index


  PositionCache.prototype.getWidth = function (leftIndex) {
    return this.rights[leftIndex] - this.lefts[leftIndex];
  }; // Gets the height of the element at the given index


  PositionCache.prototype.getHeight = function (topIndex) {
    return this.bottoms[topIndex] - this.tops[topIndex];
  };

  return PositionCache;
}();
/*
An object for getting/setting scroll-related information for an element.
Internally, this is done very differently for window versus DOM element,
so this object serves as a common interface.
*/


var ScrollController =
/** @class */
function () {
  function ScrollController() {}

  ScrollController.prototype.getMaxScrollTop = function () {
    return this.getScrollHeight() - this.getClientHeight();
  };

  ScrollController.prototype.getMaxScrollLeft = function () {
    return this.getScrollWidth() - this.getClientWidth();
  };

  ScrollController.prototype.canScrollVertically = function () {
    return this.getMaxScrollTop() > 0;
  };

  ScrollController.prototype.canScrollHorizontally = function () {
    return this.getMaxScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollUp = function () {
    return this.getScrollTop() > 0;
  };

  ScrollController.prototype.canScrollDown = function () {
    return this.getScrollTop() < this.getMaxScrollTop();
  };

  ScrollController.prototype.canScrollLeft = function () {
    return this.getScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollRight = function () {
    return this.getScrollLeft() < this.getMaxScrollLeft();
  };

  return ScrollController;
}();

var ElementScrollController =
/** @class */
function (_super) {
  __extends(ElementScrollController, _super);

  function ElementScrollController(el) {
    var _this = _super.call(this) || this;

    _this.el = el;
    return _this;
  }

  ElementScrollController.prototype.getScrollTop = function () {
    return this.el.scrollTop;
  };

  ElementScrollController.prototype.getScrollLeft = function () {
    return this.el.scrollLeft;
  };

  ElementScrollController.prototype.setScrollTop = function (top) {
    this.el.scrollTop = top;
  };

  ElementScrollController.prototype.setScrollLeft = function (left) {
    this.el.scrollLeft = left;
  };

  ElementScrollController.prototype.getScrollWidth = function () {
    return this.el.scrollWidth;
  };

  ElementScrollController.prototype.getScrollHeight = function () {
    return this.el.scrollHeight;
  };

  ElementScrollController.prototype.getClientHeight = function () {
    return this.el.clientHeight;
  };

  ElementScrollController.prototype.getClientWidth = function () {
    return this.el.clientWidth;
  };

  return ElementScrollController;
}(ScrollController);

var WindowScrollController =
/** @class */
function (_super) {
  __extends(WindowScrollController, _super);

  function WindowScrollController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WindowScrollController.prototype.getScrollTop = function () {
    return window.pageYOffset;
  };

  WindowScrollController.prototype.getScrollLeft = function () {
    return window.pageXOffset;
  };

  WindowScrollController.prototype.setScrollTop = function (n) {
    window.scroll(window.pageXOffset, n);
  };

  WindowScrollController.prototype.setScrollLeft = function (n) {
    window.scroll(n, window.pageYOffset);
  };

  WindowScrollController.prototype.getScrollWidth = function () {
    return document.documentElement.scrollWidth;
  };

  WindowScrollController.prototype.getScrollHeight = function () {
    return document.documentElement.scrollHeight;
  };

  WindowScrollController.prototype.getClientHeight = function () {
    return document.documentElement.clientHeight;
  };

  WindowScrollController.prototype.getClientWidth = function () {
    return document.documentElement.clientWidth;
  };

  return WindowScrollController;
}(ScrollController);
/*
Embodies a div that has potential scrollbars
*/


var ScrollComponent =
/** @class */
function (_super) {
  __extends(ScrollComponent, _super);

  function ScrollComponent(overflowX, overflowY) {
    var _this = _super.call(this, createElement('div', {
      className: 'fc-scroller'
    })) || this;

    _this.overflowX = overflowX;
    _this.overflowY = overflowY;

    _this.applyOverflow();

    return _this;
  } // sets to natural height, unlocks overflow


  ScrollComponent.prototype.clear = function () {
    this.setHeight('auto');
    this.applyOverflow();
  };

  ScrollComponent.prototype.destroy = function () {
    removeElement(this.el);
  }; // Overflow
  // -----------------------------------------------------------------------------------------------------------------


  ScrollComponent.prototype.applyOverflow = function () {
    applyStyle(this.el, {
      overflowX: this.overflowX,
      overflowY: this.overflowY
    });
  }; // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
  // Useful for preserving scrollbar widths regardless of future resizes.
  // Can pass in scrollbarWidths for optimization.


  ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {
    var overflowX = this.overflowX;
    var overflowY = this.overflowY;
    scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();

    if (overflowX === 'auto') {
      overflowX = scrollbarWidths.bottom || // horizontal scrollbars?
      this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    if (overflowY === 'auto') {
      overflowY = scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?
      this.canScrollVertically() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    applyStyle(this.el, {
      overflowX: overflowX,
      overflowY: overflowY
    });
  };

  ScrollComponent.prototype.setHeight = function (height) {
    applyStyleProp(this.el, 'height', height);
  };

  ScrollComponent.prototype.getScrollbarWidths = function () {
    var edges = computeEdges(this.el);
    return {
      left: edges.scrollbarLeft,
      right: edges.scrollbarRight,
      bottom: edges.scrollbarBottom
    };
  };

  return ScrollComponent;
}(ElementScrollController);

var Theme =
/** @class */
function () {
  function Theme(calendarOptions) {
    this.calendarOptions = calendarOptions;
    this.processIconOverride();
  }

  Theme.prototype.processIconOverride = function () {
    if (this.iconOverrideOption) {
      this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);
    }
  };

  Theme.prototype.setIconOverride = function (iconOverrideHash) {
    var iconClassesCopy;
    var buttonName;

    if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
      // non-null object
      iconClassesCopy = __assign({}, this.iconClasses);

      for (buttonName in iconOverrideHash) {
        iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
      }

      this.iconClasses = iconClassesCopy;
    } else if (iconOverrideHash === false) {
      this.iconClasses = {};
    }
  };

  Theme.prototype.applyIconOverridePrefix = function (className) {
    var prefix = this.iconOverridePrefix;

    if (prefix && className.indexOf(prefix) !== 0) {
      // if not already present
      className = prefix + className;
    }

    return className;
  };

  Theme.prototype.getClass = function (key) {
    return this.classes[key] || '';
  };

  Theme.prototype.getIconClass = function (buttonName) {
    var className = this.iconClasses[buttonName];

    if (className) {
      return this.baseIconClass + ' ' + className;
    }

    return '';
  };

  Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
    var className;

    if (this.iconOverrideCustomButtonOption) {
      className = customButtonProps[this.iconOverrideCustomButtonOption];

      if (className) {
        return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
      }
    }

    return '';
  };

  return Theme;
}();

Theme.prototype.classes = {};
Theme.prototype.iconClasses = {};
Theme.prototype.baseIconClass = '';
Theme.prototype.iconOverridePrefix = '';
var guid = 0;

var ComponentContext =
/** @class */
function () {
  function ComponentContext(calendar, theme, dateEnv, options, view) {
    this.calendar = calendar;
    this.theme = theme;
    this.dateEnv = dateEnv;
    this.options = options;
    this.view = view;
    this.isRtl = options.dir === 'rtl';
    this.eventOrderSpecs = parseFieldSpecs(options.eventOrder);
    this.nextDayThreshold = createDuration(options.nextDayThreshold);
  }

  ComponentContext.prototype.extend = function (options, view) {
    return new ComponentContext(this.calendar, this.theme, this.dateEnv, options || this.options, view || this.view);
  };

  return ComponentContext;
}();

var Component =
/** @class */
function () {
  function Component() {
    this.uid = String(guid++);
  }

  Component.addEqualityFuncs = function (newFuncs) {
    this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);
  };

  Component.prototype.receiveProps = function (props, context) {
    var oldContext = this.context;
    this.context = context;

    if (!oldContext) {
      this.firstContext(context);
    }

    var _a = recycleProps(this.props || {}, props, this.equalityFuncs),
        anyChanges = _a.anyChanges,
        comboProps = _a.comboProps;

    this.props = comboProps;

    if (anyChanges) {
      if (oldContext) {
        this.beforeUpdate();
      }

      this.render(comboProps, context);

      if (oldContext) {
        this.afterUpdate();
      }
    }
  };

  Component.prototype.render = function (props, context) {};

  Component.prototype.firstContext = function (context) {};

  Component.prototype.beforeUpdate = function () {};

  Component.prototype.afterUpdate = function () {}; // after destroy is called, this component won't ever be used again


  Component.prototype.destroy = function () {};

  return Component;
}();

Component.prototype.equalityFuncs = {};
/*
Reuses old values when equal. If anything is unequal, returns newProps as-is.
Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.
*/

function recycleProps(oldProps, newProps, equalityFuncs) {
  var comboProps = {}; // some old, some new

  var anyChanges = false;

  for (var key in newProps) {
    if (key in oldProps && (oldProps[key] === newProps[key] || equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key]))) {
      // equal to old? use old prop
      comboProps[key] = oldProps[key];
    } else {
      comboProps[key] = newProps[key];
      anyChanges = true;
    }
  }

  for (var key in oldProps) {
    if (!(key in newProps)) {
      anyChanges = true;
      break;
    }
  }

  return {
    anyChanges: anyChanges,
    comboProps: comboProps
  };
}
/*
PURPOSES:
- hook up to fg, fill, and mirror renderers
- interface for dragging and hits
*/


var DateComponent =
/** @class */
function (_super) {
  __extends(DateComponent, _super);

  function DateComponent(el) {
    var _this = _super.call(this) || this;

    _this.el = el;
    return _this;
  }

  DateComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    removeElement(this.el);
  }; // Hit System
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.buildPositionCaches = function () {};

  DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    return null; // this should be abstract
  }; // Validation
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isInteractionValid = function (interaction) {
    var calendar = this.context.calendar;
    var dateProfile = this.props.dateProfile; // HACK

    var instances = interaction.mutatedEvents.instances;

    if (dateProfile) {
      // HACK for DayTile
      for (var instanceId in instances) {
        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {
          return false;
        }
      }
    }

    return isInteractionValid(interaction, calendar);
  };

  DateComponent.prototype.isDateSelectionValid = function (selection) {
    var calendar = this.context.calendar;
    var dateProfile = this.props.dateProfile; // HACK

    if (dateProfile && // HACK for DayTile
    !rangeContainsRange(dateProfile.validRange, selection.range)) {
      return false;
    }

    return isDateSelectionValid(selection, calendar);
  }; // Pointer Interaction Utils
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isValidSegDownEl = function (el) {
    return !this.props.eventDrag && // HACK
    !this.props.eventResize && // HACK
    !elementClosest(el, '.fc-mirror') && (this.isPopover() || !this.isInPopover(el)); // ^above line ensures we don't detect a seg interaction within a nested component.
    // it's a HACK because it only supports a popover as the nested component.
  };

  DateComponent.prototype.isValidDateDownEl = function (el) {
    var segEl = elementClosest(el, this.fgSegSelector);
    return (!segEl || segEl.classList.contains('fc-mirror')) && !elementClosest(el, '.fc-more') && // a "more.." link
    !elementClosest(el, 'a[data-goto]') && // a clickable nav link
    !this.isInPopover(el);
  };

  DateComponent.prototype.isPopover = function () {
    return this.el.classList.contains('fc-popover');
  };

  DateComponent.prototype.isInPopover = function (el) {
    return Boolean(elementClosest(el, '.fc-popover'));
  };

  return DateComponent;
}(Component);

DateComponent.prototype.fgSegSelector = '.fc-event-container > *';
DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';
var uid$1 = 0;

function createPlugin(input) {
  return {
    id: String(uid$1++),
    deps: input.deps || [],
    reducers: input.reducers || [],
    eventDefParsers: input.eventDefParsers || [],
    isDraggableTransformers: input.isDraggableTransformers || [],
    eventDragMutationMassagers: input.eventDragMutationMassagers || [],
    eventDefMutationAppliers: input.eventDefMutationAppliers || [],
    dateSelectionTransformers: input.dateSelectionTransformers || [],
    datePointTransforms: input.datePointTransforms || [],
    dateSpanTransforms: input.dateSpanTransforms || [],
    views: input.views || {},
    viewPropsTransformers: input.viewPropsTransformers || [],
    isPropsValid: input.isPropsValid || null,
    externalDefTransforms: input.externalDefTransforms || [],
    eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],
    viewContainerModifiers: input.viewContainerModifiers || [],
    eventDropTransformers: input.eventDropTransformers || [],
    componentInteractions: input.componentInteractions || [],
    calendarInteractions: input.calendarInteractions || [],
    themeClasses: input.themeClasses || {},
    eventSourceDefs: input.eventSourceDefs || [],
    cmdFormatter: input.cmdFormatter,
    recurringTypes: input.recurringTypes || [],
    namedTimeZonedImpl: input.namedTimeZonedImpl,
    defaultView: input.defaultView || '',
    elementDraggingImpl: input.elementDraggingImpl,
    optionChangeHandlers: input.optionChangeHandlers || {}
  };
}

var PluginSystem =
/** @class */
function () {
  function PluginSystem() {
    this.hooks = {
      reducers: [],
      eventDefParsers: [],
      isDraggableTransformers: [],
      eventDragMutationMassagers: [],
      eventDefMutationAppliers: [],
      dateSelectionTransformers: [],
      datePointTransforms: [],
      dateSpanTransforms: [],
      views: {},
      viewPropsTransformers: [],
      isPropsValid: null,
      externalDefTransforms: [],
      eventResizeJoinTransforms: [],
      viewContainerModifiers: [],
      eventDropTransformers: [],
      componentInteractions: [],
      calendarInteractions: [],
      themeClasses: {},
      eventSourceDefs: [],
      cmdFormatter: null,
      recurringTypes: [],
      namedTimeZonedImpl: null,
      defaultView: '',
      elementDraggingImpl: null,
      optionChangeHandlers: {}
    };
    this.addedHash = {};
  }

  PluginSystem.prototype.add = function (plugin) {
    if (!this.addedHash[plugin.id]) {
      this.addedHash[plugin.id] = true;

      for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {
        var dep = _a[_i];
        this.add(dep);
      }

      this.hooks = combineHooks(this.hooks, plugin);
    }
  };

  return PluginSystem;
}();

function combineHooks(hooks0, hooks1) {
  return {
    reducers: hooks0.reducers.concat(hooks1.reducers),
    eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),
    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
    views: __assign({}, hooks0.views, hooks1.views),
    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
    eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),
    viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),
    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
    themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),
    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
    defaultView: hooks0.defaultView || hooks1.defaultView,
    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
    optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)
  };
}

var eventSourceDef = {
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      // short form
      return raw;
    } else if (Array.isArray(raw.events)) {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success) {
    success({
      rawEvents: arg.eventSource.meta
    });
  }
};
var ArrayEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef]
});
var eventSourceDef$1 = {
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      // short form
      return raw;
    } else if (typeof raw.events === 'function') {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.eventSource.meta;
    unpromisify(func.bind(null, {
      start: dateEnv.toDate(arg.range.start),
      end: dateEnv.toDate(arg.range.end),
      startStr: dateEnv.formatIso(arg.range.start),
      endStr: dateEnv.formatIso(arg.range.end),
      timeZone: dateEnv.timeZone
    }), function (rawEvents) {
      success({
        rawEvents: rawEvents
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
};
var FuncEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$1]
});

function requestJson(method, url, params, successCallback, failureCallback) {
  method = method.toUpperCase();
  var body = null;

  if (method === 'GET') {
    url = injectQueryStringParams(url, params);
  } else {
    body = encodeParams(params);
  }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true);

  if (method !== 'GET') {
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  }

  xhr.onload = function () {
    if (xhr.status >= 200 && xhr.status < 400) {
      try {
        var res = JSON.parse(xhr.responseText);
        successCallback(res, xhr);
      } catch (err) {
        failureCallback('Failure parsing JSON', xhr);
      }
    } else {
      failureCallback('Request failed', xhr);
    }
  };

  xhr.onerror = function () {
    failureCallback('Request failed', xhr);
  };

  xhr.send(body);
}

function injectQueryStringParams(url, params) {
  return url + (url.indexOf('?') === -1 ? '?' : '&') + encodeParams(params);
}

function encodeParams(params) {
  var parts = [];

  for (var key in params) {
    parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
  }

  return parts.join('&');
}

var eventSourceDef$2 = {
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      // short form
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams,
      startParam: raw.startParam,
      endParam: raw.endParam,
      timeZoneParam: raw.timeZoneParam
    };
  },
  fetch: function (arg, success, failure) {
    var meta = arg.eventSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {
      success({
        rawEvents: rawEvents,
        xhr: xhr
      });
    }, function (errorMessage, xhr) {
      failure({
        message: errorMessage,
        xhr: xhr
      });
    });
  }
};
var JsonFeedEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$2]
});

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};
  startParam = meta.startParam;

  if (startParam == null) {
    startParam = calendar.opt('startParam');
  }

  endParam = meta.endParam;

  if (endParam == null) {
    endParam = calendar.opt('endParam');
  }

  timeZoneParam = meta.timeZoneParam;

  if (timeZoneParam == null) {
    timeZoneParam = calendar.opt('timeZoneParam');
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  params[startParam] = dateEnv.formatIso(range.start);
  params[endParam] = dateEnv.formatIso(range.end);

  if (dateEnv.timeZone !== 'local') {
    params[timeZoneParam] = dateEnv.timeZone;
  }

  return params;
}

var recurring = {
  parse: function (rawEvent, leftoverProps, dateEnv) {
    var createMarker = dateEnv.createMarker.bind(dateEnv);
    var processors = {
      daysOfWeek: null,
      startTime: createDuration,
      endTime: createDuration,
      startRecur: createMarker,
      endRecur: createMarker
    };
    var props = refineProps(rawEvent, processors, {}, leftoverProps);
    var anyValid = false;

    for (var propName in props) {
      if (props[propName] != null) {
        anyValid = true;
        break;
      }
    }

    if (anyValid) {
      var duration = null;

      if ('duration' in leftoverProps) {
        duration = createDuration(leftoverProps.duration);
        delete leftoverProps.duration;
      }

      if (!duration && props.startTime && props.endTime) {
        duration = subtractDurations(props.endTime, props.startTime);
      }

      return {
        allDayGuess: Boolean(!props.startTime && !props.endTime),
        duration: duration,
        typeData: props // doesn't need endTime anymore but oh well

      };
    }

    return null;
  },
  expand: function (typeData, framingRange, dateEnv) {
    var clippedFramingRange = intersectRanges(framingRange, {
      start: typeData.startRecur,
      end: typeData.endRecur
    });

    if (clippedFramingRange) {
      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);
    } else {
      return [];
    }
  }
};
var SimpleRecurrencePlugin = createPlugin({
  recurringTypes: [recurring]
});

function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {
  var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;
  var dayMarker = startOfDay(framingRange.start);
  var endMarker = framingRange.end;
  var instanceStarts = [];

  while (dayMarker < endMarker) {
    var instanceStart // if everyday, or this particular day-of-week
    = void 0; // if everyday, or this particular day-of-week

    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
      if (startTime) {
        instanceStart = dateEnv.add(dayMarker, startTime);
      } else {
        instanceStart = dayMarker;
      }

      instanceStarts.push(instanceStart);
    }

    dayMarker = addDays(dayMarker, 1);
  }

  return instanceStarts;
}

var DefaultOptionChangeHandlers = createPlugin({
  optionChangeHandlers: {
    events: function (events, calendar, deepEqual) {
      handleEventSources([events], calendar, deepEqual);
    },
    eventSources: handleEventSources,
    plugins: handlePlugins
  }
});

function handleEventSources(inputs, calendar, deepEqual) {
  var unfoundSources = hashValuesToArray(calendar.state.eventSources);
  var newInputs = [];

  for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
    var input = inputs_1[_i];
    var inputFound = false;

    for (var i = 0; i < unfoundSources.length; i++) {
      if (deepEqual(unfoundSources[i]._raw, input)) {
        unfoundSources.splice(i, 1); // delete

        inputFound = true;
        break;
      }
    }

    if (!inputFound) {
      newInputs.push(input);
    }
  }

  for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {
    var unfoundSource = unfoundSources_1[_a];
    calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: unfoundSource.sourceId
    });
  }

  for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {
    var newInput = newInputs_1[_b];
    calendar.addEventSource(newInput);
  }
} // shortcoming: won't remove plugins


function handlePlugins(inputs, calendar) {
  calendar.addPluginInputs(inputs); // will gracefully handle duplicates
}

var config = {}; // TODO: make these options

var globalDefaults = {
  defaultRangeSeparator: ' - ',
  titleRangeSeparator: ' \u2013 ',
  defaultTimedEventDuration: '01:00:00',
  defaultAllDayEventDuration: {
    day: 1
  },
  forceEventDuration: false,
  nextDayThreshold: '00:00:00',
  // display
  columnHeader: true,
  defaultView: '',
  aspectRatio: 1.35,
  header: {
    left: 'title',
    center: '',
    right: 'today prev,next'
  },
  weekends: true,
  weekNumbers: false,
  weekNumberCalculation: 'local',
  editable: false,
  // nowIndicator: false,
  scrollTime: '06:00:00',
  minTime: '00:00:00',
  maxTime: '24:00:00',
  showNonCurrentDates: true,
  // event ajax
  lazyFetching: true,
  startParam: 'start',
  endParam: 'end',
  timeZoneParam: 'timeZone',
  timeZone: 'local',
  // allDayDefault: undefined,
  // locale
  locales: [],
  locale: '',
  // dir: will get this from the default locale
  // buttonIcons: null,
  // allows setting a min-height to the event segment to prevent short events overlapping each other
  timeGridEventMinHeight: 0,
  themeSystem: 'standard',
  // eventResizableFromStart: false,
  dragRevertDuration: 500,
  dragScroll: true,
  allDayMaintainDuration: false,
  // selectable: false,
  unselectAuto: true,
  // selectMinDistance: 0,
  dropAccept: '*',
  eventOrder: 'start,-duration,allDay,title',
  // ^ if start tie, longer events go before shorter. final tie-breaker is title text
  // rerenderDelay: null,
  eventLimit: false,
  eventLimitClick: 'popover',
  dayPopoverFormat: {
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  },
  handleWindowResize: true,
  windowResizeDelay: 100,
  longPressDelay: 1000,
  eventDragMinDistance: 5 // only applies to mouse

};
var rtlDefaults = {
  header: {
    left: 'next,prev today',
    center: '',
    right: 'title'
  },
  buttonIcons: {
    // TODO: make RTL support the responibility of the theme
    prev: 'fc-icon-chevron-right',
    next: 'fc-icon-chevron-left',
    prevYear: 'fc-icon-chevrons-right',
    nextYear: 'fc-icon-chevrons-left'
  }
};
var complexOptions = ['header', 'footer', 'buttonText', 'buttonIcons']; // Merges an array of option objects into a single object

function mergeOptions(optionObjs) {
  return mergeProps(optionObjs, complexOptions);
} // TODO: move this stuff to a "plugin"-related file...


var INTERNAL_PLUGINS = [ArrayEventSourcePlugin, FuncEventSourcePlugin, JsonFeedEventSourcePlugin, SimpleRecurrencePlugin, DefaultOptionChangeHandlers];

function refinePluginDefs(pluginInputs) {
  var plugins = [];

  for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {
    var pluginInput = pluginInputs_1[_i];

    if (typeof pluginInput === 'string') {
      var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);

      if (!window[globalName]) {
        console.warn('Plugin file not loaded for ' + pluginInput);
      } else {
        plugins.push(window[globalName].default); // is an ES6 module
      }
    } else {
      plugins.push(pluginInput);
    }
  }

  return INTERNAL_PLUGINS.concat(plugins);
}

var RAW_EN_LOCALE = {
  code: 'en',
  week: {
    dow: 0,
    doy: 4 // 4 days need to be within the year to be considered the first week

  },
  dir: 'ltr',
  buttonText: {
    prev: 'prev',
    next: 'next',
    prevYear: 'prev year',
    nextYear: 'next year',
    year: 'year',
    today: 'today',
    month: 'month',
    week: 'week',
    day: 'day',
    list: 'list'
  },
  weekLabel: 'W',
  allDayText: 'all-day',
  eventLimitText: 'more',
  noEventsMessage: 'No events to display'
};

function parseRawLocales(explicitRawLocales) {
  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
  var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js

  var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless

  var allRawLocales = globalArray.concat( // globalArray is low prio
  hashValuesToArray(globalObject), // medium prio
  explicitRawLocales // highest prio
  );
  var rawLocaleMap = {
    en: RAW_EN_LOCALE // necessary?

  };

  for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {
    var rawLocale = allRawLocales_1[_i];
    rawLocaleMap[rawLocale.code] = rawLocale;
  }

  return {
    map: rawLocaleMap,
    defaultCode: defaultCode
  };
}

function buildLocale(inputSingular, available) {
  if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {
    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);
  } else {
    return queryLocale(inputSingular, available);
  }
}

function queryLocale(codeArg, available) {
  var codes = [].concat(codeArg || []); // will convert to array

  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
  return parseLocale(codeArg, codes, raw);
}

function queryRawLocale(codes, available) {
  for (var i = 0; i < codes.length; i++) {
    var parts = codes[i].toLocaleLowerCase().split('-');

    for (var j = parts.length; j > 0; j--) {
      var simpleId = parts.slice(0, j).join('-');

      if (available[simpleId]) {
        return available[simpleId];
      }
    }
  }

  return null;
}

function parseLocale(codeArg, codes, raw) {
  var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);
  delete merged.code; // don't want this part of the options

  var week = merged.week;
  delete merged.week;
  return {
    codeArg: codeArg,
    codes: codes,
    week: week,
    simpleNumberFormat: new Intl.NumberFormat(codeArg),
    options: merged
  };
}

var OptionsManager =
/** @class */
function () {
  function OptionsManager(overrides) {
    this.overrides = __assign({}, overrides); // make a copy

    this.dynamicOverrides = {};
    this.compute();
  }

  OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {
    if (!Object.keys(updates).length && !removals.length) {
      return;
    }

    var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;

    __assign(overrideHash, updates);

    for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
      var propName = removals_1[_i];
      delete overrideHash[propName];
    }

    this.compute();
  }; // Computes the flattened options hash for the calendar and assigns to `this.options`.
  // Assumes this.overrides and this.dynamicOverrides have already been initialized.


  OptionsManager.prototype.compute = function () {
    // TODO: not a very efficient system
    var locales = firstDefined( // explicit locale option given?
    this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);
    var locale = firstDefined( // explicit locales option given?
    this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);
    var available = parseRawLocales(locales);
    var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;
    var dir = firstDefined( // based on options computed so far, is direction RTL?
    this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);
    var dirDefaults = dir === 'rtl' ? rtlDefaults : {};
    this.dirDefaults = dirDefaults;
    this.localeDefaults = localeDefaults;
    this.computed = mergeOptions([globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);
  };

  return OptionsManager;
}();

var calendarSystemClassMap = {};

function registerCalendarSystem(name, theClass) {
  calendarSystemClassMap[name] = theClass;
}

function createCalendarSystem(name) {
  return new calendarSystemClassMap[name]();
}

var GregorianCalendarSystem =
/** @class */
function () {
  function GregorianCalendarSystem() {}

  GregorianCalendarSystem.prototype.getMarkerYear = function (d) {
    return d.getUTCFullYear();
  };

  GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {
    return d.getUTCMonth();
  };

  GregorianCalendarSystem.prototype.getMarkerDay = function (d) {
    return d.getUTCDate();
  };

  GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {
    return arrayToUtcDate(arr);
  };

  GregorianCalendarSystem.prototype.markerToArray = function (marker) {
    return dateToUtcArray(marker);
  };

  return GregorianCalendarSystem;
}();

registerCalendarSystem('gregory', GregorianCalendarSystem);
var ISO_RE = /^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;

function parse(str) {
  var m = ISO_RE.exec(str);

  if (m) {
    var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));

    if (isValidDate(marker)) {
      var timeZoneOffset = null;

      if (m[13]) {
        timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
      }

      return {
        marker: marker,
        isTimeUnspecified: !m[6],
        timeZoneOffset: timeZoneOffset
      };
    }
  }

  return null;
}

var DateEnv =
/** @class */
function () {
  function DateEnv(settings) {
    var timeZone = this.timeZone = settings.timeZone;
    var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';

    if (settings.namedTimeZoneImpl && isNamedTimeZone) {
      this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
    }

    this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
    this.calendarSystem = createCalendarSystem(settings.calendarSystem);
    this.locale = settings.locale;
    this.weekDow = settings.locale.week.dow;
    this.weekDoy = settings.locale.week.doy;

    if (settings.weekNumberCalculation === 'ISO') {
      this.weekDow = 1;
      this.weekDoy = 4;
    }

    if (typeof settings.firstDay === 'number') {
      this.weekDow = settings.firstDay;
    }

    if (typeof settings.weekNumberCalculation === 'function') {
      this.weekNumberFunc = settings.weekNumberCalculation;
    }

    this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;
    this.cmdFormatter = settings.cmdFormatter;
  } // Creating / Parsing


  DateEnv.prototype.createMarker = function (input) {
    var meta = this.createMarkerMeta(input);

    if (meta === null) {
      return null;
    }

    return meta.marker;
  };

  DateEnv.prototype.createNowMarker = function () {
    if (this.canComputeOffset) {
      return this.timestampToMarker(new Date().valueOf());
    } else {
      // if we can't compute the current date val for a timezone,
      // better to give the current local date vals than UTC
      return arrayToUtcDate(dateToLocalArray(new Date()));
    }
  };

  DateEnv.prototype.createMarkerMeta = function (input) {
    if (typeof input === 'string') {
      return this.parse(input);
    }

    var marker = null;

    if (typeof input === 'number') {
      marker = this.timestampToMarker(input);
    } else if (input instanceof Date) {
      input = input.valueOf();

      if (!isNaN(input)) {
        marker = this.timestampToMarker(input);
      }
    } else if (Array.isArray(input)) {
      marker = arrayToUtcDate(input);
    }

    if (marker === null || !isValidDate(marker)) {
      return null;
    }

    return {
      marker: marker,
      isTimeUnspecified: false,
      forcedTzo: null
    };
  };

  DateEnv.prototype.parse = function (s) {
    var parts = parse(s);

    if (parts === null) {
      return null;
    }

    var marker = parts.marker;
    var forcedTzo = null;

    if (parts.timeZoneOffset !== null) {
      if (this.canComputeOffset) {
        marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);
      } else {
        forcedTzo = parts.timeZoneOffset;
      }
    }

    return {
      marker: marker,
      isTimeUnspecified: parts.isTimeUnspecified,
      forcedTzo: forcedTzo
    };
  }; // Accessors


  DateEnv.prototype.getYear = function (marker) {
    return this.calendarSystem.getMarkerYear(marker);
  };

  DateEnv.prototype.getMonth = function (marker) {
    return this.calendarSystem.getMarkerMonth(marker);
  }; // Adding / Subtracting


  DateEnv.prototype.add = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += dur.years;
    a[1] += dur.months;
    a[2] += dur.days;
    a[6] += dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.subtract = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] -= dur.years;
    a[1] -= dur.months;
    a[2] -= dur.days;
    a[6] -= dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addYears = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += n;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addMonths = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[1] += n;
    return this.calendarSystem.arrayToMarker(a);
  }; // Diffing Whole Units


  DateEnv.prototype.diffWholeYears = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {
      return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
    }

    return null;
  };

  DateEnv.prototype.diffWholeMonths = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {
      return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
    }

    return null;
  }; // Range / Duration


  DateEnv.prototype.greatestWholeUnit = function (m0, m1) {
    var n = this.diffWholeYears(m0, m1);

    if (n !== null) {
      return {
        unit: 'year',
        value: n
      };
    }

    n = this.diffWholeMonths(m0, m1);

    if (n !== null) {
      return {
        unit: 'month',
        value: n
      };
    }

    n = diffWholeWeeks(m0, m1);

    if (n !== null) {
      return {
        unit: 'week',
        value: n
      };
    }

    n = diffWholeDays(m0, m1);

    if (n !== null) {
      return {
        unit: 'day',
        value: n
      };
    }

    n = diffHours(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'hour',
        value: n
      };
    }

    n = diffMinutes(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'minute',
        value: n
      };
    }

    n = diffSeconds(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'second',
        value: n
      };
    }

    return {
      unit: 'millisecond',
      value: m1.valueOf() - m0.valueOf()
    };
  };

  DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {
    // TODO: can use greatestWholeUnit
    var diff;

    if (d.years) {
      diff = this.diffWholeYears(m0, m1);

      if (diff !== null) {
        return diff / asRoughYears(d);
      }
    }

    if (d.months) {
      diff = this.diffWholeMonths(m0, m1);

      if (diff !== null) {
        return diff / asRoughMonths(d);
      }
    }

    if (d.days) {
      diff = diffWholeDays(m0, m1);

      if (diff !== null) {
        return diff / asRoughDays(d);
      }
    }

    return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
  }; // Start-Of


  DateEnv.prototype.startOf = function (m, unit) {
    if (unit === 'year') {
      return this.startOfYear(m);
    } else if (unit === 'month') {
      return this.startOfMonth(m);
    } else if (unit === 'week') {
      return this.startOfWeek(m);
    } else if (unit === 'day') {
      return startOfDay(m);
    } else if (unit === 'hour') {
      return startOfHour(m);
    } else if (unit === 'minute') {
      return startOfMinute(m);
    } else if (unit === 'second') {
      return startOfSecond(m);
    }
  };

  DateEnv.prototype.startOfYear = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);
  };

  DateEnv.prototype.startOfMonth = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);
  };

  DateEnv.prototype.startOfWeek = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);
  }; // Week Number


  DateEnv.prototype.computeWeekNumber = function (marker) {
    if (this.weekNumberFunc) {
      return this.weekNumberFunc(this.toDate(marker));
    } else {
      return weekOfYear(marker, this.weekDow, this.weekDoy);
    }
  }; // TODO: choke on timeZoneName: long


  DateEnv.prototype.format = function (marker, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    return formatter.format({
      marker: marker,
      timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
    }, this);
  };

  DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    if (dateOptions.isEndExclusive) {
      end = addMs(end, -1);
    }

    return formatter.formatRange({
      marker: start,
      timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
    }, {
      marker: end,
      timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
    }, this);
  };

  DateEnv.prototype.formatIso = function (marker, extraOptions) {
    if (extraOptions === void 0) {
      extraOptions = {};
    }

    var timeZoneOffset = null;

    if (!extraOptions.omitTimeZoneOffset) {
      if (extraOptions.forcedTzo != null) {
        timeZoneOffset = extraOptions.forcedTzo;
      } else {
        timeZoneOffset = this.offsetForMarker(marker);
      }
    }

    return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
  }; // TimeZone


  DateEnv.prototype.timestampToMarker = function (ms) {
    if (this.timeZone === 'local') {
      return arrayToUtcDate(dateToLocalArray(new Date(ms)));
    } else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {
      return new Date(ms);
    } else {
      return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
    }
  };

  DateEnv.prototype.offsetForMarker = function (m) {
    if (this.timeZone === 'local') {
      return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
    } else if (this.timeZone === 'UTC') {
      return 0;
    } else if (this.namedTimeZoneImpl) {
      return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
    }

    return null;
  }; // Conversion


  DateEnv.prototype.toDate = function (m, forcedTzo) {
    if (this.timeZone === 'local') {
      return arrayToLocalDate(dateToUtcArray(m));
    } else if (this.timeZone === 'UTC') {
      return new Date(m.valueOf()); // make sure it's a copy
    } else if (!this.namedTimeZoneImpl) {
      return new Date(m.valueOf() - (forcedTzo || 0));
    } else {
      return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms
      );
    }
  };

  return DateEnv;
}();

var SIMPLE_SOURCE_PROPS = {
  id: String,
  allDayDefault: Boolean,
  eventDataTransform: Function,
  success: Function,
  failure: Function
};
var uid$2 = 0;

function doesSourceNeedRange(eventSource, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;
  return !defs[eventSource.sourceDefId].ignoreRange;
}

function parseEventSource(raw, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;

  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(raw);

    if (meta) {
      var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);
      res._raw = raw;
      return res;
    }
  }

  return null;
}

function parseEventSourceProps(raw, meta, sourceDefId, calendar) {
  var leftovers0 = {};
  var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  props.publicId = String(raw.id || '');
  props.sourceId = String(uid$2++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.ui = ui;
  props.extendedProps = leftovers1;
  return props;
}

function reduceEventSources(eventSources, action, dateProfile, calendar) {
  switch (action.type) {
    case 'ADD_EVENT_SOURCES':
      // already parsed
      return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);

    case 'REMOVE_EVENT_SOURCE':
      return removeSource(eventSources, action.sourceId);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);
      } else {
        return eventSources;
      }

    case 'FETCH_EVENT_SOURCES':
    case 'CHANGE_TIMEZONE':
      return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);

    case 'RECEIVE_EVENTS':
    case 'RECEIVE_EVENT_ERROR':
      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return {};

    default:
      return eventSources;
  }
}

var uid$3 = 0;

function addSources(eventSourceHash, sources, fetchRange, calendar) {
  var hash = {};

  for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
    var source = sources_1[_i];
    hash[source.sourceId] = source;
  }

  if (fetchRange) {
    hash = fetchDirtySources(hash, fetchRange, calendar);
  }

  return __assign({}, eventSourceHash, hash);
}

function removeSource(eventSourceHash, sourceId) {
  return filterHash(eventSourceHash, function (eventSource) {
    return eventSource.sourceId !== sourceId;
  });
}

function fetchDirtySources(sourceHash, fetchRange, calendar) {
  return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {
    return isSourceDirty(eventSource, fetchRange, calendar);
  }), fetchRange, calendar);
}

function isSourceDirty(eventSource, fetchRange, calendar) {
  if (!doesSourceNeedRange(eventSource, calendar)) {
    return !eventSource.latestFetchId;
  } else {
    return !calendar.opt('lazyFetching') || !eventSource.fetchRange || eventSource.isFetching || // always cancel outdated in-progress fetches
    fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
  }
}

function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {
  var nextSources = {};

  for (var sourceId in prevSources) {
    var source = prevSources[sourceId];

    if (sourceIdHash[sourceId]) {
      nextSources[sourceId] = fetchSource(source, fetchRange, calendar);
    } else {
      nextSources[sourceId] = source;
    }
  }

  return nextSources;
}

function fetchSource(eventSource, fetchRange, calendar) {
  var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];
  var fetchId = String(uid$3++);
  sourceDef.fetch({
    eventSource: eventSource,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    var rawEvents = res.rawEvents;
    var calSuccess = calendar.opt('eventSourceSuccess');
    var calSuccessRes;
    var sourceSuccessRes;

    if (eventSource.success) {
      sourceSuccessRes = eventSource.success(rawEvents, res.xhr);
    }

    if (calSuccess) {
      calSuccessRes = calSuccess(rawEvents, res.xhr);
    }

    rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;
    calendar.dispatch({
      type: 'RECEIVE_EVENTS',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawEvents: rawEvents
    });
  }, function (error) {
    var callFailure = calendar.opt('eventSourceFailure');
    console.warn(error.message, error);

    if (eventSource.failure) {
      eventSource.failure(error);
    }

    if (callFailure) {
      callFailure(error);
    }

    calendar.dispatch({
      type: 'RECEIVE_EVENT_ERROR',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, eventSource, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
  var _a;

  var eventSource = sourceHash[sourceId];

  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId) {
    return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, {
      isFetching: false,
      fetchRange: fetchRange // also serves as a marker that at least one fetch has completed

    }), _a));
  }

  return sourceHash;
}

function excludeStaticSources(eventSources, calendar) {
  return filterHash(eventSources, function (eventSource) {
    return doesSourceNeedRange(eventSource, calendar);
  });
}

var DateProfileGenerator =
/** @class */
function () {
  function DateProfileGenerator(viewSpec, calendar) {
    this.viewSpec = viewSpec;
    this.options = viewSpec.options;
    this.dateEnv = calendar.dateEnv;
    this.calendar = calendar;
    this.initHiddenDays();
  }
  /* Date Range Computation
  ------------------------------------------------------------------------------------------------------------------*/
  // Builds a structure with info about what the dates/ranges will be for the "prev" view.


  DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(prevDate, -1);
  }; // Builds a structure with info about what the dates/ranges will be for the "next" view.


  DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(nextDate, 1);
  }; // Builds a structure holding dates/ranges for rendering around the given date.
  // Optional direction param indicates whether the date is being incremented/decremented
  // from its previous value. decremented = -1, incremented = 1 (default).


  DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {
    if (forceToValid === void 0) {
      forceToValid = false;
    }

    var validRange;
    var minTime = null;
    var maxTime = null;
    var currentInfo;
    var isRangeAllDay;
    var renderRange;
    var activeRange;
    var isValid;
    validRange = this.buildValidRange();
    validRange = this.trimHiddenDays(validRange);

    if (forceToValid) {
      currentDate = constrainMarkerToRange(currentDate, validRange);
    }

    currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
    isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
    renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
    renderRange = this.trimHiddenDays(renderRange);
    activeRange = renderRange;

    if (!this.options.showNonCurrentDates) {
      activeRange = intersectRanges(activeRange, currentInfo.range);
    }

    minTime = createDuration(this.options.minTime);
    maxTime = createDuration(this.options.maxTime);
    activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);
    activeRange = intersectRanges(activeRange, validRange); // might return null
    // it's invalid if the originally requested date is not contained,
    // or if the range is completely outside of the valid range.

    isValid = rangesIntersect(currentInfo.range, validRange);
    return {
      // constraint for where prev/next operations can go and where events can be dragged/resized to.
      // an object with optional start and end properties.
      validRange: validRange,
      // range the view is formally responsible for.
      // for example, a month view might have 1st-31st, excluding padded dates
      currentRange: currentInfo.range,
      // name of largest unit being displayed, like "month" or "week"
      currentRangeUnit: currentInfo.unit,
      isRangeAllDay: isRangeAllDay,
      // dates that display events and accept drag-n-drop
      // will be `null` if no dates accept events
      activeRange: activeRange,
      // date range with a rendered skeleton
      // includes not-active days that need some sort of DOM
      renderRange: renderRange,
      // Duration object that denotes the first visible time of any given day
      minTime: minTime,
      // Duration object that denotes the exclusive visible end time of any given day
      maxTime: maxTime,
      isValid: isValid,
      // how far the current date will move for a prev/next operation
      dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^

    };
  }; // Builds an object with optional start/end properties.
  // Indicates the minimum/maximum dates to display.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildValidRange = function () {
    return this.getRangeOption('validRange', this.calendar.getNow()) || {
      start: null,
      end: null
    }; // completely open-ended
  }; // Builds a structure with info about the "current" range, the range that is
  // highlighted as being the current month for example.
  // See build() for a description of `direction`.
  // Guaranteed to have `range` and `unit` properties. `duration` is optional.


  DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
    var _a = this,
        viewSpec = _a.viewSpec,
        dateEnv = _a.dateEnv;

    var duration = null;
    var unit = null;
    var range = null;
    var dayCount;

    if (viewSpec.duration) {
      duration = viewSpec.duration;
      unit = viewSpec.durationUnit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    } else if (dayCount = this.options.dayCount) {
      unit = 'day';
      range = this.buildRangeFromDayCount(date, direction, dayCount);
    } else if (range = this.buildCustomVisibleRange(date)) {
      unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;
    } else {
      duration = this.getFallbackDuration();
      unit = greatestDurationDenominator(duration).unit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    }

    return {
      duration: duration,
      unit: unit,
      range: range
    };
  };

  DateProfileGenerator.prototype.getFallbackDuration = function () {
    return createDuration({
      day: 1
    });
  }; // Returns a new activeRange to have time values (un-ambiguate)
  // minTime or maxTime causes the range to expand.


  DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {
    var dateEnv = this.dateEnv;
    var start = range.start;
    var end = range.end;

    if (this.viewSpec.class.prototype.usesMinMaxTime) {
      // expand active range if minTime is negative (why not when positive?)
      if (asRoughDays(minTime) < 0) {
        start = startOfDay(start); // necessary?

        start = dateEnv.add(start, minTime);
      } // expand active range if maxTime is beyond one day (why not when positive?)


      if (asRoughDays(maxTime) > 1) {
        end = startOfDay(end); // necessary?

        end = addDays(end, -1);
        end = dateEnv.add(end, maxTime);
      }
    }

    return {
      start: start,
      end: end
    };
  }; // Builds the "current" range when it is specified as an explicit duration.
  // `unit` is the already-computed greatestDurationDenominator unit of duration.


  DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
    var dateEnv = this.dateEnv;
    var alignment = this.options.dateAlignment;
    var dateIncrementInput;
    var dateIncrementDuration;
    var start;
    var end;
    var res; // compute what the alignment should be

    if (!alignment) {
      dateIncrementInput = this.options.dateIncrement;

      if (dateIncrementInput) {
        dateIncrementDuration = createDuration(dateIncrementInput); // use the smaller of the two units

        if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {
          alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;
        } else {
          alignment = unit;
        }
      } else {
        alignment = unit;
      }
    } // if the view displays a single day or smaller


    if (asRoughDays(duration) <= 1) {
      if (this.isHiddenDay(start)) {
        start = this.skipHiddenDays(start, direction);
        start = startOfDay(start);
      }
    }

    function computeRes() {
      start = dateEnv.startOf(date, alignment);
      end = dateEnv.add(start, duration);
      res = {
        start: start,
        end: end
      };
    }

    computeRes(); // if range is completely enveloped by hidden days, go past the hidden days

    if (!this.trimHiddenDays(res)) {
      date = this.skipHiddenDays(date, direction);
      computeRes();
    }

    return res;
  }; // Builds the "current" range when a dayCount is specified.


  DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
    var dateEnv = this.dateEnv;
    var customAlignment = this.options.dateAlignment;
    var runningCount = 0;
    var start = date;
    var end;

    if (customAlignment) {
      start = dateEnv.startOf(start, customAlignment);
    }

    start = startOfDay(start);
    start = this.skipHiddenDays(start, direction);
    end = start;

    do {
      end = addDays(end, 1);

      if (!this.isHiddenDay(end)) {
        runningCount++;
      }
    } while (runningCount < dayCount);

    return {
      start: start,
      end: end
    };
  }; // Builds a normalized range object for the "visible" range,
  // which is a way to define the currentRange and activeRange at the same time.


  DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
    var dateEnv = this.dateEnv;
    var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));

    if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {
      return null;
    }

    return visibleRange;
  }; // Computes the range that will represent the element/cells for *rendering*,
  // but which may have voided days/times.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
    return currentRange;
  }; // Compute the duration value that should be added/substracted to the current date
  // when a prev/next operation happens.


  DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
    var dateIncrementInput = this.options.dateIncrement;
    var customAlignment;

    if (dateIncrementInput) {
      return createDuration(dateIncrementInput);
    } else if (customAlignment = this.options.dateAlignment) {
      return createDuration(1, customAlignment);
    } else if (fallback) {
      return fallback;
    } else {
      return createDuration({
        days: 1
      });
    }
  }; // Arguments after name will be forwarded to a hypothetical function value
  // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
  // Always clone your objects if you fear mutation.


  DateProfileGenerator.prototype.getRangeOption = function (name) {
    var otherArgs = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      otherArgs[_i - 1] = arguments[_i];
    }

    var val = this.options[name];

    if (typeof val === 'function') {
      val = val.apply(null, otherArgs);
    }

    if (val) {
      val = parseRange(val, this.dateEnv);
    }

    if (val) {
      val = computeVisibleDayRange(val);
    }

    return val;
  };
  /* Hidden Days
  ------------------------------------------------------------------------------------------------------------------*/
  // Initializes internal variables related to calculating hidden days-of-week


  DateProfileGenerator.prototype.initHiddenDays = function () {
    var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden

    var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)

    var dayCnt = 0;
    var i;

    if (this.options.weekends === false) {
      hiddenDays.push(0, 6); // 0=sunday, 6=saturday
    }

    for (i = 0; i < 7; i++) {
      if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {
        dayCnt++;
      }
    }

    if (!dayCnt) {
      throw new Error('invalid hiddenDays'); // all days were hidden? bad.
    }

    this.isHiddenDayHash = isHiddenDayHash;
  }; // Remove days from the beginning and end of the range that are computed as hidden.
  // If the whole range is trimmed off, returns null


  DateProfileGenerator.prototype.trimHiddenDays = function (range) {
    var start = range.start;
    var end = range.end;

    if (start) {
      start = this.skipHiddenDays(start);
    }

    if (end) {
      end = this.skipHiddenDays(end, -1, true);
    }

    if (start == null || end == null || start < end) {
      return {
        start: start,
        end: end
      };
    }

    return null;
  }; // Is the current day hidden?
  // `day` is a day-of-week index (0-6), or a Date (used for UTC)


  DateProfileGenerator.prototype.isHiddenDay = function (day) {
    if (day instanceof Date) {
      day = day.getUTCDay();
    }

    return this.isHiddenDayHash[day];
  }; // Incrementing the current day until it is no longer a hidden day, returning a copy.
  // DOES NOT CONSIDER validRange!
  // If the initial value of `date` is not a hidden day, don't do anything.
  // Pass `isExclusive` as `true` if you are dealing with an end date.
  // `inc` defaults to `1` (increment one day forward each time)


  DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {
    if (inc === void 0) {
      inc = 1;
    }

    if (isExclusive === void 0) {
      isExclusive = false;
    }

    while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {
      date = addDays(date, inc);
    }

    return date;
  };

  return DateProfileGenerator;
}(); // TODO: find a way to avoid comparing DateProfiles. it's tedious


function isDateProfilesEqual(p0, p1) {
  return rangesEqual(p0.validRange, p1.validRange) && rangesEqual(p0.activeRange, p1.activeRange) && rangesEqual(p0.renderRange, p1.renderRange) && durationsEqual(p0.minTime, p1.minTime) && durationsEqual(p0.maxTime, p1.maxTime);
  /*
  TODO: compare more?
    currentRange: DateRange
    currentRangeUnit: string
    isRangeAllDay: boolean
    isValid: boolean
    dateIncrement: Duration
  */
}

function reduce(state, action, calendar) {
  var viewType = reduceViewType(state.viewType, action);
  var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);
  var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);

  var nextState = __assign({}, state, {
    viewType: viewType,
    dateProfile: dateProfile,
    currentDate: reduceCurrentDate(state.currentDate, action, dateProfile),
    eventSources: eventSources,
    eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar),
    dateSelection: reduceDateSelection(state.dateSelection, action, calendar),
    eventSelection: reduceSelectedEvent(state.eventSelection, action),
    eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar),
    eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar),
    eventSourceLoadingLevel: computeLoadingLevel(eventSources),
    loadingLevel: computeLoadingLevel(eventSources)
  });

  for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {
    var reducerFunc = _a[_i];
    nextState = reducerFunc(nextState, action, calendar);
  } // console.log(action.type, nextState)


  return nextState;
}

function reduceViewType(currentViewType, action) {
  switch (action.type) {
    case 'SET_VIEW_TYPE':
      return action.viewType;

    default:
      return currentViewType;
  }
}

function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {
  var newDateProfile;

  switch (action.type) {
    case 'PREV':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);
      break;

    case 'NEXT':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);
      break;

    case 'SET_DATE':
      if (!currentDateProfile.activeRange || !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {
        newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid
        );
      }

      break;

    case 'SET_VIEW_TYPE':
      var generator = calendar.dateProfileGenerators[viewType];

      if (!generator) {
        throw new Error(viewType ? 'The FullCalendar view "' + viewType + '" does not exist. Make sure your plugins are loaded correctly.' : 'No available FullCalendar view plugins.');
      }

      newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid
      );
      break;
  }

  if (newDateProfile && newDateProfile.isValid && !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {
    return newDateProfile;
  } else {
    return currentDateProfile;
  }
}

function reduceCurrentDate(currentDate, action, dateProfile) {
  switch (action.type) {
    case 'PREV':
    case 'NEXT':
      if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {
        return dateProfile.currentRange.start;
      } else {
        return currentDate;
      }

    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      var newDate = action.dateMarker || currentDate;

      if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {
        return dateProfile.currentRange.start;
      } else {
        return newDate;
      }

    default:
      return currentDate;
  }
}

function reduceDateSelection(currentSelection, action, calendar) {
  switch (action.type) {
    case 'SELECT_DATES':
      return action.selection;

    case 'UNSELECT_DATES':
      return null;

    default:
      return currentSelection;
  }
}

function reduceSelectedEvent(currentInstanceId, action) {
  switch (action.type) {
    case 'SELECT_EVENT':
      return action.eventInstanceId;

    case 'UNSELECT_EVENT':
      return '';

    default:
      return currentInstanceId;
  }
}

function reduceEventDrag(currentDrag, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_DRAG':
      var newDrag = action.state;
      return {
        affectedEvents: newDrag.affectedEvents,
        mutatedEvents: newDrag.mutatedEvents,
        isEvent: newDrag.isEvent,
        origSeg: newDrag.origSeg
      };

    case 'UNSET_EVENT_DRAG':
      return null;

    default:
      return currentDrag;
  }
}

function reduceEventResize(currentResize, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_RESIZE':
      var newResize = action.state;
      return {
        affectedEvents: newResize.affectedEvents,
        mutatedEvents: newResize.mutatedEvents,
        isEvent: newResize.isEvent,
        origSeg: newResize.origSeg
      };

    case 'UNSET_EVENT_RESIZE':
      return null;

    default:
      return currentResize;
  }
}

function computeLoadingLevel(eventSources) {
  var cnt = 0;

  for (var sourceId in eventSources) {
    if (eventSources[sourceId].isFetching) {
      cnt++;
    }
  }

  return cnt;
}

var STANDARD_PROPS = {
  start: null,
  end: null,
  allDay: Boolean
};

function parseDateSpan(raw, dateEnv, defaultDuration) {
  var span = parseOpenDateSpan(raw, dateEnv);
  var range = span.range;

  if (!range.start) {
    return null;
  }

  if (!range.end) {
    if (defaultDuration == null) {
      return null;
    } else {
      range.end = dateEnv.add(range.start, defaultDuration);
    }
  }

  return span;
}
/*
TODO: somehow combine with parseRange?
Will return null if the start/end props were present but parsed invalidly.
*/


function parseOpenDateSpan(raw, dateEnv) {
  var leftovers = {};
  var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);
  var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
  var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
  var allDay = standardProps.allDay;

  if (allDay == null) {
    allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
  } // use this leftover object as the selection object


  leftovers.range = {
    start: startMeta ? startMeta.marker : null,
    end: endMeta ? endMeta.marker : null
  };
  leftovers.allDay = allDay;
  return leftovers;
}

function isDateSpansEqual(span0, span1) {
  return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
} // the NON-DATE-RELATED props


function isSpanPropsEqual(span0, span1) {
  for (var propName in span1) {
    if (propName !== 'range' && propName !== 'allDay') {
      if (span0[propName] !== span1[propName]) {
        return false;
      }
    }
  } // are there any props that span0 has that span1 DOESN'T have?
  // both have range/allDay, so no need to special-case.


  for (var propName in span0) {
    if (!(propName in span1)) {
      return false;
    }
  }

  return true;
}

function buildDateSpanApi(span, dateEnv) {
  return {
    start: dateEnv.toDate(span.range.start),
    end: dateEnv.toDate(span.range.end),
    startStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    endStr: dateEnv.formatIso(span.range.end, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function buildDatePointApi(span, dateEnv) {
  return {
    date: dateEnv.toDate(span.range.start),
    dateStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function fabricateEventRange(dateSpan, eventUiBases, calendar) {
  var def = parseEventDef({
    editable: false
  }, '', // sourceId
  dateSpan.allDay, true, // hasEnd
  calendar);
  return {
    def: def,
    ui: compileEventUi(def, eventUiBases),
    instance: createEventInstance(def.defId, dateSpan.range),
    range: dateSpan.range,
    isStart: true,
    isEnd: true
  };
}

function compileViewDefs(defaultConfigs, overrideConfigs) {
  var hash = {};
  var viewType;

  for (viewType in defaultConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  for (viewType in overrideConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  return hash;
}

function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  if (hash[viewType]) {
    return hash[viewType];
  }

  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);

  if (viewDef) {
    hash[viewType] = viewDef;
  }

  return viewDef;
}

function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  var defaultConfig = defaultConfigs[viewType];
  var overrideConfig = overrideConfigs[viewType];

  var queryProp = function (name) {
    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
  };

  var theClass = queryProp('class');
  var superType = queryProp('superType');

  if (!superType && theClass) {
    superType = findViewNameBySubclass(theClass, overrideConfigs) || findViewNameBySubclass(theClass, defaultConfigs);
  }

  var superDef = null;

  if (superType) {
    if (superType === viewType) {
      throw new Error('Can\'t have a custom view type that references itself');
    }

    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
  }

  if (!theClass && superDef) {
    theClass = superDef.class;
  }

  if (!theClass) {
    return null; // don't throw a warning, might be settings for a single-unit view
  }

  return {
    type: viewType,
    class: theClass,
    defaults: __assign({}, superDef ? superDef.defaults : {}, defaultConfig ? defaultConfig.options : {}),
    overrides: __assign({}, superDef ? superDef.overrides : {}, overrideConfig ? overrideConfig.options : {})
  };
}

function findViewNameBySubclass(viewSubclass, configs) {
  var superProto = Object.getPrototypeOf(viewSubclass.prototype);

  for (var viewType in configs) {
    var parsed = configs[viewType]; // need DIRECT subclass, so instanceof won't do it

    if (parsed.class && parsed.class.prototype === superProto) {
      return viewType;
    }
  }

  return '';
}

function parseViewConfigs(inputs) {
  return mapHash(inputs, parseViewConfig);
}

var VIEW_DEF_PROPS = {
  type: String,
  class: null
};

function parseViewConfig(input) {
  if (typeof input === 'function') {
    input = {
      class: input
    };
  }

  var options = {};
  var props = refineProps(input, VIEW_DEF_PROPS, {}, options);
  return {
    superType: props.type,
    class: props.class,
    options: options
  };
}

function buildViewSpecs(defaultInputs, optionsManager) {
  var defaultConfigs = parseViewConfigs(defaultInputs);
  var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);
  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
  return mapHash(viewDefs, function (viewDef) {
    return buildViewSpec(viewDef, overrideConfigs, optionsManager);
  });
}

function buildViewSpec(viewDef, overrideConfigs, optionsManager) {
  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || optionsManager.dynamicOverrides.duration || optionsManager.overrides.duration;
  var duration = null;
  var durationUnit = '';
  var singleUnit = '';
  var singleUnitOverrides = {};

  if (durationInput) {
    duration = createDuration(durationInput);

    if (duration) {
      // valid?
      var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));
      durationUnit = denom.unit;

      if (denom.value === 1) {
        singleUnit = durationUnit;
        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};
      }
    }
  }

  var queryButtonText = function (options) {
    var buttonTextMap = options.buttonText || {};
    var buttonTextKey = viewDef.defaults.buttonTextKey;

    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {
      return buttonTextMap[buttonTextKey];
    }

    if (buttonTextMap[viewDef.type] != null) {
      return buttonTextMap[viewDef.type];
    }

    if (buttonTextMap[singleUnit] != null) {
      return buttonTextMap[singleUnit];
    }
  };

  return {
    type: viewDef.type,
    class: viewDef.class,
    duration: duration,
    durationUnit: durationUnit,
    singleUnit: singleUnit,
    options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),
    buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
    viewDef.overrides.buttonText,
    buttonTextDefault: queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || viewDef.defaults.buttonText || queryButtonText(globalDefaults) || viewDef.type // fall back to given view name

  };
}

var Toolbar =
/** @class */
function (_super) {
  __extends(Toolbar, _super);

  function Toolbar(extraClassName) {
    var _this = _super.call(this) || this;

    _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);
    _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);
    _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);
    _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);
    _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);
    _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);
    _this.el = createElement('div', {
      className: 'fc-toolbar ' + extraClassName
    });
    return _this;
  }

  Toolbar.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderLayout.unrender(); // should unrender everything else


    removeElement(this.el);
  };

  Toolbar.prototype.render = function (props) {
    this._renderLayout(props.layout);

    this._updateTitle(props.title);

    this._updateActiveButton(props.activeButton);

    this._updateToday(props.isTodayEnabled);

    this._updatePrev(props.isPrevEnabled);

    this._updateNext(props.isNextEnabled);
  };

  Toolbar.prototype.renderLayout = function (layout) {
    var el = this.el;
    this.viewsWithButtons = [];
    appendToElement(el, this.renderSection('left', layout.left));
    appendToElement(el, this.renderSection('center', layout.center));
    appendToElement(el, this.renderSection('right', layout.right));
  };

  Toolbar.prototype.unrenderLayout = function () {
    this.el.innerHTML = '';
  };

  Toolbar.prototype.renderSection = function (position, buttonStr) {
    var _this = this;

    var _a = this.context,
        theme = _a.theme,
        calendar = _a.calendar;
    var optionsManager = calendar.optionsManager;
    var viewSpecs = calendar.viewSpecs;
    var sectionEl = createElement('div', {
      className: 'fc-' + position
    });
    var calendarCustomButtons = optionsManager.computed.customButtons || {};
    var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
    var calendarButtonText = optionsManager.computed.buttonText || {};

    if (buttonStr) {
      buttonStr.split(' ').forEach(function (buttonGroupStr, i) {
        var groupChildren = [];
        var isOnlyButtons = true;
        var groupEl;
        buttonGroupStr.split(',').forEach(function (buttonName, j) {
          var customButtonProps;
          var viewSpec;
          var buttonClick;
          var buttonIcon; // only one of these will be set

          var buttonText; // "

          var buttonInnerHtml;
          var buttonClasses;
          var buttonEl;
          var buttonAriaAttr;

          if (buttonName === 'title') {
            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height

            isOnlyButtons = false;
          } else {
            if (customButtonProps = calendarCustomButtons[buttonName]) {
              buttonClick = function (ev) {
                if (customButtonProps.click) {
                  customButtonProps.click.call(buttonEl, ev);
                }
              };

              (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);
            } else if (viewSpec = viewSpecs[buttonName]) {
              _this.viewsWithButtons.push(buttonName);

              buttonClick = function () {
                calendar.changeView(buttonName);
              };

              (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);
            } else if (calendar[buttonName]) {
              // a calendar method
              buttonClick = function () {
                calendar[buttonName]();
              };

              (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]); //            ^ everything else is considered default
            }

            if (buttonClick) {
              buttonClasses = ['fc-' + buttonName + '-button', theme.getClass('button')];

              if (buttonText) {
                buttonInnerHtml = htmlEscape(buttonText);
                buttonAriaAttr = '';
              } else if (buttonIcon) {
                buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                buttonAriaAttr = ' aria-label="' + buttonName + '"';
              }

              buttonEl = htmlToElement( // type="button" so that it doesn't submit a form
              '<button type="button" class="' + buttonClasses.join(' ') + '"' + buttonAriaAttr + '>' + buttonInnerHtml + '</button>');
              buttonEl.addEventListener('click', buttonClick);
              groupChildren.push(buttonEl);
            }
          }
        });

        if (groupChildren.length > 1) {
          groupEl = document.createElement('div');
          var buttonGroupClassName = theme.getClass('buttonGroup');

          if (isOnlyButtons && buttonGroupClassName) {
            groupEl.classList.add(buttonGroupClassName);
          }

          appendToElement(groupEl, groupChildren);
          sectionEl.appendChild(groupEl);
        } else {
          appendToElement(sectionEl, groupChildren); // 1 or 0 children
        }
      });
    }

    return sectionEl;
  };

  Toolbar.prototype.updateToday = function (isTodayEnabled) {
    this.toggleButtonEnabled('today', isTodayEnabled);
  };

  Toolbar.prototype.updatePrev = function (isPrevEnabled) {
    this.toggleButtonEnabled('prev', isPrevEnabled);
  };

  Toolbar.prototype.updateNext = function (isNextEnabled) {
    this.toggleButtonEnabled('next', isNextEnabled);
  };

  Toolbar.prototype.updateTitle = function (text) {
    findElements(this.el, 'h2').forEach(function (titleEl) {
      titleEl.innerText = text;
    });
  };

  Toolbar.prototype.updateActiveButton = function (buttonName) {
    var theme = this.context.theme;
    var className = theme.getClass('buttonActive');
    findElements(this.el, 'button').forEach(function (buttonEl) {
      if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {
        buttonEl.classList.add(className);
      } else {
        buttonEl.classList.remove(className);
      }
    });
  };

  Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {
    findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {
      buttonEl.disabled = !bool;
    });
  };

  return Toolbar;
}(Component);

var CalendarComponent =
/** @class */
function (_super) {
  __extends(CalendarComponent, _super);

  function CalendarComponent(el) {
    var _this = _super.call(this) || this;

    _this.elClassNames = [];
    _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.renderToolbars = memoizeRendering(_this._renderToolbars, _this._unrenderToolbars, [_this.renderSkeleton]);
    _this.buildComponentContext = memoize(buildComponentContext);
    _this.buildViewPropTransformers = memoize(buildViewPropTransformers);
    _this.el = el;
    _this.computeTitle = memoize(computeTitle);
    _this.parseBusinessHours = memoize(function (input) {
      return parseBusinessHours(input, _this.context.calendar);
    });
    return _this;
  }

  CalendarComponent.prototype.render = function (props, context) {
    this.freezeHeight();
    var title = this.computeTitle(props.dateProfile, props.viewSpec.options);
    this.renderSkeleton(context);
    this.renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, title);
    this.renderView(props, title);
    this.updateSize();
    this.thawHeight();
  };

  CalendarComponent.prototype.destroy = function () {
    if (this.header) {
      this.header.destroy();
    }

    if (this.footer) {
      this.footer.destroy();
    }

    this.renderSkeleton.unrender(); // will call destroyView

    _super.prototype.destroy.call(this);
  };

  CalendarComponent.prototype._renderSkeleton = function (context) {
    this.updateElClassNames(context);
    prependToElement(this.el, this.contentEl = createElement('div', {
      className: 'fc-view-container'
    }));
    var calendar = context.calendar;

    for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {
      var modifyViewContainer = _a[_i];
      modifyViewContainer(this.contentEl, calendar);
    }
  };

  CalendarComponent.prototype._unrenderSkeleton = function () {
    // weird to have this here
    if (this.view) {
      this.savedScroll = this.view.queryScroll();
      this.view.destroy();
      this.view = null;
    }

    removeElement(this.contentEl);
    this.removeElClassNames();
  };

  CalendarComponent.prototype.removeElClassNames = function () {
    var classList = this.el.classList;

    for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {
      var className = _a[_i];
      classList.remove(className);
    }

    this.elClassNames = [];
  };

  CalendarComponent.prototype.updateElClassNames = function (context) {
    this.removeElClassNames();
    var theme = context.theme,
        options = context.options;
    this.elClassNames = ['fc', 'fc-' + options.dir, theme.getClass('widget')];
    var classList = this.el.classList;

    for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {
      var className = _a[_i];
      classList.add(className);
    }
  };

  CalendarComponent.prototype._renderToolbars = function (viewSpec, dateProfile, currentDate, title) {
    var _a = this,
        context = _a.context,
        header = _a.header,
        footer = _a.footer;

    var options = context.options,
        calendar = context.calendar;
    var headerLayout = options.header;
    var footerLayout = options.footer;
    var dateProfileGenerator = this.props.dateProfileGenerator;
    var now = calendar.getNow();
    var todayInfo = dateProfileGenerator.build(now);
    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);
    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);
    var toolbarProps = {
      title: title,
      activeButton: viewSpec.type,
      isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),
      isPrevEnabled: prevInfo.isValid,
      isNextEnabled: nextInfo.isValid
    };

    if (headerLayout) {
      if (!header) {
        header = this.header = new Toolbar('fc-header-toolbar');
        prependToElement(this.el, header.el);
      }

      header.receiveProps(__assign({
        layout: headerLayout
      }, toolbarProps), context);
    } else if (header) {
      header.destroy();
      header = this.header = null;
    }

    if (footerLayout) {
      if (!footer) {
        footer = this.footer = new Toolbar('fc-footer-toolbar');
        appendToElement(this.el, footer.el);
      }

      footer.receiveProps(__assign({
        layout: footerLayout
      }, toolbarProps), context);
    } else if (footer) {
      footer.destroy();
      footer = this.footer = null;
    }
  };

  CalendarComponent.prototype._unrenderToolbars = function () {
    if (this.header) {
      this.header.destroy();
      this.header = null;
    }

    if (this.footer) {
      this.footer.destroy();
      this.footer = null;
    }
  };

  CalendarComponent.prototype.renderView = function (props, title) {
    var view = this.view;
    var _a = this.context,
        calendar = _a.calendar,
        options = _a.options;
    var viewSpec = props.viewSpec,
        dateProfileGenerator = props.dateProfileGenerator;

    if (!view || view.viewSpec !== viewSpec) {
      if (view) {
        view.destroy();
      }

      view = this.view = new viewSpec['class'](viewSpec, this.contentEl);

      if (this.savedScroll) {
        view.addScroll(this.savedScroll, true);
        this.savedScroll = null;
      }
    }

    view.title = title; // for the API

    var viewProps = {
      dateProfileGenerator: dateProfileGenerator,
      dateProfile: props.dateProfile,
      businessHours: this.parseBusinessHours(viewSpec.options.businessHours),
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    };
    var transformers = this.buildViewPropTransformers(calendar.pluginSystem.hooks.viewPropsTransformers);

    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
      var transformer = transformers_1[_i];

      __assign(viewProps, transformer.transform(viewProps, viewSpec, props, options));
    }

    view.receiveProps(viewProps, this.buildComponentContext(this.context, viewSpec, view));
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.updateSize = function (isResize) {
    if (isResize === void 0) {
      isResize = false;
    }

    var view = this.view;

    if (!view) {
      return; // why?
    }

    if (isResize || this.isHeightAuto == null) {
      this.computeHeightVars();
    }

    view.updateSize(isResize, this.viewHeight, this.isHeightAuto);
    view.updateNowIndicator(); // we need to guarantee this will run after updateSize

    view.popScroll(isResize);
  };

  CalendarComponent.prototype.computeHeightVars = function () {
    var calendar = this.context.calendar; // yuck. need to handle dynamic options

    var heightInput = calendar.opt('height');
    var contentHeightInput = calendar.opt('contentHeight');
    this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';

    if (typeof contentHeightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = contentHeightInput;
    } else if (typeof contentHeightInput === 'function') {
      // exists and is a function
      this.viewHeight = contentHeightInput();
    } else if (typeof heightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = heightInput - this.queryToolbarsHeight();
    } else if (typeof heightInput === 'function') {
      // exists and is a function
      this.viewHeight = heightInput() - this.queryToolbarsHeight();
    } else if (heightInput === 'parent') {
      // set to height of parent element
      var parentEl = this.el.parentNode;
      this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();
    } else {
      this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width / Math.max(calendar.opt('aspectRatio'), .5));
    }
  };

  CalendarComponent.prototype.queryToolbarsHeight = function () {
    var height = 0;

    if (this.header) {
      height += computeHeightAndMargins(this.header.el);
    }

    if (this.footer) {
      height += computeHeightAndMargins(this.footer.el);
    }

    return height;
  }; // Height "Freezing"
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.freezeHeight = function () {
    applyStyle(this.el, {
      height: this.el.getBoundingClientRect().height,
      overflow: 'hidden'
    });
  };

  CalendarComponent.prototype.thawHeight = function () {
    applyStyle(this.el, {
      height: '',
      overflow: ''
    });
  };

  return CalendarComponent;
}(Component); // Title and Date Formatting
// -----------------------------------------------------------------------------------------------------------------
// Computes what the title at the top of the calendar should be for this view


function computeTitle(dateProfile, viewOptions) {
  var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after

  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
    range = dateProfile.currentRange;
  } else {
    // for day units or smaller, use the actual day range
    range = dateProfile.activeRange;
  }

  return this.context.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), {
    isEndExclusive: dateProfile.isRangeAllDay
  });
} // Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.


function computeTitleFormat(dateProfile) {
  var currentRangeUnit = dateProfile.currentRangeUnit;

  if (currentRangeUnit === 'year') {
    return {
      year: 'numeric'
    };
  } else if (currentRangeUnit === 'month') {
    return {
      year: 'numeric',
      month: 'long'
    }; // like "September 2014"
  } else {
    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);

    if (days !== null && days > 1) {
      // multi-day range. shorter, like "Sep 9 - 10 2014"
      return {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      };
    } else {
      // one day. longer, like "September 9 2014"
      return {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      };
    }
  }
} // build a context scoped to the view


function buildComponentContext(context, viewSpec, view) {
  return context.extend(viewSpec.options, view);
} // Plugin
// -----------------------------------------------------------------------------------------------------------------


function buildViewPropTransformers(theClasses) {
  return theClasses.map(function (theClass) {
    return new theClass();
  });
}

var Interaction =
/** @class */
function () {
  function Interaction(settings) {
    this.component = settings.component;
  }

  Interaction.prototype.destroy = function () {};

  return Interaction;
}();

function parseInteractionSettings(component, input) {
  return {
    component: component,
    el: input.el,
    useEventCenter: input.useEventCenter != null ? input.useEventCenter : true
  };
}

function interactionSettingsToStore(settings) {
  var _a;

  return _a = {}, _a[settings.component.uid] = settings, _a;
} // global state


var interactionSettingsStore = {};
/*
Detects when the user clicks on an event within a DateComponent
*/

var EventClicking =
/** @class */
function (_super) {
  __extends(EventClicking, _super);

  function EventClicking(settings) {
    var _this = _super.call(this, settings) || this;

    _this.handleSegClick = function (ev, segEl) {
      var component = _this.component;
      var _a = component.context,
          calendar = _a.calendar,
          view = _a.view;
      var seg = getElSeg(segEl);

      if (seg && // might be the <div> surrounding the more link
      component.isValidSegDownEl(ev.target)) {
        // our way to simulate a link click for elements that can't be <a> tags
        // grab before trigger fired in case trigger trashes DOM thru rerendering
        var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');
        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
        calendar.publiclyTrigger('eventClick', [{
          el: segEl,
          event: new EventApi(component.context.calendar, seg.eventRange.def, seg.eventRange.instance),
          jsEvent: ev,
          view: view
        }]);

        if (url && !ev.defaultPrevented) {
          window.location.href = url;
        }
      }
    };

    var component = settings.component;
    _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);
    return _this;
  }

  return EventClicking;
}(Interaction);
/*
Triggers events and adds/removes core classNames when the user's pointer
enters/leaves event-elements of a component.
*/


var EventHovering =
/** @class */
function (_super) {
  __extends(EventHovering, _super);

  function EventHovering(settings) {
    var _this = _super.call(this, settings) || this; // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it


    _this.handleEventElRemove = function (el) {
      if (el === _this.currentSegEl) {
        _this.handleSegLeave(null, _this.currentSegEl);
      }
    };

    _this.handleSegEnter = function (ev, segEl) {
      if (getElSeg(segEl)) {
        // TODO: better way to make sure not hovering over more+ link or its wrapper
        segEl.classList.add('fc-allow-mouse-resize');
        _this.currentSegEl = segEl;

        _this.triggerEvent('eventMouseEnter', ev, segEl);
      }
    };

    _this.handleSegLeave = function (ev, segEl) {
      if (_this.currentSegEl) {
        segEl.classList.remove('fc-allow-mouse-resize');
        _this.currentSegEl = null;

        _this.triggerEvent('eventMouseLeave', ev, segEl);
      }
    };

    var component = settings.component;
    _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave); // how to make sure component already has context?

    component.context.calendar.on('eventElRemove', _this.handleEventElRemove);
    return _this;
  }

  EventHovering.prototype.destroy = function () {
    this.removeHoverListeners();
    this.component.context.calendar.off('eventElRemove', this.handleEventElRemove);
  };

  EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {
    var component = this.component;
    var _a = component.context,
        calendar = _a.calendar,
        view = _a.view;
    var seg = getElSeg(segEl);

    if (!ev || component.isValidSegDownEl(ev.target)) {
      calendar.publiclyTrigger(publicEvName, [{
        el: segEl,
        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
        jsEvent: ev,
        view: view
      }]);
    }
  };

  return EventHovering;
}(Interaction);

var StandardTheme =
/** @class */
function (_super) {
  __extends(StandardTheme, _super);

  function StandardTheme() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return StandardTheme;
}(Theme);

StandardTheme.prototype.classes = {
  widget: 'fc-unthemed',
  widgetHeader: 'fc-widget-header',
  widgetContent: 'fc-widget-content',
  buttonGroup: 'fc-button-group',
  button: 'fc-button fc-button-primary',
  buttonActive: 'fc-button-active',
  popoverHeader: 'fc-widget-header',
  popoverContent: 'fc-widget-content',
  // day grid
  headerRow: 'fc-widget-header',
  dayRow: 'fc-widget-content',
  // list view
  listView: 'fc-widget-content'
};
StandardTheme.prototype.baseIconClass = 'fc-icon';
StandardTheme.prototype.iconClasses = {
  close: 'fc-icon-x',
  prev: 'fc-icon-chevron-left',
  next: 'fc-icon-chevron-right',
  prevYear: 'fc-icon-chevrons-left',
  nextYear: 'fc-icon-chevrons-right'
};
StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';

var Calendar =
/** @class */
function () {
  function Calendar(el, overrides) {
    var _this = this;

    this.buildComponentContext = memoize(buildComponentContext$1);
    this.parseRawLocales = memoize(parseRawLocales);
    this.buildLocale = memoize(buildLocale);
    this.buildDateEnv = memoize(buildDateEnv);
    this.buildTheme = memoize(buildTheme);
    this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);
    this.buildSelectionConfig = memoize(this._buildSelectionConfig);
    this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);
    this.buildEventUiBases = memoize(buildEventUiBases);
    this.interactionsStore = {};
    this.actionQueue = [];
    this.isReducing = false; // isDisplaying: boolean = false // installed in DOM? accepting renders?

    this.needsRerender = false; // needs a render?

    this.isRendering = false; // currently in the executeRender function?

    this.renderingPauseDepth = 0;
    this.buildDelayedRerender = memoize(buildDelayedRerender);
    this.afterSizingTriggers = {};
    this.isViewUpdated = false;
    this.isDatesUpdated = false;
    this.isEventsUpdated = false;
    this.el = el;
    this.optionsManager = new OptionsManager(overrides || {});
    this.pluginSystem = new PluginSystem(); // only do once. don't do in handleOptions. because can't remove plugins

    this.addPluginInputs(this.optionsManager.computed.plugins || []);
    this.handleOptions(this.optionsManager.computed);
    this.publiclyTrigger('_init'); // for tests

    this.hydrate();
    this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions.map(function (calendarInteractionClass) {
      return new calendarInteractionClass(_this);
    });
  }

  Calendar.prototype.addPluginInputs = function (pluginInputs) {
    var pluginDefs = refinePluginDefs(pluginInputs);

    for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {
      var pluginDef = pluginDefs_1[_i];
      this.pluginSystem.add(pluginDef);
    }
  };

  Object.defineProperty(Calendar.prototype, "view", {
    // public API
    get: function () {
      return this.component ? this.component.view : null;
    },
    enumerable: true,
    configurable: true
  }); // Public API for rendering
  // -----------------------------------------------------------------------------------------------------------------

  Calendar.prototype.render = function () {
    if (!this.component) {
      this.component = new CalendarComponent(this.el);
      this.renderableEventStore = createEmptyEventStore();
      this.bindHandlers();
      this.executeRender();
    } else {
      this.requestRerender();
    }
  };

  Calendar.prototype.destroy = function () {
    if (this.component) {
      this.unbindHandlers();
      this.component.destroy(); // don't null-out. in case API needs access

      this.component = null; // umm ???

      for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {
        var interaction = _a[_i];
        interaction.destroy();
      }

      this.publiclyTrigger('_destroyed');
    }
  }; // Handlers
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.bindHandlers = function () {
    var _this = this; // event delegation for nav links


    this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {
      var gotoOptions = anchorEl.getAttribute('data-goto');
      gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};
      var dateEnv = _this.dateEnv;
      var dateMarker = dateEnv.createMarker(gotoOptions.date);
      var viewType = gotoOptions.type; // property like "navLinkDayClick". might be a string or a function

      var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');

      if (typeof customAction === 'function') {
        customAction(dateEnv.toDate(dateMarker), ev);
      } else {
        if (typeof customAction === 'string') {
          viewType = customAction;
        }

        _this.zoomTo(dateMarker, viewType);
      }
    });

    if (this.opt('handleWindowResize')) {
      window.addEventListener('resize', this.windowResizeProxy = debounce( // prevents rapid calls
      this.windowResize.bind(this), this.opt('windowResizeDelay')));
    }
  };

  Calendar.prototype.unbindHandlers = function () {
    this.removeNavLinkListener();

    if (this.windowResizeProxy) {
      window.removeEventListener('resize', this.windowResizeProxy);
      this.windowResizeProxy = null;
    }
  }; // Dispatcher
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hydrate = function () {
    var _this = this;

    this.state = this.buildInitialState();
    var rawSources = this.opt('eventSources') || [];
    var singleRawSource = this.opt('events');
    var sources = []; // parsed

    if (singleRawSource) {
      rawSources.unshift(singleRawSource);
    }

    for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {
      var rawSource = rawSources_1[_i];
      var source = parseEventSource(rawSource, this);

      if (source) {
        sources.push(source);
      }
    }

    this.batchRendering(function () {
      _this.dispatch({
        type: 'INIT'
      }); // pass in sources here?


      _this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: sources
      });

      _this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView
      });
    });
  };

  Calendar.prototype.buildInitialState = function () {
    return {
      viewType: null,
      loadingLevel: 0,
      eventSourceLoadingLevel: 0,
      currentDate: this.getInitialDate(),
      dateProfile: null,
      eventSources: {},
      eventStore: createEmptyEventStore(),
      dateSelection: null,
      eventSelection: '',
      eventDrag: null,
      eventResize: null
    };
  };

  Calendar.prototype.dispatch = function (action) {
    this.actionQueue.push(action);

    if (!this.isReducing) {
      this.isReducing = true;
      var oldState = this.state;

      while (this.actionQueue.length) {
        this.state = this.reduce(this.state, this.actionQueue.shift(), this);
      }

      var newState = this.state;
      this.isReducing = false;

      if (!oldState.loadingLevel && newState.loadingLevel) {
        this.publiclyTrigger('loading', [true]);
      } else if (oldState.loadingLevel && !newState.loadingLevel) {
        this.publiclyTrigger('loading', [false]);
      }

      var view = this.component && this.component.view;

      if (oldState.eventStore !== newState.eventStore) {
        if (oldState.eventStore) {
          this.isEventsUpdated = true;
        }
      }

      if (oldState.dateProfile !== newState.dateProfile) {
        if (oldState.dateProfile && view) {
          // why would view be null!?
          this.publiclyTrigger('datesDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isDatesUpdated = true;
      }

      if (oldState.viewType !== newState.viewType) {
        if (oldState.viewType && view) {
          // why would view be null!?
          this.publiclyTrigger('viewSkeletonDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isViewUpdated = true;
      }

      this.requestRerender();
    }
  };

  Calendar.prototype.reduce = function (state, action, calendar) {
    return reduce(state, action, calendar);
  }; // Render Queue
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.requestRerender = function () {
    this.needsRerender = true;
    this.delayedRerender(); // will call a debounced-version of tryRerender
  };

  Calendar.prototype.tryRerender = function () {
    if (this.component && // must be accepting renders
    this.needsRerender && // indicates that a rerender was requested
    !this.renderingPauseDepth && // not paused
    !this.isRendering // not currently in the render loop
    ) {
        this.executeRender();
      }
  };

  Calendar.prototype.batchRendering = function (func) {
    this.renderingPauseDepth++;
    func();
    this.renderingPauseDepth--;

    if (this.needsRerender) {
      this.requestRerender();
    }
  }; // Rendering
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.executeRender = function () {
    // clear these BEFORE the render so that new values will accumulate during render
    this.needsRerender = false;
    this.isRendering = true;
    this.renderComponent();
    this.isRendering = false; // received a rerender request while rendering

    if (this.needsRerender) {
      this.delayedRerender();
    }
  };
  /*
  don't call this directly. use executeRender instead
  */


  Calendar.prototype.renderComponent = function () {
    var _a = this,
        state = _a.state,
        component = _a.component;

    var viewType = state.viewType;
    var viewSpec = this.viewSpecs[viewType];

    if (!viewSpec) {
      throw new Error("View type \"" + viewType + "\" is not valid");
    } // if event sources are still loading and progressive rendering hasn't been enabled,
    // keep rendering the last fully loaded set of events


    var renderableEventStore = this.renderableEventStore = state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering') ? this.renderableEventStore : state.eventStore;
    var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);
    var eventUiBySource = this.buildEventUiBySource(state.eventSources);
    var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);
    component.receiveProps(__assign({}, state, {
      viewSpec: viewSpec,
      dateProfileGenerator: this.dateProfileGenerators[viewType],
      dateProfile: state.dateProfile,
      eventStore: renderableEventStore,
      eventUiBases: eventUiBases,
      dateSelection: state.dateSelection,
      eventSelection: state.eventSelection,
      eventDrag: state.eventDrag,
      eventResize: state.eventResize
    }), this.buildComponentContext(this.theme, this.dateEnv, this.optionsManager.computed));

    if (this.isViewUpdated) {
      this.isViewUpdated = false;
      this.publiclyTrigger('viewSkeletonRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isDatesUpdated) {
      this.isDatesUpdated = false;
      this.publiclyTrigger('datesRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isEventsUpdated) {
      this.isEventsUpdated = false;
    }

    this.releaseAfterSizingTriggers();
  }; // Options
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.setOption = function (name, val) {
    var _a;

    this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);
  };

  Calendar.prototype.getOption = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.opt = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.viewOpt = function (name) {
    return this.viewOpts()[name];
  };

  Calendar.prototype.viewOpts = function () {
    return this.viewSpecs[this.state.viewType].options;
  };
  /*
  handles option changes (like a diff)
  */


  Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {
    var _this = this;

    var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;
    var normalUpdates = {};
    var specialUpdates = {};
    var oldDateEnv = this.dateEnv; // do this before handleOptions

    var isTimeZoneDirty = false;
    var isSizeDirty = false;
    var anyDifficultOptions = Boolean(removals.length);

    for (var name_1 in updates) {
      if (changeHandlers[name_1]) {
        specialUpdates[name_1] = updates[name_1];
      } else {
        normalUpdates[name_1] = updates[name_1];
      }
    }

    for (var name_2 in normalUpdates) {
      if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {
        isSizeDirty = true;
      } else if (/^(defaultDate|defaultView)$/.test(name_2)) ;else {
        anyDifficultOptions = true;

        if (name_2 === 'timeZone') {
          isTimeZoneDirty = true;
        }
      }
    }

    this.optionsManager.mutate(normalUpdates, removals, isDynamic);

    if (anyDifficultOptions) {
      this.handleOptions(this.optionsManager.computed);
    }

    this.batchRendering(function () {
      if (anyDifficultOptions) {
        if (isTimeZoneDirty) {
          _this.dispatch({
            type: 'CHANGE_TIMEZONE',
            oldDateEnv: oldDateEnv
          });
        }
        /* HACK
        has the same effect as calling this.requestRerender()
        but recomputes the state's dateProfile
        */


        _this.dispatch({
          type: 'SET_VIEW_TYPE',
          viewType: _this.state.viewType
        });
      } else if (isSizeDirty) {
        _this.updateSize();
      } // special updates


      if (deepEqual) {
        for (var name_3 in specialUpdates) {
          changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);
        }
      }
    });
  };
  /*
  rebuilds things based off of a complete set of refined options
  */


  Calendar.prototype.handleOptions = function (options) {
    var _this = this;

    var pluginHooks = this.pluginSystem.hooks;
    this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);
    this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);
    this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);
    this.theme = this.buildTheme(options);
    var available = this.parseRawLocales(options.locales);
    this.availableRawLocales = available.map;
    var locale = this.buildLocale(options.locale || available.defaultCode, available.map);
    this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);
    this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(
    // ineffecient to do every time?

    this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager); // ineffecient to do every time?

    this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {
      return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);
    });
  };

  Calendar.prototype.getAvailableLocaleCodes = function () {
    return Object.keys(this.availableRawLocales);
  };

  Calendar.prototype._buildSelectionConfig = function (rawOpts) {
    return processScopedUiProps('select', rawOpts, this);
  };

  Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {
    if (rawOpts.editable) {
      // so 'editable' affected events
      rawOpts = __assign({}, rawOpts, {
        eventEditable: true
      });
    }

    return processScopedUiProps('event', rawOpts, this);
  }; // Trigger
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hasPublicHandlers = function (name) {
    return this.hasHandlers(name) || this.opt(name); // handler specified in options
  };

  Calendar.prototype.publiclyTrigger = function (name, args) {
    var optHandler = this.opt(name);
    this.triggerWith(name, this, args);

    if (optHandler) {
      return optHandler.apply(this, args);
    }
  };

  Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {
    var afterSizingTriggers = this.afterSizingTriggers;
    (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);
  };

  Calendar.prototype.releaseAfterSizingTriggers = function () {
    var afterSizingTriggers = this.afterSizingTriggers;

    for (var name_4 in afterSizingTriggers) {
      for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {
        var args = _a[_i];
        this.publiclyTrigger(name_4, args);
      }
    }

    this.afterSizingTriggers = {};
  }; // View
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a boolean about whether the view is okay to instantiate at some point


  Calendar.prototype.isValidViewType = function (viewType) {
    return Boolean(this.viewSpecs[viewType]);
  };

  Calendar.prototype.changeView = function (viewType, dateOrRange) {
    var dateMarker = null;

    if (dateOrRange) {
      if (dateOrRange.start && dateOrRange.end) {
        // a range
        this.optionsManager.mutate({
          visibleRange: dateOrRange
        }, []); // will not rerender

        this.handleOptions(this.optionsManager.computed); // ...but yuck
      } else {
        // a date
        dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate
      }
    }

    this.unselect();
    this.dispatch({
      type: 'SET_VIEW_TYPE',
      viewType: viewType,
      dateMarker: dateMarker
    });
  }; // Forces navigation to a view for the given date.
  // `viewType` can be a specific view name or a generic one like "week" or "day".
  // needs to change


  Calendar.prototype.zoomTo = function (dateMarker, viewType) {
    var spec;
    viewType = viewType || 'day'; // day is default zoom

    spec = this.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
    this.unselect();

    if (spec) {
      this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: spec.type,
        dateMarker: dateMarker
      });
    } else {
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: dateMarker
      });
    }
  }; // Given a duration singular unit, like "week" or "day", finds a matching view spec.
  // Preference is given to views that have corresponding buttons.


  Calendar.prototype.getUnitViewSpec = function (unit) {
    var component = this.component;
    var viewTypes = [];
    var i;
    var spec; // put views that have buttons first. there will be duplicates, but oh

    if (component.header) {
      viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);
    }

    if (component.footer) {
      viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);
    }

    for (var viewType in this.viewSpecs) {
      viewTypes.push(viewType);
    }

    for (i = 0; i < viewTypes.length; i++) {
      spec = this.viewSpecs[viewTypes[i]];

      if (spec) {
        if (spec.singleUnit === unit) {
          return spec;
        }
      }
    }
  }; // Current Date
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getInitialDate = function () {
    var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date

    if (defaultDateInput != null) {
      return this.dateEnv.createMarker(defaultDateInput);
    } else {
      return this.getNow(); // getNow already returns unzoned
    }
  };

  Calendar.prototype.prev = function () {
    this.unselect();
    this.dispatch({
      type: 'PREV'
    });
  };

  Calendar.prototype.next = function () {
    this.unselect();
    this.dispatch({
      type: 'NEXT'
    });
  };

  Calendar.prototype.prevYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)
    });
  };

  Calendar.prototype.nextYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)
    });
  };

  Calendar.prototype.today = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.getNow()
    });
  };

  Calendar.prototype.gotoDate = function (zonedDateInput) {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.createMarker(zonedDateInput)
    });
  };

  Calendar.prototype.incrementDate = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // else, warn about invalid input?
      this.unselect();
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: this.dateEnv.add(this.state.currentDate, delta)
      });
    }
  }; // for external API


  Calendar.prototype.getDate = function () {
    return this.dateEnv.toDate(this.state.currentDate);
  }; // Date Formatting Utils
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.formatDate = function (d, formatter) {
    var dateEnv = this.dateEnv;
    return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
  }; // `settings` is for formatter AND isEndExclusive


  Calendar.prototype.formatRange = function (d0, d1, settings) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);
  };

  Calendar.prototype.formatIso = function (d, omitTime) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatIso(dateEnv.createMarker(d), {
      omitTime: omitTime
    });
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.windowResize = function (ev) {
    if (!this.isHandlingWindowResize && this.component && // why?
    ev.target === window // not a jqui resize event
    ) {
        this.isHandlingWindowResize = true;
        this.updateSize();
        this.publiclyTrigger('windowResize', [this.view]);
        this.isHandlingWindowResize = false;
      }
  };

  Calendar.prototype.updateSize = function () {
    if (this.component) {
      // when?
      this.component.updateSize(true);
    }
  }; // Component Registration
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {
    var settings = parseInteractionSettings(component, settingsInput);
    var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];
    var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);
    var interactions = interactionClasses.map(function (interactionClass) {
      return new interactionClass(settings);
    });
    this.interactionsStore[component.uid] = interactions;
    interactionSettingsStore[component.uid] = settings;
  };

  Calendar.prototype.unregisterInteractiveComponent = function (component) {
    for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {
      var listener = _a[_i];
      listener.destroy();
    }

    delete this.interactionsStore[component.uid];
    delete interactionSettingsStore[component.uid];
  }; // Date Selection / Event Selection / DayClick
  // -----------------------------------------------------------------------------------------------------------------
  // this public method receives start/end dates in any format, with any timezone
  // NOTE: args were changed from v3


  Calendar.prototype.select = function (dateOrObj, endDate) {
    var selectionInput;

    if (endDate == null) {
      if (dateOrObj.start != null) {
        selectionInput = dateOrObj;
      } else {
        selectionInput = {
          start: dateOrObj,
          end: null
        };
      }
    } else {
      selectionInput = {
        start: dateOrObj,
        end: endDate
      };
    }

    var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({
      days: 1
    }) // TODO: cache this?
    );

    if (selection) {
      // throw parse error otherwise?
      this.dispatch({
        type: 'SELECT_DATES',
        selection: selection
      });
      this.triggerDateSelect(selection);
    }
  }; // public method


  Calendar.prototype.unselect = function (pev) {
    if (this.state.dateSelection) {
      this.dispatch({
        type: 'UNSELECT_DATES'
      });
      this.triggerDateUnselect(pev);
    }
  };

  Calendar.prototype.triggerDateSelect = function (selection, pev) {
    var arg = __assign({}, this.buildDateSpanApi(selection), {
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    });

    this.publiclyTrigger('select', [arg]);
  };

  Calendar.prototype.triggerDateUnselect = function (pev) {
    this.publiclyTrigger('unselect', [{
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    }]);
  }; // TODO: receive pev?


  Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {
    var arg = __assign({}, this.buildDatePointApi(dateSpan), {
      dayEl: dayEl,
      jsEvent: ev,
      // Is this always a mouse event? See #4655
      view: view
    });

    this.publiclyTrigger('dateClick', [arg]);
  };

  Calendar.prototype.buildDatePointApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDatePointApi(dateSpan, this.dateEnv));

    return props;
  };

  Calendar.prototype.buildDateSpanApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));

    return props;
  }; // Date Utils
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option


  Calendar.prototype.getNow = function () {
    var now = this.opt('now');

    if (typeof now === 'function') {
      now = now();
    }

    if (now == null) {
      return this.dateEnv.createNowMarker();
    }

    return this.dateEnv.createMarker(now);
  }; // Event-Date Utilities
  // -----------------------------------------------------------------------------------------------------------------
  // Given an event's allDay status and start date, return what its fallback end date should be.
  // TODO: rename to computeDefaultEventEnd


  Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {
    var end = marker;

    if (allDay) {
      end = startOfDay(end);
      end = this.dateEnv.add(end, this.defaultAllDayEventDuration);
    } else {
      end = this.dateEnv.add(end, this.defaultTimedEventDuration);
    }

    return end;
  }; // Public Events API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.addEvent = function (eventInput, sourceInput) {
    if (eventInput instanceof EventApi) {
      var def = eventInput._def;
      var instance = eventInput._instance; // not already present? don't want to add an old snapshot

      if (!this.state.eventStore.defs[def.defId]) {
        this.dispatch({
          type: 'ADD_EVENTS',
          eventStore: eventTupleToStore({
            def: def,
            instance: instance
          }) // TODO: better util for two args?

        });
      }

      return eventInput;
    }

    var sourceId;

    if (sourceInput instanceof EventSourceApi) {
      sourceId = sourceInput.internalEventSource.sourceId;
    } else if (sourceInput != null) {
      var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function

      if (!sourceApi) {
        console.warn('Could not find an event source with ID "' + sourceInput + '"'); // TODO: test

        return null;
      } else {
        sourceId = sourceApi.internalEventSource.sourceId;
      }
    }

    var tuple = parseEvent(eventInput, sourceId, this);

    if (tuple) {
      this.dispatch({
        type: 'ADD_EVENTS',
        eventStore: eventTupleToStore(tuple)
      });
      return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
    }

    return null;
  }; // TODO: optimize


  Calendar.prototype.getEventById = function (id) {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    id = String(id);

    for (var defId in defs) {
      var def = defs[defId];

      if (def.publicId === id) {
        if (def.recurringDef) {
          return new EventApi(this, def, null);
        } else {
          for (var instanceId in instances) {
            var instance = instances[instanceId];

            if (instance.defId === def.defId) {
              return new EventApi(this, def, instance);
            }
          }
        }
      }
    }

    return null;
  };

  Calendar.prototype.getEvents = function () {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var id in instances) {
      var instance = instances[id];
      var def = defs[instance.defId];
      eventApis.push(new EventApi(this, def, instance));
    }

    return eventApis;
  };

  Calendar.prototype.removeAllEvents = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENTS'
    });
  };

  Calendar.prototype.rerenderEvents = function () {
    this.dispatch({
      type: 'RESET_EVENTS'
    });
  }; // Public Event Sources API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getEventSources = function () {
    var sourceHash = this.state.eventSources;
    var sourceApis = [];

    for (var internalId in sourceHash) {
      sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));
    }

    return sourceApis;
  };

  Calendar.prototype.getEventSourceById = function (id) {
    var sourceHash = this.state.eventSources;
    id = String(id);

    for (var sourceId in sourceHash) {
      if (sourceHash[sourceId].publicId === id) {
        return new EventSourceApi(this, sourceHash[sourceId]);
      }
    }

    return null;
  };

  Calendar.prototype.addEventSource = function (sourceInput) {
    if (sourceInput instanceof EventSourceApi) {
      // not already present? don't want to add an old snapshot
      if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {
        this.dispatch({
          type: 'ADD_EVENT_SOURCES',
          sources: [sourceInput.internalEventSource]
        });
      }

      return sourceInput;
    }

    var eventSource = parseEventSource(sourceInput, this);

    if (eventSource) {
      // TODO: error otherwise?
      this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: [eventSource]
      });
      return new EventSourceApi(this, eventSource);
    }

    return null;
  };

  Calendar.prototype.removeAllEventSources = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENT_SOURCES'
    });
  };

  Calendar.prototype.refetchEvents = function () {
    this.dispatch({
      type: 'FETCH_EVENT_SOURCES'
    });
  }; // Scroll
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.scrollToTime = function (timeInput) {
    var duration = createDuration(timeInput);

    if (duration) {
      this.component.view.scrollToDuration(duration);
    }
  };

  return Calendar;
}();

EmitterMixin.mixInto(Calendar); // for memoizers
// -----------------------------------------------------------------------------------------------------------------

function buildComponentContext$1(theme, dateEnv, options) {
  return new ComponentContext(this, theme, dateEnv, options, null);
}

function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {
  return new DateEnv({
    calendarSystem: 'gregory',
    timeZone: timeZone,
    namedTimeZoneImpl: namedTimeZoneImpl,
    locale: locale,
    weekNumberCalculation: weekNumberCalculation,
    firstDay: firstDay,
    weekLabel: weekLabel,
    cmdFormatter: cmdFormatter
  });
}

function buildTheme(calendarOptions) {
  var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;
  return new themeClass(calendarOptions);
}

function buildDelayedRerender(wait) {
  var func = this.tryRerender.bind(this);

  if (wait != null) {
    func = debounce(func, wait);
  }

  return func;
}

function buildEventUiBySource(eventSources) {
  return mapHash(eventSources, function (eventSource) {
    return eventSource.ui;
  });
}

function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
  var eventUiBases = {
    '': eventUiSingleBase
  };

  for (var defId in eventDefs) {
    var def = eventDefs[defId];

    if (def.sourceId && eventUiBySource[def.sourceId]) {
      eventUiBases[defId] = eventUiBySource[def.sourceId];
    }
  }

  return eventUiBases;
}

var View =
/** @class */
function (_super) {
  __extends(View, _super);

  function View(viewSpec, parentEl) {
    var _this = _super.call(this, createElement('div', {
      className: 'fc-view fc-' + viewSpec.type + '-view'
    })) || this;

    _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);
    _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);
    _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);
    _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);
    _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);
    _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);
    _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);
    _this.viewSpec = viewSpec;
    _this.type = viewSpec.type;
    parentEl.appendChild(_this.el);

    _this.initialize();

    return _this;
  }

  View.prototype.initialize = function () {};

  Object.defineProperty(View.prototype, "activeStart", {
    // Date Setting/Unsetting
    // -----------------------------------------------------------------------------------------------------------------
    get: function () {
      return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "activeEnd", {
    get: function () {
      return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.end);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentStart", {
    get: function () {
      return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentEnd", {
    get: function () {
      return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.end);
    },
    enumerable: true,
    configurable: true
  }); // General Rendering
  // -----------------------------------------------------------------------------------------------------------------

  View.prototype.render = function (props, context) {
    this.renderDatesMem(props.dateProfile);
    this.renderBusinessHoursMem(props.businessHours);
    this.renderDateSelectionMem(props.dateSelection);
    this.renderEventsMem(props.eventStore);
    this.renderEventSelectionMem(props.eventSelection);
    this.renderEventDragMem(props.eventDrag);
    this.renderEventResizeMem(props.eventResize);
  };

  View.prototype.beforeUpdate = function () {
    this.addScroll(this.queryScroll());
  };

  View.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderDatesMem.unrender(); // should unrender everything else
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    var calendar = this.context.calendar;

    if (isResize) {
      this.addScroll(this.queryScroll()); // NOTE: same code as in beforeUpdate
    }

    if (isResize || // HACKS...
    calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      // sort of the catch-all sizing
      // anything that might cause dimension changes
      this.updateBaseSize(isResize, viewHeight, isAuto);
    } // NOTE: popScroll is called by CalendarComponent

  };

  View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {}; // Date Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDatesWrap = function (dateProfile) {
    this.renderDates(dateProfile);
    this.addScroll({
      duration: createDuration(this.context.options.scrollTime)
    });
  };

  View.prototype.unrenderDatesWrap = function () {
    this.stopNowIndicator();
    this.unrenderDates();
  };

  View.prototype.renderDates = function (dateProfile) {};

  View.prototype.unrenderDates = function () {}; // Business Hours
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderBusinessHours = function (businessHours) {};

  View.prototype.unrenderBusinessHours = function () {}; // Date Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDateSelectionWrap = function (selection) {
    if (selection) {
      this.renderDateSelection(selection);
    }
  };

  View.prototype.unrenderDateSelectionWrap = function (selection) {
    if (selection) {
      this.unrenderDateSelection(selection);
    }
  };

  View.prototype.renderDateSelection = function (selection) {};

  View.prototype.unrenderDateSelection = function (selection) {}; // Event Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEvents = function (eventStore) {};

  View.prototype.unrenderEvents = function () {}; // util for subclasses


  View.prototype.sliceEvents = function (eventStore, allDay) {
    var props = this.props;
    return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.context.nextDayThreshold : null).fg;
  }; // Event Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.renderEventSelection(instanceId);
    }
  };

  View.prototype.unrenderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.unrenderEventSelection(instanceId);
    }
  };

  View.prototype.renderEventSelection = function (instanceId) {};

  View.prototype.unrenderEventSelection = function (instanceId) {}; // Event Drag
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventDragWrap = function (state) {
    if (state) {
      this.renderEventDrag(state);
    }
  };

  View.prototype.unrenderEventDragWrap = function (state) {
    if (state) {
      this.unrenderEventDrag(state);
    }
  };

  View.prototype.renderEventDrag = function (state) {};

  View.prototype.unrenderEventDrag = function (state) {}; // Event Resize
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventResizeWrap = function (state) {
    if (state) {
      this.renderEventResize(state);
    }
  };

  View.prototype.unrenderEventResizeWrap = function (state) {
    if (state) {
      this.unrenderEventResize(state);
    }
  };

  View.prototype.renderEventResize = function (state) {};

  View.prototype.unrenderEventResize = function (state) {};
  /* Now Indicator
  ------------------------------------------------------------------------------------------------------------------*/
  // Immediately render the current time indicator and begins re-rendering it at an interval,
  // which is defined by this.getNowIndicatorUnit().
  // TODO: somehow do this for the current whole day's background too
  // USAGE: must be called manually from subclasses' render methods! don't need to call stopNowIndicator tho


  View.prototype.startNowIndicator = function (dateProfile, dateProfileGenerator) {
    var _this = this;

    var _a = this.context,
        calendar = _a.calendar,
        dateEnv = _a.dateEnv,
        options = _a.options;
    var unit;
    var update;
    var delay; // ms wait value

    if (options.nowIndicator && !this.initialNowDate) {
      unit = this.getNowIndicatorUnit(dateProfile, dateProfileGenerator);

      if (unit) {
        update = this.updateNowIndicator.bind(this);
        this.initialNowDate = calendar.getNow();
        this.initialNowQueriedMs = new Date().valueOf(); // wait until the beginning of the next interval

        delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf(); // TODO: maybe always use setTimeout, waiting until start of next unit

        this.nowIndicatorTimeoutID = setTimeout(function () {
          _this.nowIndicatorTimeoutID = null;
          update();

          if (unit === 'second') {
            delay = 1000; // every second
          } else {
            delay = 1000 * 60; // otherwise, every minute
          }

          _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
        }, delay);
      } // rendering will be initiated in updateSize

    }
  }; // rerenders the now indicator, computing the new current time from the amount of time that has passed
  // since the initial getNow call.


  View.prototype.updateNowIndicator = function () {
    if (this.props.dateProfile && // a way to determine if dates were rendered yet
    this.initialNowDate // activated before?
    ) {
        this.unrenderNowIndicator(); // won't unrender if unnecessary

        this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));
        this.isNowIndicatorRendered = true;
      }
  }; // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
  // Won't cause side effects if indicator isn't rendered.


  View.prototype.stopNowIndicator = function () {
    if (this.nowIndicatorTimeoutID) {
      clearTimeout(this.nowIndicatorTimeoutID);
      this.nowIndicatorTimeoutID = null;
    }

    if (this.nowIndicatorIntervalID) {
      clearInterval(this.nowIndicatorIntervalID);
      this.nowIndicatorIntervalID = null;
    }

    if (this.isNowIndicatorRendered) {
      this.unrenderNowIndicator();
      this.isNowIndicatorRendered = false;
    }
  };

  View.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {// subclasses should implement
  }; // Renders a current time indicator at the given datetime


  View.prototype.renderNowIndicator = function (date) {// SUBCLASSES MUST PASS TO CHILDREN!
  }; // Undoes the rendering actions from renderNowIndicator


  View.prototype.unrenderNowIndicator = function () {// SUBCLASSES MUST PASS TO CHILDREN!
  };
  /* Scroller
  ------------------------------------------------------------------------------------------------------------------*/


  View.prototype.addScroll = function (scroll, isForced) {
    if (isForced) {
      scroll.isForced = isForced;
    }

    __assign(this.queuedScroll || (this.queuedScroll = {}), scroll);
  };

  View.prototype.popScroll = function (isResize) {
    this.applyQueuedScroll(isResize);
    this.queuedScroll = null;
  };

  View.prototype.applyQueuedScroll = function (isResize) {
    if (this.queuedScroll) {
      this.applyScroll(this.queuedScroll, isResize);
    }
  };

  View.prototype.queryScroll = function () {
    var scroll = {};

    if (this.props.dateProfile) {
      // dates rendered yet?
      __assign(scroll, this.queryDateScroll());
    }

    return scroll;
  };

  View.prototype.applyScroll = function (scroll, isResize) {
    var duration = scroll.duration,
        isForced = scroll.isForced;

    if (duration != null && !isForced) {
      delete scroll.duration;

      if (this.props.dateProfile) {
        // dates rendered yet?
        __assign(scroll, this.computeDateScroll(duration));
      }
    }

    if (this.props.dateProfile) {
      // dates rendered yet?
      this.applyDateScroll(scroll);
    }
  };

  View.prototype.computeDateScroll = function (duration) {
    return {}; // subclasses must implement
  };

  View.prototype.queryDateScroll = function () {
    return {}; // subclasses must implement
  };

  View.prototype.applyDateScroll = function (scroll) {// subclasses must implement
  }; // for API


  View.prototype.scrollToDuration = function (duration) {
    this.applyScroll({
      duration: duration
    }, false);
  };

  return View;
}(DateComponent);

EmitterMixin.mixInto(View);
View.prototype.usesMinMaxTime = false;
View.prototype.dateProfileGeneratorClass = DateProfileGenerator;

var FgEventRenderer =
/** @class */
function () {
  function FgEventRenderer() {
    this.segs = [];
    this.isSizeDirty = false;
  }

  FgEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {
    this.context = context;
    this.rangeUpdated(); // called too frequently :(
    // render an `.el` on each seg
    // returns a subset of the segs. segs that were actually rendered

    segs = this.renderSegEls(segs, mirrorInfo);
    this.segs = segs;
    this.attachSegs(segs, mirrorInfo);
    this.isSizeDirty = true;
    triggerRenderedSegs(this.context, this.segs, Boolean(mirrorInfo));
  };

  FgEventRenderer.prototype.unrender = function (context, _segs, mirrorInfo) {
    triggerWillRemoveSegs(this.context, this.segs, Boolean(mirrorInfo));
    this.detachSegs(this.segs);
    this.segs = [];
  }; // Updates values that rely on options and also relate to range


  FgEventRenderer.prototype.rangeUpdated = function () {
    var options = this.context.options;
    var displayEventTime;
    var displayEventEnd;
    this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);
    displayEventTime = options.displayEventTime;

    if (displayEventTime == null) {
      displayEventTime = this.computeDisplayEventTime(); // might be based off of range
    }

    displayEventEnd = options.displayEventEnd;

    if (displayEventEnd == null) {
      displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
    }

    this.displayEventTime = displayEventTime;
    this.displayEventEnd = displayEventEnd;
  }; // Renders and assigns an `el` property for each foreground event segment.
  // Only returns segments that successfully rendered.


  FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {
    var html = '';
    var i;

    if (segs.length) {
      // don't build an empty html string
      // build a large concatenation of event segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(segs[i], mirrorInfo);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });
      segs = filterSegsViaEls(this.context, segs, Boolean(mirrorInfo));
    }

    return segs;
  }; // Generic utility for generating the HTML classNames for an event segment's element


  FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {
    var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(seg.eventRange.ui.classNames);

    if (isDraggable) {
      classes.push('fc-draggable');
    }

    if (isResizable) {
      classes.push('fc-resizable');
    }

    if (mirrorInfo) {
      classes.push('fc-mirror');

      if (mirrorInfo.isDragging) {
        classes.push('fc-dragging');
      }

      if (mirrorInfo.isResizing) {
        classes.push('fc-resizing');
      }
    }

    return classes;
  }; // Compute the text that should be displayed on an event's element.
  // `range` can be the Event object itself, or something range-like, with at least a `start`.
  // If event times are disabled, or the event has no time, will return a blank string.
  // If not specified, formatter will default to the eventTimeFormat setting,
  // and displayEnd will default to the displayEventEnd setting.


  FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {
    var def = eventRange.def,
        instance = eventRange.instance;
    return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);
  };

  FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {
    var dateEnv = this.context.dateEnv;

    if (formatter == null) {
      formatter = this.eventTimeFormat;
    }

    if (displayEnd == null) {
      displayEnd = this.displayEventEnd;
    }

    if (this.displayEventTime && !allDay) {
      if (displayEnd && end) {
        return dateEnv.formatRange(start, end, formatter, {
          forcedStartTzo: forcedStartTzo,
          forcedEndTzo: forcedEndTzo
        });
      } else {
        return dateEnv.format(start, formatter, {
          forcedTzo: forcedStartTzo
        });
      }
    }

    return '';
  };

  FgEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true
    };
  };

  FgEventRenderer.prototype.computeDisplayEventTime = function () {
    return true;
  };

  FgEventRenderer.prototype.computeDisplayEventEnd = function () {
    return true;
  }; // Utility for generating event skin-related CSS properties


  FgEventRenderer.prototype.getSkinCss = function (ui) {
    return {
      'background-color': ui.backgroundColor,
      'border-color': ui.borderColor,
      color: ui.textColor
    };
  };

  FgEventRenderer.prototype.sortEventSegs = function (segs) {
    var specs = this.context.eventOrderSpecs;
    var objs = segs.map(buildSegCompareObj);
    objs.sort(function (obj0, obj1) {
      return compareByFieldSpecs(obj0, obj1, specs);
    });
    return objs.map(function (c) {
      return c._seg;
    });
  };

  FgEventRenderer.prototype.computeSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.computeSegSizes(this.segs);
    }
  };

  FgEventRenderer.prototype.assignSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.assignSegSizes(this.segs);
      this.isSizeDirty = false;
    }
  };

  FgEventRenderer.prototype.computeSegSizes = function (segs) {};

  FgEventRenderer.prototype.assignSegSizes = function (segs) {}; // Manipulation on rendered segs


  FgEventRenderer.prototype.hideByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = 'hidden';
        }
      }
    }
  };

  FgEventRenderer.prototype.showByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = '';
        }
      }
    }
  };

  FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];
        var eventInstance = seg.eventRange.instance;

        if (eventInstance && eventInstance.instanceId === instanceId && seg.el // necessary?
        ) {
            seg.el.classList.add('fc-selected');
          }
      }
    }
  };

  FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (seg.el) {
          // necessary?
          seg.el.classList.remove('fc-selected');
        }
      }
    }
  };

  return FgEventRenderer;
}(); // returns a object with all primitive props that can be compared


function buildSegCompareObj(seg) {
  var eventDef = seg.eventRange.def;
  var range = seg.eventRange.instance.range;
  var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events

  var end = range.end ? range.end.valueOf() : 0; // "

  return __assign({}, eventDef.extendedProps, eventDef, {
    id: eventDef.publicId,
    start: start,
    end: end,
    duration: end - start,
    allDay: Number(eventDef.allDay),
    _seg: seg // for later retrieval

  });
}
/*
TODO: when refactoring this class, make a new FillRenderer instance for each `type`
*/


var FillRenderer =
/** @class */
function () {
  function FillRenderer() {
    this.fillSegTag = 'div';
    this.dirtySizeFlags = {};
    this.containerElsByType = {};
    this.segsByType = {};
  }

  FillRenderer.prototype.getSegsByType = function (type) {
    return this.segsByType[type] || [];
  };

  FillRenderer.prototype.renderSegs = function (type, context, segs) {
    var _a;

    this.context = context;
    var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs

    var containerEls = this.attachSegs(type, renderedSegs);

    if (containerEls) {
      (_a = this.containerElsByType[type] || (this.containerElsByType[type] = [])).push.apply(_a, containerEls);
    }

    this.segsByType[type] = renderedSegs;

    if (type === 'bgEvent') {
      triggerRenderedSegs(context, renderedSegs, false); // isMirror=false
    }

    this.dirtySizeFlags[type] = true;
  }; // Unrenders a specific type of fill that is currently rendered on the grid


  FillRenderer.prototype.unrender = function (type, context) {
    var segs = this.segsByType[type];

    if (segs) {
      if (type === 'bgEvent') {
        triggerWillRemoveSegs(context, segs, false); // isMirror=false
      }

      this.detachSegs(type, segs);
    }
  }; // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
  // Only returns segments that successfully rendered.


  FillRenderer.prototype.renderSegEls = function (type, segs) {
    var _this = this;

    var html = '';
    var i;

    if (segs.length) {
      // build a large concatenation of segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(type, segs[i]);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });

      if (type === 'bgEvent') {
        segs = filterSegsViaEls(this.context, segs, false // isMirror. background events can never be mirror elements
        );
      } // correct element type? (would be bad if a non-TD were inserted into a table for example)


      segs = segs.filter(function (seg) {
        return elementMatches(seg.el, _this.fillSegTag);
      });
    }

    return segs;
  }; // Builds the HTML needed for one fill segment. Generic enough to work with different types.


  FillRenderer.prototype.renderSegHtml = function (type, seg) {
    var css = null;
    var classNames = [];

    if (type !== 'highlight' && type !== 'businessHours') {
      css = {
        'background-color': seg.eventRange.ui.backgroundColor
      };
    }

    if (type !== 'highlight') {
      classNames = classNames.concat(seg.eventRange.ui.classNames);
    }

    if (type === 'businessHours') {
      classNames.push('fc-bgevent');
    } else {
      classNames.push('fc-' + type.toLowerCase());
    }

    return '<' + this.fillSegTag + (classNames.length ? ' class="' + classNames.join(' ') + '"' : '') + (css ? ' style="' + cssToStr(css) + '"' : '') + '></' + this.fillSegTag + '>';
  };

  FillRenderer.prototype.detachSegs = function (type, segs) {
    var containerEls = this.containerElsByType[type];

    if (containerEls) {
      containerEls.forEach(removeElement);
      delete this.containerElsByType[type];
    }
  };

  FillRenderer.prototype.computeSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.computeSegSizes(this.segsByType[type]);
      }
    }
  };

  FillRenderer.prototype.assignSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.assignSegSizes(this.segsByType[type]);
      }
    }

    this.dirtySizeFlags = {};
  };

  FillRenderer.prototype.computeSegSizes = function (segs) {};

  FillRenderer.prototype.assignSegSizes = function (segs) {};

  return FillRenderer;
}();

var NamedTimeZoneImpl =
/** @class */
function () {
  function NamedTimeZoneImpl(timeZoneName) {
    this.timeZoneName = timeZoneName;
  }

  return NamedTimeZoneImpl;
}();
/*
An abstraction for a dragging interaction originating on an event.
Does higher-level things than PointerDragger, such as possibly:
- a "mirror" that moves with the pointer
- a minimum number of pixels or other criteria for a true drag to begin

subclasses must emit:
- pointerdown
- dragstart
- dragmove
- pointerup
- dragend
*/


var ElementDragging =
/** @class */
function () {
  function ElementDragging(el) {
    this.emitter = new EmitterMixin();
  }

  ElementDragging.prototype.destroy = function () {};

  ElementDragging.prototype.setMirrorIsVisible = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setAutoScrollEnabled = function (bool) {// optional
  };

  return ElementDragging;
}();

function formatDate(dateInput, settings) {
  if (settings === void 0) {
    settings = {};
  }

  var dateEnv = buildDateEnv$1(settings);
  var formatter = createFormatter(settings);
  var dateMeta = dateEnv.createMarkerMeta(dateInput);

  if (!dateMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.format(dateMeta.marker, formatter, {
    forcedTzo: dateMeta.forcedTzo
  });
}

function formatRange(startInput, endInput, settings // mixture of env and formatter settings
) {
  var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object

  var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);
  var startMeta = dateEnv.createMarkerMeta(startInput);
  var endMeta = dateEnv.createMarkerMeta(endInput);

  if (!startMeta || !endMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
    forcedStartTzo: startMeta.forcedTzo,
    forcedEndTzo: endMeta.forcedTzo,
    isEndExclusive: settings.isEndExclusive
  });
} // TODO: more DRY and optimized


function buildDateEnv$1(settings) {
  var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
  // ensure required settings

  settings = __assign({
    timeZone: globalDefaults.timeZone,
    calendarSystem: 'gregory'
  }, settings, {
    locale: locale
  });
  return new DateEnv(settings);
}

var DRAG_META_PROPS = {
  startTime: createDuration,
  duration: createDuration,
  create: Boolean,
  sourceId: String
};
var DRAG_META_DEFAULTS = {
  create: true
};

function parseDragMeta(raw) {
  var leftoverProps = {};
  var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);
  refined.leftoverProps = leftoverProps;
  return refined;
} // Computes a default column header formatting string if `colFormat` is not explicitly defined


function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
  // if more than one week row, or if there are a lot of columns with not much space,
  // put just the day numbers will be in each cell
  if (!datesRepDistinctDays || dayCnt > 10) {
    return {
      weekday: 'short'
    }; // "Sat"
  } else if (dayCnt > 1) {
    return {
      weekday: 'short',
      month: 'numeric',
      day: 'numeric',
      omitCommas: true
    }; // "Sat 11/12"
  } else {
    return {
      weekday: 'long'
    }; // "Saturday"
  }
}

function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {
  var dateEnv = context.dateEnv,
      theme = context.theme,
      options = context.options;
  var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.

  var classNames = ['fc-day-header', theme.getClass('widgetHeader')];
  var innerHtml;

  if (typeof options.columnHeaderHtml === 'function') {
    innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));
  } else if (typeof options.columnHeaderText === 'function') {
    innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));
  } else {
    innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));
  } // if only one row of days, the classNames on the header can represent the specific days beneath


  if (datesRepDistinctDays) {
    classNames = classNames.concat( // includes the day-of-week class
    // noThemeHighlight=true (don't highlight the header)
    getDayClasses(dateMarker, dateProfile, context, true));
  } else {
    classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class
  }

  return '' + '<th class="' + classNames.join(' ') + '"' + (isDateValid && datesRepDistinctDays ? ' data-date="' + dateEnv.formatIso(dateMarker, {
    omitTime: true
  }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
  buildGotoAnchorHtml(options, dateEnv, {
    date: dateMarker,
    forceOff: !datesRepDistinctDays || colCnt === 1
  }, innerHtml) : // if not valid, display text, but no link
  innerHtml) + '</th>';
}

var DayHeader =
/** @class */
function (_super) {
  __extends(DayHeader, _super);

  function DayHeader(parentEl) {
    var _this = _super.call(this) || this;

    _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.parentEl = parentEl;
    return _this;
  }

  DayHeader.prototype.render = function (props, context) {
    var dates = props.dates,
        datesRepDistinctDays = props.datesRepDistinctDays;
    var parts = [];
    this.renderSkeleton(context);

    if (props.renderIntroHtml) {
      parts.push(props.renderIntroHtml());
    }

    var colHeadFormat = createFormatter(context.options.columnHeaderFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, context));
    }

    if (context.isRtl) {
      parts.reverse();
    }

    this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';
  };

  DayHeader.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderSkeleton.unrender();
  };

  DayHeader.prototype._renderSkeleton = function (context) {
    var theme = context.theme;
    var parentEl = this.parentEl;
    parentEl.innerHTML = ''; // because might be nbsp

    parentEl.appendChild(this.el = htmlToElement('<div class="fc-row ' + theme.getClass('headerRow') + '">' + '<table class="' + theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    this.thead = this.el.querySelector('thead');
  };

  DayHeader.prototype._unrenderSkeleton = function () {
    removeElement(this.el);
  };

  return DayHeader;
}(Component);

var DaySeries =
/** @class */
function () {
  function DaySeries(range, dateProfileGenerator) {
    var date = range.start;
    var end = range.end;
    var indices = [];
    var dates = [];
    var dayIndex = -1;

    while (date < end) {
      // loop each day from start to end
      if (dateProfileGenerator.isHiddenDay(date)) {
        indices.push(dayIndex + 0.5); // mark that it's between indices
      } else {
        dayIndex++;
        indices.push(dayIndex);
        dates.push(date);
      }

      date = addDays(date, 1);
    }

    this.dates = dates;
    this.indices = indices;
    this.cnt = dates.length;
  }

  DaySeries.prototype.sliceRange = function (range) {
    var firstIndex = this.getDateDayIndex(range.start); // inclusive first index

    var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index

    var clippedFirstIndex = Math.max(0, firstIndex);
    var clippedLastIndex = Math.min(this.cnt - 1, lastIndex); // deal with in-between indices

    clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell

    clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell

    if (clippedFirstIndex <= clippedLastIndex) {
      return {
        firstIndex: clippedFirstIndex,
        lastIndex: clippedLastIndex,
        isStart: firstIndex === clippedFirstIndex,
        isEnd: lastIndex === clippedLastIndex
      };
    } else {
      return null;
    }
  }; // Given a date, returns its chronolocial cell-index from the first cell of the grid.
  // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
  // If before the first offset, returns a negative number.
  // If after the last offset, returns an offset past the last cell offset.
  // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.


  DaySeries.prototype.getDateDayIndex = function (date) {
    var indices = this.indices;
    var dayOffset = Math.floor(diffDays(this.dates[0], date));

    if (dayOffset < 0) {
      return indices[0] - 1;
    } else if (dayOffset >= indices.length) {
      return indices[indices.length - 1] + 1;
    } else {
      return indices[dayOffset];
    }
  };

  return DaySeries;
}();

var DayTable =
/** @class */
function () {
  function DayTable(daySeries, breakOnWeeks) {
    var dates = daySeries.dates;
    var daysPerRow;
    var firstDay;
    var rowCnt;

    if (breakOnWeeks) {
      // count columns until the day-of-week repeats
      firstDay = dates[0].getUTCDay();

      for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {
        if (dates[daysPerRow].getUTCDay() === firstDay) {
          break;
        }
      }

      rowCnt = Math.ceil(dates.length / daysPerRow);
    } else {
      rowCnt = 1;
      daysPerRow = dates.length;
    }

    this.rowCnt = rowCnt;
    this.colCnt = daysPerRow;
    this.daySeries = daySeries;
    this.cells = this.buildCells();
    this.headerDates = this.buildHeaderDates();
  }

  DayTable.prototype.buildCells = function () {
    var rows = [];

    for (var row = 0; row < this.rowCnt; row++) {
      var cells = [];

      for (var col = 0; col < this.colCnt; col++) {
        cells.push(this.buildCell(row, col));
      }

      rows.push(cells);
    }

    return rows;
  };

  DayTable.prototype.buildCell = function (row, col) {
    return {
      date: this.daySeries.dates[row * this.colCnt + col]
    };
  };

  DayTable.prototype.buildHeaderDates = function () {
    var dates = [];

    for (var col = 0; col < this.colCnt; col++) {
      dates.push(this.cells[0][col].date);
    }

    return dates;
  };

  DayTable.prototype.sliceRange = function (range) {
    var colCnt = this.colCnt;
    var seriesSeg = this.daySeries.sliceRange(range);
    var segs = [];

    if (seriesSeg) {
      var firstIndex = seriesSeg.firstIndex,
          lastIndex = seriesSeg.lastIndex;
      var index = firstIndex;

      while (index <= lastIndex) {
        var row = Math.floor(index / colCnt);
        var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
        segs.push({
          row: row,
          firstCol: index % colCnt,
          lastCol: (nextIndex - 1) % colCnt,
          isStart: seriesSeg.isStart && index === firstIndex,
          isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
        });
        index = nextIndex;
      }
    }

    return segs;
  };

  return DayTable;
}();

var Slicer =
/** @class */
function () {
  function Slicer() {
    this.sliceBusinessHours = memoize(this._sliceBusinessHours);
    this.sliceDateSelection = memoize(this._sliceDateSpan);
    this.sliceEventStore = memoize(this._sliceEventStore);
    this.sliceEventDrag = memoize(this._sliceInteraction);
    this.sliceEventResize = memoize(this._sliceInteraction);
  }

  Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, calendar, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    var eventUiBases = props.eventUiBases;
    var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));
    return {
      dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),
      businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, calendar, component].concat(extraArgs)),
      fgEventSegs: eventSegs.fg,
      bgEventSegs: eventSegs.bg,
      eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventSelection: props.eventSelection
    }; // TODO: give interactionSegs?
  };

  Slicer.prototype.sliceNowDate = function ( // does not memoize
  date, component) {
    var extraArgs = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      extraArgs[_i - 2] = arguments[_i];
    }

    return this._sliceDateSpan.apply(this, [{
      range: {
        start: date,
        end: addMs(date, 1)
      },
      allDay: false
    }, {}, component].concat(extraArgs));
  };

  Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, calendar, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (!businessHours) {
      return [];
    }

    return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), calendar), {}, dateProfile, nextDayThreshold, component].concat(extraArgs)).bg;
  };

  Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (eventStore) {
      var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
      return {
        bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),
        fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)
      };
    } else {
      return {
        bg: [],
        fg: []
      };
    }
  };

  Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (!interaction) {
      return null;
    }

    var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
    return {
      segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),
      affectedInstances: interaction.affectedEvents.instances,
      isEvent: interaction.isEvent,
      sourceSeg: interaction.origSeg
    };
  };

  Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {
    var extraArgs = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      extraArgs[_i - 3] = arguments[_i];
    }

    if (!dateSpan) {
      return [];
    }

    var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.context.calendar);
    var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));

    for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {
      var seg = segs_1[_a];
      seg.component = component;
      seg.eventRange = eventRange;
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill
  extraArgs) {
    var segs = [];

    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
      var eventRange = eventRanges_1[_i];
      segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill
  extraArgs) {
    var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      seg.component = component;
      seg.eventRange = eventRange;
      seg.isStart = eventRange.isStart && seg.isStart;
      seg.isEnd = eventRange.isEnd && seg.isEnd;
    }

    return segs;
  };

  return Slicer;
}();
/*
for incorporating minTime/maxTime if appropriate
TODO: should be part of DateProfile!
TimelineDateProfile already does this btw
*/


function computeActiveRange(dateProfile, isComponentAllDay) {
  var range = dateProfile.activeRange;

  if (isComponentAllDay) {
    return range;
  }

  return {
    start: addMs(range.start, dateProfile.minTime.milliseconds),
    end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day

  };
} // exports
// --------------------------------------------------------------------------------------------------


var version = '4.4.0';


/***/ }),

/***/ "./node_modules/@fullcalendar/interaction/main.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/main.esm.js ***!
  \************************************************************/
/*! exports provided: default, Draggable, FeaturefulElementDragging, PointerDragging, ThirdPartyDraggable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Draggable", function() { return ExternalDraggable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeaturefulElementDragging", function() { return FeaturefulElementDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointerDragging", function() { return PointerDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThirdPartyDraggable", function() { return ThirdPartyDraggable; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Interaction Plugin v4.4.0
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait = 500;
var ignoreMouseDepth = 0;
var listenerCnt = 0;
var isWindowTouchMoveCancelled = false;
/*
Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
Tracks when the pointer "drags" on a certain element, meaning down+move+up.

Also, tracks if there was touch-scrolling.
Also, can prevent touch-scrolling from happening.
Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.

emits:
- pointerdown
- pointermove
- pointerup
*/

var PointerDragging =
/** @class */
function () {
  function PointerDragging(containerEl) {
    var _this = this;

    this.subjectEl = null;
    this.downEl = null; // options that can be directly assigned by caller

    this.selector = ''; // will cause subjectEl in all emitted events to be this element

    this.handleSelector = '';
    this.shouldIgnoreMove = false;
    this.shouldWatchScroll = true; // for simulating pointermove on scroll
    // internal states

    this.isDragging = false;
    this.isTouchDragging = false;
    this.wasTouchScroll = false; // Mouse
    // ----------------------------------------------------------------------------------------------------

    this.handleMouseDown = function (ev) {
      if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {
        var pev = _this.createEventFromMouse(ev, true);

        _this.emitter.trigger('pointerdown', pev);

        _this.initScrollWatch(pev);

        if (!_this.shouldIgnoreMove) {
          document.addEventListener('mousemove', _this.handleMouseMove);
        }

        document.addEventListener('mouseup', _this.handleMouseUp);
      }
    };

    this.handleMouseMove = function (ev) {
      var pev = _this.createEventFromMouse(ev);

      _this.recordCoords(pev);

      _this.emitter.trigger('pointermove', pev);
    };

    this.handleMouseUp = function (ev) {
      document.removeEventListener('mousemove', _this.handleMouseMove);
      document.removeEventListener('mouseup', _this.handleMouseUp);

      _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));

      _this.cleanup(); // call last so that pointerup has access to props

    }; // Touch
    // ----------------------------------------------------------------------------------------------------


    this.handleTouchStart = function (ev) {
      if (_this.tryStart(ev)) {
        _this.isTouchDragging = true;

        var pev = _this.createEventFromTouch(ev, true);

        _this.emitter.trigger('pointerdown', pev);

        _this.initScrollWatch(pev); // unlike mouse, need to attach to target, not document
        // https://stackoverflow.com/a/45760014


        var target = ev.target;

        if (!_this.shouldIgnoreMove) {
          target.addEventListener('touchmove', _this.handleTouchMove);
        }

        target.addEventListener('touchend', _this.handleTouchEnd);
        target.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end
        // attach a handler to get called when ANY scroll action happens on the page.
        // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
        // http://stackoverflow.com/a/32954565/96342

        window.addEventListener('scroll', _this.handleTouchScroll, true // useCapture
        );
      }
    };

    this.handleTouchMove = function (ev) {
      var pev = _this.createEventFromTouch(ev);

      _this.recordCoords(pev);

      _this.emitter.trigger('pointermove', pev);
    };

    this.handleTouchEnd = function (ev) {
      if (_this.isDragging) {
        // done to guard against touchend followed by touchcancel
        var target = ev.target;
        target.removeEventListener('touchmove', _this.handleTouchMove);
        target.removeEventListener('touchend', _this.handleTouchEnd);
        target.removeEventListener('touchcancel', _this.handleTouchEnd);
        window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true

        _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));

        _this.cleanup(); // call last so that pointerup has access to props


        _this.isTouchDragging = false;
        startIgnoringMouse();
      }
    };

    this.handleTouchScroll = function () {
      _this.wasTouchScroll = true;
    };

    this.handleScroll = function (ev) {
      if (!_this.shouldIgnoreMove) {
        var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;
        var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;

        _this.emitter.trigger('pointermove', {
          origEvent: ev,
          isTouch: _this.isTouchDragging,
          subjectEl: _this.subjectEl,
          pageX: pageX,
          pageY: pageY,
          deltaX: pageX - _this.origPageX,
          deltaY: pageY - _this.origPageY
        });
      }
    };

    this.containerEl = containerEl;
    this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
    containerEl.addEventListener('mousedown', this.handleMouseDown);
    containerEl.addEventListener('touchstart', this.handleTouchStart, {
      passive: true
    });
    listenerCreated();
  }

  PointerDragging.prototype.destroy = function () {
    this.containerEl.removeEventListener('mousedown', this.handleMouseDown);
    this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {
      passive: true
    });
    listenerDestroyed();
  };

  PointerDragging.prototype.tryStart = function (ev) {
    var subjectEl = this.querySubjectEl(ev);
    var downEl = ev.target;

    if (subjectEl && (!this.handleSelector || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(downEl, this.handleSelector))) {
      this.subjectEl = subjectEl;
      this.downEl = downEl;
      this.isDragging = true; // do this first so cancelTouchScroll will work

      this.wasTouchScroll = false;
      return true;
    }

    return false;
  };

  PointerDragging.prototype.cleanup = function () {
    isWindowTouchMoveCancelled = false;
    this.isDragging = false;
    this.subjectEl = null;
    this.downEl = null; // keep wasTouchScroll around for later access

    this.destroyScrollWatch();
  };

  PointerDragging.prototype.querySubjectEl = function (ev) {
    if (this.selector) {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.target, this.selector);
    } else {
      return this.containerEl;
    }
  };

  PointerDragging.prototype.shouldIgnoreMouse = function () {
    return ignoreMouseDepth || this.isTouchDragging;
  }; // can be called by user of this class, to cancel touch-based scrolling for the current drag


  PointerDragging.prototype.cancelTouchScroll = function () {
    if (this.isDragging) {
      isWindowTouchMoveCancelled = true;
    }
  }; // Scrolling that simulates pointermoves
  // ----------------------------------------------------------------------------------------------------


  PointerDragging.prototype.initScrollWatch = function (ev) {
    if (this.shouldWatchScroll) {
      this.recordCoords(ev);
      window.addEventListener('scroll', this.handleScroll, true); // useCapture=true
    }
  };

  PointerDragging.prototype.recordCoords = function (ev) {
    if (this.shouldWatchScroll) {
      this.prevPageX = ev.pageX;
      this.prevPageY = ev.pageY;
      this.prevScrollX = window.pageXOffset;
      this.prevScrollY = window.pageYOffset;
    }
  };

  PointerDragging.prototype.destroyScrollWatch = function () {
    if (this.shouldWatchScroll) {
      window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true
    }
  }; // Event Normalization
  // ----------------------------------------------------------------------------------------------------


  PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {
    var deltaX = 0;
    var deltaY = 0; // TODO: repeat code

    if (isFirst) {
      this.origPageX = ev.pageX;
      this.origPageY = ev.pageY;
    } else {
      deltaX = ev.pageX - this.origPageX;
      deltaY = ev.pageY - this.origPageY;
    }

    return {
      origEvent: ev,
      isTouch: false,
      subjectEl: this.subjectEl,
      pageX: ev.pageX,
      pageY: ev.pageY,
      deltaX: deltaX,
      deltaY: deltaY
    };
  };

  PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {
    var touches = ev.touches;
    var pageX;
    var pageY;
    var deltaX = 0;
    var deltaY = 0; // if touch coords available, prefer,
    // because FF would give bad ev.pageX ev.pageY

    if (touches && touches.length) {
      pageX = touches[0].pageX;
      pageY = touches[0].pageY;
    } else {
      pageX = ev.pageX;
      pageY = ev.pageY;
    } // TODO: repeat code


    if (isFirst) {
      this.origPageX = pageX;
      this.origPageY = pageY;
    } else {
      deltaX = pageX - this.origPageX;
      deltaY = pageY - this.origPageY;
    }

    return {
      origEvent: ev,
      isTouch: true,
      subjectEl: this.subjectEl,
      pageX: pageX,
      pageY: pageY,
      deltaX: deltaX,
      deltaY: deltaY
    };
  };

  return PointerDragging;
}(); // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)


function isPrimaryMouseButton(ev) {
  return ev.button === 0 && !ev.ctrlKey;
} // Ignoring fake mouse events generated by touch
// ----------------------------------------------------------------------------------------------------


function startIgnoringMouse() {
  ignoreMouseDepth++;
  setTimeout(function () {
    ignoreMouseDepth--;
  }, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait);
} // We want to attach touchmove as early as possible for Safari
// ----------------------------------------------------------------------------------------------------


function listenerCreated() {
  if (!listenerCnt++) {
    window.addEventListener('touchmove', onWindowTouchMove, {
      passive: false
    });
  }
}

function listenerDestroyed() {
  if (! --listenerCnt) {
    window.removeEventListener('touchmove', onWindowTouchMove, {
      passive: false
    });
  }
}

function onWindowTouchMove(ev) {
  if (isWindowTouchMoveCancelled) {
    ev.preventDefault();
  }
}
/*
An effect in which an element follows the movement of a pointer across the screen.
The moving element is a clone of some other element.
Must call start + handleMove + stop.
*/


var ElementMirror =
/** @class */
function () {
  function ElementMirror() {
    this.isVisible = false; // must be explicitly enabled

    this.sourceEl = null;
    this.mirrorEl = null;
    this.sourceElRect = null; // screen coords relative to viewport
    // options that can be set directly by caller

    this.parentNode = document.body;
    this.zIndex = 9999;
    this.revertDuration = 0;
  }

  ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {
    this.sourceEl = sourceEl;
    this.sourceElRect = this.sourceEl.getBoundingClientRect();
    this.origScreenX = pageX - window.pageXOffset;
    this.origScreenY = pageY - window.pageYOffset;
    this.deltaX = 0;
    this.deltaY = 0;
    this.updateElPosition();
  };

  ElementMirror.prototype.handleMove = function (pageX, pageY) {
    this.deltaX = pageX - window.pageXOffset - this.origScreenX;
    this.deltaY = pageY - window.pageYOffset - this.origScreenY;
    this.updateElPosition();
  }; // can be called before start


  ElementMirror.prototype.setIsVisible = function (bool) {
    if (bool) {
      if (!this.isVisible) {
        if (this.mirrorEl) {
          this.mirrorEl.style.display = '';
        }

        this.isVisible = bool; // needs to happen before updateElPosition

        this.updateElPosition(); // because was not updating the position while invisible
      }
    } else {
      if (this.isVisible) {
        if (this.mirrorEl) {
          this.mirrorEl.style.display = 'none';
        }

        this.isVisible = bool;
      }
    }
  }; // always async


  ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {
    var _this = this;

    var done = function () {
      _this.cleanup();

      callback();
    };

    if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && ( // if 0, transition won't work
    this.deltaX || this.deltaY) // if same coords, transition won't work
    ) {
        this.doRevertAnimation(done, this.revertDuration);
      } else {
      setTimeout(done, 0);
    }
  };

  ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {
    var mirrorEl = this.mirrorEl;
    var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened

    mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
      left: finalSourceElRect.left,
      top: finalSourceElRect.top
    });
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["whenTransitionDone"])(mirrorEl, function () {
      mirrorEl.style.transition = '';
      callback();
    });
  };

  ElementMirror.prototype.cleanup = function () {
    if (this.mirrorEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.mirrorEl);
      this.mirrorEl = null;
    }

    this.sourceEl = null;
  };

  ElementMirror.prototype.updateElPosition = function () {
    if (this.sourceEl && this.isVisible) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.getMirrorEl(), {
        left: this.sourceElRect.left + this.deltaX,
        top: this.sourceElRect.top + this.deltaY
      });
    }
  };

  ElementMirror.prototype.getMirrorEl = function () {
    var sourceElRect = this.sourceElRect;
    var mirrorEl = this.mirrorEl;

    if (!mirrorEl) {
      mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true
      // we don't want long taps or any mouse interaction causing selection/menus.
      // would use preventSelection(), but that prevents selectstart, causing problems.

      mirrorEl.classList.add('fc-unselectable');
      mirrorEl.classList.add('fc-dragging');
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
        position: 'fixed',
        zIndex: this.zIndex,
        visibility: '',
        boxSizing: 'border-box',
        width: sourceElRect.right - sourceElRect.left,
        height: sourceElRect.bottom - sourceElRect.top,
        right: 'auto',
        bottom: 'auto',
        margin: 0
      });
      this.parentNode.appendChild(mirrorEl);
    }

    return mirrorEl;
  };

  return ElementMirror;
}();
/*
Is a cache for a given element's scroll information (all the info that ScrollController stores)
in addition the "client rectangle" of the element.. the area within the scrollbars.

The cache can be in one of two modes:
- doesListening:false - ignores when the container is scrolled by someone else
- doesListening:true - watch for scrolling and update the cache
*/


var ScrollGeomCache =
/** @class */
function (_super) {
  __extends(ScrollGeomCache, _super);

  function ScrollGeomCache(scrollController, doesListening) {
    var _this = _super.call(this) || this;

    _this.handleScroll = function () {
      _this.scrollTop = _this.scrollController.getScrollTop();
      _this.scrollLeft = _this.scrollController.getScrollLeft();

      _this.handleScrollChange();
    };

    _this.scrollController = scrollController;
    _this.doesListening = doesListening;
    _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();
    _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();
    _this.scrollWidth = scrollController.getScrollWidth();
    _this.scrollHeight = scrollController.getScrollHeight();
    _this.clientWidth = scrollController.getClientWidth();
    _this.clientHeight = scrollController.getClientHeight();
    _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values

    if (_this.doesListening) {
      _this.getEventTarget().addEventListener('scroll', _this.handleScroll);
    }

    return _this;
  }

  ScrollGeomCache.prototype.destroy = function () {
    if (this.doesListening) {
      this.getEventTarget().removeEventListener('scroll', this.handleScroll);
    }
  };

  ScrollGeomCache.prototype.getScrollTop = function () {
    return this.scrollTop;
  };

  ScrollGeomCache.prototype.getScrollLeft = function () {
    return this.scrollLeft;
  };

  ScrollGeomCache.prototype.setScrollTop = function (top) {
    this.scrollController.setScrollTop(top);

    if (!this.doesListening) {
      // we are not relying on the element to normalize out-of-bounds scroll values
      // so we need to sanitize ourselves
      this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);
      this.handleScrollChange();
    }
  };

  ScrollGeomCache.prototype.setScrollLeft = function (top) {
    this.scrollController.setScrollLeft(top);

    if (!this.doesListening) {
      // we are not relying on the element to normalize out-of-bounds scroll values
      // so we need to sanitize ourselves
      this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);
      this.handleScrollChange();
    }
  };

  ScrollGeomCache.prototype.getClientWidth = function () {
    return this.clientWidth;
  };

  ScrollGeomCache.prototype.getClientHeight = function () {
    return this.clientHeight;
  };

  ScrollGeomCache.prototype.getScrollWidth = function () {
    return this.scrollWidth;
  };

  ScrollGeomCache.prototype.getScrollHeight = function () {
    return this.scrollHeight;
  };

  ScrollGeomCache.prototype.handleScrollChange = function () {};

  return ScrollGeomCache;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollController"]);

var ElementScrollGeomCache =
/** @class */
function (_super) {
  __extends(ElementScrollGeomCache, _super);

  function ElementScrollGeomCache(el, doesListening) {
    return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementScrollController"](el), doesListening) || this;
  }

  ElementScrollGeomCache.prototype.getEventTarget = function () {
    return this.scrollController.el;
  };

  ElementScrollGeomCache.prototype.computeClientRect = function () {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeInnerRect"])(this.scrollController.el);
  };

  return ElementScrollGeomCache;
}(ScrollGeomCache);

var WindowScrollGeomCache =
/** @class */
function (_super) {
  __extends(WindowScrollGeomCache, _super);

  function WindowScrollGeomCache(doesListening) {
    return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["WindowScrollController"](), doesListening) || this;
  }

  WindowScrollGeomCache.prototype.getEventTarget = function () {
    return window;
  };

  WindowScrollGeomCache.prototype.computeClientRect = function () {
    return {
      left: this.scrollLeft,
      right: this.scrollLeft + this.clientWidth,
      top: this.scrollTop,
      bottom: this.scrollTop + this.clientHeight
    };
  }; // the window is the only scroll object that changes it's rectangle relative
  // to the document's topleft as it scrolls


  WindowScrollGeomCache.prototype.handleScrollChange = function () {
    this.clientRect = this.computeClientRect();
  };

  return WindowScrollGeomCache;
}(ScrollGeomCache); // If available we are using native "performance" API instead of "Date"
// Read more about it on MDN:
// https://developer.mozilla.org/en-US/docs/Web/API/Performance


var getTime = typeof performance === 'function' ? performance.now : Date.now;
/*
For a pointer interaction, automatically scrolls certain scroll containers when the pointer
approaches the edge.

The caller must call start + handleMove + stop.
*/

var AutoScroller =
/** @class */
function () {
  function AutoScroller() {
    var _this = this; // options that can be set by caller


    this.isEnabled = true;
    this.scrollQuery = [window, '.fc-scroller'];
    this.edgeThreshold = 50; // pixels

    this.maxVelocity = 300; // pixels per second
    // internal state

    this.pointerScreenX = null;
    this.pointerScreenY = null;
    this.isAnimating = false;
    this.scrollCaches = null; // protect against the initial pointerdown being too close to an edge and starting the scroll

    this.everMovedUp = false;
    this.everMovedDown = false;
    this.everMovedLeft = false;
    this.everMovedRight = false;

    this.animate = function () {
      if (_this.isAnimating) {
        // wasn't cancelled between animation calls
        var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);

        if (edge) {
          var now = getTime();

          _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);

          _this.requestAnimation(now);
        } else {
          _this.isAnimating = false; // will stop animation
        }
      }
    };
  }

  AutoScroller.prototype.start = function (pageX, pageY) {
    if (this.isEnabled) {
      this.scrollCaches = this.buildCaches();
      this.pointerScreenX = null;
      this.pointerScreenY = null;
      this.everMovedUp = false;
      this.everMovedDown = false;
      this.everMovedLeft = false;
      this.everMovedRight = false;
      this.handleMove(pageX, pageY);
    }
  };

  AutoScroller.prototype.handleMove = function (pageX, pageY) {
    if (this.isEnabled) {
      var pointerScreenX = pageX - window.pageXOffset;
      var pointerScreenY = pageY - window.pageYOffset;
      var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;
      var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;

      if (yDelta < 0) {
        this.everMovedUp = true;
      } else if (yDelta > 0) {
        this.everMovedDown = true;
      }

      if (xDelta < 0) {
        this.everMovedLeft = true;
      } else if (xDelta > 0) {
        this.everMovedRight = true;
      }

      this.pointerScreenX = pointerScreenX;
      this.pointerScreenY = pointerScreenY;

      if (!this.isAnimating) {
        this.isAnimating = true;
        this.requestAnimation(getTime());
      }
    }
  };

  AutoScroller.prototype.stop = function () {
    if (this.isEnabled) {
      this.isAnimating = false; // will stop animation

      for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
        var scrollCache = _a[_i];
        scrollCache.destroy();
      }

      this.scrollCaches = null;
    }
  };

  AutoScroller.prototype.requestAnimation = function (now) {
    this.msSinceRequest = now;
    requestAnimationFrame(this.animate);
  };

  AutoScroller.prototype.handleSide = function (edge, seconds) {
    var scrollCache = edge.scrollCache;
    var edgeThreshold = this.edgeThreshold;
    var invDistance = edgeThreshold - edge.distance;
    var velocity = // the closer to the edge, the faster we scroll
    invDistance * invDistance / (edgeThreshold * edgeThreshold) * // quadratic
    this.maxVelocity * seconds;
    var sign = 1;

    switch (edge.name) {
      case 'left':
        sign = -1;
      // falls through

      case 'right':
        scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);
        break;

      case 'top':
        sign = -1;
      // falls through

      case 'bottom':
        scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);
        break;
    }
  }; // left/top are relative to document topleft


  AutoScroller.prototype.computeBestEdge = function (left, top) {
    var edgeThreshold = this.edgeThreshold;
    var bestSide = null;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      var rect = scrollCache.clientRect;
      var leftDist = left - rect.left;
      var rightDist = rect.right - left;
      var topDist = top - rect.top;
      var bottomDist = rect.bottom - top; // completely within the rect?

      if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {
        if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'top',
            distance: topDist
          };
        }

        if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'bottom',
            distance: bottomDist
          };
        }

        if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'left',
            distance: leftDist
          };
        }

        if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'right',
            distance: rightDist
          };
        }
      }
    }

    return bestSide;
  };

  AutoScroller.prototype.buildCaches = function () {
    return this.queryScrollEls().map(function (el) {
      if (el === window) {
        return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls
      } else {
        return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls
      }
    });
  };

  AutoScroller.prototype.queryScrollEls = function () {
    var els = [];

    for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {
      var query = _a[_i];

      if (typeof query === 'object') {
        els.push(query);
      } else {
        els.push.apply(els, Array.prototype.slice.call(document.querySelectorAll(query)));
      }
    }

    return els;
  };

  return AutoScroller;
}();
/*
Monitors dragging on an element. Has a number of high-level features:
- minimum distance required before dragging
- minimum wait time ("delay") before dragging
- a mirror element that follows the pointer
*/


var FeaturefulElementDragging =
/** @class */
function (_super) {
  __extends(FeaturefulElementDragging, _super);

  function FeaturefulElementDragging(containerEl) {
    var _this = _super.call(this, containerEl) || this; // options that can be directly set by caller
    // the caller can also set the PointerDragging's options as well


    _this.delay = null;
    _this.minDistance = 0;
    _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag

    _this.mirrorNeedsRevert = false;
    _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup

    _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation

    _this.isDelayEnded = false;
    _this.isDistanceSurpassed = false;
    _this.delayTimeoutId = null;

    _this.onPointerDown = function (ev) {
      if (!_this.isDragging) {
        // so new drag doesn't happen while revert animation is going
        _this.isInteracting = true;
        _this.isDelayEnded = false;
        _this.isDistanceSurpassed = false;
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventSelection"])(document.body);
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventContextMenu"])(document.body); // prevent links from being visited if there's an eventual drag.
        // also prevents selection in older browsers (maybe?).
        // not necessary for touch, besides, browser would complain about passiveness.

        if (!ev.isTouch) {
          ev.origEvent.preventDefault();
        }

        _this.emitter.trigger('pointerdown', ev);

        if (!_this.pointer.shouldIgnoreMove) {
          // actions related to initiating dragstart+dragmove+dragend...
          _this.mirror.setIsVisible(false); // reset. caller must set-visible


          _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down


          _this.startDelay(ev);

          if (!_this.minDistance) {
            _this.handleDistanceSurpassed(ev);
          }
        }
      }
    };

    _this.onPointerMove = function (ev) {
      if (_this.isInteracting) {
        // if false, still waiting for previous drag's revert
        _this.emitter.trigger('pointermove', ev);

        if (!_this.isDistanceSurpassed) {
          var minDistance = _this.minDistance;
          var distanceSq = void 0; // current distance from the origin, squared

          var deltaX = ev.deltaX,
              deltaY = ev.deltaY;
          distanceSq = deltaX * deltaX + deltaY * deltaY;

          if (distanceSq >= minDistance * minDistance) {
            // use pythagorean theorem
            _this.handleDistanceSurpassed(ev);
          }
        }

        if (_this.isDragging) {
          // a real pointer move? (not one simulated by scrolling)
          if (ev.origEvent.type !== 'scroll') {
            _this.mirror.handleMove(ev.pageX, ev.pageY);

            _this.autoScroller.handleMove(ev.pageX, ev.pageY);
          }

          _this.emitter.trigger('dragmove', ev);
        }
      }
    };

    _this.onPointerUp = function (ev) {
      if (_this.isInteracting) {
        // if false, still waiting for previous drag's revert
        _this.isInteracting = false;
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowSelection"])(document.body);
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowContextMenu"])(document.body);

        _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert


        if (_this.isDragging) {
          _this.autoScroller.stop();

          _this.tryStopDrag(ev); // which will stop the mirror

        }

        if (_this.delayTimeoutId) {
          clearTimeout(_this.delayTimeoutId);
          _this.delayTimeoutId = null;
        }
      }
    };

    var pointer = _this.pointer = new PointerDragging(containerEl);
    pointer.emitter.on('pointerdown', _this.onPointerDown);
    pointer.emitter.on('pointermove', _this.onPointerMove);
    pointer.emitter.on('pointerup', _this.onPointerUp);
    _this.mirror = new ElementMirror();
    _this.autoScroller = new AutoScroller();
    return _this;
  }

  FeaturefulElementDragging.prototype.destroy = function () {
    this.pointer.destroy();
  };

  FeaturefulElementDragging.prototype.startDelay = function (ev) {
    var _this = this;

    if (typeof this.delay === 'number') {
      this.delayTimeoutId = setTimeout(function () {
        _this.delayTimeoutId = null;

        _this.handleDelayEnd(ev);
      }, this.delay); // not assignable to number!
    } else {
      this.handleDelayEnd(ev);
    }
  };

  FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {
    this.isDelayEnded = true;
    this.tryStartDrag(ev);
  };

  FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {
    this.isDistanceSurpassed = true;
    this.tryStartDrag(ev);
  };

  FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {
    if (this.isDelayEnded && this.isDistanceSurpassed) {
      if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {
        this.isDragging = true;
        this.mirrorNeedsRevert = false;
        this.autoScroller.start(ev.pageX, ev.pageY);
        this.emitter.trigger('dragstart', ev);

        if (this.touchScrollAllowed === false) {
          this.pointer.cancelTouchScroll();
        }
      }
    }
  };

  FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {
    // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
    // that come from the document to fire beforehand. much more convenient this way.
    this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev) // bound with args
    );
  };

  FeaturefulElementDragging.prototype.stopDrag = function (ev) {
    this.isDragging = false;
    this.emitter.trigger('dragend', ev);
  }; // fill in the implementations...


  FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {
    this.pointer.shouldIgnoreMove = bool;
  };

  FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {
    this.mirror.setIsVisible(bool);
  };

  FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {
    this.mirrorNeedsRevert = bool;
  };

  FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {
    this.autoScroller.isEnabled = bool;
  };

  return FeaturefulElementDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
/*
When this class is instantiated, it records the offset of an element (relative to the document topleft),
and continues to monitor scrolling, updating the cached coordinates if it needs to.
Does not access the DOM after instantiation, so highly performant.

Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
and an determine if a given point is inside the combined clipping rectangle.
*/


var OffsetTracker =
/** @class */
function () {
  function OffsetTracker(el) {
    this.origRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(el); // will work fine for divs that have overflow:hidden

    this.scrollCaches = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getClippingParents"])(el).map(function (el) {
      return new ElementScrollGeomCache(el, true); // listen=true
    });
  }

  OffsetTracker.prototype.destroy = function () {
    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      scrollCache.destroy();
    }
  };

  OffsetTracker.prototype.computeLeft = function () {
    var left = this.origRect.left;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();
    }

    return left;
  };

  OffsetTracker.prototype.computeTop = function () {
    var top = this.origRect.top;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      top += scrollCache.origScrollTop - scrollCache.getScrollTop();
    }

    return top;
  };

  OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {
    var point = {
      left: pageX,
      top: pageY
    };

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];

      if (!isIgnoredClipping(scrollCache.getEventTarget()) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["pointInsideRect"])(point, scrollCache.clientRect)) {
        return false;
      }
    }

    return true;
  };

  return OffsetTracker;
}(); // certain clipping containers should never constrain interactions, like <html> and <body>
// https://github.com/fullcalendar/fullcalendar/issues/3615


function isIgnoredClipping(node) {
  var tagName = node.tagName;
  return tagName === 'HTML' || tagName === 'BODY';
}
/*
Tracks movement over multiple droppable areas (aka "hits")
that exist in one or more DateComponents.
Relies on an existing draggable.

emits:
- pointerdown
- dragstart
- hitchange - fires initially, even if not over a hit
- pointerup
- (hitchange - again, to null, if ended over a hit)
- dragend
*/


var HitDragging =
/** @class */
function () {
  function HitDragging(dragging, droppableStore) {
    var _this = this; // options that can be set by caller


    this.useSubjectCenter = false;
    this.requireInitial = true; // if doesn't start out on a hit, won't emit any events

    this.initialHit = null;
    this.movingHit = null;
    this.finalHit = null; // won't ever be populated if shouldIgnoreMove

    this.handlePointerDown = function (ev) {
      var dragging = _this.dragging;
      _this.initialHit = null;
      _this.movingHit = null;
      _this.finalHit = null;

      _this.prepareHits();

      _this.processFirstCoord(ev);

      if (_this.initialHit || !_this.requireInitial) {
        dragging.setIgnoreMove(false);

        _this.emitter.trigger('pointerdown', ev); // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(

      } else {
        dragging.setIgnoreMove(true);
      }
    };

    this.handleDragStart = function (ev) {
      _this.emitter.trigger('dragstart', ev);

      _this.handleMove(ev, true); // force = fire even if initially null

    };

    this.handleDragMove = function (ev) {
      _this.emitter.trigger('dragmove', ev);

      _this.handleMove(ev);
    };

    this.handlePointerUp = function (ev) {
      _this.releaseHits();

      _this.emitter.trigger('pointerup', ev);
    };

    this.handleDragEnd = function (ev) {
      if (_this.movingHit) {
        _this.emitter.trigger('hitupdate', null, true, ev);
      }

      _this.finalHit = _this.movingHit;
      _this.movingHit = null;

      _this.emitter.trigger('dragend', ev);
    };

    this.droppableStore = droppableStore;
    dragging.emitter.on('pointerdown', this.handlePointerDown);
    dragging.emitter.on('dragstart', this.handleDragStart);
    dragging.emitter.on('dragmove', this.handleDragMove);
    dragging.emitter.on('pointerup', this.handlePointerUp);
    dragging.emitter.on('dragend', this.handleDragEnd);
    this.dragging = dragging;
    this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
  } // sets initialHit
  // sets coordAdjust


  HitDragging.prototype.processFirstCoord = function (ev) {
    var origPoint = {
      left: ev.pageX,
      top: ev.pageY
    };
    var adjustedPoint = origPoint;
    var subjectEl = ev.subjectEl;
    var subjectRect;

    if (subjectEl !== document) {
      subjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(subjectEl);
      adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["constrainPoint"])(adjustedPoint, subjectRect);
    }

    var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);

    if (initialHit) {
      if (this.useSubjectCenter && subjectRect) {
        var slicedSubjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRects"])(subjectRect, initialHit.rect);

        if (slicedSubjectRect) {
          adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRectCenter"])(slicedSubjectRect);
        }
      }

      this.coordAdjust = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffPoints"])(adjustedPoint, origPoint);
    } else {
      this.coordAdjust = {
        left: 0,
        top: 0
      };
    }
  };

  HitDragging.prototype.handleMove = function (ev, forceHandle) {
    var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);

    if (forceHandle || !isHitsEqual(this.movingHit, hit)) {
      this.movingHit = hit;
      this.emitter.trigger('hitupdate', hit, false, ev);
    }
  };

  HitDragging.prototype.prepareHits = function () {
    this.offsetTrackers = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(this.droppableStore, function (interactionSettings) {
      interactionSettings.component.buildPositionCaches();
      return new OffsetTracker(interactionSettings.el);
    });
  };

  HitDragging.prototype.releaseHits = function () {
    var offsetTrackers = this.offsetTrackers;

    for (var id in offsetTrackers) {
      offsetTrackers[id].destroy();
    }

    this.offsetTrackers = {};
  };

  HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {
    var _a = this,
        droppableStore = _a.droppableStore,
        offsetTrackers = _a.offsetTrackers;

    var bestHit = null;

    for (var id in droppableStore) {
      var component = droppableStore[id].component;
      var offsetTracker = offsetTrackers[id];

      if (offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {
        var originLeft = offsetTracker.computeLeft();
        var originTop = offsetTracker.computeTop();
        var positionLeft = offsetLeft - originLeft;
        var positionTop = offsetTop - originTop;
        var origRect = offsetTracker.origRect;
        var width = origRect.right - origRect.left;
        var height = origRect.bottom - origRect.top;

        if ( // must be within the element's bounds
        positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {
          var hit = component.queryHit(positionLeft, positionTop, width, height);

          if (hit && ( // make sure the hit is within activeRange, meaning it's not a deal cell
          !component.props.dateProfile || // hack for DayTile
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsRange"])(component.props.dateProfile.activeRange, hit.dateSpan.range)) && (!bestHit || hit.layer > bestHit.layer)) {
            // TODO: better way to re-orient rectangle
            hit.rect.left += originLeft;
            hit.rect.right += originLeft;
            hit.rect.top += originTop;
            hit.rect.bottom += originTop;
            bestHit = hit;
          }
        }
      }
    }

    return bestHit;
  };

  return HitDragging;
}();

function isHitsEqual(hit0, hit1) {
  if (!hit0 && !hit1) {
    return true;
  }

  if (Boolean(hit0) !== Boolean(hit1)) {
    return false;
  }

  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isDateSpansEqual"])(hit0.dateSpan, hit1.dateSpan);
}
/*
Monitors when the user clicks on a specific date/time of a component.
A pointerdown+pointerup on the same "hit" constitutes a click.
*/


var DateClicking =
/** @class */
function (_super) {
  __extends(DateClicking, _super);

  function DateClicking(settings) {
    var _this = _super.call(this, settings) || this;

    _this.handlePointerDown = function (ev) {
      var dragging = _this.dragging; // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired

      dragging.setIgnoreMove(!_this.component.isValidDateDownEl(dragging.pointer.downEl));
    }; // won't even fire if moving was ignored


    _this.handleDragEnd = function (ev) {
      var component = _this.component;
      var _a = component.context,
          calendar = _a.calendar,
          view = _a.view;
      var pointer = _this.dragging.pointer;

      if (!pointer.wasTouchScroll) {
        var _b = _this.hitDragging,
            initialHit = _b.initialHit,
            finalHit = _b.finalHit;

        if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {
          calendar.triggerDateClick(initialHit.dateSpan, initialHit.dayEl, view, ev.origEvent);
        }
      }
    };

    var component = settings.component; // we DO want to watch pointer moves because otherwise finalHit won't get populated

    _this.dragging = new FeaturefulElementDragging(component.el);
    _this.dragging.autoScroller.isEnabled = false;
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  DateClicking.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return DateClicking;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);
/*
Tracks when the user selects a portion of time of a component,
constituted by a drag over date cells, with a possible delay at the beginning of the drag.
*/


var DateSelecting =
/** @class */
function (_super) {
  __extends(DateSelecting, _super);

  function DateSelecting(settings) {
    var _this = _super.call(this, settings) || this;

    _this.dragSelection = null;

    _this.handlePointerDown = function (ev) {
      var _a = _this,
          component = _a.component,
          dragging = _a.dragging;
      var options = component.context.options;
      var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target); // don't bother to watch expensive moves if component won't do selection

      dragging.setIgnoreMove(!canSelect); // if touch, require user to hold down

      dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null;
    };

    _this.handleDragStart = function (ev) {
      _this.component.context.calendar.unselect(ev); // unselect previous selections

    };

    _this.handleHitUpdate = function (hit, isFinal) {
      var calendar = _this.component.context.calendar;
      var dragSelection = null;
      var isInvalid = false;

      if (hit) {
        dragSelection = joinHitsIntoSelection(_this.hitDragging.initialHit, hit, calendar.pluginSystem.hooks.dateSelectionTransformers);

        if (!dragSelection || !_this.component.isDateSelectionValid(dragSelection)) {
          isInvalid = true;
          dragSelection = null;
        }
      }

      if (dragSelection) {
        calendar.dispatch({
          type: 'SELECT_DATES',
          selection: dragSelection
        });
      } else if (!isFinal) {
        // only unselect if moved away while dragging
        calendar.dispatch({
          type: 'UNSELECT_DATES'
        });
      }

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging
      }
    };

    _this.handlePointerUp = function (pev) {
      if (_this.dragSelection) {
        // selection is already rendered, so just need to report selection
        _this.component.context.calendar.triggerDateSelect(_this.dragSelection, pev);

        _this.dragSelection = null;
      }
    };

    var component = settings.component;
    var options = component.context.options;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.touchScrollAllowed = false;
    dragging.minDistance = options.selectMinDistance || 0;
    dragging.autoScroller.isEnabled = options.dragScroll;
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('pointerup', _this.handlePointerUp);
    return _this;
  }

  DateSelecting.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return DateSelecting;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function getComponentTouchDelay(component) {
  var options = component.context.options;
  var delay = options.selectLongPressDelay;

  if (delay == null) {
    delay = options.longPressDelay;
  }

  return delay;
}

function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {
  var dateSpan0 = hit0.dateSpan;
  var dateSpan1 = hit1.dateSpan;
  var ms = [dateSpan0.range.start, dateSpan0.range.end, dateSpan1.range.start, dateSpan1.range.end];
  ms.sort(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareNumbers"]);
  var props = {};

  for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {
    var transformer = dateSelectionTransformers_1[_i];
    var res = transformer(hit0, hit1);

    if (res === false) {
      return null;
    } else if (res) {
      __assign(props, res);
    }
  }

  props.range = {
    start: ms[0],
    end: ms[3]
  };
  props.allDay = dateSpan0.allDay;
  return props;
}

var EventDragging =
/** @class */
function (_super) {
  __extends(EventDragging, _super);

  function EventDragging(settings) {
    var _this = _super.call(this, settings) || this; // internal state


    _this.subjectSeg = null; // the seg being selected/dragged

    _this.isDragging = false;
    _this.eventRange = null;
    _this.relevantEvents = null; // the events being dragged

    _this.receivingCalendar = null;
    _this.validMutation = null;
    _this.mutatedRelevantEvents = null;

    _this.handlePointerDown = function (ev) {
      var origTarget = ev.origEvent.target;
      var _a = _this,
          component = _a.component,
          dragging = _a.dragging;
      var mirror = dragging.mirror;
      var options = component.context.options;
      var initialCalendar = component.context.calendar;
      var subjectSeg = _this.subjectSeg = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(ev.subjectEl);
      var eventRange = _this.eventRange = subjectSeg.eventRange;
      var eventInstanceId = eventRange.instance.instanceId;
      _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(initialCalendar.state.eventStore, eventInstanceId);
      dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;
      dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet
      ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay$1(component) : null;
      mirror.parentNode = initialCalendar.el;
      mirror.revertDuration = options.dragRevertDuration;
      var isValid = component.isValidSegDownEl(origTarget) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(origTarget, '.fc-resizer'); // NOT on a resizer

      dragging.setIgnoreMove(!isValid); // disable dragging for elements that are resizable (ie, selectable)
      // but are not draggable

      _this.isDragging = isValid && ev.subjectEl.classList.contains('fc-draggable');
    };

    _this.handleDragStart = function (ev) {
      var context = _this.component.context;
      var initialCalendar = context.calendar;
      var eventRange = _this.eventRange;
      var eventInstanceId = eventRange.instance.instanceId;

      if (ev.isTouch) {
        // need to select a different event?
        if (eventInstanceId !== _this.component.props.eventSelection) {
          initialCalendar.dispatch({
            type: 'SELECT_EVENT',
            eventInstanceId: eventInstanceId
          });
        }
      } else {
        // if now using mouse, but was previous touch interaction, clear selected event
        initialCalendar.dispatch({
          type: 'UNSELECT_EVENT'
        });
      }

      if (_this.isDragging) {
        initialCalendar.unselect(ev); // unselect *date* selection

        initialCalendar.publiclyTrigger('eventDragStart', [{
          el: _this.subjectSeg.el,
          event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar, eventRange.def, eventRange.instance),
          jsEvent: ev.origEvent,
          view: context.view
        }]);
      }
    };

    _this.handleHitUpdate = function (hit, isFinal) {
      if (!_this.isDragging) {
        return;
      }

      var relevantEvents = _this.relevantEvents;
      var initialHit = _this.hitDragging.initialHit;
      var initialCalendar = _this.component.context.calendar; // states based on new hit

      var receivingCalendar = null;
      var mutation = null;
      var mutatedRelevantEvents = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: relevantEvents,
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: true,
        origSeg: _this.subjectSeg
      };

      if (hit) {
        var receivingComponent = hit.component;
        receivingCalendar = receivingComponent.context.calendar;
        var receivingOptions = receivingComponent.context.options;

        if (initialCalendar === receivingCalendar || receivingOptions.editable && receivingOptions.droppable) {
          mutation = computeEventMutation(initialHit, hit, receivingCalendar.pluginSystem.hooks.eventDragMutationMassagers);

          if (mutation) {
            mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, receivingCalendar.eventUiBases, mutation, receivingCalendar);
            interaction.mutatedEvents = mutatedRelevantEvents;

            if (!receivingComponent.isInteractionValid(interaction)) {
              isInvalid = true;
              mutation = null;
              mutatedRelevantEvents = null;
              interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
            }
          }
        } else {
          receivingCalendar = null;
        }
      }

      _this.displayDrag(receivingCalendar, interaction);

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        if (initialCalendar === receivingCalendar && // TODO: write test for this
        isHitsEqual(initialHit, hit)) {
          mutation = null;
        }

        _this.dragging.setMirrorNeedsRevert(!mutation); // render the mirror if no already-rendered mirror
        // TODO: wish we could somehow wait for dispatch to guarantee render


        _this.dragging.setMirrorIsVisible(!hit || !document.querySelector('.fc-mirror')); // assign states based on new hit


        _this.receivingCalendar = receivingCalendar;
        _this.validMutation = mutation;
        _this.mutatedRelevantEvents = mutatedRelevantEvents;
      }
    };

    _this.handlePointerUp = function () {
      if (!_this.isDragging) {
        _this.cleanup(); // because handleDragEnd won't fire

      }
    };

    _this.handleDragEnd = function (ev) {
      if (_this.isDragging) {
        var context = _this.component.context;
        var initialCalendar_1 = context.calendar;
        var initialView = context.view;
        var _a = _this,
            receivingCalendar = _a.receivingCalendar,
            validMutation = _a.validMutation;
        var eventDef = _this.eventRange.def;
        var eventInstance = _this.eventRange.instance;
        var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar_1, eventDef, eventInstance);
        var relevantEvents_1 = _this.relevantEvents;
        var mutatedRelevantEvents = _this.mutatedRelevantEvents;
        var finalHit = _this.hitDragging.finalHit;

        _this.clearDrag(); // must happen after revert animation


        initialCalendar_1.publiclyTrigger('eventDragStop', [{
          el: _this.subjectSeg.el,
          event: eventApi,
          jsEvent: ev.origEvent,
          view: initialView
        }]);

        if (validMutation) {
          // dropped within same calendar
          if (receivingCalendar === initialCalendar_1) {
            initialCalendar_1.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: mutatedRelevantEvents
            });
            var transformed = {};

            for (var _i = 0, _b = initialCalendar_1.pluginSystem.hooks.eventDropTransformers; _i < _b.length; _i++) {
              var transformer = _b[_i];

              __assign(transformed, transformer(validMutation, initialCalendar_1));
            }

            var eventDropArg = __assign({}, transformed, {
              el: ev.subjectEl,
              delta: validMutation.datesDelta,
              oldEvent: eventApi,
              event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
              initialCalendar_1, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
              revert: function () {
                initialCalendar_1.dispatch({
                  type: 'MERGE_EVENTS',
                  eventStore: relevantEvents_1
                });
              },
              jsEvent: ev.origEvent,
              view: initialView
            });

            initialCalendar_1.publiclyTrigger('eventDrop', [eventDropArg]); // dropped in different calendar
          } else if (receivingCalendar) {
            initialCalendar_1.publiclyTrigger('eventLeave', [{
              draggedEl: ev.subjectEl,
              event: eventApi,
              view: initialView
            }]);
            initialCalendar_1.dispatch({
              type: 'REMOVE_EVENT_INSTANCES',
              instances: _this.mutatedRelevantEvents.instances
            });
            receivingCalendar.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: _this.mutatedRelevantEvents
            });

            if (ev.isTouch) {
              receivingCalendar.dispatch({
                type: 'SELECT_EVENT',
                eventInstanceId: eventInstance.instanceId
              });
            }

            var dropArg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
              draggedEl: ev.subjectEl,
              jsEvent: ev.origEvent,
              view: finalHit.component // should this be finalHit.component.view? See #4644

            });

            receivingCalendar.publiclyTrigger('drop', [dropArg]);
            receivingCalendar.publiclyTrigger('eventReceive', [{
              draggedEl: ev.subjectEl,
              event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
              receivingCalendar, mutatedRelevantEvents.defs[eventDef.defId], mutatedRelevantEvents.instances[eventInstance.instanceId]),
              view: finalHit.component // should this be finalHit.component.view? See #4644

            }]);
          }
        } else {
          initialCalendar_1.publiclyTrigger('_noEventDrop');
        }
      }

      _this.cleanup();
    };

    var component = _this.component;
    var options = component.context.options;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.pointer.selector = EventDragging.SELECTOR;
    dragging.touchScrollAllowed = false;
    dragging.autoScroller.isEnabled = options.dragScroll;
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
    hitDragging.useSubjectCenter = settings.useEventCenter;
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('pointerup', _this.handlePointerUp);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  EventDragging.prototype.destroy = function () {
    this.dragging.destroy();
  }; // render a drag state on the next receivingCalendar


  EventDragging.prototype.displayDrag = function (nextCalendar, state) {
    var initialCalendar = this.component.context.calendar;
    var prevCalendar = this.receivingCalendar; // does the previous calendar need to be cleared?

    if (prevCalendar && prevCalendar !== nextCalendar) {
      // does the initial calendar need to be cleared?
      // if so, don't clear all the way. we still need to to hide the affectedEvents
      if (prevCalendar === initialCalendar) {
        prevCalendar.dispatch({
          type: 'SET_EVENT_DRAG',
          state: {
            affectedEvents: state.affectedEvents,
            mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
            isEvent: true,
            origSeg: state.origSeg
          }
        }); // completely clear the old calendar if it wasn't the initial
      } else {
        prevCalendar.dispatch({
          type: 'UNSET_EVENT_DRAG'
        });
      }
    }

    if (nextCalendar) {
      nextCalendar.dispatch({
        type: 'SET_EVENT_DRAG',
        state: state
      });
    }
  };

  EventDragging.prototype.clearDrag = function () {
    var initialCalendar = this.component.context.calendar;
    var receivingCalendar = this.receivingCalendar;

    if (receivingCalendar) {
      receivingCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    } // the initial calendar might have an dummy drag state from displayDrag


    if (initialCalendar !== receivingCalendar) {
      initialCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }
  };

  EventDragging.prototype.cleanup = function () {
    this.subjectSeg = null;
    this.isDragging = false;
    this.eventRange = null;
    this.relevantEvents = null;
    this.receivingCalendar = null;
    this.validMutation = null;
    this.mutatedRelevantEvents = null;
  };

  EventDragging.SELECTOR = '.fc-draggable, .fc-resizable'; // TODO: test this in IE11

  return EventDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function computeEventMutation(hit0, hit1, massagers) {
  var dateSpan0 = hit0.dateSpan;
  var dateSpan1 = hit1.dateSpan;
  var date0 = dateSpan0.range.start;
  var date1 = dateSpan1.range.start;
  var standardProps = {};

  if (dateSpan0.allDay !== dateSpan1.allDay) {
    standardProps.allDay = dateSpan1.allDay;
    standardProps.hasEnd = hit1.component.context.options.allDayMaintainDuration;

    if (dateSpan1.allDay) {
      // means date1 is already start-of-day,
      // but date0 needs to be converted
      date0 = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date0);
    }
  }

  var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, hit0.component.context.dateEnv, hit0.component === hit1.component ? hit0.component.largeUnit : null);

  if (delta.milliseconds) {
    // has hours/minutes/seconds
    standardProps.allDay = false;
  }

  var mutation = {
    datesDelta: delta,
    standardProps: standardProps
  };

  for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {
    var massager = massagers_1[_i];
    massager(mutation, hit0, hit1);
  }

  return mutation;
}

function getComponentTouchDelay$1(component) {
  var options = component.context.options;
  var delay = options.eventLongPressDelay;

  if (delay == null) {
    delay = options.longPressDelay;
  }

  return delay;
}

var EventDragging$1 =
/** @class */
function (_super) {
  __extends(EventDragging, _super);

  function EventDragging(settings) {
    var _this = _super.call(this, settings) || this; // internal state


    _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?

    _this.eventRange = null;
    _this.relevantEvents = null;
    _this.validMutation = null;
    _this.mutatedRelevantEvents = null;

    _this.handlePointerDown = function (ev) {
      var component = _this.component;

      var seg = _this.querySeg(ev);

      var eventRange = _this.eventRange = seg.eventRange;
      _this.dragging.minDistance = component.context.options.eventDragMinDistance; // if touch, need to be working with a selected event

      _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);
    };

    _this.handleDragStart = function (ev) {
      var _a = _this.component.context,
          calendar = _a.calendar,
          view = _a.view;
      var eventRange = _this.eventRange;
      _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(calendar.state.eventStore, _this.eventRange.instance.instanceId);
      _this.draggingSeg = _this.querySeg(ev);
      calendar.unselect();
      calendar.publiclyTrigger('eventResizeStart', [{
        el: _this.draggingSeg.el,
        event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventRange.def, eventRange.instance),
        jsEvent: ev.origEvent,
        view: view
      }]);
    };

    _this.handleHitUpdate = function (hit, isFinal, ev) {
      var calendar = _this.component.context.calendar;
      var relevantEvents = _this.relevantEvents;
      var initialHit = _this.hitDragging.initialHit;
      var eventInstance = _this.eventRange.instance;
      var mutation = null;
      var mutatedRelevantEvents = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: relevantEvents,
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: true,
        origSeg: _this.draggingSeg
      };

      if (hit) {
        mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-start-resizer'), eventInstance.range, calendar.pluginSystem.hooks.eventResizeJoinTransforms);
      }

      if (mutation) {
        mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, calendar.eventUiBases, mutation, calendar);
        interaction.mutatedEvents = mutatedRelevantEvents;

        if (!_this.component.isInteractionValid(interaction)) {
          isInvalid = true;
          mutation = null;
          mutatedRelevantEvents = null;
          interaction.mutatedEvents = null;
        }
      }

      if (mutatedRelevantEvents) {
        calendar.dispatch({
          type: 'SET_EVENT_RESIZE',
          state: interaction
        });
      } else {
        calendar.dispatch({
          type: 'UNSET_EVENT_RESIZE'
        });
      }

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        if (mutation && isHitsEqual(initialHit, hit)) {
          mutation = null;
        }

        _this.validMutation = mutation;
        _this.mutatedRelevantEvents = mutatedRelevantEvents;
      }
    };

    _this.handleDragEnd = function (ev) {
      var _a = _this.component.context,
          calendar = _a.calendar,
          view = _a.view;
      var eventDef = _this.eventRange.def;
      var eventInstance = _this.eventRange.instance;
      var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventDef, eventInstance);
      var relevantEvents = _this.relevantEvents;
      var mutatedRelevantEvents = _this.mutatedRelevantEvents;
      calendar.publiclyTrigger('eventResizeStop', [{
        el: _this.draggingSeg.el,
        event: eventApi,
        jsEvent: ev.origEvent,
        view: view
      }]);

      if (_this.validMutation) {
        calendar.dispatch({
          type: 'MERGE_EVENTS',
          eventStore: mutatedRelevantEvents
        });
        calendar.publiclyTrigger('eventResize', [{
          el: _this.draggingSeg.el,
          startDelta: _this.validMutation.startDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
          endDelta: _this.validMutation.endDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
          prevEvent: eventApi,
          event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
          calendar, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
          revert: function () {
            calendar.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: relevantEvents
            });
          },
          jsEvent: ev.origEvent,
          view: view
        }]);
      } else {
        calendar.publiclyTrigger('_noEventResize');
      } // reset all internal state


      _this.draggingSeg = null;
      _this.relevantEvents = null;
      _this.validMutation = null; // okay to keep eventInstance around. useful to set it in handlePointerDown
    };

    var component = settings.component;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.pointer.selector = '.fc-resizer';
    dragging.touchScrollAllowed = false;
    dragging.autoScroller.isEnabled = component.context.options.dragScroll;
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  EventDragging.prototype.destroy = function () {
    this.dragging.destroy();
  };

  EventDragging.prototype.querySeg = function (ev) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.subjectEl, this.component.fgSegSelector));
  };

  return EventDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function computeMutation(hit0, hit1, isFromStart, instanceRange, transforms) {
  var dateEnv = hit0.component.context.dateEnv;
  var date0 = hit0.dateSpan.range.start;
  var date1 = hit1.dateSpan.range.start;
  var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, dateEnv, hit0.component.largeUnit);
  var props = {};

  for (var _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {
    var transform = transforms_1[_i];
    var res = transform(hit0, hit1);

    if (res === false) {
      return null;
    } else if (res) {
      __assign(props, res);
    }
  }

  if (isFromStart) {
    if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {
      props.startDelta = delta;
      return props;
    }
  } else {
    if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {
      props.endDelta = delta;
      return props;
    }
  }

  return null;
}

var UnselectAuto =
/** @class */
function () {
  function UnselectAuto(calendar) {
    var _this = this;

    this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system

    this.onSelect = function (selectInfo) {
      if (selectInfo.jsEvent) {
        _this.isRecentPointerDateSelect = true;
      }
    };

    this.onDocumentPointerUp = function (pev) {
      var _a = _this,
          calendar = _a.calendar,
          documentPointer = _a.documentPointer;
      var state = calendar.state; // touch-scrolling should never unfocus any type of selection

      if (!documentPointer.wasTouchScroll) {
        if (state.dateSelection && // an existing date selection?
        !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?
        ) {
            var unselectAuto = calendar.viewOpt('unselectAuto');
            var unselectCancel = calendar.viewOpt('unselectCancel');

            if (unselectAuto && (!unselectAuto || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, unselectCancel))) {
              calendar.unselect(pev);
            }
          }

        if (state.eventSelection && // an existing event selected?
        !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, EventDragging.SELECTOR) // interaction DIDN'T start on an event
        ) {
            calendar.dispatch({
              type: 'UNSELECT_EVENT'
            });
          }
      }

      _this.isRecentPointerDateSelect = false;
    };

    this.calendar = calendar;
    var documentPointer = this.documentPointer = new PointerDragging(document);
    documentPointer.shouldIgnoreMove = true;
    documentPointer.shouldWatchScroll = false;
    documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);
    /*
    TODO: better way to know about whether there was a selection with the pointer
    */

    calendar.on('select', this.onSelect);
  }

  UnselectAuto.prototype.destroy = function () {
    this.calendar.off('select', this.onSelect);
    this.documentPointer.destroy();
  };

  return UnselectAuto;
}();
/*
Given an already instantiated draggable object for one-or-more elements,
Interprets any dragging as an attempt to drag an events that lives outside
of a calendar onto a calendar.
*/


var ExternalElementDragging =
/** @class */
function () {
  function ExternalElementDragging(dragging, suppliedDragMeta) {
    var _this = this;

    this.receivingCalendar = null;
    this.droppableEvent = null; // will exist for all drags, even if create:false

    this.suppliedDragMeta = null;
    this.dragMeta = null;

    this.handleDragStart = function (ev) {
      _this.dragMeta = _this.buildDragMeta(ev.subjectEl);
    };

    this.handleHitUpdate = function (hit, isFinal, ev) {
      var dragging = _this.hitDragging.dragging;
      var receivingCalendar = null;
      var droppableEvent = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: _this.dragMeta.create,
        origSeg: null
      };

      if (hit) {
        receivingCalendar = hit.component.context.calendar;

        if (_this.canDropElOnCalendar(ev.subjectEl, receivingCalendar)) {
          droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingCalendar);
          interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent);
          isInvalid = !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInteractionValid"])(interaction, receivingCalendar);

          if (isInvalid) {
            interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
            droppableEvent = null;
          }
        }
      }

      _this.displayDrag(receivingCalendar, interaction); // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)
      // TODO: wish we could somehow wait for dispatch to guarantee render


      dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-mirror'));

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        dragging.setMirrorNeedsRevert(!droppableEvent);
        _this.receivingCalendar = receivingCalendar;
        _this.droppableEvent = droppableEvent;
      }
    };

    this.handleDragEnd = function (pev) {
      var _a = _this,
          receivingCalendar = _a.receivingCalendar,
          droppableEvent = _a.droppableEvent;

      _this.clearDrag();

      if (receivingCalendar && droppableEvent) {
        var finalHit = _this.hitDragging.finalHit;
        var finalView = finalHit.component.context.view;
        var dragMeta = _this.dragMeta;

        var arg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
          draggedEl: pev.subjectEl,
          jsEvent: pev.origEvent,
          view: finalView
        });

        receivingCalendar.publiclyTrigger('drop', [arg]);

        if (dragMeta.create) {
          receivingCalendar.dispatch({
            type: 'MERGE_EVENTS',
            eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent)
          });

          if (pev.isTouch) {
            receivingCalendar.dispatch({
              type: 'SELECT_EVENT',
              eventInstanceId: droppableEvent.instance.instanceId
            });
          } // signal that an external event landed


          receivingCalendar.publiclyTrigger('eventReceive', [{
            draggedEl: pev.subjectEl,
            event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](receivingCalendar, droppableEvent.def, droppableEvent.instance),
            view: finalView
          }]);
        }
      }

      _this.receivingCalendar = null;
      _this.droppableEvent = null;
    };

    var hitDragging = this.hitDragging = new HitDragging(dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
    hitDragging.requireInitial = false; // will start outside of a component

    hitDragging.emitter.on('dragstart', this.handleDragStart);
    hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
    hitDragging.emitter.on('dragend', this.handleDragEnd);
    this.suppliedDragMeta = suppliedDragMeta;
  }

  ExternalElementDragging.prototype.buildDragMeta = function (subjectEl) {
    if (typeof this.suppliedDragMeta === 'object') {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta);
    } else if (typeof this.suppliedDragMeta === 'function') {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta(subjectEl));
    } else {
      return getDragMetaFromEl(subjectEl);
    }
  };

  ExternalElementDragging.prototype.displayDrag = function (nextCalendar, state) {
    var prevCalendar = this.receivingCalendar;

    if (prevCalendar && prevCalendar !== nextCalendar) {
      prevCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }

    if (nextCalendar) {
      nextCalendar.dispatch({
        type: 'SET_EVENT_DRAG',
        state: state
      });
    }
  };

  ExternalElementDragging.prototype.clearDrag = function () {
    if (this.receivingCalendar) {
      this.receivingCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }
  };

  ExternalElementDragging.prototype.canDropElOnCalendar = function (el, receivingCalendar) {
    var dropAccept = receivingCalendar.opt('dropAccept');

    if (typeof dropAccept === 'function') {
      return dropAccept(el);
    } else if (typeof dropAccept === 'string' && dropAccept) {
      return Boolean(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementMatches"])(el, dropAccept));
    }

    return true;
  };

  return ExternalElementDragging;
}(); // Utils for computing event store from the DragMeta
// ----------------------------------------------------------------------------------------------------


function computeEventForDateSpan(dateSpan, dragMeta, calendar) {
  var defProps = __assign({}, dragMeta.leftoverProps);

  for (var _i = 0, _a = calendar.pluginSystem.hooks.externalDefTransforms; _i < _a.length; _i++) {
    var transform = _a[_i];

    __assign(defProps, transform(dateSpan, dragMeta));
  }

  var def = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseEventDef"])(defProps, dragMeta.sourceId, dateSpan.allDay, calendar.opt('forceEventDuration') || Boolean(dragMeta.duration), // hasEnd
  calendar);
  var start = dateSpan.range.start; // only rely on time info if drop zone is all-day,
  // otherwise, we already know the time

  if (dateSpan.allDay && dragMeta.startTime) {
    start = calendar.dateEnv.add(start, dragMeta.startTime);
  }

  var end = dragMeta.duration ? calendar.dateEnv.add(start, dragMeta.duration) : calendar.getDefaultEventEnd(dateSpan.allDay, start);
  var instance = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEventInstance"])(def.defId, {
    start: start,
    end: end
  });
  return {
    def: def,
    instance: instance
  };
} // Utils for extracting data from element
// ----------------------------------------------------------------------------------------------------


function getDragMetaFromEl(el) {
  var str = getEmbeddedElData(el, 'event');
  var obj = str ? JSON.parse(str) : {
    create: false
  }; // if no embedded data, assume no event creation

  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(obj);
}

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix = '';

function getEmbeddedElData(el, name) {
  var prefix = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix;
  var prefixedName = (prefix ? prefix + '-' : '') + name;
  return el.getAttribute('data-' + prefixedName) || '';
}
/*
Makes an element (that is *external* to any calendar) draggable.
Can pass in data that determines how an event will be created when dropped onto a calendar.
Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.
*/


var ExternalDraggable =
/** @class */
function () {
  function ExternalDraggable(el, settings) {
    var _this = this;

    if (settings === void 0) {
      settings = {};
    }

    this.handlePointerDown = function (ev) {
      var dragging = _this.dragging;
      var _a = _this.settings,
          minDistance = _a.minDistance,
          longPressDelay = _a.longPressDelay;
      dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].eventDragMinDistance;
      dragging.delay = ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv
      longPressDelay != null ? longPressDelay : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].longPressDelay : 0;
    };

    this.handleDragStart = function (ev) {
      if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains('fc-event')) {
        _this.dragging.mirror.getMirrorEl().classList.add('fc-selected');
      }
    };

    this.settings = settings;
    var dragging = this.dragging = new FeaturefulElementDragging(el);
    dragging.touchScrollAllowed = false;

    if (settings.itemSelector != null) {
      dragging.pointer.selector = settings.itemSelector;
    }

    if (settings.appendTo != null) {
      dragging.mirror.parentNode = settings.appendTo; // TODO: write tests
    }

    dragging.emitter.on('pointerdown', this.handlePointerDown);
    dragging.emitter.on('dragstart', this.handleDragStart);
    new ExternalElementDragging(dragging, settings.eventData);
  }

  ExternalDraggable.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return ExternalDraggable;
}();
/*
Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
The third-party system is responsible for drawing the visuals effects of the drag.
This class simply monitors for pointer movements and fires events.
It also has the ability to hide the moving element (the "mirror") during the drag.
*/


var InferredElementDragging =
/** @class */
function (_super) {
  __extends(InferredElementDragging, _super);

  function InferredElementDragging(containerEl) {
    var _this = _super.call(this, containerEl) || this;

    _this.shouldIgnoreMove = false;
    _this.mirrorSelector = '';
    _this.currentMirrorEl = null;

    _this.handlePointerDown = function (ev) {
      _this.emitter.trigger('pointerdown', ev);

      if (!_this.shouldIgnoreMove) {
        // fire dragstart right away. does not support delay or min-distance
        _this.emitter.trigger('dragstart', ev);
      }
    };

    _this.handlePointerMove = function (ev) {
      if (!_this.shouldIgnoreMove) {
        _this.emitter.trigger('dragmove', ev);
      }
    };

    _this.handlePointerUp = function (ev) {
      _this.emitter.trigger('pointerup', ev);

      if (!_this.shouldIgnoreMove) {
        // fire dragend right away. does not support a revert animation
        _this.emitter.trigger('dragend', ev);
      }
    };

    var pointer = _this.pointer = new PointerDragging(containerEl);
    pointer.emitter.on('pointerdown', _this.handlePointerDown);
    pointer.emitter.on('pointermove', _this.handlePointerMove);
    pointer.emitter.on('pointerup', _this.handlePointerUp);
    return _this;
  }

  InferredElementDragging.prototype.destroy = function () {
    this.pointer.destroy();
  };

  InferredElementDragging.prototype.setIgnoreMove = function (bool) {
    this.shouldIgnoreMove = bool;
  };

  InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {
    if (bool) {
      // restore a previously hidden element.
      // use the reference in case the selector class has already been removed.
      if (this.currentMirrorEl) {
        this.currentMirrorEl.style.visibility = '';
        this.currentMirrorEl = null;
      }
    } else {
      var mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;

      if (mirrorEl) {
        this.currentMirrorEl = mirrorEl;
        mirrorEl.style.visibility = 'hidden';
      }
    }
  };

  return InferredElementDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
/*
Bridges third-party drag-n-drop systems with FullCalendar.
Must be instantiated and destroyed by caller.
*/


var ThirdPartyDraggable =
/** @class */
function () {
  function ThirdPartyDraggable(containerOrSettings, settings) {
    var containerEl = document;

    if ( // wish we could just test instanceof EventTarget, but doesn't work in IE11
    containerOrSettings === document || containerOrSettings instanceof Element) {
      containerEl = containerOrSettings;
      settings = settings || {};
    } else {
      settings = containerOrSettings || {};
    }

    var dragging = this.dragging = new InferredElementDragging(containerEl);

    if (typeof settings.itemSelector === 'string') {
      dragging.pointer.selector = settings.itemSelector;
    } else if (containerEl === document) {
      dragging.pointer.selector = '[data-event]';
    }

    if (typeof settings.mirrorSelector === 'string') {
      dragging.mirrorSelector = settings.mirrorSelector;
    }

    new ExternalElementDragging(dragging, settings.eventData);
  }

  ThirdPartyDraggable.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return ThirdPartyDraggable;
}();

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  componentInteractions: [DateClicking, DateSelecting, EventDragging, EventDragging$1],
  calendarInteractions: [UnselectAuto],
  elementDraggingImpl: FeaturefulElementDragging
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-common/main.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-common/main.esm.js ***!
  \****************************************************************/
/*! exports provided: default, AbstractResourceDayTable, DayResourceTable, ResourceApi, ResourceDayHeader, ResourceDayTable, ResourceSplitter, VResourceJoiner, VResourceSplitter, buildResourceFields, buildResourceTextFunc, buildRowNodes, flattenResources, isGroupsEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractResourceDayTable", function() { return AbstractResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayResourceTable", function() { return DayResourceTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceApi", function() { return ResourceApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayHeader", function() { return ResourceDayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayTable", function() { return ResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceSplitter", function() { return ResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceJoiner", function() { return VResourceJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceSplitter", function() { return VResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceFields", function() { return buildResourceFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceTextFunc", function() { return buildResourceTextFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildRowNodes", function() { return buildRowNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenResources", function() { return flattenResources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isGroupsEqual", function() { return isGroupsEqual; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Resources Common Plugin v4.4.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function massageEventDragMutation(eventMutation, hit0, hit1) {
  var resource0 = hit0.dateSpan.resourceId;
  var resource1 = hit1.dateSpan.resourceId;

  if (resource0 && resource1 && resource0 !== resource1) {
    eventMutation.resourceMutation = {
      matchResourceId: resource0,
      setResourceId: resource1
    };
  }
}
/*
TODO: all this would be much easier if we were using a hash!
*/


function applyEventDefMutation(eventDef, mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation && computeResourceEditable(eventDef, calendar)) {
    var index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId);

    if (index !== -1) {
      var resourceIds = eventDef.resourceIds.slice(); // copy

      resourceIds.splice(index, 1); // remove

      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) {
        // not already in there
        resourceIds.push(resourceMutation.setResourceId); // add
      }

      eventDef.resourceIds = resourceIds;
    }
  }
}
/*
HACK
TODO: use EventUi system instead of this
*/


function computeResourceEditable(eventDef, calendar) {
  var resourceEditable = eventDef.resourceEditable;

  if (resourceEditable == null) {
    var source = eventDef.sourceId && calendar.state.eventSources[eventDef.sourceId];

    if (source) {
      resourceEditable = source.extendedProps.resourceEditable; // used the Source::extendedProps hack
    }

    if (resourceEditable == null) {
      resourceEditable = calendar.opt('eventResourceEditable');

      if (resourceEditable == null) {
        resourceEditable = calendar.opt('editable'); // TODO: use defaults system instead
      }
    }
  }

  return resourceEditable;
}

function transformEventDrop(mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation) {
    return {
      oldResource: calendar.getResourceById(resourceMutation.matchResourceId),
      newResource: calendar.getResourceById(resourceMutation.setResourceId)
    };
  } else {
    return {
      oldResource: null,
      newResource: null
    };
  }
}

var ResourceDataAdder =
/** @class */
function () {
  function ResourceDataAdder() {
    this.filterResources = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(filterResources);
  }

  ResourceDataAdder.prototype.transform = function (viewProps, viewSpec, calendarProps, allOptions) {
    if (viewSpec.class.needsResourceData) {
      return {
        resourceStore: this.filterResources(calendarProps.resourceStore, allOptions.filterResourcesWithEvents, calendarProps.eventStore, calendarProps.dateProfile.activeRange),
        resourceEntityExpansions: calendarProps.resourceEntityExpansions
      };
    }
  };

  return ResourceDataAdder;
}();

function filterResources(resourceStore, doFilterResourcesWithEvents, eventStore, activeRange) {
  if (doFilterResourcesWithEvents) {
    var instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange);
    var hasEvents_1 = computeHasEvents(instancesInRange, eventStore.defs);

    __assign(hasEvents_1, computeAncestorHasEvents(hasEvents_1, resourceStore));

    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(resourceStore, function (resource, resourceId) {
      return hasEvents_1[resourceId];
    });
  } else {
    return resourceStore;
  }
}

function filterEventInstancesInRange(eventInstances, activeRange) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(eventInstances, function (eventInstance) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesIntersect"])(eventInstance.range, activeRange);
  });
}

function computeHasEvents(eventInstances, eventDefs) {
  var hasEvents = {};

  for (var instanceId in eventInstances) {
    var instance = eventInstances[instanceId];

    for (var _i = 0, _a = eventDefs[instance.defId].resourceIds; _i < _a.length; _i++) {
      var resourceId = _a[_i];
      hasEvents[resourceId] = true;
    }
  }

  return hasEvents;
}
/*
mark resources as having events if any of their ancestors have them
NOTE: resourceStore might not have all the resources that hasEvents{} has keyed
*/


function computeAncestorHasEvents(hasEvents, resourceStore) {
  var res = {};

  for (var resourceId in hasEvents) {
    var resource = void 0;

    while (resource = resourceStore[resourceId]) {
      resourceId = resource.parentId; // now functioning as the parentId

      if (resourceId) {
        res[resourceId] = true;
      } else {
        break;
      }
    }
  }

  return res;
} // for when non-resource view should be given EventUi info (for event coloring/constraints based off of resource data)


var ResourceEventConfigAdder =
/** @class */
function () {
  function ResourceEventConfigAdder() {
    this.buildResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeOutput"])(buildResourceEventUis, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsEqual"]);
    this.injectResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(injectResourceEventUis);
  }

  ResourceEventConfigAdder.prototype.transform = function (viewProps, viewSpec, calendarProps) {
    if (!viewSpec.class.needsResourceData) {
      // is a non-resource view?
      return {
        eventUiBases: this.injectResourceEventUis(viewProps.eventUiBases, viewProps.eventStore.defs, this.buildResourceEventUis(calendarProps.resourceStore))
      };
    }
  };

  return ResourceEventConfigAdder;
}();

function buildResourceEventUis(resourceStore) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceStore, function (resource) {
    return resource.ui;
  });
}

function injectResourceEventUis(eventUiBases, eventDefs, resourceEventUis) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(eventUiBases, function (eventUi, defId) {
    if (defId) {
      // not the '' key
      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis);
    } else {
      return eventUi;
    }
  });
}

function injectResourceEventUi(origEventUi, eventDef, resourceEventUis) {
  var parts = []; // first resource takes precedence, which fights with the ordering of combineEventUis, thus the unshifts

  for (var _i = 0, _a = eventDef.resourceIds; _i < _a.length; _i++) {
    var resourceId = _a[_i];

    if (resourceEventUis[resourceId]) {
      parts.unshift(resourceEventUis[resourceId]);
    }
  }

  parts.unshift(origEventUi);
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["combineEventUis"])(parts);
} // for making sure events that have editable resources are always draggable in resource views


function transformIsDraggable(val, eventDef, eventUi, view) {
  if (!val) {
    if (view.viewSpec.class.needsResourceData) {
      if (computeResourceEditable(eventDef, view.context.calendar)) {
        // yuck
        return true;
      }
    }
  }

  return val;
}

var RESOURCE_SOURCE_PROPS = {
  id: String
};
var defs = [];
var uid = 0;

function registerResourceSourceDef(def) {
  defs.push(def);
}

function getResourceSourceDef(id) {
  return defs[id];
}

function doesSourceIgnoreRange(source) {
  return Boolean(defs[source.sourceDefId].ignoreRange);
}

function parseResourceSource(input) {
  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(input);

    if (meta) {
      var res = parseResourceSourceProps(typeof input === 'object' && input ? input : {}, meta, i);
      res._raw = input;
      return res;
    }
  }

  return null;
}

function parseResourceSourceProps(input, meta, sourceDefId) {
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_SOURCE_PROPS);
  props.sourceId = String(uid++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.publicId = props.id;
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  delete props.id;
  return props;
}

function reduceResourceSource(source, action, dateProfile, calendar) {
  switch (action.type) {
    case 'INIT':
      return createSource(calendar.opt('resources'), calendar);

    case 'RESET_RESOURCE_SOURCE':
      return createSource(action.resourceSourceInput, calendar, true);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      return handleRange(source, dateProfile.activeRange, calendar);

    case 'RECEIVE_RESOURCES':
    case 'RECEIVE_RESOURCE_ERROR':
      return receiveResponse(source, action.fetchId, action.fetchRange);

    case 'REFETCH_RESOURCES':
      return fetchSource(source, dateProfile.activeRange, calendar);

    default:
      return source;
  }
}

var uid$1 = 0;

function createSource(input, calendar, forceFetch) {
  if (input) {
    var source = parseResourceSource(input);

    if (forceFetch || !calendar.opt('refetchResourcesOnNavigate')) {
      // because assumes handleRange will do it later
      source = fetchSource(source, null, calendar);
    }

    return source;
  }

  return null;
}

function handleRange(source, activeRange, calendar) {
  if (calendar.opt('refetchResourcesOnNavigate') && !doesSourceIgnoreRange(source) && (!source.fetchRange || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesEqual"])(source.fetchRange, activeRange))) {
    return fetchSource(source, activeRange, calendar);
  } else {
    return source;
  }
}

function fetchSource(source, fetchRange, calendar) {
  var sourceDef = getResourceSourceDef(source.sourceDefId);
  var fetchId = String(uid$1++);
  sourceDef.fetch({
    resourceSource: source,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    // HACK
    // do before calling dispatch in case dispatch renders synchronously
    calendar.afterSizingTriggers._resourcesRendered = [null]; // fire once

    calendar.dispatch({
      type: 'RECEIVE_RESOURCES',
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawResources: res.rawResources
    });
  }, function (error) {
    calendar.dispatch({
      type: 'RECEIVE_RESOURCE_ERROR',
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, source, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(source, fetchId, fetchRange) {
  if (fetchId === source.latestFetchId) {
    return __assign({}, source, {
      isFetching: false,
      fetchRange: fetchRange
    });
  }

  return source;
}

var RESOURCE_PROPS = {
  id: String,
  title: String,
  parentId: String,
  businessHours: null,
  children: null,
  extendedProps: null
};
var PRIVATE_ID_PREFIX = '_fc:';
var uid$2 = 0;
/*
needs a full store so that it can populate children too
*/

function parseResource(input, parentId, store, calendar) {
  if (parentId === void 0) {
    parentId = '';
  }

  var leftovers0 = {};
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["processScopedUiProps"])('event', leftovers0, calendar, leftovers1);

  if (!props.id) {
    props.id = PRIVATE_ID_PREFIX + uid$2++;
  }

  if (!props.parentId) {
    // give precedence to the parentId property
    props.parentId = parentId;
  }

  props.businessHours = props.businessHours ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseBusinessHours"])(props.businessHours, calendar) : null;
  props.ui = ui;
  props.extendedProps = __assign({}, leftovers1, props.extendedProps); // help out ResourceApi from having user modify props

  Object.freeze(ui.classNames);
  Object.freeze(props.extendedProps);
  if (store[props.id]) ;else {
    store[props.id] = props;

    if (props.children) {
      for (var _i = 0, _a = props.children; _i < _a.length; _i++) {
        var childInput = _a[_i];
        parseResource(childInput, props.id, store, calendar);
      }

      delete props.children;
    }
  }
  return props;
}
/*
TODO: use this in more places
*/


function getPublicId(id) {
  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {
    return '';
  }

  return id;
}

function reduceResourceStore(store, action, source, calendar) {
  switch (action.type) {
    case 'INIT':
      return {};

    case 'RECEIVE_RESOURCES':
      return receiveRawResources(store, action.rawResources, action.fetchId, source, calendar);

    case 'ADD_RESOURCE':
      return addResource(store, action.resourceHash);

    case 'REMOVE_RESOURCE':
      return removeResource(store, action.resourceId);

    case 'SET_RESOURCE_PROP':
      return setResourceProp(store, action.resourceId, action.propName, action.propValue);

    case 'RESET_RESOURCES':
      // must make the calendar think each resource is a new object :/
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(store, function (resource) {
        return __assign({}, resource);
      });

    default:
      return store;
  }
}

function receiveRawResources(existingStore, inputs, fetchId, source, calendar) {
  if (source.latestFetchId === fetchId) {
    var nextStore = {};

    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
      var input = inputs_1[_i];
      parseResource(input, '', nextStore, calendar);
    }

    return nextStore;
  } else {
    return existingStore;
  }
}

function addResource(existingStore, additions) {
  // TODO: warn about duplicate IDs
  return __assign({}, existingStore, additions);
}

function removeResource(existingStore, resourceId) {
  var newStore = __assign({}, existingStore);

  delete newStore[resourceId]; // promote children

  for (var childResourceId in newStore) {
    // a child, *maybe* but probably not
    if (newStore[childResourceId].parentId === resourceId) {
      newStore[childResourceId] = __assign({}, newStore[childResourceId], {
        parentId: ''
      });
    }
  }

  return newStore;
}

function setResourceProp(existingStore, resourceId, name, value) {
  var _a, _b;

  var existingResource = existingStore[resourceId]; // TODO: sanitization

  if (existingResource) {
    return __assign({}, existingStore, (_a = {}, _a[resourceId] = __assign({}, existingResource, (_b = {}, _b[name] = value, _b)), _a));
  } else {
    return existingStore;
  }
}

function reduceResourceEntityExpansions(expansions, action) {
  var _a;

  switch (action.type) {
    case 'INIT':
      return {};

    case 'SET_RESOURCE_ENTITY_EXPANDED':
      return __assign({}, expansions, (_a = {}, _a[action.id] = action.isExpanded, _a));

    default:
      return expansions;
  }
}

function resourcesReducers(state, action, calendar) {
  var resourceSource = reduceResourceSource(state.resourceSource, action, state.dateProfile, calendar);
  var resourceStore = reduceResourceStore(state.resourceStore, action, resourceSource, calendar);
  var resourceEntityExpansions = reduceResourceEntityExpansions(state.resourceEntityExpansions, action);
  return __assign({}, state, {
    resourceSource: resourceSource,
    resourceStore: resourceStore,
    resourceEntityExpansions: resourceEntityExpansions
  });
}

var RESOURCE_RELATED_PROPS = {
  resourceId: String,
  resourceIds: function (items) {
    return (items || []).map(function (item) {
      return String(item);
    });
  },
  resourceEditable: Boolean
};

function parseEventDef(def, props, leftovers) {
  var resourceRelatedProps = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(props, RESOURCE_RELATED_PROPS, {}, leftovers);
  var resourceIds = resourceRelatedProps.resourceIds;

  if (resourceRelatedProps.resourceId) {
    resourceIds.push(resourceRelatedProps.resourceId);
  }

  def.resourceIds = resourceIds;
  def.resourceEditable = resourceRelatedProps.resourceEditable;
}

function transformDateSelectionJoin(hit0, hit1) {
  var resourceId0 = hit0.dateSpan.resourceId;
  var resourceId1 = hit1.dateSpan.resourceId;

  if (resourceId0 && resourceId1) {
    if (hit0.component.allowAcrossResources === false && resourceId0 !== resourceId1) {
      return false;
    } else {
      return {
        resourceId: resourceId0
      };
    }
  }
}

var ResourceApi =
/** @class */
function () {
  function ResourceApi(calendar, rawResource) {
    this._calendar = calendar;
    this._resource = rawResource;
  }

  ResourceApi.prototype.setProp = function (name, value) {
    this._calendar.dispatch({
      type: 'SET_RESOURCE_PROP',
      resourceId: this._resource.id,
      propName: name,
      propValue: value
    });
  };

  ResourceApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_RESOURCE',
      resourceId: this._resource.id
    });
  };

  ResourceApi.prototype.getParent = function () {
    var calendar = this._calendar;
    var parentId = this._resource.parentId;

    if (parentId) {
      return new ResourceApi(calendar, calendar.state.resourceSource[parentId]);
    } else {
      return null;
    }
  };

  ResourceApi.prototype.getChildren = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var resourceStore = calendar.state.resourceStore;
    var childApis = [];

    for (var resourceId in resourceStore) {
      if (resourceStore[resourceId].parentId === thisResourceId) {
        childApis.push(new ResourceApi(calendar, resourceStore[resourceId]));
      }
    }

    return childApis;
  };
  /*
  this is really inefficient!
  TODO: make EventApi::resourceIds a hash or keep an index in the Calendar's state
  */


  ResourceApi.prototype.getEvents = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var _a = calendar.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var instanceId in instances) {
      var instance = instances[instanceId];
      var def = defs[instance.defId];

      if (def.resourceIds.indexOf(thisResourceId) !== -1) {
        // inefficient!!!
        eventApis.push(new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, def, instance));
      }
    }

    return eventApis;
  };

  Object.defineProperty(ResourceApi.prototype, "id", {
    get: function () {
      return this._resource.id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "title", {
    get: function () {
      return this._resource.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventConstraint", {
    get: function () {
      return this._resource.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventOverlap", {
    get: function () {
      return this._resource.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventAllow", {
    get: function () {
      return this._resource.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBackgroundColor", {
    get: function () {
      return this._resource.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBorderColor", {
    get: function () {
      return this._resource.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventTextColor", {
    get: function () {
      return this._resource.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventClassNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._resource.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "extendedProps", {
    get: function () {
      return this._resource.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return ResourceApi;
}();

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.addResource = function (input, scrollTo) {
  var _a;

  if (scrollTo === void 0) {
    scrollTo = true;
  }

  var resourceHash;
  var resource;

  if (input instanceof ResourceApi) {
    resource = input._resource;
    resourceHash = (_a = {}, _a[resource.id] = resource, _a);
  } else {
    resourceHash = {};
    resource = parseResource(input, '', resourceHash, this);
  } // HACK


  if (scrollTo) {
    this.component.view.addScroll({
      forcedRowId: resource.id
    });
  }

  this.dispatch({
    type: 'ADD_RESOURCE',
    resourceHash: resourceHash
  });
  return new ResourceApi(this, resource);
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResourceById = function (id) {
  id = String(id);

  if (this.state.resourceStore) {
    // guard against calendar with no resource functionality
    var rawResource = this.state.resourceStore[id];

    if (rawResource) {
      return new ResourceApi(this, rawResource);
    }
  }

  return null;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getTopLevelResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      if (!resourceStore[resourceId].parentId) {
        resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
      }
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.rerenderResources = function () {
  this.dispatch({
    type: 'RESET_RESOURCES'
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.refetchResources = function () {
  this.dispatch({
    type: 'REFETCH_RESOURCES'
  });
};

function transformDatePoint(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}

function transformDateSpan(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}
/*
splits things BASED OFF OF which resources they are associated with.
creates a '' entry which is when something has NO resource.
*/


var ResourceSplitter =
/** @class */
function (_super) {
  __extends(ResourceSplitter, _super);

  function ResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceSplitter.prototype.getKeyInfo = function (props) {
    return __assign({
      '': {}
    }, props.resourceStore // already has `ui` and `businessHours` keys!
    );
  };

  ResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  ResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return ResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]);

function isPropsValidWithResources(props, calendar) {
  var splitter = new ResourceSplitter();
  var sets = splitter.splitProps(__assign({}, props, {
    resourceStore: calendar.state.resourceStore
  }));

  for (var resourceId in sets) {
    var props_1 = sets[resourceId]; // merge in event data from the non-resource segment

    if (resourceId && sets['']) {
      // current segment is not the non-resource one, and there IS a non-resource one
      props_1 = __assign({}, props_1, {
        eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mergeEventStores"])(sets[''].eventStore, props_1.eventStore),
        eventUiBases: __assign({}, sets[''].eventUiBases, props_1.eventUiBases)
      });
    }

    if (!Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsValid"])(props_1, calendar, {
      resourceId: resourceId
    }, filterConfig.bind(null, resourceId))) {
      return false;
    }
  }

  return true;
}

function filterConfig(resourceId, config) {
  return __assign({}, config, {
    constraints: filterConstraints(resourceId, config.constraints)
  });
}

function filterConstraints(resourceId, constraints) {
  return constraints.map(function (constraint) {
    var defs = constraint.defs;

    if (defs) {
      // we are dealing with an EventStore
      // if any of the events define constraints to resources that are NOT this resource,
      // then this resource is unconditionally prohibited, which is what a `false` value does.
      for (var defId in defs) {
        var resourceIds = defs[defId].resourceIds;

        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) {
          // TODO: use a hash?!!! (for other reasons too)
          return false;
        }
      }
    }

    return constraint;
  });
}

function transformExternalDef(dateSpan) {
  return dateSpan.resourceId ? {
    resourceId: dateSpan.resourceId
  } : {};
}

function transformEventResizeJoin(hit0, hit1) {
  var component = hit0.component;

  if (component.allowAcrossResources === false && hit0.dateSpan.resourceId !== hit1.dateSpan.resourceId) {
    return false;
  }
}

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.getResources = function () {
  var calendar = this._calendar;
  return this._def.resourceIds.map(function (resourceId) {
    return calendar.getResourceById(resourceId);
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.setResources = function (resources) {
  var resourceIds = []; // massage resources -> resourceIds

  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
    var resource = resources_1[_i];
    var resourceId = null;

    if (typeof resource === 'string') {
      resourceId = resource;
    } else if (typeof resource === 'number') {
      resourceId = String(resource);
    } else if (resource instanceof ResourceApi) {
      resourceId = resource.id; // guaranteed to always have an ID. hmmm
    } else {
      console.warn('unknown resource type: ' + resource);
    }

    if (resourceId) {
      resourceIds.push(resourceId);
    }
  }

  this.mutate({
    standardProps: {
      resourceIds: resourceIds
    }
  });
};

var RELEASE_DATE = '2020-02-12'; // for Scheduler

var UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too

var LICENSE_INFO_URL = 'http://fullcalendar.io/scheduler/license/';
var PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];
var CSS = {
  position: 'absolute',
  'z-index': 99999,
  bottom: '1px',
  left: '1px',
  background: '#eee',
  'border-color': '#ddd',
  'border-style': 'solid',
  'border-width': '1px 1px 0 0',
  padding: '2px 4px',
  'font-size': '12px',
  'border-top-right-radius': '3px'
};

function injectLicenseWarning(containerEl, calendar) {
  var key = calendar.opt('schedulerLicenseKey');

  if (!isImmuneUrl(window.location.href) && !isValidKey(key)) {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(containerEl, '<div class="fc-license-message" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(CSS)) + '">' + 'Please use a valid license key. <a href="' + LICENSE_INFO_URL + '">More Info</a>' + '</div>');
  }
}
/*
This decryption is not meant to be bulletproof. Just a way to remind about an upgrade.
*/


function isValidKey(key) {
  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {
    return true;
  }

  var parts = (key || '').match(/^(\d+)\-fcs\-(\d+)$/);

  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);
    var releaseDate = new Date(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].mockSchedulerReleaseDate || RELEASE_DATE);

    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isValidDate"])(releaseDate)) {
      // token won't be replaced in dev mode
      var minPurchaseDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(releaseDate, -UPGRADE_WINDOW);

      if (minPurchaseDate < purchaseDate) {
        return true;
      }
    }
  }

  return false;
}

function isImmuneUrl(url) {
  return /\w+\:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}

var optionChangeHandlers = {
  resources: handleResources
};

function handleResources(newSourceInput, calendar, deepEqual) {
  var oldSourceInput = calendar.state.resourceSource._raw;

  if (!deepEqual(oldSourceInput, newSourceInput)) {
    calendar.dispatch({
      type: 'RESET_RESOURCE_SOURCE',
      resourceSourceInput: newSourceInput
    });
  }
}

registerResourceSourceDef({
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      return raw;
    } else if (Array.isArray(raw.resources)) {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, successCallback) {
    successCallback({
      rawResources: arg.resourceSource.meta
    });
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      return raw;
    } else if (typeof raw.resources === 'function') {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.resourceSource.meta;
    var publicArg = {};

    if (arg.range) {
      publicArg = {
        start: dateEnv.toDate(arg.range.start),
        end: dateEnv.toDate(arg.range.end),
        startStr: dateEnv.formatIso(arg.range.start),
        endStr: dateEnv.formatIso(arg.range.end),
        timeZone: dateEnv.timeZone
      };
    } // TODO: make more dry with EventSourceFunc
    // TODO: accept a response?


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["unpromisify"])(func.bind(null, publicArg), function (rawResources) {
      success({
        rawResources: rawResources
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams
    };
  },
  fetch: function (arg, successCallback, failureCallback) {
    var meta = arg.resourceSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["requestJson"])(meta.method, meta.url, requestParams, function (rawResources, xhr) {
      successCallback({
        rawResources: rawResources,
        xhr: xhr
      });
    }, function (message, xhr) {
      failureCallback({
        message: message,
        xhr: xhr
      });
    });
  }
}); // TODO: somehow consolidate with event json feed

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};

  if (range) {
    // startParam = meta.startParam
    // if (startParam == null) {
    startParam = calendar.opt('startParam'); // }
    // endParam = meta.endParam
    // if (endParam == null) {

    endParam = calendar.opt('endParam'); // }
    // timeZoneParam = meta.timeZoneParam
    // if (timeZoneParam == null) {

    timeZoneParam = calendar.opt('timeZoneParam'); // }

    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);

    if (dateEnv.timeZone !== 'local') {
      params[timeZoneParam] = dateEnv.timeZone;
    }
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  return params;
}

function buildResourceTextFunc(resourceTextSetting, calendar) {
  if (typeof resourceTextSetting === 'function') {
    return function (resource) {
      return resourceTextSetting(new ResourceApi(calendar, resource));
    };
  } else {
    return function (resource) {
      return resource.title || getPublicId(resource.id);
    };
  }
}

var ResourceDayHeader =
/** @class */
function (_super) {
  __extends(ResourceDayHeader, _super);

  function ResourceDayHeader(parentEl) {
    var _this = _super.call(this) || this;

    _this.processOptions = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_this._processOptions);
    _this.parentEl = parentEl;
    return _this;
  }

  ResourceDayHeader.prototype._processOptions = function (options, calendar) {
    this.datesAboveResources = options.datesAboveResources;
    this.resourceTextFunc = buildResourceTextFunc(options.resourceText, calendar);
  };

  ResourceDayHeader.prototype.render = function (props, context) {
    var options = context.options,
        calendar = context.calendar,
        theme = context.theme;
    this.processOptions(options, calendar);
    this.parentEl.innerHTML = ''; // because might be nbsp

    this.parentEl.appendChild(this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-row ' + theme.getClass('headerRow') + '">' + '<table class="' + theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    this.thead = this.el.querySelector('thead');
    var html;
    this.dateFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(options.columnHeaderFormat || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeFallbackHeaderFormat"])(props.datesRepDistinctDays, props.dates.length));

    if (props.dates.length === 1) {
      html = this.renderResourceRow(props.resources);
    } else {
      if (this.datesAboveResources) {
        html = this.renderDayAndResourceRows(props.dates, props.resources);
      } else {
        html = this.renderResourceAndDayRows(props.resources, props.dates);
      }
    }

    this.thead.innerHTML = html;
    this.processResourceEls(props.resources);
  };

  ResourceDayHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ResourceDayHeader.prototype.renderResourceRow = function (resources) {
    var _this = this;

    var cellHtmls = resources.map(function (resource) {
      return _this.renderResourceCell(resource, 1);
    });
    return this.buildTr(cellHtmls);
  };

  ResourceDayHeader.prototype.renderDayAndResourceRows = function (dates, resources) {
    var dateHtmls = [];
    var resourceHtmls = [];

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      dateHtmls.push(this.renderDateCell(date, resources.length));

      for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {
        var resource = resources_1[_a];
        resourceHtmls.push(this.renderResourceCell(resource, 1, date));
      }
    }

    return this.buildTr(dateHtmls) + this.buildTr(resourceHtmls);
  };

  ResourceDayHeader.prototype.renderResourceAndDayRows = function (resources, dates) {
    var resourceHtmls = [];
    var dateHtmls = [];

    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
      var resource = resources_2[_i];
      resourceHtmls.push(this.renderResourceCell(resource, dates.length));

      for (var _a = 0, dates_2 = dates; _a < dates_2.length; _a++) {
        var date = dates_2[_a];
        dateHtmls.push(this.renderDateCell(date, 1, resource));
      }
    }

    return this.buildTr(resourceHtmls) + this.buildTr(dateHtmls);
  }; // Cell Rendering Utils
  // ----------------------------------------------------------------------------------------------
  // a cell with the resource name. might be associated with a specific day


  ResourceDayHeader.prototype.renderResourceCell = function (resource, colspan, date) {
    var dateEnv = this.context.dateEnv;
    return '<th class="fc-resource-cell"' + ' data-resource-id="' + resource.id + '"' + (date ? ' data-date="' + dateEnv.formatIso(date, {
      omitTime: true
    }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this.resourceTextFunc(resource)) + '</th>';
  }; // a cell with date text. might have a resource associated with it


  ResourceDayHeader.prototype.renderDateCell = function (date, colspan, resource) {
    var props = this.props;
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["renderDateCell"])(date, props.dateProfile, props.datesRepDistinctDays, props.dates.length * props.resources.length, this.dateFormat, this.context, colspan, resource ? 'data-resource-id="' + resource.id + '"' : '');
  };

  ResourceDayHeader.prototype.buildTr = function (cellHtmls) {
    if (!cellHtmls.length) {
      cellHtmls = ['<td>&nbsp;</td>'];
    }

    if (this.props.renderIntroHtml) {
      cellHtmls = [this.props.renderIntroHtml()].concat(cellHtmls);
    }

    if (this.context.isRtl) {
      cellHtmls.reverse();
    }

    return '<tr>' + cellHtmls.join('') + '</tr>';
  }; // Post-rendering
  // ----------------------------------------------------------------------------------------------
  // given a container with already rendered resource cells


  ResourceDayHeader.prototype.processResourceEls = function (resources) {
    var _a = this.context,
        calendar = _a.calendar,
        isRtl = _a.isRtl,
        view = _a.view;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.thead, '.fc-resource-cell').forEach(function (node, col) {
      col = col % resources.length;

      if (isRtl) {
        col = resources.length - 1 - col;
      }

      var resource = resources[col];
      calendar.publiclyTrigger('resourceRender', [{
        resource: new ResourceApi(calendar, resource),
        el: node,
        view: view
      }]);
    });
  };

  return ResourceDayHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var AbstractResourceDayTable =
/** @class */
function () {
  function AbstractResourceDayTable(dayTable, resources) {
    this.dayTable = dayTable;
    this.resources = resources;
    this.resourceIndex = new ResourceIndex(resources);
    this.rowCnt = dayTable.rowCnt;
    this.colCnt = dayTable.colCnt * resources.length;
    this.cells = this.buildCells();
  }

  AbstractResourceDayTable.prototype.buildCells = function () {
    var _a = this,
        rowCnt = _a.rowCnt,
        dayTable = _a.dayTable,
        resources = _a.resources;

    var rows = [];

    for (var row = 0; row < rowCnt; row++) {
      var rowCells = [];

      for (var dateCol = 0; dateCol < dayTable.colCnt; dateCol++) {
        for (var resourceCol = 0; resourceCol < resources.length; resourceCol++) {
          var resource = resources[resourceCol];
          var htmlAttrs = 'data-resource-id="' + resource.id + '"';
          rowCells[this.computeCol(dateCol, resourceCol)] = {
            date: dayTable.cells[row][dateCol].date,
            resource: resource,
            htmlAttrs: htmlAttrs
          };
        }
      }

      rows.push(rowCells);
    }

    return rows;
  };

  return AbstractResourceDayTable;
}();
/*
resources over dates
*/


var ResourceDayTable =
/** @class */
function (_super) {
  __extends(ResourceDayTable, _super);

  function ResourceDayTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceDayTable.prototype.computeCol = function (dateI, resourceI) {
    return resourceI * this.dayTable.colCnt + dateI;
  };
  /*
  all date ranges are intact
  */


  ResourceDayTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    return [{
      firstCol: this.computeCol(dateStartI, resourceI),
      lastCol: this.computeCol(dateEndI, resourceI),
      isStart: true,
      isEnd: true
    }];
  };

  return ResourceDayTable;
}(AbstractResourceDayTable);
/*
dates over resources
*/


var DayResourceTable =
/** @class */
function (_super) {
  __extends(DayResourceTable, _super);

  function DayResourceTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DayResourceTable.prototype.computeCol = function (dateI, resourceI) {
    return dateI * this.resources.length + resourceI;
  };
  /*
  every single day is broken up
  */


  DayResourceTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    var segs = [];

    for (var i = dateStartI; i <= dateEndI; i++) {
      var col = this.computeCol(i, resourceI);
      segs.push({
        firstCol: col,
        lastCol: col,
        isStart: i === dateStartI,
        isEnd: i === dateEndI
      });
    }

    return segs;
  };

  return DayResourceTable;
}(AbstractResourceDayTable);

var ResourceIndex =
/** @class */
function () {
  function ResourceIndex(resources) {
    var indicesById = {};
    var ids = [];

    for (var i = 0; i < resources.length; i++) {
      var id = resources[i].id;
      ids.push(id);
      indicesById[id] = i;
    }

    this.ids = ids;
    this.indicesById = indicesById;
    this.length = resources.length;
  }

  return ResourceIndex;
}();
/*
TODO: just use ResourceHash somehow? could then use the generic ResourceSplitter
*/


var VResourceSplitter =
/** @class */
function (_super) {
  __extends(VResourceSplitter, _super);

  function VResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  VResourceSplitter.prototype.getKeyInfo = function (props) {
    var resourceDayTable = props.resourceDayTable;
    var hash = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceDayTable.resourceIndex.indicesById, function (i) {
      return resourceDayTable.resources[i]; // has `ui` AND `businessHours` keys!
    }); // :(

    hash[''] = {};
    return hash;
  };

  VResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  VResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return VResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]); // joiner


var NO_SEGS = []; // for memoizing

var VResourceJoiner =
/** @class */
function () {
  function VResourceJoiner() {
    this.joinDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinEventDrags = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
    this.joinEventResizes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
  }
  /*
  propSets also has a '' key for things with no resource
  */


  VResourceJoiner.prototype.joinProps = function (propSets, resourceDayTable) {
    var dateSelectionSets = [];
    var businessHoursSets = [];
    var fgEventSets = [];
    var bgEventSets = [];
    var eventDrags = [];
    var eventResizes = [];
    var eventSelection = '';
    var keys = resourceDayTable.resourceIndex.ids.concat(['']); // add in the all-resource key

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      var props = propSets[key];
      dateSelectionSets.push(props.dateSelectionSegs);
      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS); // don't include redundant all-resource businesshours

      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS); // don't include fg all-resource segs

      bgEventSets.push(props.bgEventSegs);
      eventDrags.push(props.eventDrag);
      eventResizes.push(props.eventResize);
      eventSelection = eventSelection || props.eventSelection;
    }

    return {
      dateSelectionSegs: this.joinDateSelection.apply(this, [resourceDayTable].concat(dateSelectionSets)),
      businessHourSegs: this.joinBusinessHours.apply(this, [resourceDayTable].concat(businessHoursSets)),
      fgEventSegs: this.joinFgEvents.apply(this, [resourceDayTable].concat(fgEventSets)),
      bgEventSegs: this.joinBgEvents.apply(this, [resourceDayTable].concat(bgEventSets)),
      eventDrag: this.joinEventDrags.apply(this, [resourceDayTable].concat(eventDrags)),
      eventResize: this.joinEventResizes.apply(this, [resourceDayTable].concat(eventResizes)),
      eventSelection: eventSelection
    };
  };

  VResourceJoiner.prototype.joinSegs = function (resourceDayTable) {
    var segGroups = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      segGroups[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _a = 0, _b = segGroups[i]; _a < _b.length; _a++) {
        var seg = _b[_a];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }

      for (var _c = 0, _d = segGroups[resourceCnt]; _c < _d.length; _c++) {
        // one beyond. the all-resource
        var seg = _d[_c];
        transformedSegs.push.apply( // one beyond. the all-resource
        transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };
  /*
  for expanding non-resource segs to all resources.
  only for public use.
  no memoizing.
  */


  VResourceJoiner.prototype.expandSegs = function (resourceDayTable, segs) {
    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };

  VResourceJoiner.prototype.joinInteractions = function (resourceDayTable) {
    var interactions = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      interactions[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var affectedInstances = {};
    var transformedSegs = [];
    var isEvent = false;
    var sourceSeg = null;

    for (var i = 0; i < resourceCnt; i++) {
      var interaction = interactions[i];

      if (interaction) {
        for (var _a = 0, _b = interaction.segs; _a < _b.length; _a++) {
          var seg = _b[_a];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }

        __assign(affectedInstances, interaction.affectedInstances);

        isEvent = isEvent || interaction.isEvent;
        sourceSeg = sourceSeg || interaction.sourceSeg;
      }

      if (interactions[resourceCnt]) {
        // one beyond. the all-resource
        for (var _c = 0, _d = interactions[resourceCnt].segs; _c < _d.length; _c++) {
          var seg = _d[_c];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }
      }
    }

    return {
      affectedInstances: affectedInstances,
      segs: transformedSegs,
      isEvent: isEvent,
      sourceSeg: sourceSeg
    };
  };

  return VResourceJoiner;
}();
/*
doesn't accept grouping
*/


function flattenResources(resourceStore, orderSpecs) {
  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true).map(function (node) {
    return node.resource;
  });
}

function buildRowNodes(resourceStore, groupSpecs, orderSpecs, isVGrouping, expansions, expansionDefault) {
  var complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs);
  var flatNodes = [];
  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault);
  return flatNodes;
}

function flattenNodes(complexNodes, res, isVGrouping, rowSpans, depth, expansions, expansionDefault) {
  for (var i = 0; i < complexNodes.length; i++) {
    var complexNode = complexNodes[i];
    var group = complexNode.group;

    if (group) {
      if (isVGrouping) {
        var firstRowIndex = res.length;
        var rowSpanIndex = rowSpans.length;
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault);

        if (firstRowIndex < res.length) {
          var firstRow = res[firstRowIndex];
          var firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice();
          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex;
        }
      } else {
        var id = group.spec.field + ':' + group.value;
        var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
        res.push({
          id: id,
          group: group,
          isExpanded: isExpanded
        });

        if (isExpanded) {
          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
        }
      }
    } else if (complexNode.resource) {
      var id = complexNode.resource.id;
      var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
      res.push({
        id: id,
        rowSpans: rowSpans,
        depth: depth,
        isExpanded: isExpanded,
        hasChildren: Boolean(complexNode.children.length),
        resource: complexNode.resource,
        resourceFields: complexNode.resourceFields
      });

      if (isExpanded) {
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
      }
    }
  }
}

function buildHierarchy(resourceStore, maxDepth, groupSpecs, orderSpecs) {
  var resourceNodes = buildResourceNodes(resourceStore, orderSpecs);
  var builtNodes = [];

  for (var resourceId in resourceNodes) {
    var resourceNode = resourceNodes[resourceId];

    if (!resourceNode.resource.parentId) {
      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs);
    }
  }

  return builtNodes;
}

function buildResourceNodes(resourceStore, orderSpecs) {
  var nodeHash = {};

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];
    nodeHash[resourceId] = {
      resource: resource,
      resourceFields: buildResourceFields(resource),
      children: []
    };
  }

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.parentId) {
      var parentNode = nodeHash[resource.parentId];

      if (parentNode) {
        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs);
      }
    }
  }

  return nodeHash;
}

function insertResourceNode(resourceNode, nodes, groupSpecs, depth, maxDepth, orderSpecs) {
  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {
    var groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0]);
    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs);
  } else {
    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs);
  }
}

function ensureGroupNodes(resourceNode, nodes, groupSpec) {
  var groupValue = resourceNode.resourceFields[groupSpec.field];
  var groupNode;
  var newGroupIndex; // find an existing group that matches, or determine the position for a new group

  if (groupSpec.order) {
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group) {
        var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["flexibleCompare"])(groupValue, node.group.value) * groupSpec.order;

        if (cmp === 0) {
          groupNode = node;
          break;
        } else if (cmp < 0) {
          break;
        }
      }
    }
  } else {
    // the groups are unordered
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group && groupValue === node.group.value) {
        groupNode = node;
        break;
      }
    }
  }

  if (!groupNode) {
    groupNode = {
      group: {
        value: groupValue,
        spec: groupSpec
      },
      children: []
    };
    nodes.splice(newGroupIndex, 0, groupNode);
  }

  return groupNode;
}

function insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs) {
  var i;

  for (i = 0; i < siblings.length; i++) {
    var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareByFieldSpecs"])(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs);

    if (cmp > 0) {
      // went 1 past. insert at i
      break;
    }
  }

  siblings.splice(i, 0, resourceNode);
}

function buildResourceFields(resource) {
  var obj = __assign({}, resource.extendedProps, resource.ui, resource);

  delete obj.ui;
  delete obj.extendedProps;
  return obj;
}

function isGroupsEqual(group0, group1) {
  return group0.spec === group1.spec && group0.value === group1.value;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  reducers: [resourcesReducers],
  eventDefParsers: [parseEventDef],
  isDraggableTransformers: [transformIsDraggable],
  eventDragMutationMassagers: [massageEventDragMutation],
  eventDefMutationAppliers: [applyEventDefMutation],
  dateSelectionTransformers: [transformDateSelectionJoin],
  datePointTransforms: [transformDatePoint],
  dateSpanTransforms: [transformDateSpan],
  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],
  isPropsValid: isPropsValidWithResources,
  externalDefTransforms: [transformExternalDef],
  eventResizeJoinTransforms: [transformEventResizeJoin],
  viewContainerModifiers: [injectLicenseWarning],
  eventDropTransformers: [transformEventDrop],
  optionChangeHandlers: optionChangeHandlers
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-timeline/main.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-timeline/main.esm.js ***!
  \******************************************************************/
/*! exports provided: default, ResourceTimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceTimelineView", function() { return ResourceTimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/timeline */ "./node_modules/@fullcalendar/timeline/main.esm.js");
/* harmony import */ var _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/resource-common */ "./node_modules/@fullcalendar/resource-common/main.esm.js");
/*!
FullCalendar Resource Timeline Plugin v4.4.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var Row =
/** @class */
function (_super) {
  __extends(Row, _super);

  function Row(spreadsheetParent, spreadsheetNextSibling, timeAxisParent, timeAxisNextSibling) {
    var _this = _super.call(this) || this;

    _this.isSizeDirty = false;
    spreadsheetParent.insertBefore(_this.spreadsheetTr = document.createElement('tr'), spreadsheetNextSibling);
    timeAxisParent.insertBefore(_this.timeAxisTr = document.createElement('tr'), timeAxisNextSibling);
    return _this;
  }

  Row.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.spreadsheetTr);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.timeAxisTr);

    _super.prototype.destroy.call(this);
  };

  Row.prototype.updateSize = function (isResize) {
    this.isSizeDirty = false;
  };

  return Row;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

function updateExpanderIcon(el, isExpanded) {
  var classList = el.classList;

  if (isExpanded) {
    classList.remove('fc-icon-plus-square');
    classList.add('fc-icon-minus-square');
  } else {
    classList.remove('fc-icon-minus-square');
    classList.add('fc-icon-plus-square');
  }
}

function clearExpanderIcon(el) {
  var classList = el.classList;
  classList.remove('fc-icon-minus-square');
  classList.remove('fc-icon-plus-square');
}

function updateTrResourceId(tr, resourceId) {
  tr.setAttribute('data-resource-id', resourceId);
}

var GroupRow =
/** @class */
function (_super) {
  __extends(GroupRow, _super);

  function GroupRow() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderCells, _this.unrenderCells);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderCells]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.context.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    return _this;
  }

  GroupRow.prototype.render = function (props) {
    this._renderCells(props.group, props.spreadsheetColCnt);

    this._updateExpanderIcon(props.isExpanded);

    this.isSizeDirty = true;
  };

  GroupRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderCells.unrender(); // should unrender everything else

  };

  GroupRow.prototype.renderCells = function (group, spreadsheetColCnt) {
    var spreadsheetContentEl = this.renderSpreadsheetContent(group);
    this.spreadsheetTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider',
      colSpan: spreadsheetColCnt // span across all columns

    }, this.spreadsheetHeightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, spreadsheetContentEl)) // needed by setTrInnerHeight
    );
    this.expanderIconEl = spreadsheetContentEl.querySelector('.fc-icon');
    this.expanderIconEl.parentElement.addEventListener('click', this.onExpanderClick); // insert a single cell, with a single empty <div>.
    // there will be no content

    this.timeAxisTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider'
    }, this.timeAxisHeightEl = document.createElement('div')));
  };

  GroupRow.prototype.unrenderCells = function () {
    this.spreadsheetTr.innerHTML = '';
    this.timeAxisTr.innerHTML = '';
  };
  /*
  Renders the content wrapper element that will be inserted into this row's TD cell.
  */


  GroupRow.prototype.renderSpreadsheetContent = function (group) {
    var text = this.renderCellText(group);
    var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + '<span class="fc-expander">' + '<span class="fc-icon"></span>' + '</span>' + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');
    var filter = group.spec.render;

    if (typeof filter === 'function') {
      contentEl = filter(contentEl, group.value) || contentEl;
    }

    return contentEl;
  };

  GroupRow.prototype.renderCellText = function (group) {
    var text = group.value || ''; // might be null/undefined if an ad-hoc grouping

    var filter = group.spec.text;

    if (typeof filter === 'function') {
      text = filter(text) || text;
    }

    return text;
  };

  GroupRow.prototype.getHeightEls = function () {
    return [this.spreadsheetHeightEl, this.timeAxisHeightEl];
  };

  GroupRow.prototype.updateExpanderIcon = function (isExpanded) {
    updateExpanderIcon(this.expanderIconEl, isExpanded);
  };

  return GroupRow;
}(Row);

GroupRow.addEqualityFuncs({
  group: _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["isGroupsEqual"] // HACK for ResourceTimelineView::renderRows

});

var SpreadsheetRow =
/** @class */
function (_super) {
  __extends(SpreadsheetRow, _super);

  function SpreadsheetRow(tr) {
    var _this = _super.call(this) || this;

    _this._renderRow = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderRow, _this.unrenderRow);
    _this._updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId, null, [_this._renderRow]);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderRow]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.context.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    _this.tr = tr;
    return _this;
  }

  SpreadsheetRow.prototype.render = function (props) {
    this._renderRow(props.resource, props.rowSpans, props.depth, props.colSpecs);

    this._updateTrResourceId(this.tr, props.resource.id); // TODO: only use public ID?


    this._updateExpanderIcon(props.hasChildren, props.isExpanded);
  };

  SpreadsheetRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderRow.unrender(); // should unrender everything else

  };

  SpreadsheetRow.prototype.renderRow = function (resource, rowSpans, depth, colSpecs) {
    var _a = this.context,
        calendar = _a.calendar,
        view = _a.view,
        theme = _a.theme;
    var tr = this.tr;
    var resourceFields = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceFields"])(resource); // slightly inefficient. already done up the call stack

    var mainTd;

    for (var i = 0; i < colSpecs.length; i++) {
      var colSpec = colSpecs[i];
      var rowSpan = rowSpans[i];

      if (rowSpan === 0) {
        // not responsible for group-based rows. VRowGroup is
        continue;
      } else if (rowSpan == null) {
        rowSpan = 1;
      }

      var text = void 0;

      if (colSpec.field) {
        text = resourceFields[colSpec.field];
      } else {
        text = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(colSpec.text, calendar)(resource);
      }

      var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + (colSpec.isMain ? renderIconHtml(depth) : '') + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');

      if (typeof colSpec.render === 'function') {
        // a filter function for the element
        contentEl = colSpec.render(new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource), contentEl) || contentEl;
      }

      if (rowSpan > 1) {
        contentEl.classList.add('fc-sticky');
      }

      var td = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
        className: theme.getClass('widgetContent'),
        rowspan: rowSpan
      }, contentEl); // the first cell of the row needs to have an inner div for setTrInnerHeight

      if (colSpec.isMain) {
        td.appendChild(this.heightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, td.childNodes) // inner wrap
        );
        mainTd = td;
      }

      tr.appendChild(td);
    }

    this.expanderIconEl = tr.querySelector('.fc-expander-space .fc-icon'); // wait until very end

    calendar.publiclyTrigger('resourceRender', [{
      resource: new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource),
      el: mainTd,
      view: view
    }]);
  };

  SpreadsheetRow.prototype.unrenderRow = function () {
    this.tr.innerHTML = '';
  };

  SpreadsheetRow.prototype.updateExpanderIcon = function (hasChildren, isExpanded) {
    var expanderIconEl = this.expanderIconEl;
    var expanderEl = expanderIconEl.parentElement;

    if (expanderIconEl && expanderEl // why would this be null?? was the case in IE11
    ) {
        if (hasChildren) {
          expanderEl.addEventListener('click', this.onExpanderClick);
          expanderEl.classList.add('fc-expander');
          updateExpanderIcon(expanderIconEl, isExpanded);
        } else {
          expanderEl.removeEventListener('click', this.onExpanderClick);
          expanderEl.classList.remove('fc-expander');
          clearExpanderIcon(expanderIconEl);
        }
      }
  };

  return SpreadsheetRow;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);
/*
Renders the HTML responsible for the subrow expander area,
as well as the space before it (used to align expanders of similar depths)
*/


function renderIconHtml(depth) {
  var html = '';

  for (var i = 0; i < depth; i++) {
    html += '<span class="fc-icon"></span>';
  }

  html += '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>';
  return html;
}

var ResourceRow =
/** @class */
function (_super) {
  __extends(ResourceRow, _super);

  function ResourceRow(a, b, c, d, timeAxis) {
    var _this = _super.call(this, a, b, c, d) || this;

    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId);
    _this.timeAxis = timeAxis;
    return _this;
  }

  ResourceRow.prototype.render = function (props, context) {
    this.renderSkeleton(context); // spreadsheetRow handles calling updateTrResourceId for spreadsheetTr

    this.spreadsheetRow.receiveProps({
      colSpecs: props.colSpecs,
      id: props.id,
      rowSpans: props.rowSpans,
      depth: props.depth,
      isExpanded: props.isExpanded,
      hasChildren: props.hasChildren,
      resource: props.resource
    }, context);
    this.updateTrResourceId(this.timeAxisTr, props.resource.id);
    this.lane.receiveProps({
      dateProfile: props.dateProfile,
      nextDayThreshold: props.nextDayThreshold,
      businessHours: props.businessHours,
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    }, context);
    this.isSizeDirty = true;
  };

  ResourceRow.prototype.destroy = function () {
    this.renderSkeleton.unrender();

    _super.prototype.destroy.call(this);
  };

  ResourceRow.prototype._renderSkeleton = function (context) {
    this.timeAxisTr.appendChild(this.cellEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: context.theme.getClass('widgetContent')
    }, this.innerContainerEl = document.createElement('div')));
    this.spreadsheetRow = new SpreadsheetRow(this.spreadsheetTr);
    this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](this.innerContainerEl, this.innerContainerEl, this.timeAxis);
  };

  ResourceRow.prototype._unrenderSkeleton = function () {
    this.spreadsheetRow.destroy();
    this.lane.destroy();
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.cellEl);
  };

  ResourceRow.prototype.updateSize = function (isResize) {
    _super.prototype.updateSize.call(this, isResize);

    this.lane.updateSize(isResize);
  };

  ResourceRow.prototype.getHeightEls = function () {
    return [this.spreadsheetRow.heightEl, this.innerContainerEl];
  };

  return ResourceRow;
}(Row);

ResourceRow.addEqualityFuncs({
  rowSpans: _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isArraysEqual"] // HACK for isSizeDirty, ResourceTimelineView::renderRows

});
var COL_MIN_WIDTH = 30;

var SpreadsheetHeader =
/** @class */
function (_super) {
  __extends(SpreadsheetHeader, _super);

  function SpreadsheetHeader(parentEl) {
    var _this = _super.call(this) || this;

    _this.resizables = [];
    _this.colWidths = [];
    _this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.parentEl = parentEl;
    return _this;
  }

  SpreadsheetHeader.prototype.render = function (props, context) {
    this.renderSkeleton(context);
    var theme = context.theme;
    var colSpecs = props.colSpecs;
    var html = '<colgroup>' + props.colTags + '</colgroup>' + '<tbody>';

    if (props.superHeaderText) {
      html += '<tr class="fc-super">' + '<th class="' + theme.getClass('widgetHeader') + '" colspan="' + colSpecs.length + '">' + '<div class="fc-cell-content">' + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(props.superHeaderText) + '</span>' + '</div>' + '</th>' + '</tr>';
    }

    html += '<tr>';

    for (var i = 0; i < colSpecs.length; i++) {
      var o = colSpecs[i];
      var isLast = i === colSpecs.length - 1;
      html += "<th class=\"" + theme.getClass('widgetHeader') + "\">" + '<div>' + '<div class="fc-cell-content">' + (o.isMain ? '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>' : '') + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(o.labelText || '') + // what about normalizing this value ahead of time?
      '</span>' + '</div>' + (!isLast ? '<div class="fc-col-resizer"></div>' : '') + '</div>' + '</th>';
    }

    html += '</tr>';
    html += '</tbody>';
    this.tableEl.innerHTML = html;
    this.thEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('th'));
    this.colEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('col'));
    this.resizerEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('.fc-col-resizer'));
    this.initColResizing();
  };

  SpreadsheetHeader.prototype.destroy = function () {
    for (var _i = 0, _a = this.resizables; _i < _a.length; _i++) {
      var resizable = _a[_i];
      resizable.destroy();
    }

    this.renderSkeleton.unrender();

    _super.prototype.destroy.call(this);
  };

  SpreadsheetHeader.prototype._renderSkeleton = function (context) {
    this.parentEl.appendChild(this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: context.theme.getClass('tableGrid')
    }));
  };

  SpreadsheetHeader.prototype._unrenderSkeleton = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);
  };

  SpreadsheetHeader.prototype.initColResizing = function () {
    var _this = this;

    var _a = this.context,
        calendar = _a.calendar,
        isRtl = _a.isRtl;
    var ElementDraggingImpl = calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resizables = this.resizerEls.map(function (handleEl, colIndex) {
        var dragging = new ElementDraggingImpl(handleEl);
        var startWidth;
        dragging.emitter.on('dragstart', function () {
          startWidth = _this.colWidths[colIndex];

          if (typeof startWidth !== 'number') {
            startWidth = _this.thEls[colIndex].getBoundingClientRect().width;
          }
        });
        dragging.emitter.on('dragmove', function (pev) {
          _this.colWidths[colIndex] = Math.max(startWidth + pev.deltaX * (isRtl ? -1 : 1), COL_MIN_WIDTH);

          _this.emitter.trigger('colwidthchange', _this.colWidths);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  return SpreadsheetHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var Spreadsheet =
/** @class */
function (_super) {
  __extends(Spreadsheet, _super);

  function Spreadsheet(headParentEl, bodyParentEl) {
    var _this = _super.call(this) || this;

    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderCells, _this._unrenderCells, [_this.renderSkeleton]);
    _this.layout = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["HeaderBodyLayout"](headParentEl, bodyParentEl, 'clipped-scroll');
    return _this;
  }

  Spreadsheet.prototype.render = function (props, context) {
    this.renderSkeleton(context);
    this.renderCells(props.superHeaderText, props.colSpecs);
  };

  Spreadsheet.prototype.destroy = function () {
    this.renderCells.unrender();
    this.renderSkeleton.unrender();
    this.layout.destroy();

    _super.prototype.destroy.call(this);
  };

  Spreadsheet.prototype._renderSkeleton = function (context) {
    var _this = this;

    var bodyEnhancedScroller = this.layout.bodyScroller.enhancedScroll;
    bodyEnhancedScroller.canvas.contentEl.appendChild(this.bodyContainerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table>' + '<colgroup />' + '<tbody />' + '</table>'));
    this.bodyColGroup = this.bodyContainerEl.querySelector('colgroup');
    this.bodyTbody = this.bodyContainerEl.querySelector('tbody');
    var headerEnhancedScroller = this.layout.headerScroller.enhancedScroll;
    this.header = new SpreadsheetHeader(headerEnhancedScroller.canvas.contentEl);
    this.header.emitter.on('colwidthchange', function (colWidths) {
      _this.applyColWidths(colWidths);
    });
  };

  Spreadsheet.prototype._unrenderSkeleton = function () {
    this.header.destroy();
  };

  Spreadsheet.prototype._renderCells = function (superHeaderText, colSpecs) {
    var colTags = this.renderColTags(colSpecs);
    this.header.receiveProps({
      superHeaderText: superHeaderText,
      colSpecs: colSpecs,
      colTags: colTags
    }, this.context);
    this.bodyColGroup.innerHTML = colTags;
    this.bodyColEls = Array.prototype.slice.call(this.bodyColGroup.querySelectorAll('col'));
    this.applyColWidths(colSpecs.map(function (colSpec) {
      return colSpec.width;
    }));
  };

  Spreadsheet.prototype._unrenderCells = function () {
    this.bodyColGroup.innerHTML = '';
  };

  Spreadsheet.prototype.renderColTags = function (colSpecs) {
    var html = '';

    for (var _i = 0, colSpecs_1 = colSpecs; _i < colSpecs_1.length; _i++) {
      var o = colSpecs_1[_i];

      if (o.isMain) {
        html += '<col class="fc-main-col"/>';
      } else {
        html += '<col/>';
      }
    }

    return html;
  };

  Spreadsheet.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.layout.setHeight(totalHeight, isAuto);
  };

  Spreadsheet.prototype.applyColWidths = function (colWidths) {
    var _this = this;

    colWidths.forEach(function (colWidth, colIndex) {
      var headEl = _this.header.colEls[colIndex]; // bad to access child

      var bodyEl = _this.bodyColEls[colIndex];
      var styleVal;

      if (typeof colWidth === 'number') {
        styleVal = colWidth + 'px';
      } else if (typeof colWidth == null) {
        styleVal = '';
      }

      headEl.style.width = bodyEl.style.width = styleVal;
    });
  };

  return Spreadsheet;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars

var ResourceTimelineView =
/** @class */
function (_super) {
  __extends(ResourceTimelineView, _super);

  function ResourceTimelineView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.isStickyScrollDirty = false;
    _this.rowNodes = [];
    _this.rowComponents = [];
    _this.rowComponentsById = {};
    _this.resourceAreaWidthDraggings = [];
    _this.splitter = new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceSplitter"](); // doesn't let it do businessHours tho

    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.hasResourceBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasResourceBusinessHours);
    _this.buildRowNodes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildRowNodes"]);
    _this.hasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasNesting);
    _this.updateHasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._updateHasNesting);
    _this.startInteractive = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._startInteractive, _this._stopInteractive);
    return _this;
  }

  ResourceTimelineView.prototype._startInteractive = function (timeAxisEl) {
    this.context.calendar.registerInteractiveComponent(this, {
      el: timeAxisEl
    });
  };

  ResourceTimelineView.prototype._stopInteractive = function () {
    this.context.calendar.unregisterInteractiveComponent(this);
  };

  ResourceTimelineView.prototype.render = function (props, context) {
    _super.prototype.render.call(this, props, context);

    this.renderSkeleton(context);
    var splitProps = this.splitter.splitProps(props);
    var hasResourceBusinessHours = this.hasResourceBusinessHours(props.resourceStore);
    this.spreadsheet.receiveProps({
      superHeaderText: this.superHeaderText,
      colSpecs: this.colSpecs
    }, context);
    this.timeAxis.receiveProps({
      dateProfileGenerator: props.dateProfileGenerator,
      dateProfile: props.dateProfile
    }, context);
    this.startInteractive(this.timeAxis.slats.el); // for all-resource bg events / selections / business-hours

    this.lane.receiveProps(__assign({}, splitProps[''], {
      dateProfile: props.dateProfile,
      nextDayThreshold: context.nextDayThreshold,
      businessHours: hasResourceBusinessHours ? null : props.businessHours
    }), context);
    var newRowNodes = this.buildRowNodes(props.resourceStore, this.groupSpecs, this.orderSpecs, this.isVGrouping, props.resourceEntityExpansions, context.options.resourcesInitiallyExpanded);
    this.updateHasNesting(this.hasNesting(newRowNodes));
    this.diffRows(newRowNodes);
    this.updateRowProps(props.dateProfile, hasResourceBusinessHours ? props.businessHours : null, // CONFUSING, comment
    splitProps);
    this.startNowIndicator(props.dateProfile, props.dateProfileGenerator);
  };

  ResourceTimelineView.prototype._renderSkeleton = function (context) {
    var options = context.options,
        calendar = context.calendar;
    var allColSpecs = options.resourceColumns || [];
    var labelText = options.resourceLabelText; // TODO: view.override

    var defaultLabelText = 'Resources'; // TODO: view.defaults

    var superHeaderText = null;

    if (!allColSpecs.length) {
      allColSpecs.push({
        labelText: labelText || defaultLabelText,
        text: Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(options.resourceText, calendar)
      });
    } else {
      superHeaderText = labelText;
    }

    var plainColSpecs = [];
    var groupColSpecs = [];
    var groupSpecs = [];
    var isVGrouping = false;
    var isHGrouping = false;

    for (var _i = 0, allColSpecs_1 = allColSpecs; _i < allColSpecs_1.length; _i++) {
      var colSpec = allColSpecs_1[_i];

      if (colSpec.group) {
        groupColSpecs.push(colSpec);
      } else {
        plainColSpecs.push(colSpec);
      }
    }

    plainColSpecs[0].isMain = true;

    if (groupColSpecs.length) {
      groupSpecs = groupColSpecs;
      isVGrouping = true;
    } else {
      var hGroupField = options.resourceGroupField;

      if (hGroupField) {
        isHGrouping = true;
        groupSpecs.push({
          field: hGroupField,
          text: options.resourceGroupText,
          render: options.resourceGroupRender
        });
      }
    }

    var allOrderSpecs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseFieldSpecs"])(options.resourceOrder);
    var plainOrderSpecs = [];

    for (var _a = 0, allOrderSpecs_1 = allOrderSpecs; _a < allOrderSpecs_1.length; _a++) {
      var orderSpec = allOrderSpecs_1[_a];
      var isGroup = false;

      for (var _b = 0, groupSpecs_1 = groupSpecs; _b < groupSpecs_1.length; _b++) {
        var groupSpec = groupSpecs_1[_b];

        if (groupSpec.field === orderSpec.field) {
          groupSpec.order = orderSpec.order; // -1, 0, 1

          isGroup = true;
          break;
        }
      }

      if (!isGroup) {
        plainOrderSpecs.push(orderSpec);
      }
    }

    this.superHeaderText = superHeaderText;
    this.isVGrouping = isVGrouping;
    this.isHGrouping = isHGrouping;
    this.groupSpecs = groupSpecs;
    this.colSpecs = groupColSpecs.concat(plainColSpecs);
    this.orderSpecs = plainOrderSpecs; // START RENDERING...

    this.el.classList.add('fc-timeline');

    if (options.eventOverlap === false) {
      this.el.classList.add('fc-no-overlap');
    }

    this.el.innerHTML = this.renderSkeletonHtml();
    this.resourceAreaHeadEl = this.el.querySelector('thead .fc-resource-area');
    this.setResourceAreaWidth(options.resourceAreaWidth);
    this.initResourceAreaWidthDragging();
    this.miscHeight = this.el.getBoundingClientRect().height;
    this.spreadsheet = new Spreadsheet(this.resourceAreaHeadEl, this.el.querySelector('tbody .fc-resource-area'));
    this.timeAxis = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimeAxis"](this.el.querySelector('thead .fc-time-area'), this.el.querySelector('tbody .fc-time-area'));
    var timeAxisRowContainer = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table><tbody /></table>');
    this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl.appendChild(timeAxisRowContainer);
    this.timeAxisTbody = timeAxisRowContainer.querySelector('tbody');
    this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](null, this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, this.timeAxis);
    this.bodyScrollJoiner = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["ScrollJoiner"]('vertical', [this.spreadsheet.layout.bodyScroller, this.timeAxis.layout.bodyScroller]); // after scrolljoiner

    this.spreadsheetBodyStickyScroller = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["StickyScroller"](this.spreadsheet.layout.bodyScroller.enhancedScroll, context.isRtl, true // isVertical
    );
  };

  ResourceTimelineView.prototype._unrenderSkeleton = function (context) {
    this.startInteractive.unrender(); // "unrender" bad name

    this.destroyRows(); // wierd to call this here

    this.spreadsheet.destroy();
    this.timeAxis.destroy();
    this.lane.destroy();
    this.spreadsheetBodyStickyScroller.destroy();
    this.el.classList.remove('fc-timeline');
    this.el.classList.remove('fc-no-overlap');
  };

  ResourceTimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.context.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetContent') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  ResourceTimelineView.prototype._updateHasNesting = function (isNesting) {
    var classList = this.el.classList;

    if (isNesting) {
      classList.remove('fc-flat');
    } else {
      classList.add('fc-flat');
    }
  };

  ResourceTimelineView.prototype.diffRows = function (newNodes) {
    var oldNodes = this.rowNodes;
    var oldLen = oldNodes.length;
    var oldIndexHash = {}; // id -> index

    var oldI = 0;
    var newI = 0;

    for (oldI = 0; oldI < oldLen; oldI++) {
      oldIndexHash[oldNodes[oldI].id] = oldI;
    } // iterate new nodes


    for (oldI = 0, newI = 0; newI < newNodes.length; newI++) {
      var newNode = newNodes[newI];
      var oldIFound = oldIndexHash[newNode.id];

      if (oldIFound != null && oldIFound >= oldI) {
        this.removeRows(newI, oldIFound - oldI, oldNodes); // won't do anything if same index

        oldI = oldIFound + 1;
      } else {
        this.addRow(newI, newNode);
      }
    } // old rows that weren't found need to be removed


    this.removeRows(newI, oldLen - oldI, oldNodes); // won't do anything if same index

    this.rowNodes = newNodes;
  };
  /*
  rowComponents is the in-progress result
  */


  ResourceTimelineView.prototype.addRow = function (index, rowNode) {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowComponentsById = _a.rowComponentsById;

    var nextComponent = rowComponents[index];
    var newComponent = this.buildChildComponent(rowNode, this.spreadsheet.bodyTbody, nextComponent ? nextComponent.spreadsheetTr : null, this.timeAxisTbody, nextComponent ? nextComponent.timeAxisTr : null);
    rowComponents.splice(index, 0, newComponent);
    rowComponentsById[rowNode.id] = newComponent;
  };

  ResourceTimelineView.prototype.removeRows = function (startIndex, len, oldRowNodes) {
    if (len) {
      var _a = this,
          rowComponents = _a.rowComponents,
          rowComponentsById = _a.rowComponentsById;

      for (var i = 0; i < len; i++) {
        var rowComponent = rowComponents[startIndex + i];
        rowComponent.destroy();
        delete rowComponentsById[oldRowNodes[i].id];
      }

      rowComponents.splice(startIndex, len);
    }
  };

  ResourceTimelineView.prototype.buildChildComponent = function (node, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext) {
    if (node.group) {
      return new GroupRow(spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext);
    } else if (node.resource) {
      return new ResourceRow(spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext, this.timeAxis);
    }
  };

  ResourceTimelineView.prototype.updateRowProps = function (dateProfile, fallbackBusinessHours, splitProps) {
    var _a = this,
        rowNodes = _a.rowNodes,
        rowComponents = _a.rowComponents,
        context = _a.context;

    for (var i = 0; i < rowNodes.length; i++) {
      var rowNode = rowNodes[i];
      var rowComponent = rowComponents[i];

      if (rowNode.group) {
        rowComponent.receiveProps({
          spreadsheetColCnt: this.colSpecs.length,
          id: rowNode.id,
          isExpanded: rowNode.isExpanded,
          group: rowNode.group
        }, context);
      } else {
        var resource = rowNode.resource;
        rowComponent.receiveProps(__assign({}, splitProps[resource.id], {
          dateProfile: dateProfile,
          nextDayThreshold: context.nextDayThreshold,
          businessHours: resource.businessHours || fallbackBusinessHours,
          colSpecs: this.colSpecs,
          id: rowNode.id,
          rowSpans: rowNode.rowSpans,
          depth: rowNode.depth,
          isExpanded: rowNode.isExpanded,
          hasChildren: rowNode.hasChildren,
          resource: rowNode.resource
        }), context);
      }
    }
  };

  ResourceTimelineView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    // FYI: this ordering is really important
    var calendar = this.context.calendar;
    var isBaseSizing = isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated;

    if (isBaseSizing) {
      this.syncHeadHeights();
    } // TODO: don't always call these (but guarding behind isBaseSizing was unreliable)


    this.timeAxis.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
    this.spreadsheet.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
    var rowSizingCnt = this.updateRowSizes(isResize);
    this.lane.updateSize(isResize); // is efficient. uses flags

    if (isBaseSizing || rowSizingCnt) {
      this.bodyScrollJoiner.update();
      this.timeAxis.layout.scrollJoiner.update(); // hack

      this.rowPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.timeAxis.slats.el, this.rowComponents.map(function (rowComponent) {
        return rowComponent.timeAxisTr;
      }), false, // isHorizontal
      true // isVertical
      );
      this.rowPositions.build();
      this.isStickyScrollDirty = true;
    }
  };

  ResourceTimelineView.prototype.syncHeadHeights = function () {
    var spreadsheetHeadEl = this.spreadsheet.header.tableEl;
    var timeAxisHeadEl = this.timeAxis.header.tableEl;
    spreadsheetHeadEl.style.height = '';
    timeAxisHeadEl.style.height = '';
    var max = Math.max(spreadsheetHeadEl.getBoundingClientRect().height, timeAxisHeadEl.getBoundingClientRect().height);
    spreadsheetHeadEl.style.height = timeAxisHeadEl.style.height = max + 'px';
  };

  ResourceTimelineView.prototype.updateRowSizes = function (isResize) {
    var dirtyRowComponents = this.rowComponents;

    if (!isResize) {
      dirtyRowComponents = dirtyRowComponents.filter(function (rowComponent) {
        return rowComponent.isSizeDirty;
      });
    }

    var elArrays = dirtyRowComponents.map(function (rowComponent) {
      return rowComponent.getHeightEls();
    }); // reset to natural heights

    for (var _i = 0, elArrays_1 = elArrays; _i < elArrays_1.length; _i++) {
      var elArray = elArrays_1[_i];

      for (var _a = 0, elArray_1 = elArray; _a < elArray_1.length; _a++) {
        var el = elArray_1[_a];
        el.style.height = '';
      }
    } // let rows update their contents' heights


    for (var _b = 0, dirtyRowComponents_1 = dirtyRowComponents; _b < dirtyRowComponents_1.length; _b++) {
      var rowComponent = dirtyRowComponents_1[_b];
      rowComponent.updateSize(isResize); // will reset isSizeDirty
    }

    var maxHeights = elArrays.map(function (elArray) {
      var maxHeight = null;

      for (var _i = 0, elArray_2 = elArray; _i < elArray_2.length; _i++) {
        var el = elArray_2[_i];
        var height = el.getBoundingClientRect().height;

        if (maxHeight === null || height > maxHeight) {
          maxHeight = height;
        }
      }

      return maxHeight;
    });

    for (var i = 0; i < elArrays.length; i++) {
      for (var _c = 0, _d = elArrays[i]; _c < _d.length; _c++) {
        var el = _d[_c];
        el.style.height = maxHeights[i] + 'px';
      }
    }

    return dirtyRowComponents.length;
  };

  ResourceTimelineView.prototype.destroyRows = function () {
    for (var _i = 0, _a = this.rowComponents; _i < _a.length; _i++) {
      var rowComponent = _a[_i];
      rowComponent.destroy();
    }

    this.rowNodes = [];
    this.rowComponents = [];
  };

  ResourceTimelineView.prototype.destroy = function () {
    for (var _i = 0, _a = this.resourceAreaWidthDraggings; _i < _a.length; _i++) {
      var resourceAreaWidthDragging = _a[_i];
      resourceAreaWidthDragging.destroy();
    }

    this.renderSkeleton.unrender(); // will call destroyRows

    _super.prototype.destroy.call(this);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile, dateProfileGenerator);
  };

  ResourceTimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  ResourceTimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scrolling
  // ------------------------------------------------------------------------------------------------------------------
  // this is useful for scrolling prev/next dates while resource is scrolled down


  ResourceTimelineView.prototype.queryScroll = function () {
    var scroll = _super.prototype.queryScroll.call(this);

    if (this.props.resourceStore) {
      __assign(scroll, this.queryResourceScroll());
    }

    return scroll;
  };

  ResourceTimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize);

    if (this.props.resourceStore) {
      this.applyResourceScroll(scroll);
    } // avoid updating stickyscroll too often


    if (isResize || this.isStickyScrollDirty) {
      this.isStickyScrollDirty = false;
      this.spreadsheetBodyStickyScroller.updateSize();
      this.timeAxis.updateStickyScrollers();
    }
  };

  ResourceTimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  ResourceTimelineView.prototype.queryDateScroll = function () {
    return this.timeAxis.queryDateScroll();
  };

  ResourceTimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  ResourceTimelineView.prototype.queryResourceScroll = function () {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowNodes = _a.rowNodes;

    var scroll = {};
    var scrollerTop = this.timeAxis.layout.bodyScroller.el.getBoundingClientRect().top; // fixed position

    for (var i = 0; i < rowComponents.length; i++) {
      var rowComponent = rowComponents[i];
      var rowNode = rowNodes[i];
      var el = rowComponent.timeAxisTr;
      var elBottom = el.getBoundingClientRect().bottom; // fixed position

      if (elBottom > scrollerTop) {
        scroll.rowId = rowNode.id;
        scroll.bottom = elBottom - scrollerTop;
        break;
      }
    } // TODO: what about left scroll state for spreadsheet area?


    return scroll;
  };

  ResourceTimelineView.prototype.applyResourceScroll = function (scroll) {
    var rowId = scroll.forcedRowId || scroll.rowId;

    if (rowId) {
      var rowComponent = this.rowComponentsById[rowId];

      if (rowComponent) {
        var el = rowComponent.timeAxisTr;

        if (el) {
          var innerTop = this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.el.getBoundingClientRect().top;
          var rowRect = el.getBoundingClientRect();
          var scrollTop = (scroll.forcedRowId ? rowRect.top : // just use top edge
          rowRect.bottom - scroll.bottom) - // pixels from bottom edge
          innerTop;
          this.timeAxis.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
          this.spreadsheet.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
        }
      }
    }
  }; // TODO: scrollToResource
  // Hit System
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
    this.rowPositions.build();
  };

  ResourceTimelineView.prototype.queryHit = function (positionLeft, positionTop) {
    var rowPositions = this.rowPositions;
    var slats = this.timeAxis.slats;
    var rowIndex = rowPositions.topToIndex(positionTop);

    if (rowIndex != null) {
      var resource = this.rowNodes[rowIndex].resource;

      if (resource) {
        // not a group
        var slatHit = slats.positionToHit(positionLeft);

        if (slatHit) {
          return {
            component: this,
            dateSpan: {
              range: slatHit.dateSpan.range,
              allDay: slatHit.dateSpan.allDay,
              resourceId: resource.id
            },
            rect: {
              left: slatHit.left,
              right: slatHit.right,
              top: rowPositions.tops[rowIndex],
              bottom: rowPositions.bottoms[rowIndex]
            },
            dayEl: slatHit.dayEl,
            layer: 0
          };
        }
      }
    }
  }; // Resource Area
  // ------------------------------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.setResourceAreaWidth = function (widthVal) {
    this.resourceAreaWidth = widthVal;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.resourceAreaHeadEl, 'width', widthVal || '');
  };

  ResourceTimelineView.prototype.initResourceAreaWidthDragging = function () {
    var _this = this;

    var _a = this.context,
        calendar = _a.calendar,
        isRtl = _a.isRtl;
    var resourceAreaDividerEls = Array.prototype.slice.call(this.el.querySelectorAll('.fc-col-resizer'));
    var ElementDraggingImpl = calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resourceAreaWidthDraggings = resourceAreaDividerEls.map(function (el) {
        var dragging = new ElementDraggingImpl(el);
        var dragStartWidth;
        var viewWidth;
        dragging.emitter.on('dragstart', function () {
          dragStartWidth = _this.resourceAreaWidth;

          if (typeof dragStartWidth !== 'number') {
            dragStartWidth = _this.resourceAreaHeadEl.getBoundingClientRect().width;
          }

          viewWidth = _this.el.getBoundingClientRect().width;
        });
        dragging.emitter.on('dragmove', function (pev) {
          var newWidth = dragStartWidth + pev.deltaX * (isRtl ? -1 : 1);
          newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);
          newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);

          _this.setResourceAreaWidth(newWidth);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  ResourceTimelineView.needsResourceData = true; // for ResourceViewProps

  return ResourceTimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

function hasResourceBusinessHours(resourceStore) {
  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.businessHours) {
      return true;
    }
  }

  return false;
}

function hasNesting(nodes) {
  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var node = nodes_1[_i];

    if (node.group) {
      return true;
    } else if (node.resource) {
      if (node.hasChildren) {
        return true;
      }
    }
  }

  return false;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  deps: [_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["default"]],
  defaultView: 'resourceTimelineDay',
  views: {
    resourceTimeline: {
      class: ResourceTimelineView,
      resourceAreaWidth: '30%',
      resourcesInitiallyExpanded: true,
      eventResizableFromStart: true // TODO: not DRY with this same setting in the main timeline config

    },
    resourceTimelineDay: {
      type: 'resourceTimeline',
      duration: {
        days: 1
      }
    },
    resourceTimelineWeek: {
      type: 'resourceTimeline',
      duration: {
        weeks: 1
      }
    },
    resourceTimelineMonth: {
      type: 'resourceTimeline',
      duration: {
        months: 1
      }
    },
    resourceTimelineYear: {
      type: 'resourceTimeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/timeline/main.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/timeline/main.esm.js ***!
  \*********************************************************/
/*! exports provided: default, HeaderBodyLayout, ScrollJoiner, StickyScroller, TimeAxis, TimelineLane, TimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderBodyLayout", function() { return HeaderBodyLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollJoiner", function() { return ScrollJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StickyScroller", function() { return StickyScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeAxis", function() { return TimeAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineLane", function() { return TimelineLane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineView", function() { return TimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Timeline Plugin v4.4.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
/*
A rectangular area of content that lives within a Scroller.
Can have "gutters", areas of dead spacing around the perimeter.
Also very useful for forcing a width, which a Scroller cannot do alone.
Has a content area that lives above a background area.
*/


var ScrollerCanvas =
/** @class */
function () {
  function ScrollerCanvas() {
    this.gutters = {};
    this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div class=\"fc-scroller-canvas\"> <div class=\"fc-content\"></div> <div class=\"fc-bg\"></div> </div>");
    this.contentEl = this.el.querySelector('.fc-content');
    this.bgEl = this.el.querySelector('.fc-bg');
  }
  /*
  If falsy, resets all the gutters to 0
  */


  ScrollerCanvas.prototype.setGutters = function (gutters) {
    if (!gutters) {
      this.gutters = {};
    } else {
      __assign(this.gutters, gutters);
    }

    this.updateSize();
  };

  ScrollerCanvas.prototype.setWidth = function (width) {
    this.width = width;
    this.updateSize();
  };

  ScrollerCanvas.prototype.setMinWidth = function (minWidth) {
    this.minWidth = minWidth;
    this.updateSize();
  };

  ScrollerCanvas.prototype.clearWidth = function () {
    this.width = null;
    this.minWidth = null;
    this.updateSize();
  };

  ScrollerCanvas.prototype.updateSize = function () {
    var _a = this,
        gutters = _a.gutters,
        el = _a.el; // is border-box (width includes padding)


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-left', gutters.left);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-right', gutters.right);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-top', gutters.top);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-bottom', gutters.bottom);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      paddingLeft: gutters.left || '',
      paddingRight: gutters.right || '',
      paddingTop: gutters.top || '',
      paddingBottom: gutters.bottom || '',
      width: this.width != null ? this.width + (gutters.left || 0) + (gutters.right || 0) : '',
      minWidth: this.minWidth != null ? this.minWidth + (gutters.left || 0) + (gutters.right || 0) : ''
    });
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.bgEl, {
      left: gutters.left || '',
      right: gutters.right || '',
      top: gutters.top || '',
      bottom: gutters.bottom || ''
    });
  };

  return ScrollerCanvas;
}();

var EnhancedScroller =
/** @class */
function (_super) {
  __extends(EnhancedScroller, _super);

  function EnhancedScroller(overflowX, overflowY) {
    var _this = _super.call(this, overflowX, overflowY) || this; // Scroll Events
    // ----------------------------------------------------------------------------------------------


    _this.reportScroll = function () {
      if (!_this.isScrolling) {
        _this.reportScrollStart();
      }

      _this.trigger('scroll');

      _this.isMoving = true;

      _this.requestMovingEnd();
    };

    _this.reportScrollStart = function () {
      if (!_this.isScrolling) {
        _this.isScrolling = true;

        _this.trigger('scrollStart', _this.isTouching); // created in constructor

      }
    }; // Touch Events
    // ----------------------------------------------------------------------------------------------
    // will fire *before* the scroll event is fired


    _this.reportTouchStart = function () {
      _this.isTouching = true;
    };

    _this.reportTouchEnd = function () {
      if (_this.isTouching) {
        _this.isTouching = false; // if touch scrolling was re-enabled during a recent touch scroll
        // then unbind the handlers that are preventing it from happening.

        if (_this.isTouchScrollEnabled) {
          _this.unbindPreventTouchScroll(); // won't do anything if not bound

        } // if the user ended their touch, and the scroll area wasn't moving,
        // we consider this to be the end of the scroll.


        if (!_this.isMoving) {
          _this.reportScrollEnd(); // won't fire if already ended

        }
      }
    };

    _this.isScrolling = false;
    _this.isTouching = false;
    _this.isMoving = false;
    _this.isTouchScrollEnabled = true;
    _this.requestMovingEnd = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["debounce"])(_this.reportMovingEnd, 500);
    _this.canvas = new ScrollerCanvas();

    _this.el.appendChild(_this.canvas.el);

    _this.applyOverflow();

    _this.bindHandlers();

    return _this;
  }

  EnhancedScroller.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.unbindHandlers();
  }; // Touch scroll prevention
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.disableTouchScroll = function () {
    this.isTouchScrollEnabled = false;
    this.bindPreventTouchScroll(); // will be unbound in enableTouchScroll or reportTouchEnd
  };

  EnhancedScroller.prototype.enableTouchScroll = function () {
    this.isTouchScrollEnabled = true; // only immediately unbind if a touch event is NOT in progress.
    // otherwise, it will be handled by reportTouchEnd.

    if (!this.isTouching) {
      this.unbindPreventTouchScroll();
    }
  };

  EnhancedScroller.prototype.bindPreventTouchScroll = function () {
    if (!this.preventTouchScrollHandler) {
      this.el.addEventListener('touchmove', this.preventTouchScrollHandler = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventDefault"]);
    }
  };

  EnhancedScroller.prototype.unbindPreventTouchScroll = function () {
    if (this.preventTouchScrollHandler) {
      this.el.removeEventListener('touchmove', this.preventTouchScrollHandler);
      this.preventTouchScrollHandler = null;
    }
  }; // Handlers
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.bindHandlers = function () {
    this.el.addEventListener('scroll', this.reportScroll);
    this.el.addEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.addEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.unbindHandlers = function () {
    this.el.removeEventListener('scroll', this.reportScroll);
    this.el.removeEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.removeEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.reportMovingEnd = function () {
    this.isMoving = false; // only end the scroll if not currently touching.
    // if touching, the scrolling will end later, on touchend.

    if (!this.isTouching) {
      this.reportScrollEnd();
    }
  };

  EnhancedScroller.prototype.reportScrollEnd = function () {
    if (this.isScrolling) {
      this.trigger('scrollEnd');
      this.isScrolling = false;
    }
  }; // Horizontal Scroll Normalization
  // ----------------------------------------------------------------------------------------------
  // http://stackoverflow.com/questions/24276619/better-way-to-get-the-viewport-of-a-scrollable-div-in-rtl-mode/24394376#24394376
  // TODO: move all this to util functions

  /*
  If RTL, and scrolled to the left, returns NEGATIVE value (like Firefox)
  */


  EnhancedScroller.prototype.getScrollLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val + el.clientWidth - el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    return val;
  };
  /*
  Accepts a NEGATIVE value for when scrolled in RTL
  */


  EnhancedScroller.prototype.setScrollLeft = function (val) {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    el.scrollLeft = val;
  };
  /*
  Always returns the number of pixels scrolled from the leftmost position (even if RTL).
  Always positive.
  */


  EnhancedScroller.prototype.getScrollFromLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'negative':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val - el.clientWidth + el.scrollWidth;
          break;
      }
    }

    return val;
  };

  return EnhancedScroller;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]);

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"].mixInto(EnhancedScroller); // Horizontal Scroll System Detection
// ----------------------------------------------------------------------------------------------

var _rtlScrollSystem;

function getRtlScrollSystem() {
  return _rtlScrollSystem || (_rtlScrollSystem = detectRtlScrollSystem());
}

function detectRtlScrollSystem() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div style=\" position: absolute; top: -1000px; width: 1px; height: 1px; overflow: scroll; direction: rtl; font-size: 100px; \">A</div>");
  document.body.appendChild(el);
  var system;

  if (el.scrollLeft > 0) {
    system = 'positive';
  } else {
    el.scrollLeft = 1;

    if (el.scrollLeft > 0) {
      system = 'reverse';
    } else {
      system = 'negative';
    }
  }

  Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(el);
  return system;
}
/*
A Scroller, but with a wrapping div that allows "clipping" away of native scrollbars,
giving the appearance that there are no scrollbars.
*/


var ClippedScroller =
/** @class */
function () {
  /*
  Received overflows can be set to 'clipped', meaning scrollbars shouldn't be visible
  to the user, but the area should still scroll.
  */
  function ClippedScroller(overflowX, overflowY, parentEl) {
    this.isHScrollbarsClipped = false;
    this.isVScrollbarsClipped = false;

    if (overflowX === 'clipped-scroll') {
      overflowX = 'scroll';
      this.isHScrollbarsClipped = true;
    }

    if (overflowY === 'clipped-scroll') {
      overflowY = 'scroll';
      this.isVScrollbarsClipped = true;
    }

    this.enhancedScroll = new EnhancedScroller(overflowX, overflowY);
    parentEl.appendChild(this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-scroller-clip'
    }));
    this.el.appendChild(this.enhancedScroll.el);
  }

  ClippedScroller.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ClippedScroller.prototype.updateSize = function () {
    var enhancedScroll = this.enhancedScroll;
    var scrollEl = enhancedScroll.el;
    var edges = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEdges"])(scrollEl);
    var cssProps = {
      marginLeft: 0,
      marginRight: 0,
      marginTop: 0,
      marginBottom: 0
    }; // give the inner scrolling div negative margins so that its scrollbars
    // are nudged outside of the bounding box of the wrapper, which is overflow:hidden

    if (this.isVScrollbarsClipped) {
      cssProps.marginLeft = -edges.scrollbarLeft;
      cssProps.marginRight = -edges.scrollbarRight;
    }

    if (this.isHScrollbarsClipped) {
      cssProps.marginBottom = -edges.scrollbarBottom;
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(scrollEl, cssProps); // if we are attempting to hide the scrollbars offscreen, OSX/iOS will still
    // display the floating scrollbars. attach a className to force-hide them.

    if ((this.isHScrollbarsClipped || enhancedScroll.overflowX === 'hidden') && ( // should never show?
    this.isVScrollbarsClipped || enhancedScroll.overflowY === 'hidden') && // should never show?
    !( // doesn't have any scrollbar mass
    edges.scrollbarLeft || edges.scrollbarRight || edges.scrollbarBottom)) {
      scrollEl.classList.add('fc-no-scrollbars');
    } else {
      scrollEl.classList.remove('fc-no-scrollbars');
    }
  };

  ClippedScroller.prototype.setHeight = function (height) {
    this.enhancedScroll.setHeight(height);
  };
  /*
  Accounts for 'clipped' scrollbars
  */


  ClippedScroller.prototype.getScrollbarWidths = function () {
    var widths = this.enhancedScroll.getScrollbarWidths();

    if (this.isVScrollbarsClipped) {
      widths.left = 0;
      widths.right = 0;
    }

    if (this.isHScrollbarsClipped) {
      widths.bottom = 0;
    }

    return widths;
  };

  return ClippedScroller;
}();

var ScrollJoiner =
/** @class */
function () {
  function ScrollJoiner(axis, scrollers) {
    this.axis = axis;
    this.scrollers = scrollers;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var scroller = _a[_i];
      this.initScroller(scroller);
    }
  }

  ScrollJoiner.prototype.initScroller = function (scroller) {
    var _this = this;

    var enhancedScroll = scroller.enhancedScroll; // when the user scrolls via mousewheel, we know for sure the target
    // scroller should be the master. capture the various x-browser events that fire.

    var onScroll = function () {
      _this.assignMasterScroller(scroller);
    };

    'wheel mousewheel DomMouseScroll MozMousePixelScroll'.split(' ').forEach(function (evName) {
      enhancedScroll.el.addEventListener(evName, onScroll);
    });
    enhancedScroll.on('scrollStart', function () {
      if (!_this.masterScroller) {
        _this.assignMasterScroller(scroller);
      }
    }).on('scroll', function () {
      if (scroller === _this.masterScroller) {
        for (var _i = 0, _a = _this.scrollers; _i < _a.length; _i++) {
          var otherScroller = _a[_i];

          if (otherScroller !== scroller) {
            switch (_this.axis) {
              case 'horizontal':
                otherScroller.enhancedScroll.el.scrollLeft = enhancedScroll.el.scrollLeft;
                break;

              case 'vertical':
                otherScroller.enhancedScroll.setScrollTop(enhancedScroll.getScrollTop());
                break;
            }
          }
        }
      }
    }).on('scrollEnd', function () {
      if (scroller === _this.masterScroller) {
        _this.unassignMasterScroller();
      }
    });
  };

  ScrollJoiner.prototype.assignMasterScroller = function (scroller) {
    this.unassignMasterScroller();
    this.masterScroller = scroller;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var otherScroller = _a[_i];

      if (otherScroller !== scroller) {
        otherScroller.enhancedScroll.disableTouchScroll();
      }
    }
  };

  ScrollJoiner.prototype.unassignMasterScroller = function () {
    if (this.masterScroller) {
      for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
        var otherScroller = _a[_i];
        otherScroller.enhancedScroll.enableTouchScroll();
      }

      this.masterScroller = null;
    }
  };

  ScrollJoiner.prototype.update = function () {
    var allWidths = this.scrollers.map(function (scroller) {
      return scroller.getScrollbarWidths();
    });
    var maxLeft = 0;
    var maxRight = 0;
    var maxTop = 0;
    var maxBottom = 0;
    var widths;
    var i;

    for (var _i = 0, allWidths_1 = allWidths; _i < allWidths_1.length; _i++) {
      widths = allWidths_1[_i];
      maxLeft = Math.max(maxLeft, widths.left);
      maxRight = Math.max(maxRight, widths.right);
      maxTop = Math.max(maxTop, widths.top);
      maxBottom = Math.max(maxBottom, widths.bottom);
    }

    for (i = 0; i < this.scrollers.length; i++) {
      var scroller = this.scrollers[i];
      widths = allWidths[i];
      scroller.enhancedScroll.canvas.setGutters(this.axis === 'horizontal' ? {
        left: maxLeft - widths.left,
        right: maxRight - widths.right
      } : {
        top: maxTop - widths.top,
        bottom: maxBottom - widths.bottom
      });
    }
  };

  return ScrollJoiner;
}();

var HeaderBodyLayout =
/** @class */
function () {
  /*
  verticalScroll = 'auto' | 'clipped-scroll'
  */
  function HeaderBodyLayout(headerContainerEl, bodyContainerEl, verticalScroll) {
    this.headerScroller = new ClippedScroller('clipped-scroll', 'hidden', headerContainerEl);
    this.bodyScroller = new ClippedScroller('auto', verticalScroll, bodyContainerEl);
    this.scrollJoiner = new ScrollJoiner('horizontal', [this.headerScroller, this.bodyScroller]);
  }

  HeaderBodyLayout.prototype.destroy = function () {
    this.headerScroller.destroy();
    this.bodyScroller.destroy();
  };

  HeaderBodyLayout.prototype.setHeight = function (totalHeight, isAuto) {
    var bodyHeight;

    if (isAuto) {
      bodyHeight = 'auto';
    } else {
      bodyHeight = totalHeight - this.queryHeadHeight();
    }

    this.bodyScroller.setHeight(bodyHeight);
    this.headerScroller.updateSize(); // adjusts gutters and classNames

    this.bodyScroller.updateSize(); // adjusts gutters and classNames

    this.scrollJoiner.update();
  };

  HeaderBodyLayout.prototype.queryHeadHeight = function () {
    return this.headerScroller.enhancedScroll.canvas.contentEl.getBoundingClientRect().height;
  };

  return HeaderBodyLayout;
}();

var TimelineHeader =
/** @class */
function (_super) {
  __extends(TimelineHeader, _super);

  function TimelineHeader(parentEl) {
    var _this = _super.call(this) || this;

    _this.parentEl = parentEl;
    return _this;
  }

  TimelineHeader.prototype.firstContext = function (context) {
    this.parentEl.appendChild(this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: context.theme.getClass('tableGrid')
    }));
  };

  TimelineHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);

    _super.prototype.destroy.call(this);
  };

  TimelineHeader.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineHeader.prototype.renderDates = function (tDateProfile) {
    var _a = this.context,
        dateEnv = _a.dateEnv,
        theme = _a.theme;
    var cellRows = tDateProfile.cellRows;
    var lastRow = cellRows[cellRows.length - 1];
    var isChrono = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.labelInterval) > Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.slotDuration);
    var oneDay = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration);
    var html = '<colgroup>'; // needs to be a col for each body slat. header cells will have colspans

    for (var i = tDateProfile.slotCnt - 1; i >= 0; i--) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody>';

    for (var _i = 0, cellRows_1 = cellRows; _i < cellRows_1.length; _i++) {
      var rowCells = cellRows_1[_i];
      var isLast = rowCells === lastRow;
      html += '<tr' + (isChrono && isLast ? ' class="fc-chrono"' : '') + '>';

      for (var _b = 0, rowCells_1 = rowCells; _b < rowCells_1.length; _b++) {
        var cell = rowCells_1[_b];
        var headerCellClassNames = [theme.getClass('widgetHeader')];

        if (cell.isWeekStart) {
          headerCellClassNames.push('fc-em-cell');
        }

        if (oneDay) {
          headerCellClassNames = headerCellClassNames.concat(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(cell.date, this.props.dateProfile, this.context, true) // adds "today" class and other day-based classes
          );
        }

        html += '<th class="' + headerCellClassNames.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(cell.date, {
          omitTime: !tDateProfile.isTimeScale,
          omitTimeZoneOffset: true
        }) + '"' + (cell.colspan > 1 ? ' colspan="' + cell.colspan + '"' : '') + '>' + '<div class="fc-cell-content">' + cell.spanHtml + '</div>' + '</th>';
      }

      html += '</tr>';
    }

    html += '</tbody>';
    this.tableEl.innerHTML = html; // TODO: does this work cross-browser?

    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl, 'col');
    this.innerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelector('tr:last-child'), // compound selector won't work because of query-root problem
    'th .fc-cell-text');
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelectorAll('tr:not(:last-child)'), // compound selector won't work because of query-root problem
    'th .fc-cell-text').forEach(function (innerEl) {
      innerEl.classList.add('fc-sticky');
    });
  };

  return TimelineHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineSlats =
/** @class */
function (_super) {
  __extends(TimelineSlats, _super);

  function TimelineSlats(parentEl) {
    var _this = _super.call(this) || this;

    parentEl.appendChild(_this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-slats'
    }));
    return _this;
  }

  TimelineSlats.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);

    _super.prototype.destroy.call(this);
  };

  TimelineSlats.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineSlats.prototype.renderDates = function (tDateProfile) {
    var _a = this.context,
        calendar = _a.calendar,
        view = _a.view,
        theme = _a.theme,
        dateEnv = _a.dateEnv;
    var slotDates = tDateProfile.slotDates,
        isWeekStarts = tDateProfile.isWeekStarts;
    var html = '<table class="' + theme.getClass('tableGrid') + '">' + '<colgroup>';

    for (var i = 0; i < slotDates.length; i++) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody><tr>';

    for (var i = 0; i < slotDates.length; i++) {
      html += this.slatCellHtml(slotDates[i], isWeekStarts[i], tDateProfile);
    }

    html += '</tr></tbody></table>';
    this.el.innerHTML = html;
    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'col');
    this.slatEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'td');

    for (var i = 0; i < slotDates.length; i++) {
      calendar.publiclyTrigger('dayRender', [{
        date: dateEnv.toDate(slotDates[i]),
        el: this.slatEls[i],
        view: view
      }]);
    }

    this.outerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.slatEls, true, // isHorizontal
    false // isVertical
    ); // for the inner divs within the slats
    // used for event rendering and scrollTime, to disregard slat border

    this.innerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findChildren"])(this.slatEls, 'div'), true, // isHorizontal
    false // isVertical
    );
  };

  TimelineSlats.prototype.slatCellHtml = function (date, isEm, tDateProfile) {
    var _a = this.context,
        theme = _a.theme,
        dateEnv = _a.dateEnv;
    var classes;

    if (tDateProfile.isTimeScale) {
      classes = [];
      classes.push(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval)) ? 'fc-major' : 'fc-minor');
    } else {
      classes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(date, this.props.dateProfile, this.context);
      classes.push('fc-day');
    }

    classes.unshift(theme.getClass('widgetContent'));

    if (isEm) {
      classes.push('fc-em-cell');
    }

    return '<td class="' + classes.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(date, {
      omitTime: !tDateProfile.isTimeScale,
      omitTimeZoneOffset: true
    }) + '"' + '><div></div></td>';
  };

  TimelineSlats.prototype.updateSize = function () {
    this.outerCoordCache.build();
    this.innerCoordCache.build();
  };

  TimelineSlats.prototype.positionToHit = function (leftPosition) {
    var outerCoordCache = this.outerCoordCache;
    var _a = this.context,
        dateEnv = _a.dateEnv,
        isRtl = _a.isRtl;
    var tDateProfile = this.props.tDateProfile;
    var slatIndex = outerCoordCache.leftToIndex(leftPosition);

    if (slatIndex != null) {
      // somewhat similar to what TimeGrid does. consolidate?
      var slatWidth = outerCoordCache.getWidth(slatIndex);
      var partial = isRtl ? (outerCoordCache.rights[slatIndex] - leftPosition) / slatWidth : (leftPosition - outerCoordCache.lefts[slatIndex]) / slatWidth;
      var localSnapIndex = Math.floor(partial * tDateProfile.snapsPerSlot);
      var start = dateEnv.add(tDateProfile.slotDates[slatIndex], Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["multiplyDuration"])(tDateProfile.snapDuration, localSnapIndex));
      var end = dateEnv.add(start, tDateProfile.snapDuration);
      return {
        dateSpan: {
          range: {
            start: start,
            end: end
          },
          allDay: !this.props.tDateProfile.isTimeScale
        },
        dayEl: this.slatColEls[slatIndex],
        left: outerCoordCache.lefts[slatIndex],
        right: outerCoordCache.rights[slatIndex]
      };
    }

    return null;
  };

  return TimelineSlats;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_AUTO_LABELS = 18; // more than `12` months but less that `24` hours

var MAX_AUTO_SLOTS_PER_LABEL = 6; // allows 6 10-min slots in an hour

var MAX_AUTO_CELLS = 200; // allows 4-days to have a :30 slot duration

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS = 1000; // potential nice values for slot-duration and interval-duration

var STOCK_SUB_DURATIONS = [{
  years: 1
}, {
  months: 1
}, {
  days: 1
}, {
  hours: 1
}, {
  minutes: 30
}, {
  minutes: 15
}, {
  minutes: 10
}, {
  minutes: 5
}, {
  minutes: 1
}, {
  seconds: 30
}, {
  seconds: 15
}, {
  seconds: 10
}, {
  seconds: 5
}, {
  seconds: 1
}, {
  milliseconds: 500
}, {
  milliseconds: 100
}, {
  milliseconds: 10
}, {
  milliseconds: 1
}];

function buildTimelineDateProfile(dateProfile, dateEnv, allOptions, dateProfileGenerator) {
  var tDateProfile = {
    labelInterval: queryDurationOption(allOptions, 'slotLabelInterval'),
    slotDuration: queryDurationOption(allOptions, 'slotDuration')
  };
  validateLabelAndSlot(tDateProfile, dateProfile, dateEnv); // validate after computed grid duration

  ensureLabelInterval(tDateProfile, dateProfile, dateEnv);
  ensureSlotDuration(tDateProfile, dateProfile, dateEnv);
  var input = allOptions.slotLabelFormat;
  var rawFormats = Array.isArray(input) ? input : input != null ? [input] : computeHeaderFormats(tDateProfile, dateProfile, dateEnv, allOptions);
  tDateProfile.headerFormats = rawFormats.map(function (rawFormat) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(rawFormat);
  });
  tDateProfile.isTimeScale = Boolean(tDateProfile.slotDuration.milliseconds);
  var largeUnit = null;

  if (!tDateProfile.isTimeScale) {
    var slotUnit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;

    if (/year|month|week/.test(slotUnit)) {
      largeUnit = slotUnit;
    }
  }

  tDateProfile.largeUnit = largeUnit;
  tDateProfile.emphasizeWeeks = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration) && currentRangeAs('weeks', dateProfile, dateEnv) >= 2 && !allOptions.businessHours;
  /*
  console.log('label interval =', timelineView.labelInterval.humanize())
  console.log('slot duration =', timelineView.slotDuration.humanize())
  console.log('header formats =', timelineView.headerFormats)
  console.log('isTimeScale', timelineView.isTimeScale)
  console.log('largeUnit', timelineView.largeUnit)
  */

  var rawSnapDuration = allOptions.snapDuration;
  var snapDuration;
  var snapsPerSlot;

  if (rawSnapDuration) {
    snapDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(rawSnapDuration);
    snapsPerSlot = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.slotDuration, snapDuration); // ^ TODO: warning if not whole?
  }

  if (snapsPerSlot == null) {
    snapDuration = tDateProfile.slotDuration;
    snapsPerSlot = 1;
  }

  tDateProfile.snapDuration = snapDuration;
  tDateProfile.snapsPerSlot = snapsPerSlot; // more...

  var timeWindowMs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.maxTime) - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // TODO: why not use normalizeRange!?

  var normalizedStart = normalizeDate(dateProfile.renderRange.start, tDateProfile, dateEnv);
  var normalizedEnd = normalizeDate(dateProfile.renderRange.end, tDateProfile, dateEnv); // apply minTime/maxTime
  // TODO: View should be responsible.

  if (tDateProfile.isTimeScale) {
    normalizedStart = dateEnv.add(normalizedStart, dateProfile.minTime);
    normalizedEnd = dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(normalizedEnd, -1), dateProfile.maxTime);
  }

  tDateProfile.timeWindowMs = timeWindowMs;
  tDateProfile.normalizedRange = {
    start: normalizedStart,
    end: normalizedEnd
  };
  var slotDates = [];
  var date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator)) {
      slotDates.push(date);
    }

    date = dateEnv.add(date, tDateProfile.slotDuration);
  }

  tDateProfile.slotDates = slotDates; // more...

  var snapIndex = -1;
  var snapDiff = 0; // index of the diff :(

  var snapDiffToIndex = [];
  var snapIndexToDiff = [];
  date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator)) {
      snapIndex++;
      snapDiffToIndex.push(snapIndex);
      snapIndexToDiff.push(snapDiff);
    } else {
      snapDiffToIndex.push(snapIndex + 0.5);
    }

    date = dateEnv.add(date, tDateProfile.snapDuration);
    snapDiff++;
  }

  tDateProfile.snapDiffToIndex = snapDiffToIndex;
  tDateProfile.snapIndexToDiff = snapIndexToDiff;
  tDateProfile.snapCnt = snapIndex + 1; // is always one behind

  tDateProfile.slotCnt = tDateProfile.snapCnt / tDateProfile.snapsPerSlot; // more...

  tDateProfile.isWeekStarts = buildIsWeekStarts(tDateProfile, dateEnv);
  tDateProfile.cellRows = buildCellRows(tDateProfile, dateEnv, allOptions);
  return tDateProfile;
}
/*
snaps to appropriate unit
*/


function normalizeDate(date, tDateProfile, dateEnv) {
  var normalDate = date;

  if (!tDateProfile.isTimeScale) {
    normalDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(normalDate);

    if (tDateProfile.largeUnit) {
      normalDate = dateEnv.startOf(normalDate, tDateProfile.largeUnit);
    }
  }

  return normalDate;
}
/*
snaps to appropriate unit
*/


function normalizeRange(range, tDateProfile, dateEnv) {
  if (!tDateProfile.isTimeScale) {
    range = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeVisibleDayRange"])(range);

    if (tDateProfile.largeUnit) {
      var dayRange = range; // preserve original result

      range = {
        start: dateEnv.startOf(range.start, tDateProfile.largeUnit),
        end: dateEnv.startOf(range.end, tDateProfile.largeUnit)
      }; // if date is partially through the interval, or is in the same interval as the start,
      // make the exclusive end be the *next* interval

      if (range.end.valueOf() !== dayRange.end.valueOf() || range.end <= range.start) {
        range = {
          start: range.start,
          end: dateEnv.add(range.end, tDateProfile.slotDuration)
        };
      }
    }
  }

  return range;
}

function isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator) {
  if (dateProfileGenerator.isHiddenDay(date)) {
    return false;
  } else if (tDateProfile.isTimeScale) {
    // determine if the time is within minTime/maxTime, which may have wacky values
    var day = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date);
    var timeMs = date.valueOf() - day.valueOf();
    var ms = timeMs - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // milliseconds since minTime

    ms = (ms % 86400000 + 86400000) % 86400000; // make negative values wrap to 24hr clock

    return ms < tDateProfile.timeWindowMs; // before the maxTime?
  } else {
    return true;
  }
}

function queryDurationOption(allOptions, name) {
  var input = allOptions[name];

  if (input != null) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
  }
}

function validateLabelAndSlot(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange; // make sure labelInterval doesn't exceed the max number of cells

  if (tDateProfile.labelInterval) {
    var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.labelInterval);

    if (labelCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotLabelInterval results in too many cells');
      tDateProfile.labelInterval = null;
    }
  } // make sure slotDuration doesn't exceed the maximum number of cells


  if (tDateProfile.slotDuration) {
    var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.slotDuration);

    if (slotCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotDuration results in too many cells');
      tDateProfile.slotDuration = null;
    }
  } // make sure labelInterval is a multiple of slotDuration


  if (tDateProfile.labelInterval && tDateProfile.slotDuration) {
    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);

    if (slotsPerLabel === null || slotsPerLabel < 1) {
      console.warn('slotLabelInterval must be a multiple of slotDuration');
      tDateProfile.slotDuration = null;
    }
  }
}

function ensureLabelInterval(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var labelInterval = tDateProfile.labelInterval;

  if (!labelInterval) {
    // compute based off the slot duration
    // find the largest label interval with an acceptable slots-per-label
    var input = void 0;

    if (tDateProfile.slotDuration) {
      for (var _i = 0, STOCK_SUB_DURATIONS_1 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_1.length; _i++) {
        input = STOCK_SUB_DURATIONS_1[_i];
        var tryLabelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tryLabelInterval, tDateProfile.slotDuration);

        if (slotsPerLabel !== null && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
          labelInterval = tryLabelInterval;
          break;
        }
      } // use the slot duration as a last resort


      if (!labelInterval) {
        labelInterval = tDateProfile.slotDuration;
      } // compute based off the view's duration
      // find the largest label interval that yields the minimum number of labels

    } else {
      for (var _a = 0, STOCK_SUB_DURATIONS_2 = STOCK_SUB_DURATIONS; _a < STOCK_SUB_DURATIONS_2.length; _a++) {
        input = STOCK_SUB_DURATIONS_2[_a];
        labelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, labelInterval);

        if (labelCnt >= MIN_AUTO_LABELS) {
          break;
        }
      }
    }

    tDateProfile.labelInterval = labelInterval;
  }

  return labelInterval;
}

function ensureSlotDuration(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var slotDuration = tDateProfile.slotDuration;

  if (!slotDuration) {
    var labelInterval = ensureLabelInterval(tDateProfile, dateProfile, dateEnv); // will compute if necessary
    // compute based off the label interval
    // find the largest slot duration that is different from labelInterval, but still acceptable

    for (var _i = 0, STOCK_SUB_DURATIONS_3 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_3.length; _i++) {
      var input = STOCK_SUB_DURATIONS_3[_i];
      var trySlotDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
      var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(labelInterval, trySlotDuration);

      if (slotsPerLabel !== null && slotsPerLabel > 1 && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
        slotDuration = trySlotDuration;
        break;
      }
    } // only allow the value if it won't exceed the view's # of slots limit


    if (slotDuration) {
      var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, slotDuration);

      if (slotCnt > MAX_AUTO_CELLS) {
        slotDuration = null;
      }
    } // use the label interval as a last resort


    if (!slotDuration) {
      slotDuration = labelInterval;
    }

    tDateProfile.slotDuration = slotDuration;
  }

  return slotDuration;
}

function computeHeaderFormats(tDateProfile, dateProfile, dateEnv, allOptions) {
  var format1;
  var format2;
  var labelInterval = tDateProfile.labelInterval;
  var unit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(labelInterval).unit;
  var weekNumbersVisible = allOptions.weekNumbers;
  var format0 = format1 = format2 = null; // NOTE: weekNumber computation function wont work

  if (unit === 'week' && !weekNumbersVisible) {
    unit = 'day';
  }

  switch (unit) {
    case 'year':
      format0 = {
        year: 'numeric'
      }; // '2015'

      break;

    case 'month':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        month: 'short'
      }; // 'Jan'

      break;

    case 'week':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        week: 'narrow'
      }; // 'Wk4'

      break;

    case 'day':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric',
          month: 'long'
        }; // 'January 2014'
      } else if (currentRangeAs('months', dateProfile, dateEnv) > 1) {
        format0 = {
          month: 'long'
        }; // 'January'
      }

      if (weekNumbersVisible) {
        format1 = {
          week: 'short'
        }; // 'Wk 4'
      }

      format2 = {
        weekday: 'narrow',
        day: 'numeric'
      }; // 'Su 9'

      break;

    case 'hour':
      if (weekNumbersVisible) {
        format0 = {
          week: 'short'
        }; // 'Wk 4'
      }

      if (currentRangeAs('days', dateProfile, dateEnv) > 1) {
        format1 = {
          weekday: 'short',
          day: 'numeric',
          month: 'numeric',
          omitCommas: true
        }; // Sat 4/7
      }

      format2 = {
        hour: 'numeric',
        minute: '2-digit',
        omitZeroMinute: true,
        meridiem: 'short'
      };
      break;

    case 'minute':
      // sufficiently large number of different minute cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMinutes"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          meridiem: 'short'
        };

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.minute, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: 'numeric',
          meridiem: 'short'
        };
      }

      break;

    case 'second':
      // sufficiently large number of different second cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughSeconds"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30 PM'

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.second, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          second: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30:45 PM'
      }

      break;

    case 'millisecond':
      format0 = {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        meridiem: 'lowercase'
      }; // '8:30:45 PM'

      format1 = function (params) {
        return '.' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.millisecond, 3);
      };

      break;
  }

  return [].concat(format0 || [], format1 || [], format2 || []);
} // Compute the number of the give units in the "current" range.
// Won't go more precise than days.
// Will return `0` if there's not a clean whole interval.


function currentRangeAs(unit, dateProfile, dateEnv) {
  var range = dateProfile.currentRange;
  var res = null;

  if (unit === 'years') {
    res = dateEnv.diffWholeYears(range.start, range.end);
  } else if (unit === 'months') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'weeks') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'days') {
    res = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffWholeDays"])(range.start, range.end);
  }

  return res || 0;
}

function buildIsWeekStarts(tDateProfile, dateEnv) {
  var slotDates = tDateProfile.slotDates,
      emphasizeWeeks = tDateProfile.emphasizeWeeks;
  var prevWeekNumber = null;
  var isWeekStarts = [];

  for (var _i = 0, slotDates_1 = slotDates; _i < slotDates_1.length; _i++) {
    var slotDate = slotDates_1[_i];
    var weekNumber = dateEnv.computeWeekNumber(slotDate);
    var isWeekStart = emphasizeWeeks && prevWeekNumber !== null && prevWeekNumber !== weekNumber;
    prevWeekNumber = weekNumber;
    isWeekStarts.push(isWeekStart);
  }

  return isWeekStarts;
}

function buildCellRows(tDateProfile, dateEnv, allOptions) {
  var slotDates = tDateProfile.slotDates;
  var formats = tDateProfile.headerFormats;
  var cellRows = formats.map(function (format) {
    return [];
  }); // indexed by row,col
  // specifically for navclicks

  var rowUnits = formats.map(function (format) {
    return format.getLargestUnit ? format.getLargestUnit() : null;
  }); // builds cellRows and slotCells

  for (var i = 0; i < slotDates.length; i++) {
    var date = slotDates[i];
    var isWeekStart = tDateProfile.isWeekStarts[i];

    for (var row = 0; row < formats.length; row++) {
      var format = formats[row];
      var rowCells = cellRows[row];
      var leadingCell = rowCells[rowCells.length - 1];
      var isSuperRow = formats.length > 1 && row < formats.length - 1; // more than one row and not the last

      var newCell = null;

      if (isSuperRow) {
        var text = dateEnv.format(date, format);

        if (!leadingCell || leadingCell.text !== text) {
          newCell = buildCellObject(date, text, rowUnits[row], allOptions, dateEnv);
        } else {
          leadingCell.colspan += 1;
        }
      } else {
        if (!leadingCell || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval))) {
          var text = dateEnv.format(date, format);
          newCell = buildCellObject(date, text, rowUnits[row], allOptions, dateEnv);
        } else {
          leadingCell.colspan += 1;
        }
      }

      if (newCell) {
        newCell.weekStart = isWeekStart;
        rowCells.push(newCell);
      }
    }
  }

  return cellRows;
}

function buildCellObject(date, text, rowUnit, allOptions, dateEnv) {
  var spanHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(allOptions, dateEnv, {
    date: date,
    type: rowUnit,
    forceOff: !rowUnit
  }, {
    'class': 'fc-cell-text'
  }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text));
  return {
    text: text,
    spanHtml: spanHtml,
    date: date,
    colspan: 1,
    isWeekStart: false
  };
}

var TimelineNowIndicator =
/** @class */
function () {
  function TimelineNowIndicator(headParent, bodyParent) {
    this.headParent = headParent;
    this.bodyParent = bodyParent;
  }

  TimelineNowIndicator.prototype.render = function (coord, isRtl) {
    var styleProps = isRtl ? {
      right: -coord
    } : {
      left: coord
    };
    this.headParent.appendChild(this.arrowEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-arrow',
      style: styleProps
    }));
    this.bodyParent.appendChild(this.lineEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-line',
      style: styleProps
    }));
  };

  TimelineNowIndicator.prototype.unrender = function () {
    if (this.arrowEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.arrowEl);
    }

    if (this.lineEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.lineEl);
    }
  };

  return TimelineNowIndicator;
}();

var STICKY_PROP_VAL = computeStickyPropVal(); // if null, means not supported at all

var IS_MS_EDGE = /Edge/.test(navigator.userAgent);
var IS_SAFARI = STICKY_PROP_VAL === '-webkit-sticky'; // good b/c doesn't confuse chrome

var STICKY_CLASSNAME = 'fc-sticky';
/*
useful beyond the native position:sticky for these reasons:
- support in IE11
- nice centering support
*/

var StickyScroller =
/** @class */
function () {
  function StickyScroller(scroller, isRtl, isVertical) {
    var _this = this;

    this.usingRelative = null;
    /*
    known bug: called twice on init. problem when mixing with ScrollJoiner
    */

    this.updateSize = function () {
      var els = Array.prototype.slice.call(_this.scroller.canvas.el.querySelectorAll('.' + STICKY_CLASSNAME));

      var elGeoms = _this.queryElGeoms(els);

      var viewportWidth = _this.scroller.el.clientWidth;

      if (_this.usingRelative) {
        var elDestinations = _this.computeElDestinations(elGeoms, viewportWidth); // read before prepPositioning


        assignRelativePositions(els, elGeoms, elDestinations);
      } else {
        assignStickyPositions(els, elGeoms, viewportWidth);
      }
    };

    this.scroller = scroller;
    this.usingRelative = !STICKY_PROP_VAL || // IE11
    IS_MS_EDGE && isRtl || // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18883305/
    (IS_MS_EDGE || IS_SAFARI) && isVertical; // because doesn't work with rowspan in tables, our only vertial use

    if (this.usingRelative) {
      scroller.on('scrollEnd', this.updateSize);
    }
  }

  StickyScroller.prototype.destroy = function () {
    this.scroller.off('scrollEnd', this.updateSize);
  };

  StickyScroller.prototype.queryElGeoms = function (els) {
    var canvasOrigin = this.scroller.canvas.el.getBoundingClientRect();
    var elGeoms = [];

    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el = els_1[_i];
      var parentBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(el.parentNode.getBoundingClientRect(), -canvasOrigin.left, -canvasOrigin.top);
      var elRect = el.getBoundingClientRect();
      var computedStyles = window.getComputedStyle(el);
      var computedTextAlign = window.getComputedStyle(el.parentNode).textAlign; // ask the parent

      var intendedTextAlign = computedTextAlign;
      var naturalBound = null;

      if (computedStyles.position !== 'sticky') {
        naturalBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(elRect, -canvasOrigin.left - (parseFloat(computedStyles.left) || 0), // could be 'auto'
        -canvasOrigin.top - (parseFloat(computedStyles.top) || 0));
      }

      if (el.hasAttribute('data-sticky-center')) {
        intendedTextAlign = 'center';
      }

      elGeoms.push({
        parentBound: parentBound,
        naturalBound: naturalBound,
        elWidth: elRect.width,
        elHeight: elRect.height,
        computedTextAlign: computedTextAlign,
        intendedTextAlign: intendedTextAlign
      });
    }

    return elGeoms;
  };

  StickyScroller.prototype.computeElDestinations = function (elGeoms, viewportWidth) {
    var viewportLeft = this.scroller.getScrollFromLeft();
    var viewportTop = this.scroller.getScrollTop();
    var viewportRight = viewportLeft + viewportWidth;
    return elGeoms.map(function (elGeom) {
      var elWidth = elGeom.elWidth,
          elHeight = elGeom.elHeight,
          parentBound = elGeom.parentBound,
          naturalBound = elGeom.naturalBound;
      var destLeft; // relative to canvas topleft

      var destTop; // "

      switch (elGeom.intendedTextAlign) {
        case 'left':
          destLeft = viewportLeft;
          break;

        case 'right':
          destLeft = viewportRight - elWidth;
          break;

        case 'center':
          destLeft = (viewportLeft + viewportRight) / 2 - elWidth / 2;
          break;
      }

      destLeft = Math.min(destLeft, parentBound.right - elWidth);
      destLeft = Math.max(destLeft, parentBound.left);
      destTop = viewportTop;
      destTop = Math.min(destTop, parentBound.bottom - elHeight);
      destTop = Math.max(destTop, naturalBound.top); // better to use natural top for upper bound

      return {
        left: destLeft,
        top: destTop
      };
    });
  };

  return StickyScroller;
}();

function assignRelativePositions(els, elGeoms, elDestinations) {
  els.forEach(function (el, i) {
    var naturalBound = elGeoms[i].naturalBound;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: 'relative',
      left: elDestinations[i].left - naturalBound.left,
      top: elDestinations[i].top - naturalBound.top
    });
  });
}

function assignStickyPositions(els, elGeoms, viewportWidth) {
  els.forEach(function (el, i) {
    var stickyLeft = 0;

    if (elGeoms[i].intendedTextAlign === 'center') {
      stickyLeft = (viewportWidth - elGeoms[i].elWidth) / 2; // needs to be forced to left?

      if (elGeoms[i].computedTextAlign === 'center') {
        el.setAttribute('data-sticky-center', '') // remember for next queryElGeoms
        ;
        el.parentNode.style.textAlign = 'left';
      }
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: STICKY_PROP_VAL,
      left: stickyLeft,
      right: 0,
      top: 0
    });
  });
}

function computeStickyPropVal() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div style="position:-webkit-sticky;position:sticky"></div>');
  var val = el.style.position;

  if (val.indexOf('sticky') !== -1) {
    return val;
  } else {
    return null;
  }
}

var TimeAxis =
/** @class */
function (_super) {
  __extends(TimeAxis, _super);

  function TimeAxis(headerContainerEl, bodyContainerEl) {
    var _this = _super.call(this) || this;

    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.layout = new HeaderBodyLayout(headerContainerEl, bodyContainerEl, 'auto');
    return _this;
  }

  TimeAxis.prototype.render = function (props, context) {
    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(props.dateProfile, context.dateEnv, context.options, props.dateProfileGenerator); // TODO: cache

    this.renderSkeleton(context);
    this.header.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    }, context);
    this.slats.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    }, context);
  };

  TimeAxis.prototype.destroy = function () {
    this.renderSkeleton.unrender();
    this.layout.destroy();

    _super.prototype.destroy.call(this);
  };

  TimeAxis.prototype._renderSkeleton = function (context) {
    var layout = this.layout;
    var headerEnhancedScroller = layout.headerScroller.enhancedScroll;
    var bodyEnhancedScroller = layout.bodyScroller.enhancedScroll; // needs to go after layout, which has ScrollJoiner

    this.headStickyScroller = new StickyScroller(headerEnhancedScroller, context.isRtl, false); // isVertical=false

    this.bodyStickyScroller = new StickyScroller(bodyEnhancedScroller, context.isRtl, false); // isVertical=false

    this.header = new TimelineHeader(headerEnhancedScroller.canvas.contentEl);
    this.slats = new TimelineSlats(bodyEnhancedScroller.canvas.bgEl);
    this.nowIndicator = new TimelineNowIndicator(headerEnhancedScroller.canvas.el, bodyEnhancedScroller.canvas.el);
  };

  TimeAxis.prototype._unrenderSkeleton = function () {
    this.header.destroy();
    this.slats.destroy();
    this.nowIndicator.unrender();
    this.headStickyScroller.destroy();
    this.bodyStickyScroller.destroy();
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {
    var context = this.context; // yuck

    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(dateProfile, context.dateEnv, context.options, dateProfileGenerator); // TODO: cache

    if (tDateProfile.isTimeScale) {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.renderNowIndicator = function (date) {
    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsMarker"])(this.tDateProfile.normalizedRange, date)) {
      this.nowIndicator.render(this.dateToCoord(date), this.context.isRtl);
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.unrenderNowIndicator = function () {
    this.nowIndicator.unrender();
  }; // Sizing
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.applySlotWidth(this.computeSlotWidth()); // adjusts gutters. do after slot widths set

    this.layout.setHeight(totalHeight, isAuto); // pretty much just queries coords. do last

    this.slats.updateSize();
  };

  TimeAxis.prototype.updateStickyScrollers = function () {
    this.headStickyScroller.updateSize();
    this.bodyStickyScroller.updateSize();
  };

  TimeAxis.prototype.computeSlotWidth = function () {
    var slotWidth = this.context.options.slotWidth || '';

    if (slotWidth === '') {
      slotWidth = this.computeDefaultSlotWidth(this.tDateProfile);
    }

    return slotWidth;
  };

  TimeAxis.prototype.computeDefaultSlotWidth = function (tDateProfile) {
    var maxInnerWidth = 0; // TODO: harness core's `matchCellWidths` for this

    this.header.innerEls.forEach(function (innerEl, i) {
      maxInnerWidth = Math.max(maxInnerWidth, innerEl.getBoundingClientRect().width);
    });
    var headingCellWidth = Math.ceil(maxInnerWidth) + 1; // assume no padding, and one pixel border
    // in TimelineView.defaults we ensured that labelInterval is an interval of slotDuration
    // TODO: rename labelDuration?

    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);
    var slotWidth = Math.ceil(headingCellWidth / slotsPerLabel);
    var minWidth = window.getComputedStyle(this.header.slatColEls[0]).minWidth;

    if (minWidth) {
      minWidth = parseInt(minWidth, 10);

      if (minWidth) {
        slotWidth = Math.max(slotWidth, minWidth);
      }
    }

    return slotWidth;
  };

  TimeAxis.prototype.applySlotWidth = function (slotWidth) {
    var _a = this,
        layout = _a.layout,
        tDateProfile = _a.tDateProfile;

    var containerWidth = '';
    var containerMinWidth = '';
    var nonLastSlotWidth = '';

    if (slotWidth !== '') {
      slotWidth = Math.round(slotWidth);
      containerWidth = slotWidth * tDateProfile.slotDates.length;
      containerMinWidth = '';
      nonLastSlotWidth = slotWidth;
      var availableWidth = layout.bodyScroller.enhancedScroll.getClientWidth();

      if (availableWidth > containerWidth) {
        containerMinWidth = availableWidth;
        containerWidth = '';
        nonLastSlotWidth = Math.floor(availableWidth / tDateProfile.slotDates.length);
      }
    }

    layout.headerScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.headerScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);
    layout.bodyScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.bodyScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);

    if (nonLastSlotWidth !== '') {
      this.header.slatColEls.slice(0, -1).concat(this.slats.slatColEls.slice(0, -1)).forEach(function (el) {
        el.style.width = nonLastSlotWidth + 'px';
      });
    }
  }; // returned value is between 0 and the number of snaps


  TimeAxis.prototype.computeDateSnapCoverage = function (date) {
    var tDateProfile = this.tDateProfile;
    var dateEnv = this.context.dateEnv;
    var snapDiff = dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.snapDuration);

    if (snapDiff < 0) {
      return 0;
    } else if (snapDiff >= tDateProfile.snapDiffToIndex.length) {
      return tDateProfile.snapCnt;
    } else {
      var snapDiffInt = Math.floor(snapDiff);
      var snapCoverage = tDateProfile.snapDiffToIndex[snapDiffInt];

      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(snapCoverage)) {
        // not an in-between value
        snapCoverage += snapDiff - snapDiffInt; // add the remainder
      } else {
        // a fractional value, meaning the date is not visible
        // always round up in this case. works for start AND end dates in a range.
        snapCoverage = Math.ceil(snapCoverage);
      }

      return snapCoverage;
    }
  }; // for LTR, results range from 0 to width of area
  // for RTL, results range from negative width of area to 0


  TimeAxis.prototype.dateToCoord = function (date) {
    var tDateProfile = this.tDateProfile;
    var snapCoverage = this.computeDateSnapCoverage(date);
    var slotCoverage = snapCoverage / tDateProfile.snapsPerSlot;
    var slotIndex = Math.floor(slotCoverage);
    slotIndex = Math.min(slotIndex, tDateProfile.slotCnt - 1);
    var partial = slotCoverage - slotIndex;
    var _a = this.slats,
        innerCoordCache = _a.innerCoordCache,
        outerCoordCache = _a.outerCoordCache;

    if (this.context.isRtl) {
      return outerCoordCache.rights[slotIndex] - innerCoordCache.getWidth(slotIndex) * partial - outerCoordCache.originClientRect.width;
    } else {
      return outerCoordCache.lefts[slotIndex] + innerCoordCache.getWidth(slotIndex) * partial;
    }
  };

  TimeAxis.prototype.rangeToCoords = function (range) {
    if (this.context.isRtl) {
      return {
        right: this.dateToCoord(range.start),
        left: this.dateToCoord(range.end)
      };
    } else {
      return {
        left: this.dateToCoord(range.start),
        right: this.dateToCoord(range.end)
      };
    }
  }; // Scrolling
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.computeDateScroll = function (duration) {
    var _a = this.context,
        dateEnv = _a.dateEnv,
        isRtl = _a.isRtl;
    var dateProfile = this.props.dateProfile;
    var left = 0;

    if (dateProfile) {
      left = this.dateToCoord(dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(dateProfile.activeRange.start), // startOfDay needed?
      duration)); // hack to overcome the left borders of non-first slat

      if (!isRtl && left) {
        left += 1;
      }
    }

    return {
      left: left
    };
  };

  TimeAxis.prototype.queryDateScroll = function () {
    var enhancedScroll = this.layout.bodyScroller.enhancedScroll;
    return {
      left: enhancedScroll.getScrollLeft()
    };
  };

  TimeAxis.prototype.applyDateScroll = function (scroll) {
    // TODO: lame we have to update both. use the scrolljoiner instead maybe
    this.layout.bodyScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
    this.layout.headerScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
  };

  return TimeAxis;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineLaneEventRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneEventRenderer, _super);

  function TimelineLaneEventRenderer(masterContainerEl, timeAxis) {
    var _this = _super.call(this) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
    var context = this.context;
    var eventRange = seg.eventRange;
    var eventDef = eventRange.def;
    var eventUi = eventRange.ui;
    var isDraggable = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventDraggable"])(context, eventDef, eventUi);
    var isResizableFromStart = seg.isStart && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventStartResizable"])(context, eventDef, eventUi);
    var isResizableFromEnd = seg.isEnd && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventEndResizable"])(context, eventDef, eventUi);
    var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
    classes.unshift('fc-timeline-event', 'fc-h-event');
    var timeText = this.getTimeText(eventRange);
    return '<a class="' + classes.join(' ') + '" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(this.getSkinCss(eventUi)) + '"' + (eventDef.url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.url) + '"' : '') + '>' + (timeText ? '<span class="fc-time-wrap">' + '<span class="fc-time">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(timeText) + '</span>' + '</span>' : '') + '<span class="fc-title-wrap">' + '<span class="fc-title fc-sticky">' + (eventDef.title ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title) : '&nbsp;') + '</span>' + '</span>' + (isResizableFromStart ? '<div class="fc-resizer fc-start-resizer"></div>' : '') + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer"></div>' : '') + '</a>';
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventTime = function () {
    return !this.timeAxis.tDateProfile.isTimeScale; // because times should be obvious via axis
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventEnd = function () {
    return false;
  }; // Computes a default event time formatting string if `timeFormat` is not explicitly defined


  TimelineLaneEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true,
      meridiem: 'narrow'
    };
  };

  TimelineLaneEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
    if (!this.el && this.masterContainerEl) {
      this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-event-container'
      });

      if (mirrorInfo) {
        this.el.classList.add('fc-mirror-container');
      }

      this.masterContainerEl.appendChild(this.el);
    }

    if (this.el) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        this.el.appendChild(seg.el);
      }
    }
  };

  TimelineLaneEventRenderer.prototype.detachSegs = function (segs) {
    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(seg.el);
    }
  }; // computes AND assigns (assigns the left/right at least). bad


  TimelineLaneEventRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      var coords = timeAxis.rangeToCoords(seg); // works because Seg has start/end

      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left = coords.left,
        right: -(seg.right = coords.right)
      });
    }
  };

  TimelineLaneEventRenderer.prototype.assignSegSizes = function (segs) {
    if (!this.el) {
      return;
    } // compute seg verticals


    for (var _i = 0, segs_4 = segs; _i < segs_4.length; _i++) {
      var seg = segs_4[_i];
      seg.height = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeHeightAndMargins"])(seg.el);
    }

    this.buildSegLevels(segs); // populates above/below props for computeOffsetForSegs

    var totalHeight = computeOffsetForSegs(segs); // also assigns seg.top

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.el, 'height', totalHeight); // assign seg verticals

    for (var _a = 0, segs_5 = segs; _a < segs_5.length; _a++) {
      var seg = segs_5[_a];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(seg.el, 'top', seg.top);
    }
  };

  TimelineLaneEventRenderer.prototype.buildSegLevels = function (segs) {
    var segLevels = [];
    segs = this.sortEventSegs(segs);

    for (var _i = 0, segs_6 = segs; _i < segs_6.length; _i++) {
      var unplacedSeg = segs_6[_i];
      unplacedSeg.above = []; // determine the first level with no collisions

      var level = 0; // level index

      while (level < segLevels.length) {
        var isLevelCollision = false; // determine collisions

        for (var _a = 0, _b = segLevels[level]; _a < _b.length; _a++) {
          var placedSeg = _b[_a];

          if (timeRowSegsCollide(unplacedSeg, placedSeg)) {
            unplacedSeg.above.push(placedSeg);
            isLevelCollision = true;
          }
        }

        if (isLevelCollision) {
          level += 1;
        } else {
          break;
        }
      } // insert into the first non-colliding level. create if necessary


      (segLevels[level] || (segLevels[level] = [])).push(unplacedSeg); // record possible colliding segments below (TODO: automated test for this)

      level += 1;

      while (level < segLevels.length) {
        for (var _c = 0, _d = segLevels[level]; _c < _d.length; _c++) {
          var belowSeg = _d[_c];

          if (timeRowSegsCollide(unplacedSeg, belowSeg)) {
            belowSeg.above.push(unplacedSeg);
          }
        }

        level += 1;
      }
    }

    return segLevels;
  };

  return TimelineLaneEventRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]);

function computeOffsetForSegs(segs) {
  var max = 0;

  for (var _i = 0, segs_7 = segs; _i < segs_7.length; _i++) {
    var seg = segs_7[_i];
    max = Math.max(max, computeOffsetForSeg(seg));
  }

  return max;
}

function computeOffsetForSeg(seg) {
  if (seg.top == null) {
    seg.top = computeOffsetForSegs(seg.above);
  }

  return seg.top + seg.height;
}

function timeRowSegsCollide(seg0, seg1) {
  return seg0.left < seg1.right && seg0.right > seg1.left;
}

var TimelineLaneFillRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneFillRenderer, _super);

  function TimelineLaneFillRenderer(masterContainerEl, timeAxis) {
    var _this = _super.call(this) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneFillRenderer.prototype.attachSegs = function (type, segs) {
    if (segs.length) {
      var className = void 0;

      if (type === 'businessHours') {
        className = 'bgevent';
      } else {
        className = type.toLowerCase();
      } // making a new container each time is OKAY
      // all types of segs (background or business hours or whatever) are rendered in one pass


      var containerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-' + className + '-container'
      });
      this.masterContainerEl.appendChild(containerEl);

      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        containerEl.appendChild(seg.el);
      }

      return [containerEl]; // return value
    }
  };

  TimelineLaneFillRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      var coords = timeAxis.rangeToCoords(seg);
      seg.left = coords.left;
      seg.right = coords.right;
    }
  };

  TimelineLaneFillRenderer.prototype.assignSegSizes = function (segs) {
    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left,
        right: -seg.right
      });
    }
  };

  return TimelineLaneFillRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FillRenderer"]);

var TimelineLane =
/** @class */
function (_super) {
  __extends(TimelineLane, _super);

  function TimelineLane(fgContainerEl, bgContainerEl, timeAxis) {
    var _this = _super.call(this, bgContainerEl) || this;

    _this.slicer = new TimelineLaneSlicer();
    _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventDrag, _this._unrenderEventDrag);
    _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventResize, _this._unrenderEventResize);
    _this.fgContainerEl = fgContainerEl;
    _this.timeAxis = timeAxis;
    var fillRenderer = _this.fillRenderer = new TimelineLaneFillRenderer(bgContainerEl, timeAxis);
    var eventRenderer = _this.eventRenderer = new TimelineLaneEventRenderer(fgContainerEl, timeAxis);
    _this.mirrorRenderer = new TimelineLaneEventRenderer(fgContainerEl, timeAxis);
    _this.renderBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'));
    _this.renderDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'));
    _this.renderBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'));
    _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer));
    _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
    return _this;
  }

  TimelineLane.prototype.render = function (props, context) {
    var timeAxis = this.timeAxis;
    var slicedProps = this.slicer.sliceProps(props, props.dateProfile, timeAxis.tDateProfile.isTimeScale ? null : props.nextDayThreshold, context.calendar, this, timeAxis);
    this.renderBusinessHours(context, slicedProps.businessHourSegs);
    this.renderDateSelection(context, slicedProps.dateSelectionSegs);
    this.renderBgEvents(context, slicedProps.bgEventSegs);
    this.renderFgEvents(context, slicedProps.fgEventSegs);
    this.renderEventSelection(slicedProps.eventSelection);
    this.renderEventDrag(slicedProps.eventDrag);
    this.renderEventResize(slicedProps.eventResize);
  };

  TimelineLane.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderBusinessHours.unrender();
    this.renderDateSelection.unrender();
    this.renderBgEvents.unrender();
    this.renderFgEvents.unrender();
    this.renderEventSelection.unrender();
    this.renderEventDrag.unrender();
    this.renderEventResize.unrender();
  };

  TimelineLane.prototype._renderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.mirrorRenderer.renderSegs(this.context, state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.mirrorRenderer.unrender(this.context, state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._renderEventResize = function (state) {
    if (state) {
      // HACK. eventRenderer and fillRenderer both use these segs. would compete over seg.el
      var segsForHighlight = state.segs.map(function (seg) {
        return __assign({}, seg);
      });
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.fillRenderer.renderSegs('highlight', this.context, segsForHighlight);
      this.mirrorRenderer.renderSegs(this.context, state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventResize = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.fillRenderer.unrender('highlight', this.context);
      this.mirrorRenderer.unrender(this.context, state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype.updateSize = function (isResize) {
    var _a = this,
        fillRenderer = _a.fillRenderer,
        eventRenderer = _a.eventRenderer,
        mirrorRenderer = _a.mirrorRenderer;

    fillRenderer.computeSizes(isResize);
    eventRenderer.computeSizes(isResize);
    mirrorRenderer.computeSizes(isResize);
    fillRenderer.assignSizes(isResize);
    eventRenderer.assignSizes(isResize);
    mirrorRenderer.assignSizes(isResize);
  };

  return TimelineLane;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

var TimelineLaneSlicer =
/** @class */
function (_super) {
  __extends(TimelineLaneSlicer, _super);

  function TimelineLaneSlicer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimelineLaneSlicer.prototype.sliceRange = function (origRange, timeAxis) {
    var tDateProfile = timeAxis.tDateProfile;
    var _a = timeAxis.props,
        dateProfile = _a.dateProfile,
        dateProfileGenerator = _a.dateProfileGenerator;
    var dateEnv = timeAxis.context.dateEnv;
    var normalRange = normalizeRange(origRange, tDateProfile, dateEnv);
    var segs = []; // protect against when the span is entirely in an invalid date region

    if (timeAxis.computeDateSnapCoverage(normalRange.start) < timeAxis.computeDateSnapCoverage(normalRange.end)) {
      // intersect the footprint's range with the grid's range
      var slicedRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(normalRange, tDateProfile.normalizedRange);

      if (slicedRange) {
        segs.push({
          start: slicedRange.start,
          end: slicedRange.end,
          isStart: slicedRange.start.valueOf() === normalRange.start.valueOf() && isValidDate(slicedRange.start, tDateProfile, dateProfile, dateProfileGenerator),
          isEnd: slicedRange.end.valueOf() === normalRange.end.valueOf() && isValidDate(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addMs"])(slicedRange.end, -1), tDateProfile, dateProfile, dateProfileGenerator)
        });
      }
    }

    return segs;
  };

  return TimelineLaneSlicer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Slicer"]);

var TimelineView =
/** @class */
function (_super) {
  __extends(TimelineView, _super);

  function TimelineView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
    _this.startInteractive = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._startInteractive, _this._stopInteractive);
    return _this;
  }

  TimelineView.prototype._startInteractive = function (timeAxisEl) {
    this.context.calendar.registerInteractiveComponent(this, {
      el: timeAxisEl
    });
  };

  TimelineView.prototype._stopInteractive = function () {
    this.context.calendar.unregisterInteractiveComponent(this);
  };

  TimelineView.prototype.render = function (props, context) {
    _super.prototype.render.call(this, props, context); // flags for updateSize, addScroll. and _renderSkeleton/_unrenderSkeleton


    this.renderSkeleton(this.context);
    this.timeAxis.receiveProps({
      dateProfileGenerator: props.dateProfileGenerator,
      dateProfile: props.dateProfile
    }, context);
    this.startInteractive(this.timeAxis.slats.el);
    this.lane.receiveProps(__assign({}, props, {
      nextDayThreshold: this.context.nextDayThreshold
    }), context);
    this.startNowIndicator(props.dateProfile, props.dateProfileGenerator);
  };

  TimelineView.prototype.destroy = function () {
    this.startInteractive.unrender(); // "unrender" a weird name

    this.renderSkeleton.unrender();

    _super.prototype.destroy.call(this);
  };

  TimelineView.prototype._renderSkeleton = function (context) {
    this.el.classList.add('fc-timeline');

    if (context.options.eventOverlap === false) {
      this.el.classList.add('fc-no-overlap');
    }

    this.el.innerHTML = this.renderSkeletonHtml();
    this.timeAxis = new TimeAxis(this.el.querySelector('thead .fc-time-area'), this.el.querySelector('tbody .fc-time-area'));
    this.lane = new TimelineLane(this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl, this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, this.timeAxis);
  };

  TimelineView.prototype._unrenderSkeleton = function () {
    this.el.classList.remove('fc-timeline');
    this.el.classList.remove('fc-no-overlap');
    this.timeAxis.destroy();
    this.lane.destroy();
  };

  TimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.context.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  TimelineView.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.timeAxis.updateSize(isResize, totalHeight, isAuto);
    this.lane.updateSize(isResize);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile, dateProfileGenerator);
  };

  TimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  TimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scroll System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  TimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize); // will call applyDateScroll


    var calendar = this.context.calendar; // avoid updating stickyscroll too often
    // TODO: repeat code as ResourceTimelineView::updateSize

    if (isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      this.timeAxis.updateStickyScrollers();
    }
  };

  TimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  TimelineView.prototype.queryScroll = function () {
    var enhancedScroll = this.timeAxis.layout.bodyScroller.enhancedScroll;
    return {
      top: enhancedScroll.getScrollTop(),
      left: enhancedScroll.getScrollLeft()
    };
  }; // Hit System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
  };

  TimelineView.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    var slatHit = this.timeAxis.slats.positionToHit(positionLeft);

    if (slatHit) {
      return {
        component: this,
        dateSpan: slatHit.dateSpan,
        rect: {
          left: slatHit.left,
          right: slatHit.right,
          top: 0,
          bottom: elHeight
        },
        dayEl: slatHit.dayEl,
        layer: 0
      };
    }
  };

  return TimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  defaultView: 'timelineDay',
  views: {
    timeline: {
      class: TimelineView,
      eventResizableFromStart: true // how is this consumed for TimelineView tho?

    },
    timelineDay: {
      type: 'timeline',
      duration: {
        days: 1
      }
    },
    timelineWeek: {
      type: 'timeline',
      duration: {
        weeks: 1
      }
    },
    timelineMonth: {
      type: 'timeline',
      duration: {
        months: 1
      }
    },
    timelineYear: {
      type: 'timeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,