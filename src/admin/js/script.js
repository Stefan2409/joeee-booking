/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./development/admin/js/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/admin/js/components/test.js":
/*!*************************************************!*\
  !*** ./development/admin/js/components/test.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// @TODO This is an example console.log(). Remove for production
console.log('testadmin.js');

/***/ }),

/***/ "./development/admin/js/script.js":
/*!****************************************!*\
  !*** ./development/admin/js/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_test__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/test */ "./development/admin/js/components/test.js");
/* harmony import */ var _components_test__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_test__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/resource-timeline */ "./node_modules/@fullcalendar/resource-timeline/main.esm.js");
/**
 * All of the code for your admin-facing JavaScript source
 * should reside in the file "development/admin/js/script.js".
 *
 * Note: It has been assumed you will write jQuery code here, so the
 * $ function reference has been prepared (import $ from 'jquery')for usage within the scope
 * of this function.
 *
 * This enables you to define handlers, for when the DOM is ready:
 *
 * $(function() {
 *
 * });
 *
 * When the window is loaded:
 *
 * $( window ).load(function() {
 *
 * });
 *
 * ...and/or other possibilities.
 *
 * Ideally, it is not considered best practise to attach more than a
 * single DOM-ready or window-load handler for a particular page.
 * Although scripts in the WordPress core, Plugins and Themes may be
 * practising this, we should strive to set a better example in our own work.
 *
 * The file is enqueued from src/admin/class-assets.php.
 */
 // @TODO This is an example import. Remove for production




var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    _x = _wp$i18n._x,
    _n = _wp$i18n._n,
    _nx = _wp$i18n._nx;
jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).ready(function () {// jQuery methods go here...
});
document.addEventListener('DOMContentLoaded', function () {
  var setLocale = 'en';
  var calendarEl = document.getElementById('joeeeBookingCalendar');
  var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__["Calendar"](calendarEl, {
    schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
    plugins: [_fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_3__["default"]],
    aspectRatio: 1.5,
    resourceAreaWidth: '10%',
    slotDuration: '12:00',
    locale: setLocale,
    header: {
      left: 'addRoom, today, prev, next',
      center: 'title',
      right: 'timelineThirtyDays, month'
    },
    customButtons: {
      addRoom: {
        text: __('Add room', 'joeee-booking')
      }
    },
    defaultView: 'timelineThirtyDays',
    views: {
      timelineThirtyDays: {
        type: 'resourceTimeline',
        labelText: 'Test',
        duration: {
          days: 31
        }
      }
    },
    resourceColumns: [{
      labelText: __('Room', 'joeee-booking'),
      field: 'title',
      width: '15px'
    }, {
      labelText: __('Capacity', 'joeee-booking'),
      field: 'capacity'
    }],
    resources: [{
      id: 'a',
      title: 'Auditorium A',
      capacity: 40
    }, {
      id: 'b',
      title: 'Auditorium B',
      capacity: 60
    }]
  });
  calendar.render();
});

/***/ }),

/***/ "./node_modules/@fullcalendar/core/main.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/core/main.esm.js ***!
  \*****************************************************/
/*! exports provided: Calendar, Component, DateComponent, DateEnv, DateProfileGenerator, DayHeader, DaySeries, DayTable, ElementDragging, ElementScrollController, EmitterMixin, EventApi, FgEventRenderer, FillRenderer, Interaction, Mixin, NamedTimeZoneImpl, PositionCache, ScrollComponent, ScrollController, Slicer, Splitter, Theme, View, WindowScrollController, addDays, addDurations, addMs, addWeeks, allowContextMenu, allowSelection, appendToElement, applyAll, applyMutationToEventStore, applyStyle, applyStyleProp, asRoughMinutes, asRoughMs, asRoughSeconds, buildGotoAnchorHtml, buildSegCompareObj, capitaliseFirstLetter, combineEventUis, compareByFieldSpec, compareByFieldSpecs, compareNumbers, compensateScroll, computeClippingRect, computeEdges, computeFallbackHeaderFormat, computeHeightAndMargins, computeInnerRect, computeRect, computeVisibleDayRange, config, constrainPoint, createDuration, createElement, createEmptyEventStore, createEventInstance, createFormatter, createPlugin, cssToStr, debounce, diffDates, diffDayAndTime, diffDays, diffPoints, diffWeeks, diffWholeDays, diffWholeWeeks, disableCursor, distributeHeight, elementClosest, elementMatches, enableCursor, eventTupleToStore, filterEventStoreDefs, filterHash, findChildren, findElements, flexibleCompare, forceClassName, formatDate, formatIsoTimeString, formatRange, getAllDayHtml, getClippingParents, getDayClasses, getElSeg, getRectCenter, getRelevantEvents, globalDefaults, greatestDurationDenominator, hasBgRendering, htmlEscape, htmlToElement, insertAfterElement, interactionSettingsStore, interactionSettingsToStore, intersectRanges, intersectRects, isArraysEqual, isDateSpansEqual, isInt, isInteractionValid, isMultiDayRange, isPropsEqual, isPropsValid, isSingleDay, isValidDate, listenBySelector, mapHash, matchCellWidths, memoize, memoizeOutput, memoizeRendering, mergeEventStores, multiplyDuration, padStart, parseBusinessHours, parseDragMeta, parseEventDef, parseFieldSpecs, parseMarker, pointInsideRect, prependToElement, preventContextMenu, preventDefault, preventSelection, processScopedUiProps, rangeContainsMarker, rangeContainsRange, rangesEqual, rangesIntersect, refineProps, removeElement, removeExact, renderDateCell, requestJson, sliceEventStore, startOfDay, subtractInnerElHeight, translateRect, uncompensateScroll, undistributeHeight, unpromisify, version, whenTransitionDone, wholeDivideDurations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calendar", function() { return Calendar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateComponent", function() { return DateComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateEnv", function() { return DateEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateProfileGenerator", function() { return DateProfileGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayHeader", function() { return DayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DaySeries", function() { return DaySeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayTable", function() { return DayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementDragging", function() { return ElementDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementScrollController", function() { return ElementScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmitterMixin", function() { return EmitterMixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventApi", function() { return EventApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FgEventRenderer", function() { return FgEventRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FillRenderer", function() { return FillRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interaction", function() { return Interaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mixin", function() { return Mixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedTimeZoneImpl", function() { return NamedTimeZoneImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionCache", function() { return PositionCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollComponent", function() { return ScrollComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollController", function() { return ScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slicer", function() { return Slicer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Splitter", function() { return Splitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Theme", function() { return Theme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View", function() { return View; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindowScrollController", function() { return WindowScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDays", function() { return addDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDurations", function() { return addDurations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMs", function() { return addMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addWeeks", function() { return addWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowContextMenu", function() { return allowContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowSelection", function() { return allowSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToElement", function() { return appendToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyAll", function() { return applyAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMutationToEventStore", function() { return applyMutationToEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyle", function() { return applyStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyleProp", function() { return applyStyleProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMinutes", function() { return asRoughMinutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMs", function() { return asRoughMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughSeconds", function() { return asRoughSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildGotoAnchorHtml", function() { return buildGotoAnchorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildSegCompareObj", function() { return buildSegCompareObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitaliseFirstLetter", function() { return capitaliseFirstLetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineEventUis", function() { return combineEventUis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpec", function() { return compareByFieldSpec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpecs", function() { return compareByFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareNumbers", function() { return compareNumbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compensateScroll", function() { return compensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeClippingRect", function() { return computeClippingRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEdges", function() { return computeEdges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeFallbackHeaderFormat", function() { return computeFallbackHeaderFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeHeightAndMargins", function() { return computeHeightAndMargins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeInnerRect", function() { return computeInnerRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeRect", function() { return computeRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeVisibleDayRange", function() { return computeVisibleDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constrainPoint", function() { return constrainPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDuration", function() { return createDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEmptyEventStore", function() { return createEmptyEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEventInstance", function() { return createEventInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFormatter", function() { return createFormatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlugin", function() { return createPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssToStr", function() { return cssToStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDates", function() { return diffDates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDayAndTime", function() { return diffDayAndTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDays", function() { return diffDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffPoints", function() { return diffPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWeeks", function() { return diffWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeDays", function() { return diffWholeDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeWeeks", function() { return diffWholeWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableCursor", function() { return disableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distributeHeight", function() { return distributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementClosest", function() { return elementClosest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementMatches", function() { return elementMatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableCursor", function() { return enableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventTupleToStore", function() { return eventTupleToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterEventStoreDefs", function() { return filterEventStoreDefs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterHash", function() { return filterHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findChildren", function() { return findChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findElements", function() { return findElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flexibleCompare", function() { return flexibleCompare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceClassName", function() { return forceClassName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatIsoTimeString", function() { return formatIsoTimeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatRange", function() { return formatRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllDayHtml", function() { return getAllDayHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClippingParents", function() { return getClippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDayClasses", function() { return getDayClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElSeg", function() { return getElSeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRectCenter", function() { return getRectCenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelevantEvents", function() { return getRelevantEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "globalDefaults", function() { return globalDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greatestDurationDenominator", function() { return greatestDurationDenominator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasBgRendering", function() { return hasBgRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlEscape", function() { return htmlEscape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlToElement", function() { return htmlToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfterElement", function() { return insertAfterElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsStore", function() { return interactionSettingsStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsToStore", function() { return interactionSettingsToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRanges", function() { return intersectRanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRects", function() { return intersectRects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArraysEqual", function() { return isArraysEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDateSpansEqual", function() { return isDateSpansEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return isInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteractionValid", function() { return isInteractionValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMultiDayRange", function() { return isMultiDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsEqual", function() { return isPropsEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsValid", function() { return isPropsValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSingleDay", function() { return isSingleDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidDate", function() { return isValidDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listenBySelector", function() { return listenBySelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapHash", function() { return mapHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchCellWidths", function() { return matchCellWidths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return memoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeOutput", function() { return memoizeOutput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeRendering", function() { return memoizeRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeEventStores", function() { return mergeEventStores; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyDuration", function() { return multiplyDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padStart", function() { return padStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBusinessHours", function() { return parseBusinessHours; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDragMeta", function() { return parseDragMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseEventDef", function() { return parseEventDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFieldSpecs", function() { return parseFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseMarker", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointInsideRect", function() { return pointInsideRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToElement", function() { return prependToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventContextMenu", function() { return preventContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventDefault", function() { return preventDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventSelection", function() { return preventSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processScopedUiProps", function() { return processScopedUiProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsMarker", function() { return rangeContainsMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsRange", function() { return rangeContainsRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesEqual", function() { return rangesEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesIntersect", function() { return rangesIntersect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refineProps", function() { return refineProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeElement", function() { return removeElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeExact", function() { return removeExact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDateCell", function() { return renderDateCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestJson", function() { return requestJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceEventStore", function() { return sliceEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startOfDay", function() { return startOfDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtractInnerElHeight", function() { return subtractInnerElHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateRect", function() { return translateRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncompensateScroll", function() { return uncompensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undistributeHeight", function() { return undistributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unpromisify", function() { return unpromisify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenTransitionDone", function() { return whenTransitionDone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wholeDivideDurations", function() { return wholeDivideDurations; });
/*!
FullCalendar Core Package v4.3.1
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/
// Creating
// ----------------------------------------------------------------------------------------------------------------
var elementPropHash = {
  className: true,
  colSpan: true,
  rowSpan: true
};
var containerTagHash = {
  '<tr': 'tbody',
  '<td': 'tr'
};

function createElement(tagName, attrs, content) {
  var el = document.createElement(tagName);

  if (attrs) {
    for (var attrName in attrs) {
      if (attrName === 'style') {
        applyStyle(el, attrs[attrName]);
      } else if (elementPropHash[attrName]) {
        el[attrName] = attrs[attrName];
      } else {
        el.setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  if (typeof content === 'string') {
    el.innerHTML = content; // shortcut. no need to process HTML in any way
  } else if (content != null) {
    appendToElement(el, content);
  }

  return el;
}

function htmlToElement(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.firstChild;
}

function htmlToElements(html) {
  return Array.prototype.slice.call(htmlToNodeList(html));
}

function htmlToNodeList(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.childNodes;
} // assumes html already trimmed and tag names are lowercase


function computeContainerTag(html) {
  return containerTagHash[html.substr(0, 3) // faster than using regex
  ] || 'div';
}

function appendToElement(el, content) {
  var childNodes = normalizeContent(content);

  for (var i = 0; i < childNodes.length; i++) {
    el.appendChild(childNodes[i]);
  }
}

function prependToElement(parent, content) {
  var newEls = normalizeContent(content);
  var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children

  for (var i = 0; i < newEls.length; i++) {
    parent.insertBefore(newEls[i], afterEl);
  }
}

function insertAfterElement(refEl, content) {
  var newEls = normalizeContent(content);
  var afterEl = refEl.nextSibling || null;

  for (var i = 0; i < newEls.length; i++) {
    refEl.parentNode.insertBefore(newEls[i], afterEl);
  }
}

function normalizeContent(content) {
  var els;

  if (typeof content === 'string') {
    els = htmlToElements(content);
  } else if (content instanceof Node) {
    els = [content];
  } else {
    // Node[] or NodeList
    els = Array.prototype.slice.call(content);
  }

  return els;
}

function removeElement(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
} // Querying
// ----------------------------------------------------------------------------------------------------------------
// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


var matchesMethod = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.msMatchesSelector;

var closestMethod = Element.prototype.closest || function (selector) {
  // polyfill
  var el = this;

  if (!document.documentElement.contains(el)) {
    return null;
  }

  do {
    if (elementMatches(el, selector)) {
      return el;
    }

    el = el.parentElement || el.parentNode;
  } while (el !== null && el.nodeType === 1);

  return null;
};

function elementClosest(el, selector) {
  return closestMethod.call(el, selector);
}

function elementMatches(el, selector) {
  return matchesMethod.call(el, selector);
} // accepts multiple subject els
// returns a real array. good for methods like forEach


function findElements(container, selector) {
  var containers = container instanceof HTMLElement ? [container] : container;
  var allMatches = [];

  for (var i = 0; i < containers.length; i++) {
    var matches = containers[i].querySelectorAll(selector);

    for (var j = 0; j < matches.length; j++) {
      allMatches.push(matches[j]);
    }
  }

  return allMatches;
} // accepts multiple subject els
// only queries direct child elements


function findChildren(parent, selector) {
  var parents = parent instanceof HTMLElement ? [parent] : parent;
  var allMatches = [];

  for (var i = 0; i < parents.length; i++) {
    var childNodes = parents[i].children; // only ever elements

    for (var j = 0; j < childNodes.length; j++) {
      var childNode = childNodes[j];

      if (!selector || elementMatches(childNode, selector)) {
        allMatches.push(childNode);
      }
    }
  }

  return allMatches;
} // Attributes
// ----------------------------------------------------------------------------------------------------------------


function forceClassName(el, className, bool) {
  if (bool) {
    el.classList.add(className);
  } else {
    el.classList.remove(className);
  }
} // Style
// ----------------------------------------------------------------------------------------------------------------


var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;

function applyStyle(el, props) {
  for (var propName in props) {
    applyStyleProp(el, propName, props[propName]);
  }
}

function applyStyleProp(el, name, val) {
  if (val == null) {
    el.style[name] = '';
  } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {
    el.style[name] = val + 'px';
  } else {
    el.style[name] = val;
  }
}

function pointInsideRect(point, rect) {
  return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
} // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false


function intersectRects(rect1, rect2) {
  var res = {
    left: Math.max(rect1.left, rect2.left),
    right: Math.min(rect1.right, rect2.right),
    top: Math.max(rect1.top, rect2.top),
    bottom: Math.min(rect1.bottom, rect2.bottom)
  };

  if (res.left < res.right && res.top < res.bottom) {
    return res;
  }

  return false;
}

function translateRect(rect, deltaX, deltaY) {
  return {
    left: rect.left + deltaX,
    right: rect.right + deltaX,
    top: rect.top + deltaY,
    bottom: rect.bottom + deltaY
  };
} // Returns a new point that will have been moved to reside within the given rectangle


function constrainPoint(point, rect) {
  return {
    left: Math.min(Math.max(point.left, rect.left), rect.right),
    top: Math.min(Math.max(point.top, rect.top), rect.bottom)
  };
} // Returns a point that is the center of the given rectangle


function getRectCenter(rect) {
  return {
    left: (rect.left + rect.right) / 2,
    top: (rect.top + rect.bottom) / 2
  };
} // Subtracts point2's coordinates from point1's coordinates, returning a delta


function diffPoints(point1, point2) {
  return {
    left: point1.left - point2.left,
    top: point1.top - point2.top
  };
} // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side


var isRtlScrollbarOnLeft = null;

function getIsRtlScrollbarOnLeft() {
  if (isRtlScrollbarOnLeft === null) {
    isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
  }

  return isRtlScrollbarOnLeft;
}

function computeIsRtlScrollbarOnLeft() {
  var outerEl = createElement('div', {
    style: {
      position: 'absolute',
      top: -1000,
      left: 0,
      border: 0,
      padding: 0,
      overflow: 'scroll',
      direction: 'rtl'
    }
  }, '<div></div>');
  document.body.appendChild(outerEl);
  var innerEl = outerEl.firstChild;
  var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
  removeElement(outerEl);
  return res;
} // The scrollbar width computations in computeEdges are sometimes flawed when it comes to
// retina displays, rounding, and IE11. Massage them into a usable value.


function sanitizeScrollbarWidth(width) {
  width = Math.max(0, width); // no negatives

  width = Math.round(width);
  return width;
}

function computeEdges(el, getPadding) {
  if (getPadding === void 0) {
    getPadding = false;
  }

  var computedStyle = window.getComputedStyle(el);
  var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
  var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
  var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
  var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0; // must use offset(Width|Height) because compatible with client(Width|Height)

  var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);
  var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);
  var res = {
    borderLeft: borderLeft,
    borderRight: borderRight,
    borderTop: borderTop,
    borderBottom: borderBottom,
    scrollbarBottom: scrollbarBottom,
    scrollbarLeft: 0,
    scrollbarRight: 0
  };

  if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {
    // is the scrollbar on the left side?
    res.scrollbarLeft = scrollbarLeftRight;
  } else {
    res.scrollbarRight = scrollbarLeftRight;
  }

  if (getPadding) {
    res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
    res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
    res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
    res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
  }

  return res;
}

function computeInnerRect(el, goWithinPadding) {
  if (goWithinPadding === void 0) {
    goWithinPadding = false;
  }

  var outerRect = computeRect(el);
  var edges = computeEdges(el, goWithinPadding);
  var res = {
    left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
    right: outerRect.right - edges.borderRight - edges.scrollbarRight,
    top: outerRect.top + edges.borderTop,
    bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
  };

  if (goWithinPadding) {
    res.left += edges.paddingLeft;
    res.right -= edges.paddingRight;
    res.top += edges.paddingTop;
    res.bottom -= edges.paddingBottom;
  }

  return res;
}

function computeRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + window.pageXOffset,
    top: rect.top + window.pageYOffset,
    right: rect.right + window.pageXOffset,
    bottom: rect.bottom + window.pageYOffset
  };
}

function computeViewportRect() {
  return {
    left: window.pageXOffset,
    right: window.pageXOffset + document.documentElement.clientWidth,
    top: window.pageYOffset,
    bottom: window.pageYOffset + document.documentElement.clientHeight
  };
}

function computeHeightAndMargins(el) {
  return el.getBoundingClientRect().height + computeVMargins(el);
}

function computeVMargins(el) {
  var computed = window.getComputedStyle(el);
  return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);
} // does not return window


function getClippingParents(el) {
  var parents = [];

  while (el instanceof HTMLElement) {
    // will stop when gets to document or null
    var computedStyle = window.getComputedStyle(el);

    if (computedStyle.position === 'fixed') {
      break;
    }

    if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {
      parents.push(el);
    }

    el = el.parentNode;
  }

  return parents;
}

function computeClippingRect(el) {
  return getClippingParents(el).map(function (el) {
    return computeInnerRect(el);
  }).concat(computeViewportRect()).reduce(function (rect0, rect1) {
    return intersectRects(rect0, rect1) || rect1; // should always intersect
  });
} // Stops a mouse/touch event from doing it's native browser action


function preventDefault(ev) {
  ev.preventDefault();
} // Event Delegation
// ----------------------------------------------------------------------------------------------------------------


function listenBySelector(container, eventType, selector, handler) {
  function realHandler(ev) {
    var matchedChild = elementClosest(ev.target, selector);

    if (matchedChild) {
      handler.call(matchedChild, ev, matchedChild);
    }
  }

  container.addEventListener(eventType, realHandler);
  return function () {
    container.removeEventListener(eventType, realHandler);
  };
}

function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
  var currentMatchedChild;
  return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {
    if (matchedChild !== currentMatchedChild) {
      currentMatchedChild = matchedChild;
      onMouseEnter(ev, matchedChild);

      var realOnMouseLeave_1 = function (ev) {
        currentMatchedChild = null;
        onMouseLeave(ev, matchedChild);
        matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);
      }; // listen to the next mouseleave, and then unattach


      matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);
    }
  });
} // Animation
// ----------------------------------------------------------------------------------------------------------------


var transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend']; // triggered only when the next single subsequent transition finishes

function whenTransitionDone(el, callback) {
  var realCallback = function (ev) {
    callback(ev);
    transitionEventNames.forEach(function (eventName) {
      el.removeEventListener(eventName, realCallback);
    });
  };

  transitionEventNames.forEach(function (eventName) {
    el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
  });
}

var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']; // Adding

function addWeeks(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n * 7;
  return arrayToUtcDate(a);
}

function addDays(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n;
  return arrayToUtcDate(a);
}

function addMs(m, n) {
  var a = dateToUtcArray(m);
  a[6] += n;
  return arrayToUtcDate(a);
} // Diffing (all return floats)


function diffWeeks(m0, m1) {
  return diffDays(m0, m1) / 7;
}

function diffDays(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);
}

function diffHours(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);
}

function diffMinutes(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60);
}

function diffSeconds(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / 1000;
}

function diffDayAndTime(m0, m1) {
  var m0day = startOfDay(m0);
  var m1day = startOfDay(m1);
  return {
    years: 0,
    months: 0,
    days: Math.round(diffDays(m0day, m1day)),
    milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
  };
} // Diffing Whole Units


function diffWholeWeeks(m0, m1) {
  var d = diffWholeDays(m0, m1);

  if (d !== null && d % 7 === 0) {
    return d / 7;
  }

  return null;
}

function diffWholeDays(m0, m1) {
  if (timeAsMs(m0) === timeAsMs(m1)) {
    return Math.round(diffDays(m0, m1));
  }

  return null;
} // Start-Of


function startOfDay(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);
}

function startOfHour(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);
}

function startOfMinute(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);
}

function startOfSecond(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);
} // Week Computation


function weekOfYear(marker, dow, doy) {
  var y = marker.getUTCFullYear();
  var w = weekOfGivenYear(marker, y, dow, doy);

  if (w < 1) {
    return weekOfGivenYear(marker, y - 1, dow, doy);
  }

  var nextW = weekOfGivenYear(marker, y + 1, dow, doy);

  if (nextW >= 1) {
    return Math.min(w, nextW);
  }

  return w;
}

function weekOfGivenYear(marker, year, dow, doy) {
  var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);
  var dayStart = startOfDay(marker);
  var days = Math.round(diffDays(firstWeekStart, dayStart));
  return Math.floor(days / 7) + 1; // zero-indexed
} // start-of-first-week - start-of-year


function firstWeekOffset(year, dow, doy) {
  // first-week day -- which january is always in the first week (4 for iso, 1 for other)
  var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd

  var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
} // Array Conversion


function dateToLocalArray(date) {
  return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];
}

function arrayToLocalDate(a) {
  return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month
  a[3] || 0, a[4] || 0, a[5] || 0);
}

function dateToUtcArray(date) {
  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];
}

function arrayToUtcDate(a) {
  // according to web standards (and Safari), a month index is required.
  // massage if only given a year.
  if (a.length === 1) {
    a = a.concat([0]);
  }

  return new Date(Date.UTC.apply(Date, a));
} // Other Utils


function isValidDate(m) {
  return !isNaN(m.valueOf());
}

function timeAsMs(m) {
  return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
}

var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];
var PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/; // Parsing and Creation

function createDuration(input, unit) {
  var _a;

  if (typeof input === 'string') {
    return parseString(input);
  } else if (typeof input === 'object' && input) {
    // non-null object
    return normalizeObject(input);
  } else if (typeof input === 'number') {
    return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));
  } else {
    return null;
  }
}

function parseString(s) {
  var m = PARSE_RE.exec(s);

  if (m) {
    var sign = m[1] ? -1 : 1;
    return {
      years: 0,
      months: 0,
      days: sign * (m[2] ? parseInt(m[2], 10) : 0),
      milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours
      (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes
      (m[5] ? parseInt(m[5], 10) : 0) * 1000 + ( // seconds
      m[6] ? parseInt(m[6], 10) : 0) // ms
      )
    };
  }

  return null;
}

function normalizeObject(obj) {
  return {
    years: obj.years || obj.year || 0,
    months: obj.months || obj.month || 0,
    days: (obj.days || obj.day || 0) + getWeeksFromInput(obj) * 7,
    milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours
    (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes
    (obj.seconds || obj.second || 0) * 1000 + ( // seconds
    obj.milliseconds || obj.millisecond || obj.ms || 0) // ms

  };
}

function getWeeksFromInput(obj) {
  return obj.weeks || obj.week || 0;
} // Equality


function durationsEqual(d0, d1) {
  return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
}

function isSingleDay(dur) {
  return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;
} // Simple Math


function addDurations(d0, d1) {
  return {
    years: d0.years + d1.years,
    months: d0.months + d1.months,
    days: d0.days + d1.days,
    milliseconds: d0.milliseconds + d1.milliseconds
  };
}

function subtractDurations(d1, d0) {
  return {
    years: d1.years - d0.years,
    months: d1.months - d0.months,
    days: d1.days - d0.days,
    milliseconds: d1.milliseconds - d0.milliseconds
  };
}

function multiplyDuration(d, n) {
  return {
    years: d.years * n,
    months: d.months * n,
    days: d.days * n,
    milliseconds: d.milliseconds * n
  };
} // Conversions
// "Rough" because they are based on average-case Gregorian months/years


function asRoughYears(dur) {
  return asRoughDays(dur) / 365;
}

function asRoughMonths(dur) {
  return asRoughDays(dur) / 30;
}

function asRoughDays(dur) {
  return asRoughMs(dur) / 864e5;
}

function asRoughMinutes(dur) {
  return asRoughMs(dur) / (1000 * 60);
}

function asRoughSeconds(dur) {
  return asRoughMs(dur) / 1000;
}

function asRoughMs(dur) {
  return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
} // Advanced Math


function wholeDivideDurations(numerator, denominator) {
  var res = null;

  for (var i = 0; i < INTERNAL_UNITS.length; i++) {
    var unit = INTERNAL_UNITS[i];

    if (denominator[unit]) {
      var localRes = numerator[unit] / denominator[unit];

      if (!isInt(localRes) || res !== null && res !== localRes) {
        return null;
      }

      res = localRes;
    } else if (numerator[unit]) {
      // needs to divide by something but can't!
      return null;
    }
  }

  return res;
}

function greatestDurationDenominator(dur, dontReturnWeeks) {
  var ms = dur.milliseconds;

  if (ms) {
    if (ms % 1000 !== 0) {
      return {
        unit: 'millisecond',
        value: ms
      };
    }

    if (ms % (1000 * 60) !== 0) {
      return {
        unit: 'second',
        value: ms / 1000
      };
    }

    if (ms % (1000 * 60 * 60) !== 0) {
      return {
        unit: 'minute',
        value: ms / (1000 * 60)
      };
    }

    if (ms) {
      return {
        unit: 'hour',
        value: ms / (1000 * 60 * 60)
      };
    }
  }

  if (dur.days) {
    if (!dontReturnWeeks && dur.days % 7 === 0) {
      return {
        unit: 'week',
        value: dur.days / 7
      };
    }

    return {
      unit: 'day',
      value: dur.days
    };
  }

  if (dur.months) {
    return {
      unit: 'month',
      value: dur.months
    };
  }

  if (dur.years) {
    return {
      unit: 'year',
      value: dur.years
    };
  }

  return {
    unit: 'millisecond',
    value: 0
  };
}
/* FullCalendar-specific DOM Utilities
----------------------------------------------------------------------------------------------------------------------*/
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.


function compensateScroll(rowEl, scrollbarWidths) {
  if (scrollbarWidths.left) {
    applyStyle(rowEl, {
      borderLeftWidth: 1,
      marginLeft: scrollbarWidths.left - 1
    });
  }

  if (scrollbarWidths.right) {
    applyStyle(rowEl, {
      borderRightWidth: 1,
      marginRight: scrollbarWidths.right - 1
    });
  }
} // Undoes compensateScroll and restores all borders/margins


function uncompensateScroll(rowEl) {
  applyStyle(rowEl, {
    marginLeft: '',
    marginRight: '',
    borderLeftWidth: '',
    borderRightWidth: ''
  });
} // Make the mouse cursor express that an event is not allowed in the current area


function disableCursor() {
  document.body.classList.add('fc-not-allowed');
} // Returns the mouse cursor to its original look


function enableCursor() {
  document.body.classList.remove('fc-not-allowed');
} // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
// reduces the available height.


function distributeHeight(els, availableHeight, shouldRedistribute) {
  // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
  // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
  var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element

  var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*

  var flexEls = []; // elements that are allowed to expand. array of DOM nodes

  var flexOffsets = []; // amount of vertical space it takes up

  var flexHeights = []; // actual css height

  var usedHeight = 0;
  undistributeHeight(els); // give all elements their natural height
  // find elements that are below the recommended height (expandable).
  // important to query for heights in a single first pass (to avoid reflow oscillation).

  els.forEach(function (el, i) {
    var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
    var naturalHeight = el.getBoundingClientRect().height;
    var naturalOffset = naturalHeight + computeVMargins(el);

    if (naturalOffset < minOffset) {
      flexEls.push(el);
      flexOffsets.push(naturalOffset);
      flexHeights.push(naturalHeight);
    } else {
      // this element stretches past recommended height (non-expandable). mark the space as occupied.
      usedHeight += naturalOffset;
    }
  }); // readjust the recommended height to only consider the height available to non-maxed-out rows.

  if (shouldRedistribute) {
    availableHeight -= usedHeight;
    minOffset1 = Math.floor(availableHeight / flexEls.length);
    minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
  } // assign heights to all expandable elements


  flexEls.forEach(function (el, i) {
    var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
    var naturalOffset = flexOffsets[i];
    var naturalHeight = flexHeights[i];
    var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding

    if (naturalOffset < minOffset) {
      // we check this again because redistribution might have changed things
      el.style.height = newHeight + 'px';
    }
  });
} // Undoes distrubuteHeight, restoring all els to their natural height


function undistributeHeight(els) {
  els.forEach(function (el) {
    el.style.height = '';
  });
} // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline


function matchCellWidths(els) {
  var maxInnerWidth = 0;
  els.forEach(function (el) {
    var innerEl = el.firstChild; // hopefully an element

    if (innerEl instanceof HTMLElement) {
      var innerWidth_1 = innerEl.getBoundingClientRect().width;

      if (innerWidth_1 > maxInnerWidth) {
        maxInnerWidth = innerWidth_1;
      }
    }
  });
  maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance

  els.forEach(function (el) {
    el.style.width = maxInnerWidth + 'px';
  });
  return maxInnerWidth;
} // Given one element that resides inside another,
// Subtracts the height of the inner element from the outer element.


function subtractInnerElHeight(outerEl, innerEl) {
  // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
  var reflowStyleProps = {
    position: 'relative',
    left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll

  };
  applyStyle(outerEl, reflowStyleProps);
  applyStyle(innerEl, reflowStyleProps);
  var diff = // grab the dimensions
  outerEl.getBoundingClientRect().height - innerEl.getBoundingClientRect().height; // undo hack

  var resetStyleProps = {
    position: '',
    left: ''
  };
  applyStyle(outerEl, resetStyleProps);
  applyStyle(innerEl, resetStyleProps);
  return diff;
}
/* Selection
----------------------------------------------------------------------------------------------------------------------*/


function preventSelection(el) {
  el.classList.add('fc-unselectable');
  el.addEventListener('selectstart', preventDefault);
}

function allowSelection(el) {
  el.classList.remove('fc-unselectable');
  el.removeEventListener('selectstart', preventDefault);
}
/* Context Menu
----------------------------------------------------------------------------------------------------------------------*/


function preventContextMenu(el) {
  el.addEventListener('contextmenu', preventDefault);
}

function allowContextMenu(el) {
  el.removeEventListener('contextmenu', preventDefault);
}
/* Object Ordering by Field
----------------------------------------------------------------------------------------------------------------------*/


function parseFieldSpecs(input) {
  var specs = [];
  var tokens = [];
  var i;
  var token;

  if (typeof input === 'string') {
    tokens = input.split(/\s*,\s*/);
  } else if (typeof input === 'function') {
    tokens = [input];
  } else if (Array.isArray(input)) {
    tokens = input;
  }

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    if (typeof token === 'string') {
      specs.push(token.charAt(0) === '-' ? {
        field: token.substring(1),
        order: -1
      } : {
        field: token,
        order: 1
      });
    } else if (typeof token === 'function') {
      specs.push({
        func: token
      });
    }
  }

  return specs;
}

function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
  var i;
  var cmp;

  for (i = 0; i < fieldSpecs.length; i++) {
    cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);

    if (cmp) {
      return cmp;
    }
  }

  return 0;
}

function compareByFieldSpec(obj0, obj1, fieldSpec) {
  if (fieldSpec.func) {
    return fieldSpec.func(obj0, obj1);
  }

  return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
}

function flexibleCompare(a, b) {
  if (!a && !b) {
    return 0;
  }

  if (b == null) {
    return -1;
  }

  if (a == null) {
    return 1;
  }

  if (typeof a === 'string' || typeof b === 'string') {
    return String(a).localeCompare(String(b));
  }

  return a - b;
}
/* String Utilities
----------------------------------------------------------------------------------------------------------------------*/


function capitaliseFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function padStart(val, len) {
  var s = String(val);
  return '000'.substr(0, len - s.length) + s;
}
/* Number Utilities
----------------------------------------------------------------------------------------------------------------------*/


function compareNumbers(a, b) {
  return a - b;
}

function isInt(n) {
  return n % 1 === 0;
}
/* Weird Utilities
----------------------------------------------------------------------------------------------------------------------*/


function applyAll(functions, thisObj, args) {
  if (typeof functions === 'function') {
    // supplied a single function
    functions = [functions];
  }

  if (functions) {
    var i = void 0;
    var ret = void 0;

    for (i = 0; i < functions.length; i++) {
      ret = functions[i].apply(thisObj, args) || ret;
    }

    return ret;
  }
}

function firstDefined() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  for (var i = 0; i < args.length; i++) {
    if (args[i] !== undefined) {
      return args[i];
    }
  }
} // Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714


function debounce(func, wait) {
  var timeout;
  var args;
  var context;
  var timestamp;
  var result;

  var later = function () {
    var last = new Date().valueOf() - timestamp;

    if (last < wait) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    }
  };

  return function () {
    context = this;
    args = arguments;
    timestamp = new Date().valueOf();

    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    return result;
  };
} // Number and Boolean are only types that defaults or not computed for
// TODO: write more comments


function refineProps(rawProps, processors, defaults, leftoverProps) {
  if (defaults === void 0) {
    defaults = {};
  }

  var refined = {};

  for (var key in processors) {
    var processor = processors[key];

    if (rawProps[key] !== undefined) {
      // found
      if (processor === Function) {
        refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;
      } else if (processor) {
        // a refining function?
        refined[key] = processor(rawProps[key]);
      } else {
        refined[key] = rawProps[key];
      }
    } else if (defaults[key] !== undefined) {
      // there's an explicit default
      refined[key] = defaults[key];
    } else {
      // must compute a default
      if (processor === String) {
        refined[key] = ''; // empty string is default for String
      } else if (!processor || processor === Number || processor === Boolean || processor === Function) {
        refined[key] = null; // assign null for other non-custom processor funcs
      } else {
        refined[key] = processor(null); // run the custom processor func
      }
    }
  }

  if (leftoverProps) {
    for (var key in rawProps) {
      if (processors[key] === undefined) {
        leftoverProps[key] = rawProps[key];
      }
    }
  }

  return refined;
}
/* Date stuff that doesn't belong in datelib core
----------------------------------------------------------------------------------------------------------------------*/
// given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.


function computeAlignedDayRange(timedRange) {
  var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
  var start = startOfDay(timedRange.start);
  var end = addDays(start, dayCnt);
  return {
    start: start,
    end: end
  };
} // given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg


function computeVisibleDayRange(timedRange, nextDayThreshold) {
  if (nextDayThreshold === void 0) {
    nextDayThreshold = createDuration(0);
  }

  var startDay = null;
  var endDay = null;

  if (timedRange.end) {
    endDay = startOfDay(timedRange.end);
    var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
    // If the end time is actually inclusively part of the next day and is equal to or
    // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
    // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.

    if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {
      endDay = addDays(endDay, 1);
    }
  }

  if (timedRange.start) {
    startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
    // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.

    if (endDay && endDay <= startDay) {
      endDay = addDays(startDay, 1);
    }
  }

  return {
    start: startDay,
    end: endDay
  };
} // spans from one day into another?


function isMultiDayRange(range) {
  var visibleRange = computeVisibleDayRange(range);
  return diffDays(visibleRange.start, visibleRange.end) > 1;
}

function diffDates(date0, date1, dateEnv, largeUnit) {
  if (largeUnit === 'year') {
    return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
  } else if (largeUnit === 'month') {
    return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
  } else {
    return diffDayAndTime(date0, date1); // returns a duration
  }
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */


var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {
  for (var i = 0; i < recurringTypes.length; i++) {
    var localLeftovers = {};
    var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);

    if (parsed) {
      var allDay = localLeftovers.allDay;
      delete localLeftovers.allDay; // remove from leftovers

      if (allDay == null) {
        allDay = allDayDefault;

        if (allDay == null) {
          allDay = parsed.allDayGuess;

          if (allDay == null) {
            allDay = false;
          }
        }
      }

      __assign(leftovers, localLeftovers);

      return {
        allDay: allDay,
        duration: parsed.duration,
        typeData: parsed.typeData,
        typeId: i
      };
    }
  }

  return null;
}
/*
Event MUST have a recurringDef
*/


function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
  var typeDef = recurringTypes[eventDef.recurringDef.typeId];
  var markers = typeDef.expand(eventDef.recurringDef.typeData, {
    start: dateEnv.subtract(framingRange.start, duration),
    end: framingRange.end
  }, dateEnv); // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to

  if (eventDef.allDay) {
    markers = markers.map(startOfDay);
  }

  return markers;
}

var hasOwnProperty = Object.prototype.hasOwnProperty; // Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.

function mergeProps(propObjs, complexProps) {
  var dest = {};
  var i;
  var name;
  var complexObjs;
  var j;
  var val;
  var props;

  if (complexProps) {
    for (i = 0; i < complexProps.length; i++) {
      name = complexProps[i];
      complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered

      for (j = propObjs.length - 1; j >= 0; j--) {
        val = propObjs[j][name];

        if (typeof val === 'object' && val) {
          // non-null object
          complexObjs.unshift(val);
        } else if (val !== undefined) {
          dest[name] = val; // if there were no objects, this value will be used

          break;
        }
      } // if the trailing values were objects, use the merged value


      if (complexObjs.length) {
        dest[name] = mergeProps(complexObjs);
      }
    }
  } // copy values into the destination, going from last to first


  for (i = propObjs.length - 1; i >= 0; i--) {
    props = propObjs[i];

    for (name in props) {
      if (!(name in dest)) {
        // if already assigned by previous props or complex props, don't reassign
        dest[name] = props[name];
      }
    }
  }

  return dest;
}

function filterHash(hash, func) {
  var filtered = {};

  for (var key in hash) {
    if (func(hash[key], key)) {
      filtered[key] = hash[key];
    }
  }

  return filtered;
}

function mapHash(hash, func) {
  var newHash = {};

  for (var key in hash) {
    newHash[key] = func(hash[key], key);
  }

  return newHash;
}

function arrayToHash(a) {
  var hash = {};

  for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
    var item = a_1[_i];
    hash[item] = true;
  }

  return hash;
}

function hashValuesToArray(obj) {
  var a = [];

  for (var key in obj) {
    a.push(obj[key]);
  }

  return a;
}

function isPropsEqual(obj0, obj1) {
  for (var key in obj0) {
    if (hasOwnProperty.call(obj0, key)) {
      if (!(key in obj1)) {
        return false;
      }
    }
  }

  for (var key in obj1) {
    if (hasOwnProperty.call(obj1, key)) {
      if (obj0[key] !== obj1[key]) {
        return false;
      }
    }
  }

  return true;
}

function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {
  var eventStore = createEmptyEventStore();

  for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {
    var rawEvent = rawEvents_1[_i];
    var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);

    if (tuple) {
      eventTupleToStore(tuple, eventStore);
    }
  }

  return eventStore;
}

function eventTupleToStore(tuple, eventStore) {
  if (eventStore === void 0) {
    eventStore = createEmptyEventStore();
  }

  eventStore.defs[tuple.def.defId] = tuple.def;

  if (tuple.instance) {
    eventStore.instances[tuple.instance.instanceId] = tuple.instance;
  }

  return eventStore;
}

function expandRecurring(eventStore, framingRange, calendar) {
  var dateEnv = calendar.dateEnv;
  var defs = eventStore.defs,
      instances = eventStore.instances; // remove existing recurring instances

  instances = filterHash(instances, function (instance) {
    return !defs[instance.defId].recurringDef;
  });

  for (var defId in defs) {
    var def = defs[defId];

    if (def.recurringDef) {
      var duration = def.recurringDef.duration;

      if (!duration) {
        duration = def.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration;
      }

      var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);

      for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {
        var start = starts_1[_i];
        var instance = createEventInstance(defId, {
          start: start,
          end: dateEnv.add(start, duration)
        });
        instances[instance.instanceId] = instance;
      }
    }
  }

  return {
    defs: defs,
    instances: instances
  };
} // retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?


function getRelevantEvents(eventStore, instanceId) {
  var instance = eventStore.instances[instanceId];

  if (instance) {
    var def_1 = eventStore.defs[instance.defId]; // get events/instances with same group

    var newStore = filterEventStoreDefs(eventStore, function (lookDef) {
      return isEventDefsGrouped(def_1, lookDef);
    }); // add the original
    // TODO: wish we could use eventTupleToStore or something like it

    newStore.defs[def_1.defId] = def_1;
    newStore.instances[instance.instanceId] = instance;
    return newStore;
  }

  return createEmptyEventStore();
}

function isEventDefsGrouped(def0, def1) {
  return Boolean(def0.groupId && def0.groupId === def1.groupId);
}

function transformRawEvents(rawEvents, eventSource, calendar) {
  var calEachTransform = calendar.opt('eventDataTransform');
  var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;

  if (sourceEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
  }

  if (calEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
  }

  return rawEvents;
}

function transformEachRawEvent(rawEvents, func) {
  var refinedEvents;

  if (!func) {
    refinedEvents = rawEvents;
  } else {
    refinedEvents = [];

    for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {
      var rawEvent = rawEvents_2[_i];
      var refinedEvent = func(rawEvent);

      if (refinedEvent) {
        refinedEvents.push(refinedEvent);
      } else if (refinedEvent == null) {
        refinedEvents.push(rawEvent);
      } // if a different falsy value, do nothing

    }
  }

  return refinedEvents;
}

function createEmptyEventStore() {
  return {
    defs: {},
    instances: {}
  };
}

function mergeEventStores(store0, store1) {
  return {
    defs: __assign({}, store0.defs, store1.defs),
    instances: __assign({}, store0.instances, store1.instances)
  };
}

function filterEventStoreDefs(eventStore, filterFunc) {
  var defs = filterHash(eventStore.defs, filterFunc);
  var instances = filterHash(eventStore.instances, function (instance) {
    return defs[instance.defId]; // still exists?
  });
  return {
    defs: defs,
    instances: instances
  };
}

function parseRange(input, dateEnv) {
  var start = null;
  var end = null;

  if (input.start) {
    start = dateEnv.createMarker(input.start);
  }

  if (input.end) {
    end = dateEnv.createMarker(input.end);
  }

  if (!start && !end) {
    return null;
  }

  if (start && end && end < start) {
    return null;
  }

  return {
    start: start,
    end: end
  };
} // SIDE-EFFECT: will mutate ranges.
// Will return a new array result.


function invertRanges(ranges, constraintRange) {
  var invertedRanges = [];
  var start = constraintRange.start; // the end of the previous range. the start of the new range

  var i;
  var dateRange; // ranges need to be in order. required for our date-walking algorithm

  ranges.sort(compareRanges);

  for (i = 0; i < ranges.length; i++) {
    dateRange = ranges[i]; // add the span of time before the event (if there is any)

    if (dateRange.start > start) {
      // compare millisecond time (skip any ambig logic)
      invertedRanges.push({
        start: start,
        end: dateRange.start
      });
    }

    if (dateRange.end > start) {
      start = dateRange.end;
    }
  } // add the span of time after the last event (if there is any)


  if (start < constraintRange.end) {
    // compare millisecond time (skip any ambig logic)
    invertedRanges.push({
      start: start,
      end: constraintRange.end
    });
  }

  return invertedRanges;
}

function compareRanges(range0, range1) {
  return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
}

function intersectRanges(range0, range1) {
  var start = range0.start;
  var end = range0.end;
  var newRange = null;

  if (range1.start !== null) {
    if (start === null) {
      start = range1.start;
    } else {
      start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
    }
  }

  if (range1.end != null) {
    if (end === null) {
      end = range1.end;
    } else {
      end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
    }
  }

  if (start === null || end === null || start < end) {
    newRange = {
      start: start,
      end: end
    };
  }

  return newRange;
}

function rangesEqual(range0, range1) {
  return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
}

function rangesIntersect(range0, range1) {
  return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
}

function rangeContainsRange(outerRange, innerRange) {
  return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
}

function rangeContainsMarker(range, date) {
  return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
} // If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).


function constrainMarkerToRange(date, range) {
  if (range.start != null && date < range.start) {
    return range.start;
  }

  if (range.end != null && date >= range.end) {
    return new Date(range.end.valueOf() - 1);
  }

  return date;
}

function removeExact(array, exactVal) {
  var removeCnt = 0;
  var i = 0;

  while (i < array.length) {
    if (array[i] === exactVal) {
      array.splice(i, 1);
      removeCnt++;
    } else {
      i++;
    }
  }

  return removeCnt;
}

function isArraysEqual(a0, a1) {
  var len = a0.length;
  var i;

  if (len !== a1.length) {
    // not array? or not same length?
    return false;
  }

  for (i = 0; i < len; i++) {
    if (a0[i] !== a1[i]) {
      return false;
    }
  }

  return true;
}

function memoize(workerFunc) {
  var args;
  var res;
  return function () {
    if (!args || !isArraysEqual(args, arguments)) {
      args = arguments;
      res = workerFunc.apply(this, arguments);
    }

    return res;
  };
}
/*
always executes the workerFunc, but if the result is equal to the previous result,
return the previous result instead.
*/


function memoizeOutput(workerFunc, equalityFunc) {
  var cachedRes = null;
  return function () {
    var newRes = workerFunc.apply(this, arguments);

    if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {
      cachedRes = newRes;
    }

    return cachedRes;
  };
}

var EXTENDED_SETTINGS_AND_SEVERITIES = {
  week: 3,
  separator: 0,
  omitZeroMinute: 0,
  meridiem: 0,
  omitCommas: 0
};
var STANDARD_DATE_PROP_SEVERITIES = {
  timeZoneName: 7,
  era: 6,
  year: 5,
  month: 4,
  day: 2,
  weekday: 2,
  hour: 1,
  minute: 1,
  second: 1
};
var MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too

var COMMA_RE = /,/g; // we need re for globalness

var MULTI_SPACE_RE = /\s+/g;
var LTR_RE = /\u200e/g; // control character

var UTC_RE = /UTC|GMT/;

var NativeFormatter =
/** @class */
function () {
  function NativeFormatter(formatSettings) {
    var standardDateProps = {};
    var extendedSettings = {};
    var severity = 0;

    for (var name_1 in formatSettings) {
      if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {
        extendedSettings[name_1] = formatSettings[name_1];
        severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);
      } else {
        standardDateProps[name_1] = formatSettings[name_1];

        if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {
          severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);
        }
      }
    }

    this.standardDateProps = standardDateProps;
    this.extendedSettings = extendedSettings;
    this.severity = severity;
    this.buildFormattingFunc = memoize(buildFormattingFunc);
  }

  NativeFormatter.prototype.format = function (date, context) {
    return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
  };

  NativeFormatter.prototype.formatRange = function (start, end, context) {
    var _a = this,
        standardDateProps = _a.standardDateProps,
        extendedSettings = _a.extendedSettings;

    var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);

    if (!diffSeverity) {
      return this.format(start, context);
    }

    var biggestUnitForPartial = diffSeverity;

    if (biggestUnitForPartial > 1 && ( // the two dates are different in a way that's larger scale than time
    standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {
      biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
    }

    var full0 = this.format(start, context);
    var full1 = this.format(end, context);

    if (full0 === full1) {
      return full0;
    }

    var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
    var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
    var partial0 = partialFormattingFunc(start);
    var partial1 = partialFormattingFunc(end);
    var insertion = findCommonInsertion(full0, partial0, full1, partial1);
    var separator = extendedSettings.separator || '';

    if (insertion) {
      return insertion.before + partial0 + separator + partial1 + insertion.after;
    }

    return full0 + separator + full1;
  };

  NativeFormatter.prototype.getLargestUnit = function () {
    switch (this.severity) {
      case 7:
      case 6:
      case 5:
        return 'year';

      case 4:
        return 'month';

      case 3:
        return 'week';

      default:
        return 'day';
    }
  };

  return NativeFormatter;
}();

function buildFormattingFunc(standardDateProps, extendedSettings, context) {
  var standardDatePropCnt = Object.keys(standardDateProps).length;

  if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {
    return function (date) {
      return formatTimeZoneOffset(date.timeZoneOffset);
    };
  }

  if (standardDatePropCnt === 0 && extendedSettings.week) {
    return function (date) {
      return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);
    };
  }

  return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
}

function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
  standardDateProps = __assign({}, standardDateProps); // copy

  extendedSettings = __assign({}, extendedSettings); // copy

  sanitizeSettings(standardDateProps, extendedSettings);
  standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers

  var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
  var zeroFormat; // needed?

  if (extendedSettings.omitZeroMinute) {
    var zeroProps = __assign({}, standardDateProps);

    delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings

    zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
  }

  return function (date) {
    var marker = date.marker;
    var format;

    if (zeroFormat && !marker.getUTCMinutes()) {
      format = zeroFormat;
    } else {
      format = normalFormat;
    }

    var s = format.format(marker);
    return postProcess(s, date, standardDateProps, extendedSettings, context);
  };
}

function sanitizeSettings(standardDateProps, extendedSettings) {
  // deal with a browser inconsistency where formatting the timezone
  // requires that the hour/minute be present.
  if (standardDateProps.timeZoneName) {
    if (!standardDateProps.hour) {
      standardDateProps.hour = '2-digit';
    }

    if (!standardDateProps.minute) {
      standardDateProps.minute = '2-digit';
    }
  } // only support short timezone names


  if (standardDateProps.timeZoneName === 'long') {
    standardDateProps.timeZoneName = 'short';
  } // if requesting to display seconds, MUST display minutes


  if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {
    delete extendedSettings.omitZeroMinute;
  }
}

function postProcess(s, date, standardDateProps, extendedSettings, context) {
  s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes

  if (standardDateProps.timeZoneName === 'short') {
    s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : // important to normalize for IE, which does "GMT"
    formatTimeZoneOffset(date.timeZoneOffset));
  }

  if (extendedSettings.omitCommas) {
    s = s.replace(COMMA_RE, '').trim();
  }

  if (extendedSettings.omitZeroMinute) {
    s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
  } // ^ do anything that might create adjacent spaces before this point,
  // because MERIDIEM_RE likes to eat up loading spaces


  if (extendedSettings.meridiem === false) {
    s = s.replace(MERIDIEM_RE, '').trim();
  } else if (extendedSettings.meridiem === 'narrow') {
    // a/p
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase();
    });
  } else if (extendedSettings.meridiem === 'short') {
    // am/pm
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase() + 'm';
    });
  } else if (extendedSettings.meridiem === 'lowercase') {
    // other meridiem transformers already converted to lowercase
    s = s.replace(MERIDIEM_RE, function (m0) {
      return m0.toLocaleLowerCase();
    });
  }

  s = s.replace(MULTI_SPACE_RE, ' ');
  s = s.trim();
  return s;
}

function injectTzoStr(s, tzoStr) {
  var replaced = false;
  s = s.replace(UTC_RE, function () {
    replaced = true;
    return tzoStr;
  }); // IE11 doesn't include UTC/GMT in the original string, so append to end

  if (!replaced) {
    s += ' ' + tzoStr;
  }

  return s;
}

function formatWeekNumber(num, weekLabel, locale, display) {
  var parts = [];

  if (display === 'narrow') {
    parts.push(weekLabel);
  } else if (display === 'short') {
    parts.push(weekLabel, ' ');
  } // otherwise, considered 'numeric'


  parts.push(locale.simpleNumberFormat.format(num));

  if (locale.options.isRtl) {
    // TODO: use control characters instead?
    parts.reverse();
  }

  return parts.join('');
} // Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger


function computeMarkerDiffSeverity(d0, d1, ca) {
  if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {
    return 5;
  }

  if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {
    return 4;
  }

  if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {
    return 2;
  }

  if (timeAsMs(d0) !== timeAsMs(d1)) {
    return 1;
  }

  return 0;
}

function computePartialFormattingOptions(options, biggestUnit) {
  var partialOptions = {};

  for (var name_2 in options) {
    if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
    STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {
      partialOptions[name_2] = options[name_2];
    }
  }

  return partialOptions;
}

function findCommonInsertion(full0, partial0, full1, partial1) {
  var i0 = 0;

  while (i0 < full0.length) {
    var found0 = full0.indexOf(partial0, i0);

    if (found0 === -1) {
      break;
    }

    var before0 = full0.substr(0, found0);
    i0 = found0 + partial0.length;
    var after0 = full0.substr(i0);
    var i1 = 0;

    while (i1 < full1.length) {
      var found1 = full1.indexOf(partial1, i1);

      if (found1 === -1) {
        break;
      }

      var before1 = full1.substr(0, found1);
      i1 = found1 + partial1.length;
      var after1 = full1.substr(i1);

      if (before0 === before1 && after0 === after1) {
        return {
          before: before0,
          after: after0
        };
      }
    }
  }

  return null;
}
/*
TODO: fix the terminology of "formatter" vs "formatting func"
*/

/*
At the time of instantiation, this object does not know which cmd-formatting system it will use.
It receives this at the time of formatting, as a setting.
*/


var CmdFormatter =
/** @class */
function () {
  function CmdFormatter(cmdStr, separator) {
    this.cmdStr = cmdStr;
    this.separator = separator;
  }

  CmdFormatter.prototype.format = function (date, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));
  };

  CmdFormatter.prototype.formatRange = function (start, end, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));
  };

  return CmdFormatter;
}();

var FuncFormatter =
/** @class */
function () {
  function FuncFormatter(func) {
    this.func = func;
  }

  FuncFormatter.prototype.format = function (date, context) {
    return this.func(createVerboseFormattingArg(date, null, context));
  };

  FuncFormatter.prototype.formatRange = function (start, end, context) {
    return this.func(createVerboseFormattingArg(start, end, context));
  };

  return FuncFormatter;
}(); // Formatter Object Creation


function createFormatter(input, defaultSeparator) {
  if (typeof input === 'object' && input) {
    // non-null object
    if (typeof defaultSeparator === 'string') {
      input = __assign({
        separator: defaultSeparator
      }, input);
    }

    return new NativeFormatter(input);
  } else if (typeof input === 'string') {
    return new CmdFormatter(input, defaultSeparator);
  } else if (typeof input === 'function') {
    return new FuncFormatter(input);
  }
} // String Utils
// timeZoneOffset is in minutes


function buildIsoString(marker, timeZoneOffset, stripZeroTime) {
  if (stripZeroTime === void 0) {
    stripZeroTime = false;
  }

  var s = marker.toISOString();
  s = s.replace('.000', '');

  if (stripZeroTime) {
    s = s.replace('T00:00:00Z', '');
  }

  if (s.length > 10) {
    // time part wasn't stripped, can add timezone info
    if (timeZoneOffset == null) {
      s = s.replace('Z', '');
    } else if (timeZoneOffset !== 0) {
      s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
    } // otherwise, its UTC-0 and we want to keep the Z

  }

  return s;
}

function formatIsoTimeString(marker) {
  return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
}

function formatTimeZoneOffset(minutes, doIso) {
  if (doIso === void 0) {
    doIso = false;
  }

  var sign = minutes < 0 ? '-' : '+';
  var abs = Math.abs(minutes);
  var hours = Math.floor(abs / 60);
  var mins = Math.round(abs % 60);

  if (doIso) {
    return sign + padStart(hours, 2) + ':' + padStart(mins, 2);
  } else {
    return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');
  }
} // Arg Utils


function createVerboseFormattingArg(start, end, context, separator) {
  var startInfo = expandZonedMarker(start, context.calendarSystem);
  var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
  return {
    date: startInfo,
    start: startInfo,
    end: endInfo,
    timeZone: context.timeZone,
    localeCodes: context.locale.codes,
    separator: separator
  };
}

function expandZonedMarker(dateInfo, calendarSystem) {
  var a = calendarSystem.markerToArray(dateInfo.marker);
  return {
    marker: dateInfo.marker,
    timeZoneOffset: dateInfo.timeZoneOffset,
    array: a,
    year: a[0],
    month: a[1],
    day: a[2],
    hour: a[3],
    minute: a[4],
    second: a[5],
    millisecond: a[6]
  };
}

var EventSourceApi =
/** @class */
function () {
  function EventSourceApi(calendar, internalEventSource) {
    this.calendar = calendar;
    this.internalEventSource = internalEventSource;
  }

  EventSourceApi.prototype.remove = function () {
    this.calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: this.internalEventSource.sourceId
    });
  };

  EventSourceApi.prototype.refetch = function () {
    this.calendar.dispatch({
      type: 'FETCH_EVENT_SOURCES',
      sourceIds: [this.internalEventSource.sourceId]
    });
  };

  Object.defineProperty(EventSourceApi.prototype, "id", {
    get: function () {
      return this.internalEventSource.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventSourceApi.prototype, "url", {
    // only relevant to json-feed event sources
    get: function () {
      return this.internalEventSource.meta.url;
    },
    enumerable: true,
    configurable: true
  });
  return EventSourceApi;
}();

var EventApi =
/** @class */
function () {
  function EventApi(calendar, def, instance) {
    this._calendar = calendar;
    this._def = def;
    this._instance = instance || null;
  }
  /*
  TODO: make event struct more responsible for this
  */


  EventApi.prototype.setProp = function (name, val) {
    var _a, _b;

    if (name in DATE_PROPS) ;else if (name in NON_DATE_PROPS) {
      if (typeof NON_DATE_PROPS[name] === 'function') {
        val = NON_DATE_PROPS[name](val);
      }

      this.mutate({
        standardProps: (_a = {}, _a[name] = val, _a)
      });
    } else if (name in UNSCOPED_EVENT_UI_PROPS) {
      var ui = void 0;

      if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {
        val = UNSCOPED_EVENT_UI_PROPS[name](val);
      }

      if (name === 'color') {
        ui = {
          backgroundColor: val,
          borderColor: val
        };
      } else if (name === 'editable') {
        ui = {
          startEditable: val,
          durationEditable: val
        };
      } else {
        ui = (_b = {}, _b[name] = val, _b);
      }

      this.mutate({
        standardProps: {
          ui: ui
        }
      });
    }
  };

  EventApi.prototype.setExtendedProp = function (name, val) {
    var _a;

    this.mutate({
      extendedProps: (_a = {}, _a[name] = val, _a)
    });
  };

  EventApi.prototype.setStart = function (startInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var start = dateEnv.createMarker(startInput);

    if (start && this._instance) {
      // TODO: warning if parsed bad
      var instanceRange = this._instance.range;
      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?

      if (options.maintainDuration) {
        this.mutate({
          datesDelta: startDelta
        });
      } else {
        this.mutate({
          startDelta: startDelta
        });
      }
    }
  };

  EventApi.prototype.setEnd = function (endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var end;

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        return; // TODO: warning if parsed bad
      }
    }

    if (this._instance) {
      if (end) {
        var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
        this.mutate({
          endDelta: endDelta
        });
      } else {
        this.mutate({
          standardProps: {
            hasEnd: false
          }
        });
      }
    }
  };

  EventApi.prototype.setDates = function (startInput, endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var standardProps = {
      allDay: options.allDay
    };
    var start = dateEnv.createMarker(startInput);
    var end;

    if (!start) {
      return; // TODO: warning if parsed bad
    }

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        // TODO: warning if parsed bad
        return;
      }
    }

    if (this._instance) {
      var instanceRange = this._instance.range; // when computing the diff for an event being converted to all-day,
      // compute diff off of the all-day values the way event-mutation does.

      if (options.allDay === true) {
        instanceRange = computeAlignedDayRange(instanceRange);
      }

      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);

      if (end) {
        var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);

        if (durationsEqual(startDelta, endDelta)) {
          this.mutate({
            datesDelta: startDelta,
            standardProps: standardProps
          });
        } else {
          this.mutate({
            startDelta: startDelta,
            endDelta: endDelta,
            standardProps: standardProps
          });
        }
      } else {
        // means "clear the end"
        standardProps.hasEnd = false;
        this.mutate({
          datesDelta: startDelta,
          standardProps: standardProps
        });
      }
    }
  };

  EventApi.prototype.moveStart = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        startDelta: delta
      });
    }
  };

  EventApi.prototype.moveEnd = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        endDelta: delta
      });
    }
  };

  EventApi.prototype.moveDates = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        datesDelta: delta
      });
    }
  };

  EventApi.prototype.setAllDay = function (allDay, options) {
    if (options === void 0) {
      options = {};
    }

    var standardProps = {
      allDay: allDay
    };
    var maintainDuration = options.maintainDuration;

    if (maintainDuration == null) {
      maintainDuration = this._calendar.opt('allDayMaintainDuration');
    }

    if (this._def.allDay !== allDay) {
      standardProps.hasEnd = maintainDuration;
    }

    this.mutate({
      standardProps: standardProps
    });
  };

  EventApi.prototype.formatRange = function (formatInput) {
    var dateEnv = this._calendar.dateEnv;
    var instance = this._instance;
    var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));

    if (this._def.hasEnd) {
      return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
        forcedStartTzo: instance.forcedStartTzo,
        forcedEndTzo: instance.forcedEndTzo
      });
    } else {
      return dateEnv.format(instance.range.start, formatter, {
        forcedTzo: instance.forcedStartTzo
      });
    }
  };

  EventApi.prototype.mutate = function (mutation) {
    var def = this._def;
    var instance = this._instance;

    if (instance) {
      this._calendar.dispatch({
        type: 'MUTATE_EVENTS',
        instanceId: instance.instanceId,
        mutation: mutation,
        fromApi: true
      });

      var eventStore = this._calendar.state.eventStore;
      this._def = eventStore.defs[def.defId];
      this._instance = eventStore.instances[instance.instanceId];
    }
  };

  EventApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_EVENT_DEF',
      defId: this._def.defId
    });
  };

  Object.defineProperty(EventApi.prototype, "source", {
    get: function () {
      var sourceId = this._def.sourceId;

      if (sourceId) {
        return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "start", {
    get: function () {
      return this._instance ? this._calendar.dateEnv.toDate(this._instance.range.start) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "end", {
    get: function () {
      return this._instance && this._def.hasEnd ? this._calendar.dateEnv.toDate(this._instance.range.end) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "id", {
    // computable props that all access the def
    // TODO: find a TypeScript-compatible way to do this at scale
    get: function () {
      return this._def.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "groupId", {
    get: function () {
      return this._def.groupId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allDay", {
    get: function () {
      return this._def.allDay;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "title", {
    get: function () {
      return this._def.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "url", {
    get: function () {
      return this._def.url;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "rendering", {
    get: function () {
      return this._def.rendering;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "startEditable", {
    get: function () {
      return this._def.ui.startEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "durationEditable", {
    get: function () {
      return this._def.ui.durationEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "constraint", {
    get: function () {
      return this._def.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "overlap", {
    get: function () {
      return this._def.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allow", {
    get: function () {
      return this._def.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "backgroundColor", {
    get: function () {
      return this._def.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "borderColor", {
    get: function () {
      return this._def.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "textColor", {
    get: function () {
      return this._def.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "classNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._def.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "extendedProps", {
    get: function () {
      return this._def.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return EventApi;
}();
/*
Specifying nextDayThreshold signals that all-day ranges should be sliced.
*/


function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
  var inverseBgByGroupId = {};
  var inverseBgByDefId = {};
  var defByGroupId = {};
  var bgRanges = [];
  var fgRanges = [];
  var eventUis = compileEventUis(eventStore.defs, eventUiBases);

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];

    if (def.rendering === 'inverse-background') {
      if (def.groupId) {
        inverseBgByGroupId[def.groupId] = [];

        if (!defByGroupId[def.groupId]) {
          defByGroupId[def.groupId] = def;
        }
      } else {
        inverseBgByDefId[defId] = [];
      }
    }
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = eventStore.defs[instance.defId];
    var ui = eventUis[def.defId];
    var origRange = instance.range;
    var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
    var slicedRange = intersectRanges(normalRange, framingRange);

    if (slicedRange) {
      if (def.rendering === 'inverse-background') {
        if (def.groupId) {
          inverseBgByGroupId[def.groupId].push(slicedRange);
        } else {
          inverseBgByDefId[instance.defId].push(slicedRange);
        }
      } else {
        (def.rendering === 'background' ? bgRanges : fgRanges).push({
          def: def,
          ui: ui,
          instance: instance,
          range: slicedRange,
          isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
          isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
        });
      }
    }
  }

  for (var groupId in inverseBgByGroupId) {
    // BY GROUP
    var ranges = inverseBgByGroupId[groupId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {
      var invertedRange = invertedRanges_1[_i];
      var def = defByGroupId[groupId];
      var ui = eventUis[def.defId];
      bgRanges.push({
        def: def,
        ui: ui,
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  for (var defId in inverseBgByDefId) {
    var ranges = inverseBgByDefId[defId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {
      var invertedRange = invertedRanges_2[_a];
      bgRanges.push({
        def: eventStore.defs[defId],
        ui: eventUis[defId],
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  return {
    bg: bgRanges,
    fg: fgRanges
  };
}

function hasBgRendering(def) {
  return def.rendering === 'background' || def.rendering === 'inverse-background';
}

function filterSegsViaEls(view, segs, isMirror) {
  if (view.hasPublicHandlers('eventRender')) {
    segs = segs.filter(function (seg) {
      var custom = view.publiclyTrigger('eventRender', [{
        event: new EventApi(view.calendar, seg.eventRange.def, seg.eventRange.instance),
        isMirror: isMirror,
        isStart: seg.isStart,
        isEnd: seg.isEnd,
        // TODO: include seg.range once all components consistently generate it
        el: seg.el,
        view: view
      }]);

      if (custom === false) {
        // means don't render at all
        return false;
      } else if (custom && custom !== true) {
        seg.el = custom;
      }

      return true;
    });
  }

  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
    var seg = segs_1[_i];
    setElSeg(seg.el, seg);
  }

  return segs;
}

function setElSeg(el, seg) {
  el.fcSeg = seg;
}

function getElSeg(el) {
  return el.fcSeg || null;
} // event ui computation


function compileEventUis(eventDefs, eventUiBases) {
  return mapHash(eventDefs, function (eventDef) {
    return compileEventUi(eventDef, eventUiBases);
  });
}

function compileEventUi(eventDef, eventUiBases) {
  var uis = [];

  if (eventUiBases['']) {
    uis.push(eventUiBases['']);
  }

  if (eventUiBases[eventDef.defId]) {
    uis.push(eventUiBases[eventDef.defId]);
  }

  uis.push(eventDef.ui);
  return combineEventUis(uis);
} // applies the mutation to ALL defs/instances within the event store


function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {
  var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
  var dest = createEmptyEventStore();

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];
    dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = dest.defs[instance.defId]; // important to grab the newly modified def

    dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);
  }

  return dest;
}

function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {
  var standardProps = mutation.standardProps || {}; // if hasEnd has not been specified, guess a good value based on deltas.
  // if duration will change, there's no way the default duration will persist,
  // and thus, we need to mark the event as having a real end

  if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {
    standardProps.hasEnd = true; // TODO: is this mutation okay?
  }

  var copy = __assign({}, eventDef, standardProps, {
    ui: __assign({}, eventDef.ui, standardProps.ui)
  });

  if (mutation.extendedProps) {
    copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);
  }

  for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {
    var applier = appliers_1[_i];
    applier(copy, mutation, calendar);
  }

  if (!copy.hasEnd && calendar.opt('forceEventDuration')) {
    copy.hasEnd = true;
  }

  return copy;
}

function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef
eventConfig, mutation, calendar) {
  var dateEnv = calendar.dateEnv;
  var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
  var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;

  var copy = __assign({}, eventInstance);

  if (forceAllDay) {
    copy.range = computeAlignedDayRange(copy.range);
  }

  if (mutation.datesDelta && eventConfig.startEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.datesDelta),
      end: dateEnv.add(copy.range.end, mutation.datesDelta)
    };
  }

  if (mutation.startDelta && eventConfig.durationEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.startDelta),
      end: copy.range.end
    };
  }

  if (mutation.endDelta && eventConfig.durationEditable) {
    copy.range = {
      start: copy.range.start,
      end: dateEnv.add(copy.range.end, mutation.endDelta)
    };
  }

  if (clearEnd) {
    copy.range = {
      start: copy.range.start,
      end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)
    };
  } // in case event was all-day but the supplied deltas were not
  // better util for this?


  if (eventDef.allDay) {
    copy.range = {
      start: startOfDay(copy.range.start),
      end: startOfDay(copy.range.end)
    };
  } // handle invalid durations


  if (copy.range.end < copy.range.start) {
    copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);
  }

  return copy;
}

function reduceEventStore(eventStore, action, eventSources, dateProfile, calendar) {
  switch (action.type) {
    case 'RECEIVE_EVENTS':
      // raw
      return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);

    case 'ADD_EVENTS':
      // already parsed, but not expanded
      return addEvent(eventStore, action.eventStore, // new ones
      dateProfile ? dateProfile.activeRange : null, calendar);

    case 'MERGE_EVENTS':
      // already parsed and expanded
      return mergeEventStores(eventStore, action.eventStore);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return expandRecurring(eventStore, dateProfile.activeRange, calendar);
      } else {
        return eventStore;
      }

    case 'CHANGE_TIMEZONE':
      return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);

    case 'MUTATE_EVENTS':
      return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);

    case 'REMOVE_EVENT_INSTANCES':
      return excludeInstances(eventStore, action.instances);

    case 'REMOVE_EVENT_DEF':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return eventDef.defId !== action.defId;
      });

    case 'REMOVE_EVENT_SOURCE':
      return excludeEventsBySourceId(eventStore, action.sourceId);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return !eventDef.sourceId; // only keep events with no source id
      });

    case 'REMOVE_ALL_EVENTS':
      return createEmptyEventStore();

    case 'RESET_EVENTS':
      return {
        defs: eventStore.defs,
        instances: eventStore.instances
      };

    default:
      return eventStore;
  }
}

function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {
  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
  ) {
      var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);

      if (fetchRange) {
        subset = expandRecurring(subset, fetchRange, calendar);
      }

      return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
    }

  return eventStore;
}

function addEvent(eventStore, subset, expandRange, calendar) {
  if (expandRange) {
    subset = expandRecurring(subset, expandRange, calendar);
  }

  return mergeEventStores(eventStore, subset);
}

function rezoneDates(eventStore, oldDateEnv, newDateEnv) {
  var defs = eventStore.defs;
  var instances = mapHash(eventStore.instances, function (instance) {
    var def = defs[instance.defId];

    if (def.allDay || def.recurringDef) {
      return instance; // isn't dependent on timezone
    } else {
      return __assign({}, instance, {
        range: {
          start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
          end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
        },
        forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
        forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
      });
    }
  });
  return {
    defs: defs,
    instances: instances
  };
}

function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {
  var relevant = getRelevantEvents(eventStore, instanceId);
  var eventConfigBase = fromApi ? {
    '': {
      startEditable: true,
      durationEditable: true,
      constraints: [],
      overlap: null,
      allows: [],
      backgroundColor: '',
      borderColor: '',
      textColor: '',
      classNames: []
    }
  } : calendar.eventUiBases;
  relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);
  return mergeEventStores(eventStore, relevant);
}

function excludeEventsBySourceId(eventStore, sourceId) {
  return filterEventStoreDefs(eventStore, function (eventDef) {
    return eventDef.sourceId !== sourceId;
  });
} // QUESTION: why not just return instances? do a general object-property-exclusion util


function excludeInstances(eventStore, removals) {
  return {
    defs: eventStore.defs,
    instances: filterHash(eventStore.instances, function (instance) {
      return !removals[instance.instanceId];
    })
  };
} // high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionValid(interaction, calendar) {
  return isNewPropsValid({
    eventDrag: interaction
  }, calendar); // HACK: the eventDrag props is used for ALL interactions
}

function isDateSelectionValid(dateSelection, calendar) {
  return isNewPropsValid({
    dateSelection: dateSelection
  }, calendar);
}

function isNewPropsValid(newProps, calendar) {
  var view = calendar.view;

  var props = __assign({
    businessHours: view ? view.props.businessHours : createEmptyEventStore(),
    dateSelection: '',
    eventStore: calendar.state.eventStore,
    eventUiBases: calendar.eventUiBases,
    eventSelection: '',
    eventDrag: null,
    eventResize: null
  }, newProps);

  return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);
}

function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  if (dateSpanMeta === void 0) {
    dateSpanMeta = {};
  }

  if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  return true;
} // Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions

  var subjectEventStore = interaction.mutatedEvents;
  var subjectDefs = subjectEventStore.defs;
  var subjectInstances = subjectEventStore.instances;
  var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
    '': calendar.selectionConfig
  } // if not a real event, validate as a selection
  );

  if (filterConfig) {
    subjectConfigs = mapHash(subjectConfigs, filterConfig);
  }

  var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?

  var otherDefs = otherEventStore.defs;
  var otherInstances = otherEventStore.instances;
  var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);

  for (var subjectInstanceId in subjectInstances) {
    var subjectInstance = subjectInstances[subjectInstanceId];
    var subjectRange = subjectInstance.range;
    var subjectConfig = subjectConfigs[subjectInstance.defId];
    var subjectDef = subjectDefs[subjectInstance.defId]; // constraint

    if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {
      return false;
    } // overlap


    var overlapFunc = calendar.opt('eventOverlap');

    if (typeof overlapFunc !== 'function') {
      overlapFunc = null;
    }

    for (var otherInstanceId in otherInstances) {
      var otherInstance = otherInstances[otherInstanceId]; // intersect! evaluate

      if (rangesIntersect(subjectRange, otherInstance.range)) {
        var otherOverlap = otherConfigs[otherInstance.defId].overlap; // consider the other event's overlap. only do this if the subject event is a "real" event

        if (otherOverlap === false && interaction.isEvent) {
          return false;
        }

        if (subjectConfig.overlap === false) {
          return false;
        }

        if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event
        new EventApi(calendar, subjectDef, subjectInstance) // moving event
        )) {
          return false;
        }
      }
    } // allow (a function)


    var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state

    for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {
      var subjectAllow = _a[_i];

      var subjectDateSpan = __assign({}, dateSpanMeta, {
        range: subjectInstance.range,
        allDay: subjectDef.allDay
      });

      var origDef = calendarEventStore.defs[subjectDef.defId];
      var origInstance = calendarEventStore.instances[subjectInstanceId];
      var eventApi = void 0;

      if (origDef) {
        // was previously in the calendar
        eventApi = new EventApi(calendar, origDef, origInstance);
      } else {
        // was an external event
        eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates
      }

      if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {
        return false;
      }
    }
  }

  return true;
} // Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------


function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var relevantEventStore = state.eventStore;
  var relevantDefs = relevantEventStore.defs;
  var relevantInstances = relevantEventStore.instances;
  var selection = state.dateSelection;
  var selectionRange = selection.range;
  var selectionConfig = calendar.selectionConfig;

  if (filterConfig) {
    selectionConfig = filterConfig(selectionConfig);
  } // constraint


  if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {
    return false;
  } // overlap


  var overlapFunc = calendar.opt('selectOverlap');

  if (typeof overlapFunc !== 'function') {
    overlapFunc = null;
  }

  for (var relevantInstanceId in relevantInstances) {
    var relevantInstance = relevantInstances[relevantInstanceId]; // intersect! evaluate

    if (rangesIntersect(selectionRange, relevantInstance.range)) {
      if (selectionConfig.overlap === false) {
        return false;
      }

      if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {
        return false;
      }
    }
  } // allow (a function)


  for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {
    var selectionAllow = _a[_i];

    var fullDateSpan = __assign({}, dateSpanMeta, selection);

    if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {
      return false;
    }
  }

  return true;
} // Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------


function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {
  for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
    var constraint = constraints_1[_i];

    if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {
      return false;
    }
  }

  return true;
}

function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours
otherEventStore, // for if constraint is an even group ID
businessHoursUnexpanded, // for if constraint is 'businessHours'
calendar // for expanding businesshours
) {
  if (constraint === 'businessHours') {
    return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));
  } else if (typeof constraint === 'string') {
    // an group ID
    return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {
      return eventDef.groupId === constraint;
    }));
  } else if (typeof constraint === 'object' && constraint) {
    // non-null object
    return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));
  }

  return []; // if it's false
} // TODO: move to event-store file?


function eventStoreToRanges(eventStore) {
  var instances = eventStore.instances;
  var ranges = [];

  for (var instanceId in instances) {
    ranges.push(instances[instanceId].range);
  }

  return ranges;
} // TODO: move to geom file?


function anyRangesContainRange(outerRanges, innerRange) {
  for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {
    var outerRange = outerRanges_1[_i];

    if (rangeContainsRange(outerRange, innerRange)) {
      return true;
    }
  }

  return false;
} // Parsing
// ------------------------------------------------------------------------------------------------------------------------


function normalizeConstraint(input, calendar) {
  if (Array.isArray(input)) {
    return parseEvents(input, '', calendar, true); // allowOpenRange=true
  } else if (typeof input === 'object' && input) {
    // non-null object
    return parseEvents([input], '', calendar, true); // allowOpenRange=true
  } else if (input != null) {
    return String(input);
  } else {
    return null;
  }
}

function htmlEscape(s) {
  return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/\n/g, '<br />');
} // Given a hash of CSS properties, returns a string of CSS.
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.


function cssToStr(cssProps) {
  var statements = [];

  for (var name_1 in cssProps) {
    var val = cssProps[name_1];

    if (val != null && val !== '') {
      statements.push(name_1 + ':' + val);
    }
  }

  return statements.join(';');
} // Given an object hash of HTML attribute names to values,
// generates a string that can be injected between < > in HTML


function attrsToStr(attrs) {
  var parts = [];

  for (var name_2 in attrs) {
    var val = attrs[name_2];

    if (val != null) {
      parts.push(name_2 + '="' + htmlEscape(val) + '"');
    }
  }

  return parts.join(' ');
}

function parseClassName(raw) {
  if (Array.isArray(raw)) {
    return raw;
  } else if (typeof raw === 'string') {
    return raw.split(/\s+/);
  } else {
    return [];
  }
}

var UNSCOPED_EVENT_UI_PROPS = {
  editable: Boolean,
  startEditable: Boolean,
  durationEditable: Boolean,
  constraint: null,
  overlap: null,
  allow: null,
  className: parseClassName,
  classNames: parseClassName,
  color: String,
  backgroundColor: String,
  borderColor: String,
  textColor: String
};

function processUnscopedUiProps(rawProps, calendar, leftovers) {
  var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);
  var constraint = normalizeConstraint(props.constraint, calendar);
  return {
    startEditable: props.startEditable != null ? props.startEditable : props.editable,
    durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,
    constraints: constraint != null ? [constraint] : [],
    overlap: props.overlap,
    allows: props.allow != null ? [props.allow] : [],
    backgroundColor: props.backgroundColor || props.color,
    borderColor: props.borderColor || props.color,
    textColor: props.textColor,
    classNames: props.classNames.concat(props.className)
  };
}

function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {
  var rawUnscoped = {};
  var wasFound = {};

  for (var key in UNSCOPED_EVENT_UI_PROPS) {
    var scopedKey = prefix + capitaliseFirstLetter(key);
    rawUnscoped[key] = rawScoped[scopedKey];
    wasFound[scopedKey] = true;
  }

  if (prefix === 'event') {
    rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'
  }

  if (leftovers) {
    for (var key in rawScoped) {
      if (!wasFound[key]) {
        leftovers[key] = rawScoped[key];
      }
    }
  }

  return processUnscopedUiProps(rawUnscoped, calendar);
}

var EMPTY_EVENT_UI = {
  startEditable: null,
  durationEditable: null,
  constraints: [],
  overlap: null,
  allows: [],
  backgroundColor: '',
  borderColor: '',
  textColor: '',
  classNames: []
}; // prevent against problems with <2 args!

function combineEventUis(uis) {
  return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
}

function combineTwoEventUis(item0, item1) {
  return {
    startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
    durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
    constraints: item0.constraints.concat(item1.constraints),
    overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
    allows: item0.allows.concat(item1.allows),
    backgroundColor: item1.backgroundColor || item0.backgroundColor,
    borderColor: item1.borderColor || item0.borderColor,
    textColor: item1.textColor || item0.textColor,
    classNames: item0.classNames.concat(item1.classNames)
  };
}

var NON_DATE_PROPS = {
  id: String,
  groupId: String,
  title: String,
  url: String,
  rendering: String,
  extendedProps: null
};
var DATE_PROPS = {
  start: null,
  date: null,
  end: null,
  allDay: null
};
var uid = 0;

function parseEvent(raw, sourceId, calendar, allowOpenRange) {
  var allDayDefault = computeIsAllDayDefault(sourceId, calendar);
  var leftovers0 = {};
  var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out
  allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props
  );

  if (recurringRes) {
    var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);
    def.recurringDef = {
      typeId: recurringRes.typeId,
      typeData: recurringRes.typeData,
      duration: recurringRes.duration
    };
    return {
      def: def,
      instance: null
    };
  } else {
    var leftovers1 = {};
    var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);

    if (singleRes) {
      var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);
      var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
      return {
        def: def,
        instance: instance
      };
    }
  }

  return null;
}
/*
Will NOT populate extendedProps with the leftover properties.
Will NOT populate date-related props.
The EventNonDateInput has been normalized (id => publicId, etc).
*/


function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {
  var leftovers = {};
  var def = pluckNonDateProps(raw, calendar, leftovers);
  def.defId = String(uid++);
  def.sourceId = sourceId;
  def.allDay = allDay;
  def.hasEnd = hasEnd;

  for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {
    var eventDefParser = _a[_i];
    var newLeftovers = {};
    eventDefParser(def, leftovers, newLeftovers);
    leftovers = newLeftovers;
  }

  def.extendedProps = __assign(leftovers, def.extendedProps || {}); // help out EventApi from having user modify props

  Object.freeze(def.ui.classNames);
  Object.freeze(def.extendedProps);
  return def;
}

function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
  return {
    instanceId: String(uid++),
    defId: defId,
    range: range,
    forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
    forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
  };
}

function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {
  var props = pluckDateProps(raw, leftovers);
  var allDay = props.allDay;
  var startMeta;
  var startMarker = null;
  var hasEnd = false;
  var endMeta;
  var endMarker = null;
  startMeta = calendar.dateEnv.createMarkerMeta(props.start);

  if (startMeta) {
    startMarker = startMeta.marker;
  } else if (!allowOpenRange) {
    return null;
  }

  if (props.end != null) {
    endMeta = calendar.dateEnv.createMarkerMeta(props.end);
  }

  if (allDay == null) {
    if (allDayDefault != null) {
      allDay = allDayDefault;
    } else {
      // fall back to the date props LAST
      allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
    }
  }

  if (allDay && startMarker) {
    startMarker = startOfDay(startMarker);
  }

  if (endMeta) {
    endMarker = endMeta.marker;

    if (allDay) {
      endMarker = startOfDay(endMarker);
    }

    if (startMarker && endMarker <= startMarker) {
      endMarker = null;
    }
  }

  if (endMarker) {
    hasEnd = true;
  } else if (!allowOpenRange) {
    hasEnd = calendar.opt('forceEventDuration') || false;
    endMarker = calendar.dateEnv.add(startMarker, allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);
  }

  return {
    allDay: allDay,
    hasEnd: hasEnd,
    range: {
      start: startMarker,
      end: endMarker
    },
    forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
    forcedEndTzo: endMeta ? endMeta.forcedTzo : null
  };
}

function pluckDateProps(raw, leftovers) {
  var props = refineProps(raw, DATE_PROPS, {}, leftovers);
  props.start = props.start !== null ? props.start : props.date;
  delete props.date;
  return props;
}

function pluckNonDateProps(raw, calendar, leftovers) {
  var preLeftovers = {};
  var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);
  var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);
  props.publicId = props.id;
  delete props.id;
  props.ui = ui;
  return props;
}

function computeIsAllDayDefault(sourceId, calendar) {
  var res = null;

  if (sourceId) {
    var source = calendar.state.eventSources[sourceId];
    res = source.allDayDefault;
  }

  if (res == null) {
    res = calendar.opt('allDayDefault');
  }

  return res;
}

var DEF_DEFAULTS = {
  startTime: '09:00',
  endTime: '17:00',
  daysOfWeek: [1, 2, 3, 4, 5],
  rendering: 'inverse-background',
  classNames: 'fc-nonbusiness',
  groupId: '_businessHours' // so multiple defs get grouped

};
/*
TODO: pass around as EventDefHash!!!
*/

function parseBusinessHours(input, calendar) {
  return parseEvents(refineInputs(input), '', calendar);
}

function refineInputs(input) {
  var rawDefs;

  if (input === true) {
    rawDefs = [{}]; // will get DEF_DEFAULTS verbatim
  } else if (Array.isArray(input)) {
    // if specifying an array, every sub-definition NEEDS a day-of-week
    rawDefs = input.filter(function (rawDef) {
      return rawDef.daysOfWeek;
    });
  } else if (typeof input === 'object' && input) {
    // non-null object
    rawDefs = [input];
  } else {
    // is probably false
    rawDefs = [];
  }

  rawDefs = rawDefs.map(function (rawDef) {
    return __assign({}, DEF_DEFAULTS, rawDef);
  });
  return rawDefs;
}

function memoizeRendering(renderFunc, unrenderFunc, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }

  var dependents = [];
  var thisContext;
  var prevArgs;

  function unrender() {
    if (prevArgs) {
      for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {
        var dependent = dependents_1[_i];
        dependent.unrender();
      }

      if (unrenderFunc) {
        unrenderFunc.apply(thisContext, prevArgs);
      }

      prevArgs = null;
    }
  }

  function res() {
    if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {
      unrender();
      thisContext = this;
      prevArgs = arguments;
      renderFunc.apply(this, arguments);
    }
  }

  res.dependents = dependents;
  res.unrender = unrender;

  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
    var dependency = dependencies_1[_i];
    dependency.dependents.push(res);
  }

  return res;
}

var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere

var Splitter =
/** @class */
function () {
  function Splitter() {
    this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
    this.splitDateSelection = memoize(this._splitDateSpan);
    this.splitEventStore = memoize(this._splitEventStore);
    this.splitIndividualUi = memoize(this._splitIndividualUi);
    this.splitEventDrag = memoize(this._splitInteraction);
    this.splitEventResize = memoize(this._splitInteraction);
    this.eventUiBuilders = {}; // TODO: typescript protection
  }

  Splitter.prototype.splitProps = function (props) {
    var _this = this;

    var keyInfos = this.getKeyInfo(props);
    var defKeys = this.getKeysForEventDefs(props.eventStore);
    var dateSelections = this.splitDateSelection(props.dateSelection);
    var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*

    var eventStores = this.splitEventStore(props.eventStore, defKeys);
    var eventDrags = this.splitEventDrag(props.eventDrag);
    var eventResizes = this.splitEventResize(props.eventResize);
    var splitProps = {};
    this.eventUiBuilders = mapHash(keyInfos, function (info, key) {
      return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);
    });

    for (var key in keyInfos) {
      var keyInfo = keyInfos[key];
      var eventStore = eventStores[key] || EMPTY_EVENT_STORE;
      var buildEventUi = this.eventUiBuilders[key];
      splitProps[key] = {
        businessHours: keyInfo.businessHours || props.businessHours,
        dateSelection: dateSelections[key] || null,
        eventStore: eventStore,
        eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
        eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
        eventDrag: eventDrags[key] || null,
        eventResize: eventResizes[key] || null
      };
    }

    return splitProps;
  };

  Splitter.prototype._splitDateSpan = function (dateSpan) {
    var dateSpans = {};

    if (dateSpan) {
      var keys = this.getKeysForDateSpan(dateSpan);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        dateSpans[key] = dateSpan;
      }
    }

    return dateSpans;
  };

  Splitter.prototype._getKeysForEventDefs = function (eventStore) {
    var _this = this;

    return mapHash(eventStore.defs, function (eventDef) {
      return _this.getKeysForEventDef(eventDef);
    });
  };

  Splitter.prototype._splitEventStore = function (eventStore, defKeys) {
    var defs = eventStore.defs,
        instances = eventStore.instances;
    var splitStores = {};

    for (var defId in defs) {
      for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
        var key = _a[_i];

        if (!splitStores[key]) {
          splitStores[key] = createEmptyEventStore();
        }

        splitStores[key].defs[defId] = defs[defId];
      }
    }

    for (var instanceId in instances) {
      var instance = instances[instanceId];

      for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {
        var key = _c[_b];

        if (splitStores[key]) {
          // must have already been created
          splitStores[key].instances[instanceId] = instance;
        }
      }
    }

    return splitStores;
  };

  Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {
    var splitHashes = {};

    for (var defId in eventUiBases) {
      if (defId) {
        // not the '' key
        for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
          var key = _a[_i];

          if (!splitHashes[key]) {
            splitHashes[key] = {};
          }

          splitHashes[key][defId] = eventUiBases[defId];
        }
      }
    }

    return splitHashes;
  };

  Splitter.prototype._splitInteraction = function (interaction) {
    var splitStates = {};

    if (interaction) {
      var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar
      ); // can't rely on defKeys because event data is mutated


      var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);

      var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);

      var populate = function (key) {
        if (!splitStates[key]) {
          splitStates[key] = {
            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,
            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,
            isEvent: interaction.isEvent,
            origSeg: interaction.origSeg
          };
        }
      };

      for (var key in affectedStores_1) {
        populate(key);
      }

      for (var key in mutatedStores_1) {
        populate(key);
      }
    }

    return splitStates;
  };

  return Splitter;
}();

function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
  var baseParts = [];

  if (allUi) {
    baseParts.push(allUi);
  }

  if (eventUiForKey) {
    baseParts.push(eventUiForKey);
  }

  var stuff = {
    '': combineEventUis(baseParts)
  };

  if (individualUi) {
    __assign(stuff, individualUi);
  }

  return stuff;
} // Generates HTML for an anchor to another view into the calendar.
// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
// `gotoOptions` can either be a DateMarker, or an object with the form:
// { date, type, forceOff }
// `type` is a view-type like "day" or "week". default value is "day".
// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.


function buildGotoAnchorHtml(component, gotoOptions, attrs, innerHtml) {
  var dateEnv = component.dateEnv;
  var date;
  var type;
  var forceOff;
  var finalOptions;

  if (gotoOptions instanceof Date) {
    date = gotoOptions; // a single date-like input
  } else {
    date = gotoOptions.date;
    type = gotoOptions.type;
    forceOff = gotoOptions.forceOff;
  }

  finalOptions = {
    date: dateEnv.formatIso(date, {
      omitTime: true
    }),
    type: type || 'day'
  };

  if (typeof attrs === 'string') {
    innerHtml = attrs;
    attrs = null;
  }

  attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space

  innerHtml = innerHtml || '';

  if (!forceOff && component.opt('navLinks')) {
    return '<a' + attrs + ' data-goto="' + htmlEscape(JSON.stringify(finalOptions)) + '">' + innerHtml + '</a>';
  } else {
    return '<span' + attrs + '>' + innerHtml + '</span>';
  }
}

function getAllDayHtml(component) {
  return component.opt('allDayHtml') || htmlEscape(component.opt('allDayText'));
} // Computes HTML classNames for a single-day element


function getDayClasses(date, dateProfile, context, noThemeHighlight) {
  var calendar = context.calendar,
      view = context.view,
      theme = context.theme,
      dateEnv = context.dateEnv;
  var classes = [];
  var todayStart;
  var todayEnd;

  if (!rangeContainsMarker(dateProfile.activeRange, date)) {
    classes.push('fc-disabled-day');
  } else {
    classes.push('fc-' + DAY_IDS[date.getUTCDay()]);

    if (view.opt('monthMode') && dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {
      classes.push('fc-other-month');
    }

    todayStart = startOfDay(calendar.getNow());
    todayEnd = addDays(todayStart, 1);

    if (date < todayStart) {
      classes.push('fc-past');
    } else if (date >= todayEnd) {
      classes.push('fc-future');
    } else {
      classes.push('fc-today');

      if (noThemeHighlight !== true) {
        classes.push(theme.getClass('today'));
      }
    }
  }

  return classes;
} // given a function that resolves a result asynchronously.
// the function can either call passed-in success and failure callbacks,
// or it can return a promise.
// if you need to pass additional params to func, bind them first.


function unpromisify(func, success, failure) {
  // guard against success/failure callbacks being called more than once
  // and guard against a promise AND callback being used together.
  var isResolved = false;

  var wrappedSuccess = function () {
    if (!isResolved) {
      isResolved = true;
      success.apply(this, arguments);
    }
  };

  var wrappedFailure = function () {
    if (!isResolved) {
      isResolved = true;

      if (failure) {
        failure.apply(this, arguments);
      }
    }
  };

  var res = func(wrappedSuccess, wrappedFailure);

  if (res && typeof res.then === 'function') {
    res.then(wrappedSuccess, wrappedFailure);
  }
}

var Mixin =
/** @class */
function () {
  function Mixin() {} // mix into a CLASS


  Mixin.mixInto = function (destClass) {
    this.mixIntoObj(destClass.prototype);
  }; // mix into ANY object


  Mixin.mixIntoObj = function (destObj) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      if (!destObj[name]) {
        // if destination doesn't already define it
        destObj[name] = _this.prototype[name];
      }
    });
  };
  /*
  will override existing methods
  TODO: remove! not used anymore
  */


  Mixin.mixOver = function (destClass) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      destClass.prototype[name] = _this.prototype[name];
    });
  };

  return Mixin;
}();
/*
USAGE:
  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
in class:
  on: EmitterInterface['on']
  one: EmitterInterface['one']
  off: EmitterInterface['off']
  trigger: EmitterInterface['trigger']
  triggerWith: EmitterInterface['triggerWith']
  hasHandlers: EmitterInterface['hasHandlers']
after class:
  EmitterMixin.mixInto(TheClass)
*/


var EmitterMixin =
/** @class */
function (_super) {
  __extends(EmitterMixin, _super);

  function EmitterMixin() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EmitterMixin.prototype.on = function (type, handler) {
    addToHash(this._handlers || (this._handlers = {}), type, handler);
    return this; // for chaining
  }; // todo: add comments


  EmitterMixin.prototype.one = function (type, handler) {
    addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);
    return this; // for chaining
  };

  EmitterMixin.prototype.off = function (type, handler) {
    if (this._handlers) {
      removeFromHash(this._handlers, type, handler);
    }

    if (this._oneHandlers) {
      removeFromHash(this._oneHandlers, type, handler);
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.trigger = function (type) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    this.triggerWith(type, this, args);
    return this; // for chaining
  };

  EmitterMixin.prototype.triggerWith = function (type, context, args) {
    if (this._handlers) {
      applyAll(this._handlers[type], context, args);
    }

    if (this._oneHandlers) {
      applyAll(this._oneHandlers[type], context, args);
      delete this._oneHandlers[type]; // will never fire again
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.hasHandlers = function (type) {
    return this._handlers && this._handlers[type] && this._handlers[type].length || this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length;
  };

  return EmitterMixin;
}(Mixin);

function addToHash(hash, type, handler) {
  (hash[type] || (hash[type] = [])).push(handler);
}

function removeFromHash(hash, type, handler) {
  if (handler) {
    if (hash[type]) {
      hash[type] = hash[type].filter(function (func) {
        return func !== handler;
      });
    }
  } else {
    delete hash[type]; // remove all handler funcs for this type
  }
}
/*
Records offset information for a set of elements, relative to an origin element.
Can record the left/right OR the top/bottom OR both.
Provides methods for querying the cache by position.
*/


var PositionCache =
/** @class */
function () {
  function PositionCache(originEl, els, isHorizontal, isVertical) {
    this.originEl = originEl;
    this.els = els;
    this.isHorizontal = isHorizontal;
    this.isVertical = isVertical;
  } // Queries the els for coordinates and stores them.
  // Call this method before using and of the get* methods below.


  PositionCache.prototype.build = function () {
    var originEl = this.originEl;
    var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left

    if (this.isHorizontal) {
      this.buildElHorizontals(originClientRect.left);
    }

    if (this.isVertical) {
      this.buildElVerticals(originClientRect.top);
    }
  }; // Populates the left/right internal coordinate arrays


  PositionCache.prototype.buildElHorizontals = function (originClientLeft) {
    var lefts = [];
    var rights = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      lefts.push(rect.left - originClientLeft);
      rights.push(rect.right - originClientLeft);
    }

    this.lefts = lefts;
    this.rights = rights;
  }; // Populates the top/bottom internal coordinate arrays


  PositionCache.prototype.buildElVerticals = function (originClientTop) {
    var tops = [];
    var bottoms = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      tops.push(rect.top - originClientTop);
      bottoms.push(rect.bottom - originClientTop);
    }

    this.tops = tops;
    this.bottoms = bottoms;
  }; // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.leftToIndex = function (leftPosition) {
    var lefts = this.lefts;
    var rights = this.rights;
    var len = lefts.length;
    var i;

    for (i = 0; i < len; i++) {
      if (leftPosition >= lefts[i] && leftPosition < rights[i]) {
        return i;
      }
    }
  }; // Given a top offset (from document top), returns the index of the el that it vertically intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.topToIndex = function (topPosition) {
    var tops = this.tops;
    var bottoms = this.bottoms;
    var len = tops.length;
    var i;

    for (i = 0; i < len; i++) {
      if (topPosition >= tops[i] && topPosition < bottoms[i]) {
        return i;
      }
    }
  }; // Gets the width of the element at the given index


  PositionCache.prototype.getWidth = function (leftIndex) {
    return this.rights[leftIndex] - this.lefts[leftIndex];
  }; // Gets the height of the element at the given index


  PositionCache.prototype.getHeight = function (topIndex) {
    return this.bottoms[topIndex] - this.tops[topIndex];
  };

  return PositionCache;
}();
/*
An object for getting/setting scroll-related information for an element.
Internally, this is done very differently for window versus DOM element,
so this object serves as a common interface.
*/


var ScrollController =
/** @class */
function () {
  function ScrollController() {}

  ScrollController.prototype.getMaxScrollTop = function () {
    return this.getScrollHeight() - this.getClientHeight();
  };

  ScrollController.prototype.getMaxScrollLeft = function () {
    return this.getScrollWidth() - this.getClientWidth();
  };

  ScrollController.prototype.canScrollVertically = function () {
    return this.getMaxScrollTop() > 0;
  };

  ScrollController.prototype.canScrollHorizontally = function () {
    return this.getMaxScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollUp = function () {
    return this.getScrollTop() > 0;
  };

  ScrollController.prototype.canScrollDown = function () {
    return this.getScrollTop() < this.getMaxScrollTop();
  };

  ScrollController.prototype.canScrollLeft = function () {
    return this.getScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollRight = function () {
    return this.getScrollLeft() < this.getMaxScrollLeft();
  };

  return ScrollController;
}();

var ElementScrollController =
/** @class */
function (_super) {
  __extends(ElementScrollController, _super);

  function ElementScrollController(el) {
    var _this = _super.call(this) || this;

    _this.el = el;
    return _this;
  }

  ElementScrollController.prototype.getScrollTop = function () {
    return this.el.scrollTop;
  };

  ElementScrollController.prototype.getScrollLeft = function () {
    return this.el.scrollLeft;
  };

  ElementScrollController.prototype.setScrollTop = function (top) {
    this.el.scrollTop = top;
  };

  ElementScrollController.prototype.setScrollLeft = function (left) {
    this.el.scrollLeft = left;
  };

  ElementScrollController.prototype.getScrollWidth = function () {
    return this.el.scrollWidth;
  };

  ElementScrollController.prototype.getScrollHeight = function () {
    return this.el.scrollHeight;
  };

  ElementScrollController.prototype.getClientHeight = function () {
    return this.el.clientHeight;
  };

  ElementScrollController.prototype.getClientWidth = function () {
    return this.el.clientWidth;
  };

  return ElementScrollController;
}(ScrollController);

var WindowScrollController =
/** @class */
function (_super) {
  __extends(WindowScrollController, _super);

  function WindowScrollController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WindowScrollController.prototype.getScrollTop = function () {
    return window.pageYOffset;
  };

  WindowScrollController.prototype.getScrollLeft = function () {
    return window.pageXOffset;
  };

  WindowScrollController.prototype.setScrollTop = function (n) {
    window.scroll(window.pageXOffset, n);
  };

  WindowScrollController.prototype.setScrollLeft = function (n) {
    window.scroll(n, window.pageYOffset);
  };

  WindowScrollController.prototype.getScrollWidth = function () {
    return document.documentElement.scrollWidth;
  };

  WindowScrollController.prototype.getScrollHeight = function () {
    return document.documentElement.scrollHeight;
  };

  WindowScrollController.prototype.getClientHeight = function () {
    return document.documentElement.clientHeight;
  };

  WindowScrollController.prototype.getClientWidth = function () {
    return document.documentElement.clientWidth;
  };

  return WindowScrollController;
}(ScrollController);
/*
Embodies a div that has potential scrollbars
*/


var ScrollComponent =
/** @class */
function (_super) {
  __extends(ScrollComponent, _super);

  function ScrollComponent(overflowX, overflowY) {
    var _this = _super.call(this, createElement('div', {
      className: 'fc-scroller'
    })) || this;

    _this.overflowX = overflowX;
    _this.overflowY = overflowY;

    _this.applyOverflow();

    return _this;
  } // sets to natural height, unlocks overflow


  ScrollComponent.prototype.clear = function () {
    this.setHeight('auto');
    this.applyOverflow();
  };

  ScrollComponent.prototype.destroy = function () {
    removeElement(this.el);
  }; // Overflow
  // -----------------------------------------------------------------------------------------------------------------


  ScrollComponent.prototype.applyOverflow = function () {
    applyStyle(this.el, {
      overflowX: this.overflowX,
      overflowY: this.overflowY
    });
  }; // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
  // Useful for preserving scrollbar widths regardless of future resizes.
  // Can pass in scrollbarWidths for optimization.


  ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {
    var overflowX = this.overflowX;
    var overflowY = this.overflowY;
    scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();

    if (overflowX === 'auto') {
      overflowX = scrollbarWidths.bottom || // horizontal scrollbars?
      this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    if (overflowY === 'auto') {
      overflowY = scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?
      this.canScrollVertically() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    applyStyle(this.el, {
      overflowX: overflowX,
      overflowY: overflowY
    });
  };

  ScrollComponent.prototype.setHeight = function (height) {
    applyStyleProp(this.el, 'height', height);
  };

  ScrollComponent.prototype.getScrollbarWidths = function () {
    var edges = computeEdges(this.el);
    return {
      left: edges.scrollbarLeft,
      right: edges.scrollbarRight,
      bottom: edges.scrollbarBottom
    };
  };

  return ScrollComponent;
}(ElementScrollController);

var Theme =
/** @class */
function () {
  function Theme(calendarOptions) {
    this.calendarOptions = calendarOptions;
    this.processIconOverride();
  }

  Theme.prototype.processIconOverride = function () {
    if (this.iconOverrideOption) {
      this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);
    }
  };

  Theme.prototype.setIconOverride = function (iconOverrideHash) {
    var iconClassesCopy;
    var buttonName;

    if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
      // non-null object
      iconClassesCopy = __assign({}, this.iconClasses);

      for (buttonName in iconOverrideHash) {
        iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
      }

      this.iconClasses = iconClassesCopy;
    } else if (iconOverrideHash === false) {
      this.iconClasses = {};
    }
  };

  Theme.prototype.applyIconOverridePrefix = function (className) {
    var prefix = this.iconOverridePrefix;

    if (prefix && className.indexOf(prefix) !== 0) {
      // if not already present
      className = prefix + className;
    }

    return className;
  };

  Theme.prototype.getClass = function (key) {
    return this.classes[key] || '';
  };

  Theme.prototype.getIconClass = function (buttonName) {
    var className = this.iconClasses[buttonName];

    if (className) {
      return this.baseIconClass + ' ' + className;
    }

    return '';
  };

  Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
    var className;

    if (this.iconOverrideCustomButtonOption) {
      className = customButtonProps[this.iconOverrideCustomButtonOption];

      if (className) {
        return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
      }
    }

    return '';
  };

  return Theme;
}();

Theme.prototype.classes = {};
Theme.prototype.iconClasses = {};
Theme.prototype.baseIconClass = '';
Theme.prototype.iconOverridePrefix = '';
var guid = 0;

var Component =
/** @class */
function () {
  function Component(context, isView) {
    // HACK to populate view at top of component instantiation call chain
    if (isView) {
      context.view = this;
    }

    this.uid = String(guid++);
    this.context = context;
    this.dateEnv = context.dateEnv;
    this.theme = context.theme;
    this.view = context.view;
    this.calendar = context.calendar;
    this.isRtl = this.opt('dir') === 'rtl';
  }

  Component.addEqualityFuncs = function (newFuncs) {
    this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);
  };

  Component.prototype.opt = function (name) {
    return this.context.options[name];
  };

  Component.prototype.receiveProps = function (props) {
    var _a = recycleProps(this.props || {}, props, this.equalityFuncs),
        anyChanges = _a.anyChanges,
        comboProps = _a.comboProps;

    this.props = comboProps;

    if (anyChanges) {
      this.render(comboProps);
    }
  };

  Component.prototype.render = function (props) {}; // after destroy is called, this component won't ever be used again


  Component.prototype.destroy = function () {};

  return Component;
}();

Component.prototype.equalityFuncs = {};
/*
Reuses old values when equal. If anything is unequal, returns newProps as-is.
Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.
*/

function recycleProps(oldProps, newProps, equalityFuncs) {
  var comboProps = {}; // some old, some new

  var anyChanges = false;

  for (var key in newProps) {
    if (key in oldProps && (oldProps[key] === newProps[key] || equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key]))) {
      // equal to old? use old prop
      comboProps[key] = oldProps[key];
    } else {
      comboProps[key] = newProps[key];
      anyChanges = true;
    }
  }

  for (var key in oldProps) {
    if (!(key in newProps)) {
      anyChanges = true;
      break;
    }
  }

  return {
    anyChanges: anyChanges,
    comboProps: comboProps
  };
}
/*
PURPOSES:
- hook up to fg, fill, and mirror renderers
- interface for dragging and hits
*/


var DateComponent =
/** @class */
function (_super) {
  __extends(DateComponent, _super);

  function DateComponent(context, el, isView) {
    var _this = _super.call(this, context, isView) || this;

    _this.el = el;
    return _this;
  }

  DateComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    removeElement(this.el);
  }; // TODO: WHAT ABOUT (sourceSeg && sourceSeg.component.doesDragMirror)
  //
  // Event Drag-n-Drop Rendering (for both events and external elements)
  // ---------------------------------------------------------------------------------------------------------------

  /*
  renderEventDragSegs(state: EventSegUiInteractionState) {
    if (state) {
      let { isEvent, segs, sourceSeg } = state
         if (this.eventRenderer) {
        this.eventRenderer.hideByHash(state.affectedInstances)
      }
         // if the user is dragging something that is considered an event with real event data,
      // and this component likes to do drag mirrors OR the component where the seg came from
      // likes to do drag mirrors, then render a drag mirror.
      if (isEvent && (this.doesDragMirror || sourceSeg && sourceSeg.component.doesDragMirror)) {
        if (this.mirrorRenderer) {
          this.mirrorRenderer.renderSegs(segs, { isDragging: true, sourceSeg })
        }
      }
         // if it would be impossible to render a drag mirror OR this component likes to render
      // highlights, then render a highlight.
      if (!isEvent || this.doesDragHighlight) {
        if (this.fillRenderer) {
          this.fillRenderer.renderSegs('highlight', segs)
        }
      }
    }
  }
  */
  // Hit System
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.buildPositionCaches = function () {};

  DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    return null; // this should be abstract
  }; // Validation
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isInteractionValid = function (interaction) {
    var calendar = this.calendar;
    var dateProfile = this.props.dateProfile; // HACK

    var instances = interaction.mutatedEvents.instances;

    if (dateProfile) {
      // HACK for DayTile
      for (var instanceId in instances) {
        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {
          return false;
        }
      }
    }

    return isInteractionValid(interaction, calendar);
  };

  DateComponent.prototype.isDateSelectionValid = function (selection) {
    var dateProfile = this.props.dateProfile; // HACK

    if (dateProfile && // HACK for DayTile
    !rangeContainsRange(dateProfile.validRange, selection.range)) {
      return false;
    }

    return isDateSelectionValid(selection, this.calendar);
  }; // Triggering
  // -----------------------------------------------------------------------------------------------------------------
  // TODO: move to Calendar


  DateComponent.prototype.publiclyTrigger = function (name, args) {
    var calendar = this.calendar;
    return calendar.publiclyTrigger(name, args);
  };

  DateComponent.prototype.publiclyTriggerAfterSizing = function (name, args) {
    var calendar = this.calendar;
    return calendar.publiclyTriggerAfterSizing(name, args);
  };

  DateComponent.prototype.hasPublicHandlers = function (name) {
    var calendar = this.calendar;
    return calendar.hasPublicHandlers(name);
  };

  DateComponent.prototype.triggerRenderedSegs = function (segs, isMirrors) {
    var calendar = this.calendar;

    if (this.hasPublicHandlers('eventPositioned')) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        this.publiclyTriggerAfterSizing('eventPositioned', [{
          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
          isMirror: isMirrors,
          isStart: seg.isStart,
          isEnd: seg.isEnd,
          el: seg.el,
          view: this // safe to cast because this method is only called on context.view

        }]);
      }
    }

    if (!calendar.state.loadingLevel) {
      // avoid initial empty state while pending
      calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once
    }
  };

  DateComponent.prototype.triggerWillRemoveSegs = function (segs, isMirrors) {
    var calendar = this.calendar;

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      calendar.trigger('eventElRemove', seg.el);
    }

    if (this.hasPublicHandlers('eventDestroy')) {
      for (var _a = 0, segs_3 = segs; _a < segs_3.length; _a++) {
        var seg = segs_3[_a];
        this.publiclyTrigger('eventDestroy', [{
          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
          isMirror: isMirrors,
          el: seg.el,
          view: this // safe to cast because this method is only called on context.view

        }]);
      }
    }
  }; // Pointer Interaction Utils
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isValidSegDownEl = function (el) {
    return !this.props.eventDrag && // HACK
    !this.props.eventResize && // HACK
    !elementClosest(el, '.fc-mirror') && (this.isPopover() || !this.isInPopover(el)); // ^above line ensures we don't detect a seg interaction within a nested component.
    // it's a HACK because it only supports a popover as the nested component.
  };

  DateComponent.prototype.isValidDateDownEl = function (el) {
    var segEl = elementClosest(el, this.fgSegSelector);
    return (!segEl || segEl.classList.contains('fc-mirror')) && !elementClosest(el, '.fc-more') && // a "more.." link
    !elementClosest(el, 'a[data-goto]') && // a clickable nav link
    !this.isInPopover(el);
  };

  DateComponent.prototype.isPopover = function () {
    return this.el.classList.contains('fc-popover');
  };

  DateComponent.prototype.isInPopover = function (el) {
    return Boolean(elementClosest(el, '.fc-popover'));
  };

  return DateComponent;
}(Component);

DateComponent.prototype.fgSegSelector = '.fc-event-container > *';
DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';
var uid$1 = 0;

function createPlugin(input) {
  return {
    id: String(uid$1++),
    deps: input.deps || [],
    reducers: input.reducers || [],
    eventDefParsers: input.eventDefParsers || [],
    isDraggableTransformers: input.isDraggableTransformers || [],
    eventDragMutationMassagers: input.eventDragMutationMassagers || [],
    eventDefMutationAppliers: input.eventDefMutationAppliers || [],
    dateSelectionTransformers: input.dateSelectionTransformers || [],
    datePointTransforms: input.datePointTransforms || [],
    dateSpanTransforms: input.dateSpanTransforms || [],
    views: input.views || {},
    viewPropsTransformers: input.viewPropsTransformers || [],
    isPropsValid: input.isPropsValid || null,
    externalDefTransforms: input.externalDefTransforms || [],
    eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],
    viewContainerModifiers: input.viewContainerModifiers || [],
    eventDropTransformers: input.eventDropTransformers || [],
    componentInteractions: input.componentInteractions || [],
    calendarInteractions: input.calendarInteractions || [],
    themeClasses: input.themeClasses || {},
    eventSourceDefs: input.eventSourceDefs || [],
    cmdFormatter: input.cmdFormatter,
    recurringTypes: input.recurringTypes || [],
    namedTimeZonedImpl: input.namedTimeZonedImpl,
    defaultView: input.defaultView || '',
    elementDraggingImpl: input.elementDraggingImpl,
    optionChangeHandlers: input.optionChangeHandlers || {}
  };
}

var PluginSystem =
/** @class */
function () {
  function PluginSystem() {
    this.hooks = {
      reducers: [],
      eventDefParsers: [],
      isDraggableTransformers: [],
      eventDragMutationMassagers: [],
      eventDefMutationAppliers: [],
      dateSelectionTransformers: [],
      datePointTransforms: [],
      dateSpanTransforms: [],
      views: {},
      viewPropsTransformers: [],
      isPropsValid: null,
      externalDefTransforms: [],
      eventResizeJoinTransforms: [],
      viewContainerModifiers: [],
      eventDropTransformers: [],
      componentInteractions: [],
      calendarInteractions: [],
      themeClasses: {},
      eventSourceDefs: [],
      cmdFormatter: null,
      recurringTypes: [],
      namedTimeZonedImpl: null,
      defaultView: '',
      elementDraggingImpl: null,
      optionChangeHandlers: {}
    };
    this.addedHash = {};
  }

  PluginSystem.prototype.add = function (plugin) {
    if (!this.addedHash[plugin.id]) {
      this.addedHash[plugin.id] = true;

      for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {
        var dep = _a[_i];
        this.add(dep);
      }

      this.hooks = combineHooks(this.hooks, plugin);
    }
  };

  return PluginSystem;
}();

function combineHooks(hooks0, hooks1) {
  return {
    reducers: hooks0.reducers.concat(hooks1.reducers),
    eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),
    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
    views: __assign({}, hooks0.views, hooks1.views),
    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
    eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),
    viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),
    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
    themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),
    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
    defaultView: hooks0.defaultView || hooks1.defaultView,
    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
    optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)
  };
}

var eventSourceDef = {
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      // short form
      return raw;
    } else if (Array.isArray(raw.events)) {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success) {
    success({
      rawEvents: arg.eventSource.meta
    });
  }
};
var ArrayEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef]
});
var eventSourceDef$1 = {
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      // short form
      return raw;
    } else if (typeof raw.events === 'function') {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.eventSource.meta;
    unpromisify(func.bind(null, {
      start: dateEnv.toDate(arg.range.start),
      end: dateEnv.toDate(arg.range.end),
      startStr: dateEnv.formatIso(arg.range.start),
      endStr: dateEnv.formatIso(arg.range.end),
      timeZone: dateEnv.timeZone
    }), function (rawEvents) {
      success({
        rawEvents: rawEvents
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
};
var FuncEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$1]
});

function requestJson(method, url, params, successCallback, failureCallback) {
  method = method.toUpperCase();
  var body = null;

  if (method === 'GET') {
    url = injectQueryStringParams(url, params);
  } else {
    body = encodeParams(params);
  }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true);

  if (method !== 'GET') {
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  }

  xhr.onload = function () {
    if (xhr.status >= 200 && xhr.status < 400) {
      try {
        var res = JSON.parse(xhr.responseText);
        successCallback(res, xhr);
      } catch (err) {
        failureCallback('Failure parsing JSON', xhr);
      }
    } else {
      failureCallback('Request failed', xhr);
    }
  };

  xhr.onerror = function () {
    failureCallback('Request failed', xhr);
  };

  xhr.send(body);
}

function injectQueryStringParams(url, params) {
  return url + (url.indexOf('?') === -1 ? '?' : '&') + encodeParams(params);
}

function encodeParams(params) {
  var parts = [];

  for (var key in params) {
    parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
  }

  return parts.join('&');
}

var eventSourceDef$2 = {
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      // short form
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams,
      startParam: raw.startParam,
      endParam: raw.endParam,
      timeZoneParam: raw.timeZoneParam
    };
  },
  fetch: function (arg, success, failure) {
    var meta = arg.eventSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {
      success({
        rawEvents: rawEvents,
        xhr: xhr
      });
    }, function (errorMessage, xhr) {
      failure({
        message: errorMessage,
        xhr: xhr
      });
    });
  }
};
var JsonFeedEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$2]
});

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};
  startParam = meta.startParam;

  if (startParam == null) {
    startParam = calendar.opt('startParam');
  }

  endParam = meta.endParam;

  if (endParam == null) {
    endParam = calendar.opt('endParam');
  }

  timeZoneParam = meta.timeZoneParam;

  if (timeZoneParam == null) {
    timeZoneParam = calendar.opt('timeZoneParam');
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  params[startParam] = dateEnv.formatIso(range.start);
  params[endParam] = dateEnv.formatIso(range.end);

  if (dateEnv.timeZone !== 'local') {
    params[timeZoneParam] = dateEnv.timeZone;
  }

  return params;
}

var recurring = {
  parse: function (rawEvent, leftoverProps, dateEnv) {
    var createMarker = dateEnv.createMarker.bind(dateEnv);
    var processors = {
      daysOfWeek: null,
      startTime: createDuration,
      endTime: createDuration,
      startRecur: createMarker,
      endRecur: createMarker
    };
    var props = refineProps(rawEvent, processors, {}, leftoverProps);
    var anyValid = false;

    for (var propName in props) {
      if (props[propName] != null) {
        anyValid = true;
        break;
      }
    }

    if (anyValid) {
      var duration = null;

      if ('duration' in leftoverProps) {
        duration = createDuration(leftoverProps.duration);
        delete leftoverProps.duration;
      }

      if (!duration && props.startTime && props.endTime) {
        duration = subtractDurations(props.endTime, props.startTime);
      }

      return {
        allDayGuess: Boolean(!props.startTime && !props.endTime),
        duration: duration,
        typeData: props // doesn't need endTime anymore but oh well

      };
    }

    return null;
  },
  expand: function (typeData, framingRange, dateEnv) {
    var clippedFramingRange = intersectRanges(framingRange, {
      start: typeData.startRecur,
      end: typeData.endRecur
    });

    if (clippedFramingRange) {
      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);
    } else {
      return [];
    }
  }
};
var SimpleRecurrencePlugin = createPlugin({
  recurringTypes: [recurring]
});

function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {
  var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;
  var dayMarker = startOfDay(framingRange.start);
  var endMarker = framingRange.end;
  var instanceStarts = [];

  while (dayMarker < endMarker) {
    var instanceStart // if everyday, or this particular day-of-week
    = void 0; // if everyday, or this particular day-of-week

    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
      if (startTime) {
        instanceStart = dateEnv.add(dayMarker, startTime);
      } else {
        instanceStart = dayMarker;
      }

      instanceStarts.push(instanceStart);
    }

    dayMarker = addDays(dayMarker, 1);
  }

  return instanceStarts;
}

var DefaultOptionChangeHandlers = createPlugin({
  optionChangeHandlers: {
    events: function (events, calendar, deepEqual) {
      handleEventSources([events], calendar, deepEqual);
    },
    eventSources: handleEventSources,
    plugins: handlePlugins
  }
});

function handleEventSources(inputs, calendar, deepEqual) {
  var unfoundSources = hashValuesToArray(calendar.state.eventSources);
  var newInputs = [];

  for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
    var input = inputs_1[_i];
    var inputFound = false;

    for (var i = 0; i < unfoundSources.length; i++) {
      if (deepEqual(unfoundSources[i]._raw, input)) {
        unfoundSources.splice(i, 1); // delete

        inputFound = true;
        break;
      }
    }

    if (!inputFound) {
      newInputs.push(input);
    }
  }

  for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {
    var unfoundSource = unfoundSources_1[_a];
    calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: unfoundSource.sourceId
    });
  }

  for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {
    var newInput = newInputs_1[_b];
    calendar.addEventSource(newInput);
  }
} // shortcoming: won't remove plugins


function handlePlugins(inputs, calendar) {
  calendar.addPluginInputs(inputs); // will gracefully handle duplicates
}

var config = {}; // TODO: make these options

var globalDefaults = {
  defaultRangeSeparator: ' - ',
  titleRangeSeparator: ' \u2013 ',
  defaultTimedEventDuration: '01:00:00',
  defaultAllDayEventDuration: {
    day: 1
  },
  forceEventDuration: false,
  nextDayThreshold: '00:00:00',
  // display
  columnHeader: true,
  defaultView: '',
  aspectRatio: 1.35,
  header: {
    left: 'title',
    center: '',
    right: 'today prev,next'
  },
  weekends: true,
  weekNumbers: false,
  weekNumberCalculation: 'local',
  editable: false,
  // nowIndicator: false,
  scrollTime: '06:00:00',
  minTime: '00:00:00',
  maxTime: '24:00:00',
  showNonCurrentDates: true,
  // event ajax
  lazyFetching: true,
  startParam: 'start',
  endParam: 'end',
  timeZoneParam: 'timeZone',
  timeZone: 'local',
  // allDayDefault: undefined,
  // locale
  locales: [],
  locale: '',
  // dir: will get this from the default locale
  // buttonIcons: null,
  // allows setting a min-height to the event segment to prevent short events overlapping each other
  timeGridEventMinHeight: 0,
  themeSystem: 'standard',
  // eventResizableFromStart: false,
  dragRevertDuration: 500,
  dragScroll: true,
  allDayMaintainDuration: false,
  // selectable: false,
  unselectAuto: true,
  // selectMinDistance: 0,
  dropAccept: '*',
  eventOrder: 'start,-duration,allDay,title',
  // ^ if start tie, longer events go before shorter. final tie-breaker is title text
  // rerenderDelay: null,
  eventLimit: false,
  eventLimitClick: 'popover',
  dayPopoverFormat: {
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  },
  handleWindowResize: true,
  windowResizeDelay: 100,
  longPressDelay: 1000,
  eventDragMinDistance: 5 // only applies to mouse

};
var rtlDefaults = {
  header: {
    left: 'next,prev today',
    center: '',
    right: 'title'
  },
  buttonIcons: {
    // TODO: make RTL support the responibility of the theme
    prev: 'fc-icon-chevron-right',
    next: 'fc-icon-chevron-left',
    prevYear: 'fc-icon-chevrons-right',
    nextYear: 'fc-icon-chevrons-left'
  }
};
var complexOptions = ['header', 'footer', 'buttonText', 'buttonIcons']; // Merges an array of option objects into a single object

function mergeOptions(optionObjs) {
  return mergeProps(optionObjs, complexOptions);
} // TODO: move this stuff to a "plugin"-related file...


var INTERNAL_PLUGINS = [ArrayEventSourcePlugin, FuncEventSourcePlugin, JsonFeedEventSourcePlugin, SimpleRecurrencePlugin, DefaultOptionChangeHandlers];

function refinePluginDefs(pluginInputs) {
  var plugins = [];

  for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {
    var pluginInput = pluginInputs_1[_i];

    if (typeof pluginInput === 'string') {
      var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);

      if (!window[globalName]) {
        console.warn('Plugin file not loaded for ' + pluginInput);
      } else {
        plugins.push(window[globalName].default); // is an ES6 module
      }
    } else {
      plugins.push(pluginInput);
    }
  }

  return INTERNAL_PLUGINS.concat(plugins);
}

var RAW_EN_LOCALE = {
  code: 'en',
  week: {
    dow: 0,
    doy: 4 // 4 days need to be within the year to be considered the first week

  },
  dir: 'ltr',
  buttonText: {
    prev: 'prev',
    next: 'next',
    prevYear: 'prev year',
    nextYear: 'next year',
    year: 'year',
    today: 'today',
    month: 'month',
    week: 'week',
    day: 'day',
    list: 'list'
  },
  weekLabel: 'W',
  allDayText: 'all-day',
  eventLimitText: 'more',
  noEventsMessage: 'No events to display'
};

function parseRawLocales(explicitRawLocales) {
  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
  var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js

  var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless

  var allRawLocales = globalArray.concat( // globalArray is low prio
  hashValuesToArray(globalObject), // medium prio
  explicitRawLocales // highest prio
  );
  var rawLocaleMap = {
    en: RAW_EN_LOCALE // necessary?

  };

  for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {
    var rawLocale = allRawLocales_1[_i];
    rawLocaleMap[rawLocale.code] = rawLocale;
  }

  return {
    map: rawLocaleMap,
    defaultCode: defaultCode
  };
}

function buildLocale(inputSingular, available) {
  if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {
    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);
  } else {
    return queryLocale(inputSingular, available);
  }
}

function queryLocale(codeArg, available) {
  var codes = [].concat(codeArg || []); // will convert to array

  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
  return parseLocale(codeArg, codes, raw);
}

function queryRawLocale(codes, available) {
  for (var i = 0; i < codes.length; i++) {
    var parts = codes[i].toLocaleLowerCase().split('-');

    for (var j = parts.length; j > 0; j--) {
      var simpleId = parts.slice(0, j).join('-');

      if (available[simpleId]) {
        return available[simpleId];
      }
    }
  }

  return null;
}

function parseLocale(codeArg, codes, raw) {
  var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);
  delete merged.code; // don't want this part of the options

  var week = merged.week;
  delete merged.week;
  return {
    codeArg: codeArg,
    codes: codes,
    week: week,
    simpleNumberFormat: new Intl.NumberFormat(codeArg),
    options: merged
  };
}

var OptionsManager =
/** @class */
function () {
  function OptionsManager(overrides) {
    this.overrides = __assign({}, overrides); // make a copy

    this.dynamicOverrides = {};
    this.compute();
  }

  OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {
    var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;

    __assign(overrideHash, updates);

    for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
      var propName = removals_1[_i];
      delete overrideHash[propName];
    }

    this.compute();
  }; // Computes the flattened options hash for the calendar and assigns to `this.options`.
  // Assumes this.overrides and this.dynamicOverrides have already been initialized.


  OptionsManager.prototype.compute = function () {
    // TODO: not a very efficient system
    var locales = firstDefined( // explicit locale option given?
    this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);
    var locale = firstDefined( // explicit locales option given?
    this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);
    var available = parseRawLocales(locales);
    var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;
    var dir = firstDefined( // based on options computed so far, is direction RTL?
    this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);
    var dirDefaults = dir === 'rtl' ? rtlDefaults : {};
    this.dirDefaults = dirDefaults;
    this.localeDefaults = localeDefaults;
    this.computed = mergeOptions([globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);
  };

  return OptionsManager;
}();

var calendarSystemClassMap = {};

function registerCalendarSystem(name, theClass) {
  calendarSystemClassMap[name] = theClass;
}

function createCalendarSystem(name) {
  return new calendarSystemClassMap[name]();
}

var GregorianCalendarSystem =
/** @class */
function () {
  function GregorianCalendarSystem() {}

  GregorianCalendarSystem.prototype.getMarkerYear = function (d) {
    return d.getUTCFullYear();
  };

  GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {
    return d.getUTCMonth();
  };

  GregorianCalendarSystem.prototype.getMarkerDay = function (d) {
    return d.getUTCDate();
  };

  GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {
    return arrayToUtcDate(arr);
  };

  GregorianCalendarSystem.prototype.markerToArray = function (marker) {
    return dateToUtcArray(marker);
  };

  return GregorianCalendarSystem;
}();

registerCalendarSystem('gregory', GregorianCalendarSystem);
var ISO_RE = /^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;

function parse(str) {
  var m = ISO_RE.exec(str);

  if (m) {
    var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));

    if (isValidDate(marker)) {
      var timeZoneOffset = null;

      if (m[13]) {
        timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
      }

      return {
        marker: marker,
        isTimeUnspecified: !m[6],
        timeZoneOffset: timeZoneOffset
      };
    }
  }

  return null;
}

var DateEnv =
/** @class */
function () {
  function DateEnv(settings) {
    var timeZone = this.timeZone = settings.timeZone;
    var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';

    if (settings.namedTimeZoneImpl && isNamedTimeZone) {
      this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
    }

    this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
    this.calendarSystem = createCalendarSystem(settings.calendarSystem);
    this.locale = settings.locale;
    this.weekDow = settings.locale.week.dow;
    this.weekDoy = settings.locale.week.doy;

    if (settings.weekNumberCalculation === 'ISO') {
      this.weekDow = 1;
      this.weekDoy = 4;
    }

    if (typeof settings.firstDay === 'number') {
      this.weekDow = settings.firstDay;
    }

    if (typeof settings.weekNumberCalculation === 'function') {
      this.weekNumberFunc = settings.weekNumberCalculation;
    }

    this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;
    this.cmdFormatter = settings.cmdFormatter;
  } // Creating / Parsing


  DateEnv.prototype.createMarker = function (input) {
    var meta = this.createMarkerMeta(input);

    if (meta === null) {
      return null;
    }

    return meta.marker;
  };

  DateEnv.prototype.createNowMarker = function () {
    if (this.canComputeOffset) {
      return this.timestampToMarker(new Date().valueOf());
    } else {
      // if we can't compute the current date val for a timezone,
      // better to give the current local date vals than UTC
      return arrayToUtcDate(dateToLocalArray(new Date()));
    }
  };

  DateEnv.prototype.createMarkerMeta = function (input) {
    if (typeof input === 'string') {
      return this.parse(input);
    }

    var marker = null;

    if (typeof input === 'number') {
      marker = this.timestampToMarker(input);
    } else if (input instanceof Date) {
      input = input.valueOf();

      if (!isNaN(input)) {
        marker = this.timestampToMarker(input);
      }
    } else if (Array.isArray(input)) {
      marker = arrayToUtcDate(input);
    }

    if (marker === null || !isValidDate(marker)) {
      return null;
    }

    return {
      marker: marker,
      isTimeUnspecified: false,
      forcedTzo: null
    };
  };

  DateEnv.prototype.parse = function (s) {
    var parts = parse(s);

    if (parts === null) {
      return null;
    }

    var marker = parts.marker;
    var forcedTzo = null;

    if (parts.timeZoneOffset !== null) {
      if (this.canComputeOffset) {
        marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);
      } else {
        forcedTzo = parts.timeZoneOffset;
      }
    }

    return {
      marker: marker,
      isTimeUnspecified: parts.isTimeUnspecified,
      forcedTzo: forcedTzo
    };
  }; // Accessors


  DateEnv.prototype.getYear = function (marker) {
    return this.calendarSystem.getMarkerYear(marker);
  };

  DateEnv.prototype.getMonth = function (marker) {
    return this.calendarSystem.getMarkerMonth(marker);
  }; // Adding / Subtracting


  DateEnv.prototype.add = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += dur.years;
    a[1] += dur.months;
    a[2] += dur.days;
    a[6] += dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.subtract = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] -= dur.years;
    a[1] -= dur.months;
    a[2] -= dur.days;
    a[6] -= dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addYears = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += n;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addMonths = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[1] += n;
    return this.calendarSystem.arrayToMarker(a);
  }; // Diffing Whole Units


  DateEnv.prototype.diffWholeYears = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {
      return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
    }

    return null;
  };

  DateEnv.prototype.diffWholeMonths = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {
      return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
    }

    return null;
  }; // Range / Duration


  DateEnv.prototype.greatestWholeUnit = function (m0, m1) {
    var n = this.diffWholeYears(m0, m1);

    if (n !== null) {
      return {
        unit: 'year',
        value: n
      };
    }

    n = this.diffWholeMonths(m0, m1);

    if (n !== null) {
      return {
        unit: 'month',
        value: n
      };
    }

    n = diffWholeWeeks(m0, m1);

    if (n !== null) {
      return {
        unit: 'week',
        value: n
      };
    }

    n = diffWholeDays(m0, m1);

    if (n !== null) {
      return {
        unit: 'day',
        value: n
      };
    }

    n = diffHours(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'hour',
        value: n
      };
    }

    n = diffMinutes(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'minute',
        value: n
      };
    }

    n = diffSeconds(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'second',
        value: n
      };
    }

    return {
      unit: 'millisecond',
      value: m1.valueOf() - m0.valueOf()
    };
  };

  DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {
    // TODO: can use greatestWholeUnit
    var diff;

    if (d.years) {
      diff = this.diffWholeYears(m0, m1);

      if (diff !== null) {
        return diff / asRoughYears(d);
      }
    }

    if (d.months) {
      diff = this.diffWholeMonths(m0, m1);

      if (diff !== null) {
        return diff / asRoughMonths(d);
      }
    }

    if (d.days) {
      diff = diffWholeDays(m0, m1);

      if (diff !== null) {
        return diff / asRoughDays(d);
      }
    }

    return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
  }; // Start-Of


  DateEnv.prototype.startOf = function (m, unit) {
    if (unit === 'year') {
      return this.startOfYear(m);
    } else if (unit === 'month') {
      return this.startOfMonth(m);
    } else if (unit === 'week') {
      return this.startOfWeek(m);
    } else if (unit === 'day') {
      return startOfDay(m);
    } else if (unit === 'hour') {
      return startOfHour(m);
    } else if (unit === 'minute') {
      return startOfMinute(m);
    } else if (unit === 'second') {
      return startOfSecond(m);
    }
  };

  DateEnv.prototype.startOfYear = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);
  };

  DateEnv.prototype.startOfMonth = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);
  };

  DateEnv.prototype.startOfWeek = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);
  }; // Week Number


  DateEnv.prototype.computeWeekNumber = function (marker) {
    if (this.weekNumberFunc) {
      return this.weekNumberFunc(this.toDate(marker));
    } else {
      return weekOfYear(marker, this.weekDow, this.weekDoy);
    }
  }; // TODO: choke on timeZoneName: long


  DateEnv.prototype.format = function (marker, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    return formatter.format({
      marker: marker,
      timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
    }, this);
  };

  DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    if (dateOptions.isEndExclusive) {
      end = addMs(end, -1);
    }

    return formatter.formatRange({
      marker: start,
      timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
    }, {
      marker: end,
      timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
    }, this);
  };

  DateEnv.prototype.formatIso = function (marker, extraOptions) {
    if (extraOptions === void 0) {
      extraOptions = {};
    }

    var timeZoneOffset = null;

    if (!extraOptions.omitTimeZoneOffset) {
      if (extraOptions.forcedTzo != null) {
        timeZoneOffset = extraOptions.forcedTzo;
      } else {
        timeZoneOffset = this.offsetForMarker(marker);
      }
    }

    return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
  }; // TimeZone


  DateEnv.prototype.timestampToMarker = function (ms) {
    if (this.timeZone === 'local') {
      return arrayToUtcDate(dateToLocalArray(new Date(ms)));
    } else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {
      return new Date(ms);
    } else {
      return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
    }
  };

  DateEnv.prototype.offsetForMarker = function (m) {
    if (this.timeZone === 'local') {
      return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
    } else if (this.timeZone === 'UTC') {
      return 0;
    } else if (this.namedTimeZoneImpl) {
      return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
    }

    return null;
  }; // Conversion


  DateEnv.prototype.toDate = function (m, forcedTzo) {
    if (this.timeZone === 'local') {
      return arrayToLocalDate(dateToUtcArray(m));
    } else if (this.timeZone === 'UTC') {
      return new Date(m.valueOf()); // make sure it's a copy
    } else if (!this.namedTimeZoneImpl) {
      return new Date(m.valueOf() - (forcedTzo || 0));
    } else {
      return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms
      );
    }
  };

  return DateEnv;
}();

var SIMPLE_SOURCE_PROPS = {
  id: String,
  allDayDefault: Boolean,
  eventDataTransform: Function,
  success: Function,
  failure: Function
};
var uid$2 = 0;

function doesSourceNeedRange(eventSource, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;
  return !defs[eventSource.sourceDefId].ignoreRange;
}

function parseEventSource(raw, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;

  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(raw);

    if (meta) {
      var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);
      res._raw = raw;
      return res;
    }
  }

  return null;
}

function parseEventSourceProps(raw, meta, sourceDefId, calendar) {
  var leftovers0 = {};
  var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  props.publicId = String(raw.id || '');
  props.sourceId = String(uid$2++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.ui = ui;
  props.extendedProps = leftovers1;
  return props;
}

function reduceEventSources(eventSources, action, dateProfile, calendar) {
  switch (action.type) {
    case 'ADD_EVENT_SOURCES':
      // already parsed
      return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);

    case 'REMOVE_EVENT_SOURCE':
      return removeSource(eventSources, action.sourceId);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);
      } else {
        return eventSources;
      }

    case 'FETCH_EVENT_SOURCES':
    case 'CHANGE_TIMEZONE':
      return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);

    case 'RECEIVE_EVENTS':
    case 'RECEIVE_EVENT_ERROR':
      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return {};

    default:
      return eventSources;
  }
}

var uid$3 = 0;

function addSources(eventSourceHash, sources, fetchRange, calendar) {
  var hash = {};

  for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
    var source = sources_1[_i];
    hash[source.sourceId] = source;
  }

  if (fetchRange) {
    hash = fetchDirtySources(hash, fetchRange, calendar);
  }

  return __assign({}, eventSourceHash, hash);
}

function removeSource(eventSourceHash, sourceId) {
  return filterHash(eventSourceHash, function (eventSource) {
    return eventSource.sourceId !== sourceId;
  });
}

function fetchDirtySources(sourceHash, fetchRange, calendar) {
  return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {
    return isSourceDirty(eventSource, fetchRange, calendar);
  }), fetchRange, calendar);
}

function isSourceDirty(eventSource, fetchRange, calendar) {
  if (!doesSourceNeedRange(eventSource, calendar)) {
    return !eventSource.latestFetchId;
  } else {
    return !calendar.opt('lazyFetching') || !eventSource.fetchRange || fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
  }
}

function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {
  var nextSources = {};

  for (var sourceId in prevSources) {
    var source = prevSources[sourceId];

    if (sourceIdHash[sourceId]) {
      nextSources[sourceId] = fetchSource(source, fetchRange, calendar);
    } else {
      nextSources[sourceId] = source;
    }
  }

  return nextSources;
}

function fetchSource(eventSource, fetchRange, calendar) {
  var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];
  var fetchId = String(uid$3++);
  sourceDef.fetch({
    eventSource: eventSource,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    var rawEvents = res.rawEvents;
    var calSuccess = calendar.opt('eventSourceSuccess');
    var calSuccessRes;
    var sourceSuccessRes;

    if (eventSource.success) {
      sourceSuccessRes = eventSource.success(rawEvents, res.xhr);
    }

    if (calSuccess) {
      calSuccessRes = calSuccess(rawEvents, res.xhr);
    }

    rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;
    calendar.dispatch({
      type: 'RECEIVE_EVENTS',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawEvents: rawEvents
    });
  }, function (error) {
    var callFailure = calendar.opt('eventSourceFailure');
    console.warn(error.message, error);

    if (eventSource.failure) {
      eventSource.failure(error);
    }

    if (callFailure) {
      callFailure(error);
    }

    calendar.dispatch({
      type: 'RECEIVE_EVENT_ERROR',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, eventSource, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
  var _a;

  var eventSource = sourceHash[sourceId];

  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId) {
    return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, {
      isFetching: false,
      fetchRange: fetchRange
    }), _a));
  }

  return sourceHash;
}

function excludeStaticSources(eventSources, calendar) {
  return filterHash(eventSources, function (eventSource) {
    return doesSourceNeedRange(eventSource, calendar);
  });
}

var DateProfileGenerator =
/** @class */
function () {
  function DateProfileGenerator(viewSpec, calendar) {
    this.viewSpec = viewSpec;
    this.options = viewSpec.options;
    this.dateEnv = calendar.dateEnv;
    this.calendar = calendar;
    this.initHiddenDays();
  }
  /* Date Range Computation
  ------------------------------------------------------------------------------------------------------------------*/
  // Builds a structure with info about what the dates/ranges will be for the "prev" view.


  DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(prevDate, -1);
  }; // Builds a structure with info about what the dates/ranges will be for the "next" view.


  DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(nextDate, 1);
  }; // Builds a structure holding dates/ranges for rendering around the given date.
  // Optional direction param indicates whether the date is being incremented/decremented
  // from its previous value. decremented = -1, incremented = 1 (default).


  DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {
    if (forceToValid === void 0) {
      forceToValid = false;
    }

    var validRange;
    var minTime = null;
    var maxTime = null;
    var currentInfo;
    var isRangeAllDay;
    var renderRange;
    var activeRange;
    var isValid;
    validRange = this.buildValidRange();
    validRange = this.trimHiddenDays(validRange);

    if (forceToValid) {
      currentDate = constrainMarkerToRange(currentDate, validRange);
    }

    currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
    isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
    renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
    renderRange = this.trimHiddenDays(renderRange);
    activeRange = renderRange;

    if (!this.options.showNonCurrentDates) {
      activeRange = intersectRanges(activeRange, currentInfo.range);
    }

    minTime = createDuration(this.options.minTime);
    maxTime = createDuration(this.options.maxTime);
    activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);
    activeRange = intersectRanges(activeRange, validRange); // might return null
    // it's invalid if the originally requested date is not contained,
    // or if the range is completely outside of the valid range.

    isValid = rangesIntersect(currentInfo.range, validRange);
    return {
      // constraint for where prev/next operations can go and where events can be dragged/resized to.
      // an object with optional start and end properties.
      validRange: validRange,
      // range the view is formally responsible for.
      // for example, a month view might have 1st-31st, excluding padded dates
      currentRange: currentInfo.range,
      // name of largest unit being displayed, like "month" or "week"
      currentRangeUnit: currentInfo.unit,
      isRangeAllDay: isRangeAllDay,
      // dates that display events and accept drag-n-drop
      // will be `null` if no dates accept events
      activeRange: activeRange,
      // date range with a rendered skeleton
      // includes not-active days that need some sort of DOM
      renderRange: renderRange,
      // Duration object that denotes the first visible time of any given day
      minTime: minTime,
      // Duration object that denotes the exclusive visible end time of any given day
      maxTime: maxTime,
      isValid: isValid,
      // how far the current date will move for a prev/next operation
      dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^

    };
  }; // Builds an object with optional start/end properties.
  // Indicates the minimum/maximum dates to display.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildValidRange = function () {
    return this.getRangeOption('validRange', this.calendar.getNow()) || {
      start: null,
      end: null
    }; // completely open-ended
  }; // Builds a structure with info about the "current" range, the range that is
  // highlighted as being the current month for example.
  // See build() for a description of `direction`.
  // Guaranteed to have `range` and `unit` properties. `duration` is optional.


  DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
    var _a = this,
        viewSpec = _a.viewSpec,
        dateEnv = _a.dateEnv;

    var duration = null;
    var unit = null;
    var range = null;
    var dayCount;

    if (viewSpec.duration) {
      duration = viewSpec.duration;
      unit = viewSpec.durationUnit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    } else if (dayCount = this.options.dayCount) {
      unit = 'day';
      range = this.buildRangeFromDayCount(date, direction, dayCount);
    } else if (range = this.buildCustomVisibleRange(date)) {
      unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;
    } else {
      duration = this.getFallbackDuration();
      unit = greatestDurationDenominator(duration).unit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    }

    return {
      duration: duration,
      unit: unit,
      range: range
    };
  };

  DateProfileGenerator.prototype.getFallbackDuration = function () {
    return createDuration({
      day: 1
    });
  }; // Returns a new activeRange to have time values (un-ambiguate)
  // minTime or maxTime causes the range to expand.


  DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {
    var dateEnv = this.dateEnv;
    var start = range.start;
    var end = range.end;

    if (this.viewSpec.class.prototype.usesMinMaxTime) {
      // expand active range if minTime is negative (why not when positive?)
      if (asRoughDays(minTime) < 0) {
        start = startOfDay(start); // necessary?

        start = dateEnv.add(start, minTime);
      } // expand active range if maxTime is beyond one day (why not when positive?)


      if (asRoughDays(maxTime) > 1) {
        end = startOfDay(end); // necessary?

        end = addDays(end, -1);
        end = dateEnv.add(end, maxTime);
      }
    }

    return {
      start: start,
      end: end
    };
  }; // Builds the "current" range when it is specified as an explicit duration.
  // `unit` is the already-computed greatestDurationDenominator unit of duration.


  DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
    var dateEnv = this.dateEnv;
    var alignment = this.options.dateAlignment;
    var dateIncrementInput;
    var dateIncrementDuration;
    var start;
    var end;
    var res; // compute what the alignment should be

    if (!alignment) {
      dateIncrementInput = this.options.dateIncrement;

      if (dateIncrementInput) {
        dateIncrementDuration = createDuration(dateIncrementInput); // use the smaller of the two units

        if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {
          alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;
        } else {
          alignment = unit;
        }
      } else {
        alignment = unit;
      }
    } // if the view displays a single day or smaller


    if (asRoughDays(duration) <= 1) {
      if (this.isHiddenDay(start)) {
        start = this.skipHiddenDays(start, direction);
        start = startOfDay(start);
      }
    }

    function computeRes() {
      start = dateEnv.startOf(date, alignment);
      end = dateEnv.add(start, duration);
      res = {
        start: start,
        end: end
      };
    }

    computeRes(); // if range is completely enveloped by hidden days, go past the hidden days

    if (!this.trimHiddenDays(res)) {
      date = this.skipHiddenDays(date, direction);
      computeRes();
    }

    return res;
  }; // Builds the "current" range when a dayCount is specified.


  DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
    var dateEnv = this.dateEnv;
    var customAlignment = this.options.dateAlignment;
    var runningCount = 0;
    var start = date;
    var end;

    if (customAlignment) {
      start = dateEnv.startOf(start, customAlignment);
    }

    start = startOfDay(start);
    start = this.skipHiddenDays(start, direction);
    end = start;

    do {
      end = addDays(end, 1);

      if (!this.isHiddenDay(end)) {
        runningCount++;
      }
    } while (runningCount < dayCount);

    return {
      start: start,
      end: end
    };
  }; // Builds a normalized range object for the "visible" range,
  // which is a way to define the currentRange and activeRange at the same time.


  DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
    var dateEnv = this.dateEnv;
    var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));

    if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {
      return null;
    }

    return visibleRange;
  }; // Computes the range that will represent the element/cells for *rendering*,
  // but which may have voided days/times.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
    return currentRange;
  }; // Compute the duration value that should be added/substracted to the current date
  // when a prev/next operation happens.


  DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
    var dateIncrementInput = this.options.dateIncrement;
    var customAlignment;

    if (dateIncrementInput) {
      return createDuration(dateIncrementInput);
    } else if (customAlignment = this.options.dateAlignment) {
      return createDuration(1, customAlignment);
    } else if (fallback) {
      return fallback;
    } else {
      return createDuration({
        days: 1
      });
    }
  }; // Arguments after name will be forwarded to a hypothetical function value
  // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
  // Always clone your objects if you fear mutation.


  DateProfileGenerator.prototype.getRangeOption = function (name) {
    var otherArgs = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      otherArgs[_i - 1] = arguments[_i];
    }

    var val = this.options[name];

    if (typeof val === 'function') {
      val = val.apply(null, otherArgs);
    }

    if (val) {
      val = parseRange(val, this.dateEnv);
    }

    if (val) {
      val = computeVisibleDayRange(val);
    }

    return val;
  };
  /* Hidden Days
  ------------------------------------------------------------------------------------------------------------------*/
  // Initializes internal variables related to calculating hidden days-of-week


  DateProfileGenerator.prototype.initHiddenDays = function () {
    var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden

    var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)

    var dayCnt = 0;
    var i;

    if (this.options.weekends === false) {
      hiddenDays.push(0, 6); // 0=sunday, 6=saturday
    }

    for (i = 0; i < 7; i++) {
      if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {
        dayCnt++;
      }
    }

    if (!dayCnt) {
      throw new Error('invalid hiddenDays'); // all days were hidden? bad.
    }

    this.isHiddenDayHash = isHiddenDayHash;
  }; // Remove days from the beginning and end of the range that are computed as hidden.
  // If the whole range is trimmed off, returns null


  DateProfileGenerator.prototype.trimHiddenDays = function (range) {
    var start = range.start;
    var end = range.end;

    if (start) {
      start = this.skipHiddenDays(start);
    }

    if (end) {
      end = this.skipHiddenDays(end, -1, true);
    }

    if (start == null || end == null || start < end) {
      return {
        start: start,
        end: end
      };
    }

    return null;
  }; // Is the current day hidden?
  // `day` is a day-of-week index (0-6), or a Date (used for UTC)


  DateProfileGenerator.prototype.isHiddenDay = function (day) {
    if (day instanceof Date) {
      day = day.getUTCDay();
    }

    return this.isHiddenDayHash[day];
  }; // Incrementing the current day until it is no longer a hidden day, returning a copy.
  // DOES NOT CONSIDER validRange!
  // If the initial value of `date` is not a hidden day, don't do anything.
  // Pass `isExclusive` as `true` if you are dealing with an end date.
  // `inc` defaults to `1` (increment one day forward each time)


  DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {
    if (inc === void 0) {
      inc = 1;
    }

    if (isExclusive === void 0) {
      isExclusive = false;
    }

    while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {
      date = addDays(date, inc);
    }

    return date;
  };

  return DateProfileGenerator;
}(); // TODO: find a way to avoid comparing DateProfiles. it's tedious


function isDateProfilesEqual(p0, p1) {
  return rangesEqual(p0.validRange, p1.validRange) && rangesEqual(p0.activeRange, p1.activeRange) && rangesEqual(p0.renderRange, p1.renderRange) && durationsEqual(p0.minTime, p1.minTime) && durationsEqual(p0.maxTime, p1.maxTime);
  /*
  TODO: compare more?
    currentRange: DateRange
    currentRangeUnit: string
    isRangeAllDay: boolean
    isValid: boolean
    dateIncrement: Duration
  */
}

function reduce(state, action, calendar) {
  var viewType = reduceViewType(state.viewType, action);
  var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);
  var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);

  var nextState = __assign({}, state, {
    viewType: viewType,
    dateProfile: dateProfile,
    currentDate: reduceCurrentDate(state.currentDate, action, dateProfile),
    eventSources: eventSources,
    eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar),
    dateSelection: reduceDateSelection(state.dateSelection, action, calendar),
    eventSelection: reduceSelectedEvent(state.eventSelection, action),
    eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar),
    eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar),
    eventSourceLoadingLevel: computeLoadingLevel(eventSources),
    loadingLevel: computeLoadingLevel(eventSources)
  });

  for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {
    var reducerFunc = _a[_i];
    nextState = reducerFunc(nextState, action, calendar);
  } // console.log(action.type, nextState)


  return nextState;
}

function reduceViewType(currentViewType, action) {
  switch (action.type) {
    case 'SET_VIEW_TYPE':
      return action.viewType;

    default:
      return currentViewType;
  }
}

function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {
  var newDateProfile;

  switch (action.type) {
    case 'PREV':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);
      break;

    case 'NEXT':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);
      break;

    case 'SET_DATE':
      if (!currentDateProfile.activeRange || !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {
        newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid
        );
      }

      break;

    case 'SET_VIEW_TYPE':
      var generator = calendar.dateProfileGenerators[viewType];

      if (!generator) {
        throw new Error(viewType ? 'The FullCalendar view "' + viewType + '" does not exist. Make sure your plugins are loaded correctly.' : 'No available FullCalendar view plugins.');
      }

      newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid
      );
      break;
  }

  if (newDateProfile && newDateProfile.isValid && !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {
    return newDateProfile;
  } else {
    return currentDateProfile;
  }
}

function reduceCurrentDate(currentDate, action, dateProfile) {
  switch (action.type) {
    case 'PREV':
    case 'NEXT':
      if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {
        return dateProfile.currentRange.start;
      } else {
        return currentDate;
      }

    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      var newDate = action.dateMarker || currentDate;

      if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {
        return dateProfile.currentRange.start;
      } else {
        return newDate;
      }

    default:
      return currentDate;
  }
}

function reduceDateSelection(currentSelection, action, calendar) {
  switch (action.type) {
    case 'SELECT_DATES':
      return action.selection;

    case 'UNSELECT_DATES':
      return null;

    default:
      return currentSelection;
  }
}

function reduceSelectedEvent(currentInstanceId, action) {
  switch (action.type) {
    case 'SELECT_EVENT':
      return action.eventInstanceId;

    case 'UNSELECT_EVENT':
      return '';

    default:
      return currentInstanceId;
  }
}

function reduceEventDrag(currentDrag, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_DRAG':
      var newDrag = action.state;
      return {
        affectedEvents: newDrag.affectedEvents,
        mutatedEvents: newDrag.mutatedEvents,
        isEvent: newDrag.isEvent,
        origSeg: newDrag.origSeg
      };

    case 'UNSET_EVENT_DRAG':
      return null;

    default:
      return currentDrag;
  }
}

function reduceEventResize(currentResize, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_RESIZE':
      var newResize = action.state;
      return {
        affectedEvents: newResize.affectedEvents,
        mutatedEvents: newResize.mutatedEvents,
        isEvent: newResize.isEvent,
        origSeg: newResize.origSeg
      };

    case 'UNSET_EVENT_RESIZE':
      return null;

    default:
      return currentResize;
  }
}

function computeLoadingLevel(eventSources) {
  var cnt = 0;

  for (var sourceId in eventSources) {
    if (eventSources[sourceId].isFetching) {
      cnt++;
    }
  }

  return cnt;
}

var STANDARD_PROPS = {
  start: null,
  end: null,
  allDay: Boolean
};

function parseDateSpan(raw, dateEnv, defaultDuration) {
  var span = parseOpenDateSpan(raw, dateEnv);
  var range = span.range;

  if (!range.start) {
    return null;
  }

  if (!range.end) {
    if (defaultDuration == null) {
      return null;
    } else {
      range.end = dateEnv.add(range.start, defaultDuration);
    }
  }

  return span;
}
/*
TODO: somehow combine with parseRange?
Will return null if the start/end props were present but parsed invalidly.
*/


function parseOpenDateSpan(raw, dateEnv) {
  var leftovers = {};
  var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);
  var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
  var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
  var allDay = standardProps.allDay;

  if (allDay == null) {
    allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
  } // use this leftover object as the selection object


  leftovers.range = {
    start: startMeta ? startMeta.marker : null,
    end: endMeta ? endMeta.marker : null
  };
  leftovers.allDay = allDay;
  return leftovers;
}

function isDateSpansEqual(span0, span1) {
  return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
} // the NON-DATE-RELATED props


function isSpanPropsEqual(span0, span1) {
  for (var propName in span1) {
    if (propName !== 'range' && propName !== 'allDay') {
      if (span0[propName] !== span1[propName]) {
        return false;
      }
    }
  } // are there any props that span0 has that span1 DOESN'T have?
  // both have range/allDay, so no need to special-case.


  for (var propName in span0) {
    if (!(propName in span1)) {
      return false;
    }
  }

  return true;
}

function buildDateSpanApi(span, dateEnv) {
  return {
    start: dateEnv.toDate(span.range.start),
    end: dateEnv.toDate(span.range.end),
    startStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    endStr: dateEnv.formatIso(span.range.end, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function buildDatePointApi(span, dateEnv) {
  return {
    date: dateEnv.toDate(span.range.start),
    dateStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function fabricateEventRange(dateSpan, eventUiBases, calendar) {
  var def = parseEventDef({
    editable: false
  }, '', // sourceId
  dateSpan.allDay, true, // hasEnd
  calendar);
  return {
    def: def,
    ui: compileEventUi(def, eventUiBases),
    instance: createEventInstance(def.defId, dateSpan.range),
    range: dateSpan.range,
    isStart: true,
    isEnd: true
  };
}

function compileViewDefs(defaultConfigs, overrideConfigs) {
  var hash = {};
  var viewType;

  for (viewType in defaultConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  for (viewType in overrideConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  return hash;
}

function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  if (hash[viewType]) {
    return hash[viewType];
  }

  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);

  if (viewDef) {
    hash[viewType] = viewDef;
  }

  return viewDef;
}

function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  var defaultConfig = defaultConfigs[viewType];
  var overrideConfig = overrideConfigs[viewType];

  var queryProp = function (name) {
    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
  };

  var theClass = queryProp('class');
  var superType = queryProp('superType');

  if (!superType && theClass) {
    superType = findViewNameBySubclass(theClass, overrideConfigs) || findViewNameBySubclass(theClass, defaultConfigs);
  }

  var superDef = null;

  if (superType) {
    if (superType === viewType) {
      throw new Error('Can\'t have a custom view type that references itself');
    }

    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
  }

  if (!theClass && superDef) {
    theClass = superDef.class;
  }

  if (!theClass) {
    return null; // don't throw a warning, might be settings for a single-unit view
  }

  return {
    type: viewType,
    class: theClass,
    defaults: __assign({}, superDef ? superDef.defaults : {}, defaultConfig ? defaultConfig.options : {}),
    overrides: __assign({}, superDef ? superDef.overrides : {}, overrideConfig ? overrideConfig.options : {})
  };
}

function findViewNameBySubclass(viewSubclass, configs) {
  var superProto = Object.getPrototypeOf(viewSubclass.prototype);

  for (var viewType in configs) {
    var parsed = configs[viewType]; // need DIRECT subclass, so instanceof won't do it

    if (parsed.class && parsed.class.prototype === superProto) {
      return viewType;
    }
  }

  return '';
}

function parseViewConfigs(inputs) {
  return mapHash(inputs, parseViewConfig);
}

var VIEW_DEF_PROPS = {
  type: String,
  class: null
};

function parseViewConfig(input) {
  if (typeof input === 'function') {
    input = {
      class: input
    };
  }

  var options = {};
  var props = refineProps(input, VIEW_DEF_PROPS, {}, options);
  return {
    superType: props.type,
    class: props.class,
    options: options
  };
}

function buildViewSpecs(defaultInputs, optionsManager) {
  var defaultConfigs = parseViewConfigs(defaultInputs);
  var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);
  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
  return mapHash(viewDefs, function (viewDef) {
    return buildViewSpec(viewDef, overrideConfigs, optionsManager);
  });
}

function buildViewSpec(viewDef, overrideConfigs, optionsManager) {
  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || optionsManager.dynamicOverrides.duration || optionsManager.overrides.duration;
  var duration = null;
  var durationUnit = '';
  var singleUnit = '';
  var singleUnitOverrides = {};

  if (durationInput) {
    duration = createDuration(durationInput);

    if (duration) {
      // valid?
      var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));
      durationUnit = denom.unit;

      if (denom.value === 1) {
        singleUnit = durationUnit;
        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};
      }
    }
  }

  var queryButtonText = function (options) {
    var buttonTextMap = options.buttonText || {};
    var buttonTextKey = viewDef.defaults.buttonTextKey;

    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {
      return buttonTextMap[buttonTextKey];
    }

    if (buttonTextMap[viewDef.type] != null) {
      return buttonTextMap[viewDef.type];
    }

    if (buttonTextMap[singleUnit] != null) {
      return buttonTextMap[singleUnit];
    }
  };

  return {
    type: viewDef.type,
    class: viewDef.class,
    duration: duration,
    durationUnit: durationUnit,
    singleUnit: singleUnit,
    options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),
    buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
    viewDef.overrides.buttonText,
    buttonTextDefault: queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || viewDef.defaults.buttonText || queryButtonText(globalDefaults) || viewDef.type // fall back to given view name

  };
}

var Toolbar =
/** @class */
function (_super) {
  __extends(Toolbar, _super);

  function Toolbar(context, extraClassName) {
    var _this = _super.call(this, context) || this;

    _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);
    _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);
    _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);
    _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);
    _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);
    _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);
    _this.el = createElement('div', {
      className: 'fc-toolbar ' + extraClassName
    });
    return _this;
  }

  Toolbar.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderLayout.unrender(); // should unrender everything else


    removeElement(this.el);
  };

  Toolbar.prototype.render = function (props) {
    this._renderLayout(props.layout);

    this._updateTitle(props.title);

    this._updateActiveButton(props.activeButton);

    this._updateToday(props.isTodayEnabled);

    this._updatePrev(props.isPrevEnabled);

    this._updateNext(props.isNextEnabled);
  };

  Toolbar.prototype.renderLayout = function (layout) {
    var el = this.el;
    this.viewsWithButtons = [];
    appendToElement(el, this.renderSection('left', layout.left));
    appendToElement(el, this.renderSection('center', layout.center));
    appendToElement(el, this.renderSection('right', layout.right));
  };

  Toolbar.prototype.unrenderLayout = function () {
    this.el.innerHTML = '';
  };

  Toolbar.prototype.renderSection = function (position, buttonStr) {
    var _this = this;

    var _a = this,
        theme = _a.theme,
        calendar = _a.calendar;

    var optionsManager = calendar.optionsManager;
    var viewSpecs = calendar.viewSpecs;
    var sectionEl = createElement('div', {
      className: 'fc-' + position
    });
    var calendarCustomButtons = optionsManager.computed.customButtons || {};
    var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
    var calendarButtonText = optionsManager.computed.buttonText || {};

    if (buttonStr) {
      buttonStr.split(' ').forEach(function (buttonGroupStr, i) {
        var groupChildren = [];
        var isOnlyButtons = true;
        var groupEl;
        buttonGroupStr.split(',').forEach(function (buttonName, j) {
          var customButtonProps;
          var viewSpec;
          var buttonClick;
          var buttonIcon; // only one of these will be set

          var buttonText; // "

          var buttonInnerHtml;
          var buttonClasses;
          var buttonEl;
          var buttonAriaAttr;

          if (buttonName === 'title') {
            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height

            isOnlyButtons = false;
          } else {
            if (customButtonProps = calendarCustomButtons[buttonName]) {
              buttonClick = function (ev) {
                if (customButtonProps.click) {
                  customButtonProps.click.call(buttonEl, ev);
                }
              };

              (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);
            } else if (viewSpec = viewSpecs[buttonName]) {
              _this.viewsWithButtons.push(buttonName);

              buttonClick = function () {
                calendar.changeView(buttonName);
              };

              (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);
            } else if (calendar[buttonName]) {
              // a calendar method
              buttonClick = function () {
                calendar[buttonName]();
              };

              (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]); //            ^ everything else is considered default
            }

            if (buttonClick) {
              buttonClasses = ['fc-' + buttonName + '-button', theme.getClass('button')];

              if (buttonText) {
                buttonInnerHtml = htmlEscape(buttonText);
                buttonAriaAttr = '';
              } else if (buttonIcon) {
                buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                buttonAriaAttr = ' aria-label="' + buttonName + '"';
              }

              buttonEl = htmlToElement( // type="button" so that it doesn't submit a form
              '<button type="button" class="' + buttonClasses.join(' ') + '"' + buttonAriaAttr + '>' + buttonInnerHtml + '</button>');
              buttonEl.addEventListener('click', buttonClick);
              groupChildren.push(buttonEl);
            }
          }
        });

        if (groupChildren.length > 1) {
          groupEl = document.createElement('div');
          var buttonGroupClassName = theme.getClass('buttonGroup');

          if (isOnlyButtons && buttonGroupClassName) {
            groupEl.classList.add(buttonGroupClassName);
          }

          appendToElement(groupEl, groupChildren);
          sectionEl.appendChild(groupEl);
        } else {
          appendToElement(sectionEl, groupChildren); // 1 or 0 children
        }
      });
    }

    return sectionEl;
  };

  Toolbar.prototype.updateToday = function (isTodayEnabled) {
    this.toggleButtonEnabled('today', isTodayEnabled);
  };

  Toolbar.prototype.updatePrev = function (isPrevEnabled) {
    this.toggleButtonEnabled('prev', isPrevEnabled);
  };

  Toolbar.prototype.updateNext = function (isNextEnabled) {
    this.toggleButtonEnabled('next', isNextEnabled);
  };

  Toolbar.prototype.updateTitle = function (text) {
    findElements(this.el, 'h2').forEach(function (titleEl) {
      titleEl.innerText = text;
    });
  };

  Toolbar.prototype.updateActiveButton = function (buttonName) {
    var className = this.theme.getClass('buttonActive');
    findElements(this.el, 'button').forEach(function (buttonEl) {
      if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {
        buttonEl.classList.add(className);
      } else {
        buttonEl.classList.remove(className);
      }
    });
  };

  Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {
    findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {
      buttonEl.disabled = !bool;
    });
  };

  return Toolbar;
}(Component);

var CalendarComponent =
/** @class */
function (_super) {
  __extends(CalendarComponent, _super);

  function CalendarComponent(context, el) {
    var _this = _super.call(this, context) || this;

    _this._renderToolbars = memoizeRendering(_this.renderToolbars);
    _this.buildViewPropTransformers = memoize(buildViewPropTransformers);
    _this.el = el;
    prependToElement(el, _this.contentEl = createElement('div', {
      className: 'fc-view-container'
    }));
    var calendar = _this.calendar;

    for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {
      var modifyViewContainer = _a[_i];
      modifyViewContainer(_this.contentEl, calendar);
    }

    _this.toggleElClassNames(true);

    _this.computeTitle = memoize(computeTitle);
    _this.parseBusinessHours = memoize(function (input) {
      return parseBusinessHours(input, _this.calendar);
    });
    return _this;
  }

  CalendarComponent.prototype.destroy = function () {
    if (this.header) {
      this.header.destroy();
    }

    if (this.footer) {
      this.footer.destroy();
    }

    if (this.view) {
      this.view.destroy();
    }

    removeElement(this.contentEl);
    this.toggleElClassNames(false);

    _super.prototype.destroy.call(this);
  };

  CalendarComponent.prototype.toggleElClassNames = function (bool) {
    var classList = this.el.classList;
    var dirClassName = 'fc-' + this.opt('dir');
    var themeClassName = this.theme.getClass('widget');

    if (bool) {
      classList.add('fc');
      classList.add(dirClassName);
      classList.add(themeClassName);
    } else {
      classList.remove('fc');
      classList.remove(dirClassName);
      classList.remove(themeClassName);
    }
  };

  CalendarComponent.prototype.render = function (props) {
    this.freezeHeight();
    var title = this.computeTitle(props.dateProfile, props.viewSpec.options);

    this._renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, props.dateProfileGenerator, title);

    this.renderView(props, title);
    this.updateSize();
    this.thawHeight();
  };

  CalendarComponent.prototype.renderToolbars = function (viewSpec, dateProfile, currentDate, dateProfileGenerator, title) {
    var headerLayout = this.opt('header');
    var footerLayout = this.opt('footer');
    var now = this.calendar.getNow();
    var todayInfo = dateProfileGenerator.build(now);
    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);
    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);
    var toolbarProps = {
      title: title,
      activeButton: viewSpec.type,
      isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),
      isPrevEnabled: prevInfo.isValid,
      isNextEnabled: nextInfo.isValid
    };

    if (headerLayout) {
      if (!this.header) {
        this.header = new Toolbar(this.context, 'fc-header-toolbar');
        prependToElement(this.el, this.header.el);
      }

      this.header.receiveProps(__assign({
        layout: headerLayout
      }, toolbarProps));
    } else if (this.header) {
      this.header.destroy();
      this.header = null;
    }

    if (footerLayout) {
      if (!this.footer) {
        this.footer = new Toolbar(this.context, 'fc-footer-toolbar');
        appendToElement(this.el, this.footer.el);
      }

      this.footer.receiveProps(__assign({
        layout: footerLayout
      }, toolbarProps));
    } else if (this.footer) {
      this.footer.destroy();
      this.footer = null;
    }
  };

  CalendarComponent.prototype.renderView = function (props, title) {
    var view = this.view;
    var viewSpec = props.viewSpec,
        dateProfileGenerator = props.dateProfileGenerator;

    if (!view || view.viewSpec !== viewSpec) {
      if (view) {
        view.destroy();
      }

      view = this.view = new viewSpec['class']({
        calendar: this.calendar,
        view: null,
        dateEnv: this.dateEnv,
        theme: this.theme,
        options: viewSpec.options
      }, viewSpec, dateProfileGenerator, this.contentEl);
    } else {
      view.addScroll(view.queryScroll());
    }

    view.title = title; // for the API

    var viewProps = {
      dateProfile: props.dateProfile,
      businessHours: this.parseBusinessHours(viewSpec.options.businessHours),
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    };
    var transformers = this.buildViewPropTransformers(this.calendar.pluginSystem.hooks.viewPropsTransformers);

    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
      var transformer = transformers_1[_i];

      __assign(viewProps, transformer.transform(viewProps, viewSpec, props, view));
    }

    view.receiveProps(viewProps);
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.updateSize = function (isResize) {
    if (isResize === void 0) {
      isResize = false;
    }

    var view = this.view;

    if (isResize) {
      view.addScroll(view.queryScroll());
    }

    if (isResize || this.isHeightAuto == null) {
      this.computeHeightVars();
    }

    view.updateSize(isResize, this.viewHeight, this.isHeightAuto);
    view.updateNowIndicator(); // we need to guarantee this will run after updateSize

    view.popScroll(isResize);
  };

  CalendarComponent.prototype.computeHeightVars = function () {
    var calendar = this.calendar; // yuck. need to handle dynamic options

    var heightInput = calendar.opt('height');
    var contentHeightInput = calendar.opt('contentHeight');
    this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';

    if (typeof contentHeightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = contentHeightInput;
    } else if (typeof contentHeightInput === 'function') {
      // exists and is a function
      this.viewHeight = contentHeightInput();
    } else if (typeof heightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = heightInput - this.queryToolbarsHeight();
    } else if (typeof heightInput === 'function') {
      // exists and is a function
      this.viewHeight = heightInput() - this.queryToolbarsHeight();
    } else if (heightInput === 'parent') {
      // set to height of parent element
      var parentEl = this.el.parentNode;
      this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();
    } else {
      this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width / Math.max(calendar.opt('aspectRatio'), .5));
    }
  };

  CalendarComponent.prototype.queryToolbarsHeight = function () {
    var height = 0;

    if (this.header) {
      height += computeHeightAndMargins(this.header.el);
    }

    if (this.footer) {
      height += computeHeightAndMargins(this.footer.el);
    }

    return height;
  }; // Height "Freezing"
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.freezeHeight = function () {
    applyStyle(this.el, {
      height: this.el.getBoundingClientRect().height,
      overflow: 'hidden'
    });
  };

  CalendarComponent.prototype.thawHeight = function () {
    applyStyle(this.el, {
      height: '',
      overflow: ''
    });
  };

  return CalendarComponent;
}(Component); // Title and Date Formatting
// -----------------------------------------------------------------------------------------------------------------
// Computes what the title at the top of the calendar should be for this view


function computeTitle(dateProfile, viewOptions) {
  var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after

  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
    range = dateProfile.currentRange;
  } else {
    // for day units or smaller, use the actual day range
    range = dateProfile.activeRange;
  }

  return this.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), {
    isEndExclusive: dateProfile.isRangeAllDay
  });
} // Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.


function computeTitleFormat(dateProfile) {
  var currentRangeUnit = dateProfile.currentRangeUnit;

  if (currentRangeUnit === 'year') {
    return {
      year: 'numeric'
    };
  } else if (currentRangeUnit === 'month') {
    return {
      year: 'numeric',
      month: 'long'
    }; // like "September 2014"
  } else {
    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);

    if (days !== null && days > 1) {
      // multi-day range. shorter, like "Sep 9 - 10 2014"
      return {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      };
    } else {
      // one day. longer, like "September 9 2014"
      return {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      };
    }
  }
} // Plugin
// -----------------------------------------------------------------------------------------------------------------


function buildViewPropTransformers(theClasses) {
  return theClasses.map(function (theClass) {
    return new theClass();
  });
}

var Interaction =
/** @class */
function () {
  function Interaction(settings) {
    this.component = settings.component;
  }

  Interaction.prototype.destroy = function () {};

  return Interaction;
}();

function parseInteractionSettings(component, input) {
  return {
    component: component,
    el: input.el,
    useEventCenter: input.useEventCenter != null ? input.useEventCenter : true
  };
}

function interactionSettingsToStore(settings) {
  var _a;

  return _a = {}, _a[settings.component.uid] = settings, _a;
} // global state


var interactionSettingsStore = {};
/*
Detects when the user clicks on an event within a DateComponent
*/

var EventClicking =
/** @class */
function (_super) {
  __extends(EventClicking, _super);

  function EventClicking(settings) {
    var _this = _super.call(this, settings) || this;

    _this.handleSegClick = function (ev, segEl) {
      var component = _this.component;
      var seg = getElSeg(segEl);

      if (seg && // might be the <div> surrounding the more link
      component.isValidSegDownEl(ev.target)) {
        // our way to simulate a link click for elements that can't be <a> tags
        // grab before trigger fired in case trigger trashes DOM thru rerendering
        var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');
        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
        component.publiclyTrigger('eventClick', [{
          el: segEl,
          event: new EventApi(component.calendar, seg.eventRange.def, seg.eventRange.instance),
          jsEvent: ev,
          view: component.view
        }]);

        if (url && !ev.defaultPrevented) {
          window.location.href = url;
        }
      }
    };

    var component = settings.component;
    _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);
    return _this;
  }

  return EventClicking;
}(Interaction);
/*
Triggers events and adds/removes core classNames when the user's pointer
enters/leaves event-elements of a component.
*/


var EventHovering =
/** @class */
function (_super) {
  __extends(EventHovering, _super);

  function EventHovering(settings) {
    var _this = _super.call(this, settings) || this; // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it


    _this.handleEventElRemove = function (el) {
      if (el === _this.currentSegEl) {
        _this.handleSegLeave(null, _this.currentSegEl);
      }
    };

    _this.handleSegEnter = function (ev, segEl) {
      if (getElSeg(segEl)) {
        // TODO: better way to make sure not hovering over more+ link or its wrapper
        segEl.classList.add('fc-allow-mouse-resize');
        _this.currentSegEl = segEl;

        _this.triggerEvent('eventMouseEnter', ev, segEl);
      }
    };

    _this.handleSegLeave = function (ev, segEl) {
      if (_this.currentSegEl) {
        segEl.classList.remove('fc-allow-mouse-resize');
        _this.currentSegEl = null;

        _this.triggerEvent('eventMouseLeave', ev, segEl);
      }
    };

    var component = settings.component;
    _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);
    component.calendar.on('eventElRemove', _this.handleEventElRemove);
    return _this;
  }

  EventHovering.prototype.destroy = function () {
    this.removeHoverListeners();
    this.component.calendar.off('eventElRemove', this.handleEventElRemove);
  };

  EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {
    var component = this.component;
    var seg = getElSeg(segEl);

    if (!ev || component.isValidSegDownEl(ev.target)) {
      component.publiclyTrigger(publicEvName, [{
        el: segEl,
        event: new EventApi(this.component.calendar, seg.eventRange.def, seg.eventRange.instance),
        jsEvent: ev,
        view: component.view
      }]);
    }
  };

  return EventHovering;
}(Interaction);

var StandardTheme =
/** @class */
function (_super) {
  __extends(StandardTheme, _super);

  function StandardTheme() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return StandardTheme;
}(Theme);

StandardTheme.prototype.classes = {
  widget: 'fc-unthemed',
  widgetHeader: 'fc-widget-header',
  widgetContent: 'fc-widget-content',
  buttonGroup: 'fc-button-group',
  button: 'fc-button fc-button-primary',
  buttonActive: 'fc-button-active',
  popoverHeader: 'fc-widget-header',
  popoverContent: 'fc-widget-content',
  // day grid
  headerRow: 'fc-widget-header',
  dayRow: 'fc-widget-content',
  // list view
  listView: 'fc-widget-content'
};
StandardTheme.prototype.baseIconClass = 'fc-icon';
StandardTheme.prototype.iconClasses = {
  close: 'fc-icon-x',
  prev: 'fc-icon-chevron-left',
  next: 'fc-icon-chevron-right',
  prevYear: 'fc-icon-chevrons-left',
  nextYear: 'fc-icon-chevrons-right'
};
StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';

var Calendar =
/** @class */
function () {
  function Calendar(el, overrides) {
    var _this = this;

    this.parseRawLocales = memoize(parseRawLocales);
    this.buildLocale = memoize(buildLocale);
    this.buildDateEnv = memoize(buildDateEnv);
    this.buildTheme = memoize(buildTheme);
    this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);
    this.buildSelectionConfig = memoize(this._buildSelectionConfig);
    this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);
    this.buildEventUiBases = memoize(buildEventUiBases);
    this.interactionsStore = {};
    this.actionQueue = [];
    this.isReducing = false; // isDisplaying: boolean = false // installed in DOM? accepting renders?

    this.needsRerender = false; // needs a render?

    this.needsFullRerender = false;
    this.isRendering = false; // currently in the executeRender function?

    this.renderingPauseDepth = 0;
    this.buildDelayedRerender = memoize(buildDelayedRerender);
    this.afterSizingTriggers = {};
    this.isViewUpdated = false;
    this.isDatesUpdated = false;
    this.isEventsUpdated = false;
    this.el = el;
    this.optionsManager = new OptionsManager(overrides || {});
    this.pluginSystem = new PluginSystem(); // only do once. don't do in handleOptions. because can't remove plugins

    this.addPluginInputs(this.optionsManager.computed.plugins || []);
    this.handleOptions(this.optionsManager.computed);
    this.publiclyTrigger('_init'); // for tests

    this.hydrate();
    this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions.map(function (calendarInteractionClass) {
      return new calendarInteractionClass(_this);
    });
  }

  Calendar.prototype.addPluginInputs = function (pluginInputs) {
    var pluginDefs = refinePluginDefs(pluginInputs);

    for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {
      var pluginDef = pluginDefs_1[_i];
      this.pluginSystem.add(pluginDef);
    }
  };

  Object.defineProperty(Calendar.prototype, "view", {
    // public API
    get: function () {
      return this.component ? this.component.view : null;
    },
    enumerable: true,
    configurable: true
  }); // Public API for rendering
  // -----------------------------------------------------------------------------------------------------------------

  Calendar.prototype.render = function () {
    if (!this.component) {
      this.renderableEventStore = createEmptyEventStore();
      this.bindHandlers();
      this.executeRender();
    } else {
      this.requestRerender(true);
    }
  };

  Calendar.prototype.destroy = function () {
    if (this.component) {
      this.unbindHandlers();
      this.component.destroy(); // don't null-out. in case API needs access

      this.component = null; // umm ???

      for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {
        var interaction = _a[_i];
        interaction.destroy();
      }

      this.publiclyTrigger('_destroyed');
    }
  }; // Handlers
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.bindHandlers = function () {
    var _this = this; // event delegation for nav links


    this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {
      var gotoOptions = anchorEl.getAttribute('data-goto');
      gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};
      var dateEnv = _this.dateEnv;
      var dateMarker = dateEnv.createMarker(gotoOptions.date);
      var viewType = gotoOptions.type; // property like "navLinkDayClick". might be a string or a function

      var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');

      if (typeof customAction === 'function') {
        customAction(dateEnv.toDate(dateMarker), ev);
      } else {
        if (typeof customAction === 'string') {
          viewType = customAction;
        }

        _this.zoomTo(dateMarker, viewType);
      }
    });

    if (this.opt('handleWindowResize')) {
      window.addEventListener('resize', this.windowResizeProxy = debounce( // prevents rapid calls
      this.windowResize.bind(this), this.opt('windowResizeDelay')));
    }
  };

  Calendar.prototype.unbindHandlers = function () {
    this.removeNavLinkListener();

    if (this.windowResizeProxy) {
      window.removeEventListener('resize', this.windowResizeProxy);
      this.windowResizeProxy = null;
    }
  }; // Dispatcher
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hydrate = function () {
    var _this = this;

    this.state = this.buildInitialState();
    var rawSources = this.opt('eventSources') || [];
    var singleRawSource = this.opt('events');
    var sources = []; // parsed

    if (singleRawSource) {
      rawSources.unshift(singleRawSource);
    }

    for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {
      var rawSource = rawSources_1[_i];
      var source = parseEventSource(rawSource, this);

      if (source) {
        sources.push(source);
      }
    }

    this.batchRendering(function () {
      _this.dispatch({
        type: 'INIT'
      }); // pass in sources here?


      _this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: sources
      });

      _this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView
      });
    });
  };

  Calendar.prototype.buildInitialState = function () {
    return {
      viewType: null,
      loadingLevel: 0,
      eventSourceLoadingLevel: 0,
      currentDate: this.getInitialDate(),
      dateProfile: null,
      eventSources: {},
      eventStore: createEmptyEventStore(),
      dateSelection: null,
      eventSelection: '',
      eventDrag: null,
      eventResize: null
    };
  };

  Calendar.prototype.dispatch = function (action) {
    this.actionQueue.push(action);

    if (!this.isReducing) {
      this.isReducing = true;
      var oldState = this.state;

      while (this.actionQueue.length) {
        this.state = this.reduce(this.state, this.actionQueue.shift(), this);
      }

      var newState = this.state;
      this.isReducing = false;

      if (!oldState.loadingLevel && newState.loadingLevel) {
        this.publiclyTrigger('loading', [true]);
      } else if (oldState.loadingLevel && !newState.loadingLevel) {
        this.publiclyTrigger('loading', [false]);
      }

      var view = this.component && this.component.view;

      if (oldState.eventStore !== newState.eventStore || this.needsFullRerender) {
        if (oldState.eventStore) {
          this.isEventsUpdated = true;
        }
      }

      if (oldState.dateProfile !== newState.dateProfile || this.needsFullRerender) {
        if (oldState.dateProfile && view) {
          // why would view be null!?
          this.publiclyTrigger('datesDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isDatesUpdated = true;
      }

      if (oldState.viewType !== newState.viewType || this.needsFullRerender) {
        if (oldState.viewType && view) {
          // why would view be null!?
          this.publiclyTrigger('viewSkeletonDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isViewUpdated = true;
      }

      this.requestRerender();
    }
  };

  Calendar.prototype.reduce = function (state, action, calendar) {
    return reduce(state, action, calendar);
  }; // Render Queue
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.requestRerender = function (needsFull) {
    if (needsFull === void 0) {
      needsFull = false;
    }

    this.needsRerender = true;
    this.needsFullRerender = this.needsFullRerender || needsFull;
    this.delayedRerender(); // will call a debounced-version of tryRerender
  };

  Calendar.prototype.tryRerender = function () {
    if (this.component && // must be accepting renders
    this.needsRerender && // indicates that a rerender was requested
    !this.renderingPauseDepth && // not paused
    !this.isRendering // not currently in the render loop
    ) {
        this.executeRender();
      }
  };

  Calendar.prototype.batchRendering = function (func) {
    this.renderingPauseDepth++;
    func();
    this.renderingPauseDepth--;

    if (this.needsRerender) {
      this.requestRerender();
    }
  }; // Rendering
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.executeRender = function () {
    var needsFullRerender = this.needsFullRerender; // save before clearing
    // clear these BEFORE the render so that new values will accumulate during render

    this.needsRerender = false;
    this.needsFullRerender = false;
    this.isRendering = true;
    this.renderComponent(needsFullRerender);
    this.isRendering = false; // received a rerender request while rendering

    if (this.needsRerender) {
      this.delayedRerender();
    }
  };
  /*
  don't call this directly. use executeRender instead
  */


  Calendar.prototype.renderComponent = function (needsFull) {
    var _a = this,
        state = _a.state,
        component = _a.component;

    var viewType = state.viewType;
    var viewSpec = this.viewSpecs[viewType];
    var savedScroll = needsFull && component ? component.view.queryScroll() : null;

    if (!viewSpec) {
      throw new Error("View type \"" + viewType + "\" is not valid");
    } // if event sources are still loading and progressive rendering hasn't been enabled,
    // keep rendering the last fully loaded set of events


    var renderableEventStore = this.renderableEventStore = state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering') ? this.renderableEventStore : state.eventStore;
    var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);
    var eventUiBySource = this.buildEventUiBySource(state.eventSources);
    var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);

    if (needsFull || !component) {
      if (component) {
        component.freezeHeight(); // next component will unfreeze it

        component.destroy();
      }

      component = this.component = new CalendarComponent({
        calendar: this,
        view: null,
        dateEnv: this.dateEnv,
        theme: this.theme,
        options: this.optionsManager.computed
      }, this.el);
      this.isViewUpdated = true;
      this.isDatesUpdated = true;
      this.isEventsUpdated = true;
    }

    component.receiveProps(__assign({}, state, {
      viewSpec: viewSpec,
      dateProfile: state.dateProfile,
      dateProfileGenerator: this.dateProfileGenerators[viewType],
      eventStore: renderableEventStore,
      eventUiBases: eventUiBases,
      dateSelection: state.dateSelection,
      eventSelection: state.eventSelection,
      eventDrag: state.eventDrag,
      eventResize: state.eventResize
    }));

    if (savedScroll) {
      component.view.applyScroll(savedScroll, false);
    }

    if (this.isViewUpdated) {
      this.isViewUpdated = false;
      this.publiclyTrigger('viewSkeletonRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isDatesUpdated) {
      this.isDatesUpdated = false;
      this.publiclyTrigger('datesRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isEventsUpdated) {
      this.isEventsUpdated = false;
    }

    this.releaseAfterSizingTriggers();
  }; // Options
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.setOption = function (name, val) {
    var _a;

    this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);
  };

  Calendar.prototype.getOption = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.opt = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.viewOpt = function (name) {
    return this.viewOpts()[name];
  };

  Calendar.prototype.viewOpts = function () {
    return this.viewSpecs[this.state.viewType].options;
  };
  /*
  handles option changes (like a diff)
  */


  Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {
    var _this = this;

    var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;
    var normalUpdates = {};
    var specialUpdates = {};
    var oldDateEnv = this.dateEnv; // do this before handleOptions

    var isTimeZoneDirty = false;
    var isSizeDirty = false;
    var anyDifficultOptions = Boolean(removals.length);

    for (var name_1 in updates) {
      if (changeHandlers[name_1]) {
        specialUpdates[name_1] = updates[name_1];
      } else {
        normalUpdates[name_1] = updates[name_1];
      }
    }

    for (var name_2 in normalUpdates) {
      if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {
        isSizeDirty = true;
      } else if (/^(defaultDate|defaultView)$/.test(name_2)) ;else {
        anyDifficultOptions = true;

        if (name_2 === 'timeZone') {
          isTimeZoneDirty = true;
        }
      }
    }

    this.optionsManager.mutate(normalUpdates, removals, isDynamic);

    if (anyDifficultOptions) {
      this.handleOptions(this.optionsManager.computed);
      this.needsFullRerender = true;
    }

    this.batchRendering(function () {
      if (anyDifficultOptions) {
        if (isTimeZoneDirty) {
          _this.dispatch({
            type: 'CHANGE_TIMEZONE',
            oldDateEnv: oldDateEnv
          });
        }
        /* HACK
        has the same effect as calling this.requestRerender(true)
        but recomputes the state's dateProfile
        */


        _this.dispatch({
          type: 'SET_VIEW_TYPE',
          viewType: _this.state.viewType
        });
      } else if (isSizeDirty) {
        _this.updateSize();
      } // special updates


      if (deepEqual) {
        for (var name_3 in specialUpdates) {
          changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);
        }
      }
    });
  };
  /*
  rebuilds things based off of a complete set of refined options
  */


  Calendar.prototype.handleOptions = function (options) {
    var _this = this;

    var pluginHooks = this.pluginSystem.hooks;
    this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);
    this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);
    this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);
    this.theme = this.buildTheme(options);
    var available = this.parseRawLocales(options.locales);
    this.availableRawLocales = available.map;
    var locale = this.buildLocale(options.locale || available.defaultCode, available.map);
    this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);
    this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(
    // ineffecient to do every time?

    this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager); // ineffecient to do every time?

    this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {
      return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);
    });
  };

  Calendar.prototype.getAvailableLocaleCodes = function () {
    return Object.keys(this.availableRawLocales);
  };

  Calendar.prototype._buildSelectionConfig = function (rawOpts) {
    return processScopedUiProps('select', rawOpts, this);
  };

  Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {
    if (rawOpts.editable) {
      // so 'editable' affected events
      rawOpts = __assign({}, rawOpts, {
        eventEditable: true
      });
    }

    return processScopedUiProps('event', rawOpts, this);
  }; // Trigger
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hasPublicHandlers = function (name) {
    return this.hasHandlers(name) || this.opt(name); // handler specified in options
  };

  Calendar.prototype.publiclyTrigger = function (name, args) {
    var optHandler = this.opt(name);
    this.triggerWith(name, this, args);

    if (optHandler) {
      return optHandler.apply(this, args);
    }
  };

  Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {
    var afterSizingTriggers = this.afterSizingTriggers;
    (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);
  };

  Calendar.prototype.releaseAfterSizingTriggers = function () {
    var afterSizingTriggers = this.afterSizingTriggers;

    for (var name_4 in afterSizingTriggers) {
      for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {
        var args = _a[_i];
        this.publiclyTrigger(name_4, args);
      }
    }

    this.afterSizingTriggers = {};
  }; // View
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a boolean about whether the view is okay to instantiate at some point


  Calendar.prototype.isValidViewType = function (viewType) {
    return Boolean(this.viewSpecs[viewType]);
  };

  Calendar.prototype.changeView = function (viewType, dateOrRange) {
    var dateMarker = null;

    if (dateOrRange) {
      if (dateOrRange.start && dateOrRange.end) {
        // a range
        this.optionsManager.mutate({
          visibleRange: dateOrRange
        }, []); // will not rerender

        this.handleOptions(this.optionsManager.computed); // ...but yuck
      } else {
        // a date
        dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate
      }
    }

    this.unselect();
    this.dispatch({
      type: 'SET_VIEW_TYPE',
      viewType: viewType,
      dateMarker: dateMarker
    });
  }; // Forces navigation to a view for the given date.
  // `viewType` can be a specific view name or a generic one like "week" or "day".
  // needs to change


  Calendar.prototype.zoomTo = function (dateMarker, viewType) {
    var spec;
    viewType = viewType || 'day'; // day is default zoom

    spec = this.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
    this.unselect();

    if (spec) {
      this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: spec.type,
        dateMarker: dateMarker
      });
    } else {
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: dateMarker
      });
    }
  }; // Given a duration singular unit, like "week" or "day", finds a matching view spec.
  // Preference is given to views that have corresponding buttons.


  Calendar.prototype.getUnitViewSpec = function (unit) {
    var component = this.component;
    var viewTypes = [];
    var i;
    var spec; // put views that have buttons first. there will be duplicates, but oh

    if (component.header) {
      viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);
    }

    if (component.footer) {
      viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);
    }

    for (var viewType in this.viewSpecs) {
      viewTypes.push(viewType);
    }

    for (i = 0; i < viewTypes.length; i++) {
      spec = this.viewSpecs[viewTypes[i]];

      if (spec) {
        if (spec.singleUnit === unit) {
          return spec;
        }
      }
    }
  }; // Current Date
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getInitialDate = function () {
    var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date

    if (defaultDateInput != null) {
      return this.dateEnv.createMarker(defaultDateInput);
    } else {
      return this.getNow(); // getNow already returns unzoned
    }
  };

  Calendar.prototype.prev = function () {
    this.unselect();
    this.dispatch({
      type: 'PREV'
    });
  };

  Calendar.prototype.next = function () {
    this.unselect();
    this.dispatch({
      type: 'NEXT'
    });
  };

  Calendar.prototype.prevYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)
    });
  };

  Calendar.prototype.nextYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)
    });
  };

  Calendar.prototype.today = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.getNow()
    });
  };

  Calendar.prototype.gotoDate = function (zonedDateInput) {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.createMarker(zonedDateInput)
    });
  };

  Calendar.prototype.incrementDate = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // else, warn about invalid input?
      this.unselect();
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: this.dateEnv.add(this.state.currentDate, delta)
      });
    }
  }; // for external API


  Calendar.prototype.getDate = function () {
    return this.dateEnv.toDate(this.state.currentDate);
  }; // Date Formatting Utils
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.formatDate = function (d, formatter) {
    var dateEnv = this.dateEnv;
    return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
  }; // `settings` is for formatter AND isEndExclusive


  Calendar.prototype.formatRange = function (d0, d1, settings) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);
  };

  Calendar.prototype.formatIso = function (d, omitTime) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatIso(dateEnv.createMarker(d), {
      omitTime: omitTime
    });
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.windowResize = function (ev) {
    if (!this.isHandlingWindowResize && this.component && // why?
    ev.target === window // not a jqui resize event
    ) {
        this.isHandlingWindowResize = true;
        this.updateSize();
        this.publiclyTrigger('windowResize', [this.view]);
        this.isHandlingWindowResize = false;
      }
  };

  Calendar.prototype.updateSize = function () {
    if (this.component) {
      // when?
      this.component.updateSize(true);
    }
  }; // Component Registration
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {
    var settings = parseInteractionSettings(component, settingsInput);
    var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];
    var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);
    var interactions = interactionClasses.map(function (interactionClass) {
      return new interactionClass(settings);
    });
    this.interactionsStore[component.uid] = interactions;
    interactionSettingsStore[component.uid] = settings;
  };

  Calendar.prototype.unregisterInteractiveComponent = function (component) {
    for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {
      var listener = _a[_i];
      listener.destroy();
    }

    delete this.interactionsStore[component.uid];
    delete interactionSettingsStore[component.uid];
  }; // Date Selection / Event Selection / DayClick
  // -----------------------------------------------------------------------------------------------------------------
  // this public method receives start/end dates in any format, with any timezone
  // NOTE: args were changed from v3


  Calendar.prototype.select = function (dateOrObj, endDate) {
    var selectionInput;

    if (endDate == null) {
      if (dateOrObj.start != null) {
        selectionInput = dateOrObj;
      } else {
        selectionInput = {
          start: dateOrObj,
          end: null
        };
      }
    } else {
      selectionInput = {
        start: dateOrObj,
        end: endDate
      };
    }

    var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({
      days: 1
    }) // TODO: cache this?
    );

    if (selection) {
      // throw parse error otherwise?
      this.dispatch({
        type: 'SELECT_DATES',
        selection: selection
      });
      this.triggerDateSelect(selection);
    }
  }; // public method


  Calendar.prototype.unselect = function (pev) {
    if (this.state.dateSelection) {
      this.dispatch({
        type: 'UNSELECT_DATES'
      });
      this.triggerDateUnselect(pev);
    }
  };

  Calendar.prototype.triggerDateSelect = function (selection, pev) {
    var arg = __assign({}, this.buildDateSpanApi(selection), {
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    });

    this.publiclyTrigger('select', [arg]);
  };

  Calendar.prototype.triggerDateUnselect = function (pev) {
    this.publiclyTrigger('unselect', [{
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    }]);
  }; // TODO: receive pev?


  Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {
    var arg = __assign({}, this.buildDatePointApi(dateSpan), {
      dayEl: dayEl,
      jsEvent: ev,
      // Is this always a mouse event? See #4655
      view: view
    });

    this.publiclyTrigger('dateClick', [arg]);
  };

  Calendar.prototype.buildDatePointApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDatePointApi(dateSpan, this.dateEnv));

    return props;
  };

  Calendar.prototype.buildDateSpanApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));

    return props;
  }; // Date Utils
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option


  Calendar.prototype.getNow = function () {
    var now = this.opt('now');

    if (typeof now === 'function') {
      now = now();
    }

    if (now == null) {
      return this.dateEnv.createNowMarker();
    }

    return this.dateEnv.createMarker(now);
  }; // Event-Date Utilities
  // -----------------------------------------------------------------------------------------------------------------
  // Given an event's allDay status and start date, return what its fallback end date should be.
  // TODO: rename to computeDefaultEventEnd


  Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {
    var end = marker;

    if (allDay) {
      end = startOfDay(end);
      end = this.dateEnv.add(end, this.defaultAllDayEventDuration);
    } else {
      end = this.dateEnv.add(end, this.defaultTimedEventDuration);
    }

    return end;
  }; // Public Events API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.addEvent = function (eventInput, sourceInput) {
    if (eventInput instanceof EventApi) {
      var def = eventInput._def;
      var instance = eventInput._instance; // not already present? don't want to add an old snapshot

      if (!this.state.eventStore.defs[def.defId]) {
        this.dispatch({
          type: 'ADD_EVENTS',
          eventStore: eventTupleToStore({
            def: def,
            instance: instance
          }) // TODO: better util for two args?

        });
      }

      return eventInput;
    }

    var sourceId;

    if (sourceInput instanceof EventSourceApi) {
      sourceId = sourceInput.internalEventSource.sourceId;
    } else if (sourceInput != null) {
      var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function

      if (!sourceApi) {
        console.warn('Could not find an event source with ID "' + sourceInput + '"'); // TODO: test

        return null;
      } else {
        sourceId = sourceApi.internalEventSource.sourceId;
      }
    }

    var tuple = parseEvent(eventInput, sourceId, this);

    if (tuple) {
      this.dispatch({
        type: 'ADD_EVENTS',
        eventStore: eventTupleToStore(tuple)
      });
      return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
    }

    return null;
  }; // TODO: optimize


  Calendar.prototype.getEventById = function (id) {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    id = String(id);

    for (var defId in defs) {
      var def = defs[defId];

      if (def.publicId === id) {
        if (def.recurringDef) {
          return new EventApi(this, def, null);
        } else {
          for (var instanceId in instances) {
            var instance = instances[instanceId];

            if (instance.defId === def.defId) {
              return new EventApi(this, def, instance);
            }
          }
        }
      }
    }

    return null;
  };

  Calendar.prototype.getEvents = function () {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var id in instances) {
      var instance = instances[id];
      var def = defs[instance.defId];
      eventApis.push(new EventApi(this, def, instance));
    }

    return eventApis;
  };

  Calendar.prototype.removeAllEvents = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENTS'
    });
  };

  Calendar.prototype.rerenderEvents = function () {
    this.dispatch({
      type: 'RESET_EVENTS'
    });
  }; // Public Event Sources API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getEventSources = function () {
    var sourceHash = this.state.eventSources;
    var sourceApis = [];

    for (var internalId in sourceHash) {
      sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));
    }

    return sourceApis;
  };

  Calendar.prototype.getEventSourceById = function (id) {
    var sourceHash = this.state.eventSources;
    id = String(id);

    for (var sourceId in sourceHash) {
      if (sourceHash[sourceId].publicId === id) {
        return new EventSourceApi(this, sourceHash[sourceId]);
      }
    }

    return null;
  };

  Calendar.prototype.addEventSource = function (sourceInput) {
    if (sourceInput instanceof EventSourceApi) {
      // not already present? don't want to add an old snapshot
      if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {
        this.dispatch({
          type: 'ADD_EVENT_SOURCES',
          sources: [sourceInput.internalEventSource]
        });
      }

      return sourceInput;
    }

    var eventSource = parseEventSource(sourceInput, this);

    if (eventSource) {
      // TODO: error otherwise?
      this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: [eventSource]
      });
      return new EventSourceApi(this, eventSource);
    }

    return null;
  };

  Calendar.prototype.removeAllEventSources = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENT_SOURCES'
    });
  };

  Calendar.prototype.refetchEvents = function () {
    this.dispatch({
      type: 'FETCH_EVENT_SOURCES'
    });
  }; // Scroll
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.scrollToTime = function (timeInput) {
    var duration = createDuration(timeInput);

    if (duration) {
      this.component.view.scrollToDuration(duration);
    }
  };

  return Calendar;
}();

EmitterMixin.mixInto(Calendar); // for memoizers
// -----------------------------------------------------------------------------------------------------------------

function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {
  return new DateEnv({
    calendarSystem: 'gregory',
    timeZone: timeZone,
    namedTimeZoneImpl: namedTimeZoneImpl,
    locale: locale,
    weekNumberCalculation: weekNumberCalculation,
    firstDay: firstDay,
    weekLabel: weekLabel,
    cmdFormatter: cmdFormatter
  });
}

function buildTheme(calendarOptions) {
  var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;
  return new themeClass(calendarOptions);
}

function buildDelayedRerender(wait) {
  var func = this.tryRerender.bind(this);

  if (wait != null) {
    func = debounce(func, wait);
  }

  return func;
}

function buildEventUiBySource(eventSources) {
  return mapHash(eventSources, function (eventSource) {
    return eventSource.ui;
  });
}

function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
  var eventUiBases = {
    '': eventUiSingleBase
  };

  for (var defId in eventDefs) {
    var def = eventDefs[defId];

    if (def.sourceId && eventUiBySource[def.sourceId]) {
      eventUiBases[defId] = eventUiBySource[def.sourceId];
    }
  }

  return eventUiBases;
}

var View =
/** @class */
function (_super) {
  __extends(View, _super);

  function View(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, createElement('div', {
      className: 'fc-view fc-' + viewSpec.type + '-view'
    }), true // isView (HACK)
    ) || this;

    _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);
    _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);
    _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);
    _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);
    _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);
    _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);
    _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);
    _this.viewSpec = viewSpec;
    _this.dateProfileGenerator = dateProfileGenerator;
    _this.type = viewSpec.type;
    _this.eventOrderSpecs = parseFieldSpecs(_this.opt('eventOrder'));
    _this.nextDayThreshold = createDuration(_this.opt('nextDayThreshold'));
    parentEl.appendChild(_this.el);

    _this.initialize();

    return _this;
  }

  View.prototype.initialize = function () {};

  Object.defineProperty(View.prototype, "activeStart", {
    // Date Setting/Unsetting
    // -----------------------------------------------------------------------------------------------------------------
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.activeRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "activeEnd", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.activeRange.end);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentStart", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.currentRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentEnd", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.currentRange.end);
    },
    enumerable: true,
    configurable: true
  }); // General Rendering
  // -----------------------------------------------------------------------------------------------------------------

  View.prototype.render = function (props) {
    this.renderDatesMem(props.dateProfile);
    this.renderBusinessHoursMem(props.businessHours);
    this.renderDateSelectionMem(props.dateSelection);
    this.renderEventsMem(props.eventStore);
    this.renderEventSelectionMem(props.eventSelection);
    this.renderEventDragMem(props.eventDrag);
    this.renderEventResizeMem(props.eventResize);
  };

  View.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderDatesMem.unrender(); // should unrender everything else
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    var calendar = this.calendar;

    if (isResize || // HACKS...
    calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      // sort of the catch-all sizing
      // anything that might cause dimension changes
      this.updateBaseSize(isResize, viewHeight, isAuto);
    }
  };

  View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {}; // Date Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDatesWrap = function (dateProfile) {
    this.renderDates(dateProfile);
    this.addScroll({
      duration: createDuration(this.opt('scrollTime'))
    });
    this.startNowIndicator(dateProfile); // shouldn't render yet because updateSize will be called soon
  };

  View.prototype.unrenderDatesWrap = function () {
    this.stopNowIndicator();
    this.unrenderDates();
  };

  View.prototype.renderDates = function (dateProfile) {};

  View.prototype.unrenderDates = function () {}; // Business Hours
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderBusinessHours = function (businessHours) {};

  View.prototype.unrenderBusinessHours = function () {}; // Date Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDateSelectionWrap = function (selection) {
    if (selection) {
      this.renderDateSelection(selection);
    }
  };

  View.prototype.unrenderDateSelectionWrap = function (selection) {
    if (selection) {
      this.unrenderDateSelection(selection);
    }
  };

  View.prototype.renderDateSelection = function (selection) {};

  View.prototype.unrenderDateSelection = function (selection) {}; // Event Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEvents = function (eventStore) {};

  View.prototype.unrenderEvents = function () {}; // util for subclasses


  View.prototype.sliceEvents = function (eventStore, allDay) {
    var props = this.props;
    return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.nextDayThreshold : null).fg;
  };

  View.prototype.computeEventDraggable = function (eventDef, eventUi) {
    var transformers = this.calendar.pluginSystem.hooks.isDraggableTransformers;
    var val = eventUi.startEditable;

    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
      var transformer = transformers_1[_i];
      val = transformer(val, eventDef, eventUi, this);
    }

    return val;
  };

  View.prototype.computeEventStartResizable = function (eventDef, eventUi) {
    return eventUi.durationEditable && this.opt('eventResizableFromStart');
  };

  View.prototype.computeEventEndResizable = function (eventDef, eventUi) {
    return eventUi.durationEditable;
  }; // Event Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.renderEventSelection(instanceId);
    }
  };

  View.prototype.unrenderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.unrenderEventSelection(instanceId);
    }
  };

  View.prototype.renderEventSelection = function (instanceId) {};

  View.prototype.unrenderEventSelection = function (instanceId) {}; // Event Drag
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventDragWrap = function (state) {
    if (state) {
      this.renderEventDrag(state);
    }
  };

  View.prototype.unrenderEventDragWrap = function (state) {
    if (state) {
      this.unrenderEventDrag(state);
    }
  };

  View.prototype.renderEventDrag = function (state) {};

  View.prototype.unrenderEventDrag = function (state) {}; // Event Resize
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventResizeWrap = function (state) {
    if (state) {
      this.renderEventResize(state);
    }
  };

  View.prototype.unrenderEventResizeWrap = function (state) {
    if (state) {
      this.unrenderEventResize(state);
    }
  };

  View.prototype.renderEventResize = function (state) {};

  View.prototype.unrenderEventResize = function (state) {};
  /* Now Indicator
  ------------------------------------------------------------------------------------------------------------------*/
  // Immediately render the current time indicator and begins re-rendering it at an interval,
  // which is defined by this.getNowIndicatorUnit().
  // TODO: somehow do this for the current whole day's background too


  View.prototype.startNowIndicator = function (dateProfile) {
    var _this = this;

    var dateEnv = this.dateEnv;
    var unit;
    var update;
    var delay; // ms wait value

    if (this.opt('nowIndicator')) {
      unit = this.getNowIndicatorUnit(dateProfile);

      if (unit) {
        update = this.updateNowIndicator.bind(this);
        this.initialNowDate = this.calendar.getNow();
        this.initialNowQueriedMs = new Date().valueOf(); // wait until the beginning of the next interval

        delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf(); // TODO: maybe always use setTimeout, waiting until start of next unit

        this.nowIndicatorTimeoutID = setTimeout(function () {
          _this.nowIndicatorTimeoutID = null;
          update();

          if (unit === 'second') {
            delay = 1000; // every second
          } else {
            delay = 1000 * 60; // otherwise, every minute
          }

          _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
        }, delay);
      } // rendering will be initiated in updateSize

    }
  }; // rerenders the now indicator, computing the new current time from the amount of time that has passed
  // since the initial getNow call.


  View.prototype.updateNowIndicator = function () {
    if (this.props.dateProfile && // a way to determine if dates were rendered yet
    this.initialNowDate // activated before?
    ) {
        this.unrenderNowIndicator(); // won't unrender if unnecessary

        this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));
        this.isNowIndicatorRendered = true;
      }
  }; // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
  // Won't cause side effects if indicator isn't rendered.


  View.prototype.stopNowIndicator = function () {
    if (this.isNowIndicatorRendered) {
      if (this.nowIndicatorTimeoutID) {
        clearTimeout(this.nowIndicatorTimeoutID);
        this.nowIndicatorTimeoutID = null;
      }

      if (this.nowIndicatorIntervalID) {
        clearInterval(this.nowIndicatorIntervalID);
        this.nowIndicatorIntervalID = null;
      }

      this.unrenderNowIndicator();
      this.isNowIndicatorRendered = false;
    }
  };

  View.prototype.getNowIndicatorUnit = function (dateProfile) {// subclasses should implement
  }; // Renders a current time indicator at the given datetime


  View.prototype.renderNowIndicator = function (date) {// SUBCLASSES MUST PASS TO CHILDREN!
  }; // Undoes the rendering actions from renderNowIndicator


  View.prototype.unrenderNowIndicator = function () {// SUBCLASSES MUST PASS TO CHILDREN!
  };
  /* Scroller
  ------------------------------------------------------------------------------------------------------------------*/


  View.prototype.addScroll = function (scroll) {
    var queuedScroll = this.queuedScroll || (this.queuedScroll = {});

    __assign(queuedScroll, scroll);
  };

  View.prototype.popScroll = function (isResize) {
    this.applyQueuedScroll(isResize);
    this.queuedScroll = null;
  };

  View.prototype.applyQueuedScroll = function (isResize) {
    this.applyScroll(this.queuedScroll || {}, isResize);
  };

  View.prototype.queryScroll = function () {
    var scroll = {};

    if (this.props.dateProfile) {
      // dates rendered yet?
      __assign(scroll, this.queryDateScroll());
    }

    return scroll;
  };

  View.prototype.applyScroll = function (scroll, isResize) {
    var duration = scroll.duration;

    if (duration != null) {
      delete scroll.duration;

      if (this.props.dateProfile) {
        // dates rendered yet?
        __assign(scroll, this.computeDateScroll(duration));
      }
    }

    if (this.props.dateProfile) {
      // dates rendered yet?
      this.applyDateScroll(scroll);
    }
  };

  View.prototype.computeDateScroll = function (duration) {
    return {}; // subclasses must implement
  };

  View.prototype.queryDateScroll = function () {
    return {}; // subclasses must implement
  };

  View.prototype.applyDateScroll = function (scroll) {// subclasses must implement
  }; // for API


  View.prototype.scrollToDuration = function (duration) {
    this.applyScroll({
      duration: duration
    }, false);
  };

  return View;
}(DateComponent);

EmitterMixin.mixInto(View);
View.prototype.usesMinMaxTime = false;
View.prototype.dateProfileGeneratorClass = DateProfileGenerator;

var FgEventRenderer =
/** @class */
function () {
  function FgEventRenderer(context) {
    this.segs = [];
    this.isSizeDirty = false;
    this.context = context;
  }

  FgEventRenderer.prototype.renderSegs = function (segs, mirrorInfo) {
    this.rangeUpdated(); // called too frequently :(
    // render an `.el` on each seg
    // returns a subset of the segs. segs that were actually rendered

    segs = this.renderSegEls(segs, mirrorInfo);
    this.segs = segs;
    this.attachSegs(segs, mirrorInfo);
    this.isSizeDirty = true;
    this.context.view.triggerRenderedSegs(this.segs, Boolean(mirrorInfo));
  };

  FgEventRenderer.prototype.unrender = function (_segs, mirrorInfo) {
    this.context.view.triggerWillRemoveSegs(this.segs, Boolean(mirrorInfo));
    this.detachSegs(this.segs);
    this.segs = [];
  }; // Updates values that rely on options and also relate to range


  FgEventRenderer.prototype.rangeUpdated = function () {
    var options = this.context.options;
    var displayEventTime;
    var displayEventEnd;
    this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);
    displayEventTime = options.displayEventTime;

    if (displayEventTime == null) {
      displayEventTime = this.computeDisplayEventTime(); // might be based off of range
    }

    displayEventEnd = options.displayEventEnd;

    if (displayEventEnd == null) {
      displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
    }

    this.displayEventTime = displayEventTime;
    this.displayEventEnd = displayEventEnd;
  }; // Renders and assigns an `el` property for each foreground event segment.
  // Only returns segments that successfully rendered.


  FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {
    var html = '';
    var i;

    if (segs.length) {
      // don't build an empty html string
      // build a large concatenation of event segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(segs[i], mirrorInfo);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });
      segs = filterSegsViaEls(this.context.view, segs, Boolean(mirrorInfo));
    }

    return segs;
  }; // Generic utility for generating the HTML classNames for an event segment's element


  FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {
    var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(seg.eventRange.ui.classNames);

    if (isDraggable) {
      classes.push('fc-draggable');
    }

    if (isResizable) {
      classes.push('fc-resizable');
    }

    if (mirrorInfo) {
      classes.push('fc-mirror');

      if (mirrorInfo.isDragging) {
        classes.push('fc-dragging');
      }

      if (mirrorInfo.isResizing) {
        classes.push('fc-resizing');
      }
    }

    return classes;
  }; // Compute the text that should be displayed on an event's element.
  // `range` can be the Event object itself, or something range-like, with at least a `start`.
  // If event times are disabled, or the event has no time, will return a blank string.
  // If not specified, formatter will default to the eventTimeFormat setting,
  // and displayEnd will default to the displayEventEnd setting.


  FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {
    var def = eventRange.def,
        instance = eventRange.instance;
    return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);
  };

  FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {
    var dateEnv = this.context.dateEnv;

    if (formatter == null) {
      formatter = this.eventTimeFormat;
    }

    if (displayEnd == null) {
      displayEnd = this.displayEventEnd;
    }

    if (this.displayEventTime && !allDay) {
      if (displayEnd && end) {
        return dateEnv.formatRange(start, end, formatter, {
          forcedStartTzo: forcedStartTzo,
          forcedEndTzo: forcedEndTzo
        });
      } else {
        return dateEnv.format(start, formatter, {
          forcedTzo: forcedStartTzo
        });
      }
    }

    return '';
  };

  FgEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true
    };
  };

  FgEventRenderer.prototype.computeDisplayEventTime = function () {
    return true;
  };

  FgEventRenderer.prototype.computeDisplayEventEnd = function () {
    return true;
  }; // Utility for generating event skin-related CSS properties


  FgEventRenderer.prototype.getSkinCss = function (ui) {
    return {
      'background-color': ui.backgroundColor,
      'border-color': ui.borderColor,
      color: ui.textColor
    };
  };

  FgEventRenderer.prototype.sortEventSegs = function (segs) {
    var specs = this.context.view.eventOrderSpecs;
    var objs = segs.map(buildSegCompareObj);
    objs.sort(function (obj0, obj1) {
      return compareByFieldSpecs(obj0, obj1, specs);
    });
    return objs.map(function (c) {
      return c._seg;
    });
  };

  FgEventRenderer.prototype.computeSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.computeSegSizes(this.segs);
    }
  };

  FgEventRenderer.prototype.assignSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.assignSegSizes(this.segs);
      this.isSizeDirty = false;
    }
  };

  FgEventRenderer.prototype.computeSegSizes = function (segs) {};

  FgEventRenderer.prototype.assignSegSizes = function (segs) {}; // Manipulation on rendered segs


  FgEventRenderer.prototype.hideByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = 'hidden';
        }
      }
    }
  };

  FgEventRenderer.prototype.showByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = '';
        }
      }
    }
  };

  FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];
        var eventInstance = seg.eventRange.instance;

        if (eventInstance && eventInstance.instanceId === instanceId && seg.el // necessary?
        ) {
            seg.el.classList.add('fc-selected');
          }
      }
    }
  };

  FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (seg.el) {
          // necessary?
          seg.el.classList.remove('fc-selected');
        }
      }
    }
  };

  return FgEventRenderer;
}(); // returns a object with all primitive props that can be compared


function buildSegCompareObj(seg) {
  var eventDef = seg.eventRange.def;
  var range = seg.eventRange.instance.range;
  var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events

  var end = range.end ? range.end.valueOf() : 0; // "

  return __assign({}, eventDef.extendedProps, eventDef, {
    id: eventDef.publicId,
    start: start,
    end: end,
    duration: end - start,
    allDay: Number(eventDef.allDay),
    _seg: seg // for later retrieval

  });
}

var FillRenderer =
/** @class */
function () {
  function FillRenderer(context) {
    this.fillSegTag = 'div';
    this.dirtySizeFlags = {};
    this.context = context;
    this.containerElsByType = {};
    this.segsByType = {};
  }

  FillRenderer.prototype.getSegsByType = function (type) {
    return this.segsByType[type] || [];
  };

  FillRenderer.prototype.renderSegs = function (type, segs) {
    var _a;

    var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs

    var containerEls = this.attachSegs(type, renderedSegs);

    if (containerEls) {
      (_a = this.containerElsByType[type] || (this.containerElsByType[type] = [])).push.apply(_a, containerEls);
    }

    this.segsByType[type] = renderedSegs;

    if (type === 'bgEvent') {
      this.context.view.triggerRenderedSegs(renderedSegs, false); // isMirror=false
    }

    this.dirtySizeFlags[type] = true;
  }; // Unrenders a specific type of fill that is currently rendered on the grid


  FillRenderer.prototype.unrender = function (type) {
    var segs = this.segsByType[type];

    if (segs) {
      if (type === 'bgEvent') {
        this.context.view.triggerWillRemoveSegs(segs, false); // isMirror=false
      }

      this.detachSegs(type, segs);
    }
  }; // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
  // Only returns segments that successfully rendered.


  FillRenderer.prototype.renderSegEls = function (type, segs) {
    var _this = this;

    var html = '';
    var i;

    if (segs.length) {
      // build a large concatenation of segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(type, segs[i]);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });

      if (type === 'bgEvent') {
        segs = filterSegsViaEls(this.context.view, segs, false // isMirror. background events can never be mirror elements
        );
      } // correct element type? (would be bad if a non-TD were inserted into a table for example)


      segs = segs.filter(function (seg) {
        return elementMatches(seg.el, _this.fillSegTag);
      });
    }

    return segs;
  }; // Builds the HTML needed for one fill segment. Generic enough to work with different types.


  FillRenderer.prototype.renderSegHtml = function (type, seg) {
    var css = null;
    var classNames = [];

    if (type !== 'highlight' && type !== 'businessHours') {
      css = {
        'background-color': seg.eventRange.ui.backgroundColor
      };
    }

    if (type !== 'highlight') {
      classNames = classNames.concat(seg.eventRange.ui.classNames);
    }

    if (type === 'businessHours') {
      classNames.push('fc-bgevent');
    } else {
      classNames.push('fc-' + type.toLowerCase());
    }

    return '<' + this.fillSegTag + (classNames.length ? ' class="' + classNames.join(' ') + '"' : '') + (css ? ' style="' + cssToStr(css) + '"' : '') + '></' + this.fillSegTag + '>';
  };

  FillRenderer.prototype.detachSegs = function (type, segs) {
    var containerEls = this.containerElsByType[type];

    if (containerEls) {
      containerEls.forEach(removeElement);
      delete this.containerElsByType[type];
    }
  };

  FillRenderer.prototype.computeSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.computeSegSizes(this.segsByType[type]);
      }
    }
  };

  FillRenderer.prototype.assignSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.assignSegSizes(this.segsByType[type]);
      }
    }

    this.dirtySizeFlags = {};
  };

  FillRenderer.prototype.computeSegSizes = function (segs) {};

  FillRenderer.prototype.assignSegSizes = function (segs) {};

  return FillRenderer;
}();

var NamedTimeZoneImpl =
/** @class */
function () {
  function NamedTimeZoneImpl(timeZoneName) {
    this.timeZoneName = timeZoneName;
  }

  return NamedTimeZoneImpl;
}();
/*
An abstraction for a dragging interaction originating on an event.
Does higher-level things than PointerDragger, such as possibly:
- a "mirror" that moves with the pointer
- a minimum number of pixels or other criteria for a true drag to begin

subclasses must emit:
- pointerdown
- dragstart
- dragmove
- pointerup
- dragend
*/


var ElementDragging =
/** @class */
function () {
  function ElementDragging(el) {
    this.emitter = new EmitterMixin();
  }

  ElementDragging.prototype.destroy = function () {};

  ElementDragging.prototype.setMirrorIsVisible = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setAutoScrollEnabled = function (bool) {// optional
  };

  return ElementDragging;
}();

function formatDate(dateInput, settings) {
  if (settings === void 0) {
    settings = {};
  }

  var dateEnv = buildDateEnv$1(settings);
  var formatter = createFormatter(settings);
  var dateMeta = dateEnv.createMarkerMeta(dateInput);

  if (!dateMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.format(dateMeta.marker, formatter, {
    forcedTzo: dateMeta.forcedTzo
  });
}

function formatRange(startInput, endInput, settings // mixture of env and formatter settings
) {
  var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object

  var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);
  var startMeta = dateEnv.createMarkerMeta(startInput);
  var endMeta = dateEnv.createMarkerMeta(endInput);

  if (!startMeta || !endMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
    forcedStartTzo: startMeta.forcedTzo,
    forcedEndTzo: endMeta.forcedTzo,
    isEndExclusive: settings.isEndExclusive
  });
} // TODO: more DRY and optimized


function buildDateEnv$1(settings) {
  var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
  // ensure required settings

  settings = __assign({
    timeZone: globalDefaults.timeZone,
    calendarSystem: 'gregory'
  }, settings, {
    locale: locale
  });
  return new DateEnv(settings);
}

var DRAG_META_PROPS = {
  startTime: createDuration,
  duration: createDuration,
  create: Boolean,
  sourceId: String
};
var DRAG_META_DEFAULTS = {
  create: true
};

function parseDragMeta(raw) {
  var leftoverProps = {};
  var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);
  refined.leftoverProps = leftoverProps;
  return refined;
} // Computes a default column header formatting string if `colFormat` is not explicitly defined


function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
  // if more than one week row, or if there are a lot of columns with not much space,
  // put just the day numbers will be in each cell
  if (!datesRepDistinctDays || dayCnt > 10) {
    return {
      weekday: 'short'
    }; // "Sat"
  } else if (dayCnt > 1) {
    return {
      weekday: 'short',
      month: 'numeric',
      day: 'numeric',
      omitCommas: true
    }; // "Sat 11/12"
  } else {
    return {
      weekday: 'long'
    }; // "Saturday"
  }
}

function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {
  var view = context.view,
      dateEnv = context.dateEnv,
      theme = context.theme,
      options = context.options;
  var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.

  var classNames = ['fc-day-header', theme.getClass('widgetHeader')];
  var innerHtml;

  if (typeof options.columnHeaderHtml === 'function') {
    innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));
  } else if (typeof options.columnHeaderText === 'function') {
    innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));
  } else {
    innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));
  } // if only one row of days, the classNames on the header can represent the specific days beneath


  if (datesRepDistinctDays) {
    classNames = classNames.concat( // includes the day-of-week class
    // noThemeHighlight=true (don't highlight the header)
    getDayClasses(dateMarker, dateProfile, context, true));
  } else {
    classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class
  }

  return '' + '<th class="' + classNames.join(' ') + '"' + (isDateValid && datesRepDistinctDays ? ' data-date="' + dateEnv.formatIso(dateMarker, {
    omitTime: true
  }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
  buildGotoAnchorHtml(view, {
    date: dateMarker,
    forceOff: !datesRepDistinctDays || colCnt === 1
  }, innerHtml) : // if not valid, display text, but no link
  innerHtml) + '</th>';
}

var DayHeader =
/** @class */
function (_super) {
  __extends(DayHeader, _super);

  function DayHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.innerHTML = ''; // because might be nbsp

    parentEl.appendChild(_this.el = htmlToElement('<div class="fc-row ' + _this.theme.getClass('headerRow') + '">' + '<table class="' + _this.theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    _this.thead = _this.el.querySelector('thead');
    return _this;
  }

  DayHeader.prototype.destroy = function () {
    removeElement(this.el);
  };

  DayHeader.prototype.render = function (props) {
    var dates = props.dates,
        datesRepDistinctDays = props.datesRepDistinctDays;
    var parts = [];

    if (props.renderIntroHtml) {
      parts.push(props.renderIntroHtml());
    }

    var colHeadFormat = createFormatter(this.opt('columnHeaderFormat') || computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, this.context));
    }

    if (this.isRtl) {
      parts.reverse();
    }

    this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';
  };

  return DayHeader;
}(Component);

var DaySeries =
/** @class */
function () {
  function DaySeries(range, dateProfileGenerator) {
    var date = range.start;
    var end = range.end;
    var indices = [];
    var dates = [];
    var dayIndex = -1;

    while (date < end) {
      // loop each day from start to end
      if (dateProfileGenerator.isHiddenDay(date)) {
        indices.push(dayIndex + 0.5); // mark that it's between indices
      } else {
        dayIndex++;
        indices.push(dayIndex);
        dates.push(date);
      }

      date = addDays(date, 1);
    }

    this.dates = dates;
    this.indices = indices;
    this.cnt = dates.length;
  }

  DaySeries.prototype.sliceRange = function (range) {
    var firstIndex = this.getDateDayIndex(range.start); // inclusive first index

    var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index

    var clippedFirstIndex = Math.max(0, firstIndex);
    var clippedLastIndex = Math.min(this.cnt - 1, lastIndex); // deal with in-between indices

    clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell

    clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell

    if (clippedFirstIndex <= clippedLastIndex) {
      return {
        firstIndex: clippedFirstIndex,
        lastIndex: clippedLastIndex,
        isStart: firstIndex === clippedFirstIndex,
        isEnd: lastIndex === clippedLastIndex
      };
    } else {
      return null;
    }
  }; // Given a date, returns its chronolocial cell-index from the first cell of the grid.
  // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
  // If before the first offset, returns a negative number.
  // If after the last offset, returns an offset past the last cell offset.
  // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.


  DaySeries.prototype.getDateDayIndex = function (date) {
    var indices = this.indices;
    var dayOffset = Math.floor(diffDays(this.dates[0], date));

    if (dayOffset < 0) {
      return indices[0] - 1;
    } else if (dayOffset >= indices.length) {
      return indices[indices.length - 1] + 1;
    } else {
      return indices[dayOffset];
    }
  };

  return DaySeries;
}();

var DayTable =
/** @class */
function () {
  function DayTable(daySeries, breakOnWeeks) {
    var dates = daySeries.dates;
    var daysPerRow;
    var firstDay;
    var rowCnt;

    if (breakOnWeeks) {
      // count columns until the day-of-week repeats
      firstDay = dates[0].getUTCDay();

      for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {
        if (dates[daysPerRow].getUTCDay() === firstDay) {
          break;
        }
      }

      rowCnt = Math.ceil(dates.length / daysPerRow);
    } else {
      rowCnt = 1;
      daysPerRow = dates.length;
    }

    this.rowCnt = rowCnt;
    this.colCnt = daysPerRow;
    this.daySeries = daySeries;
    this.cells = this.buildCells();
    this.headerDates = this.buildHeaderDates();
  }

  DayTable.prototype.buildCells = function () {
    var rows = [];

    for (var row = 0; row < this.rowCnt; row++) {
      var cells = [];

      for (var col = 0; col < this.colCnt; col++) {
        cells.push(this.buildCell(row, col));
      }

      rows.push(cells);
    }

    return rows;
  };

  DayTable.prototype.buildCell = function (row, col) {
    return {
      date: this.daySeries.dates[row * this.colCnt + col]
    };
  };

  DayTable.prototype.buildHeaderDates = function () {
    var dates = [];

    for (var col = 0; col < this.colCnt; col++) {
      dates.push(this.cells[0][col].date);
    }

    return dates;
  };

  DayTable.prototype.sliceRange = function (range) {
    var colCnt = this.colCnt;
    var seriesSeg = this.daySeries.sliceRange(range);
    var segs = [];

    if (seriesSeg) {
      var firstIndex = seriesSeg.firstIndex,
          lastIndex = seriesSeg.lastIndex;
      var index = firstIndex;

      while (index <= lastIndex) {
        var row = Math.floor(index / colCnt);
        var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
        segs.push({
          row: row,
          firstCol: index % colCnt,
          lastCol: (nextIndex - 1) % colCnt,
          isStart: seriesSeg.isStart && index === firstIndex,
          isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
        });
        index = nextIndex;
      }
    }

    return segs;
  };

  return DayTable;
}();

var Slicer =
/** @class */
function () {
  function Slicer() {
    this.sliceBusinessHours = memoize(this._sliceBusinessHours);
    this.sliceDateSelection = memoize(this._sliceDateSpan);
    this.sliceEventStore = memoize(this._sliceEventStore);
    this.sliceEventDrag = memoize(this._sliceInteraction);
    this.sliceEventResize = memoize(this._sliceInteraction);
  }

  Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 4; _i < arguments.length; _i++) {
      extraArgs[_i - 4] = arguments[_i];
    }

    var eventUiBases = props.eventUiBases;
    var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));
    return {
      dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),
      businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      fgEventSegs: eventSegs.fg,
      bgEventSegs: eventSegs.bg,
      eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventSelection: props.eventSelection
    }; // TODO: give interactionSegs?
  };

  Slicer.prototype.sliceNowDate = function ( // does not memoize
  date, component) {
    var extraArgs = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      extraArgs[_i - 2] = arguments[_i];
    }

    return this._sliceDateSpan.apply(this, [{
      range: {
        start: date,
        end: addMs(date, 1)
      },
      allDay: false
    }, {}, component].concat(extraArgs));
  };

  Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 4; _i < arguments.length; _i++) {
      extraArgs[_i - 4] = arguments[_i];
    }

    if (!businessHours) {
      return [];
    }

    return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), component.calendar), {}, dateProfile, nextDayThreshold, component].concat(extraArgs)).bg;
  };

  Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (eventStore) {
      var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
      return {
        bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),
        fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)
      };
    } else {
      return {
        bg: [],
        fg: []
      };
    }
  };

  Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (!interaction) {
      return null;
    }

    var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
    return {
      segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),
      affectedInstances: interaction.affectedEvents.instances,
      isEvent: interaction.isEvent,
      sourceSeg: interaction.origSeg
    };
  };

  Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {
    var extraArgs = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      extraArgs[_i - 3] = arguments[_i];
    }

    if (!dateSpan) {
      return [];
    }

    var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.calendar);
    var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));

    for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {
      var seg = segs_1[_a];
      seg.component = component;
      seg.eventRange = eventRange;
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill
  extraArgs) {
    var segs = [];

    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
      var eventRange = eventRanges_1[_i];
      segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill
  extraArgs) {
    var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      seg.component = component;
      seg.eventRange = eventRange;
      seg.isStart = eventRange.isStart && seg.isStart;
      seg.isEnd = eventRange.isEnd && seg.isEnd;
    }

    return segs;
  };

  return Slicer;
}();
/*
for incorporating minTime/maxTime if appropriate
TODO: should be part of DateProfile!
TimelineDateProfile already does this btw
*/


function computeActiveRange(dateProfile, isComponentAllDay) {
  var range = dateProfile.activeRange;

  if (isComponentAllDay) {
    return range;
  }

  return {
    start: addMs(range.start, dateProfile.minTime.milliseconds),
    end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day

  };
} // exports
// --------------------------------------------------------------------------------------------------


var version = '4.3.1';


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-common/main.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-common/main.esm.js ***!
  \****************************************************************/
/*! exports provided: default, AbstractResourceDayTable, DayResourceTable, ResourceApi, ResourceDayHeader, ResourceDayTable, ResourceSplitter, VResourceJoiner, VResourceSplitter, buildResourceFields, buildResourceTextFunc, buildRowNodes, flattenResources, isGroupsEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractResourceDayTable", function() { return AbstractResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayResourceTable", function() { return DayResourceTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceApi", function() { return ResourceApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayHeader", function() { return ResourceDayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayTable", function() { return ResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceSplitter", function() { return ResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceJoiner", function() { return VResourceJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceSplitter", function() { return VResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceFields", function() { return buildResourceFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceTextFunc", function() { return buildResourceTextFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildRowNodes", function() { return buildRowNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenResources", function() { return flattenResources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isGroupsEqual", function() { return isGroupsEqual; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Resources Common Plugin v4.3.1
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function massageEventDragMutation(eventMutation, hit0, hit1) {
  var resource0 = hit0.dateSpan.resourceId;
  var resource1 = hit1.dateSpan.resourceId;

  if (resource0 && resource1 && resource0 !== resource1) {
    eventMutation.resourceMutation = {
      matchResourceId: resource0,
      setResourceId: resource1
    };
  }
}
/*
TODO: all this would be much easier if we were using a hash!
*/


function applyEventDefMutation(eventDef, mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation && computeResourceEditable(eventDef, calendar)) {
    var index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId);

    if (index !== -1) {
      var resourceIds = eventDef.resourceIds.slice(); // copy

      resourceIds.splice(index, 1); // remove

      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) {
        // not already in there
        resourceIds.push(resourceMutation.setResourceId); // add
      }

      eventDef.resourceIds = resourceIds;
    }
  }
}
/*
HACK
TODO: use EventUi system instead of this
*/


function computeResourceEditable(eventDef, calendar) {
  var resourceEditable = eventDef.resourceEditable;

  if (resourceEditable == null) {
    var source = eventDef.sourceId && calendar.state.eventSources[eventDef.sourceId];

    if (source) {
      resourceEditable = source.extendedProps.resourceEditable; // used the Source::extendedProps hack
    }

    if (resourceEditable == null) {
      resourceEditable = calendar.opt('eventResourceEditable');

      if (resourceEditable == null) {
        resourceEditable = calendar.opt('editable'); // TODO: use defaults system instead
      }
    }
  }

  return resourceEditable;
}

function transformEventDrop(mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation) {
    return {
      oldResource: calendar.getResourceById(resourceMutation.matchResourceId),
      newResource: calendar.getResourceById(resourceMutation.setResourceId)
    };
  } else {
    return {
      oldResource: null,
      newResource: null
    };
  }
}

var ResourceDataAdder =
/** @class */
function () {
  function ResourceDataAdder() {
    this.filterResources = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(filterResources);
  }

  ResourceDataAdder.prototype.transform = function (viewProps, viewSpec, calendarProps, view) {
    if (viewSpec.class.needsResourceData) {
      return {
        resourceStore: this.filterResources(calendarProps.resourceStore, view.opt('filterResourcesWithEvents'), calendarProps.eventStore, calendarProps.dateProfile.activeRange),
        resourceEntityExpansions: calendarProps.resourceEntityExpansions
      };
    }
  };

  return ResourceDataAdder;
}();

function filterResources(resourceStore, doFilterResourcesWithEvents, eventStore, activeRange) {
  if (doFilterResourcesWithEvents) {
    var instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange);
    var hasEvents_1 = computeHasEvents(instancesInRange, eventStore.defs);

    __assign(hasEvents_1, computeAncestorHasEvents(hasEvents_1, resourceStore));

    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(resourceStore, function (resource, resourceId) {
      return hasEvents_1[resourceId];
    });
  } else {
    return resourceStore;
  }
}

function filterEventInstancesInRange(eventInstances, activeRange) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(eventInstances, function (eventInstance) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesIntersect"])(eventInstance.range, activeRange);
  });
}

function computeHasEvents(eventInstances, eventDefs) {
  var hasEvents = {};

  for (var instanceId in eventInstances) {
    var instance = eventInstances[instanceId];

    for (var _i = 0, _a = eventDefs[instance.defId].resourceIds; _i < _a.length; _i++) {
      var resourceId = _a[_i];
      hasEvents[resourceId] = true;
    }
  }

  return hasEvents;
}
/*
mark resources as having events if any of their ancestors have them
NOTE: resourceStore might not have all the resources that hasEvents{} has keyed
*/


function computeAncestorHasEvents(hasEvents, resourceStore) {
  var res = {};

  for (var resourceId in hasEvents) {
    var resource = void 0;

    while (resource = resourceStore[resourceId]) {
      resourceId = resource.parentId; // now functioning as the parentId

      if (resourceId) {
        res[resourceId] = true;
      } else {
        break;
      }
    }
  }

  return res;
} // for when non-resource view should be given EventUi info (for event coloring/constraints based off of resource data)


var ResourceEventConfigAdder =
/** @class */
function () {
  function ResourceEventConfigAdder() {
    this.buildResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeOutput"])(buildResourceEventUis, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsEqual"]);
    this.injectResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(injectResourceEventUis);
  }

  ResourceEventConfigAdder.prototype.transform = function (viewProps, viewSpec, calendarProps) {
    if (!viewSpec.class.needsResourceData) {
      // is a non-resource view?
      return {
        eventUiBases: this.injectResourceEventUis(viewProps.eventUiBases, viewProps.eventStore.defs, this.buildResourceEventUis(calendarProps.resourceStore))
      };
    }
  };

  return ResourceEventConfigAdder;
}();

function buildResourceEventUis(resourceStore) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceStore, function (resource) {
    return resource.ui;
  });
}

function injectResourceEventUis(eventUiBases, eventDefs, resourceEventUis) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(eventUiBases, function (eventUi, defId) {
    if (defId) {
      // not the '' key
      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis);
    } else {
      return eventUi;
    }
  });
}

function injectResourceEventUi(origEventUi, eventDef, resourceEventUis) {
  var parts = []; // first resource takes precedence, which fights with the ordering of combineEventUis, thus the unshifts

  for (var _i = 0, _a = eventDef.resourceIds; _i < _a.length; _i++) {
    var resourceId = _a[_i];

    if (resourceEventUis[resourceId]) {
      parts.unshift(resourceEventUis[resourceId]);
    }
  }

  parts.unshift(origEventUi);
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["combineEventUis"])(parts);
} // for making sure events that have editable resources are always draggable in resource views


function transformIsDraggable(val, eventDef, eventUi, view) {
  if (!val) {
    if (view.viewSpec.class.needsResourceData) {
      if (computeResourceEditable(eventDef, view.calendar)) {
        return true;
      }
    }
  }

  return val;
}

var RESOURCE_SOURCE_PROPS = {
  id: String
};
var defs = [];
var uid = 0;

function registerResourceSourceDef(def) {
  defs.push(def);
}

function getResourceSourceDef(id) {
  return defs[id];
}

function doesSourceIgnoreRange(source) {
  return Boolean(defs[source.sourceDefId].ignoreRange);
}

function parseResourceSource(input) {
  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(input);

    if (meta) {
      var res = parseResourceSourceProps(typeof input === 'object' && input ? input : {}, meta, i);
      res._raw = input;
      return res;
    }
  }

  return null;
}

function parseResourceSourceProps(input, meta, sourceDefId) {
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_SOURCE_PROPS);
  props.sourceId = String(uid++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.publicId = props.id;
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  delete props.id;
  return props;
}

function reduceResourceSource(source, action, dateProfile, calendar) {
  switch (action.type) {
    case 'INIT':
      return createSource(calendar.opt('resources'), calendar);

    case 'RESET_RESOURCE_SOURCE':
      return createSource(action.resourceSourceInput, calendar, true);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      return handleRange(source, dateProfile.activeRange, calendar);

    case 'RECEIVE_RESOURCES':
    case 'RECEIVE_RESOURCE_ERROR':
      return receiveResponse(source, action.fetchId, action.fetchRange);

    case 'REFETCH_RESOURCES':
      return fetchSource(source, dateProfile.activeRange, calendar);

    default:
      return source;
  }
}

var uid$1 = 0;

function createSource(input, calendar, forceFetch) {
  if (input) {
    var source = parseResourceSource(input);

    if (forceFetch || !calendar.opt('refetchResourcesOnNavigate')) {
      // because assumes handleRange will do it later
      source = fetchSource(source, null, calendar);
    }

    return source;
  }

  return null;
}

function handleRange(source, activeRange, calendar) {
  if (calendar.opt('refetchResourcesOnNavigate') && !doesSourceIgnoreRange(source) && (!source.fetchRange || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesEqual"])(source.fetchRange, activeRange))) {
    return fetchSource(source, activeRange, calendar);
  } else {
    return source;
  }
}

function fetchSource(source, fetchRange, calendar) {
  var sourceDef = getResourceSourceDef(source.sourceDefId);
  var fetchId = String(uid$1++);
  sourceDef.fetch({
    resourceSource: source,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    // HACK
    // do before calling dispatch in case dispatch renders synchronously
    calendar.afterSizingTriggers._resourcesRendered = [null]; // fire once

    calendar.dispatch({
      type: 'RECEIVE_RESOURCES',
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawResources: res.rawResources
    });
  }, function (error) {
    calendar.dispatch({
      type: 'RECEIVE_RESOURCE_ERROR',
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, source, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(source, fetchId, fetchRange) {
  if (fetchId === source.latestFetchId) {
    return __assign({}, source, {
      isFetching: false,
      fetchRange: fetchRange
    });
  }

  return source;
}

var RESOURCE_PROPS = {
  id: String,
  title: String,
  parentId: String,
  businessHours: null,
  children: null,
  extendedProps: null
};
var PRIVATE_ID_PREFIX = '_fc:';
var uid$2 = 0;
/*
needs a full store so that it can populate children too
*/

function parseResource(input, parentId, store, calendar) {
  if (parentId === void 0) {
    parentId = '';
  }

  var leftovers0 = {};
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["processScopedUiProps"])('event', leftovers0, calendar, leftovers1);

  if (!props.id) {
    props.id = PRIVATE_ID_PREFIX + uid$2++;
  }

  if (!props.parentId) {
    // give precedence to the parentId property
    props.parentId = parentId;
  }

  props.businessHours = props.businessHours ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseBusinessHours"])(props.businessHours, calendar) : null;
  props.ui = ui;
  props.extendedProps = __assign({}, leftovers1, props.extendedProps); // help out ResourceApi from having user modify props

  Object.freeze(ui.classNames);
  Object.freeze(props.extendedProps);
  if (store[props.id]) ;else {
    store[props.id] = props;

    if (props.children) {
      for (var _i = 0, _a = props.children; _i < _a.length; _i++) {
        var childInput = _a[_i];
        parseResource(childInput, props.id, store, calendar);
      }

      delete props.children;
    }
  }
  return props;
}
/*
TODO: use this in more places
*/


function getPublicId(id) {
  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {
    return '';
  }

  return id;
}

function reduceResourceStore(store, action, source, calendar) {
  switch (action.type) {
    case 'INIT':
      return {};

    case 'RECEIVE_RESOURCES':
      return receiveRawResources(store, action.rawResources, action.fetchId, source, calendar);

    case 'ADD_RESOURCE':
      return addResource(store, action.resourceHash);

    case 'REMOVE_RESOURCE':
      return removeResource(store, action.resourceId);

    case 'SET_RESOURCE_PROP':
      return setResourceProp(store, action.resourceId, action.propName, action.propValue);

    case 'RESET_RESOURCES':
      // must make the calendar think each resource is a new object :/
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(store, function (resource) {
        return __assign({}, resource);
      });

    default:
      return store;
  }
}

function receiveRawResources(existingStore, inputs, fetchId, source, calendar) {
  if (source.latestFetchId === fetchId) {
    var nextStore = {};

    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
      var input = inputs_1[_i];
      parseResource(input, '', nextStore, calendar);
    }

    return nextStore;
  } else {
    return existingStore;
  }
}

function addResource(existingStore, additions) {
  // TODO: warn about duplicate IDs
  return __assign({}, existingStore, additions);
}

function removeResource(existingStore, resourceId) {
  var newStore = __assign({}, existingStore);

  delete newStore[resourceId]; // promote children

  for (var childResourceId in newStore) {
    // a child, *maybe* but probably not
    if (newStore[childResourceId].parentId === resourceId) {
      newStore[childResourceId] = __assign({}, newStore[childResourceId], {
        parentId: ''
      });
    }
  }

  return newStore;
}

function setResourceProp(existingStore, resourceId, name, value) {
  var _a, _b;

  var existingResource = existingStore[resourceId]; // TODO: sanitization

  if (existingResource) {
    return __assign({}, existingStore, (_a = {}, _a[resourceId] = __assign({}, existingResource, (_b = {}, _b[name] = value, _b)), _a));
  } else {
    return existingStore;
  }
}

function reduceResourceEntityExpansions(expansions, action) {
  var _a;

  switch (action.type) {
    case 'INIT':
      return {};

    case 'SET_RESOURCE_ENTITY_EXPANDED':
      return __assign({}, expansions, (_a = {}, _a[action.id] = action.isExpanded, _a));

    default:
      return expansions;
  }
}

function resourcesReducers(state, action, calendar) {
  var resourceSource = reduceResourceSource(state.resourceSource, action, state.dateProfile, calendar);
  var resourceStore = reduceResourceStore(state.resourceStore, action, resourceSource, calendar);
  var resourceEntityExpansions = reduceResourceEntityExpansions(state.resourceEntityExpansions, action);
  return __assign({}, state, {
    resourceSource: resourceSource,
    resourceStore: resourceStore,
    resourceEntityExpansions: resourceEntityExpansions
  });
}

var RESOURCE_RELATED_PROPS = {
  resourceId: String,
  resourceIds: function (items) {
    return (items || []).map(function (item) {
      return String(item);
    });
  },
  resourceEditable: Boolean
};

function parseEventDef(def, props, leftovers) {
  var resourceRelatedProps = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(props, RESOURCE_RELATED_PROPS, {}, leftovers);
  var resourceIds = resourceRelatedProps.resourceIds;

  if (resourceRelatedProps.resourceId) {
    resourceIds.push(resourceRelatedProps.resourceId);
  }

  def.resourceIds = resourceIds;
  def.resourceEditable = resourceRelatedProps.resourceEditable;
}

function transformDateSelectionJoin(hit0, hit1) {
  var resourceId0 = hit0.dateSpan.resourceId;
  var resourceId1 = hit1.dateSpan.resourceId;

  if (resourceId0 && resourceId1) {
    if (hit0.component.allowAcrossResources === false && resourceId0 !== resourceId1) {
      return false;
    } else {
      return {
        resourceId: resourceId0
      };
    }
  }
}

var ResourceApi =
/** @class */
function () {
  function ResourceApi(calendar, rawResource) {
    this._calendar = calendar;
    this._resource = rawResource;
  }

  ResourceApi.prototype.setProp = function (name, value) {
    this._calendar.dispatch({
      type: 'SET_RESOURCE_PROP',
      resourceId: this._resource.id,
      propName: name,
      propValue: value
    });
  };

  ResourceApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_RESOURCE',
      resourceId: this._resource.id
    });
  };

  ResourceApi.prototype.getParent = function () {
    var calendar = this._calendar;
    var parentId = this._resource.parentId;

    if (parentId) {
      return new ResourceApi(calendar, calendar.state.resourceSource[parentId]);
    } else {
      return null;
    }
  };

  ResourceApi.prototype.getChildren = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var resourceStore = calendar.state.resourceStore;
    var childApis = [];

    for (var resourceId in resourceStore) {
      if (resourceStore[resourceId].parentId === thisResourceId) {
        childApis.push(new ResourceApi(calendar, resourceStore[resourceId]));
      }
    }

    return childApis;
  };
  /*
  this is really inefficient!
  TODO: make EventApi::resourceIds a hash or keep an index in the Calendar's state
  */


  ResourceApi.prototype.getEvents = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var _a = calendar.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var instanceId in instances) {
      var instance = instances[instanceId];
      var def = defs[instance.defId];

      if (def.resourceIds.indexOf(thisResourceId) !== -1) {
        // inefficient!!!
        eventApis.push(new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, def, instance));
      }
    }

    return eventApis;
  };

  Object.defineProperty(ResourceApi.prototype, "id", {
    get: function () {
      return this._resource.id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "title", {
    get: function () {
      return this._resource.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventConstraint", {
    get: function () {
      return this._resource.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventOverlap", {
    get: function () {
      return this._resource.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventAllow", {
    get: function () {
      return this._resource.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBackgroundColor", {
    get: function () {
      return this._resource.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBorderColor", {
    get: function () {
      return this._resource.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventTextColor", {
    get: function () {
      return this._resource.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventClassNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._resource.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "extendedProps", {
    get: function () {
      return this._resource.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return ResourceApi;
}();

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.addResource = function (input, scrollTo) {
  var _a;

  if (scrollTo === void 0) {
    scrollTo = true;
  }

  var resourceHash;
  var resource;

  if (input instanceof ResourceApi) {
    resource = input._resource;
    resourceHash = (_a = {}, _a[resource.id] = resource, _a);
  } else {
    resourceHash = {};
    resource = parseResource(input, '', resourceHash, this);
  } // HACK


  if (scrollTo) {
    this.component.view.addScroll({
      forcedRowId: resource.id
    });
  }

  this.dispatch({
    type: 'ADD_RESOURCE',
    resourceHash: resourceHash
  });
  return new ResourceApi(this, resource);
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResourceById = function (id) {
  id = String(id);

  if (this.state.resourceStore) {
    // guard against calendar with no resource functionality
    var rawResource = this.state.resourceStore[id];

    if (rawResource) {
      return new ResourceApi(this, rawResource);
    }
  }

  return null;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getTopLevelResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      if (!resourceStore[resourceId].parentId) {
        resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
      }
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.rerenderResources = function () {
  this.dispatch({
    type: 'RESET_RESOURCES'
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.refetchResources = function () {
  this.dispatch({
    type: 'REFETCH_RESOURCES'
  });
};

function transformDatePoint(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}

function transformDateSpan(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}
/*
splits things BASED OFF OF which resources they are associated with.
creates a '' entry which is when something has NO resource.
*/


var ResourceSplitter =
/** @class */
function (_super) {
  __extends(ResourceSplitter, _super);

  function ResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceSplitter.prototype.getKeyInfo = function (props) {
    return __assign({
      '': {}
    }, props.resourceStore // already has `ui` and `businessHours` keys!
    );
  };

  ResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  ResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return ResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]);

function isPropsValidWithResources(props, calendar) {
  var splitter = new ResourceSplitter();
  var sets = splitter.splitProps(__assign({}, props, {
    resourceStore: calendar.state.resourceStore
  }));

  for (var resourceId in sets) {
    var props_1 = sets[resourceId]; // merge in event data from the non-resource segment

    if (resourceId && sets['']) {
      // current segment is not the non-resource one, and there IS a non-resource one
      props_1 = __assign({}, props_1, {
        eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mergeEventStores"])(sets[''].eventStore, props_1.eventStore),
        eventUiBases: __assign({}, sets[''].eventUiBases, props_1.eventUiBases)
      });
    }

    if (!Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsValid"])(props_1, calendar, {
      resourceId: resourceId
    }, filterConfig.bind(null, resourceId))) {
      return false;
    }
  }

  return true;
}

function filterConfig(resourceId, config) {
  return __assign({}, config, {
    constraints: filterConstraints(resourceId, config.constraints)
  });
}

function filterConstraints(resourceId, constraints) {
  return constraints.map(function (constraint) {
    var defs = constraint.defs;

    if (defs) {
      // we are dealing with an EventStore
      // if any of the events define constraints to resources that are NOT this resource,
      // then this resource is unconditionally prohibited, which is what a `false` value does.
      for (var defId in defs) {
        var resourceIds = defs[defId].resourceIds;

        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) {
          // TODO: use a hash?!!! (for other reasons too)
          return false;
        }
      }
    }

    return constraint;
  });
}

function transformExternalDef(dateSpan) {
  return dateSpan.resourceId ? {
    resourceId: dateSpan.resourceId
  } : {};
}

function transformEventResizeJoin(hit0, hit1) {
  var component = hit0.component;

  if (component.allowAcrossResources === false && hit0.dateSpan.resourceId !== hit1.dateSpan.resourceId) {
    return false;
  }
}

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.getResources = function () {
  var calendar = this._calendar;
  return this._def.resourceIds.map(function (resourceId) {
    return calendar.getResourceById(resourceId);
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.setResources = function (resources) {
  var resourceIds = []; // massage resources -> resourceIds

  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
    var resource = resources_1[_i];
    var resourceId = null;

    if (typeof resource === 'string') {
      resourceId = resource;
    } else if (typeof resource === 'number') {
      resourceId = String(resource);
    } else if (resource instanceof ResourceApi) {
      resourceId = resource.id; // guaranteed to always have an ID. hmmm
    } else {
      console.warn('unknown resource type: ' + resource);
    }

    if (resourceId) {
      resourceIds.push(resourceId);
    }
  }

  this.mutate({
    standardProps: {
      resourceIds: resourceIds
    }
  });
};

var RELEASE_DATE = '2019-08-10'; // for Scheduler

var UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too

var LICENSE_INFO_URL = 'http://fullcalendar.io/scheduler/license/';
var PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];
var CSS = {
  position: 'absolute',
  'z-index': 99999,
  bottom: '1px',
  left: '1px',
  background: '#eee',
  'border-color': '#ddd',
  'border-style': 'solid',
  'border-width': '1px 1px 0 0',
  padding: '2px 4px',
  'font-size': '12px',
  'border-top-right-radius': '3px'
};

function injectLicenseWarning(containerEl, calendar) {
  var key = calendar.opt('schedulerLicenseKey');

  if (!isImmuneUrl(window.location.href) && !isValidKey(key)) {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(containerEl, '<div class="fc-license-message" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(CSS)) + '">' + 'Please use a valid license key. <a href="' + LICENSE_INFO_URL + '">More Info</a>' + '</div>');
  }
}
/*
This decryption is not meant to be bulletproof. Just a way to remind about an upgrade.
*/


function isValidKey(key) {
  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {
    return true;
  }

  var parts = (key || '').match(/^(\d+)\-fcs\-(\d+)$/);

  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);
    var releaseDate = new Date(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].mockSchedulerReleaseDate || RELEASE_DATE);

    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isValidDate"])(releaseDate)) {
      // token won't be replaced in dev mode
      var minPurchaseDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(releaseDate, -UPGRADE_WINDOW);

      if (minPurchaseDate < purchaseDate) {
        return true;
      }
    }
  }

  return false;
}

function isImmuneUrl(url) {
  return /\w+\:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}

var optionChangeHandlers = {
  resources: handleResources
};

function handleResources(newSourceInput, calendar, deepEqual) {
  var oldSourceInput = calendar.state.resourceSource._raw;

  if (!deepEqual(oldSourceInput, newSourceInput)) {
    calendar.dispatch({
      type: 'RESET_RESOURCE_SOURCE',
      resourceSourceInput: newSourceInput
    });
  }
}

registerResourceSourceDef({
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      return raw;
    } else if (Array.isArray(raw.resources)) {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, successCallback) {
    successCallback({
      rawResources: arg.resourceSource.meta
    });
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      return raw;
    } else if (typeof raw.resources === 'function') {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.resourceSource.meta;
    var publicArg = {};

    if (arg.range) {
      publicArg = {
        start: dateEnv.toDate(arg.range.start),
        end: dateEnv.toDate(arg.range.end),
        startStr: dateEnv.formatIso(arg.range.start),
        endStr: dateEnv.formatIso(arg.range.end),
        timeZone: dateEnv.timeZone
      };
    } // TODO: make more dry with EventSourceFunc
    // TODO: accept a response?


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["unpromisify"])(func.bind(null, publicArg), function (rawResources) {
      success({
        rawResources: rawResources
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams
    };
  },
  fetch: function (arg, successCallback, failureCallback) {
    var meta = arg.resourceSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["requestJson"])(meta.method, meta.url, requestParams, function (rawResources, xhr) {
      successCallback({
        rawResources: rawResources,
        xhr: xhr
      });
    }, function (message, xhr) {
      failureCallback({
        message: message,
        xhr: xhr
      });
    });
  }
}); // TODO: somehow consolidate with event json feed

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};

  if (range) {
    // startParam = meta.startParam
    // if (startParam == null) {
    startParam = calendar.opt('startParam'); // }
    // endParam = meta.endParam
    // if (endParam == null) {

    endParam = calendar.opt('endParam'); // }
    // timeZoneParam = meta.timeZoneParam
    // if (timeZoneParam == null) {

    timeZoneParam = calendar.opt('timeZoneParam'); // }

    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);

    if (dateEnv.timeZone !== 'local') {
      params[timeZoneParam] = dateEnv.timeZone;
    }
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  return params;
}

function buildResourceTextFunc(resourceTextSetting, calendar) {
  if (typeof resourceTextSetting === 'function') {
    return function (resource) {
      return resourceTextSetting(new ResourceApi(calendar, resource));
    };
  } else {
    return function (resource) {
      return resource.title || getPublicId(resource.id);
    };
  }
}

var ResourceDayHeader =
/** @class */
function (_super) {
  __extends(ResourceDayHeader, _super);

  function ResourceDayHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    _this.datesAboveResources = _this.opt('datesAboveResources');
    _this.resourceTextFunc = buildResourceTextFunc(_this.opt('resourceText'), _this.calendar);
    parentEl.innerHTML = ''; // because might be nbsp

    parentEl.appendChild(_this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-row ' + _this.theme.getClass('headerRow') + '">' + '<table class="' + _this.theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    _this.thead = _this.el.querySelector('thead');
    return _this;
  }

  ResourceDayHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ResourceDayHeader.prototype.render = function (props) {
    var html;
    this.dateFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(this.opt('columnHeaderFormat') || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeFallbackHeaderFormat"])(props.datesRepDistinctDays, props.dates.length));

    if (props.dates.length === 1) {
      html = this.renderResourceRow(props.resources);
    } else {
      if (this.datesAboveResources) {
        html = this.renderDayAndResourceRows(props.dates, props.resources);
      } else {
        html = this.renderResourceAndDayRows(props.resources, props.dates);
      }
    }

    this.thead.innerHTML = html;
    this.processResourceEls(props.resources);
  };

  ResourceDayHeader.prototype.renderResourceRow = function (resources) {
    var _this = this;

    var cellHtmls = resources.map(function (resource) {
      return _this.renderResourceCell(resource, 1);
    });
    return this.buildTr(cellHtmls);
  };

  ResourceDayHeader.prototype.renderDayAndResourceRows = function (dates, resources) {
    var dateHtmls = [];
    var resourceHtmls = [];

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      dateHtmls.push(this.renderDateCell(date, resources.length));

      for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {
        var resource = resources_1[_a];
        resourceHtmls.push(this.renderResourceCell(resource, 1, date));
      }
    }

    return this.buildTr(dateHtmls) + this.buildTr(resourceHtmls);
  };

  ResourceDayHeader.prototype.renderResourceAndDayRows = function (resources, dates) {
    var resourceHtmls = [];
    var dateHtmls = [];

    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
      var resource = resources_2[_i];
      resourceHtmls.push(this.renderResourceCell(resource, dates.length));

      for (var _a = 0, dates_2 = dates; _a < dates_2.length; _a++) {
        var date = dates_2[_a];
        dateHtmls.push(this.renderDateCell(date, 1, resource));
      }
    }

    return this.buildTr(resourceHtmls) + this.buildTr(dateHtmls);
  }; // Cell Rendering Utils
  // ----------------------------------------------------------------------------------------------
  // a cell with the resource name. might be associated with a specific day


  ResourceDayHeader.prototype.renderResourceCell = function (resource, colspan, date) {
    var dateEnv = this.dateEnv;
    return '<th class="fc-resource-cell"' + ' data-resource-id="' + resource.id + '"' + (date ? ' data-date="' + dateEnv.formatIso(date, {
      omitTime: true
    }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this.resourceTextFunc(resource)) + '</th>';
  }; // a cell with date text. might have a resource associated with it


  ResourceDayHeader.prototype.renderDateCell = function (date, colspan, resource) {
    var props = this.props;
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["renderDateCell"])(date, props.dateProfile, props.datesRepDistinctDays, props.dates.length * props.resources.length, this.dateFormat, this.context, colspan, resource ? 'data-resource-id="' + resource.id + '"' : '');
  };

  ResourceDayHeader.prototype.buildTr = function (cellHtmls) {
    if (!cellHtmls.length) {
      cellHtmls = ['<td>&nbsp;</td>'];
    }

    if (this.props.renderIntroHtml) {
      cellHtmls = [this.props.renderIntroHtml()].concat(cellHtmls);
    }

    if (this.isRtl) {
      cellHtmls.reverse();
    }

    return '<tr>' + cellHtmls.join('') + '</tr>';
  }; // Post-rendering
  // ----------------------------------------------------------------------------------------------
  // given a container with already rendered resource cells


  ResourceDayHeader.prototype.processResourceEls = function (resources) {
    var _this = this;

    var view = this.view;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.thead, '.fc-resource-cell').forEach(function (node, col) {
      col = col % resources.length;

      if (_this.isRtl) {
        col = resources.length - 1 - col;
      }

      var resource = resources[col];
      view.publiclyTrigger('resourceRender', [{
        resource: new ResourceApi(_this.calendar, resource),
        el: node,
        view: view
      }]);
    });
  };

  return ResourceDayHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var AbstractResourceDayTable =
/** @class */
function () {
  function AbstractResourceDayTable(dayTable, resources) {
    this.dayTable = dayTable;
    this.resources = resources;
    this.resourceIndex = new ResourceIndex(resources);
    this.rowCnt = dayTable.rowCnt;
    this.colCnt = dayTable.colCnt * resources.length;
    this.cells = this.buildCells();
  }

  AbstractResourceDayTable.prototype.buildCells = function () {
    var _a = this,
        rowCnt = _a.rowCnt,
        dayTable = _a.dayTable,
        resources = _a.resources;

    var rows = [];

    for (var row = 0; row < rowCnt; row++) {
      var rowCells = [];

      for (var dateCol = 0; dateCol < dayTable.colCnt; dateCol++) {
        for (var resourceCol = 0; resourceCol < resources.length; resourceCol++) {
          var resource = resources[resourceCol];
          var htmlAttrs = 'data-resource-id="' + resource.id + '"';
          rowCells[this.computeCol(dateCol, resourceCol)] = {
            date: dayTable.cells[row][dateCol].date,
            resource: resource,
            htmlAttrs: htmlAttrs
          };
        }
      }

      rows.push(rowCells);
    }

    return rows;
  };

  return AbstractResourceDayTable;
}();
/*
resources over dates
*/


var ResourceDayTable =
/** @class */
function (_super) {
  __extends(ResourceDayTable, _super);

  function ResourceDayTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceDayTable.prototype.computeCol = function (dateI, resourceI) {
    return resourceI * this.dayTable.colCnt + dateI;
  };
  /*
  all date ranges are intact
  */


  ResourceDayTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    return [{
      firstCol: this.computeCol(dateStartI, resourceI),
      lastCol: this.computeCol(dateEndI, resourceI),
      isStart: true,
      isEnd: true
    }];
  };

  return ResourceDayTable;
}(AbstractResourceDayTable);
/*
dates over resources
*/


var DayResourceTable =
/** @class */
function (_super) {
  __extends(DayResourceTable, _super);

  function DayResourceTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DayResourceTable.prototype.computeCol = function (dateI, resourceI) {
    return dateI * this.resources.length + resourceI;
  };
  /*
  every single day is broken up
  */


  DayResourceTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    var segs = [];

    for (var i = dateStartI; i <= dateEndI; i++) {
      var col = this.computeCol(i, resourceI);
      segs.push({
        firstCol: col,
        lastCol: col,
        isStart: i === dateStartI,
        isEnd: i === dateEndI
      });
    }

    return segs;
  };

  return DayResourceTable;
}(AbstractResourceDayTable);

var ResourceIndex =
/** @class */
function () {
  function ResourceIndex(resources) {
    var indicesById = {};
    var ids = [];

    for (var i = 0; i < resources.length; i++) {
      var id = resources[i].id;
      ids.push(id);
      indicesById[id] = i;
    }

    this.ids = ids;
    this.indicesById = indicesById;
    this.length = resources.length;
  }

  return ResourceIndex;
}();
/*
TODO: just use ResourceHash somehow? could then use the generic ResourceSplitter
*/


var VResourceSplitter =
/** @class */
function (_super) {
  __extends(VResourceSplitter, _super);

  function VResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  VResourceSplitter.prototype.getKeyInfo = function (props) {
    var resourceDayTable = props.resourceDayTable;
    var hash = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceDayTable.resourceIndex.indicesById, function (i) {
      return resourceDayTable.resources[i]; // has `ui` AND `businessHours` keys!
    }); // :(

    hash[''] = {};
    return hash;
  };

  VResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  VResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return VResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]); // joiner


var NO_SEGS = []; // for memoizing

var VResourceJoiner =
/** @class */
function () {
  function VResourceJoiner() {
    this.joinDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinEventDrags = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
    this.joinEventResizes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
  }
  /*
  propSets also has a '' key for things with no resource
  */


  VResourceJoiner.prototype.joinProps = function (propSets, resourceDayTable) {
    var dateSelectionSets = [];
    var businessHoursSets = [];
    var fgEventSets = [];
    var bgEventSets = [];
    var eventDrags = [];
    var eventResizes = [];
    var eventSelection = '';
    var keys = resourceDayTable.resourceIndex.ids.concat(['']); // add in the all-resource key

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      var props = propSets[key];
      dateSelectionSets.push(props.dateSelectionSegs);
      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS); // don't include redundant all-resource businesshours

      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS); // don't include fg all-resource segs

      bgEventSets.push(props.bgEventSegs);
      eventDrags.push(props.eventDrag);
      eventResizes.push(props.eventResize);
      eventSelection = eventSelection || props.eventSelection;
    }

    return {
      dateSelectionSegs: this.joinDateSelection.apply(this, [resourceDayTable].concat(dateSelectionSets)),
      businessHourSegs: this.joinBusinessHours.apply(this, [resourceDayTable].concat(businessHoursSets)),
      fgEventSegs: this.joinFgEvents.apply(this, [resourceDayTable].concat(fgEventSets)),
      bgEventSegs: this.joinBgEvents.apply(this, [resourceDayTable].concat(bgEventSets)),
      eventDrag: this.joinEventDrags.apply(this, [resourceDayTable].concat(eventDrags)),
      eventResize: this.joinEventResizes.apply(this, [resourceDayTable].concat(eventResizes)),
      eventSelection: eventSelection
    };
  };

  VResourceJoiner.prototype.joinSegs = function (resourceDayTable) {
    var segGroups = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      segGroups[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _a = 0, _b = segGroups[i]; _a < _b.length; _a++) {
        var seg = _b[_a];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }

      for (var _c = 0, _d = segGroups[resourceCnt]; _c < _d.length; _c++) {
        // one beyond. the all-resource
        var seg = _d[_c];
        transformedSegs.push.apply( // one beyond. the all-resource
        transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };
  /*
  for expanding non-resource segs to all resources.
  only for public use.
  no memoizing.
  */


  VResourceJoiner.prototype.expandSegs = function (resourceDayTable, segs) {
    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };

  VResourceJoiner.prototype.joinInteractions = function (resourceDayTable) {
    var interactions = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      interactions[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var affectedInstances = {};
    var transformedSegs = [];
    var isEvent = false;
    var sourceSeg = null;

    for (var i = 0; i < resourceCnt; i++) {
      var interaction = interactions[i];

      if (interaction) {
        for (var _a = 0, _b = interaction.segs; _a < _b.length; _a++) {
          var seg = _b[_a];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }

        __assign(affectedInstances, interaction.affectedInstances);

        isEvent = isEvent || interaction.isEvent;
        sourceSeg = sourceSeg || interaction.sourceSeg;
      }

      if (interactions[resourceCnt]) {
        // one beyond. the all-resource
        for (var _c = 0, _d = interactions[resourceCnt].segs; _c < _d.length; _c++) {
          var seg = _d[_c];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }
      }
    }

    return {
      affectedInstances: affectedInstances,
      segs: transformedSegs,
      isEvent: isEvent,
      sourceSeg: sourceSeg
    };
  };

  return VResourceJoiner;
}();
/*
doesn't accept grouping
*/


function flattenResources(resourceStore, orderSpecs) {
  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true).map(function (node) {
    return node.resource;
  });
}

function buildRowNodes(resourceStore, groupSpecs, orderSpecs, isVGrouping, expansions, expansionDefault) {
  var complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs);
  var flatNodes = [];
  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault);
  return flatNodes;
}

function flattenNodes(complexNodes, res, isVGrouping, rowSpans, depth, expansions, expansionDefault) {
  for (var i = 0; i < complexNodes.length; i++) {
    var complexNode = complexNodes[i];
    var group = complexNode.group;

    if (group) {
      if (isVGrouping) {
        var firstRowIndex = res.length;
        var rowSpanIndex = rowSpans.length;
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault);

        if (firstRowIndex < res.length) {
          var firstRow = res[firstRowIndex];
          var firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice();
          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex;
        }
      } else {
        var id = group.spec.field + ':' + group.value;
        var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
        res.push({
          id: id,
          group: group,
          isExpanded: isExpanded
        });

        if (isExpanded) {
          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
        }
      }
    } else if (complexNode.resource) {
      var id = complexNode.resource.id;
      var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
      res.push({
        id: id,
        rowSpans: rowSpans,
        depth: depth,
        isExpanded: isExpanded,
        hasChildren: Boolean(complexNode.children.length),
        resource: complexNode.resource,
        resourceFields: complexNode.resourceFields
      });

      if (isExpanded) {
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
      }
    }
  }
}

function buildHierarchy(resourceStore, maxDepth, groupSpecs, orderSpecs) {
  var resourceNodes = buildResourceNodes(resourceStore, orderSpecs);
  var builtNodes = [];

  for (var resourceId in resourceNodes) {
    var resourceNode = resourceNodes[resourceId];

    if (!resourceNode.resource.parentId) {
      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs);
    }
  }

  return builtNodes;
}

function buildResourceNodes(resourceStore, orderSpecs) {
  var nodeHash = {};

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];
    nodeHash[resourceId] = {
      resource: resource,
      resourceFields: buildResourceFields(resource),
      children: []
    };
  }

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.parentId) {
      var parentNode = nodeHash[resource.parentId];

      if (parentNode) {
        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs);
      }
    }
  }

  return nodeHash;
}

function insertResourceNode(resourceNode, nodes, groupSpecs, depth, maxDepth, orderSpecs) {
  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {
    var groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0]);
    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs);
  } else {
    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs);
  }
}

function ensureGroupNodes(resourceNode, nodes, groupSpec) {
  var groupValue = resourceNode.resourceFields[groupSpec.field];
  var groupNode;
  var newGroupIndex; // find an existing group that matches, or determine the position for a new group

  if (groupSpec.order) {
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group) {
        var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["flexibleCompare"])(groupValue, node.group.value) * groupSpec.order;

        if (cmp === 0) {
          groupNode = node;
          break;
        } else if (cmp < 0) {
          break;
        }
      }
    }
  } else {
    // the groups are unordered
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group && groupValue === node.group.value) {
        groupNode = node;
        break;
      }
    }
  }

  if (!groupNode) {
    groupNode = {
      group: {
        value: groupValue,
        spec: groupSpec
      },
      children: []
    };
    nodes.splice(newGroupIndex, 0, groupNode);
  }

  return groupNode;
}

function insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs) {
  var i;

  for (i = 0; i < siblings.length; i++) {
    var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareByFieldSpecs"])(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs);

    if (cmp > 0) {
      // went 1 past. insert at i
      break;
    }
  }

  siblings.splice(i, 0, resourceNode);
}

function buildResourceFields(resource) {
  var obj = __assign({}, resource.extendedProps, resource.ui, resource);

  delete obj.ui;
  delete obj.extendedProps;
  return obj;
}

function isGroupsEqual(group0, group1) {
  return group0.spec === group1.spec && group0.value === group1.value;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  reducers: [resourcesReducers],
  eventDefParsers: [parseEventDef],
  isDraggableTransformers: [transformIsDraggable],
  eventDragMutationMassagers: [massageEventDragMutation],
  eventDefMutationAppliers: [applyEventDefMutation],
  dateSelectionTransformers: [transformDateSelectionJoin],
  datePointTransforms: [transformDatePoint],
  dateSpanTransforms: [transformDateSpan],
  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],
  isPropsValid: isPropsValidWithResources,
  externalDefTransforms: [transformExternalDef],
  eventResizeJoinTransforms: [transformEventResizeJoin],
  viewContainerModifiers: [injectLicenseWarning],
  eventDropTransformers: [transformEventDrop],
  optionChangeHandlers: optionChangeHandlers
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-timeline/main.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-timeline/main.esm.js ***!
  \******************************************************************/
/*! exports provided: default, ResourceTimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceTimelineView", function() { return ResourceTimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/timeline */ "./node_modules/@fullcalendar/timeline/main.esm.js");
/* harmony import */ var _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/resource-common */ "./node_modules/@fullcalendar/resource-common/main.esm.js");
/*!
FullCalendar Resource Timeline Plugin v4.3.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var Row =
/** @class */
function (_super) {
  __extends(Row, _super);

  function Row(context, spreadsheetParent, spreadsheetNextSibling, timeAxisParent, timeAxisNextSibling) {
    var _this = _super.call(this, context) || this;

    _this.isSizeDirty = false;
    spreadsheetParent.insertBefore(_this.spreadsheetTr = document.createElement('tr'), spreadsheetNextSibling);
    timeAxisParent.insertBefore(_this.timeAxisTr = document.createElement('tr'), timeAxisNextSibling);
    return _this;
  }

  Row.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.spreadsheetTr);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.timeAxisTr);

    _super.prototype.destroy.call(this);
  };

  Row.prototype.updateSize = function (isResize) {
    this.isSizeDirty = false;
  };

  return Row;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

function updateExpanderIcon(el, isExpanded) {
  var classList = el.classList;

  if (isExpanded) {
    classList.remove('fc-icon-plus-square');
    classList.add('fc-icon-minus-square');
  } else {
    classList.remove('fc-icon-minus-square');
    classList.add('fc-icon-plus-square');
  }
}

function clearExpanderIcon(el) {
  var classList = el.classList;
  classList.remove('fc-icon-minus-square');
  classList.remove('fc-icon-plus-square');
}

function updateTrResourceId(tr, resourceId) {
  tr.setAttribute('data-resource-id', resourceId);
}

var GroupRow =
/** @class */
function (_super) {
  __extends(GroupRow, _super);

  function GroupRow() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderCells, _this.unrenderCells);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderCells]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    return _this;
  }

  GroupRow.prototype.render = function (props) {
    this._renderCells(props.group, props.spreadsheetColCnt);

    this._updateExpanderIcon(props.isExpanded);

    this.isSizeDirty = true;
  };

  GroupRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderCells.unrender(); // should unrender everything else

  };

  GroupRow.prototype.renderCells = function (group, spreadsheetColCnt) {
    var spreadsheetContentEl = this.renderSpreadsheetContent(group);
    this.spreadsheetTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider',
      colSpan: spreadsheetColCnt // span across all columns

    }, this.spreadsheetHeightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, spreadsheetContentEl)) // needed by setTrInnerHeight
    );
    this.expanderIconEl = spreadsheetContentEl.querySelector('.fc-icon');
    this.expanderIconEl.parentElement.addEventListener('click', this.onExpanderClick); // insert a single cell, with a single empty <div>.
    // there will be no content

    this.timeAxisTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider'
    }, this.timeAxisHeightEl = document.createElement('div')));
  };

  GroupRow.prototype.unrenderCells = function () {
    this.spreadsheetTr.innerHTML = '';
    this.timeAxisTr.innerHTML = '';
  };
  /*
  Renders the content wrapper element that will be inserted into this row's TD cell.
  */


  GroupRow.prototype.renderSpreadsheetContent = function (group) {
    var text = this.renderCellText(group);
    var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + '<span class="fc-expander">' + '<span class="fc-icon"></span>' + '</span>' + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');
    var filter = group.spec.render;

    if (typeof filter === 'function') {
      contentEl = filter(contentEl, group.value) || contentEl;
    }

    return contentEl;
  };

  GroupRow.prototype.renderCellText = function (group) {
    var text = group.value || ''; // might be null/undefined if an ad-hoc grouping

    var filter = group.spec.text;

    if (typeof filter === 'function') {
      text = filter(text) || text;
    }

    return text;
  };

  GroupRow.prototype.getHeightEls = function () {
    return [this.spreadsheetHeightEl, this.timeAxisHeightEl];
  };

  GroupRow.prototype.updateExpanderIcon = function (isExpanded) {
    updateExpanderIcon(this.expanderIconEl, isExpanded);
  };

  return GroupRow;
}(Row);

GroupRow.addEqualityFuncs({
  group: _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["isGroupsEqual"] // HACK for ResourceTimelineView::renderRows

});

var SpreadsheetRow =
/** @class */
function (_super) {
  __extends(SpreadsheetRow, _super);

  function SpreadsheetRow(context, tr) {
    var _this = _super.call(this, context) || this;

    _this._renderRow = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderRow, _this.unrenderRow);
    _this._updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId, null, [_this._renderRow]);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderRow]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    _this.tr = tr;
    return _this;
  }

  SpreadsheetRow.prototype.render = function (props) {
    this._renderRow(props.resource, props.rowSpans, props.depth, props.colSpecs);

    this._updateTrResourceId(this.tr, props.resource.id); // TODO: only use public ID?


    this._updateExpanderIcon(props.hasChildren, props.isExpanded);
  };

  SpreadsheetRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderRow.unrender(); // should unrender everything else

  };

  SpreadsheetRow.prototype.renderRow = function (resource, rowSpans, depth, colSpecs) {
    var _a = this,
        tr = _a.tr,
        theme = _a.theme,
        calendar = _a.calendar,
        view = _a.view;

    var resourceFields = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceFields"])(resource); // slightly inefficient. already done up the call stack

    var mainTd;

    for (var i = 0; i < colSpecs.length; i++) {
      var colSpec = colSpecs[i];
      var rowSpan = rowSpans[i];

      if (rowSpan === 0) {
        // not responsible for group-based rows. VRowGroup is
        continue;
      } else if (rowSpan == null) {
        rowSpan = 1;
      }

      var text = void 0;

      if (colSpec.field) {
        text = resourceFields[colSpec.field];
      } else {
        text = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(colSpec.text, calendar)(resource);
      }

      var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + (colSpec.isMain ? renderIconHtml(depth) : '') + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');

      if (typeof colSpec.render === 'function') {
        // a filter function for the element
        contentEl = colSpec.render(new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource), contentEl) || contentEl;
      }

      if (rowSpan > 1) {
        contentEl.classList.add('fc-sticky');
      }

      var td = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
        className: theme.getClass('widgetContent'),
        rowspan: rowSpan
      }, contentEl); // the first cell of the row needs to have an inner div for setTrInnerHeight

      if (colSpec.isMain) {
        td.appendChild(this.heightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, td.childNodes) // inner wrap
        );
        mainTd = td;
      }

      tr.appendChild(td);
    }

    this.expanderIconEl = tr.querySelector('.fc-expander-space .fc-icon'); // wait until very end

    view.publiclyTrigger('resourceRender', [{
      resource: new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource),
      el: mainTd,
      view: view
    }]);
  };

  SpreadsheetRow.prototype.unrenderRow = function () {
    this.tr.innerHTML = '';
  };

  SpreadsheetRow.prototype.updateExpanderIcon = function (hasChildren, isExpanded) {
    var expanderIconEl = this.expanderIconEl;
    var expanderEl = expanderIconEl.parentElement;

    if (expanderIconEl && expanderEl // why would this be null?? was the case in IE11
    ) {
        if (hasChildren) {
          expanderEl.addEventListener('click', this.onExpanderClick);
          expanderEl.classList.add('fc-expander');
          updateExpanderIcon(expanderIconEl, isExpanded);
        } else {
          expanderEl.removeEventListener('click', this.onExpanderClick);
          expanderEl.classList.remove('fc-expander');
          clearExpanderIcon(expanderIconEl);
        }
      }
  };

  return SpreadsheetRow;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);
/*
Renders the HTML responsible for the subrow expander area,
as well as the space before it (used to align expanders of similar depths)
*/


function renderIconHtml(depth) {
  var html = '';

  for (var i = 0; i < depth; i++) {
    html += '<span class="fc-icon"></span>';
  }

  html += '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>';
  return html;
}

var ResourceRow =
/** @class */
function (_super) {
  __extends(ResourceRow, _super);

  function ResourceRow(context, a, b, c, d, timeAxis) {
    var _this = _super.call(this, context, a, b, c, d) || this;

    _this._updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId);
    _this.spreadsheetRow = new SpreadsheetRow(context, _this.spreadsheetTr);

    _this.timeAxisTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: _this.theme.getClass('widgetContent')
    }, _this.innerContainerEl = document.createElement('div')));

    _this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](context, _this.innerContainerEl, _this.innerContainerEl, timeAxis);
    return _this;
  }

  ResourceRow.prototype.destroy = function () {
    this.spreadsheetRow.destroy();
    this.lane.destroy();

    _super.prototype.destroy.call(this);
  };

  ResourceRow.prototype.render = function (props) {
    // spreadsheetRow handles calling updateTrResourceId for spreadsheetTr
    this.spreadsheetRow.receiveProps({
      colSpecs: props.colSpecs,
      id: props.id,
      rowSpans: props.rowSpans,
      depth: props.depth,
      isExpanded: props.isExpanded,
      hasChildren: props.hasChildren,
      resource: props.resource
    });

    this._updateTrResourceId(this.timeAxisTr, props.resource.id);

    this.lane.receiveProps({
      dateProfile: props.dateProfile,
      nextDayThreshold: props.nextDayThreshold,
      businessHours: props.businessHours,
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    });
    this.isSizeDirty = true;
  };

  ResourceRow.prototype.updateSize = function (isResize) {
    _super.prototype.updateSize.call(this, isResize);

    this.lane.updateSize(isResize);
  };

  ResourceRow.prototype.getHeightEls = function () {
    return [this.spreadsheetRow.heightEl, this.innerContainerEl];
  };

  return ResourceRow;
}(Row);

ResourceRow.addEqualityFuncs({
  rowSpans: _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isArraysEqual"] // HACK for isSizeDirty, ResourceTimelineView::renderRows

});
var COL_MIN_WIDTH = 30;

var SpreadsheetHeader =
/** @class */
function (_super) {
  __extends(SpreadsheetHeader, _super);

  function SpreadsheetHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    _this.resizables = [];
    _this.colWidths = [];
    _this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
    parentEl.appendChild(_this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: _this.theme.getClass('tableGrid')
    }));
    return _this;
  }

  SpreadsheetHeader.prototype.destroy = function () {
    for (var _i = 0, _a = this.resizables; _i < _a.length; _i++) {
      var resizable = _a[_i];
      resizable.destroy();
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);

    _super.prototype.destroy.call(this);
  };

  SpreadsheetHeader.prototype.render = function (props) {
    var theme = this.theme;
    var colSpecs = props.colSpecs;
    var html = '<colgroup>' + props.colTags + '</colgroup>' + '<tbody>';

    if (props.superHeaderText) {
      html += '<tr class="fc-super">' + '<th class="' + theme.getClass('widgetHeader') + '" colspan="' + colSpecs.length + '">' + '<div class="fc-cell-content">' + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(props.superHeaderText) + '</span>' + '</div>' + '</th>' + '</tr>';
    }

    html += '<tr>';

    for (var i = 0; i < colSpecs.length; i++) {
      var o = colSpecs[i];
      var isLast = i === colSpecs.length - 1;
      html += "<th class=\"" + theme.getClass('widgetHeader') + "\">" + '<div>' + '<div class="fc-cell-content">' + (o.isMain ? '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>' : '') + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(o.labelText || '') + // what about normalizing this value ahead of time?
      '</span>' + '</div>' + (!isLast ? '<div class="fc-col-resizer"></div>' : '') + '</div>' + '</th>';
    }

    html += '</tr>';
    html += '</tbody>';
    this.tableEl.innerHTML = html;
    this.thEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('th'));
    this.colEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('col'));
    this.resizerEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('.fc-col-resizer'));
    this.initColResizing();
  };

  SpreadsheetHeader.prototype.initColResizing = function () {
    var _this = this;

    var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resizables = this.resizerEls.map(function (handleEl, colIndex) {
        var dragging = new ElementDraggingImpl(handleEl);
        var startWidth;
        dragging.emitter.on('dragstart', function () {
          startWidth = _this.colWidths[colIndex];

          if (typeof startWidth !== 'number') {
            startWidth = _this.thEls[colIndex].getBoundingClientRect().width;
          }
        });
        dragging.emitter.on('dragmove', function (pev) {
          _this.colWidths[colIndex] = Math.max(startWidth + pev.deltaX * (_this.isRtl ? -1 : 1), COL_MIN_WIDTH);

          _this.emitter.trigger('colwidthchange', _this.colWidths);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  return SpreadsheetHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var Spreadsheet =
/** @class */
function (_super) {
  __extends(Spreadsheet, _super);

  function Spreadsheet(context, headParentEl, bodyParentEl) {
    var _this = _super.call(this, context) || this;

    _this._renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderCells, _this.unrenderCells);
    _this.layout = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["HeaderBodyLayout"](headParentEl, bodyParentEl, 'clipped-scroll');
    var headerEnhancedScroller = _this.layout.headerScroller.enhancedScroll;
    var bodyEnhancedScroller = _this.layout.bodyScroller.enhancedScroll;
    _this.header = new SpreadsheetHeader(context, headerEnhancedScroller.canvas.contentEl);

    _this.header.emitter.on('colwidthchange', function (colWidths) {
      _this.applyColWidths(colWidths);
    });

    bodyEnhancedScroller.canvas.contentEl.appendChild(_this.bodyContainerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table>' + '<colgroup />' + '<tbody />' + '</table>'));
    _this.bodyColGroup = _this.bodyContainerEl.querySelector('colgroup');
    _this.bodyTbody = _this.bodyContainerEl.querySelector('tbody');
    return _this;
  }

  Spreadsheet.prototype.destroy = function () {
    this.header.destroy();
    this.layout.destroy();

    this._renderCells.unrender();

    _super.prototype.destroy.call(this);
  };

  Spreadsheet.prototype.render = function (props) {
    this._renderCells(props.superHeaderText, props.colSpecs);
  };

  Spreadsheet.prototype.renderCells = function (superHeaderText, colSpecs) {
    var colTags = this.renderColTags(colSpecs);
    this.header.receiveProps({
      superHeaderText: superHeaderText,
      colSpecs: colSpecs,
      colTags: colTags
    });
    this.bodyColGroup.innerHTML = colTags;
    this.bodyColEls = Array.prototype.slice.call(this.bodyColGroup.querySelectorAll('col'));
    this.applyColWidths(colSpecs.map(function (colSpec) {
      return colSpec.width;
    }));
  };

  Spreadsheet.prototype.unrenderCells = function () {
    this.bodyColGroup.innerHTML = '';
  };

  Spreadsheet.prototype.renderColTags = function (colSpecs) {
    var html = '';

    for (var _i = 0, colSpecs_1 = colSpecs; _i < colSpecs_1.length; _i++) {
      var o = colSpecs_1[_i];

      if (o.isMain) {
        html += '<col class="fc-main-col"/>';
      } else {
        html += '<col/>';
      }
    }

    return html;
  };

  Spreadsheet.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.layout.setHeight(totalHeight, isAuto);
  };

  Spreadsheet.prototype.applyColWidths = function (colWidths) {
    var _this = this;

    colWidths.forEach(function (colWidth, colIndex) {
      var headEl = _this.header.colEls[colIndex]; // bad to access child

      var bodyEl = _this.bodyColEls[colIndex];
      var styleVal;

      if (typeof colWidth === 'number') {
        styleVal = colWidth + 'px';
      } else if (typeof colWidth == null) {
        styleVal = '';
      }

      headEl.style.width = bodyEl.style.width = styleVal;
    });
  };

  return Spreadsheet;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars

var ResourceTimelineView =
/** @class */
function (_super) {
  __extends(ResourceTimelineView, _super);

  function ResourceTimelineView(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;

    _this.isStickyScrollDirty = false;
    _this.rowNodes = [];
    _this.rowComponents = [];
    _this.rowComponentsById = {};
    _this.resourceAreaWidthDraggings = [];
    _this.splitter = new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceSplitter"](); // doesn't let it do businessHours tho

    _this.hasResourceBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasResourceBusinessHours);
    _this.buildRowNodes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildRowNodes"]);
    _this.hasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasNesting);
    _this._updateHasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateHasNesting);
    var allColSpecs = _this.opt('resourceColumns') || [];

    var labelText = _this.opt('resourceLabelText'); // TODO: view.override


    var defaultLabelText = 'Resources'; // TODO: view.defaults

    var superHeaderText = null;

    if (!allColSpecs.length) {
      allColSpecs.push({
        labelText: labelText || defaultLabelText,
        text: Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(_this.opt('resourceText'), _this.calendar)
      });
    } else {
      superHeaderText = labelText;
    }

    var plainColSpecs = [];
    var groupColSpecs = [];
    var groupSpecs = [];
    var isVGrouping = false;
    var isHGrouping = false;

    for (var _i = 0, allColSpecs_1 = allColSpecs; _i < allColSpecs_1.length; _i++) {
      var colSpec = allColSpecs_1[_i];

      if (colSpec.group) {
        groupColSpecs.push(colSpec);
      } else {
        plainColSpecs.push(colSpec);
      }
    }

    plainColSpecs[0].isMain = true;

    if (groupColSpecs.length) {
      groupSpecs = groupColSpecs;
      isVGrouping = true;
    } else {
      var hGroupField = _this.opt('resourceGroupField');

      if (hGroupField) {
        isHGrouping = true;
        groupSpecs.push({
          field: hGroupField,
          text: _this.opt('resourceGroupText'),
          render: _this.opt('resourceGroupRender')
        });
      }
    }

    var allOrderSpecs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseFieldSpecs"])(_this.opt('resourceOrder'));
    var plainOrderSpecs = [];

    for (var _a = 0, allOrderSpecs_1 = allOrderSpecs; _a < allOrderSpecs_1.length; _a++) {
      var orderSpec = allOrderSpecs_1[_a];
      var isGroup = false;

      for (var _b = 0, groupSpecs_1 = groupSpecs; _b < groupSpecs_1.length; _b++) {
        var groupSpec = groupSpecs_1[_b];

        if (groupSpec.field === orderSpec.field) {
          groupSpec.order = orderSpec.order; // -1, 0, 1

          isGroup = true;
          break;
        }
      }

      if (!isGroup) {
        plainOrderSpecs.push(orderSpec);
      }
    }

    _this.superHeaderText = superHeaderText;
    _this.isVGrouping = isVGrouping;
    _this.isHGrouping = isHGrouping;
    _this.groupSpecs = groupSpecs;
    _this.colSpecs = groupColSpecs.concat(plainColSpecs);
    _this.orderSpecs = plainOrderSpecs; // START RENDERING...

    _this.el.classList.add('fc-timeline');

    if (_this.opt('eventOverlap') === false) {
      _this.el.classList.add('fc-no-overlap');
    }

    _this.el.innerHTML = _this.renderSkeletonHtml();
    _this.resourceAreaHeadEl = _this.el.querySelector('thead .fc-resource-area');

    _this.setResourceAreaWidth(_this.opt('resourceAreaWidth'));

    _this.initResourceAreaWidthDragging();

    _this.miscHeight = _this.el.getBoundingClientRect().height;
    _this.spreadsheet = new Spreadsheet(_this.context, _this.resourceAreaHeadEl, _this.el.querySelector('tbody .fc-resource-area'));
    _this.timeAxis = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimeAxis"](_this.context, _this.el.querySelector('thead .fc-time-area'), _this.el.querySelector('tbody .fc-time-area'));
    var timeAxisRowContainer = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table><tbody /></table>');

    _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl.appendChild(timeAxisRowContainer);

    _this.timeAxisTbody = timeAxisRowContainer.querySelector('tbody');
    _this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](_this.context, null, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, _this.timeAxis);
    _this.bodyScrollJoiner = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["ScrollJoiner"]('vertical', [_this.spreadsheet.layout.bodyScroller, _this.timeAxis.layout.bodyScroller]); // after scrolljoiner

    _this.spreadsheetBodyStickyScroller = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["StickyScroller"](_this.spreadsheet.layout.bodyScroller.enhancedScroll, _this.isRtl, true // isVertical
    );

    _this.spreadsheet.receiveProps({
      superHeaderText: _this.superHeaderText,
      colSpecs: _this.colSpecs
    }); // Component...


    context.calendar.registerInteractiveComponent(_this, {
      el: _this.timeAxis.slats.el
    });
    return _this;
  }

  ResourceTimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetContent') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  ResourceTimelineView.prototype.render = function (props) {
    _super.prototype.render.call(this, props);

    var splitProps = this.splitter.splitProps(props);
    var hasResourceBusinessHours = this.hasResourceBusinessHours(props.resourceStore);
    this.timeAxis.receiveProps({
      dateProfile: props.dateProfile
    }); // for all-resource bg events / selections / business-hours

    this.lane.receiveProps(__assign({}, splitProps[''], {
      dateProfile: props.dateProfile,
      nextDayThreshold: this.nextDayThreshold,
      businessHours: hasResourceBusinessHours ? null : props.businessHours
    }));
    var newRowNodes = this.buildRowNodes(props.resourceStore, this.groupSpecs, this.orderSpecs, this.isVGrouping, props.resourceEntityExpansions, this.opt('resourcesInitiallyExpanded'));

    this._updateHasNesting(this.hasNesting(newRowNodes));

    this.diffRows(newRowNodes);
    this.renderRows(props.dateProfile, hasResourceBusinessHours ? props.businessHours : null, // CONFUSING, comment
    splitProps);
  };

  ResourceTimelineView.prototype.updateHasNesting = function (isNesting) {
    var classList = this.el.classList;

    if (isNesting) {
      classList.remove('fc-flat');
    } else {
      classList.add('fc-flat');
    }
  };

  ResourceTimelineView.prototype.diffRows = function (newNodes) {
    var oldNodes = this.rowNodes;
    var oldLen = oldNodes.length;
    var oldIndexHash = {}; // id -> index

    var oldI = 0;
    var newI = 0;

    for (oldI = 0; oldI < oldLen; oldI++) {
      oldIndexHash[oldNodes[oldI].id] = oldI;
    } // iterate new nodes


    for (oldI = 0, newI = 0; newI < newNodes.length; newI++) {
      var newNode = newNodes[newI];
      var oldIFound = oldIndexHash[newNode.id];

      if (oldIFound != null && oldIFound >= oldI) {
        this.removeRows(newI, oldIFound - oldI, oldNodes); // won't do anything if same index

        oldI = oldIFound + 1;
      } else {
        this.addRow(newI, newNode);
      }
    } // old rows that weren't found need to be removed


    this.removeRows(newI, oldLen - oldI, oldNodes); // won't do anything if same index

    this.rowNodes = newNodes;
  };
  /*
  rowComponents is the in-progress result
  */


  ResourceTimelineView.prototype.addRow = function (index, rowNode) {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowComponentsById = _a.rowComponentsById;

    var nextComponent = rowComponents[index];
    var newComponent = this.buildChildComponent(rowNode, this.spreadsheet.bodyTbody, nextComponent ? nextComponent.spreadsheetTr : null, this.timeAxisTbody, nextComponent ? nextComponent.timeAxisTr : null);
    rowComponents.splice(index, 0, newComponent);
    rowComponentsById[rowNode.id] = newComponent;
  };

  ResourceTimelineView.prototype.removeRows = function (startIndex, len, oldRowNodes) {
    if (len) {
      var _a = this,
          rowComponents = _a.rowComponents,
          rowComponentsById = _a.rowComponentsById;

      for (var i = 0; i < len; i++) {
        var rowComponent = rowComponents[startIndex + i];
        rowComponent.destroy();
        delete rowComponentsById[oldRowNodes[i].id];
      }

      rowComponents.splice(startIndex, len);
    }
  };

  ResourceTimelineView.prototype.buildChildComponent = function (node, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext) {
    if (node.group) {
      return new GroupRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext);
    } else if (node.resource) {
      return new ResourceRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext, this.timeAxis);
    }
  };

  ResourceTimelineView.prototype.renderRows = function (dateProfile, fallbackBusinessHours, splitProps) {
    var _a = this,
        rowNodes = _a.rowNodes,
        rowComponents = _a.rowComponents;

    for (var i = 0; i < rowNodes.length; i++) {
      var rowNode = rowNodes[i];
      var rowComponent = rowComponents[i];

      if (rowNode.group) {
        rowComponent.receiveProps({
          spreadsheetColCnt: this.colSpecs.length,
          id: rowNode.id,
          isExpanded: rowNode.isExpanded,
          group: rowNode.group
        });
      } else {
        var resource = rowNode.resource;
        rowComponent.receiveProps(__assign({}, splitProps[resource.id], {
          dateProfile: dateProfile,
          nextDayThreshold: this.nextDayThreshold,
          businessHours: resource.businessHours || fallbackBusinessHours,
          colSpecs: this.colSpecs,
          id: rowNode.id,
          rowSpans: rowNode.rowSpans,
          depth: rowNode.depth,
          isExpanded: rowNode.isExpanded,
          hasChildren: rowNode.hasChildren,
          resource: rowNode.resource
        }));
      }
    }
  };

  ResourceTimelineView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    // FYI: this ordering is really important
    var calendar = this.calendar;
    var isBaseSizing = isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated;

    if (isBaseSizing) {
      this.syncHeadHeights();
      this.timeAxis.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
      this.spreadsheet.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
    }

    var rowSizingCnt = this.updateRowSizes(isResize);
    this.lane.updateSize(isResize); // is efficient. uses flags

    if (isBaseSizing || rowSizingCnt) {
      this.bodyScrollJoiner.update();
      this.timeAxis.layout.scrollJoiner.update(); // hack

      this.rowPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.timeAxis.slats.el, this.rowComponents.map(function (rowComponent) {
        return rowComponent.timeAxisTr;
      }), false, // isHorizontal
      true // isVertical
      );
      this.rowPositions.build();
      this.isStickyScrollDirty = true;
    }
  };

  ResourceTimelineView.prototype.syncHeadHeights = function () {
    var spreadsheetHeadEl = this.spreadsheet.header.tableEl;
    var timeAxisHeadEl = this.timeAxis.header.tableEl;
    spreadsheetHeadEl.style.height = '';
    timeAxisHeadEl.style.height = '';
    var max = Math.max(spreadsheetHeadEl.getBoundingClientRect().height, timeAxisHeadEl.getBoundingClientRect().height);
    spreadsheetHeadEl.style.height = timeAxisHeadEl.style.height = max + 'px';
  };

  ResourceTimelineView.prototype.updateRowSizes = function (isResize) {
    var dirtyRowComponents = this.rowComponents;

    if (!isResize) {
      dirtyRowComponents = dirtyRowComponents.filter(function (rowComponent) {
        return rowComponent.isSizeDirty;
      });
    }

    var elArrays = dirtyRowComponents.map(function (rowComponent) {
      return rowComponent.getHeightEls();
    }); // reset to natural heights

    for (var _i = 0, elArrays_1 = elArrays; _i < elArrays_1.length; _i++) {
      var elArray = elArrays_1[_i];

      for (var _a = 0, elArray_1 = elArray; _a < elArray_1.length; _a++) {
        var el = elArray_1[_a];
        el.style.height = '';
      }
    } // let rows update their contents' heights


    for (var _b = 0, dirtyRowComponents_1 = dirtyRowComponents; _b < dirtyRowComponents_1.length; _b++) {
      var rowComponent = dirtyRowComponents_1[_b];
      rowComponent.updateSize(isResize); // will reset isSizeDirty
    }

    var maxHeights = elArrays.map(function (elArray) {
      var maxHeight = null;

      for (var _i = 0, elArray_2 = elArray; _i < elArray_2.length; _i++) {
        var el = elArray_2[_i];
        var height = el.getBoundingClientRect().height;

        if (maxHeight === null || height > maxHeight) {
          maxHeight = height;
        }
      }

      return maxHeight;
    });

    for (var i = 0; i < elArrays.length; i++) {
      for (var _c = 0, _d = elArrays[i]; _c < _d.length; _c++) {
        var el = _d[_c];
        el.style.height = maxHeights[i] + 'px';
      }
    }

    return dirtyRowComponents.length;
  };

  ResourceTimelineView.prototype.destroy = function () {
    for (var _i = 0, _a = this.rowComponents; _i < _a.length; _i++) {
      var rowComponent = _a[_i];
      rowComponent.destroy();
    }

    this.rowNodes = [];
    this.rowComponents = [];
    this.spreadsheet.destroy();
    this.timeAxis.destroy();

    for (var _b = 0, _c = this.resourceAreaWidthDraggings; _b < _c.length; _b++) {
      var resourceAreaWidthDragging = _c[_b];
      resourceAreaWidthDragging.destroy();
    }

    this.spreadsheetBodyStickyScroller.destroy();

    _super.prototype.destroy.call(this);

    this.calendar.unregisterInteractiveComponent(this);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.getNowIndicatorUnit = function (dateProfile) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile);
  };

  ResourceTimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  ResourceTimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scrolling
  // ------------------------------------------------------------------------------------------------------------------
  // this is useful for scrolling prev/next dates while resource is scrolled down


  ResourceTimelineView.prototype.queryScroll = function () {
    var scroll = _super.prototype.queryScroll.call(this);

    if (this.props.resourceStore) {
      __assign(scroll, this.queryResourceScroll());
    }

    return scroll;
  };

  ResourceTimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize);

    if (this.props.resourceStore) {
      this.applyResourceScroll(scroll);
    } // avoid updating stickyscroll too often


    if (isResize || this.isStickyScrollDirty) {
      this.isStickyScrollDirty = false;
      this.spreadsheetBodyStickyScroller.updateSize();
      this.timeAxis.updateStickyScrollers();
    }
  };

  ResourceTimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  ResourceTimelineView.prototype.queryDateScroll = function () {
    return this.timeAxis.queryDateScroll();
  };

  ResourceTimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  ResourceTimelineView.prototype.queryResourceScroll = function () {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowNodes = _a.rowNodes;

    var scroll = {};
    var scrollerTop = this.timeAxis.layout.bodyScroller.el.getBoundingClientRect().top; // fixed position

    for (var i = 0; i < rowComponents.length; i++) {
      var rowComponent = rowComponents[i];
      var rowNode = rowNodes[i];
      var el = rowComponent.timeAxisTr;
      var elBottom = el.getBoundingClientRect().bottom; // fixed position

      if (elBottom > scrollerTop) {
        scroll.rowId = rowNode.id;
        scroll.bottom = elBottom - scrollerTop;
        break;
      }
    } // TODO: what about left scroll state for spreadsheet area?


    return scroll;
  };

  ResourceTimelineView.prototype.applyResourceScroll = function (scroll) {
    var rowId = scroll.forcedRowId || scroll.rowId;

    if (rowId) {
      var rowComponent = this.rowComponentsById[rowId];

      if (rowComponent) {
        var el = rowComponent.timeAxisTr;

        if (el) {
          var innerTop = this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.el.getBoundingClientRect().top;
          var rowRect = el.getBoundingClientRect();
          var scrollTop = (scroll.forcedRowId ? rowRect.top : // just use top edge
          rowRect.bottom - scroll.bottom) - // pixels from bottom edge
          innerTop;
          this.timeAxis.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
          this.spreadsheet.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
        }
      }
    }
  }; // TODO: scrollToResource
  // Hit System
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
    this.rowPositions.build();
  };

  ResourceTimelineView.prototype.queryHit = function (positionLeft, positionTop) {
    var rowPositions = this.rowPositions;
    var slats = this.timeAxis.slats;
    var rowIndex = rowPositions.topToIndex(positionTop);

    if (rowIndex != null) {
      var resource = this.rowNodes[rowIndex].resource;

      if (resource) {
        // not a group
        var slatHit = slats.positionToHit(positionLeft);

        if (slatHit) {
          return {
            component: this,
            dateSpan: {
              range: slatHit.dateSpan.range,
              allDay: slatHit.dateSpan.allDay,
              resourceId: resource.id
            },
            rect: {
              left: slatHit.left,
              right: slatHit.right,
              top: rowPositions.tops[rowIndex],
              bottom: rowPositions.bottoms[rowIndex]
            },
            dayEl: slatHit.dayEl,
            layer: 0
          };
        }
      }
    }
  }; // Resource Area
  // ------------------------------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.setResourceAreaWidth = function (widthVal) {
    this.resourceAreaWidth = widthVal;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.resourceAreaHeadEl, 'width', widthVal || '');
  };

  ResourceTimelineView.prototype.initResourceAreaWidthDragging = function () {
    var _this = this;

    var resourceAreaDividerEls = Array.prototype.slice.call(this.el.querySelectorAll('.fc-col-resizer'));
    var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resourceAreaWidthDraggings = resourceAreaDividerEls.map(function (el) {
        var dragging = new ElementDraggingImpl(el);
        var dragStartWidth;
        var viewWidth;
        dragging.emitter.on('dragstart', function () {
          dragStartWidth = _this.resourceAreaWidth;

          if (typeof dragStartWidth !== 'number') {
            dragStartWidth = _this.resourceAreaHeadEl.getBoundingClientRect().width;
          }

          viewWidth = _this.el.getBoundingClientRect().width;
        });
        dragging.emitter.on('dragmove', function (pev) {
          var newWidth = dragStartWidth + pev.deltaX * (_this.isRtl ? -1 : 1);
          newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);
          newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);

          _this.setResourceAreaWidth(newWidth);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  ResourceTimelineView.needsResourceData = true; // for ResourceViewProps

  return ResourceTimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

function hasResourceBusinessHours(resourceStore) {
  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.businessHours) {
      return true;
    }
  }

  return false;
}

function hasNesting(nodes) {
  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var node = nodes_1[_i];

    if (node.group) {
      return true;
    } else if (node.resource) {
      if (node.hasChildren) {
        return true;
      }
    }
  }

  return false;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  deps: [_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["default"]],
  defaultView: 'resourceTimelineDay',
  views: {
    resourceTimeline: {
      class: ResourceTimelineView,
      resourceAreaWidth: '30%',
      resourcesInitiallyExpanded: true,
      eventResizableFromStart: true // TODO: not DRY with this same setting in the main timeline config

    },
    resourceTimelineDay: {
      type: 'resourceTimeline',
      duration: {
        days: 1
      }
    },
    resourceTimelineWeek: {
      type: 'resourceTimeline',
      duration: {
        weeks: 1
      }
    },
    resourceTimelineMonth: {
      type: 'resourceTimeline',
      duration: {
        months: 1
      }
    },
    resourceTimelineYear: {
      type: 'resourceTimeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/timeline/main.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/timeline/main.esm.js ***!
  \*********************************************************/
/*! exports provided: default, HeaderBodyLayout, ScrollJoiner, StickyScroller, TimeAxis, TimelineLane, TimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderBodyLayout", function() { return HeaderBodyLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollJoiner", function() { return ScrollJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StickyScroller", function() { return StickyScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeAxis", function() { return TimeAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineLane", function() { return TimelineLane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineView", function() { return TimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Timeline Plugin v4.3.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
/*
A rectangular area of content that lives within a Scroller.
Can have "gutters", areas of dead spacing around the perimeter.
Also very useful for forcing a width, which a Scroller cannot do alone.
Has a content area that lives above a background area.
*/


var ScrollerCanvas =
/** @class */
function () {
  function ScrollerCanvas() {
    this.gutters = {};
    this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div class=\"fc-scroller-canvas\"> <div class=\"fc-content\"></div> <div class=\"fc-bg\"></div> </div>");
    this.contentEl = this.el.querySelector('.fc-content');
    this.bgEl = this.el.querySelector('.fc-bg');
  }
  /*
  If falsy, resets all the gutters to 0
  */


  ScrollerCanvas.prototype.setGutters = function (gutters) {
    if (!gutters) {
      this.gutters = {};
    } else {
      __assign(this.gutters, gutters);
    }

    this.updateSize();
  };

  ScrollerCanvas.prototype.setWidth = function (width) {
    this.width = width;
    this.updateSize();
  };

  ScrollerCanvas.prototype.setMinWidth = function (minWidth) {
    this.minWidth = minWidth;
    this.updateSize();
  };

  ScrollerCanvas.prototype.clearWidth = function () {
    this.width = null;
    this.minWidth = null;
    this.updateSize();
  };

  ScrollerCanvas.prototype.updateSize = function () {
    var _a = this,
        gutters = _a.gutters,
        el = _a.el; // is border-box (width includes padding)


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-left', gutters.left);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-right', gutters.right);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-top', gutters.top);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-bottom', gutters.bottom);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      paddingLeft: gutters.left || '',
      paddingRight: gutters.right || '',
      paddingTop: gutters.top || '',
      paddingBottom: gutters.bottom || '',
      width: this.width != null ? this.width + (gutters.left || 0) + (gutters.right || 0) : '',
      minWidth: this.minWidth != null ? this.minWidth + (gutters.left || 0) + (gutters.right || 0) : ''
    });
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.bgEl, {
      left: gutters.left || '',
      right: gutters.right || '',
      top: gutters.top || '',
      bottom: gutters.bottom || ''
    });
  };

  return ScrollerCanvas;
}();

var EnhancedScroller =
/** @class */
function (_super) {
  __extends(EnhancedScroller, _super);

  function EnhancedScroller(overflowX, overflowY) {
    var _this = _super.call(this, overflowX, overflowY) || this; // Scroll Events
    // ----------------------------------------------------------------------------------------------


    _this.reportScroll = function () {
      if (!_this.isScrolling) {
        _this.reportScrollStart();
      }

      _this.trigger('scroll');

      _this.isMoving = true;

      _this.requestMovingEnd();
    };

    _this.reportScrollStart = function () {
      if (!_this.isScrolling) {
        _this.isScrolling = true;

        _this.trigger('scrollStart', _this.isTouching); // created in constructor

      }
    }; // Touch Events
    // ----------------------------------------------------------------------------------------------
    // will fire *before* the scroll event is fired


    _this.reportTouchStart = function () {
      _this.isTouching = true;
    };

    _this.reportTouchEnd = function () {
      if (_this.isTouching) {
        _this.isTouching = false; // if touch scrolling was re-enabled during a recent touch scroll
        // then unbind the handlers that are preventing it from happening.

        if (_this.isTouchScrollEnabled) {
          _this.unbindPreventTouchScroll(); // won't do anything if not bound

        } // if the user ended their touch, and the scroll area wasn't moving,
        // we consider this to be the end of the scroll.


        if (!_this.isMoving) {
          _this.reportScrollEnd(); // won't fire if already ended

        }
      }
    };

    _this.isScrolling = false;
    _this.isTouching = false;
    _this.isMoving = false;
    _this.isTouchScrollEnabled = true;
    _this.requestMovingEnd = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["debounce"])(_this.reportMovingEnd, 500);
    _this.canvas = new ScrollerCanvas();

    _this.el.appendChild(_this.canvas.el);

    _this.applyOverflow();

    _this.bindHandlers();

    return _this;
  }

  EnhancedScroller.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.unbindHandlers();
  }; // Touch scroll prevention
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.disableTouchScroll = function () {
    this.isTouchScrollEnabled = false;
    this.bindPreventTouchScroll(); // will be unbound in enableTouchScroll or reportTouchEnd
  };

  EnhancedScroller.prototype.enableTouchScroll = function () {
    this.isTouchScrollEnabled = true; // only immediately unbind if a touch event is NOT in progress.
    // otherwise, it will be handled by reportTouchEnd.

    if (!this.isTouching) {
      this.unbindPreventTouchScroll();
    }
  };

  EnhancedScroller.prototype.bindPreventTouchScroll = function () {
    if (!this.preventTouchScrollHandler) {
      this.el.addEventListener('touchmove', this.preventTouchScrollHandler = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventDefault"]);
    }
  };

  EnhancedScroller.prototype.unbindPreventTouchScroll = function () {
    if (this.preventTouchScrollHandler) {
      this.el.removeEventListener('touchmove', this.preventTouchScrollHandler);
      this.preventTouchScrollHandler = null;
    }
  }; // Handlers
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.bindHandlers = function () {
    this.el.addEventListener('scroll', this.reportScroll);
    this.el.addEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.addEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.unbindHandlers = function () {
    this.el.removeEventListener('scroll', this.reportScroll);
    this.el.removeEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.removeEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.reportMovingEnd = function () {
    this.isMoving = false; // only end the scroll if not currently touching.
    // if touching, the scrolling will end later, on touchend.

    if (!this.isTouching) {
      this.reportScrollEnd();
    }
  };

  EnhancedScroller.prototype.reportScrollEnd = function () {
    if (this.isScrolling) {
      this.trigger('scrollEnd');
      this.isScrolling = false;
    }
  }; // Horizontal Scroll Normalization
  // ----------------------------------------------------------------------------------------------
  // http://stackoverflow.com/questions/24276619/better-way-to-get-the-viewport-of-a-scrollable-div-in-rtl-mode/24394376#24394376
  // TODO: move all this to util functions

  /*
  If RTL, and scrolled to the left, returns NEGATIVE value (like Firefox)
  */


  EnhancedScroller.prototype.getScrollLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val + el.clientWidth - el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    return val;
  };
  /*
  Accepts a NEGATIVE value for when scrolled in RTL
  */


  EnhancedScroller.prototype.setScrollLeft = function (val) {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    el.scrollLeft = val;
  };
  /*
  Always returns the number of pixels scrolled from the leftmost position (even if RTL).
  Always positive.
  */


  EnhancedScroller.prototype.getScrollFromLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'negative':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val - el.clientWidth + el.scrollWidth;
          break;
      }
    }

    return val;
  };

  return EnhancedScroller;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]);

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"].mixInto(EnhancedScroller); // Horizontal Scroll System Detection
// ----------------------------------------------------------------------------------------------

var _rtlScrollSystem;

function getRtlScrollSystem() {
  return _rtlScrollSystem || (_rtlScrollSystem = detectRtlScrollSystem());
}

function detectRtlScrollSystem() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div style=\" position: absolute; top: -1000px; width: 1px; height: 1px; overflow: scroll; direction: rtl; font-size: 100px; \">A</div>");
  document.body.appendChild(el);
  var system;

  if (el.scrollLeft > 0) {
    system = 'positive';
  } else {
    el.scrollLeft = 1;

    if (el.scrollLeft > 0) {
      system = 'reverse';
    } else {
      system = 'negative';
    }
  }

  Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(el);
  return system;
}
/*
A Scroller, but with a wrapping div that allows "clipping" away of native scrollbars,
giving the appearance that there are no scrollbars.
*/


var ClippedScroller =
/** @class */
function () {
  /*
  Received overflows can be set to 'clipped', meaning scrollbars shouldn't be visible
  to the user, but the area should still scroll.
  */
  function ClippedScroller(overflowX, overflowY, parentEl) {
    this.isHScrollbarsClipped = false;
    this.isVScrollbarsClipped = false;

    if (overflowX === 'clipped-scroll') {
      overflowX = 'scroll';
      this.isHScrollbarsClipped = true;
    }

    if (overflowY === 'clipped-scroll') {
      overflowY = 'scroll';
      this.isVScrollbarsClipped = true;
    }

    this.enhancedScroll = new EnhancedScroller(overflowX, overflowY);
    parentEl.appendChild(this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-scroller-clip'
    }));
    this.el.appendChild(this.enhancedScroll.el);
  }

  ClippedScroller.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ClippedScroller.prototype.updateSize = function () {
    var enhancedScroll = this.enhancedScroll;
    var scrollEl = enhancedScroll.el;
    var edges = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEdges"])(scrollEl);
    var cssProps = {
      marginLeft: 0,
      marginRight: 0,
      marginTop: 0,
      marginBottom: 0
    }; // give the inner scrolling div negative margins so that its scrollbars
    // are nudged outside of the bounding box of the wrapper, which is overflow:hidden

    if (this.isVScrollbarsClipped) {
      cssProps.marginLeft = -edges.scrollbarLeft;
      cssProps.marginRight = -edges.scrollbarRight;
    }

    if (this.isHScrollbarsClipped) {
      cssProps.marginBottom = -edges.scrollbarBottom;
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(scrollEl, cssProps); // if we are attempting to hide the scrollbars offscreen, OSX/iOS will still
    // display the floating scrollbars. attach a className to force-hide them.

    if ((this.isHScrollbarsClipped || enhancedScroll.overflowX === 'hidden') && ( // should never show?
    this.isVScrollbarsClipped || enhancedScroll.overflowY === 'hidden') && // should never show?
    !( // doesn't have any scrollbar mass
    edges.scrollbarLeft || edges.scrollbarRight || edges.scrollbarBottom)) {
      scrollEl.classList.add('fc-no-scrollbars');
    } else {
      scrollEl.classList.remove('fc-no-scrollbars');
    }
  };

  ClippedScroller.prototype.setHeight = function (height) {
    this.enhancedScroll.setHeight(height);
  };
  /*
  Accounts for 'clipped' scrollbars
  */


  ClippedScroller.prototype.getScrollbarWidths = function () {
    var widths = this.enhancedScroll.getScrollbarWidths();

    if (this.isVScrollbarsClipped) {
      widths.left = 0;
      widths.right = 0;
    }

    if (this.isHScrollbarsClipped) {
      widths.bottom = 0;
    }

    return widths;
  };

  return ClippedScroller;
}();

var ScrollJoiner =
/** @class */
function () {
  function ScrollJoiner(axis, scrollers) {
    this.axis = axis;
    this.scrollers = scrollers;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var scroller = _a[_i];
      this.initScroller(scroller);
    }
  }

  ScrollJoiner.prototype.initScroller = function (scroller) {
    var _this = this;

    var enhancedScroll = scroller.enhancedScroll; // when the user scrolls via mousewheel, we know for sure the target
    // scroller should be the master. capture the various x-browser events that fire.

    var onScroll = function () {
      _this.assignMasterScroller(scroller);
    };

    'wheel mousewheel DomMouseScroll MozMousePixelScroll'.split(' ').forEach(function (evName) {
      enhancedScroll.el.addEventListener(evName, onScroll);
    });
    enhancedScroll.on('scrollStart', function () {
      if (!_this.masterScroller) {
        _this.assignMasterScroller(scroller);
      }
    }).on('scroll', function () {
      if (scroller === _this.masterScroller) {
        for (var _i = 0, _a = _this.scrollers; _i < _a.length; _i++) {
          var otherScroller = _a[_i];

          if (otherScroller !== scroller) {
            switch (_this.axis) {
              case 'horizontal':
                otherScroller.enhancedScroll.el.scrollLeft = enhancedScroll.el.scrollLeft;
                break;

              case 'vertical':
                otherScroller.enhancedScroll.setScrollTop(enhancedScroll.getScrollTop());
                break;
            }
          }
        }
      }
    }).on('scrollEnd', function () {
      if (scroller === _this.masterScroller) {
        _this.unassignMasterScroller();
      }
    });
  };

  ScrollJoiner.prototype.assignMasterScroller = function (scroller) {
    this.unassignMasterScroller();
    this.masterScroller = scroller;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var otherScroller = _a[_i];

      if (otherScroller !== scroller) {
        otherScroller.enhancedScroll.disableTouchScroll();
      }
    }
  };

  ScrollJoiner.prototype.unassignMasterScroller = function () {
    if (this.masterScroller) {
      for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
        var otherScroller = _a[_i];
        otherScroller.enhancedScroll.enableTouchScroll();
      }

      this.masterScroller = null;
    }
  };

  ScrollJoiner.prototype.update = function () {
    var allWidths = this.scrollers.map(function (scroller) {
      return scroller.getScrollbarWidths();
    });
    var maxLeft = 0;
    var maxRight = 0;
    var maxTop = 0;
    var maxBottom = 0;
    var widths;
    var i;

    for (var _i = 0, allWidths_1 = allWidths; _i < allWidths_1.length; _i++) {
      widths = allWidths_1[_i];
      maxLeft = Math.max(maxLeft, widths.left);
      maxRight = Math.max(maxRight, widths.right);
      maxTop = Math.max(maxTop, widths.top);
      maxBottom = Math.max(maxBottom, widths.bottom);
    }

    for (i = 0; i < this.scrollers.length; i++) {
      var scroller = this.scrollers[i];
      widths = allWidths[i];
      scroller.enhancedScroll.canvas.setGutters(this.axis === 'horizontal' ? {
        left: maxLeft - widths.left,
        right: maxRight - widths.right
      } : {
        top: maxTop - widths.top,
        bottom: maxBottom - widths.bottom
      });
    }
  };

  return ScrollJoiner;
}();

var HeaderBodyLayout =
/** @class */
function () {
  /*
  verticalScroll = 'auto' | 'clipped-scroll'
  */
  function HeaderBodyLayout(headerContainerEl, bodyContainerEl, verticalScroll) {
    this.headerScroller = new ClippedScroller('clipped-scroll', 'hidden', headerContainerEl);
    this.bodyScroller = new ClippedScroller('auto', verticalScroll, bodyContainerEl);
    this.scrollJoiner = new ScrollJoiner('horizontal', [this.headerScroller, this.bodyScroller]);
  }

  HeaderBodyLayout.prototype.destroy = function () {
    this.headerScroller.destroy();
    this.bodyScroller.destroy();
  };

  HeaderBodyLayout.prototype.setHeight = function (totalHeight, isAuto) {
    var bodyHeight;

    if (isAuto) {
      bodyHeight = 'auto';
    } else {
      bodyHeight = totalHeight - this.queryHeadHeight();
    }

    this.bodyScroller.setHeight(bodyHeight);
    this.headerScroller.updateSize(); // adjusts gutters and classNames

    this.bodyScroller.updateSize(); // adjusts gutters and classNames

    this.scrollJoiner.update();
  };

  HeaderBodyLayout.prototype.queryHeadHeight = function () {
    return this.headerScroller.enhancedScroll.canvas.contentEl.getBoundingClientRect().height;
  };

  return HeaderBodyLayout;
}();

var TimelineHeader =
/** @class */
function (_super) {
  __extends(TimelineHeader, _super);

  function TimelineHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.appendChild(_this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: _this.theme.getClass('tableGrid')
    }));
    return _this;
  }

  TimelineHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);

    _super.prototype.destroy.call(this);
  };

  TimelineHeader.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineHeader.prototype.renderDates = function (tDateProfile) {
    var _a = this,
        dateEnv = _a.dateEnv,
        theme = _a.theme;

    var cellRows = tDateProfile.cellRows;
    var lastRow = cellRows[cellRows.length - 1];
    var isChrono = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.labelInterval) > Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.slotDuration);
    var oneDay = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration);
    var html = '<colgroup>'; // needs to be a col for each body slat. header cells will have colspans

    for (var i = tDateProfile.slotCnt - 1; i >= 0; i--) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody>';

    for (var _i = 0, cellRows_1 = cellRows; _i < cellRows_1.length; _i++) {
      var rowCells = cellRows_1[_i];
      var isLast = rowCells === lastRow;
      html += '<tr' + (isChrono && isLast ? ' class="fc-chrono"' : '') + '>';

      for (var _b = 0, rowCells_1 = rowCells; _b < rowCells_1.length; _b++) {
        var cell = rowCells_1[_b];
        var headerCellClassNames = [theme.getClass('widgetHeader')];

        if (cell.isWeekStart) {
          headerCellClassNames.push('fc-em-cell');
        }

        if (oneDay) {
          headerCellClassNames = headerCellClassNames.concat(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(cell.date, this.props.dateProfile, this.context, true) // adds "today" class and other day-based classes
          );
        }

        html += '<th class="' + headerCellClassNames.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(cell.date, {
          omitTime: !tDateProfile.isTimeScale,
          omitTimeZoneOffset: true
        }) + '"' + (cell.colspan > 1 ? ' colspan="' + cell.colspan + '"' : '') + '>' + '<div class="fc-cell-content">' + cell.spanHtml + '</div>' + '</th>';
      }

      html += '</tr>';
    }

    html += '</tbody>';
    this.tableEl.innerHTML = html; // TODO: does this work cross-browser?

    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl, 'col');
    this.innerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelector('tr:last-child'), // compound selector won't work because of query-root problem
    'th .fc-cell-text');
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelectorAll('tr:not(:last-child)'), // compound selector won't work because of query-root problem
    'th .fc-cell-text').forEach(function (innerEl) {
      innerEl.classList.add('fc-sticky');
    });
  };

  return TimelineHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineSlats =
/** @class */
function (_super) {
  __extends(TimelineSlats, _super);

  function TimelineSlats(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.appendChild(_this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-slats'
    }));
    return _this;
  }

  TimelineSlats.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);

    _super.prototype.destroy.call(this);
  };

  TimelineSlats.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineSlats.prototype.renderDates = function (tDateProfile) {
    var _a = this,
        theme = _a.theme,
        view = _a.view,
        dateEnv = _a.dateEnv;

    var slotDates = tDateProfile.slotDates,
        isWeekStarts = tDateProfile.isWeekStarts;
    var html = '<table class="' + theme.getClass('tableGrid') + '">' + '<colgroup>';

    for (var i = 0; i < slotDates.length; i++) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody><tr>';

    for (var i = 0; i < slotDates.length; i++) {
      html += this.slatCellHtml(slotDates[i], isWeekStarts[i], tDateProfile);
    }

    html += '</tr></tbody></table>';
    this.el.innerHTML = html;
    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'col');
    this.slatEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'td');

    for (var i = 0; i < slotDates.length; i++) {
      view.publiclyTrigger('dayRender', [{
        date: dateEnv.toDate(slotDates[i]),
        el: this.slatEls[i],
        view: view
      }]);
    }

    this.outerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.slatEls, true, // isHorizontal
    false // isVertical
    ); // for the inner divs within the slats
    // used for event rendering and scrollTime, to disregard slat border

    this.innerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findChildren"])(this.slatEls, 'div'), true, // isHorizontal
    false // isVertical
    );
  };

  TimelineSlats.prototype.slatCellHtml = function (date, isEm, tDateProfile) {
    var _a = this,
        theme = _a.theme,
        dateEnv = _a.dateEnv;

    var classes;

    if (tDateProfile.isTimeScale) {
      classes = [];
      classes.push(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval)) ? 'fc-major' : 'fc-minor');
    } else {
      classes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(date, this.props.dateProfile, this.context);
      classes.push('fc-day');
    }

    classes.unshift(theme.getClass('widgetContent'));

    if (isEm) {
      classes.push('fc-em-cell');
    }

    return '<td class="' + classes.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(date, {
      omitTime: !tDateProfile.isTimeScale,
      omitTimeZoneOffset: true
    }) + '"' + '><div></div></td>';
  };

  TimelineSlats.prototype.updateSize = function () {
    this.outerCoordCache.build();
    this.innerCoordCache.build();
  };

  TimelineSlats.prototype.positionToHit = function (leftPosition) {
    var outerCoordCache = this.outerCoordCache;
    var tDateProfile = this.props.tDateProfile;
    var slatIndex = outerCoordCache.leftToIndex(leftPosition);

    if (slatIndex != null) {
      // somewhat similar to what TimeGrid does. consolidate?
      var slatWidth = outerCoordCache.getWidth(slatIndex);
      var partial = this.isRtl ? (outerCoordCache.rights[slatIndex] - leftPosition) / slatWidth : (leftPosition - outerCoordCache.lefts[slatIndex]) / slatWidth;
      var localSnapIndex = Math.floor(partial * tDateProfile.snapsPerSlot);
      var start = this.dateEnv.add(tDateProfile.slotDates[slatIndex], Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["multiplyDuration"])(tDateProfile.snapDuration, localSnapIndex));
      var end = this.dateEnv.add(start, tDateProfile.snapDuration);
      return {
        dateSpan: {
          range: {
            start: start,
            end: end
          },
          allDay: !this.props.tDateProfile.isTimeScale
        },
        dayEl: this.slatColEls[slatIndex],
        left: outerCoordCache.lefts[slatIndex],
        right: outerCoordCache.rights[slatIndex]
      };
    }

    return null;
  };

  return TimelineSlats;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_AUTO_LABELS = 18; // more than `12` months but less that `24` hours

var MAX_AUTO_SLOTS_PER_LABEL = 6; // allows 6 10-min slots in an hour

var MAX_AUTO_CELLS = 200; // allows 4-days to have a :30 slot duration

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS = 1000; // potential nice values for slot-duration and interval-duration

var STOCK_SUB_DURATIONS = [{
  years: 1
}, {
  months: 1
}, {
  days: 1
}, {
  hours: 1
}, {
  minutes: 30
}, {
  minutes: 15
}, {
  minutes: 10
}, {
  minutes: 5
}, {
  minutes: 1
}, {
  seconds: 30
}, {
  seconds: 15
}, {
  seconds: 10
}, {
  seconds: 5
}, {
  seconds: 1
}, {
  milliseconds: 500
}, {
  milliseconds: 100
}, {
  milliseconds: 10
}, {
  milliseconds: 1
}];

function buildTimelineDateProfile(dateProfile, view) {
  var dateEnv = view.dateEnv;
  var tDateProfile = {
    labelInterval: queryDurationOption(view, 'slotLabelInterval'),
    slotDuration: queryDurationOption(view, 'slotDuration')
  };
  validateLabelAndSlot(tDateProfile, dateProfile, dateEnv); // validate after computed grid duration

  ensureLabelInterval(tDateProfile, dateProfile, dateEnv);
  ensureSlotDuration(tDateProfile, dateProfile, dateEnv);
  var input = view.opt('slotLabelFormat');
  var rawFormats = Array.isArray(input) ? input : input != null ? [input] : computeHeaderFormats(tDateProfile, dateProfile, dateEnv, view);
  tDateProfile.headerFormats = rawFormats.map(function (rawFormat) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(rawFormat);
  });
  tDateProfile.isTimeScale = Boolean(tDateProfile.slotDuration.milliseconds);
  var largeUnit = null;

  if (!tDateProfile.isTimeScale) {
    var slotUnit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;

    if (/year|month|week/.test(slotUnit)) {
      largeUnit = slotUnit;
    }
  }

  tDateProfile.largeUnit = largeUnit;
  tDateProfile.emphasizeWeeks = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration) && currentRangeAs('weeks', dateProfile, dateEnv) >= 2 && !view.opt('businessHours');
  /*
  console.log('label interval =', timelineView.labelInterval.humanize())
  console.log('slot duration =', timelineView.slotDuration.humanize())
  console.log('header formats =', timelineView.headerFormats)
  console.log('isTimeScale', timelineView.isTimeScale)
  console.log('largeUnit', timelineView.largeUnit)
  */

  var rawSnapDuration = view.opt('snapDuration');
  var snapDuration;
  var snapsPerSlot;

  if (rawSnapDuration) {
    snapDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(rawSnapDuration);
    snapsPerSlot = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.slotDuration, snapDuration); // ^ TODO: warning if not whole?
  }

  if (snapsPerSlot == null) {
    snapDuration = tDateProfile.slotDuration;
    snapsPerSlot = 1;
  }

  tDateProfile.snapDuration = snapDuration;
  tDateProfile.snapsPerSlot = snapsPerSlot; // more...

  var timeWindowMs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.maxTime) - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // TODO: why not use normalizeRange!?

  var normalizedStart = normalizeDate(dateProfile.renderRange.start, tDateProfile, dateEnv);
  var normalizedEnd = normalizeDate(dateProfile.renderRange.end, tDateProfile, dateEnv); // apply minTime/maxTime
  // TODO: View should be responsible.

  if (tDateProfile.isTimeScale) {
    normalizedStart = dateEnv.add(normalizedStart, dateProfile.minTime);
    normalizedEnd = dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(normalizedEnd, -1), dateProfile.maxTime);
  }

  tDateProfile.timeWindowMs = timeWindowMs;
  tDateProfile.normalizedRange = {
    start: normalizedStart,
    end: normalizedEnd
  };
  var slotDates = [];
  var date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, view)) {
      slotDates.push(date);
    }

    date = dateEnv.add(date, tDateProfile.slotDuration);
  }

  tDateProfile.slotDates = slotDates; // more...

  var snapIndex = -1;
  var snapDiff = 0; // index of the diff :(

  var snapDiffToIndex = [];
  var snapIndexToDiff = [];
  date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, view)) {
      snapIndex++;
      snapDiffToIndex.push(snapIndex);
      snapIndexToDiff.push(snapDiff);
    } else {
      snapDiffToIndex.push(snapIndex + 0.5);
    }

    date = dateEnv.add(date, tDateProfile.snapDuration);
    snapDiff++;
  }

  tDateProfile.snapDiffToIndex = snapDiffToIndex;
  tDateProfile.snapIndexToDiff = snapIndexToDiff;
  tDateProfile.snapCnt = snapIndex + 1; // is always one behind

  tDateProfile.slotCnt = tDateProfile.snapCnt / tDateProfile.snapsPerSlot; // more...

  tDateProfile.isWeekStarts = buildIsWeekStarts(tDateProfile, dateEnv);
  tDateProfile.cellRows = buildCellRows(tDateProfile, dateEnv, view);
  return tDateProfile;
}
/*
snaps to appropriate unit
*/


function normalizeDate(date, tDateProfile, dateEnv) {
  var normalDate = date;

  if (!tDateProfile.isTimeScale) {
    normalDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(normalDate);

    if (tDateProfile.largeUnit) {
      normalDate = dateEnv.startOf(normalDate, tDateProfile.largeUnit);
    }
  }

  return normalDate;
}
/*
snaps to appropriate unit
*/


function normalizeRange(range, tDateProfile, dateEnv) {
  if (!tDateProfile.isTimeScale) {
    range = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeVisibleDayRange"])(range);

    if (tDateProfile.largeUnit) {
      var dayRange = range; // preserve original result

      range = {
        start: dateEnv.startOf(range.start, tDateProfile.largeUnit),
        end: dateEnv.startOf(range.end, tDateProfile.largeUnit)
      }; // if date is partially through the interval, or is in the same interval as the start,
      // make the exclusive end be the *next* interval

      if (range.end.valueOf() !== dayRange.end.valueOf() || range.end <= range.start) {
        range = {
          start: range.start,
          end: dateEnv.add(range.end, tDateProfile.slotDuration)
        };
      }
    }
  }

  return range;
}

function isValidDate(date, tDateProfile, dateProfile, view) {
  if (view.dateProfileGenerator.isHiddenDay(date)) {
    return false;
  } else if (tDateProfile.isTimeScale) {
    // determine if the time is within minTime/maxTime, which may have wacky values
    var day = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date);
    var timeMs = date.valueOf() - day.valueOf();
    var ms = timeMs - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // milliseconds since minTime

    ms = (ms % 86400000 + 86400000) % 86400000; // make negative values wrap to 24hr clock

    return ms < tDateProfile.timeWindowMs; // before the maxTime?
  } else {
    return true;
  }
}

function queryDurationOption(view, name) {
  var input = view.opt(name);

  if (input != null) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
  }
}

function validateLabelAndSlot(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange; // make sure labelInterval doesn't exceed the max number of cells

  if (tDateProfile.labelInterval) {
    var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.labelInterval);

    if (labelCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotLabelInterval results in too many cells');
      tDateProfile.labelInterval = null;
    }
  } // make sure slotDuration doesn't exceed the maximum number of cells


  if (tDateProfile.slotDuration) {
    var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.slotDuration);

    if (slotCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotDuration results in too many cells');
      tDateProfile.slotDuration = null;
    }
  } // make sure labelInterval is a multiple of slotDuration


  if (tDateProfile.labelInterval && tDateProfile.slotDuration) {
    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);

    if (slotsPerLabel === null || slotsPerLabel < 1) {
      console.warn('slotLabelInterval must be a multiple of slotDuration');
      tDateProfile.slotDuration = null;
    }
  }
}

function ensureLabelInterval(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var labelInterval = tDateProfile.labelInterval;

  if (!labelInterval) {
    // compute based off the slot duration
    // find the largest label interval with an acceptable slots-per-label
    var input = void 0;

    if (tDateProfile.slotDuration) {
      for (var _i = 0, STOCK_SUB_DURATIONS_1 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_1.length; _i++) {
        input = STOCK_SUB_DURATIONS_1[_i];
        var tryLabelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tryLabelInterval, tDateProfile.slotDuration);

        if (slotsPerLabel !== null && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
          labelInterval = tryLabelInterval;
          break;
        }
      } // use the slot duration as a last resort


      if (!labelInterval) {
        labelInterval = tDateProfile.slotDuration;
      } // compute based off the view's duration
      // find the largest label interval that yields the minimum number of labels

    } else {
      for (var _a = 0, STOCK_SUB_DURATIONS_2 = STOCK_SUB_DURATIONS; _a < STOCK_SUB_DURATIONS_2.length; _a++) {
        input = STOCK_SUB_DURATIONS_2[_a];
        labelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, labelInterval);

        if (labelCnt >= MIN_AUTO_LABELS) {
          break;
        }
      }
    }

    tDateProfile.labelInterval = labelInterval;
  }

  return labelInterval;
}

function ensureSlotDuration(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var slotDuration = tDateProfile.slotDuration;

  if (!slotDuration) {
    var labelInterval = ensureLabelInterval(tDateProfile, dateProfile, dateEnv); // will compute if necessary
    // compute based off the label interval
    // find the largest slot duration that is different from labelInterval, but still acceptable

    for (var _i = 0, STOCK_SUB_DURATIONS_3 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_3.length; _i++) {
      var input = STOCK_SUB_DURATIONS_3[_i];
      var trySlotDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
      var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(labelInterval, trySlotDuration);

      if (slotsPerLabel !== null && slotsPerLabel > 1 && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
        slotDuration = trySlotDuration;
        break;
      }
    } // only allow the value if it won't exceed the view's # of slots limit


    if (slotDuration) {
      var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, slotDuration);

      if (slotCnt > MAX_AUTO_CELLS) {
        slotDuration = null;
      }
    } // use the label interval as a last resort


    if (!slotDuration) {
      slotDuration = labelInterval;
    }

    tDateProfile.slotDuration = slotDuration;
  }

  return slotDuration;
}

function computeHeaderFormats(tDateProfile, dateProfile, dateEnv, view) {
  var format1;
  var format2;
  var labelInterval = tDateProfile.labelInterval;
  var unit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(labelInterval).unit;
  var weekNumbersVisible = view.opt('weekNumbers');
  var format0 = format1 = format2 = null; // NOTE: weekNumber computation function wont work

  if (unit === 'week' && !weekNumbersVisible) {
    unit = 'day';
  }

  switch (unit) {
    case 'year':
      format0 = {
        year: 'numeric'
      }; // '2015'

      break;

    case 'month':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        month: 'short'
      }; // 'Jan'

      break;

    case 'week':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        week: 'narrow'
      }; // 'Wk4'

      break;

    case 'day':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric',
          month: 'long'
        }; // 'January 2014'
      } else if (currentRangeAs('months', dateProfile, dateEnv) > 1) {
        format0 = {
          month: 'long'
        }; // 'January'
      }

      if (weekNumbersVisible) {
        format1 = {
          week: 'short'
        }; // 'Wk 4'
      }

      format2 = {
        weekday: 'narrow',
        day: 'numeric'
      }; // 'Su 9'

      break;

    case 'hour':
      if (weekNumbersVisible) {
        format0 = {
          week: 'short'
        }; // 'Wk 4'
      }

      if (currentRangeAs('days', dateProfile, dateEnv) > 1) {
        format1 = {
          weekday: 'short',
          day: 'numeric',
          month: 'numeric',
          omitCommas: true
        }; // Sat 4/7
      }

      format2 = {
        hour: 'numeric',
        minute: '2-digit',
        omitZeroMinute: true,
        meridiem: 'short'
      };
      break;

    case 'minute':
      // sufficiently large number of different minute cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMinutes"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          meridiem: 'short'
        };

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.minute, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: 'numeric',
          meridiem: 'short'
        };
      }

      break;

    case 'second':
      // sufficiently large number of different second cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughSeconds"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30 PM'

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.second, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          second: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30:45 PM'
      }

      break;

    case 'millisecond':
      format0 = {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        meridiem: 'lowercase'
      }; // '8:30:45 PM'

      format1 = function (params) {
        return '.' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.millisecond, 3);
      };

      break;
  }

  return [].concat(format0 || [], format1 || [], format2 || []);
} // Compute the number of the give units in the "current" range.
// Won't go more precise than days.
// Will return `0` if there's not a clean whole interval.


function currentRangeAs(unit, dateProfile, dateEnv) {
  var range = dateProfile.currentRange;
  var res = null;

  if (unit === 'years') {
    res = dateEnv.diffWholeYears(range.start, range.end);
  } else if (unit === 'months') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'weeks') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'days') {
    res = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffWholeDays"])(range.start, range.end);
  }

  return res || 0;
}

function buildIsWeekStarts(tDateProfile, dateEnv) {
  var slotDates = tDateProfile.slotDates,
      emphasizeWeeks = tDateProfile.emphasizeWeeks;
  var prevWeekNumber = null;
  var isWeekStarts = [];

  for (var _i = 0, slotDates_1 = slotDates; _i < slotDates_1.length; _i++) {
    var slotDate = slotDates_1[_i];
    var weekNumber = dateEnv.computeWeekNumber(slotDate);
    var isWeekStart = emphasizeWeeks && prevWeekNumber !== null && prevWeekNumber !== weekNumber;
    prevWeekNumber = weekNumber;
    isWeekStarts.push(isWeekStart);
  }

  return isWeekStarts;
}

function buildCellRows(tDateProfile, dateEnv, view) {
  var slotDates = tDateProfile.slotDates;
  var formats = tDateProfile.headerFormats;
  var cellRows = formats.map(function (format) {
    return [];
  }); // indexed by row,col
  // specifically for navclicks

  var rowUnits = formats.map(function (format) {
    return format.getLargestUnit ? format.getLargestUnit() : null;
  }); // builds cellRows and slotCells

  for (var i = 0; i < slotDates.length; i++) {
    var date = slotDates[i];
    var isWeekStart = tDateProfile.isWeekStarts[i];

    for (var row = 0; row < formats.length; row++) {
      var format = formats[row];
      var rowCells = cellRows[row];
      var leadingCell = rowCells[rowCells.length - 1];
      var isSuperRow = formats.length > 1 && row < formats.length - 1; // more than one row and not the last

      var newCell = null;

      if (isSuperRow) {
        var text = dateEnv.format(date, format);

        if (!leadingCell || leadingCell.text !== text) {
          newCell = buildCellObject(date, text, rowUnits[row], view);
        } else {
          leadingCell.colspan += 1;
        }
      } else {
        if (!leadingCell || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval))) {
          var text = dateEnv.format(date, format);
          newCell = buildCellObject(date, text, rowUnits[row], view);
        } else {
          leadingCell.colspan += 1;
        }
      }

      if (newCell) {
        newCell.weekStart = isWeekStart;
        rowCells.push(newCell);
      }
    }
  }

  return cellRows;
}

function buildCellObject(date, text, rowUnit, view) {
  var spanHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(view, {
    date: date,
    type: rowUnit,
    forceOff: !rowUnit
  }, {
    'class': 'fc-cell-text'
  }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text));
  return {
    text: text,
    spanHtml: spanHtml,
    date: date,
    colspan: 1,
    isWeekStart: false
  };
}

var TimelineNowIndicator =
/** @class */
function () {
  function TimelineNowIndicator(headParent, bodyParent) {
    this.headParent = headParent;
    this.bodyParent = bodyParent;
  }

  TimelineNowIndicator.prototype.render = function (coord, isRtl) {
    var styleProps = isRtl ? {
      right: -coord
    } : {
      left: coord
    };
    this.headParent.appendChild(this.arrowEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-arrow',
      style: styleProps
    }));
    this.bodyParent.appendChild(this.lineEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-line',
      style: styleProps
    }));
  };

  TimelineNowIndicator.prototype.unrender = function () {
    if (this.arrowEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.arrowEl);
    }

    if (this.lineEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.lineEl);
    }
  };

  return TimelineNowIndicator;
}();

var STICKY_PROP_VAL = computeStickyPropVal(); // if null, means not supported at all

var IS_MS_EDGE = /Edge/.test(navigator.userAgent);
var IS_SAFARI = STICKY_PROP_VAL === '-webkit-sticky'; // good b/c doesn't confuse chrome

var STICKY_CLASSNAME = 'fc-sticky';
/*
useful beyond the native position:sticky for these reasons:
- support in IE11
- nice centering support
*/

var StickyScroller =
/** @class */
function () {
  function StickyScroller(scroller, isRtl, isVertical) {
    var _this = this;

    this.usingRelative = null;
    /*
    known bug: called twice on init. problem when mixing with ScrollJoiner
    */

    this.updateSize = function () {
      var els = Array.prototype.slice.call(_this.scroller.canvas.el.querySelectorAll('.' + STICKY_CLASSNAME));

      var elGeoms = _this.queryElGeoms(els);

      var viewportWidth = _this.scroller.el.clientWidth;

      if (_this.usingRelative) {
        var elDestinations = _this.computeElDestinations(elGeoms, viewportWidth); // read before prepPositioning


        assignRelativePositions(els, elGeoms, elDestinations);
      } else {
        assignStickyPositions(els, elGeoms, viewportWidth);
      }
    };

    this.scroller = scroller;
    this.usingRelative = !STICKY_PROP_VAL || // IE11
    IS_MS_EDGE && isRtl || // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18883305/
    (IS_MS_EDGE || IS_SAFARI) && isVertical; // because doesn't work with rowspan in tables, our only vertial use

    if (this.usingRelative) {
      scroller.on('scrollEnd', this.updateSize);
    }
  }

  StickyScroller.prototype.destroy = function () {
    this.scroller.off('scrollEnd', this.updateSize);
  };

  StickyScroller.prototype.queryElGeoms = function (els) {
    var canvasOrigin = this.scroller.canvas.el.getBoundingClientRect();
    var elGeoms = [];

    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el = els_1[_i];
      var parentBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(el.parentNode.getBoundingClientRect(), -canvasOrigin.left, -canvasOrigin.top);
      var elRect = el.getBoundingClientRect();
      var computedStyles = window.getComputedStyle(el);
      var computedTextAlign = window.getComputedStyle(el.parentNode).textAlign; // ask the parent

      var intendedTextAlign = computedTextAlign;
      var naturalBound = null;

      if (computedStyles.position !== 'sticky') {
        naturalBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(elRect, -canvasOrigin.left - (parseFloat(computedStyles.left) || 0), // could be 'auto'
        -canvasOrigin.top - (parseFloat(computedStyles.top) || 0));
      }

      if (el.hasAttribute('data-sticky-center')) {
        intendedTextAlign = 'center';
      }

      elGeoms.push({
        parentBound: parentBound,
        naturalBound: naturalBound,
        elWidth: elRect.width,
        elHeight: elRect.height,
        computedTextAlign: computedTextAlign,
        intendedTextAlign: intendedTextAlign
      });
    }

    return elGeoms;
  };

  StickyScroller.prototype.computeElDestinations = function (elGeoms, viewportWidth) {
    var viewportLeft = this.scroller.getScrollFromLeft();
    var viewportTop = this.scroller.getScrollTop();
    var viewportRight = viewportLeft + viewportWidth;
    return elGeoms.map(function (elGeom) {
      var elWidth = elGeom.elWidth,
          elHeight = elGeom.elHeight,
          parentBound = elGeom.parentBound,
          naturalBound = elGeom.naturalBound;
      var destLeft; // relative to canvas topleft

      var destTop; // "

      switch (elGeom.intendedTextAlign) {
        case 'left':
          destLeft = viewportLeft;
          break;

        case 'right':
          destLeft = viewportRight - elWidth;
          break;

        case 'center':
          destLeft = (viewportLeft + viewportRight) / 2 - elWidth / 2;
          break;
      }

      destLeft = Math.min(destLeft, parentBound.right - elWidth);
      destLeft = Math.max(destLeft, parentBound.left);
      destTop = viewportTop;
      destTop = Math.min(destTop, parentBound.bottom - elHeight);
      destTop = Math.max(destTop, naturalBound.top); // better to use natural top for upper bound

      return {
        left: destLeft,
        top: destTop
      };
    });
  };

  return StickyScroller;
}();

function assignRelativePositions(els, elGeoms, elDestinations) {
  els.forEach(function (el, i) {
    var naturalBound = elGeoms[i].naturalBound;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: 'relative',
      left: elDestinations[i].left - naturalBound.left,
      top: elDestinations[i].top - naturalBound.top
    });
  });
}

function assignStickyPositions(els, elGeoms, viewportWidth) {
  els.forEach(function (el, i) {
    var stickyLeft = 0;

    if (elGeoms[i].intendedTextAlign === 'center') {
      stickyLeft = (viewportWidth - elGeoms[i].elWidth) / 2; // needs to be forced to left?

      if (elGeoms[i].computedTextAlign === 'center') {
        el.setAttribute('data-sticky-center', '') // remember for next queryElGeoms
        ;
        el.parentNode.style.textAlign = 'left';
      }
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: STICKY_PROP_VAL,
      left: stickyLeft,
      right: 0,
      top: 0
    });
  });
}

function computeStickyPropVal() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div style="position:-webkit-sticky;position:sticky"></div>');
  var val = el.style.position;

  if (val.indexOf('sticky') !== -1) {
    return val;
  } else {
    return null;
  }
}

var TimeAxis =
/** @class */
function (_super) {
  __extends(TimeAxis, _super);

  function TimeAxis(context, headerContainerEl, bodyContainerEl) {
    var _this = _super.call(this, context) || this;

    var layout = _this.layout = new HeaderBodyLayout(headerContainerEl, bodyContainerEl, 'auto');
    var headerEnhancedScroller = layout.headerScroller.enhancedScroll;
    var bodyEnhancedScroller = layout.bodyScroller.enhancedScroll; // needs to go after layout, which has ScrollJoiner

    _this.headStickyScroller = new StickyScroller(headerEnhancedScroller, _this.isRtl, false); // isVertical=false

    _this.bodyStickyScroller = new StickyScroller(bodyEnhancedScroller, _this.isRtl, false); // isVertical=false

    _this.header = new TimelineHeader(context, headerEnhancedScroller.canvas.contentEl);
    _this.slats = new TimelineSlats(context, bodyEnhancedScroller.canvas.bgEl);
    _this.nowIndicator = new TimelineNowIndicator(headerEnhancedScroller.canvas.el, bodyEnhancedScroller.canvas.el);
    return _this;
  }

  TimeAxis.prototype.destroy = function () {
    this.layout.destroy();
    this.header.destroy();
    this.slats.destroy();
    this.nowIndicator.unrender();
    this.headStickyScroller.destroy();
    this.bodyStickyScroller.destroy();

    _super.prototype.destroy.call(this);
  };

  TimeAxis.prototype.render = function (props) {
    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(props.dateProfile, this.view); // TODO: cache

    this.header.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    });
    this.slats.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    });
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.getNowIndicatorUnit = function (dateProfile) {
    // yuck
    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(dateProfile, this.view); // TODO: cache

    if (tDateProfile.isTimeScale) {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.renderNowIndicator = function (date) {
    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsMarker"])(this.tDateProfile.normalizedRange, date)) {
      this.nowIndicator.render(this.dateToCoord(date), this.isRtl);
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.unrenderNowIndicator = function () {
    this.nowIndicator.unrender();
  }; // Sizing
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.applySlotWidth(this.computeSlotWidth()); // adjusts gutters. do after slot widths set

    this.layout.setHeight(totalHeight, isAuto); // pretty much just queries coords. do last

    this.slats.updateSize();
  };

  TimeAxis.prototype.updateStickyScrollers = function () {
    this.headStickyScroller.updateSize();
    this.bodyStickyScroller.updateSize();
  };

  TimeAxis.prototype.computeSlotWidth = function () {
    var slotWidth = this.opt('slotWidth') || '';

    if (slotWidth === '') {
      slotWidth = this.computeDefaultSlotWidth(this.tDateProfile);
    }

    return slotWidth;
  };

  TimeAxis.prototype.computeDefaultSlotWidth = function (tDateProfile) {
    var maxInnerWidth = 0; // TODO: harness core's `matchCellWidths` for this

    this.header.innerEls.forEach(function (innerEl, i) {
      maxInnerWidth = Math.max(maxInnerWidth, innerEl.getBoundingClientRect().width);
    });
    var headingCellWidth = Math.ceil(maxInnerWidth) + 1; // assume no padding, and one pixel border
    // in TimelineView.defaults we ensured that labelInterval is an interval of slotDuration
    // TODO: rename labelDuration?

    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);
    var slotWidth = Math.ceil(headingCellWidth / slotsPerLabel);
    var minWidth = window.getComputedStyle(this.header.slatColEls[0]).minWidth;

    if (minWidth) {
      minWidth = parseInt(minWidth, 10);

      if (minWidth) {
        slotWidth = Math.max(slotWidth, minWidth);
      }
    }

    return slotWidth;
  };

  TimeAxis.prototype.applySlotWidth = function (slotWidth) {
    var _a = this,
        layout = _a.layout,
        tDateProfile = _a.tDateProfile;

    var containerWidth = '';
    var containerMinWidth = '';
    var nonLastSlotWidth = '';

    if (slotWidth !== '') {
      slotWidth = Math.round(slotWidth);
      containerWidth = slotWidth * tDateProfile.slotDates.length;
      containerMinWidth = '';
      nonLastSlotWidth = slotWidth;
      var availableWidth = layout.bodyScroller.enhancedScroll.getClientWidth();

      if (availableWidth > containerWidth) {
        containerMinWidth = availableWidth;
        containerWidth = '';
        nonLastSlotWidth = Math.floor(availableWidth / tDateProfile.slotDates.length);
      }
    }

    layout.headerScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.headerScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);
    layout.bodyScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.bodyScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);

    if (nonLastSlotWidth !== '') {
      this.header.slatColEls.slice(0, -1).concat(this.slats.slatColEls.slice(0, -1)).forEach(function (el) {
        el.style.width = nonLastSlotWidth + 'px';
      });
    }
  }; // returned value is between 0 and the number of snaps


  TimeAxis.prototype.computeDateSnapCoverage = function (date) {
    var _a = this,
        dateEnv = _a.dateEnv,
        tDateProfile = _a.tDateProfile;

    var snapDiff = dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.snapDuration);

    if (snapDiff < 0) {
      return 0;
    } else if (snapDiff >= tDateProfile.snapDiffToIndex.length) {
      return tDateProfile.snapCnt;
    } else {
      var snapDiffInt = Math.floor(snapDiff);
      var snapCoverage = tDateProfile.snapDiffToIndex[snapDiffInt];

      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(snapCoverage)) {
        // not an in-between value
        snapCoverage += snapDiff - snapDiffInt; // add the remainder
      } else {
        // a fractional value, meaning the date is not visible
        // always round up in this case. works for start AND end dates in a range.
        snapCoverage = Math.ceil(snapCoverage);
      }

      return snapCoverage;
    }
  }; // for LTR, results range from 0 to width of area
  // for RTL, results range from negative width of area to 0


  TimeAxis.prototype.dateToCoord = function (date) {
    var tDateProfile = this.tDateProfile;
    var snapCoverage = this.computeDateSnapCoverage(date);
    var slotCoverage = snapCoverage / tDateProfile.snapsPerSlot;
    var slotIndex = Math.floor(slotCoverage);
    slotIndex = Math.min(slotIndex, tDateProfile.slotCnt - 1);
    var partial = slotCoverage - slotIndex;
    var _a = this.slats,
        innerCoordCache = _a.innerCoordCache,
        outerCoordCache = _a.outerCoordCache;

    if (this.isRtl) {
      return outerCoordCache.rights[slotIndex] - innerCoordCache.getWidth(slotIndex) * partial - outerCoordCache.originClientRect.width;
    } else {
      return outerCoordCache.lefts[slotIndex] + innerCoordCache.getWidth(slotIndex) * partial;
    }
  };

  TimeAxis.prototype.rangeToCoords = function (range) {
    if (this.isRtl) {
      return {
        right: this.dateToCoord(range.start),
        left: this.dateToCoord(range.end)
      };
    } else {
      return {
        left: this.dateToCoord(range.start),
        right: this.dateToCoord(range.end)
      };
    }
  }; // Scrolling
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.computeDateScroll = function (duration) {
    var dateEnv = this.dateEnv;
    var dateProfile = this.props.dateProfile;
    var left = 0;

    if (dateProfile) {
      left = this.dateToCoord(dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(dateProfile.activeRange.start), // startOfDay needed?
      duration)); // hack to overcome the left borders of non-first slat

      if (!this.isRtl && left) {
        left += 1;
      }
    }

    return {
      left: left
    };
  };

  TimeAxis.prototype.queryDateScroll = function () {
    var enhancedScroll = this.layout.bodyScroller.enhancedScroll;
    return {
      left: enhancedScroll.getScrollLeft()
    };
  };

  TimeAxis.prototype.applyDateScroll = function (scroll) {
    // TODO: lame we have to update both. use the scrolljoiner instead maybe
    this.layout.bodyScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
    this.layout.headerScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
  };

  return TimeAxis;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineLaneEventRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneEventRenderer, _super);

  function TimelineLaneEventRenderer(context, masterContainerEl, timeAxis) {
    var _this = _super.call(this, context) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
    var view = this.context.view;
    var eventRange = seg.eventRange;
    var eventDef = eventRange.def;
    var eventUi = eventRange.ui;
    var isDraggable = view.computeEventDraggable(eventDef, eventUi);
    var isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi);
    var isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);
    var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
    classes.unshift('fc-timeline-event', 'fc-h-event');
    var timeText = this.getTimeText(eventRange);
    return '<a class="' + classes.join(' ') + '" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(this.getSkinCss(eventUi)) + '"' + (eventDef.url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.url) + '"' : '') + '>' + (timeText ? '<span class="fc-time-wrap">' + '<span class="fc-time">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(timeText) + '</span>' + '</span>' : '') + '<span class="fc-title-wrap">' + '<span class="fc-title fc-sticky">' + (eventDef.title ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title) : '&nbsp;') + '</span>' + '</span>' + (isResizableFromStart ? '<div class="fc-resizer fc-start-resizer"></div>' : '') + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer"></div>' : '') + '</a>';
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventTime = function () {
    return !this.timeAxis.tDateProfile.isTimeScale; // because times should be obvious via axis
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventEnd = function () {
    return false;
  }; // Computes a default event time formatting string if `timeFormat` is not explicitly defined


  TimelineLaneEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true,
      meridiem: 'narrow'
    };
  };

  TimelineLaneEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
    if (!this.el && this.masterContainerEl) {
      this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-event-container'
      });

      if (mirrorInfo) {
        this.el.classList.add('fc-mirror-container');
      }

      this.masterContainerEl.appendChild(this.el);
    }

    if (this.el) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        this.el.appendChild(seg.el);
      }
    }
  };

  TimelineLaneEventRenderer.prototype.detachSegs = function (segs) {
    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(seg.el);
    }
  }; // computes AND assigns (assigns the left/right at least). bad


  TimelineLaneEventRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      var coords = timeAxis.rangeToCoords(seg); // works because Seg has start/end

      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left = coords.left,
        right: -(seg.right = coords.right)
      });
    }
  };

  TimelineLaneEventRenderer.prototype.assignSegSizes = function (segs) {
    if (!this.el) {
      return;
    } // compute seg verticals


    for (var _i = 0, segs_4 = segs; _i < segs_4.length; _i++) {
      var seg = segs_4[_i];
      seg.height = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeHeightAndMargins"])(seg.el);
    }

    this.buildSegLevels(segs); // populates above/below props for computeOffsetForSegs

    var totalHeight = computeOffsetForSegs(segs); // also assigns seg.top

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.el, 'height', totalHeight); // assign seg verticals

    for (var _a = 0, segs_5 = segs; _a < segs_5.length; _a++) {
      var seg = segs_5[_a];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(seg.el, 'top', seg.top);
    }
  };

  TimelineLaneEventRenderer.prototype.buildSegLevels = function (segs) {
    var segLevels = [];
    segs = this.sortEventSegs(segs);

    for (var _i = 0, segs_6 = segs; _i < segs_6.length; _i++) {
      var unplacedSeg = segs_6[_i];
      unplacedSeg.above = []; // determine the first level with no collisions

      var level = 0; // level index

      while (level < segLevels.length) {
        var isLevelCollision = false; // determine collisions

        for (var _a = 0, _b = segLevels[level]; _a < _b.length; _a++) {
          var placedSeg = _b[_a];

          if (timeRowSegsCollide(unplacedSeg, placedSeg)) {
            unplacedSeg.above.push(placedSeg);
            isLevelCollision = true;
          }
        }

        if (isLevelCollision) {
          level += 1;
        } else {
          break;
        }
      } // insert into the first non-colliding level. create if necessary


      (segLevels[level] || (segLevels[level] = [])).push(unplacedSeg); // record possible colliding segments below (TODO: automated test for this)

      level += 1;

      while (level < segLevels.length) {
        for (var _c = 0, _d = segLevels[level]; _c < _d.length; _c++) {
          var belowSeg = _d[_c];

          if (timeRowSegsCollide(unplacedSeg, belowSeg)) {
            belowSeg.above.push(unplacedSeg);
          }
        }

        level += 1;
      }
    }

    return segLevels;
  };

  return TimelineLaneEventRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]);

function computeOffsetForSegs(segs) {
  var max = 0;

  for (var _i = 0, segs_7 = segs; _i < segs_7.length; _i++) {
    var seg = segs_7[_i];
    max = Math.max(max, computeOffsetForSeg(seg));
  }

  return max;
}

function computeOffsetForSeg(seg) {
  if (seg.top == null) {
    seg.top = computeOffsetForSegs(seg.above);
  }

  return seg.top + seg.height;
}

function timeRowSegsCollide(seg0, seg1) {
  return seg0.left < seg1.right && seg0.right > seg1.left;
}

var TimelineLaneFillRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneFillRenderer, _super);

  function TimelineLaneFillRenderer(context, masterContainerEl, timeAxis) {
    var _this = _super.call(this, context) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneFillRenderer.prototype.attachSegs = function (type, segs) {
    if (segs.length) {
      var className = void 0;

      if (type === 'businessHours') {
        className = 'bgevent';
      } else {
        className = type.toLowerCase();
      } // making a new container each time is OKAY
      // all types of segs (background or business hours or whatever) are rendered in one pass


      var containerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-' + className + '-container'
      });
      this.masterContainerEl.appendChild(containerEl);

      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        containerEl.appendChild(seg.el);
      }

      return [containerEl]; // return value
    }
  };

  TimelineLaneFillRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      var coords = timeAxis.rangeToCoords(seg);
      seg.left = coords.left;
      seg.right = coords.right;
    }
  };

  TimelineLaneFillRenderer.prototype.assignSegSizes = function (segs) {
    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left,
        right: -seg.right
      });
    }
  };

  return TimelineLaneFillRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FillRenderer"]);

var TimelineLane =
/** @class */
function (_super) {
  __extends(TimelineLane, _super);

  function TimelineLane(context, fgContainerEl, bgContainerEl, timeAxis) {
    var _this = _super.call(this, context, bgContainerEl) // should el be bgContainerEl???
    || this;

    _this.slicer = new TimelineLaneSlicer();
    _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventDrag, _this._unrenderEventDrag);
    _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventResize, _this._unrenderEventResize);
    var fillRenderer = _this.fillRenderer = new TimelineLaneFillRenderer(context, bgContainerEl, timeAxis);
    var eventRenderer = _this.eventRenderer = new TimelineLaneEventRenderer(context, fgContainerEl, timeAxis);
    _this.mirrorRenderer = new TimelineLaneEventRenderer(context, fgContainerEl, timeAxis);
    _this.renderBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'));
    _this.renderDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'));
    _this.renderBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'));
    _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer));
    _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLane.prototype.render = function (props) {
    var slicedProps = this.slicer.sliceProps(props, props.dateProfile, this.timeAxis.tDateProfile.isTimeScale ? null : props.nextDayThreshold, this, this.timeAxis);
    this.renderBusinessHours(slicedProps.businessHourSegs);
    this.renderDateSelection(slicedProps.dateSelectionSegs);
    this.renderBgEvents(slicedProps.bgEventSegs);
    this.renderFgEvents(slicedProps.fgEventSegs);
    this.renderEventSelection(slicedProps.eventSelection);
    this.renderEventDrag(slicedProps.eventDrag);
    this.renderEventResize(slicedProps.eventResize);
  };

  TimelineLane.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderBusinessHours.unrender();
    this.renderDateSelection.unrender();
    this.renderBgEvents.unrender();
    this.renderFgEvents.unrender();
    this.renderEventSelection.unrender();
    this.renderEventDrag.unrender();
    this.renderEventResize.unrender();
  };

  TimelineLane.prototype._renderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.mirrorRenderer.renderSegs(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.mirrorRenderer.unrender(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._renderEventResize = function (state) {
    if (state) {
      // HACK. eventRenderer and fillRenderer both use these segs. would compete over seg.el
      var segsForHighlight = state.segs.map(function (seg) {
        return __assign({}, seg);
      });
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.fillRenderer.renderSegs('highlight', segsForHighlight);
      this.mirrorRenderer.renderSegs(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventResize = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.fillRenderer.unrender('highlight');
      this.mirrorRenderer.unrender(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype.updateSize = function (isResize) {
    var _a = this,
        fillRenderer = _a.fillRenderer,
        eventRenderer = _a.eventRenderer,
        mirrorRenderer = _a.mirrorRenderer;

    fillRenderer.computeSizes(isResize);
    eventRenderer.computeSizes(isResize);
    mirrorRenderer.computeSizes(isResize);
    fillRenderer.assignSizes(isResize);
    eventRenderer.assignSizes(isResize);
    mirrorRenderer.assignSizes(isResize);
  };

  return TimelineLane;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

var TimelineLaneSlicer =
/** @class */
function (_super) {
  __extends(TimelineLaneSlicer, _super);

  function TimelineLaneSlicer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimelineLaneSlicer.prototype.sliceRange = function (origRange, timeAxis) {
    var tDateProfile = timeAxis.tDateProfile;
    var dateProfile = timeAxis.props.dateProfile;
    var normalRange = normalizeRange(origRange, tDateProfile, timeAxis.dateEnv);
    var segs = []; // protect against when the span is entirely in an invalid date region

    if (timeAxis.computeDateSnapCoverage(normalRange.start) < timeAxis.computeDateSnapCoverage(normalRange.end)) {
      // intersect the footprint's range with the grid's range
      var slicedRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(normalRange, tDateProfile.normalizedRange);

      if (slicedRange) {
        segs.push({
          start: slicedRange.start,
          end: slicedRange.end,
          isStart: slicedRange.start.valueOf() === normalRange.start.valueOf() && isValidDate(slicedRange.start, tDateProfile, dateProfile, timeAxis.view),
          isEnd: slicedRange.end.valueOf() === normalRange.end.valueOf() && isValidDate(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addMs"])(slicedRange.end, -1), tDateProfile, dateProfile, timeAxis.view)
        });
      }
    }

    return segs;
  };

  return TimelineLaneSlicer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Slicer"]);

var TimelineView =
/** @class */
function (_super) {
  __extends(TimelineView, _super);

  function TimelineView(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;

    _this.el.classList.add('fc-timeline');

    if (_this.opt('eventOverlap') === false) {
      _this.el.classList.add('fc-no-overlap');
    }

    _this.el.innerHTML = _this.renderSkeletonHtml();
    _this.timeAxis = new TimeAxis(_this.context, _this.el.querySelector('thead .fc-time-area'), _this.el.querySelector('tbody .fc-time-area'));
    _this.lane = new TimelineLane(_this.context, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, _this.timeAxis);
    context.calendar.registerInteractiveComponent(_this, {
      el: _this.timeAxis.slats.el
    });
    return _this;
  }

  TimelineView.prototype.destroy = function () {
    this.timeAxis.destroy();
    this.lane.destroy();

    _super.prototype.destroy.call(this);

    this.calendar.unregisterInteractiveComponent(this);
  };

  TimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  TimelineView.prototype.render = function (props) {
    _super.prototype.render.call(this, props); // flags for updateSize, addScroll


    this.timeAxis.receiveProps({
      dateProfile: props.dateProfile
    });
    this.lane.receiveProps(__assign({}, props, {
      nextDayThreshold: this.nextDayThreshold
    }));
  };

  TimelineView.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.timeAxis.updateSize(isResize, totalHeight, isAuto);
    this.lane.updateSize(isResize);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.getNowIndicatorUnit = function (dateProfile) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile);
  };

  TimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  TimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scroll System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  TimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize); // will call applyDateScroll
    // avoid updating stickyscroll too often
    // TODO: repeat code as ResourceTimelineView::updateSize


    var calendar = this.calendar;

    if (isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      this.timeAxis.updateStickyScrollers();
    }
  };

  TimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  TimelineView.prototype.queryScroll = function () {
    var enhancedScroll = this.timeAxis.layout.bodyScroller.enhancedScroll;
    return {
      top: enhancedScroll.getScrollTop(),
      left: enhancedScroll.getScrollLeft()
    };
  }; // Hit System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
  };

  TimelineView.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    var slatHit = this.timeAxis.slats.positionToHit(positionLeft);

    if (slatHit) {
      return {
        component: this,
        dateSpan: slatHit.dateSpan,
        rect: {
          left: slatHit.left,
          right: slatHit.right,
          top: 0,
          bottom: elHeight
        },
        dayEl: slatHit.dayEl,
        layer: 0
      };
    }
  };

  return TimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  defaultView: 'timelineDay',
  views: {
    timeline: {
      class: TimelineView,
      eventResizableFromStart: true // how is this consumed for TimelineView tho?

    },
    timelineDay: {
      type: 'timeline',
      duration: {
        days: 1
      }
    },
    timelineWeek: {
      type: 'timeline',
      duration: {
        weeks: 1
      }
    },
    timelineMonth: {
      type: 'timeline',
      duration: {
        months: 1
      }
    },
    timelineYear: {
      type: 'timeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGV2ZWxvcG1lbnQvYWRtaW4vanMvY29tcG9uZW50cy90ZXN0LmpzIiwid2VicGFjazovLy8uL2RldmVsb3BtZW50L2FkbWluL2pzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9jb3JlL21haW4uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZnVsbGNhbGVuZGFyL3Jlc291cmNlLWNvbW1vbi9tYWluLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZXNvdXJjZS10aW1lbGluZS9tYWluLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci90aW1lbGluZS9tYWluLmVzbS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIiJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwid3AiLCJpMThuIiwiX18iLCJfeCIsIl9uIiwiX254IiwiJCIsImRvY3VtZW50IiwicmVhZHkiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0TG9jYWxlIiwiY2FsZW5kYXJFbCIsImdldEVsZW1lbnRCeUlkIiwiY2FsZW5kYXIiLCJDYWxlbmRhciIsInNjaGVkdWxlckxpY2Vuc2VLZXkiLCJwbHVnaW5zIiwicmVzb3VyY2VUaW1lbGluZVBsdWdpbiIsImFzcGVjdFJhdGlvIiwicmVzb3VyY2VBcmVhV2lkdGgiLCJzbG90RHVyYXRpb24iLCJsb2NhbGUiLCJoZWFkZXIiLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJjdXN0b21CdXR0b25zIiwiYWRkUm9vbSIsInRleHQiLCJkZWZhdWx0VmlldyIsInZpZXdzIiwidGltZWxpbmVUaGlydHlEYXlzIiwidHlwZSIsImxhYmVsVGV4dCIsImR1cmF0aW9uIiwiZGF5cyIsInJlc291cmNlQ29sdW1ucyIsImZpZWxkIiwid2lkdGgiLCJyZXNvdXJjZXMiLCJpZCIsInRpdGxlIiwiY2FwYWNpdHkiLCJyZW5kZXIiLCJlbGVtZW50UHJvcEhhc2giLCJjbGFzc05hbWUiLCJjb2xTcGFuIiwicm93U3BhbiIsImNvbnRhaW5lclRhZ0hhc2giLCJjcmVhdGVFbGVtZW50IiwidGFnTmFtZSIsImF0dHJzIiwiY29udGVudCIsImVsIiwiYXR0ck5hbWUiLCJhcHBseVN0eWxlIiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiYXBwZW5kVG9FbGVtZW50IiwiaHRtbFRvRWxlbWVudCIsImh0bWwiLCJ0cmltIiwiY29udGFpbmVyIiwiY29tcHV0ZUNvbnRhaW5lclRhZyIsImZpcnN0Q2hpbGQiLCJodG1sVG9FbGVtZW50cyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiaHRtbFRvTm9kZUxpc3QiLCJjaGlsZE5vZGVzIiwic3Vic3RyIiwibm9ybWFsaXplQ29udGVudCIsImkiLCJsZW5ndGgiLCJhcHBlbmRDaGlsZCIsInByZXBlbmRUb0VsZW1lbnQiLCJwYXJlbnQiLCJuZXdFbHMiLCJhZnRlckVsIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0QWZ0ZXJFbGVtZW50IiwicmVmRWwiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJlbHMiLCJOb2RlIiwicmVtb3ZlRWxlbWVudCIsInJlbW92ZUNoaWxkIiwibWF0Y2hlc01ldGhvZCIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJjbG9zZXN0TWV0aG9kIiwiY2xvc2VzdCIsInNlbGVjdG9yIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGFpbnMiLCJlbGVtZW50TWF0Y2hlcyIsInBhcmVudEVsZW1lbnQiLCJub2RlVHlwZSIsImVsZW1lbnRDbG9zZXN0IiwiZmluZEVsZW1lbnRzIiwiY29udGFpbmVycyIsIkhUTUxFbGVtZW50IiwiYWxsTWF0Y2hlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJqIiwicHVzaCIsImZpbmRDaGlsZHJlbiIsInBhcmVudHMiLCJjaGlsZHJlbiIsImNoaWxkTm9kZSIsImZvcmNlQ2xhc3NOYW1lIiwiYm9vbCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIlBJWEVMX1BST1BfUkUiLCJwcm9wcyIsInByb3BOYW1lIiwiYXBwbHlTdHlsZVByb3AiLCJuYW1lIiwidmFsIiwic3R5bGUiLCJ0ZXN0IiwicG9pbnRJbnNpZGVSZWN0IiwicG9pbnQiLCJyZWN0IiwidG9wIiwiYm90dG9tIiwiaW50ZXJzZWN0UmVjdHMiLCJyZWN0MSIsInJlY3QyIiwicmVzIiwiTWF0aCIsIm1heCIsIm1pbiIsInRyYW5zbGF0ZVJlY3QiLCJkZWx0YVgiLCJkZWx0YVkiLCJjb25zdHJhaW5Qb2ludCIsImdldFJlY3RDZW50ZXIiLCJkaWZmUG9pbnRzIiwicG9pbnQxIiwicG9pbnQyIiwiaXNSdGxTY3JvbGxiYXJPbkxlZnQiLCJnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCIsImNvbXB1dGVJc1J0bFNjcm9sbGJhck9uTGVmdCIsIm91dGVyRWwiLCJwb3NpdGlvbiIsImJvcmRlciIsInBhZGRpbmciLCJvdmVyZmxvdyIsImRpcmVjdGlvbiIsImJvZHkiLCJpbm5lckVsIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2FuaXRpemVTY3JvbGxiYXJXaWR0aCIsInJvdW5kIiwiY29tcHV0ZUVkZ2VzIiwiZ2V0UGFkZGluZyIsImNvbXB1dGVkU3R5bGUiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiYm9yZGVyTGVmdCIsInBhcnNlSW50IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyVG9wIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsInNjcm9sbGJhckxlZnRSaWdodCIsIm9mZnNldFdpZHRoIiwiY2xpZW50V2lkdGgiLCJzY3JvbGxiYXJCb3R0b20iLCJvZmZzZXRIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxiYXJMZWZ0Iiwic2Nyb2xsYmFyUmlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiY29tcHV0ZUlubmVyUmVjdCIsImdvV2l0aGluUGFkZGluZyIsIm91dGVyUmVjdCIsImNvbXB1dGVSZWN0IiwiZWRnZXMiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiY29tcHV0ZVZpZXdwb3J0UmVjdCIsImNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zIiwiaGVpZ2h0IiwiY29tcHV0ZVZNYXJnaW5zIiwiY29tcHV0ZWQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJnZXRDbGlwcGluZ1BhcmVudHMiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJjb21wdXRlQ2xpcHBpbmdSZWN0IiwibWFwIiwiY29uY2F0IiwicmVkdWNlIiwicmVjdDAiLCJwcmV2ZW50RGVmYXVsdCIsImV2IiwibGlzdGVuQnlTZWxlY3RvciIsImV2ZW50VHlwZSIsImhhbmRsZXIiLCJyZWFsSGFuZGxlciIsIm1hdGNoZWRDaGlsZCIsInRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5Ub0hvdmVyQnlTZWxlY3RvciIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImN1cnJlbnRNYXRjaGVkQ2hpbGQiLCJyZWFsT25Nb3VzZUxlYXZlXzEiLCJ0cmFuc2l0aW9uRXZlbnROYW1lcyIsIndoZW5UcmFuc2l0aW9uRG9uZSIsImNhbGxiYWNrIiwicmVhbENhbGxiYWNrIiwiZm9yRWFjaCIsImV2ZW50TmFtZSIsIkRBWV9JRFMiLCJhZGRXZWVrcyIsIm0iLCJuIiwiYSIsImRhdGVUb1V0Y0FycmF5IiwiYXJyYXlUb1V0Y0RhdGUiLCJhZGREYXlzIiwiYWRkTXMiLCJkaWZmV2Vla3MiLCJtMCIsIm0xIiwiZGlmZkRheXMiLCJ2YWx1ZU9mIiwiZGlmZkhvdXJzIiwiZGlmZk1pbnV0ZXMiLCJkaWZmU2Vjb25kcyIsImRpZmZEYXlBbmRUaW1lIiwibTBkYXkiLCJzdGFydE9mRGF5IiwibTFkYXkiLCJ5ZWFycyIsIm1vbnRocyIsIm1pbGxpc2Vjb25kcyIsImRpZmZXaG9sZVdlZWtzIiwiZCIsImRpZmZXaG9sZURheXMiLCJ0aW1lQXNNcyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwic3RhcnRPZkhvdXIiLCJnZXRVVENIb3VycyIsInN0YXJ0T2ZNaW51dGUiLCJnZXRVVENNaW51dGVzIiwic3RhcnRPZlNlY29uZCIsImdldFVUQ1NlY29uZHMiLCJ3ZWVrT2ZZZWFyIiwibWFya2VyIiwiZG93IiwiZG95IiwieSIsInciLCJ3ZWVrT2ZHaXZlblllYXIiLCJuZXh0VyIsInllYXIiLCJmaXJzdFdlZWtTdGFydCIsImZpcnN0V2Vla09mZnNldCIsImRheVN0YXJ0IiwiZmxvb3IiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRhdGVUb0xvY2FsQXJyYXkiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiYXJyYXlUb0xvY2FsRGF0ZSIsIkRhdGUiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJVVEMiLCJhcHBseSIsImlzVmFsaWREYXRlIiwiaXNOYU4iLCJJTlRFUk5BTF9VTklUUyIsIlBBUlNFX1JFIiwiY3JlYXRlRHVyYXRpb24iLCJpbnB1dCIsInVuaXQiLCJfYSIsInBhcnNlU3RyaW5nIiwibm9ybWFsaXplT2JqZWN0IiwicyIsImV4ZWMiLCJzaWduIiwib2JqIiwibW9udGgiLCJkYXkiLCJnZXRXZWVrc0Zyb21JbnB1dCIsImhvdXJzIiwiaG91ciIsIm1pbnV0ZXMiLCJtaW51dGUiLCJzZWNvbmRzIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJtcyIsIndlZWtzIiwid2VlayIsImR1cmF0aW9uc0VxdWFsIiwiZDAiLCJkMSIsImlzU2luZ2xlRGF5IiwiZHVyIiwiYWRkRHVyYXRpb25zIiwic3VidHJhY3REdXJhdGlvbnMiLCJtdWx0aXBseUR1cmF0aW9uIiwiYXNSb3VnaFllYXJzIiwiYXNSb3VnaERheXMiLCJhc1JvdWdoTW9udGhzIiwiYXNSb3VnaE1zIiwiYXNSb3VnaE1pbnV0ZXMiLCJhc1JvdWdoU2Vjb25kcyIsIndob2xlRGl2aWRlRHVyYXRpb25zIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJsb2NhbFJlcyIsImlzSW50IiwiZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yIiwiZG9udFJldHVybldlZWtzIiwidmFsdWUiLCJjb21wZW5zYXRlU2Nyb2xsIiwicm93RWwiLCJzY3JvbGxiYXJXaWR0aHMiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJ1bmNvbXBlbnNhdGVTY3JvbGwiLCJkaXNhYmxlQ3Vyc29yIiwiZW5hYmxlQ3Vyc29yIiwiZGlzdHJpYnV0ZUhlaWdodCIsImF2YWlsYWJsZUhlaWdodCIsInNob3VsZFJlZGlzdHJpYnV0ZSIsIm1pbk9mZnNldDEiLCJtaW5PZmZzZXQyIiwiZmxleEVscyIsImZsZXhPZmZzZXRzIiwiZmxleEhlaWdodHMiLCJ1c2VkSGVpZ2h0IiwidW5kaXN0cmlidXRlSGVpZ2h0IiwibWluT2Zmc2V0IiwibmF0dXJhbEhlaWdodCIsIm5hdHVyYWxPZmZzZXQiLCJuZXdIZWlnaHQiLCJtYXRjaENlbGxXaWR0aHMiLCJtYXhJbm5lcldpZHRoIiwiaW5uZXJXaWR0aF8xIiwic3VidHJhY3RJbm5lckVsSGVpZ2h0IiwicmVmbG93U3R5bGVQcm9wcyIsImRpZmYiLCJyZXNldFN0eWxlUHJvcHMiLCJwcmV2ZW50U2VsZWN0aW9uIiwiYWxsb3dTZWxlY3Rpb24iLCJwcmV2ZW50Q29udGV4dE1lbnUiLCJhbGxvd0NvbnRleHRNZW51IiwicGFyc2VGaWVsZFNwZWNzIiwic3BlY3MiLCJ0b2tlbnMiLCJ0b2tlbiIsInNwbGl0IiwiaXNBcnJheSIsImNoYXJBdCIsInN1YnN0cmluZyIsIm9yZGVyIiwiZnVuYyIsImNvbXBhcmVCeUZpZWxkU3BlY3MiLCJvYmowIiwib2JqMSIsImZpZWxkU3BlY3MiLCJjbXAiLCJjb21wYXJlQnlGaWVsZFNwZWMiLCJmaWVsZFNwZWMiLCJmbGV4aWJsZUNvbXBhcmUiLCJiIiwiU3RyaW5nIiwibG9jYWxlQ29tcGFyZSIsImNhcGl0YWxpc2VGaXJzdExldHRlciIsInN0ciIsInRvVXBwZXJDYXNlIiwicGFkU3RhcnQiLCJsZW4iLCJjb21wYXJlTnVtYmVycyIsImFwcGx5QWxsIiwiZnVuY3Rpb25zIiwidGhpc09iaiIsImFyZ3MiLCJyZXQiLCJmaXJzdERlZmluZWQiLCJfaSIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImRlYm91bmNlIiwid2FpdCIsInRpbWVvdXQiLCJjb250ZXh0IiwidGltZXN0YW1wIiwicmVzdWx0IiwibGF0ZXIiLCJsYXN0Iiwic2V0VGltZW91dCIsInJlZmluZVByb3BzIiwicmF3UHJvcHMiLCJwcm9jZXNzb3JzIiwiZGVmYXVsdHMiLCJsZWZ0b3ZlclByb3BzIiwicmVmaW5lZCIsImtleSIsInByb2Nlc3NvciIsIkZ1bmN0aW9uIiwiTnVtYmVyIiwiQm9vbGVhbiIsImNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UiLCJ0aW1lZFJhbmdlIiwiZGF5Q250Iiwic3RhcnQiLCJlbmQiLCJjb21wdXRlVmlzaWJsZURheVJhbmdlIiwibmV4dERheVRocmVzaG9sZCIsInN0YXJ0RGF5IiwiZW5kRGF5IiwiZW5kVGltZU1TIiwiaXNNdWx0aURheVJhbmdlIiwicmFuZ2UiLCJ2aXNpYmxlUmFuZ2UiLCJkaWZmRGF0ZXMiLCJkYXRlMCIsImRhdGUxIiwiZGF0ZUVudiIsImxhcmdlVW5pdCIsImRpZmZXaG9sZVllYXJzIiwiZGlmZldob2xlTW9udGhzIiwiZXh0ZW5kU3RhdGljcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicCIsImhhc093blByb3BlcnR5IiwiX19leHRlbmRzIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJwYXJzZVJlY3VycmluZyIsImV2ZW50SW5wdXQiLCJhbGxEYXlEZWZhdWx0IiwicmVjdXJyaW5nVHlwZXMiLCJsZWZ0b3ZlcnMiLCJsb2NhbExlZnRvdmVycyIsInBhcnNlZCIsInBhcnNlIiwiYWxsRGF5IiwiYWxsRGF5R3Vlc3MiLCJ0eXBlRGF0YSIsInR5cGVJZCIsImV4cGFuZFJlY3VycmluZ1JhbmdlcyIsImV2ZW50RGVmIiwiZnJhbWluZ1JhbmdlIiwidHlwZURlZiIsInJlY3VycmluZ0RlZiIsIm1hcmtlcnMiLCJleHBhbmQiLCJzdWJ0cmFjdCIsIm1lcmdlUHJvcHMiLCJwcm9wT2JqcyIsImNvbXBsZXhQcm9wcyIsImRlc3QiLCJjb21wbGV4T2JqcyIsInVuc2hpZnQiLCJmaWx0ZXJIYXNoIiwiaGFzaCIsImZpbHRlcmVkIiwibWFwSGFzaCIsIm5ld0hhc2giLCJhcnJheVRvSGFzaCIsImFfMSIsIml0ZW0iLCJoYXNoVmFsdWVzVG9BcnJheSIsImlzUHJvcHNFcXVhbCIsInBhcnNlRXZlbnRzIiwicmF3RXZlbnRzIiwic291cmNlSWQiLCJhbGxvd09wZW5SYW5nZSIsImV2ZW50U3RvcmUiLCJjcmVhdGVFbXB0eUV2ZW50U3RvcmUiLCJyYXdFdmVudHNfMSIsInJhd0V2ZW50IiwidHVwbGUiLCJwYXJzZUV2ZW50IiwiZXZlbnRUdXBsZVRvU3RvcmUiLCJkZWZzIiwiZGVmIiwiZGVmSWQiLCJpbnN0YW5jZSIsImluc3RhbmNlcyIsImluc3RhbmNlSWQiLCJleHBhbmRSZWN1cnJpbmciLCJkZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiIsImRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb24iLCJzdGFydHMiLCJwbHVnaW5TeXN0ZW0iLCJob29rcyIsInN0YXJ0c18xIiwiY3JlYXRlRXZlbnRJbnN0YW5jZSIsImdldFJlbGV2YW50RXZlbnRzIiwiZGVmXzEiLCJuZXdTdG9yZSIsImZpbHRlckV2ZW50U3RvcmVEZWZzIiwibG9va0RlZiIsImlzRXZlbnREZWZzR3JvdXBlZCIsImRlZjAiLCJkZWYxIiwiZ3JvdXBJZCIsInRyYW5zZm9ybVJhd0V2ZW50cyIsImV2ZW50U291cmNlIiwiY2FsRWFjaFRyYW5zZm9ybSIsIm9wdCIsInNvdXJjZUVhY2hUcmFuc2Zvcm0iLCJldmVudERhdGFUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1FYWNoUmF3RXZlbnQiLCJyZWZpbmVkRXZlbnRzIiwicmF3RXZlbnRzXzIiLCJyZWZpbmVkRXZlbnQiLCJtZXJnZUV2ZW50U3RvcmVzIiwic3RvcmUwIiwic3RvcmUxIiwiZmlsdGVyRnVuYyIsInBhcnNlUmFuZ2UiLCJjcmVhdGVNYXJrZXIiLCJpbnZlcnRSYW5nZXMiLCJyYW5nZXMiLCJjb25zdHJhaW50UmFuZ2UiLCJpbnZlcnRlZFJhbmdlcyIsImRhdGVSYW5nZSIsInNvcnQiLCJjb21wYXJlUmFuZ2VzIiwicmFuZ2UwIiwicmFuZ2UxIiwiaW50ZXJzZWN0UmFuZ2VzIiwibmV3UmFuZ2UiLCJyYW5nZXNFcXVhbCIsInJhbmdlc0ludGVyc2VjdCIsInJhbmdlQ29udGFpbnNSYW5nZSIsIm91dGVyUmFuZ2UiLCJpbm5lclJhbmdlIiwicmFuZ2VDb250YWluc01hcmtlciIsImNvbnN0cmFpbk1hcmtlclRvUmFuZ2UiLCJyZW1vdmVFeGFjdCIsImFycmF5IiwiZXhhY3RWYWwiLCJyZW1vdmVDbnQiLCJzcGxpY2UiLCJpc0FycmF5c0VxdWFsIiwiYTAiLCJhMSIsIm1lbW9pemUiLCJ3b3JrZXJGdW5jIiwibWVtb2l6ZU91dHB1dCIsImVxdWFsaXR5RnVuYyIsImNhY2hlZFJlcyIsIm5ld1JlcyIsIkVYVEVOREVEX1NFVFRJTkdTX0FORF9TRVZFUklUSUVTIiwic2VwYXJhdG9yIiwib21pdFplcm9NaW51dGUiLCJtZXJpZGllbSIsIm9taXRDb21tYXMiLCJTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFUyIsInRpbWVab25lTmFtZSIsImVyYSIsIndlZWtkYXkiLCJNRVJJRElFTV9SRSIsIkNPTU1BX1JFIiwiTVVMVElfU1BBQ0VfUkUiLCJMVFJfUkUiLCJVVENfUkUiLCJOYXRpdmVGb3JtYXR0ZXIiLCJmb3JtYXRTZXR0aW5ncyIsInN0YW5kYXJkRGF0ZVByb3BzIiwiZXh0ZW5kZWRTZXR0aW5ncyIsInNldmVyaXR5IiwibmFtZV8xIiwiYnVpbGRGb3JtYXR0aW5nRnVuYyIsImZvcm1hdCIsImZvcm1hdFJhbmdlIiwiZGlmZlNldmVyaXR5IiwiY29tcHV0ZU1hcmtlckRpZmZTZXZlcml0eSIsImNhbGVuZGFyU3lzdGVtIiwiYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsIiwiZnVsbDAiLCJmdWxsMSIsInBhcnRpYWxEYXRlUHJvcHMiLCJjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zIiwicGFydGlhbEZvcm1hdHRpbmdGdW5jIiwicGFydGlhbDAiLCJwYXJ0aWFsMSIsImluc2VydGlvbiIsImZpbmRDb21tb25JbnNlcnRpb24iLCJiZWZvcmUiLCJhZnRlciIsImdldExhcmdlc3RVbml0Iiwic3RhbmRhcmREYXRlUHJvcENudCIsImtleXMiLCJmb3JtYXRUaW1lWm9uZU9mZnNldCIsInRpbWVab25lT2Zmc2V0IiwiZm9ybWF0V2Vla051bWJlciIsImNvbXB1dGVXZWVrTnVtYmVyIiwid2Vla0xhYmVsIiwiYnVpbGROYXRpdmVGb3JtYXR0aW5nRnVuYyIsInNhbml0aXplU2V0dGluZ3MiLCJ0aW1lWm9uZSIsIm5vcm1hbEZvcm1hdCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImNvZGVzIiwiemVyb0Zvcm1hdCIsInplcm9Qcm9wcyIsInBvc3RQcm9jZXNzIiwicmVwbGFjZSIsImluamVjdFR6b1N0ciIsInRvTG9jYWxlTG93ZXJDYXNlIiwidHpvU3RyIiwicmVwbGFjZWQiLCJudW0iLCJkaXNwbGF5IiwicGFydHMiLCJzaW1wbGVOdW1iZXJGb3JtYXQiLCJvcHRpb25zIiwiaXNSdGwiLCJyZXZlcnNlIiwiam9pbiIsImNhIiwiZ2V0TWFya2VyWWVhciIsImdldE1hcmtlck1vbnRoIiwiZ2V0TWFya2VyRGF5IiwiYmlnZ2VzdFVuaXQiLCJwYXJ0aWFsT3B0aW9ucyIsIm5hbWVfMiIsImkwIiwiZm91bmQwIiwiaW5kZXhPZiIsImJlZm9yZTAiLCJhZnRlcjAiLCJpMSIsImZvdW5kMSIsImJlZm9yZTEiLCJhZnRlcjEiLCJDbWRGb3JtYXR0ZXIiLCJjbWRTdHIiLCJjbWRGb3JtYXR0ZXIiLCJjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyIsIkZ1bmNGb3JtYXR0ZXIiLCJjcmVhdGVGb3JtYXR0ZXIiLCJkZWZhdWx0U2VwYXJhdG9yIiwiYnVpbGRJc29TdHJpbmciLCJzdHJpcFplcm9UaW1lIiwidG9JU09TdHJpbmciLCJmb3JtYXRJc29UaW1lU3RyaW5nIiwiZG9Jc28iLCJhYnMiLCJtaW5zIiwic3RhcnRJbmZvIiwiZXhwYW5kWm9uZWRNYXJrZXIiLCJlbmRJbmZvIiwibG9jYWxlQ29kZXMiLCJkYXRlSW5mbyIsIm1hcmtlclRvQXJyYXkiLCJFdmVudFNvdXJjZUFwaSIsImludGVybmFsRXZlbnRTb3VyY2UiLCJkaXNwYXRjaCIsInJlZmV0Y2giLCJzb3VyY2VJZHMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInB1YmxpY0lkIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1ldGEiLCJ1cmwiLCJFdmVudEFwaSIsIl9jYWxlbmRhciIsIl9kZWYiLCJfaW5zdGFuY2UiLCJzZXRQcm9wIiwiX2IiLCJEQVRFX1BST1BTIiwiTk9OX0RBVEVfUFJPUFMiLCJtdXRhdGUiLCJzdGFuZGFyZFByb3BzIiwiVU5TQ09QRURfRVZFTlRfVUlfUFJPUFMiLCJ1aSIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwic3RhcnRFZGl0YWJsZSIsImR1cmF0aW9uRWRpdGFibGUiLCJzZXRFeHRlbmRlZFByb3AiLCJleHRlbmRlZFByb3BzIiwic2V0U3RhcnQiLCJzdGFydElucHV0IiwiaW5zdGFuY2VSYW5nZSIsInN0YXJ0RGVsdGEiLCJncmFudWxhcml0eSIsIm1haW50YWluRHVyYXRpb24iLCJkYXRlc0RlbHRhIiwic2V0RW5kIiwiZW5kSW5wdXQiLCJlbmREZWx0YSIsImhhc0VuZCIsInNldERhdGVzIiwibW92ZVN0YXJ0IiwiZGVsdGFJbnB1dCIsImRlbHRhIiwibW92ZUVuZCIsIm1vdmVEYXRlcyIsInNldEFsbERheSIsImZvcm1hdElucHV0IiwiZm9ybWF0dGVyIiwiZm9yY2VkU3RhcnRUem8iLCJmb3JjZWRFbmRUem8iLCJmb3JjZWRUem8iLCJtdXRhdGlvbiIsImZyb21BcGkiLCJzdGF0ZSIsImV2ZW50U291cmNlcyIsInRvRGF0ZSIsInJlbmRlcmluZyIsImNvbnN0cmFpbnRzIiwib3ZlcmxhcCIsImFsbG93cyIsInRleHRDb2xvciIsImNsYXNzTmFtZXMiLCJzbGljZUV2ZW50U3RvcmUiLCJldmVudFVpQmFzZXMiLCJpbnZlcnNlQmdCeUdyb3VwSWQiLCJpbnZlcnNlQmdCeURlZklkIiwiZGVmQnlHcm91cElkIiwiYmdSYW5nZXMiLCJmZ1JhbmdlcyIsImV2ZW50VWlzIiwiY29tcGlsZUV2ZW50VWlzIiwib3JpZ1JhbmdlIiwibm9ybWFsUmFuZ2UiLCJzbGljZWRSYW5nZSIsImlzU3RhcnQiLCJpc0VuZCIsImludmVydGVkUmFuZ2VzXzEiLCJpbnZlcnRlZFJhbmdlIiwiaW52ZXJ0ZWRSYW5nZXNfMiIsImJnIiwiZmciLCJoYXNCZ1JlbmRlcmluZyIsImZpbHRlclNlZ3NWaWFFbHMiLCJ2aWV3Iiwic2VncyIsImlzTWlycm9yIiwiaGFzUHVibGljSGFuZGxlcnMiLCJmaWx0ZXIiLCJzZWciLCJjdXN0b20iLCJwdWJsaWNseVRyaWdnZXIiLCJldmVudCIsImV2ZW50UmFuZ2UiLCJzZWdzXzEiLCJzZXRFbFNlZyIsImZjU2VnIiwiZ2V0RWxTZWciLCJldmVudERlZnMiLCJjb21waWxlRXZlbnRVaSIsInVpcyIsImNvbWJpbmVFdmVudFVpcyIsImFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUiLCJldmVudENvbmZpZ0Jhc2UiLCJldmVudENvbmZpZ3MiLCJhcHBseU11dGF0aW9uVG9FdmVudERlZiIsImV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyIsImFwcGx5TXV0YXRpb25Ub0V2ZW50SW5zdGFuY2UiLCJldmVudENvbmZpZyIsImFwcGxpZXJzIiwiY29weSIsImFwcGxpZXJzXzEiLCJhcHBsaWVyIiwiZXZlbnRJbnN0YW5jZSIsImZvcmNlQWxsRGF5IiwiY2xlYXJFbmQiLCJnZXREZWZhdWx0RXZlbnRFbmQiLCJyZWR1Y2VFdmVudFN0b3JlIiwiYWN0aW9uIiwiZGF0ZVByb2ZpbGUiLCJyZWNlaXZlUmF3RXZlbnRzIiwiZmV0Y2hJZCIsImZldGNoUmFuZ2UiLCJhZGRFdmVudCIsImFjdGl2ZVJhbmdlIiwicmV6b25lRGF0ZXMiLCJvbGREYXRlRW52IiwiYXBwbHlNdXRhdGlvblRvUmVsYXRlZCIsImV4Y2x1ZGVJbnN0YW5jZXMiLCJleGNsdWRlRXZlbnRzQnlTb3VyY2VJZCIsImxhdGVzdEZldGNoSWQiLCJzdWJzZXQiLCJleHBhbmRSYW5nZSIsIm5ld0RhdGVFbnYiLCJjYW5Db21wdXRlT2Zmc2V0IiwicmVsZXZhbnQiLCJyZW1vdmFscyIsImlzSW50ZXJhY3Rpb25WYWxpZCIsImludGVyYWN0aW9uIiwiaXNOZXdQcm9wc1ZhbGlkIiwiZXZlbnREcmFnIiwiaXNEYXRlU2VsZWN0aW9uVmFsaWQiLCJkYXRlU2VsZWN0aW9uIiwibmV3UHJvcHMiLCJidXNpbmVzc0hvdXJzIiwiZXZlbnRTZWxlY3Rpb24iLCJldmVudFJlc2l6ZSIsImlzUHJvcHNWYWxpZCIsImRhdGVTcGFuTWV0YSIsImZpbHRlckNvbmZpZyIsImlzSW50ZXJhY3Rpb25Qcm9wc1ZhbGlkIiwiaXNEYXRlU2VsZWN0aW9uUHJvcHNWYWxpZCIsInN1YmplY3RFdmVudFN0b3JlIiwibXV0YXRlZEV2ZW50cyIsInN1YmplY3REZWZzIiwic3ViamVjdEluc3RhbmNlcyIsInN1YmplY3RDb25maWdzIiwiaXNFdmVudCIsInNlbGVjdGlvbkNvbmZpZyIsIm90aGVyRXZlbnRTdG9yZSIsImFmZmVjdGVkRXZlbnRzIiwib3RoZXJEZWZzIiwib3RoZXJJbnN0YW5jZXMiLCJvdGhlckNvbmZpZ3MiLCJzdWJqZWN0SW5zdGFuY2VJZCIsInN1YmplY3RJbnN0YW5jZSIsInN1YmplY3RSYW5nZSIsInN1YmplY3RDb25maWciLCJzdWJqZWN0RGVmIiwiYWxsQ29uc3RyYWludHNQYXNzIiwib3ZlcmxhcEZ1bmMiLCJvdGhlckluc3RhbmNlSWQiLCJvdGhlckluc3RhbmNlIiwib3RoZXJPdmVybGFwIiwiY2FsZW5kYXJFdmVudFN0b3JlIiwic3ViamVjdEFsbG93Iiwic3ViamVjdERhdGVTcGFuIiwib3JpZ0RlZiIsIm9yaWdJbnN0YW5jZSIsImV2ZW50QXBpIiwiYnVpbGREYXRlU3BhbkFwaSIsInJlbGV2YW50RXZlbnRTdG9yZSIsInJlbGV2YW50RGVmcyIsInJlbGV2YW50SW5zdGFuY2VzIiwic2VsZWN0aW9uIiwic2VsZWN0aW9uUmFuZ2UiLCJyZWxldmFudEluc3RhbmNlSWQiLCJyZWxldmFudEluc3RhbmNlIiwic2VsZWN0aW9uQWxsb3ciLCJmdWxsRGF0ZVNwYW4iLCJidXNpbmVzc0hvdXJzVW5leHBhbmRlZCIsImNvbnN0cmFpbnRzXzEiLCJjb25zdHJhaW50IiwiYW55UmFuZ2VzQ29udGFpblJhbmdlIiwiY29uc3RyYWludFRvUmFuZ2VzIiwiZXZlbnRTdG9yZVRvUmFuZ2VzIiwib3V0ZXJSYW5nZXMiLCJvdXRlclJhbmdlc18xIiwibm9ybWFsaXplQ29uc3RyYWludCIsImh0bWxFc2NhcGUiLCJjc3NUb1N0ciIsImNzc1Byb3BzIiwic3RhdGVtZW50cyIsImF0dHJzVG9TdHIiLCJwYXJzZUNsYXNzTmFtZSIsInJhdyIsImVkaXRhYmxlIiwiYWxsb3ciLCJjb2xvciIsInByb2Nlc3NVbnNjb3BlZFVpUHJvcHMiLCJwcm9jZXNzU2NvcGVkVWlQcm9wcyIsInByZWZpeCIsInJhd1Njb3BlZCIsInJhd1Vuc2NvcGVkIiwid2FzRm91bmQiLCJzY29wZWRLZXkiLCJFTVBUWV9FVkVOVF9VSSIsImNvbWJpbmVUd29FdmVudFVpcyIsIml0ZW0wIiwiaXRlbTEiLCJ1aWQiLCJjb21wdXRlSXNBbGxEYXlEZWZhdWx0IiwibGVmdG92ZXJzMCIsInJlY3VycmluZ1JlcyIsInBhcnNlRXZlbnREZWYiLCJsZWZ0b3ZlcnMxIiwic2luZ2xlUmVzIiwicGFyc2VTaW5nbGUiLCJwbHVja05vbkRhdGVQcm9wcyIsImV2ZW50RGVmUGFyc2VycyIsImV2ZW50RGVmUGFyc2VyIiwibmV3TGVmdG92ZXJzIiwiZnJlZXplIiwicGx1Y2tEYXRlUHJvcHMiLCJzdGFydE1ldGEiLCJzdGFydE1hcmtlciIsImVuZE1ldGEiLCJlbmRNYXJrZXIiLCJjcmVhdGVNYXJrZXJNZXRhIiwiaXNUaW1lVW5zcGVjaWZpZWQiLCJwcmVMZWZ0b3ZlcnMiLCJzb3VyY2UiLCJERUZfREVGQVVMVFMiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZGF5c09mV2VlayIsInBhcnNlQnVzaW5lc3NIb3VycyIsInJlZmluZUlucHV0cyIsInJhd0RlZnMiLCJyYXdEZWYiLCJtZW1vaXplUmVuZGVyaW5nIiwicmVuZGVyRnVuYyIsInVucmVuZGVyRnVuYyIsImRlcGVuZGVuY2llcyIsImRlcGVuZGVudHMiLCJ0aGlzQ29udGV4dCIsInByZXZBcmdzIiwidW5yZW5kZXIiLCJkZXBlbmRlbnRzXzEiLCJkZXBlbmRlbnQiLCJkZXBlbmRlbmNpZXNfMSIsImRlcGVuZGVuY3kiLCJFTVBUWV9FVkVOVF9TVE9SRSIsIlNwbGl0dGVyIiwiZ2V0S2V5c0ZvckV2ZW50RGVmcyIsIl9nZXRLZXlzRm9yRXZlbnREZWZzIiwic3BsaXREYXRlU2VsZWN0aW9uIiwiX3NwbGl0RGF0ZVNwYW4iLCJzcGxpdEV2ZW50U3RvcmUiLCJfc3BsaXRFdmVudFN0b3JlIiwic3BsaXRJbmRpdmlkdWFsVWkiLCJfc3BsaXRJbmRpdmlkdWFsVWkiLCJzcGxpdEV2ZW50RHJhZyIsIl9zcGxpdEludGVyYWN0aW9uIiwic3BsaXRFdmVudFJlc2l6ZSIsImV2ZW50VWlCdWlsZGVycyIsInNwbGl0UHJvcHMiLCJfdGhpcyIsImtleUluZm9zIiwiZ2V0S2V5SW5mbyIsImRlZktleXMiLCJkYXRlU2VsZWN0aW9ucyIsImluZGl2aWR1YWxVaSIsImV2ZW50U3RvcmVzIiwiZXZlbnREcmFncyIsImV2ZW50UmVzaXplcyIsImluZm8iLCJidWlsZEV2ZW50VWlGb3JLZXkiLCJrZXlJbmZvIiwiYnVpbGRFdmVudFVpIiwiZGF0ZVNwYW4iLCJkYXRlU3BhbnMiLCJnZXRLZXlzRm9yRGF0ZVNwYW4iLCJrZXlzXzEiLCJnZXRLZXlzRm9yRXZlbnREZWYiLCJzcGxpdFN0b3JlcyIsIl9jIiwic3BsaXRIYXNoZXMiLCJzcGxpdFN0YXRlcyIsImFmZmVjdGVkU3RvcmVzXzEiLCJtdXRhdGVkS2V5c0J5RGVmSWQiLCJtdXRhdGVkU3RvcmVzXzEiLCJwb3B1bGF0ZSIsIm9yaWdTZWciLCJhbGxVaSIsImV2ZW50VWlGb3JLZXkiLCJiYXNlUGFydHMiLCJzdHVmZiIsImJ1aWxkR290b0FuY2hvckh0bWwiLCJjb21wb25lbnQiLCJnb3RvT3B0aW9ucyIsImlubmVySHRtbCIsImZvcmNlT2ZmIiwiZmluYWxPcHRpb25zIiwiZm9ybWF0SXNvIiwib21pdFRpbWUiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QWxsRGF5SHRtbCIsImdldERheUNsYXNzZXMiLCJub1RoZW1lSGlnaGxpZ2h0IiwidGhlbWUiLCJjbGFzc2VzIiwidG9kYXlTdGFydCIsInRvZGF5RW5kIiwiY3VycmVudFJhbmdlIiwiZ2V0Tm93IiwiZ2V0Q2xhc3MiLCJ1bnByb21pc2lmeSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiaXNSZXNvbHZlZCIsIndyYXBwZWRTdWNjZXNzIiwid3JhcHBlZEZhaWx1cmUiLCJ0aGVuIiwiTWl4aW4iLCJtaXhJbnRvIiwiZGVzdENsYXNzIiwibWl4SW50b09iaiIsImRlc3RPYmoiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibWl4T3ZlciIsIkVtaXR0ZXJNaXhpbiIsIl9zdXBlciIsIm9uIiwiYWRkVG9IYXNoIiwiX2hhbmRsZXJzIiwib25lIiwiX29uZUhhbmRsZXJzIiwib2ZmIiwicmVtb3ZlRnJvbUhhc2giLCJ0cmlnZ2VyIiwidHJpZ2dlcldpdGgiLCJoYXNIYW5kbGVycyIsIlBvc2l0aW9uQ2FjaGUiLCJvcmlnaW5FbCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJidWlsZCIsIm9yaWdpbkNsaWVudFJlY3QiLCJidWlsZEVsSG9yaXpvbnRhbHMiLCJidWlsZEVsVmVydGljYWxzIiwib3JpZ2luQ2xpZW50TGVmdCIsImxlZnRzIiwicmlnaHRzIiwib3JpZ2luQ2xpZW50VG9wIiwidG9wcyIsImJvdHRvbXMiLCJsZWZ0VG9JbmRleCIsImxlZnRQb3NpdGlvbiIsInRvcFRvSW5kZXgiLCJ0b3BQb3NpdGlvbiIsImdldFdpZHRoIiwibGVmdEluZGV4IiwiZ2V0SGVpZ2h0IiwidG9wSW5kZXgiLCJTY3JvbGxDb250cm9sbGVyIiwiZ2V0TWF4U2Nyb2xsVG9wIiwiZ2V0U2Nyb2xsSGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiZ2V0TWF4U2Nyb2xsTGVmdCIsImdldFNjcm9sbFdpZHRoIiwiZ2V0Q2xpZW50V2lkdGgiLCJjYW5TY3JvbGxWZXJ0aWNhbGx5IiwiY2FuU2Nyb2xsSG9yaXpvbnRhbGx5IiwiY2FuU2Nyb2xsVXAiLCJnZXRTY3JvbGxUb3AiLCJjYW5TY3JvbGxEb3duIiwiY2FuU2Nyb2xsTGVmdCIsImdldFNjcm9sbExlZnQiLCJjYW5TY3JvbGxSaWdodCIsIkVsZW1lbnRTY3JvbGxDb250cm9sbGVyIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNldFNjcm9sbFRvcCIsInNldFNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsIldpbmRvd1Njcm9sbENvbnRyb2xsZXIiLCJzY3JvbGwiLCJTY3JvbGxDb21wb25lbnQiLCJhcHBseU92ZXJmbG93IiwiY2xlYXIiLCJzZXRIZWlnaHQiLCJkZXN0cm95IiwibG9ja092ZXJmbG93IiwiZ2V0U2Nyb2xsYmFyV2lkdGhzIiwiVGhlbWUiLCJjYWxlbmRhck9wdGlvbnMiLCJwcm9jZXNzSWNvbk92ZXJyaWRlIiwiaWNvbk92ZXJyaWRlT3B0aW9uIiwic2V0SWNvbk92ZXJyaWRlIiwiaWNvbk92ZXJyaWRlSGFzaCIsImljb25DbGFzc2VzQ29weSIsImJ1dHRvbk5hbWUiLCJpY29uQ2xhc3NlcyIsImFwcGx5SWNvbk92ZXJyaWRlUHJlZml4IiwiaWNvbk92ZXJyaWRlUHJlZml4IiwiZ2V0SWNvbkNsYXNzIiwiYmFzZUljb25DbGFzcyIsImdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyIsImN1c3RvbUJ1dHRvblByb3BzIiwiaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uIiwiZ3VpZCIsIkNvbXBvbmVudCIsImlzVmlldyIsImFkZEVxdWFsaXR5RnVuY3MiLCJuZXdGdW5jcyIsImVxdWFsaXR5RnVuY3MiLCJyZWNlaXZlUHJvcHMiLCJyZWN5Y2xlUHJvcHMiLCJhbnlDaGFuZ2VzIiwiY29tYm9Qcm9wcyIsIm9sZFByb3BzIiwiRGF0ZUNvbXBvbmVudCIsImJ1aWxkUG9zaXRpb25DYWNoZXMiLCJxdWVyeUhpdCIsInBvc2l0aW9uTGVmdCIsInBvc2l0aW9uVG9wIiwiZWxXaWR0aCIsImVsSGVpZ2h0IiwidmFsaWRSYW5nZSIsInB1YmxpY2x5VHJpZ2dlckFmdGVyU2l6aW5nIiwidHJpZ2dlclJlbmRlcmVkU2VncyIsImlzTWlycm9ycyIsImxvYWRpbmdMZXZlbCIsImFmdGVyU2l6aW5nVHJpZ2dlcnMiLCJfZXZlbnRzUG9zaXRpb25lZCIsInRyaWdnZXJXaWxsUmVtb3ZlU2VncyIsInNlZ3NfMiIsInNlZ3NfMyIsImlzVmFsaWRTZWdEb3duRWwiLCJpc1BvcG92ZXIiLCJpc0luUG9wb3ZlciIsImlzVmFsaWREYXRlRG93bkVsIiwic2VnRWwiLCJmZ1NlZ1NlbGVjdG9yIiwiYmdTZWdTZWxlY3RvciIsInVpZCQxIiwiY3JlYXRlUGx1Z2luIiwiZGVwcyIsInJlZHVjZXJzIiwiaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMiLCJldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VycyIsImRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnMiLCJkYXRlUG9pbnRUcmFuc2Zvcm1zIiwiZGF0ZVNwYW5UcmFuc2Zvcm1zIiwidmlld1Byb3BzVHJhbnNmb3JtZXJzIiwiZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zIiwiZXZlbnRSZXNpemVKb2luVHJhbnNmb3JtcyIsInZpZXdDb250YWluZXJNb2RpZmllcnMiLCJldmVudERyb3BUcmFuc2Zvcm1lcnMiLCJjb21wb25lbnRJbnRlcmFjdGlvbnMiLCJjYWxlbmRhckludGVyYWN0aW9ucyIsInRoZW1lQ2xhc3NlcyIsImV2ZW50U291cmNlRGVmcyIsIm5hbWVkVGltZVpvbmVkSW1wbCIsImVsZW1lbnREcmFnZ2luZ0ltcGwiLCJvcHRpb25DaGFuZ2VIYW5kbGVycyIsIlBsdWdpblN5c3RlbSIsImFkZGVkSGFzaCIsInBsdWdpbiIsImRlcCIsImNvbWJpbmVIb29rcyIsImhvb2tzMCIsImhvb2tzMSIsImV2ZW50U291cmNlRGVmIiwiaWdub3JlUmFuZ2UiLCJwYXJzZU1ldGEiLCJldmVudHMiLCJmZXRjaCIsImFyZyIsIkFycmF5RXZlbnRTb3VyY2VQbHVnaW4iLCJldmVudFNvdXJjZURlZiQxIiwiYmluZCIsInN0YXJ0U3RyIiwiZW5kU3RyIiwiRnVuY0V2ZW50U291cmNlUGx1Z2luIiwicmVxdWVzdEpzb24iLCJtZXRob2QiLCJwYXJhbXMiLCJzdWNjZXNzQ2FsbGJhY2siLCJmYWlsdXJlQ2FsbGJhY2siLCJpbmplY3RRdWVyeVN0cmluZ1BhcmFtcyIsImVuY29kZVBhcmFtcyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJlcnIiLCJvbmVycm9yIiwic2VuZCIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2ZW50U291cmNlRGVmJDIiLCJleHRyYVBhcmFtcyIsInN0YXJ0UGFyYW0iLCJlbmRQYXJhbSIsInRpbWVab25lUGFyYW0iLCJyZXF1ZXN0UGFyYW1zIiwiYnVpbGRSZXF1ZXN0UGFyYW1zIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIkpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4iLCJjdXN0b21SZXF1ZXN0UGFyYW1zIiwicmVjdXJyaW5nIiwic3RhcnRSZWN1ciIsImVuZFJlY3VyIiwiYW55VmFsaWQiLCJjbGlwcGVkRnJhbWluZ1JhbmdlIiwiZXhwYW5kUmFuZ2VzIiwiU2ltcGxlUmVjdXJyZW5jZVBsdWdpbiIsImRvd0hhc2giLCJkYXlNYXJrZXIiLCJpbnN0YW5jZVN0YXJ0cyIsImluc3RhbmNlU3RhcnQiLCJEZWZhdWx0T3B0aW9uQ2hhbmdlSGFuZGxlcnMiLCJkZWVwRXF1YWwiLCJoYW5kbGVFdmVudFNvdXJjZXMiLCJoYW5kbGVQbHVnaW5zIiwiaW5wdXRzIiwidW5mb3VuZFNvdXJjZXMiLCJuZXdJbnB1dHMiLCJpbnB1dHNfMSIsImlucHV0Rm91bmQiLCJfcmF3IiwidW5mb3VuZFNvdXJjZXNfMSIsInVuZm91bmRTb3VyY2UiLCJuZXdJbnB1dHNfMSIsIm5ld0lucHV0IiwiYWRkRXZlbnRTb3VyY2UiLCJhZGRQbHVnaW5JbnB1dHMiLCJjb25maWciLCJnbG9iYWxEZWZhdWx0cyIsImRlZmF1bHRSYW5nZVNlcGFyYXRvciIsInRpdGxlUmFuZ2VTZXBhcmF0b3IiLCJmb3JjZUV2ZW50RHVyYXRpb24iLCJjb2x1bW5IZWFkZXIiLCJ3ZWVrZW5kcyIsIndlZWtOdW1iZXJzIiwid2Vla051bWJlckNhbGN1bGF0aW9uIiwic2Nyb2xsVGltZSIsIm1pblRpbWUiLCJtYXhUaW1lIiwic2hvd05vbkN1cnJlbnREYXRlcyIsImxhenlGZXRjaGluZyIsImxvY2FsZXMiLCJ0aW1lR3JpZEV2ZW50TWluSGVpZ2h0IiwidGhlbWVTeXN0ZW0iLCJkcmFnUmV2ZXJ0RHVyYXRpb24iLCJkcmFnU2Nyb2xsIiwiYWxsRGF5TWFpbnRhaW5EdXJhdGlvbiIsInVuc2VsZWN0QXV0byIsImRyb3BBY2NlcHQiLCJldmVudE9yZGVyIiwiZXZlbnRMaW1pdCIsImV2ZW50TGltaXRDbGljayIsImRheVBvcG92ZXJGb3JtYXQiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJ3aW5kb3dSZXNpemVEZWxheSIsImxvbmdQcmVzc0RlbGF5IiwiZXZlbnREcmFnTWluRGlzdGFuY2UiLCJydGxEZWZhdWx0cyIsImJ1dHRvbkljb25zIiwicHJldiIsIm5leHQiLCJwcmV2WWVhciIsIm5leHRZZWFyIiwiY29tcGxleE9wdGlvbnMiLCJtZXJnZU9wdGlvbnMiLCJvcHRpb25PYmpzIiwiSU5URVJOQUxfUExVR0lOUyIsInJlZmluZVBsdWdpbkRlZnMiLCJwbHVnaW5JbnB1dHMiLCJwbHVnaW5JbnB1dHNfMSIsInBsdWdpbklucHV0IiwiZ2xvYmFsTmFtZSIsIndhcm4iLCJkZWZhdWx0IiwiUkFXX0VOX0xPQ0FMRSIsImNvZGUiLCJkaXIiLCJidXR0b25UZXh0IiwidG9kYXkiLCJsaXN0IiwiYWxsRGF5VGV4dCIsImV2ZW50TGltaXRUZXh0Iiwibm9FdmVudHNNZXNzYWdlIiwicGFyc2VSYXdMb2NhbGVzIiwiZXhwbGljaXRSYXdMb2NhbGVzIiwiZGVmYXVsdENvZGUiLCJnbG9iYWxBcnJheSIsImdsb2JhbE9iamVjdCIsImFsbFJhd0xvY2FsZXMiLCJyYXdMb2NhbGVNYXAiLCJlbiIsImFsbFJhd0xvY2FsZXNfMSIsInJhd0xvY2FsZSIsImJ1aWxkTG9jYWxlIiwiaW5wdXRTaW5ndWxhciIsImF2YWlsYWJsZSIsInBhcnNlTG9jYWxlIiwicXVlcnlMb2NhbGUiLCJjb2RlQXJnIiwicXVlcnlSYXdMb2NhbGUiLCJzaW1wbGVJZCIsIm1lcmdlZCIsIk51bWJlckZvcm1hdCIsIk9wdGlvbnNNYW5hZ2VyIiwib3ZlcnJpZGVzIiwiZHluYW1pY092ZXJyaWRlcyIsImNvbXB1dGUiLCJ1cGRhdGVzIiwiaXNEeW5hbWljIiwib3ZlcnJpZGVIYXNoIiwicmVtb3ZhbHNfMSIsImxvY2FsZURlZmF1bHRzIiwiZGlyRGVmYXVsdHMiLCJjYWxlbmRhclN5c3RlbUNsYXNzTWFwIiwicmVnaXN0ZXJDYWxlbmRhclN5c3RlbSIsInRoZUNsYXNzIiwiY3JlYXRlQ2FsZW5kYXJTeXN0ZW0iLCJHcmVnb3JpYW5DYWxlbmRhclN5c3RlbSIsImFycmF5VG9NYXJrZXIiLCJhcnIiLCJJU09fUkUiLCJEYXRlRW52Iiwic2V0dGluZ3MiLCJpc05hbWVkVGltZVpvbmUiLCJuYW1lZFRpbWVab25lSW1wbCIsIndlZWtEb3ciLCJ3ZWVrRG95IiwiZmlyc3REYXkiLCJ3ZWVrTnVtYmVyRnVuYyIsImNyZWF0ZU5vd01hcmtlciIsInRpbWVzdGFtcFRvTWFya2VyIiwiZ2V0WWVhciIsImFkZFllYXJzIiwiYWRkTW9udGhzIiwiZ3JlYXRlc3RXaG9sZVVuaXQiLCJjb3VudER1cmF0aW9uc0JldHdlZW4iLCJzdGFydE9mIiwic3RhcnRPZlllYXIiLCJzdGFydE9mTW9udGgiLCJzdGFydE9mV2VlayIsImRhdGVPcHRpb25zIiwib2Zmc2V0Rm9yTWFya2VyIiwiaXNFbmRFeGNsdXNpdmUiLCJleHRyYU9wdGlvbnMiLCJvbWl0VGltZVpvbmVPZmZzZXQiLCJ0aW1lc3RhbXBUb0FycmF5IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJvZmZzZXRGb3JBcnJheSIsIlNJTVBMRV9TT1VSQ0VfUFJPUFMiLCJ1aWQkMiIsImRvZXNTb3VyY2VOZWVkUmFuZ2UiLCJzb3VyY2VEZWZJZCIsInBhcnNlRXZlbnRTb3VyY2UiLCJwYXJzZUV2ZW50U291cmNlUHJvcHMiLCJpc0ZldGNoaW5nIiwicmVkdWNlRXZlbnRTb3VyY2VzIiwiYWRkU291cmNlcyIsInNvdXJjZXMiLCJyZW1vdmVTb3VyY2UiLCJmZXRjaERpcnR5U291cmNlcyIsImZldGNoU291cmNlc0J5SWRzIiwiZXhjbHVkZVN0YXRpY1NvdXJjZXMiLCJyZWNlaXZlUmVzcG9uc2UiLCJ1aWQkMyIsImV2ZW50U291cmNlSGFzaCIsInNvdXJjZXNfMSIsInNvdXJjZUhhc2giLCJpc1NvdXJjZURpcnR5IiwicHJldlNvdXJjZXMiLCJzb3VyY2VJZEhhc2giLCJuZXh0U291cmNlcyIsImZldGNoU291cmNlIiwic291cmNlRGVmIiwiY2FsU3VjY2VzcyIsImNhbFN1Y2Nlc3NSZXMiLCJzb3VyY2VTdWNjZXNzUmVzIiwiZXJyb3IiLCJjYWxsRmFpbHVyZSIsIkRhdGVQcm9maWxlR2VuZXJhdG9yIiwidmlld1NwZWMiLCJpbml0SGlkZGVuRGF5cyIsImJ1aWxkUHJldiIsImN1cnJlbnREYXRlUHJvZmlsZSIsImN1cnJlbnREYXRlIiwicHJldkRhdGUiLCJjdXJyZW50UmFuZ2VVbml0IiwiZGF0ZUluY3JlbWVudCIsImJ1aWxkTmV4dCIsIm5leHREYXRlIiwiZm9yY2VUb1ZhbGlkIiwiY3VycmVudEluZm8iLCJpc1JhbmdlQWxsRGF5IiwicmVuZGVyUmFuZ2UiLCJpc1ZhbGlkIiwiYnVpbGRWYWxpZFJhbmdlIiwidHJpbUhpZGRlbkRheXMiLCJidWlsZEN1cnJlbnRSYW5nZUluZm8iLCJidWlsZFJlbmRlclJhbmdlIiwiYWRqdXN0QWN0aXZlUmFuZ2UiLCJidWlsZERhdGVJbmNyZW1lbnQiLCJnZXRSYW5nZU9wdGlvbiIsImRheUNvdW50IiwiZHVyYXRpb25Vbml0IiwiYnVpbGRSYW5nZUZyb21EdXJhdGlvbiIsImJ1aWxkUmFuZ2VGcm9tRGF5Q291bnQiLCJidWlsZEN1c3RvbVZpc2libGVSYW5nZSIsImdldEZhbGxiYWNrRHVyYXRpb24iLCJjbGFzcyIsInVzZXNNaW5NYXhUaW1lIiwiYWxpZ25tZW50IiwiZGF0ZUFsaWdubWVudCIsImRhdGVJbmNyZW1lbnRJbnB1dCIsImRhdGVJbmNyZW1lbnREdXJhdGlvbiIsImlzSGlkZGVuRGF5Iiwic2tpcEhpZGRlbkRheXMiLCJjb21wdXRlUmVzIiwiY3VzdG9tQWxpZ25tZW50IiwicnVubmluZ0NvdW50IiwiZmFsbGJhY2siLCJvdGhlckFyZ3MiLCJoaWRkZW5EYXlzIiwiaXNIaWRkZW5EYXlIYXNoIiwiRXJyb3IiLCJpbmMiLCJpc0V4Y2x1c2l2ZSIsImlzRGF0ZVByb2ZpbGVzRXF1YWwiLCJwMCIsInAxIiwidmlld1R5cGUiLCJyZWR1Y2VWaWV3VHlwZSIsInJlZHVjZURhdGVQcm9maWxlIiwibmV4dFN0YXRlIiwicmVkdWNlQ3VycmVudERhdGUiLCJyZWR1Y2VEYXRlU2VsZWN0aW9uIiwicmVkdWNlU2VsZWN0ZWRFdmVudCIsInJlZHVjZUV2ZW50RHJhZyIsInJlZHVjZUV2ZW50UmVzaXplIiwiZXZlbnRTb3VyY2VMb2FkaW5nTGV2ZWwiLCJjb21wdXRlTG9hZGluZ0xldmVsIiwicmVkdWNlckZ1bmMiLCJjdXJyZW50Vmlld1R5cGUiLCJuZXdEYXRlUHJvZmlsZSIsImRhdGVQcm9maWxlR2VuZXJhdG9ycyIsImRhdGVNYXJrZXIiLCJnZW5lcmF0b3IiLCJuZXdEYXRlIiwiY3VycmVudFNlbGVjdGlvbiIsImN1cnJlbnRJbnN0YW5jZUlkIiwiZXZlbnRJbnN0YW5jZUlkIiwiY3VycmVudERyYWciLCJuZXdEcmFnIiwiY3VycmVudFJlc2l6ZSIsIm5ld1Jlc2l6ZSIsImNudCIsIlNUQU5EQVJEX1BST1BTIiwicGFyc2VEYXRlU3BhbiIsImRlZmF1bHREdXJhdGlvbiIsInNwYW4iLCJwYXJzZU9wZW5EYXRlU3BhbiIsImlzRGF0ZVNwYW5zRXF1YWwiLCJzcGFuMCIsInNwYW4xIiwiaXNTcGFuUHJvcHNFcXVhbCIsImJ1aWxkRGF0ZVBvaW50QXBpIiwiZGF0ZVN0ciIsImZhYnJpY2F0ZUV2ZW50UmFuZ2UiLCJjb21waWxlVmlld0RlZnMiLCJkZWZhdWx0Q29uZmlncyIsIm92ZXJyaWRlQ29uZmlncyIsImVuc3VyZVZpZXdEZWYiLCJ2aWV3RGVmIiwiYnVpbGRWaWV3RGVmIiwiZGVmYXVsdENvbmZpZyIsIm92ZXJyaWRlQ29uZmlnIiwicXVlcnlQcm9wIiwic3VwZXJUeXBlIiwiZmluZFZpZXdOYW1lQnlTdWJjbGFzcyIsInN1cGVyRGVmIiwidmlld1N1YmNsYXNzIiwiY29uZmlncyIsInN1cGVyUHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInBhcnNlVmlld0NvbmZpZ3MiLCJwYXJzZVZpZXdDb25maWciLCJWSUVXX0RFRl9QUk9QUyIsImJ1aWxkVmlld1NwZWNzIiwiZGVmYXVsdElucHV0cyIsIm9wdGlvbnNNYW5hZ2VyIiwidmlld0RlZnMiLCJidWlsZFZpZXdTcGVjIiwiZHVyYXRpb25JbnB1dCIsInNpbmdsZVVuaXQiLCJzaW5nbGVVbml0T3ZlcnJpZGVzIiwiZGVub20iLCJxdWVyeUJ1dHRvblRleHQiLCJidXR0b25UZXh0TWFwIiwiYnV0dG9uVGV4dEtleSIsImJ1dHRvblRleHRPdmVycmlkZSIsImJ1dHRvblRleHREZWZhdWx0IiwiVG9vbGJhciIsImV4dHJhQ2xhc3NOYW1lIiwiX3JlbmRlckxheW91dCIsInJlbmRlckxheW91dCIsInVucmVuZGVyTGF5b3V0IiwiX3VwZGF0ZVRpdGxlIiwidXBkYXRlVGl0bGUiLCJfdXBkYXRlQWN0aXZlQnV0dG9uIiwidXBkYXRlQWN0aXZlQnV0dG9uIiwiX3VwZGF0ZVRvZGF5IiwidXBkYXRlVG9kYXkiLCJfdXBkYXRlUHJldiIsInVwZGF0ZVByZXYiLCJfdXBkYXRlTmV4dCIsInVwZGF0ZU5leHQiLCJsYXlvdXQiLCJhY3RpdmVCdXR0b24iLCJpc1RvZGF5RW5hYmxlZCIsImlzUHJldkVuYWJsZWQiLCJpc05leHRFbmFibGVkIiwidmlld3NXaXRoQnV0dG9ucyIsInJlbmRlclNlY3Rpb24iLCJidXR0b25TdHIiLCJ2aWV3U3BlY3MiLCJzZWN0aW9uRWwiLCJjYWxlbmRhckN1c3RvbUJ1dHRvbnMiLCJjYWxlbmRhckJ1dHRvblRleHRPdmVycmlkZXMiLCJjYWxlbmRhckJ1dHRvblRleHQiLCJidXR0b25Hcm91cFN0ciIsImdyb3VwQ2hpbGRyZW4iLCJpc09ubHlCdXR0b25zIiwiZ3JvdXBFbCIsImJ1dHRvbkNsaWNrIiwiYnV0dG9uSWNvbiIsImJ1dHRvbklubmVySHRtbCIsImJ1dHRvbkNsYXNzZXMiLCJidXR0b25FbCIsImJ1dHRvbkFyaWFBdHRyIiwiY2xpY2siLCJjaGFuZ2VWaWV3IiwiYnV0dG9uR3JvdXBDbGFzc05hbWUiLCJ0b2dnbGVCdXR0b25FbmFibGVkIiwidGl0bGVFbCIsImlubmVyVGV4dCIsImRpc2FibGVkIiwiQ2FsZW5kYXJDb21wb25lbnQiLCJfcmVuZGVyVG9vbGJhcnMiLCJyZW5kZXJUb29sYmFycyIsImJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMiLCJjb250ZW50RWwiLCJtb2RpZnlWaWV3Q29udGFpbmVyIiwidG9nZ2xlRWxDbGFzc05hbWVzIiwiY29tcHV0ZVRpdGxlIiwiZm9vdGVyIiwiZGlyQ2xhc3NOYW1lIiwidGhlbWVDbGFzc05hbWUiLCJmcmVlemVIZWlnaHQiLCJkYXRlUHJvZmlsZUdlbmVyYXRvciIsInJlbmRlclZpZXciLCJ1cGRhdGVTaXplIiwidGhhd0hlaWdodCIsImhlYWRlckxheW91dCIsImZvb3RlckxheW91dCIsIm5vdyIsInRvZGF5SW5mbyIsInByZXZJbmZvIiwibmV4dEluZm8iLCJ0b29sYmFyUHJvcHMiLCJhZGRTY3JvbGwiLCJxdWVyeVNjcm9sbCIsInZpZXdQcm9wcyIsInRyYW5zZm9ybWVycyIsInRyYW5zZm9ybWVyc18xIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm0iLCJpc1Jlc2l6ZSIsImlzSGVpZ2h0QXV0byIsImNvbXB1dGVIZWlnaHRWYXJzIiwidmlld0hlaWdodCIsInVwZGF0ZU5vd0luZGljYXRvciIsInBvcFNjcm9sbCIsImhlaWdodElucHV0IiwiY29udGVudEhlaWdodElucHV0IiwicXVlcnlUb29sYmFyc0hlaWdodCIsInBhcmVudEVsIiwidmlld09wdGlvbnMiLCJ0aXRsZUZvcm1hdCIsImNvbXB1dGVUaXRsZUZvcm1hdCIsInRoZUNsYXNzZXMiLCJJbnRlcmFjdGlvbiIsInBhcnNlSW50ZXJhY3Rpb25TZXR0aW5ncyIsInVzZUV2ZW50Q2VudGVyIiwiaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUiLCJpbnRlcmFjdGlvblNldHRpbmdzU3RvcmUiLCJFdmVudENsaWNraW5nIiwiaGFuZGxlU2VnQ2xpY2siLCJoYXNVcmxDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiaHJlZiIsImpzRXZlbnQiLCJkZWZhdWx0UHJldmVudGVkIiwibG9jYXRpb24iLCJFdmVudEhvdmVyaW5nIiwiaGFuZGxlRXZlbnRFbFJlbW92ZSIsImN1cnJlbnRTZWdFbCIsImhhbmRsZVNlZ0xlYXZlIiwiaGFuZGxlU2VnRW50ZXIiLCJ0cmlnZ2VyRXZlbnQiLCJyZW1vdmVIb3Zlckxpc3RlbmVycyIsInB1YmxpY0V2TmFtZSIsIlN0YW5kYXJkVGhlbWUiLCJ3aWRnZXQiLCJ3aWRnZXRIZWFkZXIiLCJ3aWRnZXRDb250ZW50IiwiYnV0dG9uR3JvdXAiLCJidXR0b24iLCJidXR0b25BY3RpdmUiLCJwb3BvdmVySGVhZGVyIiwicG9wb3ZlckNvbnRlbnQiLCJoZWFkZXJSb3ciLCJkYXlSb3ciLCJsaXN0VmlldyIsImNsb3NlIiwiYnVpbGREYXRlRW52IiwiYnVpbGRUaGVtZSIsImJ1aWxkRXZlbnRVaVNpbmdsZUJhc2UiLCJfYnVpbGRFdmVudFVpU2luZ2xlQmFzZSIsImJ1aWxkU2VsZWN0aW9uQ29uZmlnIiwiX2J1aWxkU2VsZWN0aW9uQ29uZmlnIiwiYnVpbGRFdmVudFVpQnlTb3VyY2UiLCJidWlsZEV2ZW50VWlCYXNlcyIsImludGVyYWN0aW9uc1N0b3JlIiwiYWN0aW9uUXVldWUiLCJpc1JlZHVjaW5nIiwibmVlZHNSZXJlbmRlciIsIm5lZWRzRnVsbFJlcmVuZGVyIiwiaXNSZW5kZXJpbmciLCJyZW5kZXJpbmdQYXVzZURlcHRoIiwiYnVpbGREZWxheWVkUmVyZW5kZXIiLCJpc1ZpZXdVcGRhdGVkIiwiaXNEYXRlc1VwZGF0ZWQiLCJpc0V2ZW50c1VwZGF0ZWQiLCJoYW5kbGVPcHRpb25zIiwiaHlkcmF0ZSIsImNhbGVuZGFySW50ZXJhY3Rpb25DbGFzcyIsInBsdWdpbkRlZnMiLCJwbHVnaW5EZWZzXzEiLCJwbHVnaW5EZWYiLCJyZW5kZXJhYmxlRXZlbnRTdG9yZSIsImJpbmRIYW5kbGVycyIsImV4ZWN1dGVSZW5kZXIiLCJyZXF1ZXN0UmVyZW5kZXIiLCJ1bmJpbmRIYW5kbGVycyIsInJlbW92ZU5hdkxpbmtMaXN0ZW5lciIsImFuY2hvckVsIiwiZ2V0QXR0cmlidXRlIiwiY3VzdG9tQWN0aW9uIiwidmlld09wdCIsInpvb21UbyIsIndpbmRvd1Jlc2l6ZVByb3h5Iiwid2luZG93UmVzaXplIiwiYnVpbGRJbml0aWFsU3RhdGUiLCJyYXdTb3VyY2VzIiwic2luZ2xlUmF3U291cmNlIiwicmF3U291cmNlc18xIiwicmF3U291cmNlIiwiYmF0Y2hSZW5kZXJpbmciLCJnZXRJbml0aWFsRGF0ZSIsIm9sZFN0YXRlIiwic2hpZnQiLCJuZXdTdGF0ZSIsIm5lZWRzRnVsbCIsImRlbGF5ZWRSZXJlbmRlciIsInRyeVJlcmVuZGVyIiwicmVuZGVyQ29tcG9uZW50Iiwic2F2ZWRTY3JvbGwiLCJldmVudFVpU2luZ2xlQmFzZSIsImV2ZW50VWlCeVNvdXJjZSIsImFwcGx5U2Nyb2xsIiwicmVsZWFzZUFmdGVyU2l6aW5nVHJpZ2dlcnMiLCJzZXRPcHRpb24iLCJtdXRhdGVPcHRpb25zIiwiZ2V0T3B0aW9uIiwidmlld09wdHMiLCJjaGFuZ2VIYW5kbGVycyIsIm5vcm1hbFVwZGF0ZXMiLCJzcGVjaWFsVXBkYXRlcyIsImlzVGltZVpvbmVEaXJ0eSIsImlzU2l6ZURpcnR5IiwiYW55RGlmZmljdWx0T3B0aW9ucyIsIm5hbWVfMyIsInBsdWdpbkhvb2tzIiwicmVyZW5kZXJEZWxheSIsImF2YWlsYWJsZVJhd0xvY2FsZXMiLCJkYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzIiwiZ2V0QXZhaWxhYmxlTG9jYWxlQ29kZXMiLCJyYXdPcHRzIiwiZXZlbnRFZGl0YWJsZSIsIm9wdEhhbmRsZXIiLCJuYW1lXzQiLCJpc1ZhbGlkVmlld1R5cGUiLCJkYXRlT3JSYW5nZSIsInVuc2VsZWN0Iiwic3BlYyIsImdldFVuaXRWaWV3U3BlYyIsInZpZXdUeXBlcyIsImRlZmF1bHREYXRlSW5wdXQiLCJnb3RvRGF0ZSIsInpvbmVkRGF0ZUlucHV0IiwiaW5jcmVtZW50RGF0ZSIsImZvcm1hdERhdGUiLCJpc0hhbmRsaW5nV2luZG93UmVzaXplIiwicmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCIsInNldHRpbmdzSW5wdXQiLCJERUZBVUxUX0lOVEVSQUNUSU9OUyIsImludGVyYWN0aW9uQ2xhc3NlcyIsImludGVyYWN0aW9ucyIsImludGVyYWN0aW9uQ2xhc3MiLCJ1bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQiLCJsaXN0ZW5lciIsInNlbGVjdCIsImRhdGVPck9iaiIsImVuZERhdGUiLCJzZWxlY3Rpb25JbnB1dCIsInRyaWdnZXJEYXRlU2VsZWN0IiwicGV2IiwidHJpZ2dlckRhdGVVbnNlbGVjdCIsIm9yaWdFdmVudCIsInRyaWdnZXJEYXRlQ2xpY2siLCJkYXlFbCIsInNvdXJjZUlucHV0Iiwic291cmNlQXBpIiwiZ2V0RXZlbnRTb3VyY2VCeUlkIiwiZ2V0RXZlbnRCeUlkIiwiZ2V0RXZlbnRzIiwiZXZlbnRBcGlzIiwicmVtb3ZlQWxsRXZlbnRzIiwicmVyZW5kZXJFdmVudHMiLCJnZXRFdmVudFNvdXJjZXMiLCJzb3VyY2VBcGlzIiwiaW50ZXJuYWxJZCIsInJlbW92ZUFsbEV2ZW50U291cmNlcyIsInJlZmV0Y2hFdmVudHMiLCJzY3JvbGxUb1RpbWUiLCJ0aW1lSW5wdXQiLCJzY3JvbGxUb0R1cmF0aW9uIiwidGhlbWVDbGFzcyIsIlZpZXciLCJyZW5kZXJEYXRlc01lbSIsInJlbmRlckRhdGVzV3JhcCIsInVucmVuZGVyRGF0ZXNXcmFwIiwicmVuZGVyQnVzaW5lc3NIb3Vyc01lbSIsInJlbmRlckJ1c2luZXNzSG91cnMiLCJ1bnJlbmRlckJ1c2luZXNzSG91cnMiLCJyZW5kZXJEYXRlU2VsZWN0aW9uTWVtIiwicmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAiLCJ1bnJlbmRlckRhdGVTZWxlY3Rpb25XcmFwIiwicmVuZGVyRXZlbnRzTWVtIiwicmVuZGVyRXZlbnRzIiwidW5yZW5kZXJFdmVudHMiLCJyZW5kZXJFdmVudFNlbGVjdGlvbk1lbSIsInJlbmRlckV2ZW50U2VsZWN0aW9uV3JhcCIsInVucmVuZGVyRXZlbnRTZWxlY3Rpb25XcmFwIiwicmVuZGVyRXZlbnREcmFnTWVtIiwicmVuZGVyRXZlbnREcmFnV3JhcCIsInVucmVuZGVyRXZlbnREcmFnV3JhcCIsInJlbmRlckV2ZW50UmVzaXplTWVtIiwicmVuZGVyRXZlbnRSZXNpemVXcmFwIiwidW5yZW5kZXJFdmVudFJlc2l6ZVdyYXAiLCJldmVudE9yZGVyU3BlY3MiLCJpbml0aWFsaXplIiwiaXNBdXRvIiwidXBkYXRlQmFzZVNpemUiLCJyZW5kZXJEYXRlcyIsInN0YXJ0Tm93SW5kaWNhdG9yIiwic3RvcE5vd0luZGljYXRvciIsInVucmVuZGVyRGF0ZXMiLCJyZW5kZXJEYXRlU2VsZWN0aW9uIiwidW5yZW5kZXJEYXRlU2VsZWN0aW9uIiwic2xpY2VFdmVudHMiLCJjb21wdXRlRXZlbnREcmFnZ2FibGUiLCJldmVudFVpIiwiY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUiLCJjb21wdXRlRXZlbnRFbmRSZXNpemFibGUiLCJyZW5kZXJFdmVudFNlbGVjdGlvbiIsInVucmVuZGVyRXZlbnRTZWxlY3Rpb24iLCJyZW5kZXJFdmVudERyYWciLCJ1bnJlbmRlckV2ZW50RHJhZyIsInJlbmRlckV2ZW50UmVzaXplIiwidW5yZW5kZXJFdmVudFJlc2l6ZSIsInVwZGF0ZSIsImRlbGF5IiwiZ2V0Tm93SW5kaWNhdG9yVW5pdCIsImluaXRpYWxOb3dEYXRlIiwiaW5pdGlhbE5vd1F1ZXJpZWRNcyIsIm5vd0luZGljYXRvclRpbWVvdXRJRCIsIm5vd0luZGljYXRvckludGVydmFsSUQiLCJzZXRJbnRlcnZhbCIsInVucmVuZGVyTm93SW5kaWNhdG9yIiwicmVuZGVyTm93SW5kaWNhdG9yIiwiaXNOb3dJbmRpY2F0b3JSZW5kZXJlZCIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJxdWV1ZWRTY3JvbGwiLCJhcHBseVF1ZXVlZFNjcm9sbCIsInF1ZXJ5RGF0ZVNjcm9sbCIsImNvbXB1dGVEYXRlU2Nyb2xsIiwiYXBwbHlEYXRlU2Nyb2xsIiwiRmdFdmVudFJlbmRlcmVyIiwicmVuZGVyU2VncyIsIm1pcnJvckluZm8iLCJyYW5nZVVwZGF0ZWQiLCJyZW5kZXJTZWdFbHMiLCJhdHRhY2hTZWdzIiwiX3NlZ3MiLCJkZXRhY2hTZWdzIiwiZGlzcGxheUV2ZW50VGltZSIsImRpc3BsYXlFdmVudEVuZCIsImV2ZW50VGltZUZvcm1hdCIsImNvbXB1dGVFdmVudFRpbWVGb3JtYXQiLCJjb21wdXRlRGlzcGxheUV2ZW50VGltZSIsImNvbXB1dGVEaXNwbGF5RXZlbnRFbmQiLCJyZW5kZXJTZWdIdG1sIiwiZ2V0U2VnQ2xhc3NlcyIsImlzRHJhZ2dhYmxlIiwiaXNSZXNpemFibGUiLCJpc0RyYWdnaW5nIiwiaXNSZXNpemluZyIsImdldFRpbWVUZXh0IiwiZGlzcGxheUVuZCIsIl9nZXRUaW1lVGV4dCIsImdldFNraW5Dc3MiLCJzb3J0RXZlbnRTZWdzIiwib2JqcyIsImJ1aWxkU2VnQ29tcGFyZU9iaiIsImMiLCJfc2VnIiwiY29tcHV0ZVNpemVzIiwiZm9yY2UiLCJjb21wdXRlU2VnU2l6ZXMiLCJhc3NpZ25TaXplcyIsImFzc2lnblNlZ1NpemVzIiwiaGlkZUJ5SGFzaCIsInZpc2liaWxpdHkiLCJzaG93QnlIYXNoIiwic2VsZWN0QnlJbnN0YW5jZUlkIiwidW5zZWxlY3RCeUluc3RhbmNlSWQiLCJGaWxsUmVuZGVyZXIiLCJmaWxsU2VnVGFnIiwiZGlydHlTaXplRmxhZ3MiLCJjb250YWluZXJFbHNCeVR5cGUiLCJzZWdzQnlUeXBlIiwiZ2V0U2Vnc0J5VHlwZSIsInJlbmRlcmVkU2VncyIsImNvbnRhaW5lckVscyIsImNzcyIsInRvTG93ZXJDYXNlIiwiTmFtZWRUaW1lWm9uZUltcGwiLCJFbGVtZW50RHJhZ2dpbmciLCJlbWl0dGVyIiwic2V0TWlycm9ySXNWaXNpYmxlIiwic2V0TWlycm9yTmVlZHNSZXZlcnQiLCJzZXRBdXRvU2Nyb2xsRW5hYmxlZCIsImRhdGVJbnB1dCIsImJ1aWxkRGF0ZUVudiQxIiwiZGF0ZU1ldGEiLCJEUkFHX01FVEFfUFJPUFMiLCJEUkFHX01FVEFfREVGQVVMVFMiLCJwYXJzZURyYWdNZXRhIiwiY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0IiwiZGF0ZXNSZXBEaXN0aW5jdERheXMiLCJyZW5kZXJEYXRlQ2VsbCIsImNvbENudCIsImNvbEhlYWRGb3JtYXQiLCJjb2xzcGFuIiwib3RoZXJBdHRycyIsImlzRGF0ZVZhbGlkIiwiY29sdW1uSGVhZGVySHRtbCIsImNvbHVtbkhlYWRlclRleHQiLCJEYXlIZWFkZXIiLCJ0aGVhZCIsImRhdGVzIiwicmVuZGVySW50cm9IdG1sIiwiZGF0ZXNfMSIsIkRheVNlcmllcyIsImluZGljZXMiLCJkYXlJbmRleCIsInNsaWNlUmFuZ2UiLCJmaXJzdEluZGV4IiwiZ2V0RGF0ZURheUluZGV4IiwibGFzdEluZGV4IiwiY2xpcHBlZEZpcnN0SW5kZXgiLCJjbGlwcGVkTGFzdEluZGV4IiwiY2VpbCIsImRheU9mZnNldCIsIkRheVRhYmxlIiwiZGF5U2VyaWVzIiwiYnJlYWtPbldlZWtzIiwiZGF5c1BlclJvdyIsInJvd0NudCIsImNlbGxzIiwiYnVpbGRDZWxscyIsImhlYWRlckRhdGVzIiwiYnVpbGRIZWFkZXJEYXRlcyIsInJvd3MiLCJyb3ciLCJjb2wiLCJidWlsZENlbGwiLCJzZXJpZXNTZWciLCJpbmRleCIsIm5leHRJbmRleCIsImZpcnN0Q29sIiwibGFzdENvbCIsIlNsaWNlciIsInNsaWNlQnVzaW5lc3NIb3VycyIsIl9zbGljZUJ1c2luZXNzSG91cnMiLCJzbGljZURhdGVTZWxlY3Rpb24iLCJfc2xpY2VEYXRlU3BhbiIsIl9zbGljZUV2ZW50U3RvcmUiLCJzbGljZUV2ZW50RHJhZyIsIl9zbGljZUludGVyYWN0aW9uIiwic2xpY2VFdmVudFJlc2l6ZSIsInNsaWNlUHJvcHMiLCJleHRyYUFyZ3MiLCJldmVudFNlZ3MiLCJkYXRlU2VsZWN0aW9uU2VncyIsImJ1c2luZXNzSG91clNlZ3MiLCJmZ0V2ZW50U2VncyIsImJnRXZlbnRTZWdzIiwic2xpY2VOb3dEYXRlIiwiY29tcHV0ZUFjdGl2ZVJhbmdlIiwicmFuZ2VSZXMiLCJzbGljZUV2ZW50UmFuZ2VzIiwiYWZmZWN0ZWRJbnN0YW5jZXMiLCJzb3VyY2VTZWciLCJldmVudFJhbmdlcyIsImV2ZW50UmFuZ2VzXzEiLCJzbGljZUV2ZW50UmFuZ2UiLCJpc0NvbXBvbmVudEFsbERheSIsInZlcnNpb24iLCJtYXNzYWdlRXZlbnREcmFnTXV0YXRpb24iLCJldmVudE11dGF0aW9uIiwiaGl0MCIsImhpdDEiLCJyZXNvdXJjZTAiLCJyZXNvdXJjZUlkIiwicmVzb3VyY2UxIiwicmVzb3VyY2VNdXRhdGlvbiIsIm1hdGNoUmVzb3VyY2VJZCIsInNldFJlc291cmNlSWQiLCJhcHBseUV2ZW50RGVmTXV0YXRpb24iLCJjb21wdXRlUmVzb3VyY2VFZGl0YWJsZSIsInJlc291cmNlSWRzIiwicmVzb3VyY2VFZGl0YWJsZSIsInRyYW5zZm9ybUV2ZW50RHJvcCIsIm9sZFJlc291cmNlIiwiZ2V0UmVzb3VyY2VCeUlkIiwibmV3UmVzb3VyY2UiLCJSZXNvdXJjZURhdGFBZGRlciIsImZpbHRlclJlc291cmNlcyIsImNhbGVuZGFyUHJvcHMiLCJuZWVkc1Jlc291cmNlRGF0YSIsInJlc291cmNlU3RvcmUiLCJyZXNvdXJjZUVudGl0eUV4cGFuc2lvbnMiLCJkb0ZpbHRlclJlc291cmNlc1dpdGhFdmVudHMiLCJpbnN0YW5jZXNJblJhbmdlIiwiZmlsdGVyRXZlbnRJbnN0YW5jZXNJblJhbmdlIiwiaGFzRXZlbnRzXzEiLCJjb21wdXRlSGFzRXZlbnRzIiwiY29tcHV0ZUFuY2VzdG9ySGFzRXZlbnRzIiwicmVzb3VyY2UiLCJldmVudEluc3RhbmNlcyIsImhhc0V2ZW50cyIsInBhcmVudElkIiwiUmVzb3VyY2VFdmVudENvbmZpZ0FkZGVyIiwiYnVpbGRSZXNvdXJjZUV2ZW50VWlzIiwiaW5qZWN0UmVzb3VyY2VFdmVudFVpcyIsInJlc291cmNlRXZlbnRVaXMiLCJpbmplY3RSZXNvdXJjZUV2ZW50VWkiLCJvcmlnRXZlbnRVaSIsInRyYW5zZm9ybUlzRHJhZ2dhYmxlIiwiUkVTT1VSQ0VfU09VUkNFX1BST1BTIiwicmVnaXN0ZXJSZXNvdXJjZVNvdXJjZURlZiIsImdldFJlc291cmNlU291cmNlRGVmIiwiZG9lc1NvdXJjZUlnbm9yZVJhbmdlIiwicGFyc2VSZXNvdXJjZVNvdXJjZSIsInBhcnNlUmVzb3VyY2VTb3VyY2VQcm9wcyIsInJlZHVjZVJlc291cmNlU291cmNlIiwiY3JlYXRlU291cmNlIiwicmVzb3VyY2VTb3VyY2VJbnB1dCIsImhhbmRsZVJhbmdlIiwiZm9yY2VGZXRjaCIsInJlc291cmNlU291cmNlIiwiX3Jlc291cmNlc1JlbmRlcmVkIiwicmF3UmVzb3VyY2VzIiwiUkVTT1VSQ0VfUFJPUFMiLCJQUklWQVRFX0lEX1BSRUZJWCIsInBhcnNlUmVzb3VyY2UiLCJzdG9yZSIsImNoaWxkSW5wdXQiLCJnZXRQdWJsaWNJZCIsInJlZHVjZVJlc291cmNlU3RvcmUiLCJyZWNlaXZlUmF3UmVzb3VyY2VzIiwiYWRkUmVzb3VyY2UiLCJyZXNvdXJjZUhhc2giLCJyZW1vdmVSZXNvdXJjZSIsInNldFJlc291cmNlUHJvcCIsInByb3BWYWx1ZSIsImV4aXN0aW5nU3RvcmUiLCJuZXh0U3RvcmUiLCJhZGRpdGlvbnMiLCJjaGlsZFJlc291cmNlSWQiLCJleGlzdGluZ1Jlc291cmNlIiwicmVkdWNlUmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zIiwiZXhwYW5zaW9ucyIsImlzRXhwYW5kZWQiLCJyZXNvdXJjZXNSZWR1Y2VycyIsIlJFU09VUkNFX1JFTEFURURfUFJPUFMiLCJpdGVtcyIsInJlc291cmNlUmVsYXRlZFByb3BzIiwidHJhbnNmb3JtRGF0ZVNlbGVjdGlvbkpvaW4iLCJyZXNvdXJjZUlkMCIsInJlc291cmNlSWQxIiwiYWxsb3dBY3Jvc3NSZXNvdXJjZXMiLCJSZXNvdXJjZUFwaSIsInJhd1Jlc291cmNlIiwiX3Jlc291cmNlIiwiZ2V0UGFyZW50IiwiZ2V0Q2hpbGRyZW4iLCJ0aGlzUmVzb3VyY2VJZCIsImNoaWxkQXBpcyIsInNjcm9sbFRvIiwiZm9yY2VkUm93SWQiLCJnZXRSZXNvdXJjZXMiLCJyZXNvdXJjZUFwaXMiLCJnZXRUb3BMZXZlbFJlc291cmNlcyIsInJlcmVuZGVyUmVzb3VyY2VzIiwicmVmZXRjaFJlc291cmNlcyIsInRyYW5zZm9ybURhdGVQb2ludCIsInRyYW5zZm9ybURhdGVTcGFuIiwiUmVzb3VyY2VTcGxpdHRlciIsImlzUHJvcHNWYWxpZFdpdGhSZXNvdXJjZXMiLCJzcGxpdHRlciIsInNldHMiLCJwcm9wc18xIiwiZmlsdGVyQ29uc3RyYWludHMiLCJ0cmFuc2Zvcm1FeHRlcm5hbERlZiIsInRyYW5zZm9ybUV2ZW50UmVzaXplSm9pbiIsInNldFJlc291cmNlcyIsInJlc291cmNlc18xIiwiUkVMRUFTRV9EQVRFIiwiVVBHUkFERV9XSU5ET1ciLCJMSUNFTlNFX0lORk9fVVJMIiwiUFJFU0VUX0xJQ0VOU0VfS0VZUyIsIkNTUyIsImJhY2tncm91bmQiLCJpbmplY3RMaWNlbnNlV2FybmluZyIsImNvbnRhaW5lckVsIiwiaXNJbW11bmVVcmwiLCJpc1ZhbGlkS2V5IiwibWF0Y2giLCJwdXJjaGFzZURhdGUiLCJyZWxlYXNlRGF0ZSIsIm1vY2tTY2hlZHVsZXJSZWxlYXNlRGF0ZSIsIm1pblB1cmNoYXNlRGF0ZSIsImhhbmRsZVJlc291cmNlcyIsIm5ld1NvdXJjZUlucHV0Iiwib2xkU291cmNlSW5wdXQiLCJwdWJsaWNBcmciLCJidWlsZFJlc291cmNlVGV4dEZ1bmMiLCJyZXNvdXJjZVRleHRTZXR0aW5nIiwiUmVzb3VyY2VEYXlIZWFkZXIiLCJkYXRlc0Fib3ZlUmVzb3VyY2VzIiwicmVzb3VyY2VUZXh0RnVuYyIsImRhdGVGb3JtYXQiLCJyZW5kZXJSZXNvdXJjZVJvdyIsInJlbmRlckRheUFuZFJlc291cmNlUm93cyIsInJlbmRlclJlc291cmNlQW5kRGF5Um93cyIsInByb2Nlc3NSZXNvdXJjZUVscyIsImNlbGxIdG1scyIsInJlbmRlclJlc291cmNlQ2VsbCIsImJ1aWxkVHIiLCJkYXRlSHRtbHMiLCJyZXNvdXJjZUh0bWxzIiwicmVzb3VyY2VzXzIiLCJkYXRlc18yIiwibm9kZSIsIkFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZSIsImRheVRhYmxlIiwicmVzb3VyY2VJbmRleCIsIlJlc291cmNlSW5kZXgiLCJyb3dDZWxscyIsImRhdGVDb2wiLCJyZXNvdXJjZUNvbCIsImh0bWxBdHRycyIsImNvbXB1dGVDb2wiLCJSZXNvdXJjZURheVRhYmxlIiwiZGF0ZUkiLCJyZXNvdXJjZUkiLCJjb21wdXRlQ29sUmFuZ2VzIiwiZGF0ZVN0YXJ0SSIsImRhdGVFbmRJIiwiRGF5UmVzb3VyY2VUYWJsZSIsImluZGljZXNCeUlkIiwiaWRzIiwiVlJlc291cmNlU3BsaXR0ZXIiLCJyZXNvdXJjZURheVRhYmxlIiwiTk9fU0VHUyIsIlZSZXNvdXJjZUpvaW5lciIsImpvaW5EYXRlU2VsZWN0aW9uIiwiam9pblNlZ3MiLCJqb2luQnVzaW5lc3NIb3VycyIsImpvaW5GZ0V2ZW50cyIsImpvaW5CZ0V2ZW50cyIsImpvaW5FdmVudERyYWdzIiwiam9pbkludGVyYWN0aW9ucyIsImpvaW5FdmVudFJlc2l6ZXMiLCJqb2luUHJvcHMiLCJwcm9wU2V0cyIsImRhdGVTZWxlY3Rpb25TZXRzIiwiYnVzaW5lc3NIb3Vyc1NldHMiLCJmZ0V2ZW50U2V0cyIsImJnRXZlbnRTZXRzIiwic2VnR3JvdXBzIiwicmVzb3VyY2VDbnQiLCJ0cmFuc2Zvcm1lZFNlZ3MiLCJ0cmFuc2Zvcm1TZWciLCJfZCIsImV4cGFuZFNlZ3MiLCJmbGF0dGVuUmVzb3VyY2VzIiwib3JkZXJTcGVjcyIsImJ1aWxkUm93Tm9kZXMiLCJncm91cFNwZWNzIiwiaXNWR3JvdXBpbmciLCJleHBhbnNpb25EZWZhdWx0IiwiY29tcGxleE5vZGVzIiwiYnVpbGRIaWVyYXJjaHkiLCJmbGF0Tm9kZXMiLCJmbGF0dGVuTm9kZXMiLCJyb3dTcGFucyIsImRlcHRoIiwiY29tcGxleE5vZGUiLCJncm91cCIsImZpcnN0Um93SW5kZXgiLCJyb3dTcGFuSW5kZXgiLCJmaXJzdFJvdyIsImZpcnN0Um93U3BhbnMiLCJoYXNDaGlsZHJlbiIsInJlc291cmNlRmllbGRzIiwibWF4RGVwdGgiLCJyZXNvdXJjZU5vZGVzIiwiYnVpbGRSZXNvdXJjZU5vZGVzIiwiYnVpbHROb2RlcyIsInJlc291cmNlTm9kZSIsImluc2VydFJlc291cmNlTm9kZSIsIm5vZGVIYXNoIiwiYnVpbGRSZXNvdXJjZUZpZWxkcyIsImluc2VydFJlc291cmNlTm9kZUluU2libGluZ3MiLCJub2RlcyIsImdyb3VwTm9kZSIsImVuc3VyZUdyb3VwTm9kZXMiLCJncm91cFNwZWMiLCJncm91cFZhbHVlIiwibmV3R3JvdXBJbmRleCIsInNpYmxpbmdzIiwiaXNHcm91cHNFcXVhbCIsImdyb3VwMCIsImdyb3VwMSIsIm1haW4iLCJSb3ciLCJzcHJlYWRzaGVldFBhcmVudCIsInNwcmVhZHNoZWV0TmV4dFNpYmxpbmciLCJ0aW1lQXhpc1BhcmVudCIsInRpbWVBeGlzTmV4dFNpYmxpbmciLCJzcHJlYWRzaGVldFRyIiwidGltZUF4aXNUciIsInVwZGF0ZUV4cGFuZGVySWNvbiIsImNsZWFyRXhwYW5kZXJJY29uIiwidXBkYXRlVHJSZXNvdXJjZUlkIiwidHIiLCJHcm91cFJvdyIsIl9yZW5kZXJDZWxscyIsInJlbmRlckNlbGxzIiwidW5yZW5kZXJDZWxscyIsIl91cGRhdGVFeHBhbmRlckljb24iLCJvbkV4cGFuZGVyQ2xpY2siLCJzcHJlYWRzaGVldENvbENudCIsInNwcmVhZHNoZWV0Q29udGVudEVsIiwicmVuZGVyU3ByZWFkc2hlZXRDb250ZW50Iiwic3ByZWFkc2hlZXRIZWlnaHRFbCIsImV4cGFuZGVySWNvbkVsIiwidGltZUF4aXNIZWlnaHRFbCIsInJlbmRlckNlbGxUZXh0IiwiZ2V0SGVpZ2h0RWxzIiwiU3ByZWFkc2hlZXRSb3ciLCJfcmVuZGVyUm93IiwicmVuZGVyUm93IiwidW5yZW5kZXJSb3ciLCJfdXBkYXRlVHJSZXNvdXJjZUlkIiwiY29sU3BlY3MiLCJtYWluVGQiLCJjb2xTcGVjIiwiaXNNYWluIiwicmVuZGVySWNvbkh0bWwiLCJ0ZCIsInJvd3NwYW4iLCJoZWlnaHRFbCIsImV4cGFuZGVyRWwiLCJSZXNvdXJjZVJvdyIsInRpbWVBeGlzIiwic3ByZWFkc2hlZXRSb3ciLCJpbm5lckNvbnRhaW5lckVsIiwibGFuZSIsIlRpbWVsaW5lTGFuZSIsIkNPTF9NSU5fV0lEVEgiLCJTcHJlYWRzaGVldEhlYWRlciIsInJlc2l6YWJsZXMiLCJjb2xXaWR0aHMiLCJ0YWJsZUVsIiwicmVzaXphYmxlIiwiY29sVGFncyIsInN1cGVySGVhZGVyVGV4dCIsIm8iLCJpc0xhc3QiLCJ0aEVscyIsImNvbEVscyIsInJlc2l6ZXJFbHMiLCJpbml0Q29sUmVzaXppbmciLCJFbGVtZW50RHJhZ2dpbmdJbXBsIiwiaGFuZGxlRWwiLCJjb2xJbmRleCIsImRyYWdnaW5nIiwic3RhcnRXaWR0aCIsIlNwcmVhZHNoZWV0IiwiaGVhZFBhcmVudEVsIiwiYm9keVBhcmVudEVsIiwiSGVhZGVyQm9keUxheW91dCIsImhlYWRlckVuaGFuY2VkU2Nyb2xsZXIiLCJoZWFkZXJTY3JvbGxlciIsImVuaGFuY2VkU2Nyb2xsIiwiYm9keUVuaGFuY2VkU2Nyb2xsZXIiLCJib2R5U2Nyb2xsZXIiLCJjYW52YXMiLCJhcHBseUNvbFdpZHRocyIsImJvZHlDb250YWluZXJFbCIsImJvZHlDb2xHcm91cCIsImJvZHlUYm9keSIsInJlbmRlckNvbFRhZ3MiLCJib2R5Q29sRWxzIiwiY29sU3BlY3NfMSIsInRvdGFsSGVpZ2h0IiwiY29sV2lkdGgiLCJoZWFkRWwiLCJib2R5RWwiLCJzdHlsZVZhbCIsIk1JTl9SRVNPVVJDRV9BUkVBX1dJRFRIIiwiUmVzb3VyY2VUaW1lbGluZVZpZXciLCJpc1N0aWNreVNjcm9sbERpcnR5Iiwicm93Tm9kZXMiLCJyb3dDb21wb25lbnRzIiwicm93Q29tcG9uZW50c0J5SWQiLCJyZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5ncyIsImhhc1Jlc291cmNlQnVzaW5lc3NIb3VycyIsImhhc05lc3RpbmciLCJfdXBkYXRlSGFzTmVzdGluZyIsInVwZGF0ZUhhc05lc3RpbmciLCJhbGxDb2xTcGVjcyIsImRlZmF1bHRMYWJlbFRleHQiLCJwbGFpbkNvbFNwZWNzIiwiZ3JvdXBDb2xTcGVjcyIsImlzSEdyb3VwaW5nIiwiYWxsQ29sU3BlY3NfMSIsImhHcm91cEZpZWxkIiwiYWxsT3JkZXJTcGVjcyIsInBsYWluT3JkZXJTcGVjcyIsImFsbE9yZGVyU3BlY3NfMSIsIm9yZGVyU3BlYyIsImlzR3JvdXAiLCJncm91cFNwZWNzXzEiLCJyZW5kZXJTa2VsZXRvbkh0bWwiLCJyZXNvdXJjZUFyZWFIZWFkRWwiLCJzZXRSZXNvdXJjZUFyZWFXaWR0aCIsImluaXRSZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5nIiwibWlzY0hlaWdodCIsInNwcmVhZHNoZWV0IiwiVGltZUF4aXMiLCJ0aW1lQXhpc1Jvd0NvbnRhaW5lciIsInRpbWVBeGlzVGJvZHkiLCJiZ0VsIiwiYm9keVNjcm9sbEpvaW5lciIsIlNjcm9sbEpvaW5lciIsInNwcmVhZHNoZWV0Qm9keVN0aWNreVNjcm9sbGVyIiwiU3RpY2t5U2Nyb2xsZXIiLCJzbGF0cyIsIm5ld1Jvd05vZGVzIiwiZGlmZlJvd3MiLCJyZW5kZXJSb3dzIiwiaXNOZXN0aW5nIiwibmV3Tm9kZXMiLCJvbGROb2RlcyIsIm9sZExlbiIsIm9sZEluZGV4SGFzaCIsIm9sZEkiLCJuZXdJIiwibmV3Tm9kZSIsIm9sZElGb3VuZCIsInJlbW92ZVJvd3MiLCJhZGRSb3ciLCJyb3dOb2RlIiwibmV4dENvbXBvbmVudCIsIm5ld0NvbXBvbmVudCIsImJ1aWxkQ2hpbGRDb21wb25lbnQiLCJzdGFydEluZGV4Iiwib2xkUm93Tm9kZXMiLCJyb3dDb21wb25lbnQiLCJzcHJlYWRzaGVldFRib2R5Iiwic3ByZWFkc2hlZXROZXh0IiwidGltZUF4aXNOZXh0IiwiZmFsbGJhY2tCdXNpbmVzc0hvdXJzIiwiaXNCYXNlU2l6aW5nIiwic3luY0hlYWRIZWlnaHRzIiwicm93U2l6aW5nQ250IiwidXBkYXRlUm93U2l6ZXMiLCJzY3JvbGxKb2luZXIiLCJyb3dQb3NpdGlvbnMiLCJzcHJlYWRzaGVldEhlYWRFbCIsInRpbWVBeGlzSGVhZEVsIiwiZGlydHlSb3dDb21wb25lbnRzIiwiZWxBcnJheXMiLCJlbEFycmF5c18xIiwiZWxBcnJheSIsImVsQXJyYXlfMSIsImRpcnR5Um93Q29tcG9uZW50c18xIiwibWF4SGVpZ2h0cyIsIm1heEhlaWdodCIsImVsQXJyYXlfMiIsInJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmciLCJxdWVyeVJlc291cmNlU2Nyb2xsIiwiYXBwbHlSZXNvdXJjZVNjcm9sbCIsInVwZGF0ZVN0aWNreVNjcm9sbGVycyIsInNjcm9sbGVyVG9wIiwiZWxCb3R0b20iLCJyb3dJZCIsImlubmVyVG9wIiwicm93UmVjdCIsInJvd0luZGV4Iiwic2xhdEhpdCIsInBvc2l0aW9uVG9IaXQiLCJsYXllciIsIndpZHRoVmFsIiwicmVzb3VyY2VBcmVhRGl2aWRlckVscyIsImRyYWdTdGFydFdpZHRoIiwidmlld1dpZHRoIiwibmV3V2lkdGgiLCJub2Rlc18xIiwiUmVzb3VyY2VDb21tb25QbHVnaW4iLCJUaW1lbGluZVBsdWdpbiIsInJlc291cmNlVGltZWxpbmUiLCJyZXNvdXJjZXNJbml0aWFsbHlFeHBhbmRlZCIsImV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0IiwicmVzb3VyY2VUaW1lbGluZURheSIsInJlc291cmNlVGltZWxpbmVXZWVrIiwicmVzb3VyY2VUaW1lbGluZU1vbnRoIiwicmVzb3VyY2VUaW1lbGluZVllYXIiLCJTY3JvbGxlckNhbnZhcyIsImd1dHRlcnMiLCJzZXRHdXR0ZXJzIiwic2V0V2lkdGgiLCJzZXRNaW5XaWR0aCIsIm1pbldpZHRoIiwiY2xlYXJXaWR0aCIsIkVuaGFuY2VkU2Nyb2xsZXIiLCJyZXBvcnRTY3JvbGwiLCJpc1Njcm9sbGluZyIsInJlcG9ydFNjcm9sbFN0YXJ0IiwiaXNNb3ZpbmciLCJyZXF1ZXN0TW92aW5nRW5kIiwiaXNUb3VjaGluZyIsInJlcG9ydFRvdWNoU3RhcnQiLCJyZXBvcnRUb3VjaEVuZCIsImlzVG91Y2hTY3JvbGxFbmFibGVkIiwidW5iaW5kUHJldmVudFRvdWNoU2Nyb2xsIiwicmVwb3J0U2Nyb2xsRW5kIiwicmVwb3J0TW92aW5nRW5kIiwiZGlzYWJsZVRvdWNoU2Nyb2xsIiwiYmluZFByZXZlbnRUb3VjaFNjcm9sbCIsImVuYWJsZVRvdWNoU2Nyb2xsIiwicHJldmVudFRvdWNoU2Nyb2xsSGFuZGxlciIsInBhc3NpdmUiLCJnZXRSdGxTY3JvbGxTeXN0ZW0iLCJnZXRTY3JvbGxGcm9tTGVmdCIsIl9ydGxTY3JvbGxTeXN0ZW0iLCJkZXRlY3RSdGxTY3JvbGxTeXN0ZW0iLCJzeXN0ZW0iLCJDbGlwcGVkU2Nyb2xsZXIiLCJpc0hTY3JvbGxiYXJzQ2xpcHBlZCIsImlzVlNjcm9sbGJhcnNDbGlwcGVkIiwic2Nyb2xsRWwiLCJ3aWR0aHMiLCJheGlzIiwic2Nyb2xsZXJzIiwic2Nyb2xsZXIiLCJpbml0U2Nyb2xsZXIiLCJvblNjcm9sbCIsImFzc2lnbk1hc3RlclNjcm9sbGVyIiwiZXZOYW1lIiwibWFzdGVyU2Nyb2xsZXIiLCJvdGhlclNjcm9sbGVyIiwidW5hc3NpZ25NYXN0ZXJTY3JvbGxlciIsImFsbFdpZHRocyIsIm1heExlZnQiLCJtYXhSaWdodCIsIm1heFRvcCIsIm1heEJvdHRvbSIsImFsbFdpZHRoc18xIiwiaGVhZGVyQ29udGFpbmVyRWwiLCJ2ZXJ0aWNhbFNjcm9sbCIsImJvZHlIZWlnaHQiLCJxdWVyeUhlYWRIZWlnaHQiLCJUaW1lbGluZUhlYWRlciIsInREYXRlUHJvZmlsZSIsImNlbGxSb3dzIiwibGFzdFJvdyIsImlzQ2hyb25vIiwibGFiZWxJbnRlcnZhbCIsIm9uZURheSIsInNsb3RDbnQiLCJjZWxsUm93c18xIiwicm93Q2VsbHNfMSIsImNlbGwiLCJoZWFkZXJDZWxsQ2xhc3NOYW1lcyIsImlzV2Vla1N0YXJ0IiwiaXNUaW1lU2NhbGUiLCJzcGFuSHRtbCIsInNsYXRDb2xFbHMiLCJpbm5lckVscyIsIlRpbWVsaW5lU2xhdHMiLCJzbG90RGF0ZXMiLCJpc1dlZWtTdGFydHMiLCJzbGF0Q2VsbEh0bWwiLCJzbGF0RWxzIiwib3V0ZXJDb29yZENhY2hlIiwiaW5uZXJDb29yZENhY2hlIiwiaXNFbSIsIm5vcm1hbGl6ZWRSYW5nZSIsInNsYXRJbmRleCIsInNsYXRXaWR0aCIsInBhcnRpYWwiLCJsb2NhbFNuYXBJbmRleCIsInNuYXBzUGVyU2xvdCIsInNuYXBEdXJhdGlvbiIsIk1JTl9BVVRPX0xBQkVMUyIsIk1BWF9BVVRPX1NMT1RTX1BFUl9MQUJFTCIsIk1BWF9BVVRPX0NFTExTIiwiTUFYX1RJTUVMSU5FX1NMT1RTIiwiU1RPQ0tfU1VCX0RVUkFUSU9OUyIsImJ1aWxkVGltZWxpbmVEYXRlUHJvZmlsZSIsInF1ZXJ5RHVyYXRpb25PcHRpb24iLCJ2YWxpZGF0ZUxhYmVsQW5kU2xvdCIsImVuc3VyZUxhYmVsSW50ZXJ2YWwiLCJlbnN1cmVTbG90RHVyYXRpb24iLCJyYXdGb3JtYXRzIiwiY29tcHV0ZUhlYWRlckZvcm1hdHMiLCJoZWFkZXJGb3JtYXRzIiwicmF3Rm9ybWF0Iiwic2xvdFVuaXQiLCJlbXBoYXNpemVXZWVrcyIsImN1cnJlbnRSYW5nZUFzIiwicmF3U25hcER1cmF0aW9uIiwidGltZVdpbmRvd01zIiwibm9ybWFsaXplZFN0YXJ0Iiwibm9ybWFsaXplRGF0ZSIsIm5vcm1hbGl6ZWRFbmQiLCJzbmFwSW5kZXgiLCJzbmFwRGlmZiIsInNuYXBEaWZmVG9JbmRleCIsInNuYXBJbmRleFRvRGlmZiIsInNuYXBDbnQiLCJidWlsZElzV2Vla1N0YXJ0cyIsImJ1aWxkQ2VsbFJvd3MiLCJub3JtYWxEYXRlIiwibm9ybWFsaXplUmFuZ2UiLCJkYXlSYW5nZSIsInRpbWVNcyIsImxhYmVsQ250Iiwic2xvdHNQZXJMYWJlbCIsIlNUT0NLX1NVQl9EVVJBVElPTlNfMSIsInRyeUxhYmVsSW50ZXJ2YWwiLCJTVE9DS19TVUJfRFVSQVRJT05TXzIiLCJTVE9DS19TVUJfRFVSQVRJT05TXzMiLCJ0cnlTbG90RHVyYXRpb24iLCJmb3JtYXQxIiwiZm9ybWF0MiIsIndlZWtOdW1iZXJzVmlzaWJsZSIsImZvcm1hdDAiLCJwcmV2V2Vla051bWJlciIsInNsb3REYXRlc18xIiwic2xvdERhdGUiLCJ3ZWVrTnVtYmVyIiwiZm9ybWF0cyIsInJvd1VuaXRzIiwibGVhZGluZ0NlbGwiLCJpc1N1cGVyUm93IiwibmV3Q2VsbCIsImJ1aWxkQ2VsbE9iamVjdCIsIndlZWtTdGFydCIsInJvd1VuaXQiLCJUaW1lbGluZU5vd0luZGljYXRvciIsImhlYWRQYXJlbnQiLCJib2R5UGFyZW50IiwiY29vcmQiLCJzdHlsZVByb3BzIiwiYXJyb3dFbCIsImxpbmVFbCIsIlNUSUNLWV9QUk9QX1ZBTCIsImNvbXB1dGVTdGlja3lQcm9wVmFsIiwiSVNfTVNfRURHRSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIklTX1NBRkFSSSIsIlNUSUNLWV9DTEFTU05BTUUiLCJ1c2luZ1JlbGF0aXZlIiwiZWxHZW9tcyIsInF1ZXJ5RWxHZW9tcyIsInZpZXdwb3J0V2lkdGgiLCJlbERlc3RpbmF0aW9ucyIsImNvbXB1dGVFbERlc3RpbmF0aW9ucyIsImFzc2lnblJlbGF0aXZlUG9zaXRpb25zIiwiYXNzaWduU3RpY2t5UG9zaXRpb25zIiwiY2FudmFzT3JpZ2luIiwiZWxzXzEiLCJwYXJlbnRCb3VuZCIsImVsUmVjdCIsImNvbXB1dGVkU3R5bGVzIiwiY29tcHV0ZWRUZXh0QWxpZ24iLCJ0ZXh0QWxpZ24iLCJpbnRlbmRlZFRleHRBbGlnbiIsIm5hdHVyYWxCb3VuZCIsInBhcnNlRmxvYXQiLCJoYXNBdHRyaWJ1dGUiLCJ2aWV3cG9ydExlZnQiLCJ2aWV3cG9ydFRvcCIsInZpZXdwb3J0UmlnaHQiLCJlbEdlb20iLCJkZXN0TGVmdCIsImRlc3RUb3AiLCJzdGlja3lMZWZ0IiwiaGVhZFN0aWNreVNjcm9sbGVyIiwiYm9keVN0aWNreVNjcm9sbGVyIiwibm93SW5kaWNhdG9yIiwiZGF0ZVRvQ29vcmQiLCJhcHBseVNsb3RXaWR0aCIsImNvbXB1dGVTbG90V2lkdGgiLCJzbG90V2lkdGgiLCJjb21wdXRlRGVmYXVsdFNsb3RXaWR0aCIsImhlYWRpbmdDZWxsV2lkdGgiLCJjb250YWluZXJXaWR0aCIsImNvbnRhaW5lck1pbldpZHRoIiwibm9uTGFzdFNsb3RXaWR0aCIsImF2YWlsYWJsZVdpZHRoIiwiY29tcHV0ZURhdGVTbmFwQ292ZXJhZ2UiLCJzbmFwRGlmZkludCIsInNuYXBDb3ZlcmFnZSIsInNsb3RDb3ZlcmFnZSIsInNsb3RJbmRleCIsInJhbmdlVG9Db29yZHMiLCJUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyIiwibWFzdGVyQ29udGFpbmVyRWwiLCJpc1Jlc2l6YWJsZUZyb21TdGFydCIsImlzUmVzaXphYmxlRnJvbUVuZCIsInRpbWVUZXh0IiwiY29vcmRzIiwic2Vnc180IiwiYnVpbGRTZWdMZXZlbHMiLCJjb21wdXRlT2Zmc2V0Rm9yU2VncyIsInNlZ3NfNSIsInNlZ0xldmVscyIsInNlZ3NfNiIsInVucGxhY2VkU2VnIiwiYWJvdmUiLCJsZXZlbCIsImlzTGV2ZWxDb2xsaXNpb24iLCJwbGFjZWRTZWciLCJ0aW1lUm93U2Vnc0NvbGxpZGUiLCJiZWxvd1NlZyIsInNlZ3NfNyIsImNvbXB1dGVPZmZzZXRGb3JTZWciLCJzZWcwIiwic2VnMSIsIlRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlciIsImZnQ29udGFpbmVyRWwiLCJiZ0NvbnRhaW5lckVsIiwic2xpY2VyIiwiVGltZWxpbmVMYW5lU2xpY2VyIiwiX3JlbmRlckV2ZW50RHJhZyIsIl91bnJlbmRlckV2ZW50RHJhZyIsIl9yZW5kZXJFdmVudFJlc2l6ZSIsIl91bnJlbmRlckV2ZW50UmVzaXplIiwiZmlsbFJlbmRlcmVyIiwiZXZlbnRSZW5kZXJlciIsIm1pcnJvclJlbmRlcmVyIiwicmVuZGVyQmdFdmVudHMiLCJyZW5kZXJGZ0V2ZW50cyIsInNsaWNlZFByb3BzIiwic2Vnc0ZvckhpZ2hsaWdodCIsIlRpbWVsaW5lVmlldyIsInRpbWVsaW5lIiwidGltZWxpbmVEYXkiLCJ0aW1lbGluZVdlZWsiLCJ0aW1lbGluZU1vbnRoIiwidGltZWxpbmVZZWFyIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FB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LEVBQUU7QUFBNUMsS0FGVTtBQXJDNEIsR0FBekIsQ0FBZjtBQTBDQTdCLFVBQVEsQ0FBQzhCLE1BQVQ7QUFDQSxDQTlDRCxFOzs7Ozs7Ozs7Ozs7QUN6Q0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFNQTtBQUNBO0FBQ0EsSUFBSUMsZUFBZSxHQUFHO0FBQ2xCQyxXQUFTLEVBQUUsSUFE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QStGaEMxMUIsdURBL0ZnQyxDQUFsQzs7QUFpR0EsSUFBSXFhLElBQUksR0FBRzNnQyx1RUFBWSxDQUFDO0FBQ3BCam1DLGFBQVcsRUFBRSxhQURPO0FBRXBCQyxPQUFLLEVBQUU7QUFDSGlpRixZQUFRLEVBQUU7QUFDTjlxQyxXQUFLLEVBQUU2cUMsWUFERDtBQUVOdFAsNkJBQXVCLEVBQUUsSUFGbkIsQ0FFd0I7O0FBRnhCLEtBRFA7QUFLSHdQLGVBQVcsRUFBRTtBQUNUaGlGLFVBQUksRUFBRSxVQURHO0FBRVRFLGNBQVEsRUFBRTtBQUFFQyxZQUFJLEVBQUU7QUFBUjtBQUZELEtBTFY7QUFTSDhoRixnQkFBWSxFQUFFO0FBQ1ZqaUYsVUFBSSxFQUFFLFVBREk7QUFFVkUsY0FBUSxFQUFFO0FBQUVnUyxhQUFLLEVBQUU7QUFBVDtBQUZBLEtBVFg7QUFhSGd3RSxpQkFBYSxFQUFFO0FBQ1hsaUYsVUFBSSxFQUFFLFVBREs7QUFFWEUsY0FBUSxFQUFFO0FBQUUwTixjQUFNLEVBQUU7QUFBVjtBQUZDLEtBYlo7QUFpQkh1MEUsZ0JBQVksRUFBRTtBQUNWbmlGLFVBQUksRUFBRSxVQURJO0FBRVZFLGNBQVEsRUFBRTtBQUFFeU4sYUFBSyxFQUFFO0FBQVQ7QUFGQTtBQWpCWDtBQUZhLENBQUQsQ0FBdkI7QUEwQmU4NEQsbUVBQWY7Ozs7Ozs7Ozs7OztBQzc3REEsd0IiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9kZXZlbG9wbWVudC9hZG1pbi9qcy9zY3JpcHQuanNcIik7XG4iLCIvLyBAVE9ETyBUaGlzIGlzIGFuIGV4YW1wbGUgY29uc29sZS5sb2coKS4gUmVtb3ZlIGZvciBwcm9kdWN0aW9uXG5jb25zb2xlLmxvZygndGVzdGFkbWluLmpzJyk7IiwiXHQvKipcblx0ICogQWxsIG9mIHRoZSBjb2RlIGZvciB5b3VyIGFkbWluLWZhY2luZyBKYXZhU2NyaXB0IHNvdXJjZVxuXHQgKiBzaG91bGQgcmVzaWRlIGluIHRoZSBmaWxlIFwiZGV2ZWxvcG1lbnQvYWRtaW4vanMvc2NyaXB0LmpzXCIuXG5cdCAqXG5cdCAqIE5vdGU6IEl0IGhhcyBiZWVuIGFzc3VtZWQgeW91IHdpbGwgd3JpdGUgalF1ZXJ5IGNvZGUgaGVyZSwgc28gdGhlXG5cdCAqICQgZnVuY3Rpb24gcmVmZXJlbmNlIGhhcyBiZWVuIHByZXBhcmVkIChpbXBvcnQgJCBmcm9tICdqcXVlcnknKWZvciB1c2FnZSB3aXRoaW4gdGhlIHNjb3BlXG5cdCAqIG9mIHRoaXMgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIFRoaXMgZW5hYmxlcyB5b3UgdG8gZGVmaW5lIGhhbmRsZXJzLCBmb3Igd2hlbiB0aGUgRE9NIGlzIHJlYWR5OlxuXHQgKlxuXHQgKiAkKGZ1bmN0aW9uKCkge1xuXHQgKlxuXHQgKiB9KTtcblx0ICpcblx0ICogV2hlbiB0aGUgd2luZG93IGlzIGxvYWRlZDpcblx0ICpcblx0ICogJCggd2luZG93ICkubG9hZChmdW5jdGlvbigpIHtcblx0ICpcblx0ICogfSk7XG5cdCAqXG5cdCAqIC4uLmFuZC9vciBvdGhlciBwb3NzaWJpbGl0aWVzLlxuXHQgKlxuXHQgKiBJZGVhbGx5LCBpdCBpcyBub3QgY29uc2lkZXJlZCBiZXN0IHByYWN0aXNlIHRvIGF0dGFjaCBtb3JlIHRoYW4gYVxuXHQgKiBzaW5nbGUgRE9NLXJlYWR5IG9yIHdpbmRvdy1sb2FkIGhhbmRsZXIgZm9yIGEgcGFydGljdWxhciBwYWdlLlxuXHQgKiBBbHRob3VnaCBzY3JpcHRzIGluIHRoZSBXb3JkUHJlc3MgY29yZSwgUGx1Z2lucyBhbmQgVGhlbWVzIG1heSBiZVxuXHQgKiBwcmFjdGlzaW5nIHRoaXMsIHdlIHNob3VsZCBzdHJpdmUgdG8gc2V0IGEgYmV0dGVyIGV4YW1wbGUgaW4gb3VyIG93biB3b3JrLlxuXHQgKlxuXHQgKiBUaGUgZmlsZSBpcyBlbnF1ZXVlZCBmcm9tIHNyYy9hZG1pbi9jbGFzcy1hc3NldHMucGhwLlxuXHQgKi9cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG4vLyBAVE9ETyBUaGlzIGlzIGFuIGV4YW1wbGUgaW1wb3J0LiBSZW1vdmUgZm9yIHByb2R1Y3Rpb25cbmltcG9ydCAnLi9jb21wb25lbnRzL3Rlc3QnO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICdAZnVsbGNhbGVuZGFyL2NvcmUnO1xuaW1wb3J0IHJlc291cmNlVGltZWxpbmVQbHVnaW4gZnJvbSAnQGZ1bGxjYWxlbmRhci9yZXNvdXJjZS10aW1lbGluZSc7XG5cbmNvbnN0IHsgX18sIF94LCBfbiwgX254IH0gPSB3cC5pMThuO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAvLyBqUXVlcnkgbWV0aG9kcyBnbyBoZXJlLi4uXG59KTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkge1xuXHR2YXIgc2V0TG9jYWxlID0gJ2VuJztcblx0bGV0IGNhbGVuZGFyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9lZWVCb29raW5nQ2FsZW5kYXInKTtcblx0bGV0IGNhbGVuZGFyID0gbmV3IENhbGVuZGFyKGNhbGVuZGFyRWwsIHtcblx0XHRzY2hlZHVsZXJMaWNlbnNlS2V5OiAnR1BMLU15LVByb2plY3QtSXMtT3Blbi1Tb3VyY2UnLFxuXHRcdHBsdWdpbnM6IFsgcmVzb3VyY2VUaW1lbGluZVBsdWdpbiBdLFxuXHRcdGFzcGVjdFJhdGlvOiAxLjUsXG5cdFx0cmVzb3VyY2VBcmVhV2lkdGg6ICcxMCUnLFxuXHRcdHNsb3REdXJhdGlvbjogJzEyOjAwJyxcblx0XHRsb2NhbGU6IHNldExvY2FsZSxcblx0XHRoZWFkZXI6IHtcblx0XHRcdGxlZnQ6ICdhZGRSb29tLCB0b2RheSwgcHJldiwgbmV4dCcsXG5cdFx0XHRjZW50ZXI6ICd0aXRsZScsXG5cdFx0XHRyaWdodDogJ3RpbWVsaW5lVGhpcnR5RGF5cywgbW9udGgnLFxuXHRcdH0sXG5cdFx0Y3VzdG9tQnV0dG9uczoge1xuXHRcdFx0YWRkUm9vbToge1xuXHRcdFx0XHR0ZXh0OiBfXygnQWRkIHJvb20nLCAnam9lZWUtYm9va2luZycpXG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVmYXVsdFZpZXc6ICd0aW1lbGluZVRoaXJ0eURheXMnLFxuXHRcdHZpZXdzOiB7XG5cdFx0XHR0aW1lbGluZVRoaXJ0eURheXM6IHtcblx0XHRcdFx0dHlwZTogJ3Jlc291cmNlVGltZWxpbmUnLFxuXHRcdFx0XHRsYWJlbFRleHQ6ICdUZXN0Jyxcblx0XHRcdFx0ZHVyYXRpb246IHsgZGF5czogMzEgfVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVzb3VyY2VDb2x1bW5zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGxhYmVsVGV4dDogX18oICdSb29tJywgJ2pvZWVlLWJvb2tpbmcnICksXG5cdFx0XHRcdGZpZWxkOiAndGl0bGUnLFxuXHRcdFx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRsYWJlbFRleHQ6IF9fKCAnQ2FwYWNpdHknLCAnam9lZWUtYm9va2luZycgKSxcblx0XHRcdFx0ZmllbGQ6ICdjYXBhY2l0eSdcblx0XHRcdH1cblx0XHRdLFxuXHRcdHJlc291cmNlczogW1xuXHRcdFx0eyBpZDogJ2EnLCB0aXRsZTogJ0F1ZGl0b3JpdW0gQScsIGNhcGFjaXR5OiA0MCB9LFxuXHRcdFx0eyBpZDogJ2InLCB0aXRsZTogJ0F1ZGl0b3JpdW0gQicsIGNhcGFjaXR5OiA2MCB9XG5cdFx0XVxuXHR9KTtcblx0Y2FsZW5kYXIucmVuZGVyKCk7XG59KTtcbiIsIi8qIVxuRnVsbENhbGVuZGFyIENvcmUgUGFja2FnZSB2NC4zLjFcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9cbihjKSAyMDE5IEFkYW0gU2hhd1xuKi9cblxuLy8gQ3JlYXRpbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBlbGVtZW50UHJvcEhhc2ggPSB7XG4gICAgY2xhc3NOYW1lOiB0cnVlLFxuICAgIGNvbFNwYW46IHRydWUsXG4gICAgcm93U3BhbjogdHJ1ZVxufTtcbnZhciBjb250YWluZXJUYWdIYXNoID0ge1xuICAgICc8dHInOiAndGJvZHknLFxuICAgICc8dGQnOiAndHInXG59O1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBhdHRycywgY29udGVudCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICBhcHBseVN0eWxlKGVsLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudFByb3BIYXNoW2F0dHJOYW1lXSkge1xuICAgICAgICAgICAgICAgIGVsW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IGNvbnRlbnQ7IC8vIHNob3J0Y3V0LiBubyBuZWVkIHRvIHByb2Nlc3MgSFRNTCBpbiBhbnkgd2F5XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG59XG5mdW5jdGlvbiBodG1sVG9FbGVtZW50KGh0bWwpIHtcbiAgICBodG1sID0gaHRtbC50cmltKCk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoY29tcHV0ZUNvbnRhaW5lclRhZyhodG1sKSk7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xufVxuZnVuY3Rpb24gaHRtbFRvRWxlbWVudHMoaHRtbCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChodG1sVG9Ob2RlTGlzdChodG1sKSk7XG59XG5mdW5jdGlvbiBodG1sVG9Ob2RlTGlzdChodG1sKSB7XG4gICAgaHRtbCA9IGh0bWwudHJpbSgpO1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbXB1dGVDb250YWluZXJUYWcoaHRtbCkpO1xuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBjb250YWluZXIuY2hpbGROb2Rlcztcbn1cbi8vIGFzc3VtZXMgaHRtbCBhbHJlYWR5IHRyaW1tZWQgYW5kIHRhZyBuYW1lcyBhcmUgbG93ZXJjYXNlXG5mdW5jdGlvbiBjb21wdXRlQ29udGFpbmVyVGFnKGh0bWwpIHtcbiAgICByZXR1cm4gY29udGFpbmVyVGFnSGFzaFtodG1sLnN1YnN0cigwLCAzKSAvLyBmYXN0ZXIgdGhhbiB1c2luZyByZWdleFxuICAgIF0gfHwgJ2Rpdic7XG59XG5mdW5jdGlvbiBhcHBlbmRUb0VsZW1lbnQoZWwsIGNvbnRlbnQpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGNoaWxkTm9kZXNbaV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByZXBlbmRUb0VsZW1lbnQocGFyZW50LCBjb250ZW50KSB7XG4gICAgdmFyIG5ld0VscyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgdmFyIGFmdGVyRWwgPSBwYXJlbnQuZmlyc3RDaGlsZCB8fCBudWxsOyAvLyBpZiBubyBmaXJzdENoaWxkLCB3aWxsIGFwcGVuZCB0byBlbmQsIGJ1dCB0aGF0J3Mgb2theSwgYi9jIHRoZXJlIHdlcmUgbm8gY2hpbGRyZW5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0Vscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld0Vsc1tpXSwgYWZ0ZXJFbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXJFbGVtZW50KHJlZkVsLCBjb250ZW50KSB7XG4gICAgdmFyIG5ld0VscyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgdmFyIGFmdGVyRWwgPSByZWZFbC5uZXh0U2libGluZyB8fCBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlZkVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0Vsc1tpXSwgYWZ0ZXJFbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplQ29udGVudChjb250ZW50KSB7XG4gICAgdmFyIGVscztcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVscyA9IGh0bWxUb0VsZW1lbnRzKGNvbnRlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250ZW50IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICBlbHMgPSBbY29udGVudF07XG4gICAgfVxuICAgIGVsc2UgeyAvLyBOb2RlW10gb3IgTm9kZUxpc3RcbiAgICAgICAgZWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBlbHM7XG59XG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxufVxuLy8gUXVlcnlpbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdFxudmFyIG1hdGNoZXNNZXRob2QgPSBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3I7XG52YXIgY2xvc2VzdE1ldGhvZCA9IEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHwgZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgLy8gcG9seWZpbGxcbiAgICB2YXIgZWwgPSB0aGlzO1xuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBpZiAoZWxlbWVudE1hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgIH0gd2hpbGUgKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxKTtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5mdW5jdGlvbiBlbGVtZW50Q2xvc2VzdChlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdE1ldGhvZC5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbWF0Y2hlc01ldGhvZC5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG4vLyBhY2NlcHRzIG11bHRpcGxlIHN1YmplY3QgZWxzXG4vLyByZXR1cm5zIGEgcmVhbCBhcnJheS4gZ29vZCBmb3IgbWV0aG9kcyBsaWtlIGZvckVhY2hcbmZ1bmN0aW9uIGZpbmRFbGVtZW50cyhjb250YWluZXIsIHNlbGVjdG9yKSB7XG4gICAgdmFyIGNvbnRhaW5lcnMgPSBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IFtjb250YWluZXJdIDogY29udGFpbmVyO1xuICAgIHZhciBhbGxNYXRjaGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gY29udGFpbmVyc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXRjaGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBhbGxNYXRjaGVzLnB1c2gobWF0Y2hlc1tqXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbE1hdGNoZXM7XG59XG4vLyBhY2NlcHRzIG11bHRpcGxlIHN1YmplY3QgZWxzXG4vLyBvbmx5IHF1ZXJpZXMgZGlyZWN0IGNoaWxkIGVsZW1lbnRzXG5mdW5jdGlvbiBmaW5kQ2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICAgIHZhciBwYXJlbnRzID0gcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBbcGFyZW50XSA6IHBhcmVudDtcbiAgICB2YXIgYWxsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IHBhcmVudHNbaV0uY2hpbGRyZW47IC8vIG9ubHkgZXZlciBlbGVtZW50c1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2pdO1xuICAgICAgICAgICAgaWYgKCFzZWxlY3RvciB8fCBlbGVtZW50TWF0Y2hlcyhjaGlsZE5vZGUsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIGFsbE1hdGNoZXMucHVzaChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbGxNYXRjaGVzO1xufVxuLy8gQXR0cmlidXRlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gZm9yY2VDbGFzc05hbWUoZWwsIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgIGlmIChib29sKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG59XG4vLyBTdHlsZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIFBJWEVMX1BST1BfUkUgPSAvKHRvcHxsZWZ0fHJpZ2h0fGJvdHRvbXx3aWR0aHxoZWlnaHQpJC9pO1xuZnVuY3Rpb24gYXBwbHlTdHlsZShlbCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICBhcHBseVN0eWxlUHJvcChlbCwgcHJvcE5hbWUsIHByb3BzW3Byb3BOYW1lXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlTdHlsZVByb3AoZWwsIG5hbWUsIHZhbCkge1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICBlbC5zdHlsZVtuYW1lXSA9ICcnO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBQSVhFTF9QUk9QX1JFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWwgKyAncHgnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2ludEluc2lkZVJlY3QocG9pbnQsIHJlY3QpIHtcbiAgICByZXR1cm4gcG9pbnQubGVmdCA+PSByZWN0LmxlZnQgJiZcbiAgICAgICAgcG9pbnQubGVmdCA8IHJlY3QucmlnaHQgJiZcbiAgICAgICAgcG9pbnQudG9wID49IHJlY3QudG9wICYmXG4gICAgICAgIHBvaW50LnRvcCA8IHJlY3QuYm90dG9tO1xufVxuLy8gUmV0dXJucyBhIG5ldyByZWN0YW5nbGUgdGhhdCBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gcmVjdGFuZ2xlcy4gSWYgdGhleSBkb24ndCBpbnRlcnNlY3QsIHJldHVybnMgZmFsc2VcbmZ1bmN0aW9uIGludGVyc2VjdFJlY3RzKHJlY3QxLCByZWN0Mikge1xuICAgIHZhciByZXMgPSB7XG4gICAgICAgIGxlZnQ6IE1hdGgubWF4KHJlY3QxLmxlZnQsIHJlY3QyLmxlZnQpLFxuICAgICAgICByaWdodDogTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KSxcbiAgICAgICAgdG9wOiBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCksXG4gICAgICAgIGJvdHRvbTogTWF0aC5taW4ocmVjdDEuYm90dG9tLCByZWN0Mi5ib3R0b20pXG4gICAgfTtcbiAgICBpZiAocmVzLmxlZnQgPCByZXMucmlnaHQgJiYgcmVzLnRvcCA8IHJlcy5ib3R0b20pIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlUmVjdChyZWN0LCBkZWx0YVgsIGRlbHRhWSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGRlbHRhWCxcbiAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBkZWx0YVgsXG4gICAgICAgIHRvcDogcmVjdC50b3AgKyBkZWx0YVksXG4gICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyBkZWx0YVlcbiAgICB9O1xufVxuLy8gUmV0dXJucyBhIG5ldyBwb2ludCB0aGF0IHdpbGwgaGF2ZSBiZWVuIG1vdmVkIHRvIHJlc2lkZSB3aXRoaW4gdGhlIGdpdmVuIHJlY3RhbmdsZVxuZnVuY3Rpb24gY29uc3RyYWluUG9pbnQocG9pbnQsIHJlY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBNYXRoLm1pbihNYXRoLm1heChwb2ludC5sZWZ0LCByZWN0LmxlZnQpLCByZWN0LnJpZ2h0KSxcbiAgICAgICAgdG9wOiBNYXRoLm1pbihNYXRoLm1heChwb2ludC50b3AsIHJlY3QudG9wKSwgcmVjdC5ib3R0b20pXG4gICAgfTtcbn1cbi8vIFJldHVybnMgYSBwb2ludCB0aGF0IGlzIHRoZSBjZW50ZXIgb2YgdGhlIGdpdmVuIHJlY3RhbmdsZVxuZnVuY3Rpb24gZ2V0UmVjdENlbnRlcihyZWN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMixcbiAgICAgICAgdG9wOiAocmVjdC50b3AgKyByZWN0LmJvdHRvbSkgLyAyXG4gICAgfTtcbn1cbi8vIFN1YnRyYWN0cyBwb2ludDIncyBjb29yZGluYXRlcyBmcm9tIHBvaW50MSdzIGNvb3JkaW5hdGVzLCByZXR1cm5pbmcgYSBkZWx0YVxuZnVuY3Rpb24gZGlmZlBvaW50cyhwb2ludDEsIHBvaW50Mikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHBvaW50MS5sZWZ0IC0gcG9pbnQyLmxlZnQsXG4gICAgICAgIHRvcDogcG9pbnQxLnRvcCAtIHBvaW50Mi50b3BcbiAgICB9O1xufVxuXG4vLyBMb2dpYyBmb3IgZGV0ZXJtaW5pbmcgaWYsIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmlnaHQtdG8tbGVmdCwgdGhlIHNjcm9sbGJhciBhcHBlYXJzIG9uIHRoZSBsZWZ0IHNpZGVcbnZhciBpc1J0bFNjcm9sbGJhck9uTGVmdCA9IG51bGw7XG5mdW5jdGlvbiBnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCgpIHtcbiAgICBpZiAoaXNSdGxTY3JvbGxiYXJPbkxlZnQgPT09IG51bGwpIHtcbiAgICAgICAgaXNSdGxTY3JvbGxiYXJPbkxlZnQgPSBjb21wdXRlSXNSdGxTY3JvbGxiYXJPbkxlZnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzUnRsU2Nyb2xsYmFyT25MZWZ0O1xufVxuZnVuY3Rpb24gY29tcHV0ZUlzUnRsU2Nyb2xsYmFyT25MZWZ0KCkge1xuICAgIHZhciBvdXRlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IC0xMDAwLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ3Njcm9sbCcsXG4gICAgICAgICAgICBkaXJlY3Rpb246ICdydGwnXG4gICAgICAgIH1cbiAgICB9LCAnPGRpdj48L2Rpdj4nKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRWwpO1xuICAgIHZhciBpbm5lckVsID0gb3V0ZXJFbC5maXJzdENoaWxkO1xuICAgIHZhciByZXMgPSBpbm5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPiBvdXRlckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgcmVtb3ZlRWxlbWVudChvdXRlckVsKTtcbiAgICByZXR1cm4gcmVzO1xufVxuLy8gVGhlIHNjcm9sbGJhciB3aWR0aCBjb21wdXRhdGlvbnMgaW4gY29tcHV0ZUVkZ2VzIGFyZSBzb21ldGltZXMgZmxhd2VkIHdoZW4gaXQgY29tZXMgdG9cbi8vIHJldGluYSBkaXNwbGF5cywgcm91bmRpbmcsIGFuZCBJRTExLiBNYXNzYWdlIHRoZW0gaW50byBhIHVzYWJsZSB2YWx1ZS5cbmZ1bmN0aW9uIHNhbml0aXplU2Nyb2xsYmFyV2lkdGgod2lkdGgpIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoKTsgLy8gbm8gbmVnYXRpdmVzXG4gICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoKTtcbiAgICByZXR1cm4gd2lkdGg7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVFZGdlcyhlbCwgZ2V0UGFkZGluZykge1xuICAgIGlmIChnZXRQYWRkaW5nID09PSB2b2lkIDApIHsgZ2V0UGFkZGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgdmFyIGJvcmRlckxlZnQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlckxlZnRXaWR0aCwgMTApIHx8IDA7XG4gICAgdmFyIGJvcmRlclJpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJSaWdodFdpZHRoLCAxMCkgfHwgMDtcbiAgICB2YXIgYm9yZGVyVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG4gICAgdmFyIGJvcmRlckJvdHRvbSA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwKSB8fCAwO1xuICAgIC8vIG11c3QgdXNlIG9mZnNldChXaWR0aHxIZWlnaHQpIGJlY2F1c2UgY29tcGF0aWJsZSB3aXRoIGNsaWVudChXaWR0aHxIZWlnaHQpXG4gICAgdmFyIHNjcm9sbGJhckxlZnRSaWdodCA9IHNhbml0aXplU2Nyb2xsYmFyV2lkdGgoZWwub2Zmc2V0V2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIGJvcmRlckxlZnQgLSBib3JkZXJSaWdodCk7XG4gICAgdmFyIHNjcm9sbGJhckJvdHRvbSA9IHNhbml0aXplU2Nyb2xsYmFyV2lkdGgoZWwub2Zmc2V0SGVpZ2h0IC0gZWwuY2xpZW50SGVpZ2h0IC0gYm9yZGVyVG9wIC0gYm9yZGVyQm90dG9tKTtcbiAgICB2YXIgcmVzID0ge1xuICAgICAgICBib3JkZXJMZWZ0OiBib3JkZXJMZWZ0LFxuICAgICAgICBib3JkZXJSaWdodDogYm9yZGVyUmlnaHQsXG4gICAgICAgIGJvcmRlclRvcDogYm9yZGVyVG9wLFxuICAgICAgICBib3JkZXJCb3R0b206IGJvcmRlckJvdHRvbSxcbiAgICAgICAgc2Nyb2xsYmFyQm90dG9tOiBzY3JvbGxiYXJCb3R0b20sXG4gICAgICAgIHNjcm9sbGJhckxlZnQ6IDAsXG4gICAgICAgIHNjcm9sbGJhclJpZ2h0OiAwXG4gICAgfTtcbiAgICBpZiAoZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQoKSAmJiBjb21wdXRlZFN0eWxlLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHsgLy8gaXMgdGhlIHNjcm9sbGJhciBvbiB0aGUgbGVmdCBzaWRlP1xuICAgICAgICByZXMuc2Nyb2xsYmFyTGVmdCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcy5zY3JvbGxiYXJSaWdodCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICB9XG4gICAgaWYgKGdldFBhZGRpbmcpIHtcbiAgICAgICAgcmVzLnBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nTGVmdCwgMTApIHx8IDA7XG4gICAgICAgIHJlcy5wYWRkaW5nUmlnaHQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdSaWdodCwgMTApIHx8IDA7XG4gICAgICAgIHJlcy5wYWRkaW5nVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nVG9wLCAxMCkgfHwgMDtcbiAgICAgICAgcmVzLnBhZGRpbmdCb3R0b20gPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20sIDEwKSB8fCAwO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY29tcHV0ZUlubmVyUmVjdChlbCwgZ29XaXRoaW5QYWRkaW5nKSB7XG4gICAgaWYgKGdvV2l0aGluUGFkZGluZyA9PT0gdm9pZCAwKSB7IGdvV2l0aGluUGFkZGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIG91dGVyUmVjdCA9IGNvbXB1dGVSZWN0KGVsKTtcbiAgICB2YXIgZWRnZXMgPSBjb21wdXRlRWRnZXMoZWwsIGdvV2l0aGluUGFkZGluZyk7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgbGVmdDogb3V0ZXJSZWN0LmxlZnQgKyBlZGdlcy5ib3JkZXJMZWZ0ICsgZWRnZXMuc2Nyb2xsYmFyTGVmdCxcbiAgICAgICAgcmlnaHQ6IG91dGVyUmVjdC5yaWdodCAtIGVkZ2VzLmJvcmRlclJpZ2h0IC0gZWRnZXMuc2Nyb2xsYmFyUmlnaHQsXG4gICAgICAgIHRvcDogb3V0ZXJSZWN0LnRvcCArIGVkZ2VzLmJvcmRlclRvcCxcbiAgICAgICAgYm90dG9tOiBvdXRlclJlY3QuYm90dG9tIC0gZWRnZXMuYm9yZGVyQm90dG9tIC0gZWRnZXMuc2Nyb2xsYmFyQm90dG9tXG4gICAgfTtcbiAgICBpZiAoZ29XaXRoaW5QYWRkaW5nKSB7XG4gICAgICAgIHJlcy5sZWZ0ICs9IGVkZ2VzLnBhZGRpbmdMZWZ0O1xuICAgICAgICByZXMucmlnaHQgLT0gZWRnZXMucGFkZGluZ1JpZ2h0O1xuICAgICAgICByZXMudG9wICs9IGVkZ2VzLnBhZGRpbmdUb3A7XG4gICAgICAgIHJlcy5ib3R0b20gLT0gZWRnZXMucGFkZGluZ0JvdHRvbTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNvbXB1dGVSZWN0KGVsKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICBib3R0b206IHJlY3QuYm90dG9tICsgd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVWaWV3cG9ydFJlY3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICByaWdodDogd2luZG93LnBhZ2VYT2Zmc2V0ICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB0b3A6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgYm90dG9tOiB3aW5kb3cucGFnZVlPZmZzZXQgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKGVsKSB7XG4gICAgcmV0dXJuIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArIGNvbXB1dGVWTWFyZ2lucyhlbCk7XG59XG5mdW5jdGlvbiBjb21wdXRlVk1hcmdpbnMoZWwpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkLm1hcmdpblRvcCwgMTApICtcbiAgICAgICAgcGFyc2VJbnQoY29tcHV0ZWQubWFyZ2luQm90dG9tLCAxMCk7XG59XG4vLyBkb2VzIG5vdCByZXR1cm4gd2luZG93XG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpIHtcbiAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgIHdoaWxlIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7IC8vIHdpbGwgc3RvcCB3aGVuIGdldHMgdG8gZG9jdW1lbnQgb3IgbnVsbFxuICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoLyhhdXRvfHNjcm9sbCkvKS50ZXN0KGNvbXB1dGVkU3R5bGUub3ZlcmZsb3cgKyBjb21wdXRlZFN0eWxlLm92ZXJmbG93WSArIGNvbXB1dGVkU3R5bGUub3ZlcmZsb3dYKSkge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNsaXBwaW5nUmVjdChlbCkge1xuICAgIHJldHVybiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlSW5uZXJSZWN0KGVsKTtcbiAgICB9KVxuICAgICAgICAuY29uY2F0KGNvbXB1dGVWaWV3cG9ydFJlY3QoKSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVjdDAsIHJlY3QxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnNlY3RSZWN0cyhyZWN0MCwgcmVjdDEpIHx8IHJlY3QxOyAvLyBzaG91bGQgYWx3YXlzIGludGVyc2VjdFxuICAgIH0pO1xufVxuXG4vLyBTdG9wcyBhIG1vdXNlL3RvdWNoIGV2ZW50IGZyb20gZG9pbmcgaXQncyBuYXRpdmUgYnJvd3NlciBhY3Rpb25cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbn1cbi8vIEV2ZW50IERlbGVnYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGxpc3RlbkJ5U2VsZWN0b3IoY29udGFpbmVyLCBldmVudFR5cGUsIHNlbGVjdG9yLCBoYW5kbGVyKSB7XG4gICAgZnVuY3Rpb24gcmVhbEhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIG1hdGNoZWRDaGlsZCA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgc2VsZWN0b3IpO1xuICAgICAgICBpZiAobWF0Y2hlZENoaWxkKSB7XG4gICAgICAgICAgICBoYW5kbGVyLmNhbGwobWF0Y2hlZENoaWxkLCBldiwgbWF0Y2hlZENoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHJlYWxIYW5kbGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHJlYWxIYW5kbGVyKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29udGFpbmVyLCBzZWxlY3Rvciwgb25Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmUpIHtcbiAgICB2YXIgY3VycmVudE1hdGNoZWRDaGlsZDtcbiAgICByZXR1cm4gbGlzdGVuQnlTZWxlY3Rvcihjb250YWluZXIsICdtb3VzZW92ZXInLCBzZWxlY3RvciwgZnVuY3Rpb24gKGV2LCBtYXRjaGVkQ2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoZWRDaGlsZCAhPT0gY3VycmVudE1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgY3VycmVudE1hdGNoZWRDaGlsZCA9IG1hdGNoZWRDaGlsZDtcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcihldiwgbWF0Y2hlZENoaWxkKTtcbiAgICAgICAgICAgIHZhciByZWFsT25Nb3VzZUxlYXZlXzEgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWF0Y2hlZENoaWxkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmUoZXYsIG1hdGNoZWRDaGlsZCk7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGxpc3RlbiB0byB0aGUgbmV4dCBtb3VzZWxlYXZlLCBhbmQgdGhlbiB1bmF0dGFjaFxuICAgICAgICAgICAgbWF0Y2hlZENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyBBbmltYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciB0cmFuc2l0aW9uRXZlbnROYW1lcyA9IFtcbiAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ290cmFuc2l0aW9uZW5kJyxcbiAgICAnb1RyYW5zaXRpb25FbmQnLFxuICAgICdtc1RyYW5zaXRpb25FbmQnLFxuICAgICd0cmFuc2l0aW9uZW5kJ1xuXTtcbi8vIHRyaWdnZXJlZCBvbmx5IHdoZW4gdGhlIG5leHQgc2luZ2xlIHN1YnNlcXVlbnQgdHJhbnNpdGlvbiBmaW5pc2hlc1xuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25Eb25lKGVsLCBjYWxsYmFjaykge1xuICAgIHZhciByZWFsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgY2FsbGJhY2soZXYpO1xuICAgICAgICB0cmFuc2l0aW9uRXZlbnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCByZWFsQ2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcmVhbENhbGxiYWNrKTsgLy8gY3Jvc3MtYnJvd3NlciB3YXkgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIHRyYW5zaXRpb24gZmluaXNoZXNcbiAgICB9KTtcbn1cblxudmFyIERBWV9JRFMgPSBbJ3N1bicsICdtb24nLCAndHVlJywgJ3dlZCcsICd0aHUnLCAnZnJpJywgJ3NhdCddO1xuLy8gQWRkaW5nXG5mdW5jdGlvbiBhZGRXZWVrcyhtLCBuKSB7XG4gICAgdmFyIGEgPSBkYXRlVG9VdGNBcnJheShtKTtcbiAgICBhWzJdICs9IG4gKiA3O1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhKTtcbn1cbmZ1bmN0aW9uIGFkZERheXMobSwgbikge1xuICAgIHZhciBhID0gZGF0ZVRvVXRjQXJyYXkobSk7XG4gICAgYVsyXSArPSBuO1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhKTtcbn1cbmZ1bmN0aW9uIGFkZE1zKG0sIG4pIHtcbiAgICB2YXIgYSA9IGRhdGVUb1V0Y0FycmF5KG0pO1xuICAgIGFbNl0gKz0gbjtcbiAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYSk7XG59XG4vLyBEaWZmaW5nIChhbGwgcmV0dXJuIGZsb2F0cylcbmZ1bmN0aW9uIGRpZmZXZWVrcyhtMCwgbTEpIHtcbiAgICByZXR1cm4gZGlmZkRheXMobTAsIG0xKSAvIDc7XG59XG5mdW5jdGlvbiBkaWZmRGF5cyhtMCwgbTEpIHtcbiAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG59XG5mdW5jdGlvbiBkaWZmSG91cnMobTAsIG0xKSB7XG4gICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gKDEwMDAgKiA2MCAqIDYwKTtcbn1cbmZ1bmN0aW9uIGRpZmZNaW51dGVzKG0wLCBtMSkge1xuICAgIHJldHVybiAobTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpKSAvICgxMDAwICogNjApO1xufVxuZnVuY3Rpb24gZGlmZlNlY29uZHMobTAsIG0xKSB7XG4gICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gMTAwMDtcbn1cbmZ1bmN0aW9uIGRpZmZEYXlBbmRUaW1lKG0wLCBtMSkge1xuICAgIHZhciBtMGRheSA9IHN0YXJ0T2ZEYXkobTApO1xuICAgIHZhciBtMWRheSA9IHN0YXJ0T2ZEYXkobTEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiAwLFxuICAgICAgICBtb250aHM6IDAsXG4gICAgICAgIGRheXM6IE1hdGgucm91bmQoZGlmZkRheXMobTBkYXksIG0xZGF5KSksXG4gICAgICAgIG1pbGxpc2Vjb25kczogKG0xLnZhbHVlT2YoKSAtIG0xZGF5LnZhbHVlT2YoKSkgLSAobTAudmFsdWVPZigpIC0gbTBkYXkudmFsdWVPZigpKVxuICAgIH07XG59XG4vLyBEaWZmaW5nIFdob2xlIFVuaXRzXG5mdW5jdGlvbiBkaWZmV2hvbGVXZWVrcyhtMCwgbTEpIHtcbiAgICB2YXIgZCA9IGRpZmZXaG9sZURheXMobTAsIG0xKTtcbiAgICBpZiAoZCAhPT0gbnVsbCAmJiBkICUgNyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZCAvIDc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZGlmZldob2xlRGF5cyhtMCwgbTEpIHtcbiAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGlmZkRheXMobTAsIG0xKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8gU3RhcnQtT2ZcbmZ1bmN0aW9uIHN0YXJ0T2ZEYXkobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKVxuICAgIF0pO1xufVxuZnVuY3Rpb24gc3RhcnRPZkhvdXIobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgbS5nZXRVVENIb3VycygpXG4gICAgXSk7XG59XG5mdW5jdGlvbiBzdGFydE9mTWludXRlKG0pIHtcbiAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICBtLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgIG0uZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgIG0uZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgbS5nZXRVVENNaW51dGVzKClcbiAgICBdKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0T2ZTZWNvbmQobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgbS5nZXRVVENIb3VycygpLFxuICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgbS5nZXRVVENTZWNvbmRzKClcbiAgICBdKTtcbn1cbi8vIFdlZWsgQ29tcHV0YXRpb25cbmZ1bmN0aW9uIHdlZWtPZlllYXIobWFya2VyLCBkb3csIGRveSkge1xuICAgIHZhciB5ID0gbWFya2VyLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgdmFyIHcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5LCBkb3csIGRveSk7XG4gICAgaWYgKHcgPCAxKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5IC0gMSwgZG93LCBkb3kpO1xuICAgIH1cbiAgICB2YXIgbmV4dFcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5ICsgMSwgZG93LCBkb3kpO1xuICAgIGlmIChuZXh0VyA+PSAxKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbih3LCBuZXh0Vyk7XG4gICAgfVxuICAgIHJldHVybiB3O1xufVxuZnVuY3Rpb24gd2Vla09mR2l2ZW5ZZWFyKG1hcmtlciwgeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgZmlyc3RXZWVrU3RhcnQgPSBhcnJheVRvVXRjRGF0ZShbeWVhciwgMCwgMSArIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSldKTtcbiAgICB2YXIgZGF5U3RhcnQgPSBzdGFydE9mRGF5KG1hcmtlcik7XG4gICAgdmFyIGRheXMgPSBNYXRoLnJvdW5kKGRpZmZEYXlzKGZpcnN0V2Vla1N0YXJ0LCBkYXlTdGFydCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgLyA3KSArIDE7IC8vIHplcm8taW5kZXhlZFxufVxuLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgIHZhciBmd2QgPSA3ICsgZG93IC0gZG95O1xuICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICB2YXIgZndkbHcgPSAoNyArIGFycmF5VG9VdGNEYXRlKFt5ZWFyLCAwLCBmd2RdKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuLy8gQXJyYXkgQ29udmVyc2lvblxuZnVuY3Rpb24gZGF0ZVRvTG9jYWxBcnJheShkYXRlKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBkYXRlLmdldE1vbnRoKCksXG4gICAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKVxuICAgIF07XG59XG5mdW5jdGlvbiBhcnJheVRvTG9jYWxEYXRlKGEpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYVswXSwgYVsxXSB8fCAwLCBhWzJdID09IG51bGwgPyAxIDogYVsyXSwgLy8gZGF5IG9mIG1vbnRoXG4gICAgYVszXSB8fCAwLCBhWzRdIHx8IDAsIGFbNV0gfHwgMCk7XG59XG5mdW5jdGlvbiBkYXRlVG9VdGNBcnJheShkYXRlKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICBkYXRlLmdldFVUQ01vbnRoKCksXG4gICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgICAgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgIF07XG59XG5mdW5jdGlvbiBhcnJheVRvVXRjRGF0ZShhKSB7XG4gICAgLy8gYWNjb3JkaW5nIHRvIHdlYiBzdGFuZGFyZHMgKGFuZCBTYWZhcmkpLCBhIG1vbnRoIGluZGV4IGlzIHJlcXVpcmVkLlxuICAgIC8vIG1hc3NhZ2UgaWYgb25seSBnaXZlbiBhIHllYXIuXG4gICAgaWYgKGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGEgPSBhLmNvbmNhdChbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYSkpO1xufVxuLy8gT3RoZXIgVXRpbHNcbmZ1bmN0aW9uIGlzVmFsaWREYXRlKG0pIHtcbiAgICByZXR1cm4gIWlzTmFOKG0udmFsdWVPZigpKTtcbn1cbmZ1bmN0aW9uIHRpbWVBc01zKG0pIHtcbiAgICByZXR1cm4gbS5nZXRVVENIb3VycygpICogMTAwMCAqIDYwICogNjAgK1xuICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSAqIDEwMDAgKiA2MCArXG4gICAgICAgIG0uZ2V0VVRDU2Vjb25kcygpICogMTAwMCArXG4gICAgICAgIG0uZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG59XG5cbnZhciBJTlRFUk5BTF9VTklUUyA9IFsneWVhcnMnLCAnbW9udGhzJywgJ2RheXMnLCAnbWlsbGlzZWNvbmRzJ107XG52YXIgUEFSU0VfUkUgPSAvXigtPykoPzooXFxkKylcXC4pPyhcXGQrKTooXFxkXFxkKSg/OjooXFxkXFxkKSg/OlxcLihcXGRcXGRcXGQpKT8pPy87XG4vLyBQYXJzaW5nIGFuZCBDcmVhdGlvblxuZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHVuaXQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdChpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdCgoX2EgPSB7fSwgX2FbdW5pdCB8fCAnbWlsbGlzZWNvbmRzJ10gPSBpbnB1dCwgX2EpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHMpIHtcbiAgICB2YXIgbSA9IFBBUlNFX1JFLmV4ZWMocyk7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIHNpZ24gPSBtWzFdID8gLTEgOiAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IDAsXG4gICAgICAgICAgICBtb250aHM6IDAsXG4gICAgICAgICAgICBkYXlzOiBzaWduICogKG1bMl0gPyBwYXJzZUludChtWzJdLCAxMCkgOiAwKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogc2lnbiAqICgobVszXSA/IHBhcnNlSW50KG1bM10sIDEwKSA6IDApICogNjAgKiA2MCAqIDEwMDAgKyAvLyBob3Vyc1xuICAgICAgICAgICAgICAgIChtWzRdID8gcGFyc2VJbnQobVs0XSwgMTApIDogMCkgKiA2MCAqIDEwMDAgKyAvLyBtaW51dGVzXG4gICAgICAgICAgICAgICAgKG1bNV0gPyBwYXJzZUludChtWzVdLCAxMCkgOiAwKSAqIDEwMDAgKyAvLyBzZWNvbmRzXG4gICAgICAgICAgICAgICAgKG1bNl0gPyBwYXJzZUludChtWzZdLCAxMCkgOiAwKSAvLyBtc1xuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdChvYmopIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyczogb2JqLnllYXJzIHx8IG9iai55ZWFyIHx8IDAsXG4gICAgICAgIG1vbnRoczogb2JqLm1vbnRocyB8fCBvYmoubW9udGggfHwgMCxcbiAgICAgICAgZGF5czogKG9iai5kYXlzIHx8IG9iai5kYXkgfHwgMCkgK1xuICAgICAgICAgICAgZ2V0V2Vla3NGcm9tSW5wdXQob2JqKSAqIDcsXG4gICAgICAgIG1pbGxpc2Vjb25kczogKG9iai5ob3VycyB8fCBvYmouaG91ciB8fCAwKSAqIDYwICogNjAgKiAxMDAwICsgLy8gaG91cnNcbiAgICAgICAgICAgIChvYmoubWludXRlcyB8fCBvYmoubWludXRlIHx8IDApICogNjAgKiAxMDAwICsgLy8gbWludXRlc1xuICAgICAgICAgICAgKG9iai5zZWNvbmRzIHx8IG9iai5zZWNvbmQgfHwgMCkgKiAxMDAwICsgLy8gc2Vjb25kc1xuICAgICAgICAgICAgKG9iai5taWxsaXNlY29uZHMgfHwgb2JqLm1pbGxpc2Vjb25kIHx8IG9iai5tcyB8fCAwKSAvLyBtc1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRXZWVrc0Zyb21JbnB1dChvYmopIHtcbiAgICByZXR1cm4gb2JqLndlZWtzIHx8IG9iai53ZWVrIHx8IDA7XG59XG4vLyBFcXVhbGl0eVxuZnVuY3Rpb24gZHVyYXRpb25zRXF1YWwoZDAsIGQxKSB7XG4gICAgcmV0dXJuIGQwLnllYXJzID09PSBkMS55ZWFycyAmJlxuICAgICAgICBkMC5tb250aHMgPT09IGQxLm1vbnRocyAmJlxuICAgICAgICBkMC5kYXlzID09PSBkMS5kYXlzICYmXG4gICAgICAgIGQwLm1pbGxpc2Vjb25kcyA9PT0gZDEubWlsbGlzZWNvbmRzO1xufVxuZnVuY3Rpb24gaXNTaW5nbGVEYXkoZHVyKSB7XG4gICAgcmV0dXJuIGR1ci55ZWFycyA9PT0gMCAmJiBkdXIubW9udGhzID09PSAwICYmIGR1ci5kYXlzID09PSAxICYmIGR1ci5taWxsaXNlY29uZHMgPT09IDA7XG59XG4vLyBTaW1wbGUgTWF0aFxuZnVuY3Rpb24gYWRkRHVyYXRpb25zKGQwLCBkMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkMC55ZWFycyArIGQxLnllYXJzLFxuICAgICAgICBtb250aHM6IGQwLm1vbnRocyArIGQxLm1vbnRocyxcbiAgICAgICAgZGF5czogZDAuZGF5cyArIGQxLmRheXMsXG4gICAgICAgIG1pbGxpc2Vjb25kczogZDAubWlsbGlzZWNvbmRzICsgZDEubWlsbGlzZWNvbmRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN1YnRyYWN0RHVyYXRpb25zKGQxLCBkMCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkMS55ZWFycyAtIGQwLnllYXJzLFxuICAgICAgICBtb250aHM6IGQxLm1vbnRocyAtIGQwLm1vbnRocyxcbiAgICAgICAgZGF5czogZDEuZGF5cyAtIGQwLmRheXMsXG4gICAgICAgIG1pbGxpc2Vjb25kczogZDEubWlsbGlzZWNvbmRzIC0gZDAubWlsbGlzZWNvbmRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG11bHRpcGx5RHVyYXRpb24oZCwgbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkLnllYXJzICogbixcbiAgICAgICAgbW9udGhzOiBkLm1vbnRocyAqIG4sXG4gICAgICAgIGRheXM6IGQuZGF5cyAqIG4sXG4gICAgICAgIG1pbGxpc2Vjb25kczogZC5taWxsaXNlY29uZHMgKiBuXG4gICAgfTtcbn1cbi8vIENvbnZlcnNpb25zXG4vLyBcIlJvdWdoXCIgYmVjYXVzZSB0aGV5IGFyZSBiYXNlZCBvbiBhdmVyYWdlLWNhc2UgR3JlZ29yaWFuIG1vbnRocy95ZWFyc1xuZnVuY3Rpb24gYXNSb3VnaFllYXJzKGR1cikge1xuICAgIHJldHVybiBhc1JvdWdoRGF5cyhkdXIpIC8gMzY1O1xufVxuZnVuY3Rpb24gYXNSb3VnaE1vbnRocyhkdXIpIHtcbiAgICByZXR1cm4gYXNSb3VnaERheXMoZHVyKSAvIDMwO1xufVxuZnVuY3Rpb24gYXNSb3VnaERheXMoZHVyKSB7XG4gICAgcmV0dXJuIGFzUm91Z2hNcyhkdXIpIC8gODY0ZTU7XG59XG5mdW5jdGlvbiBhc1JvdWdoTWludXRlcyhkdXIpIHtcbiAgICByZXR1cm4gYXNSb3VnaE1zKGR1cikgLyAoMTAwMCAqIDYwKTtcbn1cbmZ1bmN0aW9uIGFzUm91Z2hTZWNvbmRzKGR1cikge1xuICAgIHJldHVybiBhc1JvdWdoTXMoZHVyKSAvIDEwMDA7XG59XG5mdW5jdGlvbiBhc1JvdWdoTXMoZHVyKSB7XG4gICAgcmV0dXJuIGR1ci55ZWFycyAqICgzNjUgKiA4NjRlNSkgK1xuICAgICAgICBkdXIubW9udGhzICogKDMwICogODY0ZTUpICtcbiAgICAgICAgZHVyLmRheXMgKiA4NjRlNSArXG4gICAgICAgIGR1ci5taWxsaXNlY29uZHM7XG59XG4vLyBBZHZhbmNlZCBNYXRoXG5mdW5jdGlvbiB3aG9sZURpdmlkZUR1cmF0aW9ucyhudW1lcmF0b3IsIGRlbm9taW5hdG9yKSB7XG4gICAgdmFyIHJlcyA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBJTlRFUk5BTF9VTklUUy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdW5pdCA9IElOVEVSTkFMX1VOSVRTW2ldO1xuICAgICAgICBpZiAoZGVub21pbmF0b3JbdW5pdF0pIHtcbiAgICAgICAgICAgIHZhciBsb2NhbFJlcyA9IG51bWVyYXRvclt1bml0XSAvIGRlbm9taW5hdG9yW3VuaXRdO1xuICAgICAgICAgICAgaWYgKCFpc0ludChsb2NhbFJlcykgfHwgKHJlcyAhPT0gbnVsbCAmJiByZXMgIT09IGxvY2FsUmVzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzID0gbG9jYWxSZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobnVtZXJhdG9yW3VuaXRdKSB7XG4gICAgICAgICAgICAvLyBuZWVkcyB0byBkaXZpZGUgYnkgc29tZXRoaW5nIGJ1dCBjYW4ndCFcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IoZHVyLCBkb250UmV0dXJuV2Vla3MpIHtcbiAgICB2YXIgbXMgPSBkdXIubWlsbGlzZWNvbmRzO1xuICAgIGlmIChtcykge1xuICAgICAgICBpZiAobXMgJSAxMDAwICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWlsbGlzZWNvbmQnLCB2YWx1ZTogbXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3NlY29uZCcsIHZhbHVlOiBtcyAvIDEwMDAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwICogNjApICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWludXRlJywgdmFsdWU6IG1zIC8gKDEwMDAgKiA2MCkgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG1zIC8gKDEwMDAgKiA2MCAqIDYwKSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkdXIuZGF5cykge1xuICAgICAgICBpZiAoIWRvbnRSZXR1cm5XZWVrcyAmJiBkdXIuZGF5cyAlIDcgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICd3ZWVrJywgdmFsdWU6IGR1ci5kYXlzIC8gNyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHVuaXQ6ICdkYXknLCB2YWx1ZTogZHVyLmRheXMgfTtcbiAgICB9XG4gICAgaWYgKGR1ci5tb250aHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IGR1ci5tb250aHMgfTtcbiAgICB9XG4gICAgaWYgKGR1ci55ZWFycykge1xuICAgICAgICByZXR1cm4geyB1bml0OiAneWVhcicsIHZhbHVlOiBkdXIueWVhcnMgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IDAgfTtcbn1cblxuLyogRnVsbENhbGVuZGFyLXNwZWNpZmljIERPTSBVdGlsaXRpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gR2l2ZW4gdGhlIHNjcm9sbGJhciB3aWR0aHMgb2Ygc29tZSBvdGhlciBjb250YWluZXIsIGNyZWF0ZSBib3JkZXJzL21hcmdpbnMgb24gcm93RWxzIGluIG9yZGVyIHRvIG1hdGNoIHRoZSBsZWZ0XG4vLyBhbmQgcmlnaHQgc3BhY2UgdGhhdCB3YXMgb2Zmc2V0IGJ5IHRoZSBzY3JvbGxiYXJzLiBBIDEtcGl4ZWwgYm9yZGVyIGZpcnN0LCB0aGVuIG1hcmdpbiBiZXlvbmQgdGhhdC5cbmZ1bmN0aW9uIGNvbXBlbnNhdGVTY3JvbGwocm93RWwsIHNjcm9sbGJhcldpZHRocykge1xuICAgIGlmIChzY3JvbGxiYXJXaWR0aHMubGVmdCkge1xuICAgICAgICBhcHBseVN0eWxlKHJvd0VsLCB7XG4gICAgICAgICAgICBib3JkZXJMZWZ0V2lkdGg6IDEsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiBzY3JvbGxiYXJXaWR0aHMubGVmdCAtIDFcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzY3JvbGxiYXJXaWR0aHMucmlnaHQpIHtcbiAgICAgICAgYXBwbHlTdHlsZShyb3dFbCwge1xuICAgICAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogMSxcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBzY3JvbGxiYXJXaWR0aHMucmlnaHQgLSAxXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIFVuZG9lcyBjb21wZW5zYXRlU2Nyb2xsIGFuZCByZXN0b3JlcyBhbGwgYm9yZGVycy9tYXJnaW5zXG5mdW5jdGlvbiB1bmNvbXBlbnNhdGVTY3JvbGwocm93RWwpIHtcbiAgICBhcHBseVN0eWxlKHJvd0VsLCB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgICAgICBtYXJnaW5SaWdodDogJycsXG4gICAgICAgIGJvcmRlckxlZnRXaWR0aDogJycsXG4gICAgICAgIGJvcmRlclJpZ2h0V2lkdGg6ICcnXG4gICAgfSk7XG59XG4vLyBNYWtlIHRoZSBtb3VzZSBjdXJzb3IgZXhwcmVzcyB0aGF0IGFuIGV2ZW50IGlzIG5vdCBhbGxvd2VkIGluIHRoZSBjdXJyZW50IGFyZWFcbmZ1bmN0aW9uIGRpc2FibGVDdXJzb3IoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdmYy1ub3QtYWxsb3dlZCcpO1xufVxuLy8gUmV0dXJucyB0aGUgbW91c2UgY3Vyc29yIHRvIGl0cyBvcmlnaW5hbCBsb29rXG5mdW5jdGlvbiBlbmFibGVDdXJzb3IoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdmYy1ub3QtYWxsb3dlZCcpO1xufVxuLy8gR2l2ZW4gYSB0b3RhbCBhdmFpbGFibGUgaGVpZ2h0IHRvIGZpbGwsIGhhdmUgYGVsc2AgKGVzc2VudGlhbGx5IGNoaWxkIHJvd3MpIGV4cGFuZCB0byBhY2NvbW9kYXRlLlxuLy8gQnkgZGVmYXVsdCwgYWxsIGVsZW1lbnRzIHRoYXQgYXJlIHNob3J0ZXIgdGhhbiB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IGFyZSBleHBhbmRlZCB1bmlmb3JtbHksIG5vdCBjb25zaWRlcmluZ1xuLy8gYW55IG90aGVyIGVscyB0aGF0IGFyZSBhbHJlYWR5IHRvbyB0YWxsLiBpZiBgc2hvdWxkUmVkaXN0cmlidXRlYCBpcyBvbiwgaXQgY29uc2lkZXJzIHRoZXNlIHRhbGwgcm93cyBhbmRcbi8vIHJlZHVjZXMgdGhlIGF2YWlsYWJsZSBoZWlnaHQuXG5mdW5jdGlvbiBkaXN0cmlidXRlSGVpZ2h0KGVscywgYXZhaWxhYmxlSGVpZ2h0LCBzaG91bGRSZWRpc3RyaWJ1dGUpIHtcbiAgICAvLyAqRkxPT1JJTkcgTk9URSo6IHdlIGZsb29yIGluIGNlcnRhaW4gcGxhY2VzIGJlY2F1c2Ugem9vbSBjYW4gZ2l2ZSBpbmFjY3VyYXRlIGZsb2F0aW5nLXBvaW50IGRpbWVuc2lvbnMsXG4gICAgLy8gYW5kIGl0IGlzIGJldHRlciB0byBiZSBzaG9ydGVyIHRoYW4gdGFsbGVyLCB0byBhdm9pZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBzY3JvbGxiYXJzLlxuICAgIHZhciBtaW5PZmZzZXQxID0gTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLyBlbHMubGVuZ3RoKTsgLy8gZm9yIG5vbi1sYXN0IGVsZW1lbnRcbiAgICB2YXIgbWluT2Zmc2V0MiA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC0gbWluT2Zmc2V0MSAqIChlbHMubGVuZ3RoIC0gMSkpOyAvLyBmb3IgbGFzdCBlbGVtZW50ICpGTE9PUklORyBOT1RFKlxuICAgIHZhciBmbGV4RWxzID0gW107IC8vIGVsZW1lbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gZXhwYW5kLiBhcnJheSBvZiBET00gbm9kZXNcbiAgICB2YXIgZmxleE9mZnNldHMgPSBbXTsgLy8gYW1vdW50IG9mIHZlcnRpY2FsIHNwYWNlIGl0IHRha2VzIHVwXG4gICAgdmFyIGZsZXhIZWlnaHRzID0gW107IC8vIGFjdHVhbCBjc3MgaGVpZ2h0XG4gICAgdmFyIHVzZWRIZWlnaHQgPSAwO1xuICAgIHVuZGlzdHJpYnV0ZUhlaWdodChlbHMpOyAvLyBnaXZlIGFsbCBlbGVtZW50cyB0aGVpciBuYXR1cmFsIGhlaWdodFxuICAgIC8vIGZpbmQgZWxlbWVudHMgdGhhdCBhcmUgYmVsb3cgdGhlIHJlY29tbWVuZGVkIGhlaWdodCAoZXhwYW5kYWJsZSkuXG4gICAgLy8gaW1wb3J0YW50IHRvIHF1ZXJ5IGZvciBoZWlnaHRzIGluIGEgc2luZ2xlIGZpcnN0IHBhc3MgKHRvIGF2b2lkIHJlZmxvdyBvc2NpbGxhdGlvbikuXG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHZhciBtaW5PZmZzZXQgPSBpID09PSBlbHMubGVuZ3RoIC0gMSA/IG1pbk9mZnNldDIgOiBtaW5PZmZzZXQxO1xuICAgICAgICB2YXIgbmF0dXJhbEhlaWdodCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgdmFyIG5hdHVyYWxPZmZzZXQgPSBuYXR1cmFsSGVpZ2h0ICsgY29tcHV0ZVZNYXJnaW5zKGVsKTtcbiAgICAgICAgaWYgKG5hdHVyYWxPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICAgIGZsZXhFbHMucHVzaChlbCk7XG4gICAgICAgICAgICBmbGV4T2Zmc2V0cy5wdXNoKG5hdHVyYWxPZmZzZXQpO1xuICAgICAgICAgICAgZmxleEhlaWdodHMucHVzaChuYXR1cmFsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgZWxlbWVudCBzdHJldGNoZXMgcGFzdCByZWNvbW1lbmRlZCBoZWlnaHQgKG5vbi1leHBhbmRhYmxlKS4gbWFyayB0aGUgc3BhY2UgYXMgb2NjdXBpZWQuXG4gICAgICAgICAgICB1c2VkSGVpZ2h0ICs9IG5hdHVyYWxPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyByZWFkanVzdCB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IHRvIG9ubHkgY29uc2lkZXIgdGhlIGhlaWdodCBhdmFpbGFibGUgdG8gbm9uLW1heGVkLW91dCByb3dzLlxuICAgIGlmIChzaG91bGRSZWRpc3RyaWJ1dGUpIHtcbiAgICAgICAgYXZhaWxhYmxlSGVpZ2h0IC09IHVzZWRIZWlnaHQ7XG4gICAgICAgIG1pbk9mZnNldDEgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAvIGZsZXhFbHMubGVuZ3RoKTtcbiAgICAgICAgbWluT2Zmc2V0MiA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC0gbWluT2Zmc2V0MSAqIChmbGV4RWxzLmxlbmd0aCAtIDEpKTsgLy8gKkZMT09SSU5HIE5PVEUqXG4gICAgfVxuICAgIC8vIGFzc2lnbiBoZWlnaHRzIHRvIGFsbCBleHBhbmRhYmxlIGVsZW1lbnRzXG4gICAgZmxleEVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgbWluT2Zmc2V0ID0gaSA9PT0gZmxleEVscy5sZW5ndGggLSAxID8gbWluT2Zmc2V0MiA6IG1pbk9mZnNldDE7XG4gICAgICAgIHZhciBuYXR1cmFsT2Zmc2V0ID0gZmxleE9mZnNldHNbaV07XG4gICAgICAgIHZhciBuYXR1cmFsSGVpZ2h0ID0gZmxleEhlaWdodHNbaV07XG4gICAgICAgIHZhciBuZXdIZWlnaHQgPSBtaW5PZmZzZXQgLSAobmF0dXJhbE9mZnNldCAtIG5hdHVyYWxIZWlnaHQpOyAvLyBzdWJ0cmFjdCB0aGUgbWFyZ2luL3BhZGRpbmdcbiAgICAgICAgaWYgKG5hdHVyYWxPZmZzZXQgPCBtaW5PZmZzZXQpIHsgLy8gd2UgY2hlY2sgdGhpcyBhZ2FpbiBiZWNhdXNlIHJlZGlzdHJpYnV0aW9uIG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGluZ3NcbiAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIFVuZG9lcyBkaXN0cnVidXRlSGVpZ2h0LCByZXN0b3JpbmcgYWxsIGVscyB0byB0aGVpciBuYXR1cmFsIGhlaWdodFxuZnVuY3Rpb24gdW5kaXN0cmlidXRlSGVpZ2h0KGVscykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB9KTtcbn1cbi8vIEdpdmVuIGBlbHNgLCBhIHNldCBvZiA8dGQ+IGNlbGxzLCBmaW5kIHRoZSBjZWxsIHdpdGggdGhlIGxhcmdlc3QgbmF0dXJhbCB3aWR0aCBhbmQgc2V0IHRoZSB3aWR0aHMgb2YgYWxsIHRoZVxuLy8gY2VsbHMgdG8gYmUgdGhhdCB3aWR0aC5cbi8vIFBSRVJFUVVJU0lURTogaWYgeW91IHdhbnQgYSBjZWxsIHRvIHRha2UgdXAgd2lkdGgsIGl0IG5lZWRzIHRvIGhhdmUgYSBzaW5nbGUgaW5uZXIgZWxlbWVudCB3LyBkaXNwbGF5OmlubGluZVxuZnVuY3Rpb24gbWF0Y2hDZWxsV2lkdGhzKGVscykge1xuICAgIHZhciBtYXhJbm5lcldpZHRoID0gMDtcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGlubmVyRWwgPSBlbC5maXJzdENoaWxkOyAvLyBob3BlZnVsbHkgYW4gZWxlbWVudFxuICAgICAgICBpZiAoaW5uZXJFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJXaWR0aF8xID0gaW5uZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgIGlmIChpbm5lcldpZHRoXzEgPiBtYXhJbm5lcldpZHRoKSB7XG4gICAgICAgICAgICAgICAgbWF4SW5uZXJXaWR0aCA9IGlubmVyV2lkdGhfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG1heElubmVyV2lkdGgrKzsgLy8gc29tZXRpbWVzIG5vdCBhY2N1cmF0ZSBvZiB3aWR0aCB0aGUgdGV4dCBuZWVkcyB0byBzdGF5IG9uIG9uZSBsaW5lLiBpbnN1cmFuY2VcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuc3R5bGUud2lkdGggPSBtYXhJbm5lcldpZHRoICsgJ3B4JztcbiAgICB9KTtcbiAgICByZXR1cm4gbWF4SW5uZXJXaWR0aDtcbn1cbi8vIEdpdmVuIG9uZSBlbGVtZW50IHRoYXQgcmVzaWRlcyBpbnNpZGUgYW5vdGhlcixcbi8vIFN1YnRyYWN0cyB0aGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBlbGVtZW50IGZyb20gdGhlIG91dGVyIGVsZW1lbnQuXG5mdW5jdGlvbiBzdWJ0cmFjdElubmVyRWxIZWlnaHQob3V0ZXJFbCwgaW5uZXJFbCkge1xuICAgIC8vIGVmZmluJyBJRTgvOS8xMC8xMSBzb21ldGltZXMgcmV0dXJucyAwIGZvciBkaW1lbnNpb25zLiB0aGlzIHdlaXJkIGhhY2sgd2FzIHRoZSBvbmx5IHRoaW5nIHRoYXQgd29ya2VkXG4gICAgdmFyIHJlZmxvd1N0eWxlUHJvcHMgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBsZWZ0OiAtMSAvLyBlbnN1cmUgcmVmbG93IGluIGNhc2UgdGhlIGVsIHdhcyBhbHJlYWR5IHJlbGF0aXZlLiBuZWdhdGl2ZSBpcyBsZXNzIGxpa2VseSB0byBjYXVzZSBuZXcgc2Nyb2xsXG4gICAgfTtcbiAgICBhcHBseVN0eWxlKG91dGVyRWwsIHJlZmxvd1N0eWxlUHJvcHMpO1xuICAgIGFwcGx5U3R5bGUoaW5uZXJFbCwgcmVmbG93U3R5bGVQcm9wcyk7XG4gICAgdmFyIGRpZmYgPSAvLyBncmFiIHRoZSBkaW1lbnNpb25zXG4gICAgIG91dGVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC1cbiAgICAgICAgaW5uZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgLy8gdW5kbyBoYWNrXG4gICAgdmFyIHJlc2V0U3R5bGVQcm9wcyA9IHsgcG9zaXRpb246ICcnLCBsZWZ0OiAnJyB9O1xuICAgIGFwcGx5U3R5bGUob3V0ZXJFbCwgcmVzZXRTdHlsZVByb3BzKTtcbiAgICBhcHBseVN0eWxlKGlubmVyRWwsIHJlc2V0U3R5bGVQcm9wcyk7XG4gICAgcmV0dXJuIGRpZmY7XG59XG4vKiBTZWxlY3Rpb25cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZnVuY3Rpb24gcHJldmVudFNlbGVjdGlvbihlbCkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXVuc2VsZWN0YWJsZScpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgcHJldmVudERlZmF1bHQpO1xufVxuZnVuY3Rpb24gYWxsb3dTZWxlY3Rpb24oZWwpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy11bnNlbGVjdGFibGUnKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIHByZXZlbnREZWZhdWx0KTtcbn1cbi8qIENvbnRleHQgTWVudVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBwcmV2ZW50Q29udGV4dE1lbnUoZWwpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbn1cbmZ1bmN0aW9uIGFsbG93Q29udGV4dE1lbnUoZWwpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbn1cbi8qIE9iamVjdCBPcmRlcmluZyBieSBGaWVsZFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBwYXJzZUZpZWxkU3BlY3MoaW5wdXQpIHtcbiAgICB2YXIgc3BlY3MgPSBbXTtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRva2VucyA9IGlucHV0LnNwbGl0KC9cXHMqLFxccyovKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRva2VucyA9IFtpbnB1dF07XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHRva2VucyA9IGlucHV0O1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3BlY3MucHVzaCh0b2tlbi5jaGFyQXQoMCkgPT09ICctJyA/XG4gICAgICAgICAgICAgICAgeyBmaWVsZDogdG9rZW4uc3Vic3RyaW5nKDEpLCBvcmRlcjogLTEgfSA6XG4gICAgICAgICAgICAgICAgeyBmaWVsZDogdG9rZW4sIG9yZGVyOiAxIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3BlY3MucHVzaCh7IGZ1bmM6IHRva2VuIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcGVjcztcbn1cbmZ1bmN0aW9uIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgZmllbGRTcGVjcykge1xuICAgIHZhciBpO1xuICAgIHZhciBjbXA7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpZWxkU3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY21wID0gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlY3NbaV0pO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlYykge1xuICAgIGlmIChmaWVsZFNwZWMuZnVuYykge1xuICAgICAgICByZXR1cm4gZmllbGRTcGVjLmZ1bmMob2JqMCwgb2JqMSk7XG4gICAgfVxuICAgIHJldHVybiBmbGV4aWJsZUNvbXBhcmUob2JqMFtmaWVsZFNwZWMuZmllbGRdLCBvYmoxW2ZpZWxkU3BlYy5maWVsZF0pXG4gICAgICAgICogKGZpZWxkU3BlYy5vcmRlciB8fCAxKTtcbn1cbmZ1bmN0aW9uIGZsZXhpYmxlQ29tcGFyZShhLCBiKSB7XG4gICAgaWYgKCFhICYmICFiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhhKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKSk7XG4gICAgfVxuICAgIHJldHVybiBhIC0gYjtcbn1cbi8qIFN0cmluZyBVdGlsaXRpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZnVuY3Rpb24gY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5mdW5jdGlvbiBwYWRTdGFydCh2YWwsIGxlbikge1xuICAgIHZhciBzID0gU3RyaW5nKHZhbCk7XG4gICAgcmV0dXJuICcwMDAnLnN1YnN0cigwLCBsZW4gLSBzLmxlbmd0aCkgKyBzO1xufVxuLyogTnVtYmVyIFV0aWxpdGllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuZnVuY3Rpb24gaXNJbnQobikge1xuICAgIHJldHVybiBuICUgMSA9PT0gMDtcbn1cbi8qIFdlaXJkIFV0aWxpdGllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBhcHBseUFsbChmdW5jdGlvbnMsIHRoaXNPYmosIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBzdXBwbGllZCBhIHNpbmdsZSBmdW5jdGlvblxuICAgICAgICBmdW5jdGlvbnMgPSBbZnVuY3Rpb25zXTtcbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9ucykge1xuICAgICAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHJldCA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmV0ID0gZnVuY3Rpb25zW2ldLmFwcGx5KHRoaXNPYmosIGFyZ3MpIHx8IHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpcnN0RGVmaW5lZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcmdzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzW2ldO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4vLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvMS42LjAvdW5kZXJzY29yZS5qcyNMNzE0XG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0KSB7XG4gICAgdmFyIHRpbWVvdXQ7XG4gICAgdmFyIGFyZ3M7XG4gICAgdmFyIGNvbnRleHQ7XG4gICAgdmFyIHRpbWVzdGFtcDtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHRpbWVzdGFtcDtcbiAgICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbi8vIE51bWJlciBhbmQgQm9vbGVhbiBhcmUgb25seSB0eXBlcyB0aGF0IGRlZmF1bHRzIG9yIG5vdCBjb21wdXRlZCBmb3Jcbi8vIFRPRE86IHdyaXRlIG1vcmUgY29tbWVudHNcbmZ1bmN0aW9uIHJlZmluZVByb3BzKHJhd1Byb3BzLCBwcm9jZXNzb3JzLCBkZWZhdWx0cywgbGVmdG92ZXJQcm9wcykge1xuICAgIGlmIChkZWZhdWx0cyA9PT0gdm9pZCAwKSB7IGRlZmF1bHRzID0ge307IH1cbiAgICB2YXIgcmVmaW5lZCA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9jZXNzb3JzKSB7XG4gICAgICAgIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2tleV07XG4gICAgICAgIGlmIChyYXdQcm9wc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGZvdW5kXG4gICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHR5cGVvZiByYXdQcm9wc1trZXldID09PSAnZnVuY3Rpb24nID8gcmF3UHJvcHNba2V5XSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9jZXNzb3IpIHsgLy8gYSByZWZpbmluZyBmdW5jdGlvbj9cbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSBwcm9jZXNzb3IocmF3UHJvcHNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZmF1bHRzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBleHBsaWNpdCBkZWZhdWx0XG4gICAgICAgICAgICByZWZpbmVkW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbXVzdCBjb21wdXRlIGEgZGVmYXVsdFxuICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVmaW5lZFtrZXldID0gJyc7IC8vIGVtcHR5IHN0cmluZyBpcyBkZWZhdWx0IGZvciBTdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFwcm9jZXNzb3IgfHwgcHJvY2Vzc29yID09PSBOdW1iZXIgfHwgcHJvY2Vzc29yID09PSBCb29sZWFuIHx8IHByb2Nlc3NvciA9PT0gRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSBudWxsOyAvLyBhc3NpZ24gbnVsbCBmb3Igb3RoZXIgbm9uLWN1c3RvbSBwcm9jZXNzb3IgZnVuY3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHByb2Nlc3NvcihudWxsKTsgLy8gcnVuIHRoZSBjdXN0b20gcHJvY2Vzc29yIGZ1bmNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVmdG92ZXJQcm9wcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzb3JzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxlZnRvdmVyUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZmluZWQ7XG59XG4vKiBEYXRlIHN0dWZmIHRoYXQgZG9lc24ndCBiZWxvbmcgaW4gZGF0ZWxpYiBjb3JlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgdGhhdCBoYXMgdGhlIHNhbWUgZXhhY3QgZHVyYXRpb24sXG4vLyBidXQgd2hvc2Ugc3RhcnQgdGltZSBpcyBhbGlnbmVkIHdpdGggdGhlIHN0YXJ0IG9mIHRoZSBkYXkuXG5mdW5jdGlvbiBjb21wdXRlQWxpZ25lZERheVJhbmdlKHRpbWVkUmFuZ2UpIHtcbiAgICB2YXIgZGF5Q250ID0gTWF0aC5mbG9vcihkaWZmRGF5cyh0aW1lZFJhbmdlLnN0YXJ0LCB0aW1lZFJhbmdlLmVuZCkpIHx8IDE7XG4gICAgdmFyIHN0YXJ0ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLnN0YXJ0KTtcbiAgICB2YXIgZW5kID0gYWRkRGF5cyhzdGFydCwgZGF5Q250KTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG59XG4vLyBnaXZlbiBhIHRpbWVkIHJhbmdlLCBjb21wdXRlcyBhbiBhbGwtZGF5IHJhbmdlIGJhc2VkIG9uIGhvdyBmb3IgdGhlIGVuZCBkYXRlIGJsZWVkcyBpbnRvIHRoZSBuZXh0IGRheVxuLy8gVE9ETzogZ2l2ZSBuZXh0RGF5VGhyZXNob2xkIGEgZGVmYXVsdCBhcmdcbmZ1bmN0aW9uIGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UodGltZWRSYW5nZSwgbmV4dERheVRocmVzaG9sZCkge1xuICAgIGlmIChuZXh0RGF5VGhyZXNob2xkID09PSB2b2lkIDApIHsgbmV4dERheVRocmVzaG9sZCA9IGNyZWF0ZUR1cmF0aW9uKDApOyB9XG4gICAgdmFyIHN0YXJ0RGF5ID0gbnVsbDtcbiAgICB2YXIgZW5kRGF5ID0gbnVsbDtcbiAgICBpZiAodGltZWRSYW5nZS5lbmQpIHtcbiAgICAgICAgZW5kRGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLmVuZCk7XG4gICAgICAgIHZhciBlbmRUaW1lTVMgPSB0aW1lZFJhbmdlLmVuZC52YWx1ZU9mKCkgLSBlbmREYXkudmFsdWVPZigpOyAvLyAjIG9mIG1pbGxpc2Vjb25kcyBpbnRvIGBlbmREYXlgXG4gICAgICAgIC8vIElmIHRoZSBlbmQgdGltZSBpcyBhY3R1YWxseSBpbmNsdXNpdmVseSBwYXJ0IG9mIHRoZSBuZXh0IGRheSBhbmQgaXMgZXF1YWwgdG8gb3JcbiAgICAgICAgLy8gYmV5b25kIHRoZSBuZXh0IGRheSB0aHJlc2hvbGQsIGFkanVzdCB0aGUgZW5kIHRvIGJlIHRoZSBleGNsdXNpdmUgZW5kIG9mIGBlbmREYXlgLlxuICAgICAgICAvLyBPdGhlcndpc2UsIGxlYXZpbmcgaXQgYXMgaW5jbHVzaXZlIHdpbGwgY2F1c2UgaXQgdG8gZXhjbHVkZSBgZW5kRGF5YC5cbiAgICAgICAgaWYgKGVuZFRpbWVNUyAmJiBlbmRUaW1lTVMgPj0gYXNSb3VnaE1zKG5leHREYXlUaHJlc2hvbGQpKSB7XG4gICAgICAgICAgICBlbmREYXkgPSBhZGREYXlzKGVuZERheSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVkUmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgc3RhcnREYXkgPSBzdGFydE9mRGF5KHRpbWVkUmFuZ2Uuc3RhcnQpOyAvLyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkYXkgdGhlIHJhbmdlIHN0YXJ0c1xuICAgICAgICAvLyBJZiBlbmQgaXMgd2l0aGluIGBzdGFydERheWAgYnV0IG5vdCBwYXN0IG5leHREYXlUaHJlc2hvbGQsIGFzc2lnbiB0aGUgZGVmYXVsdCBkdXJhdGlvbiBvZiBvbmUgZGF5LlxuICAgICAgICBpZiAoZW5kRGF5ICYmIGVuZERheSA8PSBzdGFydERheSkge1xuICAgICAgICAgICAgZW5kRGF5ID0gYWRkRGF5cyhzdGFydERheSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0RGF5LCBlbmQ6IGVuZERheSB9O1xufVxuLy8gc3BhbnMgZnJvbSBvbmUgZGF5IGludG8gYW5vdGhlcj9cbmZ1bmN0aW9uIGlzTXVsdGlEYXlSYW5nZShyYW5nZSkge1xuICAgIHZhciB2aXNpYmxlUmFuZ2UgPSBjb21wdXRlVmlzaWJsZURheVJhbmdlKHJhbmdlKTtcbiAgICByZXR1cm4gZGlmZkRheXModmlzaWJsZVJhbmdlLnN0YXJ0LCB2aXNpYmxlUmFuZ2UuZW5kKSA+IDE7XG59XG5mdW5jdGlvbiBkaWZmRGF0ZXMoZGF0ZTAsIGRhdGUxLCBkYXRlRW52LCBsYXJnZVVuaXQpIHtcbiAgICBpZiAobGFyZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKGRhdGVFbnYuZGlmZldob2xlWWVhcnMoZGF0ZTAsIGRhdGUxKSwgJ3llYXInKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobGFyZ2VVbml0ID09PSAnbW9udGgnKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihkYXRlRW52LmRpZmZXaG9sZU1vbnRocyhkYXRlMCwgZGF0ZTEpLCAnbW9udGgnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkaWZmRGF5QW5kVGltZShkYXRlMCwgZGF0ZTEpOyAvLyByZXR1cm5zIGEgZHVyYXRpb25cbiAgICB9XG59XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XG5cbmZ1bmN0aW9uIHBhcnNlUmVjdXJyaW5nKGV2ZW50SW5wdXQsIGFsbERheURlZmF1bHQsIGRhdGVFbnYsIHJlY3VycmluZ1R5cGVzLCBsZWZ0b3ZlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3VycmluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBsb2NhbExlZnRvdmVycyA9IHt9O1xuICAgICAgICB2YXIgcGFyc2VkID0gcmVjdXJyaW5nVHlwZXNbaV0ucGFyc2UoZXZlbnRJbnB1dCwgbG9jYWxMZWZ0b3ZlcnMsIGRhdGVFbnYpO1xuICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICB2YXIgYWxsRGF5ID0gbG9jYWxMZWZ0b3ZlcnMuYWxsRGF5O1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsTGVmdG92ZXJzLmFsbERheTsgLy8gcmVtb3ZlIGZyb20gbGVmdG92ZXJzXG4gICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSBhbGxEYXlEZWZhdWx0O1xuICAgICAgICAgICAgICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBwYXJzZWQuYWxsRGF5R3Vlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfX2Fzc2lnbihsZWZ0b3ZlcnMsIGxvY2FsTGVmdG92ZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHBhcnNlZC5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICB0eXBlRGF0YTogcGFyc2VkLnR5cGVEYXRhLFxuICAgICAgICAgICAgICAgIHR5cGVJZDogaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG5FdmVudCBNVVNUIGhhdmUgYSByZWN1cnJpbmdEZWZcbiovXG5mdW5jdGlvbiBleHBhbmRSZWN1cnJpbmdSYW5nZXMoZXZlbnREZWYsIGR1cmF0aW9uLCBmcmFtaW5nUmFuZ2UsIGRhdGVFbnYsIHJlY3VycmluZ1R5cGVzKSB7XG4gICAgdmFyIHR5cGVEZWYgPSByZWN1cnJpbmdUeXBlc1tldmVudERlZi5yZWN1cnJpbmdEZWYudHlwZUlkXTtcbiAgICB2YXIgbWFya2VycyA9IHR5cGVEZWYuZXhwYW5kKGV2ZW50RGVmLnJlY3VycmluZ0RlZi50eXBlRGF0YSwge1xuICAgICAgICBzdGFydDogZGF0ZUVudi5zdWJ0cmFjdChmcmFtaW5nUmFuZ2Uuc3RhcnQsIGR1cmF0aW9uKSxcbiAgICAgICAgZW5kOiBmcmFtaW5nUmFuZ2UuZW5kXG4gICAgfSwgZGF0ZUVudik7XG4gICAgLy8gdGhlIHJlY3VycmVuY2UgcGx1Z2lucyBkb24ndCBndWFyYW50ZWUgdGhhdCBhbGwtZGF5IGV2ZW50cyBhcmUgc3RhcnQtb2YtZGF5LCBzbyB3ZSBoYXZlIHRvXG4gICAgaWYgKGV2ZW50RGVmLmFsbERheSkge1xuICAgICAgICBtYXJrZXJzID0gbWFya2Vycy5tYXAoc3RhcnRPZkRheSk7XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJzO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuLy8gTWVyZ2VzIGFuIGFycmF5IG9mIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3QuXG4vLyBUaGUgc2Vjb25kIGFyZ3VtZW50IGFsbG93cyBmb3IgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgd2hvJ3Mgb2JqZWN0IHZhbHVlcyB3aWxsIGJlIG1lcmdlZCB0b2dldGhlci5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMocHJvcE9ianMsIGNvbXBsZXhQcm9wcykge1xuICAgIHZhciBkZXN0ID0ge307XG4gICAgdmFyIGk7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGNvbXBsZXhPYmpzO1xuICAgIHZhciBqO1xuICAgIHZhciB2YWw7XG4gICAgdmFyIHByb3BzO1xuICAgIGlmIChjb21wbGV4UHJvcHMpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBsZXhQcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmFtZSA9IGNvbXBsZXhQcm9wc1tpXTtcbiAgICAgICAgICAgIGNvbXBsZXhPYmpzID0gW107XG4gICAgICAgICAgICAvLyBjb2xsZWN0IHRoZSB0cmFpbGluZyBvYmplY3QgdmFsdWVzLCBzdG9wcGluZyB3aGVuIGEgbm9uLW9iamVjdCBpcyBkaXNjb3ZlcmVkXG4gICAgICAgICAgICBmb3IgKGogPSBwcm9wT2Jqcy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHByb3BPYmpzW2pdW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXhPYmpzLnVuc2hpZnQodmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHZhbDsgLy8gaWYgdGhlcmUgd2VyZSBubyBvYmplY3RzLCB0aGlzIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiB0aGUgdHJhaWxpbmcgdmFsdWVzIHdlcmUgb2JqZWN0cywgdXNlIHRoZSBtZXJnZWQgdmFsdWVcbiAgICAgICAgICAgIGlmIChjb21wbGV4T2Jqcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZXN0W25hbWVdID0gbWVyZ2VQcm9wcyhjb21wbGV4T2Jqcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29weSB2YWx1ZXMgaW50byB0aGUgZGVzdGluYXRpb24sIGdvaW5nIGZyb20gbGFzdCB0byBmaXJzdFxuICAgIGZvciAoaSA9IHByb3BPYmpzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHByb3BzID0gcHJvcE9ianNbaV07XG4gICAgICAgIGZvciAobmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBkZXN0KSkgeyAvLyBpZiBhbHJlYWR5IGFzc2lnbmVkIGJ5IHByZXZpb3VzIHByb3BzIG9yIGNvbXBsZXggcHJvcHMsIGRvbid0IHJlYXNzaWduXG4gICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xufVxuZnVuY3Rpb24gZmlsdGVySGFzaChoYXNoLCBmdW5jKSB7XG4gICAgdmFyIGZpbHRlcmVkID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGhhc2gpIHtcbiAgICAgICAgaWYgKGZ1bmMoaGFzaFtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFtrZXldID0gaGFzaFtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbmZ1bmN0aW9uIG1hcEhhc2goaGFzaCwgZnVuYykge1xuICAgIHZhciBuZXdIYXNoID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGhhc2gpIHtcbiAgICAgICAgbmV3SGFzaFtrZXldID0gZnVuYyhoYXNoW2tleV0sIGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdIYXNoO1xufVxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYSkge1xuICAgIHZhciBoYXNoID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhXzEgPSBhOyBfaSA8IGFfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhXzFbX2ldO1xuICAgICAgICBoYXNoW2l0ZW1dID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG59XG5mdW5jdGlvbiBoYXNoVmFsdWVzVG9BcnJheShvYmopIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgYS5wdXNoKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBpc1Byb3BzRXF1YWwob2JqMCwgb2JqMSkge1xuICAgIGZvciAodmFyIGtleSBpbiBvYmowKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iajAsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICghKGtleSBpbiBvYmoxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqMSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmoxLCBrZXkpKSB7XG4gICAgICAgICAgICBpZiAob2JqMFtrZXldICE9PSBvYmoxW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRXZlbnRzKHJhd0V2ZW50cywgc291cmNlSWQsIGNhbGVuZGFyLCBhbGxvd09wZW5SYW5nZSkge1xuICAgIHZhciBldmVudFN0b3JlID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCByYXdFdmVudHNfMSA9IHJhd0V2ZW50czsgX2kgPCByYXdFdmVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJhd0V2ZW50ID0gcmF3RXZlbnRzXzFbX2ldO1xuICAgICAgICB2YXIgdHVwbGUgPSBwYXJzZUV2ZW50KHJhd0V2ZW50LCBzb3VyY2VJZCwgY2FsZW5kYXIsIGFsbG93T3BlblJhbmdlKTtcbiAgICAgICAgaWYgKHR1cGxlKSB7XG4gICAgICAgICAgICBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50U3RvcmU7XG59XG5mdW5jdGlvbiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSkge1xuICAgIGlmIChldmVudFN0b3JlID09PSB2b2lkIDApIHsgZXZlbnRTdG9yZSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyB9XG4gICAgZXZlbnRTdG9yZS5kZWZzW3R1cGxlLmRlZi5kZWZJZF0gPSB0dXBsZS5kZWY7XG4gICAgaWYgKHR1cGxlLmluc3RhbmNlKSB7XG4gICAgICAgIGV2ZW50U3RvcmUuaW5zdGFuY2VzW3R1cGxlLmluc3RhbmNlLmluc3RhbmNlSWRdID0gdHVwbGUuaW5zdGFuY2U7XG4gICAgfVxuICAgIHJldHVybiBldmVudFN0b3JlO1xufVxuZnVuY3Rpb24gZXhwYW5kUmVjdXJyaW5nKGV2ZW50U3RvcmUsIGZyYW1pbmdSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgdmFyIGRlZnMgPSBldmVudFN0b3JlLmRlZnMsIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIC8vIHJlbW92ZSBleGlzdGluZyByZWN1cnJpbmcgaW5zdGFuY2VzXG4gICAgaW5zdGFuY2VzID0gZmlsdGVySGFzaChpbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gIWRlZnNbaW5zdGFuY2UuZGVmSWRdLnJlY3VycmluZ0RlZjtcbiAgICB9KTtcbiAgICBmb3IgKHZhciBkZWZJZCBpbiBkZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZzW2RlZklkXTtcbiAgICAgICAgaWYgKGRlZi5yZWN1cnJpbmdEZWYpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGRlZi5yZWN1cnJpbmdEZWYuZHVyYXRpb247XG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkZWYuYWxsRGF5ID9cbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24gOlxuICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0cyA9IGV4cGFuZFJlY3VycmluZ1JhbmdlcyhkZWYsIGR1cmF0aW9uLCBmcmFtaW5nUmFuZ2UsIGNhbGVuZGFyLmRhdGVFbnYsIGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5yZWN1cnJpbmdUeXBlcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHN0YXJ0c18xID0gc3RhcnRzOyBfaSA8IHN0YXJ0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHN0YXJ0c18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVFdmVudEluc3RhbmNlKGRlZklkLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW52LmFkZChzdGFydCwgZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZGVmczogZGVmcywgaW5zdGFuY2VzOiBpbnN0YW5jZXMgfTtcbn1cbi8vIHJldHJpZXZlcyBldmVudHMgdGhhdCBoYXZlIHRoZSBzYW1lIGdyb3VwSWQgYXMgdGhlIGluc3RhbmNlIHNwZWNpZmllZCBieSBgaW5zdGFuY2VJZGBcbi8vIG9yIHRoZXkgYXJlIHRoZSBzYW1lIGFzIHRoZSBpbnN0YW5jZS5cbi8vIHdoeSBtaWdodCBpbnN0YW5jZUlkIG5vdCBiZSBpbiB0aGUgc3RvcmU/IGFuIGV2ZW50IGZyb20gYW5vdGhlciBjYWxlbmRhcj9cbmZ1bmN0aW9uIGdldFJlbGV2YW50RXZlbnRzKGV2ZW50U3RvcmUsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBldmVudFN0b3JlLmluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIGRlZl8xID0gZXZlbnRTdG9yZS5kZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgLy8gZ2V0IGV2ZW50cy9pbnN0YW5jZXMgd2l0aCBzYW1lIGdyb3VwXG4gICAgICAgIHZhciBuZXdTdG9yZSA9IGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChsb29rRGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNFdmVudERlZnNHcm91cGVkKGRlZl8xLCBsb29rRGVmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGFkZCB0aGUgb3JpZ2luYWxcbiAgICAgICAgLy8gVE9ETzogd2lzaCB3ZSBjb3VsZCB1c2UgZXZlbnRUdXBsZVRvU3RvcmUgb3Igc29tZXRoaW5nIGxpa2UgaXRcbiAgICAgICAgbmV3U3RvcmUuZGVmc1tkZWZfMS5kZWZJZF0gPSBkZWZfMTtcbiAgICAgICAgbmV3U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgIHJldHVybiBuZXdTdG9yZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xufVxuZnVuY3Rpb24gaXNFdmVudERlZnNHcm91cGVkKGRlZjAsIGRlZjEpIHtcbiAgICByZXR1cm4gQm9vbGVhbihkZWYwLmdyb3VwSWQgJiYgZGVmMC5ncm91cElkID09PSBkZWYxLmdyb3VwSWQpO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtUmF3RXZlbnRzKHJhd0V2ZW50cywgZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGNhbEVhY2hUcmFuc2Zvcm0gPSBjYWxlbmRhci5vcHQoJ2V2ZW50RGF0YVRyYW5zZm9ybScpO1xuICAgIHZhciBzb3VyY2VFYWNoVHJhbnNmb3JtID0gZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5ldmVudERhdGFUcmFuc2Zvcm0gOiBudWxsO1xuICAgIGlmIChzb3VyY2VFYWNoVHJhbnNmb3JtKSB7XG4gICAgICAgIHJhd0V2ZW50cyA9IHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIHNvdXJjZUVhY2hUcmFuc2Zvcm0pO1xuICAgIH1cbiAgICBpZiAoY2FsRWFjaFRyYW5zZm9ybSkge1xuICAgICAgICByYXdFdmVudHMgPSB0cmFuc2Zvcm1FYWNoUmF3RXZlbnQocmF3RXZlbnRzLCBjYWxFYWNoVHJhbnNmb3JtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhd0V2ZW50cztcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIGZ1bmMpIHtcbiAgICB2YXIgcmVmaW5lZEV2ZW50cztcbiAgICBpZiAoIWZ1bmMpIHtcbiAgICAgICAgcmVmaW5lZEV2ZW50cyA9IHJhd0V2ZW50cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlZmluZWRFdmVudHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByYXdFdmVudHNfMiA9IHJhd0V2ZW50czsgX2kgPCByYXdFdmVudHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByYXdFdmVudCA9IHJhd0V2ZW50c18yW19pXTtcbiAgICAgICAgICAgIHZhciByZWZpbmVkRXZlbnQgPSBmdW5jKHJhd0V2ZW50KTtcbiAgICAgICAgICAgIGlmIChyZWZpbmVkRXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkRXZlbnRzLnB1c2gocmVmaW5lZEV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlZmluZWRFdmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmaW5lZEV2ZW50cy5wdXNoKHJhd0V2ZW50KTtcbiAgICAgICAgICAgIH0gLy8gaWYgYSBkaWZmZXJlbnQgZmFsc3kgdmFsdWUsIGRvIG5vdGhpbmdcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmaW5lZEV2ZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpIHtcbiAgICByZXR1cm4geyBkZWZzOiB7fSwgaW5zdGFuY2VzOiB7fSB9O1xufVxuZnVuY3Rpb24gbWVyZ2VFdmVudFN0b3JlcyhzdG9yZTAsIHN0b3JlMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlZnM6IF9fYXNzaWduKHt9LCBzdG9yZTAuZGVmcywgc3RvcmUxLmRlZnMpLFxuICAgICAgICBpbnN0YW5jZXM6IF9fYXNzaWduKHt9LCBzdG9yZTAuaW5zdGFuY2VzLCBzdG9yZTEuaW5zdGFuY2VzKVxuICAgIH07XG59XG5mdW5jdGlvbiBmaWx0ZXJFdmVudFN0b3JlRGVmcyhldmVudFN0b3JlLCBmaWx0ZXJGdW5jKSB7XG4gICAgdmFyIGRlZnMgPSBmaWx0ZXJIYXNoKGV2ZW50U3RvcmUuZGVmcywgZmlsdGVyRnVuYyk7XG4gICAgdmFyIGluc3RhbmNlcyA9IGZpbHRlckhhc2goZXZlbnRTdG9yZS5pbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gZGVmc1tpbnN0YW5jZS5kZWZJZF07IC8vIHN0aWxsIGV4aXN0cz9cbiAgICB9KTtcbiAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVJhbmdlKGlucHV0LCBkYXRlRW52KSB7XG4gICAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgICB2YXIgZW5kID0gbnVsbDtcbiAgICBpZiAoaW5wdXQuc3RhcnQpIHtcbiAgICAgICAgc3RhcnQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihpbnB1dC5zdGFydCk7XG4gICAgfVxuICAgIGlmIChpbnB1dC5lbmQpIHtcbiAgICAgICAgZW5kID0gZGF0ZUVudi5jcmVhdGVNYXJrZXIoaW5wdXQuZW5kKTtcbiAgICB9XG4gICAgaWYgKCFzdGFydCAmJiAhZW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgJiYgZW5kICYmIGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG59XG4vLyBTSURFLUVGRkVDVDogd2lsbCBtdXRhdGUgcmFuZ2VzLlxuLy8gV2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgcmVzdWx0LlxuZnVuY3Rpb24gaW52ZXJ0UmFuZ2VzKHJhbmdlcywgY29uc3RyYWludFJhbmdlKSB7XG4gICAgdmFyIGludmVydGVkUmFuZ2VzID0gW107XG4gICAgdmFyIHN0YXJ0ID0gY29uc3RyYWludFJhbmdlLnN0YXJ0OyAvLyB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyByYW5nZS4gdGhlIHN0YXJ0IG9mIHRoZSBuZXcgcmFuZ2VcbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0ZVJhbmdlO1xuICAgIC8vIHJhbmdlcyBuZWVkIHRvIGJlIGluIG9yZGVyLiByZXF1aXJlZCBmb3Igb3VyIGRhdGUtd2Fsa2luZyBhbGdvcml0aG1cbiAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGVSYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgLy8gYWRkIHRoZSBzcGFuIG9mIHRpbWUgYmVmb3JlIHRoZSBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgICAgICBpZiAoZGF0ZVJhbmdlLnN0YXJ0ID4gc3RhcnQpIHsgLy8gY29tcGFyZSBtaWxsaXNlY29uZCB0aW1lIChza2lwIGFueSBhbWJpZyBsb2dpYylcbiAgICAgICAgICAgIGludmVydGVkUmFuZ2VzLnB1c2goeyBzdGFydDogc3RhcnQsIGVuZDogZGF0ZVJhbmdlLnN0YXJ0IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlUmFuZ2UuZW5kID4gc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZVJhbmdlLmVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgdGhlIHNwYW4gb2YgdGltZSBhZnRlciB0aGUgbGFzdCBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgIGlmIChzdGFydCA8IGNvbnN0cmFpbnRSYW5nZS5lbmQpIHsgLy8gY29tcGFyZSBtaWxsaXNlY29uZCB0aW1lIChza2lwIGFueSBhbWJpZyBsb2dpYylcbiAgICAgICAgaW52ZXJ0ZWRSYW5nZXMucHVzaCh7IHN0YXJ0OiBzdGFydCwgZW5kOiBjb25zdHJhaW50UmFuZ2UuZW5kIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW52ZXJ0ZWRSYW5nZXM7XG59XG5mdW5jdGlvbiBjb21wYXJlUmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgcmV0dXJuIHJhbmdlMC5zdGFydC52YWx1ZU9mKCkgLSByYW5nZTEuc3RhcnQudmFsdWVPZigpOyAvLyBlYXJsaWVyIHJhbmdlcyBnbyBmaXJzdFxufVxuZnVuY3Rpb24gaW50ZXJzZWN0UmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgdmFyIHN0YXJ0ID0gcmFuZ2UwLnN0YXJ0O1xuICAgIHZhciBlbmQgPSByYW5nZTAuZW5kO1xuICAgIHZhciBuZXdSYW5nZSA9IG51bGw7XG4gICAgaWYgKHJhbmdlMS5zdGFydCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2UxLnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSBuZXcgRGF0ZShNYXRoLm1heChzdGFydC52YWx1ZU9mKCksIHJhbmdlMS5zdGFydC52YWx1ZU9mKCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmFuZ2UxLmVuZCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChlbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZCA9IHJhbmdlMS5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBuZXcgRGF0ZShNYXRoLm1pbihlbmQudmFsdWVPZigpLCByYW5nZTEuZW5kLnZhbHVlT2YoKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdGFydCA9PT0gbnVsbCB8fCBlbmQgPT09IG51bGwgfHwgc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgbmV3UmFuZ2UgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1JhbmdlO1xufVxuZnVuY3Rpb24gcmFuZ2VzRXF1YWwocmFuZ2UwLCByYW5nZTEpIHtcbiAgICByZXR1cm4gKHJhbmdlMC5zdGFydCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTAuc3RhcnQudmFsdWVPZigpKSA9PT0gKHJhbmdlMS5zdGFydCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTEuc3RhcnQudmFsdWVPZigpKSAmJlxuICAgICAgICAocmFuZ2UwLmVuZCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTAuZW5kLnZhbHVlT2YoKSkgPT09IChyYW5nZTEuZW5kID09PSBudWxsID8gbnVsbCA6IHJhbmdlMS5lbmQudmFsdWVPZigpKTtcbn1cbmZ1bmN0aW9uIHJhbmdlc0ludGVyc2VjdChyYW5nZTAsIHJhbmdlMSkge1xuICAgIHJldHVybiAocmFuZ2UwLmVuZCA9PT0gbnVsbCB8fCByYW5nZTEuc3RhcnQgPT09IG51bGwgfHwgcmFuZ2UwLmVuZCA+IHJhbmdlMS5zdGFydCkgJiZcbiAgICAgICAgKHJhbmdlMC5zdGFydCA9PT0gbnVsbCB8fCByYW5nZTEuZW5kID09PSBudWxsIHx8IHJhbmdlMC5zdGFydCA8IHJhbmdlMS5lbmQpO1xufVxuZnVuY3Rpb24gcmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpIHtcbiAgICByZXR1cm4gKG91dGVyUmFuZ2Uuc3RhcnQgPT09IG51bGwgfHwgKGlubmVyUmFuZ2Uuc3RhcnQgIT09IG51bGwgJiYgaW5uZXJSYW5nZS5zdGFydCA+PSBvdXRlclJhbmdlLnN0YXJ0KSkgJiZcbiAgICAgICAgKG91dGVyUmFuZ2UuZW5kID09PSBudWxsIHx8IChpbm5lclJhbmdlLmVuZCAhPT0gbnVsbCAmJiBpbm5lclJhbmdlLmVuZCA8PSBvdXRlclJhbmdlLmVuZCkpO1xufVxuZnVuY3Rpb24gcmFuZ2VDb250YWluc01hcmtlcihyYW5nZSwgZGF0ZSkge1xuICAgIHJldHVybiAocmFuZ2Uuc3RhcnQgPT09IG51bGwgfHwgZGF0ZSA+PSByYW5nZS5zdGFydCkgJiZcbiAgICAgICAgKHJhbmdlLmVuZCA9PT0gbnVsbCB8fCBkYXRlIDwgcmFuZ2UuZW5kKTtcbn1cbi8vIElmIHRoZSBnaXZlbiBkYXRlIGlzIG5vdCB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlLCBtb3ZlIGl0IGluc2lkZS5cbi8vIChJZiBpdCdzIHBhc3QgdGhlIGVuZCwgbWFrZSBpdCBvbmUgbWlsbGlzZWNvbmQgYmVmb3JlIHRoZSBlbmQpLlxuZnVuY3Rpb24gY29uc3RyYWluTWFya2VyVG9SYW5nZShkYXRlLCByYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsICYmIGRhdGUgPCByYW5nZS5zdGFydCkge1xuICAgICAgICByZXR1cm4gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCAmJiBkYXRlID49IHJhbmdlLmVuZCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUocmFuZ2UuZW5kLnZhbHVlT2YoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXhhY3QoYXJyYXksIGV4YWN0VmFsKSB7XG4gICAgdmFyIHJlbW92ZUNudCA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gZXhhY3RWYWwpIHtcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIHJlbW92ZUNudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW1vdmVDbnQ7XG59XG5mdW5jdGlvbiBpc0FycmF5c0VxdWFsKGEwLCBhMSkge1xuICAgIHZhciBsZW4gPSBhMC5sZW5ndGg7XG4gICAgdmFyIGk7XG4gICAgaWYgKGxlbiAhPT0gYTEubGVuZ3RoKSB7IC8vIG5vdCBhcnJheT8gb3Igbm90IHNhbWUgbGVuZ3RoP1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoYTBbaV0gIT09IGExW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemUod29ya2VyRnVuYykge1xuICAgIHZhciBhcmdzO1xuICAgIHZhciByZXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFhcmdzIHx8ICFpc0FycmF5c0VxdWFsKGFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXMgPSB3b3JrZXJGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuLypcbmFsd2F5cyBleGVjdXRlcyB0aGUgd29ya2VyRnVuYywgYnV0IGlmIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gdGhlIHByZXZpb3VzIHJlc3VsdCxcbnJldHVybiB0aGUgcHJldmlvdXMgcmVzdWx0IGluc3RlYWQuXG4qL1xuZnVuY3Rpb24gbWVtb2l6ZU91dHB1dCh3b3JrZXJGdW5jLCBlcXVhbGl0eUZ1bmMpIHtcbiAgICB2YXIgY2FjaGVkUmVzID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3UmVzID0gd29ya2VyRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoY2FjaGVkUmVzID09PSBudWxsIHx8ICEoY2FjaGVkUmVzID09PSBuZXdSZXMgfHwgZXF1YWxpdHlGdW5jKGNhY2hlZFJlcywgbmV3UmVzKSkpIHtcbiAgICAgICAgICAgIGNhY2hlZFJlcyA9IG5ld1JlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkUmVzO1xuICAgIH07XG59XG5cbnZhciBFWFRFTkRFRF9TRVRUSU5HU19BTkRfU0VWRVJJVElFUyA9IHtcbiAgICB3ZWVrOiAzLFxuICAgIHNlcGFyYXRvcjogMCxcbiAgICBvbWl0WmVyb01pbnV0ZTogMCxcbiAgICBtZXJpZGllbTogMCxcbiAgICBvbWl0Q29tbWFzOiAwXG59O1xudmFyIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTID0ge1xuICAgIHRpbWVab25lTmFtZTogNyxcbiAgICBlcmE6IDYsXG4gICAgeWVhcjogNSxcbiAgICBtb250aDogNCxcbiAgICBkYXk6IDIsXG4gICAgd2Vla2RheTogMixcbiAgICBob3VyOiAxLFxuICAgIG1pbnV0ZTogMSxcbiAgICBzZWNvbmQ6IDFcbn07XG52YXIgTUVSSURJRU1fUkUgPSAvXFxzKihbYXBdKVxcLj9tXFwuPy9pOyAvLyBlYXRzIHVwIGxlYWRpbmcgc3BhY2VzIHRvb1xudmFyIENPTU1BX1JFID0gLywvZzsgLy8gd2UgbmVlZCByZSBmb3IgZ2xvYmFsbmVzc1xudmFyIE1VTFRJX1NQQUNFX1JFID0gL1xccysvZztcbnZhciBMVFJfUkUgPSAvXFx1MjAwZS9nOyAvLyBjb250cm9sIGNoYXJhY3RlclxudmFyIFVUQ19SRSA9IC9VVEN8R01ULztcbnZhciBOYXRpdmVGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmF0aXZlRm9ybWF0dGVyKGZvcm1hdFNldHRpbmdzKSB7XG4gICAgICAgIHZhciBzdGFuZGFyZERhdGVQcm9wcyA9IHt9O1xuICAgICAgICB2YXIgZXh0ZW5kZWRTZXR0aW5ncyA9IHt9O1xuICAgICAgICB2YXIgc2V2ZXJpdHkgPSAwO1xuICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gZm9ybWF0U2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChuYW1lXzEgaW4gRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVMpIHtcbiAgICAgICAgICAgICAgICBleHRlbmRlZFNldHRpbmdzW25hbWVfMV0gPSBmb3JtYXRTZXR0aW5nc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgIHNldmVyaXR5ID0gTWF0aC5tYXgoRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVNbbmFtZV8xXSwgc2V2ZXJpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmREYXRlUHJvcHNbbmFtZV8xXSA9IGZvcm1hdFNldHRpbmdzW25hbWVfMV07XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVfMSBpbiBTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFUykge1xuICAgICAgICAgICAgICAgICAgICBzZXZlcml0eSA9IE1hdGgubWF4KFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTW25hbWVfMV0sIHNldmVyaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFuZGFyZERhdGVQcm9wcyA9IHN0YW5kYXJkRGF0ZVByb3BzO1xuICAgICAgICB0aGlzLmV4dGVuZGVkU2V0dGluZ3MgPSBleHRlbmRlZFNldHRpbmdzO1xuICAgICAgICB0aGlzLnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgICAgIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyA9IG1lbW9pemUoYnVpbGRGb3JtYXR0aW5nRnVuYyk7XG4gICAgfVxuICAgIE5hdGl2ZUZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyh0aGlzLnN0YW5kYXJkRGF0ZVByb3BzLCB0aGlzLmV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpKGRhdGUpO1xuICAgIH07XG4gICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5mb3JtYXRSYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHN0YW5kYXJkRGF0ZVByb3BzID0gX2Euc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MgPSBfYS5leHRlbmRlZFNldHRpbmdzO1xuICAgICAgICB2YXIgZGlmZlNldmVyaXR5ID0gY29tcHV0ZU1hcmtlckRpZmZTZXZlcml0eShzdGFydC5tYXJrZXIsIGVuZC5tYXJrZXIsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pO1xuICAgICAgICBpZiAoIWRpZmZTZXZlcml0eSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsID0gZGlmZlNldmVyaXR5O1xuICAgICAgICBpZiAoYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsID4gMSAmJiAvLyB0aGUgdHdvIGRhdGVzIGFyZSBkaWZmZXJlbnQgaW4gYSB3YXkgdGhhdCdzIGxhcmdlciBzY2FsZSB0aGFuIHRpbWVcbiAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy55ZWFyID09PSAnbnVtZXJpYycgfHwgc3RhbmRhcmREYXRlUHJvcHMueWVhciA9PT0gJzItZGlnaXQnKSAmJlxuICAgICAgICAgICAgKHN0YW5kYXJkRGF0ZVByb3BzLm1vbnRoID09PSAnbnVtZXJpYycgfHwgc3RhbmRhcmREYXRlUHJvcHMubW9udGggPT09ICcyLWRpZ2l0JykgJiZcbiAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICdudW1lcmljJyB8fCBzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICcyLWRpZ2l0JykpIHtcbiAgICAgICAgICAgIGJpZ2dlc3RVbml0Rm9yUGFydGlhbCA9IDE7IC8vIG1ha2UgaXQgbG9vayBsaWtlIHRoZSBkYXRlcyBhcmUgb25seSBkaWZmZXJlbnQgaW4gdGVybXMgb2YgdGltZVxuICAgICAgICB9XG4gICAgICAgIHZhciBmdWxsMCA9IHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgdmFyIGZ1bGwxID0gdGhpcy5mb3JtYXQoZW5kLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGZ1bGwwID09PSBmdWxsMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bGwwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0aWFsRGF0ZVByb3BzID0gY29tcHV0ZVBhcnRpYWxGb3JtYXR0aW5nT3B0aW9ucyhzdGFuZGFyZERhdGVQcm9wcywgYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsKTtcbiAgICAgICAgdmFyIHBhcnRpYWxGb3JtYXR0aW5nRnVuYyA9IGJ1aWxkRm9ybWF0dGluZ0Z1bmMocGFydGlhbERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCk7XG4gICAgICAgIHZhciBwYXJ0aWFsMCA9IHBhcnRpYWxGb3JtYXR0aW5nRnVuYyhzdGFydCk7XG4gICAgICAgIHZhciBwYXJ0aWFsMSA9IHBhcnRpYWxGb3JtYXR0aW5nRnVuYyhlbmQpO1xuICAgICAgICB2YXIgaW5zZXJ0aW9uID0gZmluZENvbW1vbkluc2VydGlvbihmdWxsMCwgcGFydGlhbDAsIGZ1bGwxLCBwYXJ0aWFsMSk7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBleHRlbmRlZFNldHRpbmdzLnNlcGFyYXRvciB8fCAnJztcbiAgICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydGlvbi5iZWZvcmUgKyBwYXJ0aWFsMCArIHNlcGFyYXRvciArIHBhcnRpYWwxICsgaW5zZXJ0aW9uLmFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdWxsMCArIHNlcGFyYXRvciArIGZ1bGwxO1xuICAgIH07XG4gICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5nZXRMYXJnZXN0VW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnNldmVyaXR5KSB7XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21vbnRoJztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3dlZWsnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RheSc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBOYXRpdmVGb3JtYXR0ZXI7XG59KCkpO1xuZnVuY3Rpb24gYnVpbGRGb3JtYXR0aW5nRnVuYyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCkge1xuICAgIHZhciBzdGFuZGFyZERhdGVQcm9wQ250ID0gT2JqZWN0LmtleXMoc3RhbmRhcmREYXRlUHJvcHMpLmxlbmd0aDtcbiAgICBpZiAoc3RhbmRhcmREYXRlUHJvcENudCA9PT0gMSAmJiBzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0VGltZVpvbmVPZmZzZXQoZGF0ZS50aW1lWm9uZU9mZnNldCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChzdGFuZGFyZERhdGVQcm9wQ250ID09PSAwICYmIGV4dGVuZGVkU2V0dGluZ3Mud2Vlaykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRXZWVrTnVtYmVyKGNvbnRleHQuY29tcHV0ZVdlZWtOdW1iZXIoZGF0ZS5tYXJrZXIpLCBjb250ZXh0LndlZWtMYWJlbCwgY29udGV4dC5sb2NhbGUsIGV4dGVuZGVkU2V0dGluZ3Mud2Vlayk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBidWlsZE5hdGl2ZUZvcm1hdHRpbmdGdW5jKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGJ1aWxkTmF0aXZlRm9ybWF0dGluZ0Z1bmMoc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpIHtcbiAgICBzdGFuZGFyZERhdGVQcm9wcyA9IF9fYXNzaWduKHt9LCBzdGFuZGFyZERhdGVQcm9wcyk7IC8vIGNvcHlcbiAgICBleHRlbmRlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIGV4dGVuZGVkU2V0dGluZ3MpOyAvLyBjb3B5XG4gICAgc2FuaXRpemVTZXR0aW5ncyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncyk7XG4gICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmUgPSAnVVRDJzsgLy8gd2UgbGV2ZXJhZ2UgdGhlIG9ubHkgZ3VhcmFudGVlZCB0aW1lWm9uZSBmb3Igb3VyIFVUQyBtYXJrZXJzXG4gICAgdmFyIG5vcm1hbEZvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCBzdGFuZGFyZERhdGVQcm9wcyk7XG4gICAgdmFyIHplcm9Gb3JtYXQ7IC8vIG5lZWRlZD9cbiAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0WmVyb01pbnV0ZSkge1xuICAgICAgICB2YXIgemVyb1Byb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTtcbiAgICAgICAgZGVsZXRlIHplcm9Qcm9wcy5taW51dGU7IC8vIHNlY29uZHMgYW5kIG1zIHdlcmUgYWxyZWFkeSBjb25zaWRlcmVkIGluIHNhbml0aXplU2V0dGluZ3NcbiAgICAgICAgemVyb0Zvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCB6ZXJvUHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IGRhdGUubWFya2VyO1xuICAgICAgICB2YXIgZm9ybWF0O1xuICAgICAgICBpZiAoemVyb0Zvcm1hdCAmJiAhbWFya2VyLmdldFVUQ01pbnV0ZXMoKSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gemVyb0Zvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IG5vcm1hbEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcyA9IGZvcm1hdC5mb3JtYXQobWFya2VyKTtcbiAgICAgICAgcmV0dXJuIHBvc3RQcm9jZXNzKHMsIGRhdGUsIHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2FuaXRpemVTZXR0aW5ncyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncykge1xuICAgIC8vIGRlYWwgd2l0aCBhIGJyb3dzZXIgaW5jb25zaXN0ZW5jeSB3aGVyZSBmb3JtYXR0aW5nIHRoZSB0aW1lem9uZVxuICAgIC8vIHJlcXVpcmVzIHRoYXQgdGhlIGhvdXIvbWludXRlIGJlIHByZXNlbnQuXG4gICAgaWYgKHN0YW5kYXJkRGF0ZVByb3BzLnRpbWVab25lTmFtZSkge1xuICAgICAgICBpZiAoIXN0YW5kYXJkRGF0ZVByb3BzLmhvdXIpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzLmhvdXIgPSAnMi1kaWdpdCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFuZGFyZERhdGVQcm9wcy5taW51dGUpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzLm1pbnV0ZSA9ICcyLWRpZ2l0JztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvbmx5IHN1cHBvcnQgc2hvcnQgdGltZXpvbmUgbmFtZXNcbiAgICBpZiAoc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID09PSAnbG9uZycpIHtcbiAgICAgICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID0gJ3Nob3J0JztcbiAgICB9XG4gICAgLy8gaWYgcmVxdWVzdGluZyB0byBkaXNwbGF5IHNlY29uZHMsIE1VU1QgZGlzcGxheSBtaW51dGVzXG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGUgJiYgKHN0YW5kYXJkRGF0ZVByb3BzLnNlY29uZCB8fCBzdGFuZGFyZERhdGVQcm9wcy5taWxsaXNlY29uZCkpIHtcbiAgICAgICAgZGVsZXRlIGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGU7XG4gICAgfVxufVxuZnVuY3Rpb24gcG9zdFByb2Nlc3MocywgZGF0ZSwgc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpIHtcbiAgICBzID0gcy5yZXBsYWNlKExUUl9SRSwgJycpOyAvLyByZW1vdmUgbGVmdC10by1yaWdodCBjb250cm9sIGNoYXJzLiBkbyBmaXJzdC4gZ29vZCBmb3Igb3RoZXIgcmVnZXhlc1xuICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgcyA9IGluamVjdFR6b1N0cihzLCAoY29udGV4dC50aW1lWm9uZSA9PT0gJ1VUQycgfHwgZGF0ZS50aW1lWm9uZU9mZnNldCA9PSBudWxsKSA/XG4gICAgICAgICAgICAnVVRDJyA6IC8vIGltcG9ydGFudCB0byBub3JtYWxpemUgZm9yIElFLCB3aGljaCBkb2VzIFwiR01UXCJcbiAgICAgICAgICAgIGZvcm1hdFRpbWVab25lT2Zmc2V0KGRhdGUudGltZVpvbmVPZmZzZXQpKTtcbiAgICB9XG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdENvbW1hcykge1xuICAgICAgICBzID0gcy5yZXBsYWNlKENPTU1BX1JFLCAnJykudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0WmVyb01pbnV0ZSkge1xuICAgICAgICBzID0gcy5yZXBsYWNlKCc6MDAnLCAnJyk7IC8vIHplcm9Gb3JtYXQgZG9lc24ndCBhbHdheXMgYWNoaWV2ZSB0aGlzXG4gICAgfVxuICAgIC8vIF4gZG8gYW55dGhpbmcgdGhhdCBtaWdodCBjcmVhdGUgYWRqYWNlbnQgc3BhY2VzIGJlZm9yZSB0aGlzIHBvaW50LFxuICAgIC8vIGJlY2F1c2UgTUVSSURJRU1fUkUgbGlrZXMgdG8gZWF0IHVwIGxvYWRpbmcgc3BhY2VzXG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09IGZhbHNlKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsICcnKS50cmltKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICduYXJyb3cnKSB7IC8vIGEvcFxuICAgICAgICBzID0gcy5yZXBsYWNlKE1FUklESUVNX1JFLCBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbTEudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICdzaG9ydCcpIHsgLy8gYW0vcG1cbiAgICAgICAgcyA9IHMucmVwbGFjZShNRVJJRElFTV9SRSwgZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG0xLnRvTG9jYWxlTG93ZXJDYXNlKCkgKyAnbSc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSAnbG93ZXJjYXNlJykgeyAvLyBvdGhlciBtZXJpZGllbSB0cmFuc2Zvcm1lcnMgYWxyZWFkeSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlXG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCkge1xuICAgICAgICAgICAgcmV0dXJuIG0wLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzID0gcy5yZXBsYWNlKE1VTFRJX1NQQUNFX1JFLCAnICcpO1xuICAgIHMgPSBzLnRyaW0oKTtcbiAgICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIGluamVjdFR6b1N0cihzLCB0em9TdHIpIHtcbiAgICB2YXIgcmVwbGFjZWQgPSBmYWxzZTtcbiAgICBzID0gcy5yZXBsYWNlKFVUQ19SRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXBsYWNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0em9TdHI7XG4gICAgfSk7XG4gICAgLy8gSUUxMSBkb2Vzbid0IGluY2x1ZGUgVVRDL0dNVCBpbiB0aGUgb3JpZ2luYWwgc3RyaW5nLCBzbyBhcHBlbmQgdG8gZW5kXG4gICAgaWYgKCFyZXBsYWNlZCkge1xuICAgICAgICBzICs9ICcgJyArIHR6b1N0cjtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyKG51bSwgd2Vla0xhYmVsLCBsb2NhbGUsIGRpc3BsYXkpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBpZiAoZGlzcGxheSA9PT0gJ25hcnJvdycpIHtcbiAgICAgICAgcGFydHMucHVzaCh3ZWVrTGFiZWwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkaXNwbGF5ID09PSAnc2hvcnQnKSB7XG4gICAgICAgIHBhcnRzLnB1c2god2Vla0xhYmVsLCAnICcpO1xuICAgIH1cbiAgICAvLyBvdGhlcndpc2UsIGNvbnNpZGVyZWQgJ251bWVyaWMnXG4gICAgcGFydHMucHVzaChsb2NhbGUuc2ltcGxlTnVtYmVyRm9ybWF0LmZvcm1hdChudW0pKTtcbiAgICBpZiAobG9jYWxlLm9wdGlvbnMuaXNSdGwpIHsgLy8gVE9ETzogdXNlIGNvbnRyb2wgY2hhcmFjdGVycyBpbnN0ZWFkP1xuICAgICAgICBwYXJ0cy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn1cbi8vIFJhbmdlIEZvcm1hdHRpbmcgVXRpbHNcbi8vIDAgPSBleGFjdGx5IHRoZSBzYW1lXG4vLyAxID0gZGlmZmVyZW50IGJ5IHRpbWVcbi8vIGFuZCBiaWdnZXJcbmZ1bmN0aW9uIGNvbXB1dGVNYXJrZXJEaWZmU2V2ZXJpdHkoZDAsIGQxLCBjYSkge1xuICAgIGlmIChjYS5nZXRNYXJrZXJZZWFyKGQwKSAhPT0gY2EuZ2V0TWFya2VyWWVhcihkMSkpIHtcbiAgICAgICAgcmV0dXJuIDU7XG4gICAgfVxuICAgIGlmIChjYS5nZXRNYXJrZXJNb250aChkMCkgIT09IGNhLmdldE1hcmtlck1vbnRoKGQxKSkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgaWYgKGNhLmdldE1hcmtlckRheShkMCkgIT09IGNhLmdldE1hcmtlckRheShkMSkpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIGlmICh0aW1lQXNNcyhkMCkgIT09IHRpbWVBc01zKGQxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMsIGJpZ2dlc3RVbml0KSB7XG4gICAgdmFyIHBhcnRpYWxPcHRpb25zID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8yIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEobmFtZV8yIGluIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTKSB8fCAvLyBub3QgYSBkYXRlIHBhcnQgcHJvcCAobGlrZSB0aW1lWm9uZSlcbiAgICAgICAgICAgIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTW25hbWVfMl0gPD0gYmlnZ2VzdFVuaXQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPcHRpb25zW25hbWVfMl0gPSBvcHRpb25zW25hbWVfMl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRpYWxPcHRpb25zO1xufVxuZnVuY3Rpb24gZmluZENvbW1vbkluc2VydGlvbihmdWxsMCwgcGFydGlhbDAsIGZ1bGwxLCBwYXJ0aWFsMSkge1xuICAgIHZhciBpMCA9IDA7XG4gICAgd2hpbGUgKGkwIDwgZnVsbDAubGVuZ3RoKSB7XG4gICAgICAgIHZhciBmb3VuZDAgPSBmdWxsMC5pbmRleE9mKHBhcnRpYWwwLCBpMCk7XG4gICAgICAgIGlmIChmb3VuZDAgPT09IC0xKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVmb3JlMCA9IGZ1bGwwLnN1YnN0cigwLCBmb3VuZDApO1xuICAgICAgICBpMCA9IGZvdW5kMCArIHBhcnRpYWwwLmxlbmd0aDtcbiAgICAgICAgdmFyIGFmdGVyMCA9IGZ1bGwwLnN1YnN0cihpMCk7XG4gICAgICAgIHZhciBpMSA9IDA7XG4gICAgICAgIHdoaWxlIChpMSA8IGZ1bGwxLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGZvdW5kMSA9IGZ1bGwxLmluZGV4T2YocGFydGlhbDEsIGkxKTtcbiAgICAgICAgICAgIGlmIChmb3VuZDEgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmVmb3JlMSA9IGZ1bGwxLnN1YnN0cigwLCBmb3VuZDEpO1xuICAgICAgICAgICAgaTEgPSBmb3VuZDEgKyBwYXJ0aWFsMS5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIxID0gZnVsbDEuc3Vic3RyKGkxKTtcbiAgICAgICAgICAgIGlmIChiZWZvcmUwID09PSBiZWZvcmUxICYmIGFmdGVyMCA9PT0gYWZ0ZXIxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlOiBiZWZvcmUwLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcjogYWZ0ZXIwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLypcblRPRE86IGZpeCB0aGUgdGVybWlub2xvZ3kgb2YgXCJmb3JtYXR0ZXJcIiB2cyBcImZvcm1hdHRpbmcgZnVuY1wiXG4qL1xuLypcbkF0IHRoZSB0aW1lIG9mIGluc3RhbnRpYXRpb24sIHRoaXMgb2JqZWN0IGRvZXMgbm90IGtub3cgd2hpY2ggY21kLWZvcm1hdHRpbmcgc3lzdGVtIGl0IHdpbGwgdXNlLlxuSXQgcmVjZWl2ZXMgdGhpcyBhdCB0aGUgdGltZSBvZiBmb3JtYXR0aW5nLCBhcyBhIHNldHRpbmcuXG4qL1xudmFyIENtZEZvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDbWRGb3JtYXR0ZXIoY21kU3RyLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgdGhpcy5jbWRTdHIgPSBjbWRTdHI7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yO1xuICAgIH1cbiAgICBDbWRGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmNtZEZvcm1hdHRlcih0aGlzLmNtZFN0ciwgY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoZGF0ZSwgbnVsbCwgY29udGV4dCwgdGhpcy5zZXBhcmF0b3IpKTtcbiAgICB9O1xuICAgIENtZEZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5jbWRGb3JtYXR0ZXIodGhpcy5jbWRTdHIsIGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQsIHRoaXMuc2VwYXJhdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ21kRm9ybWF0dGVyO1xufSgpKTtcblxudmFyIEZ1bmNGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnVuY0Zvcm1hdHRlcihmdW5jKSB7XG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG4gICAgfVxuICAgIEZ1bmNGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmMoY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoZGF0ZSwgbnVsbCwgY29udGV4dCkpO1xuICAgIH07XG4gICAgRnVuY0Zvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jKGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBGdW5jRm9ybWF0dGVyO1xufSgpKTtcblxuLy8gRm9ybWF0dGVyIE9iamVjdCBDcmVhdGlvblxuZnVuY3Rpb24gY3JlYXRlRm9ybWF0dGVyKGlucHV0LCBkZWZhdWx0U2VwYXJhdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdFNlcGFyYXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gX19hc3NpZ24oeyBzZXBhcmF0b3I6IGRlZmF1bHRTZXBhcmF0b3IgfSwgaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlRm9ybWF0dGVyKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbmV3IENtZEZvcm1hdHRlcihpbnB1dCwgZGVmYXVsdFNlcGFyYXRvcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmNGb3JtYXR0ZXIoaW5wdXQpO1xuICAgIH1cbn1cbi8vIFN0cmluZyBVdGlsc1xuLy8gdGltZVpvbmVPZmZzZXQgaXMgaW4gbWludXRlc1xuZnVuY3Rpb24gYnVpbGRJc29TdHJpbmcobWFya2VyLCB0aW1lWm9uZU9mZnNldCwgc3RyaXBaZXJvVGltZSkge1xuICAgIGlmIChzdHJpcFplcm9UaW1lID09PSB2b2lkIDApIHsgc3RyaXBaZXJvVGltZSA9IGZhbHNlOyB9XG4gICAgdmFyIHMgPSBtYXJrZXIudG9JU09TdHJpbmcoKTtcbiAgICBzID0gcy5yZXBsYWNlKCcuMDAwJywgJycpO1xuICAgIGlmIChzdHJpcFplcm9UaW1lKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoJ1QwMDowMDowMFonLCAnJyk7XG4gICAgfVxuICAgIGlmIChzLmxlbmd0aCA+IDEwKSB7IC8vIHRpbWUgcGFydCB3YXNuJ3Qgc3RyaXBwZWQsIGNhbiBhZGQgdGltZXpvbmUgaW5mb1xuICAgICAgICBpZiAodGltZVpvbmVPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aW1lWm9uZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsIGZvcm1hdFRpbWVab25lT2Zmc2V0KHRpbWVab25lT2Zmc2V0LCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBpdHMgVVRDLTAgYW5kIHdlIHdhbnQgdG8ga2VlcCB0aGUgWlxuICAgIH1cbiAgICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIGZvcm1hdElzb1RpbWVTdHJpbmcobWFya2VyKSB7XG4gICAgcmV0dXJuIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENIb3VycygpLCAyKSArICc6JyArXG4gICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENNaW51dGVzKCksIDIpICsgJzonICtcbiAgICAgICAgcGFkU3RhcnQobWFya2VyLmdldFVUQ1NlY29uZHMoKSwgMik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lWm9uZU9mZnNldChtaW51dGVzLCBkb0lzbykge1xuICAgIGlmIChkb0lzbyA9PT0gdm9pZCAwKSB7IGRvSXNvID0gZmFsc2U7IH1cbiAgICB2YXIgc2lnbiA9IG1pbnV0ZXMgPCAwID8gJy0nIDogJysnO1xuICAgIHZhciBhYnMgPSBNYXRoLmFicyhtaW51dGVzKTtcbiAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFicyAvIDYwKTtcbiAgICB2YXIgbWlucyA9IE1hdGgucm91bmQoYWJzICUgNjApO1xuICAgIGlmIChkb0lzbykge1xuICAgICAgICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGhvdXJzLCAyKSArICc6JyArIHBhZFN0YXJ0KG1pbnMsIDIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdHTVQnICsgc2lnbiArIGhvdXJzICsgKG1pbnMgPyAnOicgKyBwYWRTdGFydChtaW5zLCAyKSA6ICcnKTtcbiAgICB9XG59XG4vLyBBcmcgVXRpbHNcbmZ1bmN0aW9uIGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQsIHNlcGFyYXRvcikge1xuICAgIHZhciBzdGFydEluZm8gPSBleHBhbmRab25lZE1hcmtlcihzdGFydCwgY29udGV4dC5jYWxlbmRhclN5c3RlbSk7XG4gICAgdmFyIGVuZEluZm8gPSBlbmQgPyBleHBhbmRab25lZE1hcmtlcihlbmQsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRlOiBzdGFydEluZm8sXG4gICAgICAgIHN0YXJ0OiBzdGFydEluZm8sXG4gICAgICAgIGVuZDogZW5kSW5mbyxcbiAgICAgICAgdGltZVpvbmU6IGNvbnRleHQudGltZVpvbmUsXG4gICAgICAgIGxvY2FsZUNvZGVzOiBjb250ZXh0LmxvY2FsZS5jb2RlcyxcbiAgICAgICAgc2VwYXJhdG9yOiBzZXBhcmF0b3JcbiAgICB9O1xufVxuZnVuY3Rpb24gZXhwYW5kWm9uZWRNYXJrZXIoZGF0ZUluZm8sIGNhbGVuZGFyU3lzdGVtKSB7XG4gICAgdmFyIGEgPSBjYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KGRhdGVJbmZvLm1hcmtlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFya2VyOiBkYXRlSW5mby5tYXJrZXIsXG4gICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlSW5mby50aW1lWm9uZU9mZnNldCxcbiAgICAgICAgYXJyYXk6IGEsXG4gICAgICAgIHllYXI6IGFbMF0sXG4gICAgICAgIG1vbnRoOiBhWzFdLFxuICAgICAgICBkYXk6IGFbMl0sXG4gICAgICAgIGhvdXI6IGFbM10sXG4gICAgICAgIG1pbnV0ZTogYVs0XSxcbiAgICAgICAgc2Vjb25kOiBhWzVdLFxuICAgICAgICBtaWxsaXNlY29uZDogYVs2XVxuICAgIH07XG59XG5cbnZhciBFdmVudFNvdXJjZUFwaSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudFNvdXJjZUFwaShjYWxlbmRhciwgaW50ZXJuYWxFdmVudFNvdXJjZSkge1xuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxFdmVudFNvdXJjZSA9IGludGVybmFsRXZlbnRTb3VyY2U7XG4gICAgfVxuICAgIEV2ZW50U291cmNlQXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnLFxuICAgICAgICAgICAgc291cmNlSWQ6IHRoaXMuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEV2ZW50U291cmNlQXBpLnByb3RvdHlwZS5yZWZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyxcbiAgICAgICAgICAgIHNvdXJjZUlkczogW3RoaXMuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZF1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlLnB1YmxpY0lkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgIC8vIG9ubHkgcmVsZXZhbnQgdG8ganNvbi1mZWVkIGV2ZW50IHNvdXJjZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlLm1ldGEudXJsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRXZlbnRTb3VyY2VBcGk7XG59KCkpO1xuXG52YXIgRXZlbnRBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRBcGkoY2FsZW5kYXIsIGRlZiwgaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlIHx8IG51bGw7XG4gICAgfVxuICAgIC8qXG4gICAgVE9ETzogbWFrZSBldmVudCBzdHJ1Y3QgbW9yZSByZXNwb25zaWJsZSBmb3IgdGhpc1xuICAgICovXG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChuYW1lIGluIERBVEVfUFJPUFMpIDtcbiAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBOT05fREFURV9QUk9QUykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBOT05fREFURV9QUk9QU1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHZhbCA9IE5PTl9EQVRFX1BST1BTW25hbWVdKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wczogKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgaW4gVU5TQ09QRURfRVZFTlRfVUlfUFJPUFMpIHtcbiAgICAgICAgICAgIHZhciB1aSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgVU5TQ09QRURfRVZFTlRfVUlfUFJPUFNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QU1tuYW1lXSh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICB1aSA9IHsgYmFja2dyb3VuZENvbG9yOiB2YWwsIGJvcmRlckNvbG9yOiB2YWwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdlZGl0YWJsZScpIHtcbiAgICAgICAgICAgICAgICB1aSA9IHsgc3RhcnRFZGl0YWJsZTogdmFsLCBkdXJhdGlvbkVkaXRhYmxlOiB2YWwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVpID0gKF9iID0ge30sIF9iW25hbWVdID0gdmFsLCBfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wczogeyB1aTogdWkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXRFeHRlbmRlZFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5tdXRhdGUoe1xuICAgICAgICAgICAgZXh0ZW5kZWRQcm9wczogKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSlcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBFdmVudEFwaS5wcm90b3R5cGUuc2V0U3RhcnQgPSBmdW5jdGlvbiAoc3RhcnRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICBpZiAoc3RhcnQgJiYgdGhpcy5faW5zdGFuY2UpIHsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgdmFyIHN0YXJ0RGVsdGEgPSBkaWZmRGF0ZXMoaW5zdGFuY2VSYW5nZS5zdGFydCwgc3RhcnQsIGRhdGVFbnYsIG9wdGlvbnMuZ3JhbnVsYXJpdHkpOyAvLyB3aGF0IGlmIHBhcnNlZCBiYWQhP1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWFpbnRhaW5EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogc3RhcnREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogc3RhcnREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEVuZCA9IGZ1bmN0aW9uIChlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIGlmIChlbmRJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZERlbHRhID0gZGlmZkRhdGVzKHRoaXMuX2luc3RhbmNlLnJhbmdlLmVuZCwgZW5kLCBkYXRlRW52LCBvcHRpb25zLmdyYW51bGFyaXR5KTtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGVuZERlbHRhOiBlbmREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhbmRhcmRQcm9wczogeyBoYXNFbmQ6IGZhbHNlIH0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXREYXRlcyA9IGZ1bmN0aW9uIChzdGFydElucHV0LCBlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBzdGFuZGFyZFByb3BzID0geyBhbGxEYXk6IG9wdGlvbnMuYWxsRGF5IH07XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICB2YXIgZW5kO1xuICAgICAgICBpZiAoIXN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICBpZiAoIWVuZCkgeyAvLyBUT0RPOiB3YXJuaW5nIGlmIHBhcnNlZCBiYWRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgLy8gd2hlbiBjb21wdXRpbmcgdGhlIGRpZmYgZm9yIGFuIGV2ZW50IGJlaW5nIGNvbnZlcnRlZCB0byBhbGwtZGF5LFxuICAgICAgICAgICAgLy8gY29tcHV0ZSBkaWZmIG9mZiBvZiB0aGUgYWxsLWRheSB2YWx1ZXMgdGhlIHdheSBldmVudC1tdXRhdGlvbiBkb2VzLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsRGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VSYW5nZSA9IGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UoaW5zdGFuY2VSYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhcnREZWx0YSA9IGRpZmZEYXRlcyhpbnN0YW5jZVJhbmdlLnN0YXJ0LCBzdGFydCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZERlbHRhID0gZGlmZkRhdGVzKGluc3RhbmNlUmFuZ2UuZW5kLCBlbmQsIGRhdGVFbnYsIG9wdGlvbnMuZ3JhbnVsYXJpdHkpO1xuICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbnNFcXVhbChzdGFydERlbHRhLCBlbmREZWx0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBkYXRlc0RlbHRhOiBzdGFydERlbHRhLCBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFydERlbHRhOiBzdGFydERlbHRhLCBlbmREZWx0YTogZW5kRGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIG1lYW5zIFwiY2xlYXIgdGhlIGVuZFwiXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGRhdGVzRGVsdGE6IHN0YXJ0RGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlU3RhcnQgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFydERlbHRhOiBkZWx0YSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLm1vdmVFbmQgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBlbmREZWx0YTogZGVsdGEgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlRGF0ZXMgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBkYXRlc0RlbHRhOiBkZWx0YSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEFsbERheSA9IGZ1bmN0aW9uIChhbGxEYXksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogYWxsRGF5IH07XG4gICAgICAgIHZhciBtYWludGFpbkR1cmF0aW9uID0gb3B0aW9ucy5tYWludGFpbkR1cmF0aW9uO1xuICAgICAgICBpZiAobWFpbnRhaW5EdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtYWludGFpbkR1cmF0aW9uID0gdGhpcy5fY2FsZW5kYXIub3B0KCdhbGxEYXlNYWludGFpbkR1cmF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RlZi5hbGxEYXkgIT09IGFsbERheSkge1xuICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBtYWludGFpbkR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXV0YXRlKHsgc3RhbmRhcmRQcm9wczogc3RhbmRhcmRQcm9wcyB9KTtcbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5mb3JtYXRSYW5nZSA9IGZ1bmN0aW9uIChmb3JtYXRJbnB1dCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyKGZvcm1hdElucHV0LCB0aGlzLl9jYWxlbmRhci5vcHQoJ2RlZmF1bHRSYW5nZVNlcGFyYXRvcicpKTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5oYXNFbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCBpbnN0YW5jZS5yYW5nZS5lbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBpbnN0YW5jZS5mb3JjZWRTdGFydFR6byxcbiAgICAgICAgICAgICAgICBmb3JjZWRFbmRUem86IGluc3RhbmNlLmZvcmNlZEVuZFR6b1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoaW5zdGFuY2UucmFuZ2Uuc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgIGZvcmNlZFR6bzogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEFwaS5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIHZhciBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnTVVUQVRFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZDogaW5zdGFuY2UuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgZnJvbUFwaTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IHRoaXMuX2NhbGVuZGFyLnN0YXRlLmV2ZW50U3RvcmU7XG4gICAgICAgICAgICB0aGlzLl9kZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmLmRlZklkXTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2UuaW5zdGFuY2VJZF07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRfREVGJyxcbiAgICAgICAgICAgIGRlZklkOiB0aGlzLl9kZWYuZGVmSWRcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInNvdXJjZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZUlkID0gdGhpcy5fZGVmLnNvdXJjZUlkO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLl9jYWxlbmRhciwgdGhpcy5fY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJzdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlID9cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxlbmRhci5kYXRlRW52LnRvRGF0ZSh0aGlzLl9pbnN0YW5jZS5yYW5nZS5zdGFydCkgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZW5kXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2luc3RhbmNlICYmIHRoaXMuX2RlZi5oYXNFbmQpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxlbmRhci5kYXRlRW52LnRvRGF0ZSh0aGlzLl9pbnN0YW5jZS5yYW5nZS5lbmQpIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgLy8gY29tcHV0YWJsZSBwcm9wcyB0aGF0IGFsbCBhY2Nlc3MgdGhlIGRlZlxuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgVHlwZVNjcmlwdC1jb21wYXRpYmxlIHdheSB0byBkbyB0aGlzIGF0IHNjYWxlXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnB1YmxpY0lkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImdyb3VwSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5ncm91cElkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImFsbERheVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLmFsbERheTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnRpdGxlOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVybDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJyZW5kZXJpbmdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5yZW5kZXJpbmc7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRFZGl0YWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLnN0YXJ0RWRpdGFibGU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZHVyYXRpb25FZGl0YWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmR1cmF0aW9uRWRpdGFibGU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY29uc3RyYWludFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmNvbnN0cmFpbnRzWzBdIHx8IG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwib3ZlcmxhcFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLm92ZXJsYXA7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYWxsb3dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5hbGxvd3NbMF0gfHwgbnVsbDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5iYWNrZ3JvdW5kQ29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYm9yZGVyQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5ib3JkZXJDb2xvcjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0ZXh0Q29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS50ZXh0Q29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY2xhc3NOYW1lc1wiLCB7XG4gICAgICAgIC8vIE5PVEU6IHVzZXIgY2FuJ3QgbW9kaWZ5IHRoZXNlIGJlY2F1c2UgT2JqZWN0LmZyZWV6ZSB3YXMgY2FsbGVkIGluIGV2ZW50LWRlZiBwYXJzaW5nXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmNsYXNzTmFtZXM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZXh0ZW5kZWRQcm9wc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLmV4dGVuZGVkUHJvcHM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBFdmVudEFwaTtcbn0oKSk7XG5cbi8qXG5TcGVjaWZ5aW5nIG5leHREYXlUaHJlc2hvbGQgc2lnbmFscyB0aGF0IGFsbC1kYXkgcmFuZ2VzIHNob3VsZCBiZSBzbGljZWQuXG4qL1xuZnVuY3Rpb24gc2xpY2VFdmVudFN0b3JlKGV2ZW50U3RvcmUsIGV2ZW50VWlCYXNlcywgZnJhbWluZ1JhbmdlLCBuZXh0RGF5VGhyZXNob2xkKSB7XG4gICAgdmFyIGludmVyc2VCZ0J5R3JvdXBJZCA9IHt9O1xuICAgIHZhciBpbnZlcnNlQmdCeURlZklkID0ge307XG4gICAgdmFyIGRlZkJ5R3JvdXBJZCA9IHt9O1xuICAgIHZhciBiZ1JhbmdlcyA9IFtdO1xuICAgIHZhciBmZ1JhbmdlcyA9IFtdO1xuICAgIHZhciBldmVudFVpcyA9IGNvbXBpbGVFdmVudFVpcyhldmVudFN0b3JlLmRlZnMsIGV2ZW50VWlCYXNlcyk7XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmSWRdO1xuICAgICAgICBpZiAoZGVmLnJlbmRlcmluZyA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgIGlmIChkZWYuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5R3JvdXBJZFtkZWYuZ3JvdXBJZF0gPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZkJ5R3JvdXBJZFtkZWYuZ3JvdXBJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmQnlHcm91cElkW2RlZi5ncm91cElkXSA9IGRlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeURlZklkW2RlZklkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gZXZlbnRTdG9yZS5pbnN0YW5jZXMpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICB2YXIgdWkgPSBldmVudFVpc1tkZWYuZGVmSWRdO1xuICAgICAgICB2YXIgb3JpZ1JhbmdlID0gaW5zdGFuY2UucmFuZ2U7XG4gICAgICAgIHZhciBub3JtYWxSYW5nZSA9ICghZGVmLmFsbERheSAmJiBuZXh0RGF5VGhyZXNob2xkKSA/XG4gICAgICAgICAgICBjb21wdXRlVmlzaWJsZURheVJhbmdlKG9yaWdSYW5nZSwgbmV4dERheVRocmVzaG9sZCkgOlxuICAgICAgICAgICAgb3JpZ1JhbmdlO1xuICAgICAgICB2YXIgc2xpY2VkUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMobm9ybWFsUmFuZ2UsIGZyYW1pbmdSYW5nZSk7XG4gICAgICAgIGlmIChzbGljZWRSYW5nZSkge1xuICAgICAgICAgICAgaWYgKGRlZi5yZW5kZXJpbmcgPT09ICdpbnZlcnNlLWJhY2tncm91bmQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5ncm91cElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5R3JvdXBJZFtkZWYuZ3JvdXBJZF0ucHVzaChzbGljZWRSYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeURlZklkW2luc3RhbmNlLmRlZklkXS5wdXNoKHNsaWNlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZGVmLnJlbmRlcmluZyA9PT0gJ2JhY2tncm91bmQnID8gYmdSYW5nZXMgOiBmZ1JhbmdlcykucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgICAgICAgICB1aTogdWksXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHNsaWNlZFJhbmdlLFxuICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBub3JtYWxSYW5nZS5zdGFydCAmJiBub3JtYWxSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IHNsaWNlZFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IG5vcm1hbFJhbmdlLmVuZCAmJiBub3JtYWxSYW5nZS5lbmQudmFsdWVPZigpID09PSBzbGljZWRSYW5nZS5lbmQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgZ3JvdXBJZCBpbiBpbnZlcnNlQmdCeUdyb3VwSWQpIHsgLy8gQlkgR1JPVVBcbiAgICAgICAgdmFyIHJhbmdlcyA9IGludmVyc2VCZ0J5R3JvdXBJZFtncm91cElkXTtcbiAgICAgICAgdmFyIGludmVydGVkUmFuZ2VzID0gaW52ZXJ0UmFuZ2VzKHJhbmdlcywgZnJhbWluZ1JhbmdlKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBpbnZlcnRlZFJhbmdlc18xID0gaW52ZXJ0ZWRSYW5nZXM7IF9pIDwgaW52ZXJ0ZWRSYW5nZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpbnZlcnRlZFJhbmdlID0gaW52ZXJ0ZWRSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmQnlHcm91cElkW2dyb3VwSWRdO1xuICAgICAgICAgICAgdmFyIHVpID0gZXZlbnRVaXNbZGVmLmRlZklkXTtcbiAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgICAgIHVpOiB1aSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICByYW5nZTogaW52ZXJ0ZWRSYW5nZSxcbiAgICAgICAgICAgICAgICBpc1N0YXJ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGRlZklkIGluIGludmVyc2VCZ0J5RGVmSWQpIHtcbiAgICAgICAgdmFyIHJhbmdlcyA9IGludmVyc2VCZ0J5RGVmSWRbZGVmSWRdO1xuICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBpbnZlcnRSYW5nZXMocmFuZ2VzLCBmcmFtaW5nUmFuZ2UpO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGludmVydGVkUmFuZ2VzXzIgPSBpbnZlcnRlZFJhbmdlczsgX2EgPCBpbnZlcnRlZFJhbmdlc18yLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIGludmVydGVkUmFuZ2UgPSBpbnZlcnRlZFJhbmdlc18yW19hXTtcbiAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRlZjogZXZlbnRTdG9yZS5kZWZzW2RlZklkXSxcbiAgICAgICAgICAgICAgICB1aTogZXZlbnRVaXNbZGVmSWRdLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBpbnZlcnRlZFJhbmdlLFxuICAgICAgICAgICAgICAgIGlzU3RhcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYmc6IGJnUmFuZ2VzLCBmZzogZmdSYW5nZXMgfTtcbn1cbmZ1bmN0aW9uIGhhc0JnUmVuZGVyaW5nKGRlZikge1xuICAgIHJldHVybiBkZWYucmVuZGVyaW5nID09PSAnYmFja2dyb3VuZCcgfHwgZGVmLnJlbmRlcmluZyA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCc7XG59XG5mdW5jdGlvbiBmaWx0ZXJTZWdzVmlhRWxzKHZpZXcsIHNlZ3MsIGlzTWlycm9yKSB7XG4gICAgaWYgKHZpZXcuaGFzUHVibGljSGFuZGxlcnMoJ2V2ZW50UmVuZGVyJykpIHtcbiAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgIHZhciBjdXN0b20gPSB2aWV3LnB1YmxpY2x5VHJpZ2dlcignZXZlbnRSZW5kZXInLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKHZpZXcuY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlZy5pc1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VnLmlzRW5kLFxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBpbmNsdWRlIHNlZy5yYW5nZSBvbmNlIGFsbCBjb21wb25lbnRzIGNvbnNpc3RlbnRseSBnZW5lcmF0ZSBpdFxuICAgICAgICAgICAgICAgICAgICBlbDogc2VnLmVsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAoY3VzdG9tID09PSBmYWxzZSkgeyAvLyBtZWFucyBkb24ndCByZW5kZXIgYXQgYWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VzdG9tICYmIGN1c3RvbSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHNlZy5lbCA9IGN1c3RvbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMVtfaV07XG4gICAgICAgIHNldEVsU2VnKHNlZy5lbCwgc2VnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlZ3M7XG59XG5mdW5jdGlvbiBzZXRFbFNlZyhlbCwgc2VnKSB7XG4gICAgZWwuZmNTZWcgPSBzZWc7XG59XG5mdW5jdGlvbiBnZXRFbFNlZyhlbCkge1xuICAgIHJldHVybiBlbC5mY1NlZyB8fCBudWxsO1xufVxuLy8gZXZlbnQgdWkgY29tcHV0YXRpb25cbmZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpcyhldmVudERlZnMsIGV2ZW50VWlCYXNlcykge1xuICAgIHJldHVybiBtYXBIYXNoKGV2ZW50RGVmcywgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlRXZlbnRVaShldmVudERlZiwgZXZlbnRVaUJhc2VzKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpKGV2ZW50RGVmLCBldmVudFVpQmFzZXMpIHtcbiAgICB2YXIgdWlzID0gW107XG4gICAgaWYgKGV2ZW50VWlCYXNlc1snJ10pIHtcbiAgICAgICAgdWlzLnB1c2goZXZlbnRVaUJhc2VzWycnXSk7XG4gICAgfVxuICAgIGlmIChldmVudFVpQmFzZXNbZXZlbnREZWYuZGVmSWRdKSB7XG4gICAgICAgIHVpcy5wdXNoKGV2ZW50VWlCYXNlc1tldmVudERlZi5kZWZJZF0pO1xuICAgIH1cbiAgICB1aXMucHVzaChldmVudERlZi51aSk7XG4gICAgcmV0dXJuIGNvbWJpbmVFdmVudFVpcyh1aXMpO1xufVxuXG4vLyBhcHBsaWVzIHRoZSBtdXRhdGlvbiB0byBBTEwgZGVmcy9pbnN0YW5jZXMgd2l0aGluIHRoZSBldmVudCBzdG9yZVxuZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShldmVudFN0b3JlLCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjYWxlbmRhcikge1xuICAgIHZhciBldmVudENvbmZpZ3MgPSBjb21waWxlRXZlbnRVaXMoZXZlbnRTdG9yZS5kZWZzLCBldmVudENvbmZpZ0Jhc2UpO1xuICAgIHZhciBkZXN0ID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmSWRdO1xuICAgICAgICBkZXN0LmRlZnNbZGVmSWRdID0gYXBwbHlNdXRhdGlvblRvRXZlbnREZWYoZGVmLCBldmVudENvbmZpZ3NbZGVmSWRdLCBtdXRhdGlvbiwgY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycywgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGV2ZW50U3RvcmUuaW5zdGFuY2VzKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICB2YXIgZGVmID0gZGVzdC5kZWZzW2luc3RhbmNlLmRlZklkXTsgLy8gaW1wb3J0YW50IHRvIGdyYWIgdGhlIG5ld2x5IG1vZGlmaWVkIGRlZlxuICAgICAgICBkZXN0Lmluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50SW5zdGFuY2UoaW5zdGFuY2UsIGRlZiwgZXZlbnRDb25maWdzW2luc3RhbmNlLmRlZklkXSwgbXV0YXRpb24sIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59XG5mdW5jdGlvbiBhcHBseU11dGF0aW9uVG9FdmVudERlZihldmVudERlZiwgZXZlbnRDb25maWcsIG11dGF0aW9uLCBhcHBsaWVycywgY2FsZW5kYXIpIHtcbiAgICB2YXIgc3RhbmRhcmRQcm9wcyA9IG11dGF0aW9uLnN0YW5kYXJkUHJvcHMgfHwge307XG4gICAgLy8gaWYgaGFzRW5kIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQsIGd1ZXNzIGEgZ29vZCB2YWx1ZSBiYXNlZCBvbiBkZWx0YXMuXG4gICAgLy8gaWYgZHVyYXRpb24gd2lsbCBjaGFuZ2UsIHRoZXJlJ3Mgbm8gd2F5IHRoZSBkZWZhdWx0IGR1cmF0aW9uIHdpbGwgcGVyc2lzdCxcbiAgICAvLyBhbmQgdGh1cywgd2UgbmVlZCB0byBtYXJrIHRoZSBldmVudCBhcyBoYXZpbmcgYSByZWFsIGVuZFxuICAgIGlmIChzdGFuZGFyZFByb3BzLmhhc0VuZCA9PSBudWxsICYmXG4gICAgICAgIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUgJiZcbiAgICAgICAgKG11dGF0aW9uLnN0YXJ0RGVsdGEgfHwgbXV0YXRpb24uZW5kRGVsdGEpKSB7XG4gICAgICAgIHN0YW5kYXJkUHJvcHMuaGFzRW5kID0gdHJ1ZTsgLy8gVE9ETzogaXMgdGhpcyBtdXRhdGlvbiBva2F5P1xuICAgIH1cbiAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudERlZiwgc3RhbmRhcmRQcm9wcywgeyB1aTogX19hc3NpZ24oe30sIGV2ZW50RGVmLnVpLCBzdGFuZGFyZFByb3BzLnVpKSB9KTtcbiAgICBpZiAobXV0YXRpb24uZXh0ZW5kZWRQcm9wcykge1xuICAgICAgICBjb3B5LmV4dGVuZGVkUHJvcHMgPSBfX2Fzc2lnbih7fSwgY29weS5leHRlbmRlZFByb3BzLCBtdXRhdGlvbi5leHRlbmRlZFByb3BzKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcHBsaWVyc18xID0gYXBwbGllcnM7IF9pIDwgYXBwbGllcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGFwcGxpZXIgPSBhcHBsaWVyc18xW19pXTtcbiAgICAgICAgYXBwbGllcihjb3B5LCBtdXRhdGlvbiwgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBpZiAoIWNvcHkuaGFzRW5kICYmIGNhbGVuZGFyLm9wdCgnZm9yY2VFdmVudER1cmF0aW9uJykpIHtcbiAgICAgICAgY29weS5oYXNFbmQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn1cbmZ1bmN0aW9uIGFwcGx5TXV0YXRpb25Ub0V2ZW50SW5zdGFuY2UoZXZlbnRJbnN0YW5jZSwgZXZlbnREZWYsIC8vIG11c3QgZmlyc3QgYmUgbW9kaWZpZWQgYnkgYXBwbHlNdXRhdGlvblRvRXZlbnREZWZcbmV2ZW50Q29uZmlnLCBtdXRhdGlvbiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgdmFyIGZvcmNlQWxsRGF5ID0gbXV0YXRpb24uc3RhbmRhcmRQcm9wcyAmJiBtdXRhdGlvbi5zdGFuZGFyZFByb3BzLmFsbERheSA9PT0gdHJ1ZTtcbiAgICB2YXIgY2xlYXJFbmQgPSBtdXRhdGlvbi5zdGFuZGFyZFByb3BzICYmIG11dGF0aW9uLnN0YW5kYXJkUHJvcHMuaGFzRW5kID09PSBmYWxzZTtcbiAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudEluc3RhbmNlKTtcbiAgICBpZiAoZm9yY2VBbGxEYXkpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UoY29weS5yYW5nZSk7XG4gICAgfVxuICAgIGlmIChtdXRhdGlvbi5kYXRlc0RlbHRhICYmIGV2ZW50Q29uZmlnLnN0YXJ0RWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5kYXRlc0RlbHRhKSxcbiAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoY29weS5yYW5nZS5lbmQsIG11dGF0aW9uLmRhdGVzRGVsdGEpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChtdXRhdGlvbi5zdGFydERlbHRhICYmIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5zdGFydERlbHRhKSxcbiAgICAgICAgICAgIGVuZDogY29weS5yYW5nZS5lbmRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG11dGF0aW9uLmVuZERlbHRhICYmIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBjb3B5LnJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLmVuZCwgbXV0YXRpb24uZW5kRGVsdGEpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjbGVhckVuZCkge1xuICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IGNvcHkucmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGNhbGVuZGFyLmdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGluIGNhc2UgZXZlbnQgd2FzIGFsbC1kYXkgYnV0IHRoZSBzdXBwbGllZCBkZWx0YXMgd2VyZSBub3RcbiAgICAvLyBiZXR0ZXIgdXRpbCBmb3IgdGhpcz9cbiAgICBpZiAoZXZlbnREZWYuYWxsRGF5KSB7XG4gICAgICAgIGNvcHkucmFuZ2UgPSB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnRPZkRheShjb3B5LnJhbmdlLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogc3RhcnRPZkRheShjb3B5LnJhbmdlLmVuZClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIGludmFsaWQgZHVyYXRpb25zXG4gICAgaWYgKGNvcHkucmFuZ2UuZW5kIDwgY29weS5yYW5nZS5zdGFydCkge1xuICAgICAgICBjb3B5LnJhbmdlLmVuZCA9IGNhbGVuZGFyLmdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlRXZlbnRTdG9yZSAoZXZlbnRTdG9yZSwgYWN0aW9uLCBldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOiAvLyByYXdcbiAgICAgICAgICAgIHJldHVybiByZWNlaXZlUmF3RXZlbnRzKGV2ZW50U3RvcmUsIGV2ZW50U291cmNlc1thY3Rpb24uc291cmNlSWRdLCBhY3Rpb24uZmV0Y2hJZCwgYWN0aW9uLmZldGNoUmFuZ2UsIGFjdGlvbi5yYXdFdmVudHMsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnQUREX0VWRU5UUyc6IC8vIGFscmVhZHkgcGFyc2VkLCBidXQgbm90IGV4cGFuZGVkXG4gICAgICAgICAgICByZXR1cm4gYWRkRXZlbnQoZXZlbnRTdG9yZSwgYWN0aW9uLmV2ZW50U3RvcmUsIC8vIG5ldyBvbmVzXG4gICAgICAgICAgICBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbCwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdNRVJHRV9FVkVOVFMnOiAvLyBhbHJlYWR5IHBhcnNlZCBhbmQgZXhwYW5kZWRcbiAgICAgICAgICAgIHJldHVybiBtZXJnZUV2ZW50U3RvcmVzKGV2ZW50U3RvcmUsIGFjdGlvbi5ldmVudFN0b3JlKTtcbiAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBhbmRSZWN1cnJpbmcoZXZlbnRTdG9yZSwgZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudFN0b3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdDSEFOR0VfVElNRVpPTkUnOlxuICAgICAgICAgICAgcmV0dXJuIHJlem9uZURhdGVzKGV2ZW50U3RvcmUsIGFjdGlvbi5vbGREYXRlRW52LCBjYWxlbmRhci5kYXRlRW52KTtcbiAgICAgICAgY2FzZSAnTVVUQVRFX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4gYXBwbHlNdXRhdGlvblRvUmVsYXRlZChldmVudFN0b3JlLCBhY3Rpb24uaW5zdGFuY2VJZCwgYWN0aW9uLm11dGF0aW9uLCBhY3Rpb24uZnJvbUFwaSwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfSU5TVEFOQ0VTJzpcbiAgICAgICAgICAgIHJldHVybiBleGNsdWRlSW5zdGFuY2VzKGV2ZW50U3RvcmUsIGFjdGlvbi5pbnN0YW5jZXMpO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfREVGJzpcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJFdmVudFN0b3JlRGVmcyhldmVudFN0b3JlLCBmdW5jdGlvbiAoZXZlbnREZWYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuZGVmSWQgIT09IGFjdGlvbi5kZWZJZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfU09VUkNFJzpcbiAgICAgICAgICAgIHJldHVybiBleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBhY3Rpb24uc291cmNlSWQpO1xuICAgICAgICBjYXNlICdSRU1PVkVfQUxMX0VWRU5UX1NPVVJDRVMnOlxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICAgICAgICAgIHJldHVybiAhZXZlbnREZWYuc291cmNlSWQ7IC8vIG9ubHkga2VlcCBldmVudHMgd2l0aCBubyBzb3VyY2UgaWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdSRU1PVkVfQUxMX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgIGNhc2UgJ1JFU0VUX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRlZnM6IGV2ZW50U3RvcmUuZGVmcyxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXM6IGV2ZW50U3RvcmUuaW5zdGFuY2VzXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjZWl2ZVJhd0V2ZW50cyhldmVudFN0b3JlLCBldmVudFNvdXJjZSwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSwgcmF3RXZlbnRzLCBjYWxlbmRhcikge1xuICAgIGlmIChldmVudFNvdXJjZSAmJiAvLyBub3QgYWxyZWFkeSByZW1vdmVkXG4gICAgICAgIGZldGNoSWQgPT09IGV2ZW50U291cmNlLmxhdGVzdEZldGNoSWQgLy8gVE9ETzogd2lzaCB0aGlzIGxvZ2ljIHdhcyBhbHdheXMgaW4gZXZlbnQtc291cmNlc1xuICAgICkge1xuICAgICAgICB2YXIgc3Vic2V0ID0gcGFyc2VFdmVudHModHJhbnNmb3JtUmF3RXZlbnRzKHJhd0V2ZW50cywgZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSwgZXZlbnRTb3VyY2Uuc291cmNlSWQsIGNhbGVuZGFyKTtcbiAgICAgICAgaWYgKGZldGNoUmFuZ2UpIHtcbiAgICAgICAgICAgIHN1YnNldCA9IGV4cGFuZFJlY3VycmluZyhzdWJzZXQsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVyZ2VFdmVudFN0b3JlcyhleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBldmVudFNvdXJjZS5zb3VyY2VJZCksIHN1YnNldCk7XG4gICAgfVxuICAgIHJldHVybiBldmVudFN0b3JlO1xufVxuZnVuY3Rpb24gYWRkRXZlbnQoZXZlbnRTdG9yZSwgc3Vic2V0LCBleHBhbmRSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICBpZiAoZXhwYW5kUmFuZ2UpIHtcbiAgICAgICAgc3Vic2V0ID0gZXhwYW5kUmVjdXJyaW5nKHN1YnNldCwgZXhwYW5kUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgc3Vic2V0KTtcbn1cbmZ1bmN0aW9uIHJlem9uZURhdGVzKGV2ZW50U3RvcmUsIG9sZERhdGVFbnYsIG5ld0RhdGVFbnYpIHtcbiAgICB2YXIgZGVmcyA9IGV2ZW50U3RvcmUuZGVmcztcbiAgICB2YXIgaW5zdGFuY2VzID0gbWFwSGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgaWYgKGRlZi5hbGxEYXkgfHwgZGVmLnJlY3VycmluZ0RlZikge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlOyAvLyBpc24ndCBkZXBlbmRlbnQgb24gdGltZXpvbmVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgaW5zdGFuY2UsIHsgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5ld0RhdGVFbnYuY3JlYXRlTWFya2VyKG9sZERhdGVFbnYudG9EYXRlKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCBpbnN0YW5jZS5mb3JjZWRTdGFydFR6bykpLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5ld0RhdGVFbnYuY3JlYXRlTWFya2VyKG9sZERhdGVFbnYudG9EYXRlKGluc3RhbmNlLnJhbmdlLmVuZCwgaW5zdGFuY2UuZm9yY2VkRW5kVHpvKSlcbiAgICAgICAgICAgICAgICB9LCBmb3JjZWRTdGFydFR6bzogbmV3RGF0ZUVudi5jYW5Db21wdXRlT2Zmc2V0ID8gbnVsbCA6IGluc3RhbmNlLmZvcmNlZFN0YXJ0VHpvLCBmb3JjZWRFbmRUem86IG5ld0RhdGVFbnYuY2FuQ29tcHV0ZU9mZnNldCA/IG51bGwgOiBpbnN0YW5jZS5mb3JjZWRFbmRUem8gfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xufVxuZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvUmVsYXRlZChldmVudFN0b3JlLCBpbnN0YW5jZUlkLCBtdXRhdGlvbiwgZnJvbUFwaSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVsZXZhbnQgPSBnZXRSZWxldmFudEV2ZW50cyhldmVudFN0b3JlLCBpbnN0YW5jZUlkKTtcbiAgICB2YXIgZXZlbnRDb25maWdCYXNlID0gZnJvbUFwaSA/XG4gICAgICAgIHsgJyc6IHtcbiAgICAgICAgICAgICAgICBzdGFydEVkaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uc3RyYWludHM6IFtdLFxuICAgICAgICAgICAgICAgIG92ZXJsYXA6IG51bGwsXG4gICAgICAgICAgICAgICAgYWxsb3dzOiBbXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6ICcnLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXM6IFtdXG4gICAgICAgICAgICB9IH0gOlxuICAgICAgICBjYWxlbmRhci5ldmVudFVpQmFzZXM7XG4gICAgcmVsZXZhbnQgPSBhcHBseU11dGF0aW9uVG9FdmVudFN0b3JlKHJlbGV2YW50LCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjYWxlbmRhcik7XG4gICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgcmVsZXZhbnQpO1xufVxuZnVuY3Rpb24gZXhjbHVkZUV2ZW50c0J5U291cmNlSWQoZXZlbnRTdG9yZSwgc291cmNlSWQpIHtcbiAgICByZXR1cm4gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHJldHVybiBldmVudERlZi5zb3VyY2VJZCAhPT0gc291cmNlSWQ7XG4gICAgfSk7XG59XG4vLyBRVUVTVElPTjogd2h5IG5vdCBqdXN0IHJldHVybiBpbnN0YW5jZXM/IGRvIGEgZ2VuZXJhbCBvYmplY3QtcHJvcGVydHktZXhjbHVzaW9uIHV0aWxcbmZ1bmN0aW9uIGV4Y2x1ZGVJbnN0YW5jZXMoZXZlbnRTdG9yZSwgcmVtb3ZhbHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWZzOiBldmVudFN0b3JlLmRlZnMsXG4gICAgICAgIGluc3RhbmNlczogZmlsdGVySGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gIXJlbW92YWxzW2luc3RhbmNlLmluc3RhbmNlSWRdO1xuICAgICAgICB9KVxuICAgIH07XG59XG5cbi8vIGhpZ2gtbGV2ZWwgc2VnbWVudGluZy1hd2FyZSB0ZXN0ZXIgZnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gaXNOZXdQcm9wc1ZhbGlkKHsgZXZlbnREcmFnOiBpbnRlcmFjdGlvbiB9LCBjYWxlbmRhcik7IC8vIEhBQ0s6IHRoZSBldmVudERyYWcgcHJvcHMgaXMgdXNlZCBmb3IgQUxMIGludGVyYWN0aW9uc1xufVxuZnVuY3Rpb24gaXNEYXRlU2VsZWN0aW9uVmFsaWQoZGF0ZVNlbGVjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gaXNOZXdQcm9wc1ZhbGlkKHsgZGF0ZVNlbGVjdGlvbjogZGF0ZVNlbGVjdGlvbiB9LCBjYWxlbmRhcik7XG59XG5mdW5jdGlvbiBpc05ld1Byb3BzVmFsaWQobmV3UHJvcHMsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHZpZXcgPSBjYWxlbmRhci52aWV3O1xuICAgIHZhciBwcm9wcyA9IF9fYXNzaWduKHsgYnVzaW5lc3NIb3VyczogdmlldyA/IHZpZXcucHJvcHMuYnVzaW5lc3NIb3VycyA6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLCBkYXRlU2VsZWN0aW9uOiAnJywgZXZlbnRTdG9yZTogY2FsZW5kYXIuc3RhdGUuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzOiBjYWxlbmRhci5ldmVudFVpQmFzZXMsIGV2ZW50U2VsZWN0aW9uOiAnJywgZXZlbnREcmFnOiBudWxsLCBldmVudFJlc2l6ZTogbnVsbCB9LCBuZXdQcm9wcyk7XG4gICAgcmV0dXJuIChjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuaXNQcm9wc1ZhbGlkIHx8IGlzUHJvcHNWYWxpZCkocHJvcHMsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIGlzUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSB7XG4gICAgaWYgKGRhdGVTcGFuTWV0YSA9PT0gdm9pZCAwKSB7IGRhdGVTcGFuTWV0YSA9IHt9OyB9XG4gICAgaWYgKHN0YXRlLmV2ZW50RHJhZyAmJiAhaXNJbnRlcmFjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZGF0ZVNlbGVjdGlvbiAmJiAhaXNEYXRlU2VsZWN0aW9uUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8gTW92aW5nIEV2ZW50IFZhbGlkYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gaXNJbnRlcmFjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykge1xuICAgIHZhciBpbnRlcmFjdGlvbiA9IHN0YXRlLmV2ZW50RHJhZzsgLy8gSEFDSzogdGhlIGV2ZW50RHJhZyBwcm9wcyBpcyB1c2VkIGZvciBBTEwgaW50ZXJhY3Rpb25zXG4gICAgdmFyIHN1YmplY3RFdmVudFN0b3JlID0gaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cztcbiAgICB2YXIgc3ViamVjdERlZnMgPSBzdWJqZWN0RXZlbnRTdG9yZS5kZWZzO1xuICAgIHZhciBzdWJqZWN0SW5zdGFuY2VzID0gc3ViamVjdEV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciBzdWJqZWN0Q29uZmlncyA9IGNvbXBpbGVFdmVudFVpcyhzdWJqZWN0RGVmcywgaW50ZXJhY3Rpb24uaXNFdmVudCA/XG4gICAgICAgIHN0YXRlLmV2ZW50VWlCYXNlcyA6XG4gICAgICAgIHsgJyc6IGNhbGVuZGFyLnNlbGVjdGlvbkNvbmZpZyB9IC8vIGlmIG5vdCBhIHJlYWwgZXZlbnQsIHZhbGlkYXRlIGFzIGEgc2VsZWN0aW9uXG4gICAgKTtcbiAgICBpZiAoZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgIHN1YmplY3RDb25maWdzID0gbWFwSGFzaChzdWJqZWN0Q29uZmlncywgZmlsdGVyQ29uZmlnKTtcbiAgICB9XG4gICAgdmFyIG90aGVyRXZlbnRTdG9yZSA9IGV4Y2x1ZGVJbnN0YW5jZXMoc3RhdGUuZXZlbnRTdG9yZSwgaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMuaW5zdGFuY2VzKTsgLy8gZXhjbHVkZSB0aGUgc3ViamVjdCBldmVudHMuIFRPRE86IGV4Y2x1ZGUgZGVmcyB0b28/XG4gICAgdmFyIG90aGVyRGVmcyA9IG90aGVyRXZlbnRTdG9yZS5kZWZzO1xuICAgIHZhciBvdGhlckluc3RhbmNlcyA9IG90aGVyRXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgdmFyIG90aGVyQ29uZmlncyA9IGNvbXBpbGVFdmVudFVpcyhvdGhlckRlZnMsIHN0YXRlLmV2ZW50VWlCYXNlcyk7XG4gICAgZm9yICh2YXIgc3ViamVjdEluc3RhbmNlSWQgaW4gc3ViamVjdEluc3RhbmNlcykge1xuICAgICAgICB2YXIgc3ViamVjdEluc3RhbmNlID0gc3ViamVjdEluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgIHZhciBzdWJqZWN0UmFuZ2UgPSBzdWJqZWN0SW5zdGFuY2UucmFuZ2U7XG4gICAgICAgIHZhciBzdWJqZWN0Q29uZmlnID0gc3ViamVjdENvbmZpZ3Nbc3ViamVjdEluc3RhbmNlLmRlZklkXTtcbiAgICAgICAgdmFyIHN1YmplY3REZWYgPSBzdWJqZWN0RGVmc1tzdWJqZWN0SW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAvLyBjb25zdHJhaW50XG4gICAgICAgIGlmICghYWxsQ29uc3RyYWludHNQYXNzKHN1YmplY3RDb25maWcuY29uc3RyYWludHMsIHN1YmplY3RSYW5nZSwgb3RoZXJFdmVudFN0b3JlLCBzdGF0ZS5idXNpbmVzc0hvdXJzLCBjYWxlbmRhcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdmVybGFwXG4gICAgICAgIHZhciBvdmVybGFwRnVuYyA9IGNhbGVuZGFyLm9wdCgnZXZlbnRPdmVybGFwJyk7XG4gICAgICAgIGlmICh0eXBlb2Ygb3ZlcmxhcEZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG92ZXJsYXBGdW5jID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBvdGhlckluc3RhbmNlSWQgaW4gb3RoZXJJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gb3RoZXJJbnN0YW5jZXNbb3RoZXJJbnN0YW5jZUlkXTtcbiAgICAgICAgICAgIC8vIGludGVyc2VjdCEgZXZhbHVhdGVcbiAgICAgICAgICAgIGlmIChyYW5nZXNJbnRlcnNlY3Qoc3ViamVjdFJhbmdlLCBvdGhlckluc3RhbmNlLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlck92ZXJsYXAgPSBvdGhlckNvbmZpZ3Nbb3RoZXJJbnN0YW5jZS5kZWZJZF0ub3ZlcmxhcDtcbiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgb3RoZXIgZXZlbnQncyBvdmVybGFwLiBvbmx5IGRvIHRoaXMgaWYgdGhlIHN1YmplY3QgZXZlbnQgaXMgYSBcInJlYWxcIiBldmVudFxuICAgICAgICAgICAgICAgIGlmIChvdGhlck92ZXJsYXAgPT09IGZhbHNlICYmIGludGVyYWN0aW9uLmlzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3ViamVjdENvbmZpZy5vdmVybGFwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdmVybGFwRnVuYyAmJiAhb3ZlcmxhcEZ1bmMobmV3IEV2ZW50QXBpKGNhbGVuZGFyLCBvdGhlckRlZnNbb3RoZXJJbnN0YW5jZS5kZWZJZF0sIG90aGVySW5zdGFuY2UpLCAvLyBzdGlsbCBldmVudFxuICAgICAgICAgICAgICAgIG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZiwgc3ViamVjdEluc3RhbmNlKSAvLyBtb3ZpbmcgZXZlbnRcbiAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWxsb3cgKGEgZnVuY3Rpb24pXG4gICAgICAgIHZhciBjYWxlbmRhckV2ZW50U3RvcmUgPSBjYWxlbmRhci5zdGF0ZS5ldmVudFN0b3JlOyAvLyBuZWVkIGdsb2JhbC10by1jYWxlbmRhciwgbm90IGxvY2FsIHRvIGNvbXBvbmVudCAoc3BsaXR0YWJsZSlzdGF0ZVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc3ViamVjdENvbmZpZy5hbGxvd3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3ViamVjdEFsbG93ID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHN1YmplY3REYXRlU3BhbiA9IF9fYXNzaWduKHt9LCBkYXRlU3Bhbk1ldGEsIHsgcmFuZ2U6IHN1YmplY3RJbnN0YW5jZS5yYW5nZSwgYWxsRGF5OiBzdWJqZWN0RGVmLmFsbERheSB9KTtcbiAgICAgICAgICAgIHZhciBvcmlnRGVmID0gY2FsZW5kYXJFdmVudFN0b3JlLmRlZnNbc3ViamVjdERlZi5kZWZJZF07XG4gICAgICAgICAgICB2YXIgb3JpZ0luc3RhbmNlID0gY2FsZW5kYXJFdmVudFN0b3JlLmluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgICAgICB2YXIgZXZlbnRBcGkgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAob3JpZ0RlZikgeyAvLyB3YXMgcHJldmlvdXNseSBpbiB0aGUgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgb3JpZ0RlZiwgb3JpZ0luc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvLyB3YXMgYW4gZXh0ZXJuYWwgZXZlbnRcbiAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZik7IC8vIG5vIGluc3RhbmNlLCBiZWNhdXNlIGhhZCBubyBkYXRlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdWJqZWN0QWxsb3coY2FsZW5kYXIuYnVpbGREYXRlU3BhbkFwaShzdWJqZWN0RGF0ZVNwYW4pLCBldmVudEFwaSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBEYXRlIFNlbGVjdGlvbiBWYWxpZGF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykge1xuICAgIHZhciByZWxldmFudEV2ZW50U3RvcmUgPSBzdGF0ZS5ldmVudFN0b3JlO1xuICAgIHZhciByZWxldmFudERlZnMgPSByZWxldmFudEV2ZW50U3RvcmUuZGVmcztcbiAgICB2YXIgcmVsZXZhbnRJbnN0YW5jZXMgPSByZWxldmFudEV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdGF0ZS5kYXRlU2VsZWN0aW9uO1xuICAgIHZhciBzZWxlY3Rpb25SYW5nZSA9IHNlbGVjdGlvbi5yYW5nZTtcbiAgICB2YXIgc2VsZWN0aW9uQ29uZmlnID0gY2FsZW5kYXIuc2VsZWN0aW9uQ29uZmlnO1xuICAgIGlmIChmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgc2VsZWN0aW9uQ29uZmlnID0gZmlsdGVyQ29uZmlnKHNlbGVjdGlvbkNvbmZpZyk7XG4gICAgfVxuICAgIC8vIGNvbnN0cmFpbnRcbiAgICBpZiAoIWFsbENvbnN0cmFpbnRzUGFzcyhzZWxlY3Rpb25Db25maWcuY29uc3RyYWludHMsIHNlbGVjdGlvblJhbmdlLCByZWxldmFudEV2ZW50U3RvcmUsIHN0YXRlLmJ1c2luZXNzSG91cnMsIGNhbGVuZGFyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIG92ZXJsYXBcbiAgICB2YXIgb3ZlcmxhcEZ1bmMgPSBjYWxlbmRhci5vcHQoJ3NlbGVjdE92ZXJsYXAnKTtcbiAgICBpZiAodHlwZW9mIG92ZXJsYXBGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG92ZXJsYXBGdW5jID0gbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgcmVsZXZhbnRJbnN0YW5jZUlkIGluIHJlbGV2YW50SW5zdGFuY2VzKSB7XG4gICAgICAgIHZhciByZWxldmFudEluc3RhbmNlID0gcmVsZXZhbnRJbnN0YW5jZXNbcmVsZXZhbnRJbnN0YW5jZUlkXTtcbiAgICAgICAgLy8gaW50ZXJzZWN0ISBldmFsdWF0ZVxuICAgICAgICBpZiAocmFuZ2VzSW50ZXJzZWN0KHNlbGVjdGlvblJhbmdlLCByZWxldmFudEluc3RhbmNlLnJhbmdlKSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkNvbmZpZy5vdmVybGFwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvdmVybGFwRnVuYyAmJiAhb3ZlcmxhcEZ1bmMobmV3IEV2ZW50QXBpKGNhbGVuZGFyLCByZWxldmFudERlZnNbcmVsZXZhbnRJbnN0YW5jZS5kZWZJZF0sIHJlbGV2YW50SW5zdGFuY2UpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhbGxvdyAoYSBmdW5jdGlvbilcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc2VsZWN0aW9uQ29uZmlnLmFsbG93czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbkFsbG93ID0gX2FbX2ldO1xuICAgICAgICB2YXIgZnVsbERhdGVTcGFuID0gX19hc3NpZ24oe30sIGRhdGVTcGFuTWV0YSwgc2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFzZWxlY3Rpb25BbGxvdyhjYWxlbmRhci5idWlsZERhdGVTcGFuQXBpKGZ1bGxEYXRlU3BhbiksIG51bGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBDb25zdHJhaW50IFV0aWxzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGFsbENvbnN0cmFpbnRzUGFzcyhjb25zdHJhaW50cywgc3ViamVjdFJhbmdlLCBvdGhlckV2ZW50U3RvcmUsIGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBjYWxlbmRhcikge1xuICAgIGZvciAodmFyIF9pID0gMCwgY29uc3RyYWludHNfMSA9IGNvbnN0cmFpbnRzOyBfaSA8IGNvbnN0cmFpbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gY29uc3RyYWludHNfMVtfaV07XG4gICAgICAgIGlmICghYW55UmFuZ2VzQ29udGFpblJhbmdlKGNvbnN0cmFpbnRUb1Jhbmdlcyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIG90aGVyRXZlbnRTdG9yZSwgYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIGNhbGVuZGFyKSwgc3ViamVjdFJhbmdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY29uc3RyYWludFRvUmFuZ2VzKGNvbnN0cmFpbnQsIHN1YmplY3RSYW5nZSwgLy8gZm9yIGV4cGFuZGluZyBhIHJlY3VycmluZyBjb25zdHJhaW50LCBvciBleHBhbmRpbmcgYnVzaW5lc3MgaG91cnNcbm90aGVyRXZlbnRTdG9yZSwgLy8gZm9yIGlmIGNvbnN0cmFpbnQgaXMgYW4gZXZlbiBncm91cCBJRFxuYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIC8vIGZvciBpZiBjb25zdHJhaW50IGlzICdidXNpbmVzc0hvdXJzJ1xuY2FsZW5kYXIgLy8gZm9yIGV4cGFuZGluZyBidXNpbmVzc2hvdXJzXG4pIHtcbiAgICBpZiAoY29uc3RyYWludCA9PT0gJ2J1c2luZXNzSG91cnMnKSB7XG4gICAgICAgIHJldHVybiBldmVudFN0b3JlVG9SYW5nZXMoZXhwYW5kUmVjdXJyaW5nKGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBzdWJqZWN0UmFuZ2UsIGNhbGVuZGFyKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjb25zdHJhaW50ID09PSAnc3RyaW5nJykgeyAvLyBhbiBncm91cCBJRFxuICAgICAgICByZXR1cm4gZXZlbnRTdG9yZVRvUmFuZ2VzKGZpbHRlckV2ZW50U3RvcmVEZWZzKG90aGVyRXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuZ3JvdXBJZCA9PT0gY29uc3RyYWludDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY29uc3RyYWludCA9PT0gJ29iamVjdCcgJiYgY29uc3RyYWludCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmVUb1JhbmdlcyhleHBhbmRSZWN1cnJpbmcoY29uc3RyYWludCwgc3ViamVjdFJhbmdlLCBjYWxlbmRhcikpO1xuICAgIH1cbiAgICByZXR1cm4gW107IC8vIGlmIGl0J3MgZmFsc2Vcbn1cbi8vIFRPRE86IG1vdmUgdG8gZXZlbnQtc3RvcmUgZmlsZT9cbmZ1bmN0aW9uIGV2ZW50U3RvcmVUb1JhbmdlcyhldmVudFN0b3JlKSB7XG4gICAgdmFyIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICByYW5nZXMucHVzaChpbnN0YW5jZXNbaW5zdGFuY2VJZF0ucmFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VzO1xufVxuLy8gVE9ETzogbW92ZSB0byBnZW9tIGZpbGU/XG5mdW5jdGlvbiBhbnlSYW5nZXNDb250YWluUmFuZ2Uob3V0ZXJSYW5nZXMsIGlubmVyUmFuZ2UpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIG91dGVyUmFuZ2VzXzEgPSBvdXRlclJhbmdlczsgX2kgPCBvdXRlclJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgb3V0ZXJSYW5nZSA9IG91dGVyUmFuZ2VzXzFbX2ldO1xuICAgICAgICBpZiAocmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBQYXJzaW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnN0cmFpbnQoaW5wdXQsIGNhbGVuZGFyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUV2ZW50cyhpbnB1dCwgJycsIGNhbGVuZGFyLCB0cnVlKTsgLy8gYWxsb3dPcGVuUmFuZ2U9dHJ1ZVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICByZXR1cm4gcGFyc2VFdmVudHMoW2lucHV0XSwgJycsIGNhbGVuZGFyLCB0cnVlKTsgLy8gYWxsb3dPcGVuUmFuZ2U9dHJ1ZVxuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBodG1sRXNjYXBlKHMpIHtcbiAgICByZXR1cm4gKHMgKyAnJykucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMDM5OycpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnPGJyIC8+Jyk7XG59XG4vLyBHaXZlbiBhIGhhc2ggb2YgQ1NTIHByb3BlcnRpZXMsIHJldHVybnMgYSBzdHJpbmcgb2YgQ1NTLlxuLy8gVXNlcyBwcm9wZXJ0eSBuYW1lcyBhcy1pcyAobm8gY2FtZWwtY2FzZSBjb252ZXJzaW9uKS4gV2lsbCBub3QgbWFrZSBzdGF0ZW1lbnRzIGZvciBudWxsL3VuZGVmaW5lZCB2YWx1ZXMuXG5mdW5jdGlvbiBjc3NUb1N0cihjc3NQcm9wcykge1xuICAgIHZhciBzdGF0ZW1lbnRzID0gW107XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIGNzc1Byb3BzKSB7XG4gICAgICAgIHZhciB2YWwgPSBjc3NQcm9wc1tuYW1lXzFdO1xuICAgICAgICBpZiAodmFsICE9IG51bGwgJiYgdmFsICE9PSAnJykge1xuICAgICAgICAgICAgc3RhdGVtZW50cy5wdXNoKG5hbWVfMSArICc6JyArIHZhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlbWVudHMuam9pbignOycpO1xufVxuLy8gR2l2ZW4gYW4gb2JqZWN0IGhhc2ggb2YgSFRNTCBhdHRyaWJ1dGUgbmFtZXMgdG8gdmFsdWVzLFxuLy8gZ2VuZXJhdGVzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGluamVjdGVkIGJldHdlZW4gPCA+IGluIEhUTUxcbmZ1bmN0aW9uIGF0dHJzVG9TdHIoYXR0cnMpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBmb3IgKHZhciBuYW1lXzIgaW4gYXR0cnMpIHtcbiAgICAgICAgdmFyIHZhbCA9IGF0dHJzW25hbWVfMl07XG4gICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChuYW1lXzIgKyAnPVwiJyArIGh0bWxFc2NhcGUodmFsKSArICdcIicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBwYXJzZUNsYXNzTmFtZShyYXcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiByYXcuc3BsaXQoL1xccysvKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbnZhciBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUyA9IHtcbiAgICBlZGl0YWJsZTogQm9vbGVhbixcbiAgICBzdGFydEVkaXRhYmxlOiBCb29sZWFuLFxuICAgIGR1cmF0aW9uRWRpdGFibGU6IEJvb2xlYW4sXG4gICAgY29uc3RyYWludDogbnVsbCxcbiAgICBvdmVybGFwOiBudWxsLFxuICAgIGFsbG93OiBudWxsLFxuICAgIGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWUsXG4gICAgY2xhc3NOYW1lczogcGFyc2VDbGFzc05hbWUsXG4gICAgY29sb3I6IFN0cmluZyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFN0cmluZyxcbiAgICBib3JkZXJDb2xvcjogU3RyaW5nLFxuICAgIHRleHRDb2xvcjogU3RyaW5nXG59O1xuZnVuY3Rpb24gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhyYXdQcm9wcywgY2FsZW5kYXIsIGxlZnRvdmVycykge1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhd1Byb3BzLCBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgdmFyIGNvbnN0cmFpbnQgPSBub3JtYWxpemVDb25zdHJhaW50KHByb3BzLmNvbnN0cmFpbnQsIGNhbGVuZGFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydEVkaXRhYmxlOiBwcm9wcy5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBwcm9wcy5zdGFydEVkaXRhYmxlIDogcHJvcHMuZWRpdGFibGUsXG4gICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IHByb3BzLmR1cmF0aW9uRWRpdGFibGUgIT0gbnVsbCA/IHByb3BzLmR1cmF0aW9uRWRpdGFibGUgOiBwcm9wcy5lZGl0YWJsZSxcbiAgICAgICAgY29uc3RyYWludHM6IGNvbnN0cmFpbnQgIT0gbnVsbCA/IFtjb25zdHJhaW50XSA6IFtdLFxuICAgICAgICBvdmVybGFwOiBwcm9wcy5vdmVybGFwLFxuICAgICAgICBhbGxvd3M6IHByb3BzLmFsbG93ICE9IG51bGwgPyBbcHJvcHMuYWxsb3ddIDogW10sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IHByb3BzLmNvbG9yLFxuICAgICAgICBib3JkZXJDb2xvcjogcHJvcHMuYm9yZGVyQ29sb3IgfHwgcHJvcHMuY29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogcHJvcHMudGV4dENvbG9yLFxuICAgICAgICBjbGFzc05hbWVzOiBwcm9wcy5jbGFzc05hbWVzLmNvbmNhdChwcm9wcy5jbGFzc05hbWUpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTY29wZWRVaVByb3BzKHByZWZpeCwgcmF3U2NvcGVkLCBjYWxlbmRhciwgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHJhd1Vuc2NvcGVkID0ge307XG4gICAgdmFyIHdhc0ZvdW5kID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIFVOU0NPUEVEX0VWRU5UX1VJX1BST1BTKSB7XG4gICAgICAgIHZhciBzY29wZWRLZXkgPSBwcmVmaXggKyBjYXBpdGFsaXNlRmlyc3RMZXR0ZXIoa2V5KTtcbiAgICAgICAgcmF3VW5zY29wZWRba2V5XSA9IHJhd1Njb3BlZFtzY29wZWRLZXldO1xuICAgICAgICB3YXNGb3VuZFtzY29wZWRLZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHByZWZpeCA9PT0gJ2V2ZW50Jykge1xuICAgICAgICByYXdVbnNjb3BlZC5lZGl0YWJsZSA9IHJhd1Njb3BlZC5lZGl0YWJsZTsgLy8gc3BlY2lhbCBjYXNlLiB0aGVyZSBpcyBubyAnZXZlbnRFZGl0YWJsZScsIGp1c3QgJ2VkaXRhYmxlJ1xuICAgIH1cbiAgICBpZiAobGVmdG92ZXJzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiByYXdTY29wZWQpIHtcbiAgICAgICAgICAgIGlmICghd2FzRm91bmRba2V5XSkge1xuICAgICAgICAgICAgICAgIGxlZnRvdmVyc1trZXldID0gcmF3U2NvcGVkW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NVbnNjb3BlZFVpUHJvcHMocmF3VW5zY29wZWQsIGNhbGVuZGFyKTtcbn1cbnZhciBFTVBUWV9FVkVOVF9VSSA9IHtcbiAgICBzdGFydEVkaXRhYmxlOiBudWxsLFxuICAgIGR1cmF0aW9uRWRpdGFibGU6IG51bGwsXG4gICAgY29uc3RyYWludHM6IFtdLFxuICAgIG92ZXJsYXA6IG51bGwsXG4gICAgYWxsb3dzOiBbXSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgIGJvcmRlckNvbG9yOiAnJyxcbiAgICB0ZXh0Q29sb3I6ICcnLFxuICAgIGNsYXNzTmFtZXM6IFtdXG59O1xuLy8gcHJldmVudCBhZ2FpbnN0IHByb2JsZW1zIHdpdGggPDIgYXJncyFcbmZ1bmN0aW9uIGNvbWJpbmVFdmVudFVpcyh1aXMpIHtcbiAgICByZXR1cm4gdWlzLnJlZHVjZShjb21iaW5lVHdvRXZlbnRVaXMsIEVNUFRZX0VWRU5UX1VJKTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVUd29FdmVudFVpcyhpdGVtMCwgaXRlbTEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydEVkaXRhYmxlOiBpdGVtMS5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBpdGVtMS5zdGFydEVkaXRhYmxlIDogaXRlbTAuc3RhcnRFZGl0YWJsZSxcbiAgICAgICAgZHVyYXRpb25FZGl0YWJsZTogaXRlbTEuZHVyYXRpb25FZGl0YWJsZSAhPSBudWxsID8gaXRlbTEuZHVyYXRpb25FZGl0YWJsZSA6IGl0ZW0wLmR1cmF0aW9uRWRpdGFibGUsXG4gICAgICAgIGNvbnN0cmFpbnRzOiBpdGVtMC5jb25zdHJhaW50cy5jb25jYXQoaXRlbTEuY29uc3RyYWludHMpLFxuICAgICAgICBvdmVybGFwOiB0eXBlb2YgaXRlbTEub3ZlcmxhcCA9PT0gJ2Jvb2xlYW4nID8gaXRlbTEub3ZlcmxhcCA6IGl0ZW0wLm92ZXJsYXAsXG4gICAgICAgIGFsbG93czogaXRlbTAuYWxsb3dzLmNvbmNhdChpdGVtMS5hbGxvd3MpLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGl0ZW0xLmJhY2tncm91bmRDb2xvciB8fCBpdGVtMC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJvcmRlckNvbG9yOiBpdGVtMS5ib3JkZXJDb2xvciB8fCBpdGVtMC5ib3JkZXJDb2xvcixcbiAgICAgICAgdGV4dENvbG9yOiBpdGVtMS50ZXh0Q29sb3IgfHwgaXRlbTAudGV4dENvbG9yLFxuICAgICAgICBjbGFzc05hbWVzOiBpdGVtMC5jbGFzc05hbWVzLmNvbmNhdChpdGVtMS5jbGFzc05hbWVzKVxuICAgIH07XG59XG5cbnZhciBOT05fREFURV9QUk9QUyA9IHtcbiAgICBpZDogU3RyaW5nLFxuICAgIGdyb3VwSWQ6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHVybDogU3RyaW5nLFxuICAgIHJlbmRlcmluZzogU3RyaW5nLFxuICAgIGV4dGVuZGVkUHJvcHM6IG51bGxcbn07XG52YXIgREFURV9QUk9QUyA9IHtcbiAgICBzdGFydDogbnVsbCxcbiAgICBkYXRlOiBudWxsLFxuICAgIGVuZDogbnVsbCxcbiAgICBhbGxEYXk6IG51bGxcbn07XG52YXIgdWlkID0gMDtcbmZ1bmN0aW9uIHBhcnNlRXZlbnQocmF3LCBzb3VyY2VJZCwgY2FsZW5kYXIsIGFsbG93T3BlblJhbmdlKSB7XG4gICAgdmFyIGFsbERheURlZmF1bHQgPSBjb21wdXRlSXNBbGxEYXlEZWZhdWx0KHNvdXJjZUlkLCBjYWxlbmRhcik7XG4gICAgdmFyIGxlZnRvdmVyczAgPSB7fTtcbiAgICB2YXIgcmVjdXJyaW5nUmVzID0gcGFyc2VSZWN1cnJpbmcocmF3LCAvLyByYXcsIGJ1dCB3aXRoIHNpbmdsZS1ldmVudCBzdHVmZiBzdHJpcHBlZCBvdXRcbiAgICBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhci5kYXRlRW52LCBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MucmVjdXJyaW5nVHlwZXMsIGxlZnRvdmVyczAgLy8gd2lsbCBwb3B1bGF0ZSB3aXRoIG5vbi1yZWN1cnJpbmcgcHJvcHNcbiAgICApO1xuICAgIGlmIChyZWN1cnJpbmdSZXMpIHtcbiAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYobGVmdG92ZXJzMCwgc291cmNlSWQsIHJlY3VycmluZ1Jlcy5hbGxEYXksIEJvb2xlYW4ocmVjdXJyaW5nUmVzLmR1cmF0aW9uKSwgY2FsZW5kYXIpO1xuICAgICAgICBkZWYucmVjdXJyaW5nRGVmID0ge1xuICAgICAgICAgICAgdHlwZUlkOiByZWN1cnJpbmdSZXMudHlwZUlkLFxuICAgICAgICAgICAgdHlwZURhdGE6IHJlY3VycmluZ1Jlcy50eXBlRGF0YSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiByZWN1cnJpbmdSZXMuZHVyYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGVmOiBkZWYsIGluc3RhbmNlOiBudWxsIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbGVmdG92ZXJzMSA9IHt9O1xuICAgICAgICB2YXIgc2luZ2xlUmVzID0gcGFyc2VTaW5nbGUocmF3LCBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhciwgbGVmdG92ZXJzMSwgYWxsb3dPcGVuUmFuZ2UpO1xuICAgICAgICBpZiAoc2luZ2xlUmVzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZihsZWZ0b3ZlcnMxLCBzb3VyY2VJZCwgc2luZ2xlUmVzLmFsbERheSwgc2luZ2xlUmVzLmhhc0VuZCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRXZlbnRJbnN0YW5jZShkZWYuZGVmSWQsIHNpbmdsZVJlcy5yYW5nZSwgc2luZ2xlUmVzLmZvcmNlZFN0YXJ0VHpvLCBzaW5nbGVSZXMuZm9yY2VkRW5kVHpvKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG5XaWxsIE5PVCBwb3B1bGF0ZSBleHRlbmRlZFByb3BzIHdpdGggdGhlIGxlZnRvdmVyIHByb3BlcnRpZXMuXG5XaWxsIE5PVCBwb3B1bGF0ZSBkYXRlLXJlbGF0ZWQgcHJvcHMuXG5UaGUgRXZlbnROb25EYXRlSW5wdXQgaGFzIGJlZW4gbm9ybWFsaXplZCAoaWQgPT4gcHVibGljSWQsIGV0YykuXG4qL1xuZnVuY3Rpb24gcGFyc2VFdmVudERlZihyYXcsIHNvdXJjZUlkLCBhbGxEYXksIGhhc0VuZCwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbGVmdG92ZXJzID0ge307XG4gICAgdmFyIGRlZiA9IHBsdWNrTm9uRGF0ZVByb3BzKHJhdywgY2FsZW5kYXIsIGxlZnRvdmVycyk7XG4gICAgZGVmLmRlZklkID0gU3RyaW5nKHVpZCsrKTtcbiAgICBkZWYuc291cmNlSWQgPSBzb3VyY2VJZDtcbiAgICBkZWYuYWxsRGF5ID0gYWxsRGF5O1xuICAgIGRlZi5oYXNFbmQgPSBoYXNFbmQ7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudERlZlBhcnNlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBldmVudERlZlBhcnNlciA9IF9hW19pXTtcbiAgICAgICAgdmFyIG5ld0xlZnRvdmVycyA9IHt9O1xuICAgICAgICBldmVudERlZlBhcnNlcihkZWYsIGxlZnRvdmVycywgbmV3TGVmdG92ZXJzKTtcbiAgICAgICAgbGVmdG92ZXJzID0gbmV3TGVmdG92ZXJzO1xuICAgIH1cbiAgICBkZWYuZXh0ZW5kZWRQcm9wcyA9IF9fYXNzaWduKGxlZnRvdmVycywgZGVmLmV4dGVuZGVkUHJvcHMgfHwge30pO1xuICAgIC8vIGhlbHAgb3V0IEV2ZW50QXBpIGZyb20gaGF2aW5nIHVzZXIgbW9kaWZ5IHByb3BzXG4gICAgT2JqZWN0LmZyZWV6ZShkZWYudWkuY2xhc3NOYW1lcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShkZWYuZXh0ZW5kZWRQcm9wcyk7XG4gICAgcmV0dXJuIGRlZjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmSWQsIHJhbmdlLCBmb3JjZWRTdGFydFR6bywgZm9yY2VkRW5kVHpvKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5zdGFuY2VJZDogU3RyaW5nKHVpZCsrKSxcbiAgICAgICAgZGVmSWQ6IGRlZklkLFxuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBmb3JjZWRTdGFydFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZFN0YXJ0VHpvLFxuICAgICAgICBmb3JjZWRFbmRUem86IGZvcmNlZEVuZFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZEVuZFR6b1xuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVNpbmdsZShyYXcsIGFsbERheURlZmF1bHQsIGNhbGVuZGFyLCBsZWZ0b3ZlcnMsIGFsbG93T3BlblJhbmdlKSB7XG4gICAgdmFyIHByb3BzID0gcGx1Y2tEYXRlUHJvcHMocmF3LCBsZWZ0b3ZlcnMpO1xuICAgIHZhciBhbGxEYXkgPSBwcm9wcy5hbGxEYXk7XG4gICAgdmFyIHN0YXJ0TWV0YTtcbiAgICB2YXIgc3RhcnRNYXJrZXIgPSBudWxsO1xuICAgIHZhciBoYXNFbmQgPSBmYWxzZTtcbiAgICB2YXIgZW5kTWV0YTtcbiAgICB2YXIgZW5kTWFya2VyID0gbnVsbDtcbiAgICBzdGFydE1ldGEgPSBjYWxlbmRhci5kYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEocHJvcHMuc3RhcnQpO1xuICAgIGlmIChzdGFydE1ldGEpIHtcbiAgICAgICAgc3RhcnRNYXJrZXIgPSBzdGFydE1ldGEubWFya2VyO1xuICAgIH1cbiAgICBlbHNlIGlmICghYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9wcy5lbmQgIT0gbnVsbCkge1xuICAgICAgICBlbmRNZXRhID0gY2FsZW5kYXIuZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHByb3BzLmVuZCk7XG4gICAgfVxuICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICBpZiAoYWxsRGF5RGVmYXVsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhbGxEYXkgPSBhbGxEYXlEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHRoZSBkYXRlIHByb3BzIExBU1RcbiAgICAgICAgICAgIGFsbERheSA9ICghc3RhcnRNZXRhIHx8IHN0YXJ0TWV0YS5pc1RpbWVVbnNwZWNpZmllZCkgJiZcbiAgICAgICAgICAgICAgICAoIWVuZE1ldGEgfHwgZW5kTWV0YS5pc1RpbWVVbnNwZWNpZmllZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFsbERheSAmJiBzdGFydE1hcmtlcikge1xuICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0T2ZEYXkoc3RhcnRNYXJrZXIpO1xuICAgIH1cbiAgICBpZiAoZW5kTWV0YSkge1xuICAgICAgICBlbmRNYXJrZXIgPSBlbmRNZXRhLm1hcmtlcjtcbiAgICAgICAgaWYgKGFsbERheSkge1xuICAgICAgICAgICAgZW5kTWFya2VyID0gc3RhcnRPZkRheShlbmRNYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIgPD0gc3RhcnRNYXJrZXIpIHtcbiAgICAgICAgICAgIGVuZE1hcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuZE1hcmtlcikge1xuICAgICAgICBoYXNFbmQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICghYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgaGFzRW5kID0gY2FsZW5kYXIub3B0KCdmb3JjZUV2ZW50RHVyYXRpb24nKSB8fCBmYWxzZTtcbiAgICAgICAgZW5kTWFya2VyID0gY2FsZW5kYXIuZGF0ZUVudi5hZGQoc3RhcnRNYXJrZXIsIGFsbERheSA/XG4gICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiA6XG4gICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgIGhhc0VuZDogaGFzRW5kLFxuICAgICAgICByYW5nZTogeyBzdGFydDogc3RhcnRNYXJrZXIsIGVuZDogZW5kTWFya2VyIH0sXG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEgPyBzdGFydE1ldGEuZm9yY2VkVHpvIDogbnVsbCxcbiAgICAgICAgZm9yY2VkRW5kVHpvOiBlbmRNZXRhID8gZW5kTWV0YS5mb3JjZWRUem8gOiBudWxsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBsdWNrRGF0ZVByb3BzKHJhdywgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHByb3BzID0gcmVmaW5lUHJvcHMocmF3LCBEQVRFX1BST1BTLCB7fSwgbGVmdG92ZXJzKTtcbiAgICBwcm9wcy5zdGFydCA9IChwcm9wcy5zdGFydCAhPT0gbnVsbCkgPyBwcm9wcy5zdGFydCA6IHByb3BzLmRhdGU7XG4gICAgZGVsZXRlIHByb3BzLmRhdGU7XG4gICAgcmV0dXJuIHByb3BzO1xufVxuZnVuY3Rpb24gcGx1Y2tOb25EYXRlUHJvcHMocmF3LCBjYWxlbmRhciwgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHByZUxlZnRvdmVycyA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhdywgTk9OX0RBVEVfUFJPUFMsIHt9LCBwcmVMZWZ0b3ZlcnMpO1xuICAgIHZhciB1aSA9IHByb2Nlc3NVbnNjb3BlZFVpUHJvcHMocHJlTGVmdG92ZXJzLCBjYWxlbmRhciwgbGVmdG92ZXJzKTtcbiAgICBwcm9wcy5wdWJsaWNJZCA9IHByb3BzLmlkO1xuICAgIGRlbGV0ZSBwcm9wcy5pZDtcbiAgICBwcm9wcy51aSA9IHVpO1xuICAgIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIGNvbXB1dGVJc0FsbERheURlZmF1bHQoc291cmNlSWQsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHJlcyA9IG51bGw7XG4gICAgaWYgKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBjYWxlbmRhci5zdGF0ZS5ldmVudFNvdXJjZXNbc291cmNlSWRdO1xuICAgICAgICByZXMgPSBzb3VyY2UuYWxsRGF5RGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICAgIHJlcyA9IGNhbGVuZGFyLm9wdCgnYWxsRGF5RGVmYXVsdCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG52YXIgREVGX0RFRkFVTFRTID0ge1xuICAgIHN0YXJ0VGltZTogJzA5OjAwJyxcbiAgICBlbmRUaW1lOiAnMTc6MDAnLFxuICAgIGRheXNPZldlZWs6IFsxLCAyLCAzLCA0LCA1XSxcbiAgICByZW5kZXJpbmc6ICdpbnZlcnNlLWJhY2tncm91bmQnLFxuICAgIGNsYXNzTmFtZXM6ICdmYy1ub25idXNpbmVzcycsXG4gICAgZ3JvdXBJZDogJ19idXNpbmVzc0hvdXJzJyAvLyBzbyBtdWx0aXBsZSBkZWZzIGdldCBncm91cGVkXG59O1xuLypcblRPRE86IHBhc3MgYXJvdW5kIGFzIEV2ZW50RGVmSGFzaCEhIVxuKi9cbmZ1bmN0aW9uIHBhcnNlQnVzaW5lc3NIb3VycyhpbnB1dCwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gcGFyc2VFdmVudHMocmVmaW5lSW5wdXRzKGlucHV0KSwgJycsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIHJlZmluZUlucHV0cyhpbnB1dCkge1xuICAgIHZhciByYXdEZWZzO1xuICAgIGlmIChpbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICByYXdEZWZzID0gW3t9XTsgLy8gd2lsbCBnZXQgREVGX0RFRkFVTFRTIHZlcmJhdGltXG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIC8vIGlmIHNwZWNpZnlpbmcgYW4gYXJyYXksIGV2ZXJ5IHN1Yi1kZWZpbml0aW9uIE5FRURTIGEgZGF5LW9mLXdlZWtcbiAgICAgICAgcmF3RGVmcyA9IGlucHV0LmZpbHRlcihmdW5jdGlvbiAocmF3RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3RGVmLmRheXNPZldlZWs7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICByYXdEZWZzID0gW2lucHV0XTtcbiAgICB9XG4gICAgZWxzZSB7IC8vIGlzIHByb2JhYmx5IGZhbHNlXG4gICAgICAgIHJhd0RlZnMgPSBbXTtcbiAgICB9XG4gICAgcmF3RGVmcyA9IHJhd0RlZnMubWFwKGZ1bmN0aW9uIChyYXdEZWYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBERUZfREVGQVVMVFMsIHJhd0RlZik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhd0RlZnM7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVSZW5kZXJpbmcocmVuZGVyRnVuYywgdW5yZW5kZXJGdW5jLCBkZXBlbmRlbmNpZXMpIHtcbiAgICBpZiAoZGVwZW5kZW5jaWVzID09PSB2b2lkIDApIHsgZGVwZW5kZW5jaWVzID0gW107IH1cbiAgICB2YXIgZGVwZW5kZW50cyA9IFtdO1xuICAgIHZhciB0aGlzQ29udGV4dDtcbiAgICB2YXIgcHJldkFyZ3M7XG4gICAgZnVuY3Rpb24gdW5yZW5kZXIoKSB7XG4gICAgICAgIGlmIChwcmV2QXJncykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbnRzXzEgPSBkZXBlbmRlbnRzOyBfaSA8IGRlcGVuZGVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVwZW5kZW50ID0gZGVwZW5kZW50c18xW19pXTtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbnQudW5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bnJlbmRlckZ1bmMpIHtcbiAgICAgICAgICAgICAgICB1bnJlbmRlckZ1bmMuYXBwbHkodGhpc0NvbnRleHQsIHByZXZBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZBcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZXMoKSB7XG4gICAgICAgIGlmICghcHJldkFyZ3MgfHwgIWlzQXJyYXlzRXF1YWwocHJldkFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgIHVucmVuZGVyKCk7XG4gICAgICAgICAgICB0aGlzQ29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgICBwcmV2QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJlbmRlckZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXMuZGVwZW5kZW50cyA9IGRlcGVuZGVudHM7XG4gICAgcmVzLnVucmVuZGVyID0gdW5yZW5kZXI7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbmNpZXNfMSA9IGRlcGVuZGVuY2llczsgX2kgPCBkZXBlbmRlbmNpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNfMVtfaV07XG4gICAgICAgIGRlcGVuZGVuY3kuZGVwZW5kZW50cy5wdXNoKHJlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbnZhciBFTVBUWV9FVkVOVF9TVE9SRSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyAvLyBmb3IgcHVyZWNvbXBvbmVudHMuIFRPRE86IGtlZXAgZWxzZXdoZXJlXG52YXIgU3BsaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BsaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IG1lbW9pemUodGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyk7XG4gICAgICAgIHRoaXMuc3BsaXREYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zcGxpdERhdGVTcGFuKTtcbiAgICAgICAgdGhpcy5zcGxpdEV2ZW50U3RvcmUgPSBtZW1vaXplKHRoaXMuX3NwbGl0RXZlbnRTdG9yZSk7XG4gICAgICAgIHRoaXMuc3BsaXRJbmRpdmlkdWFsVWkgPSBtZW1vaXplKHRoaXMuX3NwbGl0SW5kaXZpZHVhbFVpKTtcbiAgICAgICAgdGhpcy5zcGxpdEV2ZW50RHJhZyA9IG1lbW9pemUodGhpcy5fc3BsaXRJbnRlcmFjdGlvbik7XG4gICAgICAgIHRoaXMuc3BsaXRFdmVudFJlc2l6ZSA9IG1lbW9pemUodGhpcy5fc3BsaXRJbnRlcmFjdGlvbik7XG4gICAgICAgIHRoaXMuZXZlbnRVaUJ1aWxkZXJzID0ge307IC8vIFRPRE86IHR5cGVzY3JpcHQgcHJvdGVjdGlvblxuICAgIH1cbiAgICBTcGxpdHRlci5wcm90b3R5cGUuc3BsaXRQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIga2V5SW5mb3MgPSB0aGlzLmdldEtleUluZm8ocHJvcHMpO1xuICAgICAgICB2YXIgZGVmS2V5cyA9IHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyhwcm9wcy5ldmVudFN0b3JlKTtcbiAgICAgICAgdmFyIGRhdGVTZWxlY3Rpb25zID0gdGhpcy5zcGxpdERhdGVTZWxlY3Rpb24ocHJvcHMuZGF0ZVNlbGVjdGlvbik7XG4gICAgICAgIHZhciBpbmRpdmlkdWFsVWkgPSB0aGlzLnNwbGl0SW5kaXZpZHVhbFVpKHByb3BzLmV2ZW50VWlCYXNlcywgZGVmS2V5cyk7IC8vIHRoZSBpbmRpdmlkdWFsICpiYXNlcypcbiAgICAgICAgdmFyIGV2ZW50U3RvcmVzID0gdGhpcy5zcGxpdEV2ZW50U3RvcmUocHJvcHMuZXZlbnRTdG9yZSwgZGVmS2V5cyk7XG4gICAgICAgIHZhciBldmVudERyYWdzID0gdGhpcy5zcGxpdEV2ZW50RHJhZyhwcm9wcy5ldmVudERyYWcpO1xuICAgICAgICB2YXIgZXZlbnRSZXNpemVzID0gdGhpcy5zcGxpdEV2ZW50UmVzaXplKHByb3BzLmV2ZW50UmVzaXplKTtcbiAgICAgICAgdmFyIHNwbGl0UHJvcHMgPSB7fTtcbiAgICAgICAgdGhpcy5ldmVudFVpQnVpbGRlcnMgPSBtYXBIYXNoKGtleUluZm9zLCBmdW5jdGlvbiAoaW5mbywga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZXZlbnRVaUJ1aWxkZXJzW2tleV0gfHwgbWVtb2l6ZShidWlsZEV2ZW50VWlGb3JLZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGtleUluZm9zKSB7XG4gICAgICAgICAgICB2YXIga2V5SW5mbyA9IGtleUluZm9zW2tleV07XG4gICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IGV2ZW50U3RvcmVzW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkU7XG4gICAgICAgICAgICB2YXIgYnVpbGRFdmVudFVpID0gdGhpcy5ldmVudFVpQnVpbGRlcnNba2V5XTtcbiAgICAgICAgICAgIHNwbGl0UHJvcHNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBrZXlJbmZvLmJ1c2luZXNzSG91cnMgfHwgcHJvcHMuYnVzaW5lc3NIb3VycyxcbiAgICAgICAgICAgICAgICBkYXRlU2VsZWN0aW9uOiBkYXRlU2VsZWN0aW9uc1trZXldIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRTdG9yZSxcbiAgICAgICAgICAgICAgICBldmVudFVpQmFzZXM6IGJ1aWxkRXZlbnRVaShwcm9wcy5ldmVudFVpQmFzZXNbJyddLCBrZXlJbmZvLnVpLCBpbmRpdmlkdWFsVWlba2V5XSksXG4gICAgICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IGV2ZW50U3RvcmUuaW5zdGFuY2VzW3Byb3BzLmV2ZW50U2VsZWN0aW9uXSA/IHByb3BzLmV2ZW50U2VsZWN0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnOiBldmVudERyYWdzW2tleV0gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudFJlc2l6ZTogZXZlbnRSZXNpemVzW2tleV0gfHwgbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BsaXRQcm9wcztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXREYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICB2YXIgZGF0ZVNwYW5zID0ge307XG4gICAgICAgIGlmIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSB0aGlzLmdldEtleXNGb3JEYXRlU3BhbihkYXRlU3Bhbik7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgIGRhdGVTcGFuc1trZXldID0gZGF0ZVNwYW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVTcGFucztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IGZ1bmN0aW9uIChldmVudFN0b3JlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBtYXBIYXNoKGV2ZW50U3RvcmUuZGVmcywgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmKGV2ZW50RGVmKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0RXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBkZWZLZXlzKSB7XG4gICAgICAgIHZhciBkZWZzID0gZXZlbnRTdG9yZS5kZWZzLCBpbnN0YW5jZXMgPSBldmVudFN0b3JlLmluc3RhbmNlcztcbiAgICAgICAgdmFyIHNwbGl0U3RvcmVzID0ge307XG4gICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmICghc3BsaXRTdG9yZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFN0b3Jlc1trZXldID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNwbGl0U3RvcmVzW2tleV0uZGVmc1tkZWZJZF0gPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGRlZktleXNbaW5zdGFuY2UuZGVmSWRdOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfY1tfYl07XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0U3RvcmVzW2tleV0pIHsgLy8gbXVzdCBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0U3RvcmVzW2tleV0uaW5zdGFuY2VzW2luc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdFN0b3JlcztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXRJbmRpdmlkdWFsVWkgPSBmdW5jdGlvbiAoZXZlbnRVaUJhc2VzLCBkZWZLZXlzKSB7XG4gICAgICAgIHZhciBzcGxpdEhhc2hlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBldmVudFVpQmFzZXMpIHtcbiAgICAgICAgICAgIGlmIChkZWZJZCkgeyAvLyBub3QgdGhlICcnIGtleVxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGxpdEhhc2hlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEhhc2hlc1trZXldID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3BsaXRIYXNoZXNba2V5XVtkZWZJZF0gPSBldmVudFVpQmFzZXNbZGVmSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BsaXRIYXNoZXM7XG4gICAgfTtcbiAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgdmFyIHNwbGl0U3RhdGVzID0ge307XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGFmZmVjdGVkU3RvcmVzXzEgPSB0aGlzLl9zcGxpdEV2ZW50U3RvcmUoaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMsIHRoaXMuX2dldEtleXNGb3JFdmVudERlZnMoaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMpIC8vIGNhbid0IHVzZSBjYWNoZWQuIG1pZ2h0IGJlIGV2ZW50cyBmcm9tIG90aGVyIGNhbGVuZGFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gY2FuJ3QgcmVseSBvbiBkZWZLZXlzIGJlY2F1c2UgZXZlbnQgZGF0YSBpcyBtdXRhdGVkXG4gICAgICAgICAgICB2YXIgbXV0YXRlZEtleXNCeURlZklkID0gdGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyhpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzKTtcbiAgICAgICAgICAgIHZhciBtdXRhdGVkU3RvcmVzXzEgPSB0aGlzLl9zcGxpdEV2ZW50U3RvcmUoaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cywgbXV0YXRlZEtleXNCeURlZklkKTtcbiAgICAgICAgICAgIHZhciBwb3B1bGF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNwbGl0U3RhdGVzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRTdGF0ZXNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBhZmZlY3RlZFN0b3Jlc18xW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVkRXZlbnRzOiBtdXRhdGVkU3RvcmVzXzFba2V5XSB8fCBFTVBUWV9FVkVOVF9TVE9SRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IGludGVyYWN0aW9uLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnU2VnOiBpbnRlcmFjdGlvbi5vcmlnU2VnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhZmZlY3RlZFN0b3Jlc18xKSB7XG4gICAgICAgICAgICAgICAgcG9wdWxhdGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtdXRhdGVkU3RvcmVzXzEpIHtcbiAgICAgICAgICAgICAgICBwb3B1bGF0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdFN0YXRlcztcbiAgICB9O1xuICAgIHJldHVybiBTcGxpdHRlcjtcbn0oKSk7XG5mdW5jdGlvbiBidWlsZEV2ZW50VWlGb3JLZXkoYWxsVWksIGV2ZW50VWlGb3JLZXksIGluZGl2aWR1YWxVaSkge1xuICAgIHZhciBiYXNlUGFydHMgPSBbXTtcbiAgICBpZiAoYWxsVWkpIHtcbiAgICAgICAgYmFzZVBhcnRzLnB1c2goYWxsVWkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRVaUZvcktleSkge1xuICAgICAgICBiYXNlUGFydHMucHVzaChldmVudFVpRm9yS2V5KTtcbiAgICB9XG4gICAgdmFyIHN0dWZmID0ge1xuICAgICAgICAnJzogY29tYmluZUV2ZW50VWlzKGJhc2VQYXJ0cylcbiAgICB9O1xuICAgIGlmIChpbmRpdmlkdWFsVWkpIHtcbiAgICAgICAgX19hc3NpZ24oc3R1ZmYsIGluZGl2aWR1YWxVaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHVmZjtcbn1cblxuLy8gR2VuZXJhdGVzIEhUTUwgZm9yIGFuIGFuY2hvciB0byBhbm90aGVyIHZpZXcgaW50byB0aGUgY2FsZW5kYXIuXG4vLyBXaWxsIGVpdGhlciBnZW5lcmF0ZSBhbiA8YT4gdGFnIG9yIGEgbm9uLWNsaWNrYWJsZSA8c3Bhbj4gdGFnLCBkZXBlbmRpbmcgb24gZW5hYmxlZCBzZXR0aW5ncy5cbi8vIGBnb3RvT3B0aW9uc2AgY2FuIGVpdGhlciBiZSBhIERhdGVNYXJrZXIsIG9yIGFuIG9iamVjdCB3aXRoIHRoZSBmb3JtOlxuLy8geyBkYXRlLCB0eXBlLCBmb3JjZU9mZiB9XG4vLyBgdHlwZWAgaXMgYSB2aWV3LXR5cGUgbGlrZSBcImRheVwiIG9yIFwid2Vla1wiLiBkZWZhdWx0IHZhbHVlIGlzIFwiZGF5XCIuXG4vLyBgYXR0cnNgIGFuZCBgaW5uZXJIdG1sYCBhcmUgdXNlIHRvIGdlbmVyYXRlIHRoZSByZXN0IG9mIHRoZSBIVE1MIHRhZy5cbmZ1bmN0aW9uIGJ1aWxkR290b0FuY2hvckh0bWwoY29tcG9uZW50LCBnb3RvT3B0aW9ucywgYXR0cnMsIGlubmVySHRtbCkge1xuICAgIHZhciBkYXRlRW52ID0gY29tcG9uZW50LmRhdGVFbnY7XG4gICAgdmFyIGRhdGU7XG4gICAgdmFyIHR5cGU7XG4gICAgdmFyIGZvcmNlT2ZmO1xuICAgIHZhciBmaW5hbE9wdGlvbnM7XG4gICAgaWYgKGdvdG9PcHRpb25zIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkYXRlID0gZ290b09wdGlvbnM7IC8vIGEgc2luZ2xlIGRhdGUtbGlrZSBpbnB1dFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IGdvdG9PcHRpb25zLmRhdGU7XG4gICAgICAgIHR5cGUgPSBnb3RvT3B0aW9ucy50eXBlO1xuICAgICAgICBmb3JjZU9mZiA9IGdvdG9PcHRpb25zLmZvcmNlT2ZmO1xuICAgIH1cbiAgICBmaW5hbE9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGU6IGRhdGVFbnYuZm9ybWF0SXNvKGRhdGUsIHsgb21pdFRpbWU6IHRydWUgfSksXG4gICAgICAgIHR5cGU6IHR5cGUgfHwgJ2RheSdcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlubmVySHRtbCA9IGF0dHJzO1xuICAgICAgICBhdHRycyA9IG51bGw7XG4gICAgfVxuICAgIGF0dHJzID0gYXR0cnMgPyAnICcgKyBhdHRyc1RvU3RyKGF0dHJzKSA6ICcnOyAvLyB3aWxsIGhhdmUgYSBsZWFkaW5nIHNwYWNlXG4gICAgaW5uZXJIdG1sID0gaW5uZXJIdG1sIHx8ICcnO1xuICAgIGlmICghZm9yY2VPZmYgJiYgY29tcG9uZW50Lm9wdCgnbmF2TGlua3MnKSkge1xuICAgICAgICByZXR1cm4gJzxhJyArIGF0dHJzICtcbiAgICAgICAgICAgICcgZGF0YS1nb3RvPVwiJyArIGh0bWxFc2NhcGUoSlNPTi5zdHJpbmdpZnkoZmluYWxPcHRpb25zKSkgKyAnXCI+JyArXG4gICAgICAgICAgICBpbm5lckh0bWwgK1xuICAgICAgICAgICAgJzwvYT4nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICc8c3BhbicgKyBhdHRycyArICc+JyArXG4gICAgICAgICAgICBpbm5lckh0bWwgK1xuICAgICAgICAgICAgJzwvc3Bhbj4nO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEFsbERheUh0bWwoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudC5vcHQoJ2FsbERheUh0bWwnKSB8fCBodG1sRXNjYXBlKGNvbXBvbmVudC5vcHQoJ2FsbERheVRleHQnKSk7XG59XG4vLyBDb21wdXRlcyBIVE1MIGNsYXNzTmFtZXMgZm9yIGEgc2luZ2xlLWRheSBlbGVtZW50XG5mdW5jdGlvbiBnZXREYXlDbGFzc2VzKGRhdGUsIGRhdGVQcm9maWxlLCBjb250ZXh0LCBub1RoZW1lSGlnaGxpZ2h0KSB7XG4gICAgdmFyIGNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhciwgdmlldyA9IGNvbnRleHQudmlldywgdGhlbWUgPSBjb250ZXh0LnRoZW1lLCBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52O1xuICAgIHZhciBjbGFzc2VzID0gW107XG4gICAgdmFyIHRvZGF5U3RhcnQ7XG4gICAgdmFyIHRvZGF5RW5kO1xuICAgIGlmICghcmFuZ2VDb250YWluc01hcmtlcihkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgZGF0ZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1kaXNhYmxlZC1kYXknKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzZXMucHVzaCgnZmMtJyArIERBWV9JRFNbZGF0ZS5nZXRVVENEYXkoKV0pO1xuICAgICAgICBpZiAodmlldy5vcHQoJ21vbnRoTW9kZScpICYmXG4gICAgICAgICAgICBkYXRlRW52LmdldE1vbnRoKGRhdGUpICE9PSBkYXRlRW52LmdldE1vbnRoKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydCkpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtb3RoZXItbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICB0b2RheVN0YXJ0ID0gc3RhcnRPZkRheShjYWxlbmRhci5nZXROb3coKSk7XG4gICAgICAgIHRvZGF5RW5kID0gYWRkRGF5cyh0b2RheVN0YXJ0LCAxKTtcbiAgICAgICAgaWYgKGRhdGUgPCB0b2RheVN0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLXBhc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRlID49IHRvZGF5RW5kKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWZ1dHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy10b2RheScpO1xuICAgICAgICAgICAgaWYgKG5vVGhlbWVIaWdobGlnaHQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2godGhlbWUuZ2V0Q2xhc3MoJ3RvZGF5JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xufVxuXG4vLyBnaXZlbiBhIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgYSByZXN1bHQgYXN5bmNocm9ub3VzbHkuXG4vLyB0aGUgZnVuY3Rpb24gY2FuIGVpdGhlciBjYWxsIHBhc3NlZC1pbiBzdWNjZXNzIGFuZCBmYWlsdXJlIGNhbGxiYWNrcyxcbi8vIG9yIGl0IGNhbiByZXR1cm4gYSBwcm9taXNlLlxuLy8gaWYgeW91IG5lZWQgdG8gcGFzcyBhZGRpdGlvbmFsIHBhcmFtcyB0byBmdW5jLCBiaW5kIHRoZW0gZmlyc3QuXG5mdW5jdGlvbiB1bnByb21pc2lmeShmdW5jLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCBzdWNjZXNzL2ZhaWx1cmUgY2FsbGJhY2tzIGJlaW5nIGNhbGxlZCBtb3JlIHRoYW4gb25jZVxuICAgIC8vIGFuZCBndWFyZCBhZ2FpbnN0IGEgcHJvbWlzZSBBTkQgY2FsbGJhY2sgYmVpbmcgdXNlZCB0b2dldGhlci5cbiAgICB2YXIgaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciB3cmFwcGVkU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICBpc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHN1Y2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHdyYXBwZWRGYWlsdXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXMgPSBmdW5jKHdyYXBwZWRTdWNjZXNzLCB3cmFwcGVkRmFpbHVyZSk7XG4gICAgaWYgKHJlcyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLnRoZW4od3JhcHBlZFN1Y2Nlc3MsIHdyYXBwZWRGYWlsdXJlKTtcbiAgICB9XG59XG5cbnZhciBNaXhpbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNaXhpbigpIHtcbiAgICB9XG4gICAgLy8gbWl4IGludG8gYSBDTEFTU1xuICAgIE1peGluLm1peEludG8gPSBmdW5jdGlvbiAoZGVzdENsYXNzKSB7XG4gICAgICAgIHRoaXMubWl4SW50b09iaihkZXN0Q2xhc3MucHJvdG90eXBlKTtcbiAgICB9O1xuICAgIC8vIG1peCBpbnRvIEFOWSBvYmplY3RcbiAgICBNaXhpbi5taXhJbnRvT2JqID0gZnVuY3Rpb24gKGRlc3RPYmopIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghZGVzdE9ialtuYW1lXSkgeyAvLyBpZiBkZXN0aW5hdGlvbiBkb2Vzbid0IGFscmVhZHkgZGVmaW5lIGl0XG4gICAgICAgICAgICAgICAgZGVzdE9ialtuYW1lXSA9IF90aGlzLnByb3RvdHlwZVtuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKlxuICAgIHdpbGwgb3ZlcnJpZGUgZXhpc3RpbmcgbWV0aG9kc1xuICAgIFRPRE86IHJlbW92ZSEgbm90IHVzZWQgYW55bW9yZVxuICAgICovXG4gICAgTWl4aW4ubWl4T3ZlciA9IGZ1bmN0aW9uIChkZXN0Q2xhc3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGRlc3RDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBfdGhpcy5wcm90b3R5cGVbbmFtZV07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1peGluO1xufSgpKTtcblxuLypcblVTQUdFOlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIEVtaXR0ZXJNaXhpbiwgRW1pdHRlckludGVyZmFjZSB9IGZyb20gJy4vRW1pdHRlck1peGluJ1xuaW4gY2xhc3M6XG4gIG9uOiBFbWl0dGVySW50ZXJmYWNlWydvbiddXG4gIG9uZTogRW1pdHRlckludGVyZmFjZVsnb25lJ11cbiAgb2ZmOiBFbWl0dGVySW50ZXJmYWNlWydvZmYnXVxuICB0cmlnZ2VyOiBFbWl0dGVySW50ZXJmYWNlWyd0cmlnZ2VyJ11cbiAgdHJpZ2dlcldpdGg6IEVtaXR0ZXJJbnRlcmZhY2VbJ3RyaWdnZXJXaXRoJ11cbiAgaGFzSGFuZGxlcnM6IEVtaXR0ZXJJbnRlcmZhY2VbJ2hhc0hhbmRsZXJzJ11cbmFmdGVyIGNsYXNzOlxuICBFbWl0dGVyTWl4aW4ubWl4SW50byhUaGVDbGFzcylcbiovXG52YXIgRW1pdHRlck1peGluID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbWl0dGVyTWl4aW4sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1pdHRlck1peGluKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBhZGRUb0hhc2godGhpcy5faGFuZGxlcnMgfHwgKHRoaXMuX2hhbmRsZXJzID0ge30pLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7IC8vIGZvciBjaGFpbmluZ1xuICAgIH07XG4gICAgLy8gdG9kbzogYWRkIGNvbW1lbnRzXG4gICAgRW1pdHRlck1peGluLnByb3RvdHlwZS5vbmUgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBhZGRUb0hhc2godGhpcy5fb25lSGFuZGxlcnMgfHwgKHRoaXMuX29uZUhhbmRsZXJzID0ge30pLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7IC8vIGZvciBjaGFpbmluZ1xuICAgIH07XG4gICAgRW1pdHRlck1peGluLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5faGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21IYXNoKHRoaXMuX2hhbmRsZXJzLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb25lSGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21IYXNoKHRoaXMuX29uZUhhbmRsZXJzLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgfTtcbiAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXJXaXRoKHR5cGUsIHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgfTtcbiAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLnRyaWdnZXJXaXRoID0gZnVuY3Rpb24gKHR5cGUsIGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICBhcHBseUFsbCh0aGlzLl9oYW5kbGVyc1t0eXBlXSwgY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29uZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICBhcHBseUFsbCh0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXSwgY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb25lSGFuZGxlcnNbdHlwZV07IC8vIHdpbGwgbmV2ZXIgZmlyZSBhZ2FpblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzOyAvLyBmb3IgY2hhaW5pbmdcbiAgICB9O1xuICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUuaGFzSGFuZGxlcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hhbmRsZXJzICYmIHRoaXMuX2hhbmRsZXJzW3R5cGVdICYmIHRoaXMuX2hhbmRsZXJzW3R5cGVdLmxlbmd0aCkgfHxcbiAgICAgICAgICAgICh0aGlzLl9vbmVIYW5kbGVycyAmJiB0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXSAmJiB0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXS5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXJNaXhpbjtcbn0oTWl4aW4pKTtcbmZ1bmN0aW9uIGFkZFRvSGFzaChoYXNoLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgKGhhc2hbdHlwZV0gfHwgKGhhc2hbdHlwZV0gPSBbXSkpXG4gICAgICAgIC5wdXNoKGhhbmRsZXIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRnJvbUhhc2goaGFzaCwgdHlwZSwgaGFuZGxlcikge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIGlmIChoYXNoW3R5cGVdKSB7XG4gICAgICAgICAgICBoYXNoW3R5cGVdID0gaGFzaFt0eXBlXS5maWx0ZXIoZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyAhPT0gaGFuZGxlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWxldGUgaGFzaFt0eXBlXTsgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyIGZ1bmNzIGZvciB0aGlzIHR5cGVcbiAgICB9XG59XG5cbi8qXG5SZWNvcmRzIG9mZnNldCBpbmZvcm1hdGlvbiBmb3IgYSBzZXQgb2YgZWxlbWVudHMsIHJlbGF0aXZlIHRvIGFuIG9yaWdpbiBlbGVtZW50LlxuQ2FuIHJlY29yZCB0aGUgbGVmdC9yaWdodCBPUiB0aGUgdG9wL2JvdHRvbSBPUiBib3RoLlxuUHJvdmlkZXMgbWV0aG9kcyBmb3IgcXVlcnlpbmcgdGhlIGNhY2hlIGJ5IHBvc2l0aW9uLlxuKi9cbnZhciBQb3NpdGlvbkNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvc2l0aW9uQ2FjaGUob3JpZ2luRWwsIGVscywgaXNIb3Jpem9udGFsLCBpc1ZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMub3JpZ2luRWwgPSBvcmlnaW5FbDtcbiAgICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgICAgIHRoaXMuaXNIb3Jpem9udGFsID0gaXNIb3Jpem9udGFsO1xuICAgICAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuICAgIH1cbiAgICAvLyBRdWVyaWVzIHRoZSBlbHMgZm9yIGNvb3JkaW5hdGVzIGFuZCBzdG9yZXMgdGhlbS5cbiAgICAvLyBDYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSB1c2luZyBhbmQgb2YgdGhlIGdldCogbWV0aG9kcyBiZWxvdy5cbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9yaWdpbkVsID0gdGhpcy5vcmlnaW5FbDtcbiAgICAgICAgdmFyIG9yaWdpbkNsaWVudFJlY3QgPSB0aGlzLm9yaWdpbkNsaWVudFJlY3QgPVxuICAgICAgICAgICAgb3JpZ2luRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHJlbGF0aXZlIHRvIHZpZXdwb3J0IHRvcC1sZWZ0XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdGhpcy5idWlsZEVsSG9yaXpvbnRhbHMob3JpZ2luQ2xpZW50UmVjdC5sZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRWxWZXJ0aWNhbHMob3JpZ2luQ2xpZW50UmVjdC50b3ApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBQb3B1bGF0ZXMgdGhlIGxlZnQvcmlnaHQgaW50ZXJuYWwgY29vcmRpbmF0ZSBhcnJheXNcbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZEVsSG9yaXpvbnRhbHMgPSBmdW5jdGlvbiAob3JpZ2luQ2xpZW50TGVmdCkge1xuICAgICAgICB2YXIgbGVmdHMgPSBbXTtcbiAgICAgICAgdmFyIHJpZ2h0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5lbHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgbGVmdHMucHVzaChyZWN0LmxlZnQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgICAgIHJpZ2h0cy5wdXNoKHJlY3QucmlnaHQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZnRzID0gbGVmdHM7XG4gICAgICAgIHRoaXMucmlnaHRzID0gcmlnaHRzO1xuICAgIH07XG4gICAgLy8gUG9wdWxhdGVzIHRoZSB0b3AvYm90dG9tIGludGVybmFsIGNvb3JkaW5hdGUgYXJyYXlzXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUuYnVpbGRFbFZlcnRpY2FscyA9IGZ1bmN0aW9uIChvcmlnaW5DbGllbnRUb3ApIHtcbiAgICAgICAgdmFyIHRvcHMgPSBbXTtcbiAgICAgICAgdmFyIGJvdHRvbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZWxzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGVsID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHRvcHMucHVzaChyZWN0LnRvcCAtIG9yaWdpbkNsaWVudFRvcCk7XG4gICAgICAgICAgICBib3R0b21zLnB1c2gocmVjdC5ib3R0b20gLSBvcmlnaW5DbGllbnRUb3ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9wcyA9IHRvcHM7XG4gICAgICAgIHRoaXMuYm90dG9tcyA9IGJvdHRvbXM7XG4gICAgfTtcbiAgICAvLyBHaXZlbiBhIGxlZnQgb2Zmc2V0IChmcm9tIGRvY3VtZW50IGxlZnQpLCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZWwgdGhhdCBpdCBob3Jpem9udGFsbHkgaW50ZXJzZWN0cy5cbiAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUubGVmdFRvSW5kZXggPSBmdW5jdGlvbiAobGVmdFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBsZWZ0cyA9IHRoaXMubGVmdHM7XG4gICAgICAgIHZhciByaWdodHMgPSB0aGlzLnJpZ2h0cztcbiAgICAgICAgdmFyIGxlbiA9IGxlZnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGxlZnRQb3NpdGlvbiA+PSBsZWZ0c1tpXSAmJiBsZWZ0UG9zaXRpb24gPCByaWdodHNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gR2l2ZW4gYSB0b3Agb2Zmc2V0IChmcm9tIGRvY3VtZW50IHRvcCksIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBlbCB0aGF0IGl0IHZlcnRpY2FsbHkgaW50ZXJzZWN0cy5cbiAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUudG9wVG9JbmRleCA9IGZ1bmN0aW9uICh0b3BQb3NpdGlvbikge1xuICAgICAgICB2YXIgdG9wcyA9IHRoaXMudG9wcztcbiAgICAgICAgdmFyIGJvdHRvbXMgPSB0aGlzLmJvdHRvbXM7XG4gICAgICAgIHZhciBsZW4gPSB0b3BzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRvcFBvc2l0aW9uID49IHRvcHNbaV0gJiYgdG9wUG9zaXRpb24gPCBib3R0b21zW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxuICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24gKGxlZnRJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodHNbbGVmdEluZGV4XSAtIHRoaXMubGVmdHNbbGVmdEluZGV4XTtcbiAgICB9O1xuICAgIC8vIEdldHMgdGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXhcbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAodG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tc1t0b3BJbmRleF0gLSB0aGlzLnRvcHNbdG9wSW5kZXhdO1xuICAgIH07XG4gICAgcmV0dXJuIFBvc2l0aW9uQ2FjaGU7XG59KCkpO1xuXG4vKlxuQW4gb2JqZWN0IGZvciBnZXR0aW5nL3NldHRpbmcgc2Nyb2xsLXJlbGF0ZWQgaW5mb3JtYXRpb24gZm9yIGFuIGVsZW1lbnQuXG5JbnRlcm5hbGx5LCB0aGlzIGlzIGRvbmUgdmVyeSBkaWZmZXJlbnRseSBmb3Igd2luZG93IHZlcnN1cyBET00gZWxlbWVudCxcbnNvIHRoaXMgb2JqZWN0IHNlcnZlcyBhcyBhIGNvbW1vbiBpbnRlcmZhY2UuXG4qL1xudmFyIFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWF4U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKSAtIHRoaXMuZ2V0Q2xpZW50SGVpZ2h0KCk7XG4gICAgfTtcbiAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRNYXhTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxXaWR0aCgpIC0gdGhpcy5nZXRDbGllbnRXaWR0aCgpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVmVydGljYWxseSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF4U2Nyb2xsVG9wKCkgPiAwO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXhTY3JvbGxMZWZ0KCkgPiAwO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFRvcCgpID4gMDtcbiAgICB9O1xuICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbERvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFRvcCgpIDwgdGhpcy5nZXRNYXhTY3JvbGxUb3AoKTtcbiAgICB9O1xuICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbExlZnQoKSA+IDA7XG4gICAgfTtcbiAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5jYW5TY3JvbGxSaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsTGVmdCgpIDwgdGhpcy5nZXRNYXhTY3JvbGxMZWZ0KCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2Nyb2xsQ29udHJvbGxlcjtcbn0oKSk7XG52YXIgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyKGVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsVG9wO1xuICAgIH07XG4gICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnNjcm9sbExlZnQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKHRvcCkge1xuICAgICAgICB0aGlzLmVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9O1xuICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKGxlZnQpIHtcbiAgICAgICAgdGhpcy5lbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9O1xuICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsV2lkdGg7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zY3JvbGxIZWlnaHQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5jbGllbnRIZWlnaHQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNsaWVudFdpZHRoO1xuICAgIH07XG4gICAgcmV0dXJuIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyO1xufShTY3JvbGxDb250cm9sbGVyKSk7XG52YXIgV2luZG93U2Nyb2xsQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93U2Nyb2xsQ29udHJvbGxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dTY3JvbGxDb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB9O1xuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsKHdpbmRvdy5wYWdlWE9mZnNldCwgbik7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgd2luZG93LnNjcm9sbChuLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIH07XG4gICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIH07XG4gICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB9O1xuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldENsaWVudFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1Njcm9sbENvbnRyb2xsZXI7XG59KFNjcm9sbENvbnRyb2xsZXIpKTtcblxuLypcbkVtYm9kaWVzIGEgZGl2IHRoYXQgaGFzIHBvdGVudGlhbCBzY3JvbGxiYXJzXG4qL1xudmFyIFNjcm9sbENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2Nyb2xsQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcm9sbENvbXBvbmVudChvdmVyZmxvd1gsIG92ZXJmbG93WSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdmYy1zY3JvbGxlcidcbiAgICAgICAgfSkpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm92ZXJmbG93WCA9IG92ZXJmbG93WDtcbiAgICAgICAgX3RoaXMub3ZlcmZsb3dZID0gb3ZlcmZsb3dZO1xuICAgICAgICBfdGhpcy5hcHBseU92ZXJmbG93KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gc2V0cyB0byBuYXR1cmFsIGhlaWdodCwgdW5sb2NrcyBvdmVyZmxvd1xuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KCdhdXRvJyk7XG4gICAgICAgIHRoaXMuYXBwbHlPdmVyZmxvdygpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgLy8gT3ZlcmZsb3dcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuYXBwbHlPdmVyZmxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmVsLCB7XG4gICAgICAgICAgICBvdmVyZmxvd1g6IHRoaXMub3ZlcmZsb3dYLFxuICAgICAgICAgICAgb3ZlcmZsb3dZOiB0aGlzLm92ZXJmbG93WVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIENhdXNlcyBhbnkgJ2F1dG8nIG92ZXJmbG93IHZhbHVlcyB0byByZXNvbHZlcyB0byAnc2Nyb2xsJyBvciAnaGlkZGVuJy5cbiAgICAvLyBVc2VmdWwgZm9yIHByZXNlcnZpbmcgc2Nyb2xsYmFyIHdpZHRocyByZWdhcmRsZXNzIG9mIGZ1dHVyZSByZXNpemVzLlxuICAgIC8vIENhbiBwYXNzIGluIHNjcm9sbGJhcldpZHRocyBmb3Igb3B0aW1pemF0aW9uLlxuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUubG9ja092ZXJmbG93ID0gZnVuY3Rpb24gKHNjcm9sbGJhcldpZHRocykge1xuICAgICAgICB2YXIgb3ZlcmZsb3dYID0gdGhpcy5vdmVyZmxvd1g7XG4gICAgICAgIHZhciBvdmVyZmxvd1kgPSB0aGlzLm92ZXJmbG93WTtcbiAgICAgICAgc2Nyb2xsYmFyV2lkdGhzID0gc2Nyb2xsYmFyV2lkdGhzIHx8IHRoaXMuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgIGlmIChvdmVyZmxvd1ggPT09ICdhdXRvJykge1xuICAgICAgICAgICAgb3ZlcmZsb3dYID0gKHNjcm9sbGJhcldpZHRocy5ib3R0b20gfHwgLy8gaG9yaXpvbnRhbCBzY3JvbGxiYXJzP1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5KCkgLy8gT1Igc2Nyb2xsaW5nIHBhbmUgd2l0aCBtYXNzbGVzcyBzY3JvbGxiYXJzP1xuICAgICAgICAgICAgKSA/ICdzY3JvbGwnIDogJ2hpZGRlbic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG92ZXJmbG93WSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBvdmVyZmxvd1kgPSAoc2Nyb2xsYmFyV2lkdGhzLmxlZnQgfHwgc2Nyb2xsYmFyV2lkdGhzLnJpZ2h0IHx8IC8vIGhvcml6b250YWwgc2Nyb2xsYmFycz9cbiAgICAgICAgICAgICAgICB0aGlzLmNhblNjcm9sbFZlcnRpY2FsbHkoKSAvLyBPUiBzY3JvbGxpbmcgcGFuZSB3aXRoIG1hc3NsZXNzIHNjcm9sbGJhcnM/XG4gICAgICAgICAgICApID8gJ3Njcm9sbCcgOiAnaGlkZGVuJztcbiAgICAgICAgfVxuICAgICAgICBhcHBseVN0eWxlKHRoaXMuZWwsIHsgb3ZlcmZsb3dYOiBvdmVyZmxvd1gsIG92ZXJmbG93WTogb3ZlcmZsb3dZIH0pO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgICAgIGFwcGx5U3R5bGVQcm9wKHRoaXMuZWwsICdoZWlnaHQnLCBoZWlnaHQpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5nZXRTY3JvbGxiYXJXaWR0aHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNvbXB1dGVFZGdlcyh0aGlzLmVsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IGVkZ2VzLnNjcm9sbGJhckxlZnQsXG4gICAgICAgICAgICByaWdodDogZWRnZXMuc2Nyb2xsYmFyUmlnaHQsXG4gICAgICAgICAgICBib3R0b206IGVkZ2VzLnNjcm9sbGJhckJvdHRvbVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFNjcm9sbENvbXBvbmVudDtcbn0oRWxlbWVudFNjcm9sbENvbnRyb2xsZXIpKTtcblxudmFyIFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRoZW1lKGNhbGVuZGFyT3B0aW9ucykge1xuICAgICAgICB0aGlzLmNhbGVuZGFyT3B0aW9ucyA9IGNhbGVuZGFyT3B0aW9ucztcbiAgICAgICAgdGhpcy5wcm9jZXNzSWNvbk92ZXJyaWRlKCk7XG4gICAgfVxuICAgIFRoZW1lLnByb3RvdHlwZS5wcm9jZXNzSWNvbk92ZXJyaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVPcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SWNvbk92ZXJyaWRlKHRoaXMuY2FsZW5kYXJPcHRpb25zW3RoaXMuaWNvbk92ZXJyaWRlT3B0aW9uXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRoZW1lLnByb3RvdHlwZS5zZXRJY29uT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaWNvbk92ZXJyaWRlSGFzaCkge1xuICAgICAgICB2YXIgaWNvbkNsYXNzZXNDb3B5O1xuICAgICAgICB2YXIgYnV0dG9uTmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZiBpY29uT3ZlcnJpZGVIYXNoID09PSAnb2JqZWN0JyAmJiBpY29uT3ZlcnJpZGVIYXNoKSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICAgICAgaWNvbkNsYXNzZXNDb3B5ID0gX19hc3NpZ24oe30sIHRoaXMuaWNvbkNsYXNzZXMpO1xuICAgICAgICAgICAgZm9yIChidXR0b25OYW1lIGluIGljb25PdmVycmlkZUhhc2gpIHtcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3Nlc0NvcHlbYnV0dG9uTmFtZV0gPSB0aGlzLmFwcGx5SWNvbk92ZXJyaWRlUHJlZml4KGljb25PdmVycmlkZUhhc2hbYnV0dG9uTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IGljb25DbGFzc2VzQ29weTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpY29uT3ZlcnJpZGVIYXNoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IHt9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaGVtZS5wcm90b3R5cGUuYXBwbHlJY29uT3ZlcnJpZGVQcmVmaXggPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSB0aGlzLmljb25PdmVycmlkZVByZWZpeDtcbiAgICAgICAgaWYgKHByZWZpeCAmJiBjbGFzc05hbWUuaW5kZXhPZihwcmVmaXgpICE9PSAwKSB7IC8vIGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IHByZWZpeCArIGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lO1xuICAgIH07XG4gICAgVGhlbWUucHJvdG90eXBlLmdldENsYXNzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2VzW2tleV0gfHwgJyc7XG4gICAgfTtcbiAgICBUaGVtZS5wcm90b3R5cGUuZ2V0SWNvbkNsYXNzID0gZnVuY3Rpb24gKGJ1dHRvbk5hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuaWNvbkNsYXNzZXNbYnV0dG9uTmFtZV07XG4gICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VJY29uQ2xhc3MgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgVGhlbWUucHJvdG90eXBlLmdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyA9IGZ1bmN0aW9uIChjdXN0b21CdXR0b25Qcm9wcykge1xuICAgICAgICB2YXIgY2xhc3NOYW1lO1xuICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGN1c3RvbUJ1dHRvblByb3BzW3RoaXMuaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uXTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSWNvbkNsYXNzICsgJyAnICsgdGhpcy5hcHBseUljb25PdmVycmlkZVByZWZpeChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHJldHVybiBUaGVtZTtcbn0oKSk7XG5UaGVtZS5wcm90b3R5cGUuY2xhc3NlcyA9IHt9O1xuVGhlbWUucHJvdG90eXBlLmljb25DbGFzc2VzID0ge307XG5UaGVtZS5wcm90b3R5cGUuYmFzZUljb25DbGFzcyA9ICcnO1xuVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZVByZWZpeCA9ICcnO1xuXG52YXIgZ3VpZCA9IDA7XG52YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudChjb250ZXh0LCBpc1ZpZXcpIHtcbiAgICAgICAgLy8gSEFDSyB0byBwb3B1bGF0ZSB2aWV3IGF0IHRvcCBvZiBjb21wb25lbnQgaW5zdGFudGlhdGlvbiBjYWxsIGNoYWluXG4gICAgICAgIGlmIChpc1ZpZXcpIHtcbiAgICAgICAgICAgIGNvbnRleHQudmlldyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51aWQgPSBTdHJpbmcoZ3VpZCsrKTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5kYXRlRW52ID0gY29udGV4dC5kYXRlRW52O1xuICAgICAgICB0aGlzLnRoZW1lID0gY29udGV4dC50aGVtZTtcbiAgICAgICAgdGhpcy52aWV3ID0gY29udGV4dC52aWV3O1xuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhcjtcbiAgICAgICAgdGhpcy5pc1J0bCA9IHRoaXMub3B0KCdkaXInKSA9PT0gJ3J0bCc7XG4gICAgfVxuICAgIENvbXBvbmVudC5hZGRFcXVhbGl0eUZ1bmNzID0gZnVuY3Rpb24gKG5ld0Z1bmNzKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLmVxdWFsaXR5RnVuY3MgPSBfX2Fzc2lnbih7fSwgdGhpcy5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcywgbmV3RnVuY3MpO1xuICAgIH07XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5vcHQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm9wdGlvbnNbbmFtZV07XG4gICAgfTtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgX2EgPSByZWN5Y2xlUHJvcHModGhpcy5wcm9wcyB8fCB7fSwgcHJvcHMsIHRoaXMuZXF1YWxpdHlGdW5jcyksIGFueUNoYW5nZXMgPSBfYS5hbnlDaGFuZ2VzLCBjb21ib1Byb3BzID0gX2EuY29tYm9Qcm9wcztcbiAgICAgICAgdGhpcy5wcm9wcyA9IGNvbWJvUHJvcHM7XG4gICAgICAgIGlmIChhbnlDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihjb21ib1Byb3BzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB9O1xuICAgIC8vIGFmdGVyIGRlc3Ryb3kgaXMgY2FsbGVkLCB0aGlzIGNvbXBvbmVudCB3b24ndCBldmVyIGJlIHVzZWQgYWdhaW5cbiAgICBDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xufSgpKTtcbkNvbXBvbmVudC5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcyA9IHt9O1xuLypcblJldXNlcyBvbGQgdmFsdWVzIHdoZW4gZXF1YWwuIElmIGFueXRoaW5nIGlzIHVuZXF1YWwsIHJldHVybnMgbmV3UHJvcHMgYXMtaXMuXG5HcmVhdCBmb3IgUHVyZUNvbXBvbmVudCwgYnV0IHdvbid0IGJlIGZlYXNpYmxlIHdpdGggUmVhY3QsIHNvIGp1c3QgZWxpbWluYXRlIGFuZCB1c2UgUmVhY3QncyBET00gZGlmZmluZy5cbiovXG5mdW5jdGlvbiByZWN5Y2xlUHJvcHMob2xkUHJvcHMsIG5ld1Byb3BzLCBlcXVhbGl0eUZ1bmNzKSB7XG4gICAgdmFyIGNvbWJvUHJvcHMgPSB7fTsgLy8gc29tZSBvbGQsIHNvbWUgbmV3XG4gICAgdmFyIGFueUNoYW5nZXMgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRQcm9wcyAmJiAob2xkUHJvcHNba2V5XSA9PT0gbmV3UHJvcHNba2V5XSB8fFxuICAgICAgICAgICAgKGVxdWFsaXR5RnVuY3Nba2V5XSAmJiBlcXVhbGl0eUZ1bmNzW2tleV0ob2xkUHJvcHNba2V5XSwgbmV3UHJvcHNba2V5XSkpKSkge1xuICAgICAgICAgICAgLy8gZXF1YWwgdG8gb2xkPyB1c2Ugb2xkIHByb3BcbiAgICAgICAgICAgIGNvbWJvUHJvcHNba2V5XSA9IG9sZFByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21ib1Byb3BzW2tleV0gPSBuZXdQcm9wc1trZXldO1xuICAgICAgICAgICAgYW55Q2hhbmdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBuZXdQcm9wcykpIHtcbiAgICAgICAgICAgIGFueUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYW55Q2hhbmdlczogYW55Q2hhbmdlcywgY29tYm9Qcm9wczogY29tYm9Qcm9wcyB9O1xufVxuXG4vKlxuUFVSUE9TRVM6XG4tIGhvb2sgdXAgdG8gZmcsIGZpbGwsIGFuZCBtaXJyb3IgcmVuZGVyZXJzXG4tIGludGVyZmFjZSBmb3IgZHJhZ2dpbmcgYW5kIGhpdHNcbiovXG52YXIgRGF0ZUNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF0ZUNvbXBvbmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXRlQ29tcG9uZW50KGNvbnRleHQsIGVsLCBpc1ZpZXcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCwgaXNWaWV3KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgLy8gVE9ETzogV0hBVCBBQk9VVCAoc291cmNlU2VnICYmIHNvdXJjZVNlZy5jb21wb25lbnQuZG9lc0RyYWdNaXJyb3IpXG4gICAgLy9cbiAgICAvLyBFdmVudCBEcmFnLW4tRHJvcCBSZW5kZXJpbmcgKGZvciBib3RoIGV2ZW50cyBhbmQgZXh0ZXJuYWwgZWxlbWVudHMpXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLypcbiAgICByZW5kZXJFdmVudERyYWdTZWdzKHN0YXRlOiBFdmVudFNlZ1VpSW50ZXJhY3Rpb25TdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIGxldCB7IGlzRXZlbnQsIHNlZ3MsIHNvdXJjZVNlZyB9ID0gc3RhdGVcbiAgXG4gICAgICAgIGlmICh0aGlzLmV2ZW50UmVuZGVyZXIpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50UmVuZGVyZXIuaGlkZUJ5SGFzaChzdGF0ZS5hZmZlY3RlZEluc3RhbmNlcylcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgc29tZXRoaW5nIHRoYXQgaXMgY29uc2lkZXJlZCBhbiBldmVudCB3aXRoIHJlYWwgZXZlbnQgZGF0YSxcbiAgICAgICAgLy8gYW5kIHRoaXMgY29tcG9uZW50IGxpa2VzIHRvIGRvIGRyYWcgbWlycm9ycyBPUiB0aGUgY29tcG9uZW50IHdoZXJlIHRoZSBzZWcgY2FtZSBmcm9tXG4gICAgICAgIC8vIGxpa2VzIHRvIGRvIGRyYWcgbWlycm9ycywgdGhlbiByZW5kZXIgYSBkcmFnIG1pcnJvci5cbiAgICAgICAgaWYgKGlzRXZlbnQgJiYgKHRoaXMuZG9lc0RyYWdNaXJyb3IgfHwgc291cmNlU2VnICYmIHNvdXJjZVNlZy5jb21wb25lbnQuZG9lc0RyYWdNaXJyb3IpKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWlycm9yUmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIucmVuZGVyU2VncyhzZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZyB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gaWYgaXQgd291bGQgYmUgaW1wb3NzaWJsZSB0byByZW5kZXIgYSBkcmFnIG1pcnJvciBPUiB0aGlzIGNvbXBvbmVudCBsaWtlcyB0byByZW5kZXJcbiAgICAgICAgLy8gaGlnaGxpZ2h0cywgdGhlbiByZW5kZXIgYSBoaWdobGlnaHQuXG4gICAgICAgIGlmICghaXNFdmVudCB8fCB0aGlzLmRvZXNEcmFnSGlnaGxpZ2h0KSB7XG4gICAgICAgICAgaWYgKHRoaXMuZmlsbFJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGxSZW5kZXJlci5yZW5kZXJTZWdzKCdoaWdobGlnaHQnLCBzZWdzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAqL1xuICAgIC8vIEhpdCBTeXN0ZW1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmJ1aWxkUG9zaXRpb25DYWNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wLCBlbFdpZHRoLCBlbEhlaWdodCkge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhpcyBzaG91bGQgYmUgYWJzdHJhY3RcbiAgICB9O1xuICAgIC8vIFZhbGlkYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzSW50ZXJhY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzLmluc3RhbmNlcztcbiAgICAgICAgaWYgKGRhdGVQcm9maWxlKSB7IC8vIEhBQ0sgZm9yIERheVRpbGVcbiAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zUmFuZ2UoZGF0ZVByb2ZpbGUudmFsaWRSYW5nZSwgaW5zdGFuY2VzW2luc3RhbmNlSWRdLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0ludGVyYWN0aW9uVmFsaWQoaW50ZXJhY3Rpb24sIGNhbGVuZGFyKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzRGF0ZVNlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgIGlmIChkYXRlUHJvZmlsZSAmJiAvLyBIQUNLIGZvciBEYXlUaWxlXG4gICAgICAgICAgICAhcmFuZ2VDb250YWluc1JhbmdlKGRhdGVQcm9maWxlLnZhbGlkUmFuZ2UsIHNlbGVjdGlvbi5yYW5nZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNEYXRlU2VsZWN0aW9uVmFsaWQoc2VsZWN0aW9uLCB0aGlzLmNhbGVuZGFyKTtcbiAgICB9O1xuICAgIC8vIFRyaWdnZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFRPRE86IG1vdmUgdG8gQ2FsZW5kYXJcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5wdWJsaWNseVRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICByZXR1cm4gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKG5hbWUsIGFyZ3MpO1xuICAgIH07XG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICByZXR1cm4gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcobmFtZSwgYXJncyk7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5oYXNQdWJsaWNIYW5kbGVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIHJldHVybiBjYWxlbmRhci5oYXNQdWJsaWNIYW5kbGVycyhuYW1lKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLnRyaWdnZXJSZW5kZXJlZFNlZ3MgPSBmdW5jdGlvbiAoc2VncywgaXNNaXJyb3JzKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIGlmICh0aGlzLmhhc1B1YmxpY0hhbmRsZXJzKCdldmVudFBvc2l0aW9uZWQnKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlckFmdGVyU2l6aW5nKCdldmVudFBvc2l0aW9uZWQnLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNaXJyb3I6IGlzTWlycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlZy5pc1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IHNlZy5pc0VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWcuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB0aGlzIC8vIHNhZmUgdG8gY2FzdCBiZWNhdXNlIHRoaXMgbWV0aG9kIGlzIG9ubHkgY2FsbGVkIG9uIGNvbnRleHQudmlld1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWxlbmRhci5zdGF0ZS5sb2FkaW5nTGV2ZWwpIHsgLy8gYXZvaWQgaW5pdGlhbCBlbXB0eSBzdGF0ZSB3aGlsZSBwZW5kaW5nXG4gICAgICAgICAgICBjYWxlbmRhci5hZnRlclNpemluZ1RyaWdnZXJzLl9ldmVudHNQb3NpdGlvbmVkID0gW251bGxdOyAvLyBmaXJlIG9uY2VcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUudHJpZ2dlcldpbGxSZW1vdmVTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIGlzTWlycm9ycykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgICAgICBjYWxlbmRhci50cmlnZ2VyKCdldmVudEVsUmVtb3ZlJywgc2VnLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNQdWJsaWNIYW5kbGVycygnZXZlbnREZXN0cm95JykpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgc2Vnc18zID0gc2VnczsgX2EgPCBzZWdzXzMubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfM1tfYV07XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50RGVzdHJveScsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc2VnLmV2ZW50UmFuZ2UuZGVmLCBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHNlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHRoaXMgLy8gc2FmZSB0byBjYXN0IGJlY2F1c2UgdGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQgb24gY29udGV4dC52aWV3XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUG9pbnRlciBJbnRlcmFjdGlvbiBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuaXNWYWxpZFNlZ0Rvd25FbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gIXRoaXMucHJvcHMuZXZlbnREcmFnICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICF0aGlzLnByb3BzLmV2ZW50UmVzaXplICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICFlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1taXJyb3InKSAmJlxuICAgICAgICAgICAgKHRoaXMuaXNQb3BvdmVyKCkgfHwgIXRoaXMuaXNJblBvcG92ZXIoZWwpKTtcbiAgICAgICAgLy8gXmFib3ZlIGxpbmUgZW5zdXJlcyB3ZSBkb24ndCBkZXRlY3QgYSBzZWcgaW50ZXJhY3Rpb24gd2l0aGluIGEgbmVzdGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gaXQncyBhIEhBQ0sgYmVjYXVzZSBpdCBvbmx5IHN1cHBvcnRzIGEgcG9wb3ZlciBhcyB0aGUgbmVzdGVkIGNvbXBvbmVudC5cbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzVmFsaWREYXRlRG93bkVsID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBzZWdFbCA9IGVsZW1lbnRDbG9zZXN0KGVsLCB0aGlzLmZnU2VnU2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gKCFzZWdFbCB8fCBzZWdFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLW1pcnJvcicpKSAmJlxuICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnLmZjLW1vcmUnKSAmJiAvLyBhIFwibW9yZS4uXCIgbGlua1xuICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnYVtkYXRhLWdvdG9dJykgJiYgLy8gYSBjbGlja2FibGUgbmF2IGxpbmtcbiAgICAgICAgICAgICF0aGlzLmlzSW5Qb3BvdmVyKGVsKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzUG9wb3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy1wb3BvdmVyJyk7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc0luUG9wb3ZlciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1wb3BvdmVyJykpO1xuICAgIH07XG4gICAgcmV0dXJuIERhdGVDb21wb25lbnQ7XG59KENvbXBvbmVudCkpO1xuRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuZmdTZWdTZWxlY3RvciA9ICcuZmMtZXZlbnQtY29udGFpbmVyID4gKic7XG5EYXRlQ29tcG9uZW50LnByb3RvdHlwZS5iZ1NlZ1NlbGVjdG9yID0gJy5mYy1iZ2V2ZW50Om5vdCguZmMtbm9uYnVzaW5lc3MpJztcblxudmFyIHVpZCQxID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZVBsdWdpbihpbnB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBTdHJpbmcodWlkJDErKyksXG4gICAgICAgIGRlcHM6IGlucHV0LmRlcHMgfHwgW10sXG4gICAgICAgIHJlZHVjZXJzOiBpbnB1dC5yZWR1Y2VycyB8fCBbXSxcbiAgICAgICAgZXZlbnREZWZQYXJzZXJzOiBpbnB1dC5ldmVudERlZlBhcnNlcnMgfHwgW10sXG4gICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBpbnB1dC5pc0RyYWdnYWJsZVRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IGlucHV0LmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzIHx8IFtdLFxuICAgICAgICBldmVudERlZk11dGF0aW9uQXBwbGllcnM6IGlucHV0LmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyB8fCBbXSxcbiAgICAgICAgZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVyczogaW5wdXQuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogaW5wdXQuZGF0ZVBvaW50VHJhbnNmb3JtcyB8fCBbXSxcbiAgICAgICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBpbnB1dC5kYXRlU3BhblRyYW5zZm9ybXMgfHwgW10sXG4gICAgICAgIHZpZXdzOiBpbnB1dC52aWV3cyB8fCB7fSxcbiAgICAgICAgdmlld1Byb3BzVHJhbnNmb3JtZXJzOiBpbnB1dC52aWV3UHJvcHNUcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgIGlzUHJvcHNWYWxpZDogaW5wdXQuaXNQcm9wc1ZhbGlkIHx8IG51bGwsXG4gICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogaW5wdXQuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICBldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zOiBpbnB1dC5ldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICB2aWV3Q29udGFpbmVyTW9kaWZpZXJzOiBpbnB1dC52aWV3Q29udGFpbmVyTW9kaWZpZXJzIHx8IFtdLFxuICAgICAgICBldmVudERyb3BUcmFuc2Zvcm1lcnM6IGlucHV0LmV2ZW50RHJvcFRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBpbnB1dC5jb21wb25lbnRJbnRlcmFjdGlvbnMgfHwgW10sXG4gICAgICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBpbnB1dC5jYWxlbmRhckludGVyYWN0aW9ucyB8fCBbXSxcbiAgICAgICAgdGhlbWVDbGFzc2VzOiBpbnB1dC50aGVtZUNsYXNzZXMgfHwge30sXG4gICAgICAgIGV2ZW50U291cmNlRGVmczogaW5wdXQuZXZlbnRTb3VyY2VEZWZzIHx8IFtdLFxuICAgICAgICBjbWRGb3JtYXR0ZXI6IGlucHV0LmNtZEZvcm1hdHRlcixcbiAgICAgICAgcmVjdXJyaW5nVHlwZXM6IGlucHV0LnJlY3VycmluZ1R5cGVzIHx8IFtdLFxuICAgICAgICBuYW1lZFRpbWVab25lZEltcGw6IGlucHV0Lm5hbWVkVGltZVpvbmVkSW1wbCxcbiAgICAgICAgZGVmYXVsdFZpZXc6IGlucHV0LmRlZmF1bHRWaWV3IHx8ICcnLFxuICAgICAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBpbnB1dC5lbGVtZW50RHJhZ2dpbmdJbXBsLFxuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogaW5wdXQub3B0aW9uQ2hhbmdlSGFuZGxlcnMgfHwge31cbiAgICB9O1xufVxudmFyIFBsdWdpblN5c3RlbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQbHVnaW5TeXN0ZW0oKSB7XG4gICAgICAgIHRoaXMuaG9va3MgPSB7XG4gICAgICAgICAgICByZWR1Y2VyczogW10sXG4gICAgICAgICAgICBldmVudERlZlBhcnNlcnM6IFtdLFxuICAgICAgICAgICAgaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBbXSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICBkYXRlU3BhblRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgdmlld3M6IHt9LFxuICAgICAgICAgICAgdmlld1Byb3BzVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogbnVsbCxcbiAgICAgICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICBldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgIHZpZXdDb250YWluZXJNb2RpZmllcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgIGNvbXBvbmVudEludGVyYWN0aW9uczogW10sXG4gICAgICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogW10sXG4gICAgICAgICAgICB0aGVtZUNsYXNzZXM6IHt9LFxuICAgICAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBbXSxcbiAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgICAgIHJlY3VycmluZ1R5cGVzOiBbXSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVkSW1wbDogbnVsbCxcbiAgICAgICAgICAgIGRlZmF1bHRWaWV3OiAnJyxcbiAgICAgICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczoge31cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRlZEhhc2ggPSB7fTtcbiAgICB9XG4gICAgUGx1Z2luU3lzdGVtLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGRlZEhhc2hbcGx1Z2luLmlkXSkge1xuICAgICAgICAgICAgdGhpcy5hZGRlZEhhc2hbcGx1Z2luLmlkXSA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcGx1Z2luLmRlcHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlcCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChkZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob29rcyA9IGNvbWJpbmVIb29rcyh0aGlzLmhvb2tzLCBwbHVnaW4pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUGx1Z2luU3lzdGVtO1xufSgpKTtcbmZ1bmN0aW9uIGNvbWJpbmVIb29rcyhob29rczAsIGhvb2tzMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlZHVjZXJzOiBob29rczAucmVkdWNlcnMuY29uY2F0KGhvb2tzMS5yZWR1Y2VycyksXG4gICAgICAgIGV2ZW50RGVmUGFyc2VyczogaG9va3MwLmV2ZW50RGVmUGFyc2Vycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmUGFyc2VycyksXG4gICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBob29rczAuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMuY29uY2F0KGhvb2tzMS5pc0RyYWdnYWJsZVRyYW5zZm9ybWVycyksXG4gICAgICAgIGV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzOiBob29rczAuZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMuY29uY2F0KGhvb2tzMS5ldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VycyksXG4gICAgICAgIGV2ZW50RGVmTXV0YXRpb25BcHBsaWVyczogaG9va3MwLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyksXG4gICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IGhvb2tzMC5kYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyksXG4gICAgICAgIGRhdGVQb2ludFRyYW5zZm9ybXM6IGhvb2tzMC5kYXRlUG9pbnRUcmFuc2Zvcm1zLmNvbmNhdChob29rczEuZGF0ZVBvaW50VHJhbnNmb3JtcyksXG4gICAgICAgIGRhdGVTcGFuVHJhbnNmb3JtczogaG9va3MwLmRhdGVTcGFuVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmRhdGVTcGFuVHJhbnNmb3JtcyksXG4gICAgICAgIHZpZXdzOiBfX2Fzc2lnbih7fSwgaG9va3MwLnZpZXdzLCBob29rczEudmlld3MpLFxuICAgICAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IGhvb2tzMC52aWV3UHJvcHNUcmFuc2Zvcm1lcnMuY29uY2F0KGhvb2tzMS52aWV3UHJvcHNUcmFuc2Zvcm1lcnMpLFxuICAgICAgICBpc1Byb3BzVmFsaWQ6IGhvb2tzMS5pc1Byb3BzVmFsaWQgfHwgaG9va3MwLmlzUHJvcHNWYWxpZCxcbiAgICAgICAgZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zOiBob29rczAuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zLmNvbmNhdChob29rczEuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zKSxcbiAgICAgICAgZXZlbnRSZXNpemVKb2luVHJhbnNmb3JtczogaG9va3MwLmV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXMuY29uY2F0KGhvb2tzMS5ldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zKSxcbiAgICAgICAgdmlld0NvbnRhaW5lck1vZGlmaWVyczogaG9va3MwLnZpZXdDb250YWluZXJNb2RpZmllcnMuY29uY2F0KGhvb2tzMS52aWV3Q29udGFpbmVyTW9kaWZpZXJzKSxcbiAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBob29rczAuZXZlbnREcm9wVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZXZlbnREcm9wVHJhbnNmb3JtZXJzKSxcbiAgICAgICAgY2FsZW5kYXJJbnRlcmFjdGlvbnM6IGhvb2tzMC5jYWxlbmRhckludGVyYWN0aW9ucy5jb25jYXQoaG9va3MxLmNhbGVuZGFySW50ZXJhY3Rpb25zKSxcbiAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBob29rczAuY29tcG9uZW50SW50ZXJhY3Rpb25zLmNvbmNhdChob29rczEuY29tcG9uZW50SW50ZXJhY3Rpb25zKSxcbiAgICAgICAgdGhlbWVDbGFzc2VzOiBfX2Fzc2lnbih7fSwgaG9va3MwLnRoZW1lQ2xhc3NlcywgaG9va3MxLnRoZW1lQ2xhc3NlcyksXG4gICAgICAgIGV2ZW50U291cmNlRGVmczogaG9va3MwLmV2ZW50U291cmNlRGVmcy5jb25jYXQoaG9va3MxLmV2ZW50U291cmNlRGVmcyksXG4gICAgICAgIGNtZEZvcm1hdHRlcjogaG9va3MxLmNtZEZvcm1hdHRlciB8fCBob29rczAuY21kRm9ybWF0dGVyLFxuICAgICAgICByZWN1cnJpbmdUeXBlczogaG9va3MwLnJlY3VycmluZ1R5cGVzLmNvbmNhdChob29rczEucmVjdXJyaW5nVHlwZXMpLFxuICAgICAgICBuYW1lZFRpbWVab25lZEltcGw6IGhvb2tzMS5uYW1lZFRpbWVab25lZEltcGwgfHwgaG9va3MwLm5hbWVkVGltZVpvbmVkSW1wbCxcbiAgICAgICAgZGVmYXVsdFZpZXc6IGhvb2tzMC5kZWZhdWx0VmlldyB8fCBob29rczEuZGVmYXVsdFZpZXcsXG4gICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IGhvb2tzMC5lbGVtZW50RHJhZ2dpbmdJbXBsIHx8IGhvb2tzMS5lbGVtZW50RHJhZ2dpbmdJbXBsLFxuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogX19hc3NpZ24oe30sIGhvb2tzMC5vcHRpb25DaGFuZ2VIYW5kbGVycywgaG9va3MxLm9wdGlvbkNoYW5nZUhhbmRsZXJzKVxuICAgIH07XG59XG5cbnZhciBldmVudFNvdXJjZURlZiA9IHtcbiAgICBpZ25vcmVSYW5nZTogdHJ1ZSxcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmF3KSkgeyAvLyBzaG9ydCBmb3JtXG4gICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmF3LmV2ZW50cykpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcuZXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MpIHtcbiAgICAgICAgc3VjY2Vzcyh7XG4gICAgICAgICAgICByYXdFdmVudHM6IGFyZy5ldmVudFNvdXJjZS5tZXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG52YXIgQXJyYXlFdmVudFNvdXJjZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZXZlbnRTb3VyY2VEZWZzOiBbZXZlbnRTb3VyY2VEZWZdXG59KTtcblxudmFyIGV2ZW50U291cmNlRGVmJDEgPSB7XG4gICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnZnVuY3Rpb24nKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdy5ldmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcuZXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBhcmcuY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgdmFyIGZ1bmMgPSBhcmcuZXZlbnRTb3VyY2UubWV0YTtcbiAgICAgICAgdW5wcm9taXNpZnkoZnVuYy5iaW5kKG51bGwsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgIHN0YXJ0U3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kU3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgIHRpbWVab25lOiBkYXRlRW52LnRpbWVab25lXG4gICAgICAgIH0pLCBmdW5jdGlvbiAocmF3RXZlbnRzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKHsgcmF3RXZlbnRzOiByYXdFdmVudHMgfSk7IC8vIG5lZWRzIGFuIG9iamVjdCByZXNwb25zZVxuICAgICAgICB9LCBmYWlsdXJlIC8vIHNlbmQgZXJyb3JPYmogZGlyZWN0bHkgdG8gZmFpbHVyZSBjYWxsYmFja1xuICAgICAgICApO1xuICAgIH1cbn07XG52YXIgRnVuY0V2ZW50U291cmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQxXVxufSk7XG5cbmZ1bmN0aW9uIHJlcXVlc3RKc29uKG1ldGhvZCwgdXJsLCBwYXJhbXMsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgbWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIGJvZHkgPSBudWxsO1xuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIHVybCA9IGluamVjdFF1ZXJ5U3RyaW5nUGFyYW1zKHVybCwgcGFyYW1zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSBlbmNvZGVQYXJhbXMocGFyYW1zKTtcbiAgICB9XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICBpZiAobWV0aG9kICE9PSAnR0VUJykge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIH1cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygnRmFpbHVyZSBwYXJzaW5nIEpTT04nLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCdSZXF1ZXN0IGZhaWxlZCcsIHhocik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmYWlsdXJlQ2FsbGJhY2soJ1JlcXVlc3QgZmFpbGVkJywgeGhyKTtcbiAgICB9O1xuICAgIHhoci5zZW5kKGJvZHkpO1xufVxuZnVuY3Rpb24gaW5qZWN0UXVlcnlTdHJpbmdQYXJhbXModXJsLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsICtcbiAgICAgICAgKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArXG4gICAgICAgIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xufVxuZnVuY3Rpb24gZW5jb2RlUGFyYW1zKHBhcmFtcykge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xufVxuXG52YXIgZXZlbnRTb3VyY2VEZWYkMiA9IHtcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgIHJhdyA9IHsgdXJsOiByYXcgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcmF3IHx8IHR5cGVvZiByYXcgIT09ICdvYmplY3QnIHx8ICFyYXcudXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJsOiByYXcudXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAocmF3Lm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgIGV4dHJhUGFyYW1zOiByYXcuZXh0cmFQYXJhbXMsXG4gICAgICAgICAgICBzdGFydFBhcmFtOiByYXcuc3RhcnRQYXJhbSxcbiAgICAgICAgICAgIGVuZFBhcmFtOiByYXcuZW5kUGFyYW0sXG4gICAgICAgICAgICB0aW1lWm9uZVBhcmFtOiByYXcudGltZVpvbmVQYXJhbVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgdmFyIG1ldGEgPSBhcmcuZXZlbnRTb3VyY2UubWV0YTtcbiAgICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgYXJnLnJhbmdlLCBhcmcuY2FsZW5kYXIpO1xuICAgICAgICByZXF1ZXN0SnNvbihtZXRhLm1ldGhvZCwgbWV0YS51cmwsIHJlcXVlc3RQYXJhbXMsIGZ1bmN0aW9uIChyYXdFdmVudHMsIHhocikge1xuICAgICAgICAgICAgc3VjY2Vzcyh7IHJhd0V2ZW50czogcmF3RXZlbnRzLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yTWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICBmYWlsdXJlKHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbnZhciBKc29uRmVlZEV2ZW50U291cmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQyXVxufSk7XG5mdW5jdGlvbiBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgcmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGRhdGVFbnYgPSBjYWxlbmRhci5kYXRlRW52O1xuICAgIHZhciBzdGFydFBhcmFtO1xuICAgIHZhciBlbmRQYXJhbTtcbiAgICB2YXIgdGltZVpvbmVQYXJhbTtcbiAgICB2YXIgY3VzdG9tUmVxdWVzdFBhcmFtcztcbiAgICB2YXIgcGFyYW1zID0ge307XG4gICAgc3RhcnRQYXJhbSA9IG1ldGEuc3RhcnRQYXJhbTtcbiAgICBpZiAoc3RhcnRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0UGFyYW0gPSBjYWxlbmRhci5vcHQoJ3N0YXJ0UGFyYW0nKTtcbiAgICB9XG4gICAgZW5kUGFyYW0gPSBtZXRhLmVuZFBhcmFtO1xuICAgIGlmIChlbmRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgIGVuZFBhcmFtID0gY2FsZW5kYXIub3B0KCdlbmRQYXJhbScpO1xuICAgIH1cbiAgICB0aW1lWm9uZVBhcmFtID0gbWV0YS50aW1lWm9uZVBhcmFtO1xuICAgIGlmICh0aW1lWm9uZVBhcmFtID09IG51bGwpIHtcbiAgICAgICAgdGltZVpvbmVQYXJhbSA9IGNhbGVuZGFyLm9wdCgndGltZVpvbmVQYXJhbScpO1xuICAgIH1cbiAgICAvLyByZXRyaWV2ZSBhbnkgb3V0Ym91bmQgR0VUL1BPU1QgZGF0YSBmcm9tIHRoZSBvcHRpb25zXG4gICAgaWYgKHR5cGVvZiBtZXRhLmV4dHJhUGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHN1cHBsaWVkIGFzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEga2V5L3ZhbHVlIG9iamVjdFxuICAgICAgICBjdXN0b21SZXF1ZXN0UGFyYW1zID0gbWV0YS5leHRyYVBhcmFtcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gcHJvYmFibHkgc3VwcGxpZWQgYXMgYSBzdHJhaWdodCBrZXkvdmFsdWUgb2JqZWN0XG4gICAgICAgIGN1c3RvbVJlcXVlc3RQYXJhbXMgPSBtZXRhLmV4dHJhUGFyYW1zIHx8IHt9O1xuICAgIH1cbiAgICBfX2Fzc2lnbihwYXJhbXMsIGN1c3RvbVJlcXVlc3RQYXJhbXMpO1xuICAgIHBhcmFtc1tzdGFydFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLnN0YXJ0KTtcbiAgICBwYXJhbXNbZW5kUGFyYW1dID0gZGF0ZUVudi5mb3JtYXRJc28ocmFuZ2UuZW5kKTtcbiAgICBpZiAoZGF0ZUVudi50aW1lWm9uZSAhPT0gJ2xvY2FsJykge1xuICAgICAgICBwYXJhbXNbdGltZVpvbmVQYXJhbV0gPSBkYXRlRW52LnRpbWVab25lO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuXG52YXIgcmVjdXJyaW5nID0ge1xuICAgIHBhcnNlOiBmdW5jdGlvbiAocmF3RXZlbnQsIGxlZnRvdmVyUHJvcHMsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIGNyZWF0ZU1hcmtlciA9IGRhdGVFbnYuY3JlYXRlTWFya2VyLmJpbmQoZGF0ZUVudik7XG4gICAgICAgIHZhciBwcm9jZXNzb3JzID0ge1xuICAgICAgICAgICAgZGF5c09mV2VlazogbnVsbCxcbiAgICAgICAgICAgIHN0YXJ0VGltZTogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgICAgICBlbmRUaW1lOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0UmVjdXI6IGNyZWF0ZU1hcmtlcixcbiAgICAgICAgICAgIGVuZFJlY3VyOiBjcmVhdGVNYXJrZXJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByb3BzID0gcmVmaW5lUHJvcHMocmF3RXZlbnQsIHByb2Nlc3NvcnMsIHt9LCBsZWZ0b3ZlclByb3BzKTtcbiAgICAgICAgdmFyIGFueVZhbGlkID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbnlWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueVZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgaWYgKCdkdXJhdGlvbicgaW4gbGVmdG92ZXJQcm9wcykge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24obGVmdG92ZXJQcm9wcy5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxlZnRvdmVyUHJvcHMuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uICYmIHByb3BzLnN0YXJ0VGltZSAmJiBwcm9wcy5lbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBzdWJ0cmFjdER1cmF0aW9ucyhwcm9wcy5lbmRUaW1lLCBwcm9wcy5zdGFydFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhbGxEYXlHdWVzczogQm9vbGVhbighcHJvcHMuc3RhcnRUaW1lICYmICFwcm9wcy5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgdHlwZURhdGE6IHByb3BzIC8vIGRvZXNuJ3QgbmVlZCBlbmRUaW1lIGFueW1vcmUgYnV0IG9oIHdlbGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uICh0eXBlRGF0YSwgZnJhbWluZ1JhbmdlLCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBjbGlwcGVkRnJhbWluZ1JhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKGZyYW1pbmdSYW5nZSwgeyBzdGFydDogdHlwZURhdGEuc3RhcnRSZWN1ciwgZW5kOiB0eXBlRGF0YS5lbmRSZWN1ciB9KTtcbiAgICAgICAgaWYgKGNsaXBwZWRGcmFtaW5nUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBhbmRSYW5nZXModHlwZURhdGEuZGF5c09mV2VlaywgdHlwZURhdGEuc3RhcnRUaW1lLCBjbGlwcGVkRnJhbWluZ1JhbmdlLCBkYXRlRW52KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG52YXIgU2ltcGxlUmVjdXJyZW5jZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgcmVjdXJyaW5nVHlwZXM6IFtyZWN1cnJpbmddXG59KTtcbmZ1bmN0aW9uIGV4cGFuZFJhbmdlcyhkYXlzT2ZXZWVrLCBzdGFydFRpbWUsIGZyYW1pbmdSYW5nZSwgZGF0ZUVudikge1xuICAgIHZhciBkb3dIYXNoID0gZGF5c09mV2VlayA/IGFycmF5VG9IYXNoKGRheXNPZldlZWspIDogbnVsbDtcbiAgICB2YXIgZGF5TWFya2VyID0gc3RhcnRPZkRheShmcmFtaW5nUmFuZ2Uuc3RhcnQpO1xuICAgIHZhciBlbmRNYXJrZXIgPSBmcmFtaW5nUmFuZ2UuZW5kO1xuICAgIHZhciBpbnN0YW5jZVN0YXJ0cyA9IFtdO1xuICAgIHdoaWxlIChkYXlNYXJrZXIgPCBlbmRNYXJrZXIpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlU3RhcnQgXG4gICAgICAgIC8vIGlmIGV2ZXJ5ZGF5LCBvciB0aGlzIHBhcnRpY3VsYXIgZGF5LW9mLXdlZWtcbiAgICAgICAgPSB2b2lkIDA7XG4gICAgICAgIC8vIGlmIGV2ZXJ5ZGF5LCBvciB0aGlzIHBhcnRpY3VsYXIgZGF5LW9mLXdlZWtcbiAgICAgICAgaWYgKCFkb3dIYXNoIHx8IGRvd0hhc2hbZGF5TWFya2VyLmdldFVUQ0RheSgpXSkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhcnQgPSBkYXRlRW52LmFkZChkYXlNYXJrZXIsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXJ0ID0gZGF5TWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zdGFuY2VTdGFydHMucHVzaChpbnN0YW5jZVN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBkYXlNYXJrZXIgPSBhZGREYXlzKGRheU1hcmtlciwgMSk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZVN0YXJ0cztcbn1cblxudmFyIERlZmF1bHRPcHRpb25DaGFuZ2VIYW5kbGVycyA9IGNyZWF0ZVBsdWdpbih7XG4gICAgb3B0aW9uQ2hhbmdlSGFuZGxlcnM6IHtcbiAgICAgICAgZXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzLCBjYWxlbmRhciwgZGVlcEVxdWFsKSB7XG4gICAgICAgICAgICBoYW5kbGVFdmVudFNvdXJjZXMoW2V2ZW50c10sIGNhbGVuZGFyLCBkZWVwRXF1YWwpO1xuICAgICAgICB9LFxuICAgICAgICBldmVudFNvdXJjZXM6IGhhbmRsZUV2ZW50U291cmNlcyxcbiAgICAgICAgcGx1Z2luczogaGFuZGxlUGx1Z2luc1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gaGFuZGxlRXZlbnRTb3VyY2VzKGlucHV0cywgY2FsZW5kYXIsIGRlZXBFcXVhbCkge1xuICAgIHZhciB1bmZvdW5kU291cmNlcyA9IGhhc2hWYWx1ZXNUb0FycmF5KGNhbGVuZGFyLnN0YXRlLmV2ZW50U291cmNlcyk7XG4gICAgdmFyIG5ld0lucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgaW5wdXRzXzEgPSBpbnB1dHM7IF9pIDwgaW5wdXRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGlucHV0c18xW19pXTtcbiAgICAgICAgdmFyIGlucHV0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmZvdW5kU291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCh1bmZvdW5kU291cmNlc1tpXS5fcmF3LCBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICB1bmZvdW5kU291cmNlcy5zcGxpY2UoaSwgMSk7IC8vIGRlbGV0ZVxuICAgICAgICAgICAgICAgIGlucHV0Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaW5wdXRGb3VuZCkge1xuICAgICAgICAgICAgbmV3SW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9hID0gMCwgdW5mb3VuZFNvdXJjZXNfMSA9IHVuZm91bmRTb3VyY2VzOyBfYSA8IHVuZm91bmRTb3VyY2VzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciB1bmZvdW5kU291cmNlID0gdW5mb3VuZFNvdXJjZXNfMVtfYV07XG4gICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRfU09VUkNFJyxcbiAgICAgICAgICAgIHNvdXJjZUlkOiB1bmZvdW5kU291cmNlLnNvdXJjZUlkXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBfYiA9IDAsIG5ld0lucHV0c18xID0gbmV3SW5wdXRzOyBfYiA8IG5ld0lucHV0c18xLmxlbmd0aDsgX2IrKykge1xuICAgICAgICB2YXIgbmV3SW5wdXQgPSBuZXdJbnB1dHNfMVtfYl07XG4gICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50U291cmNlKG5ld0lucHV0KTtcbiAgICB9XG59XG4vLyBzaG9ydGNvbWluZzogd29uJ3QgcmVtb3ZlIHBsdWdpbnNcbmZ1bmN0aW9uIGhhbmRsZVBsdWdpbnMoaW5wdXRzLCBjYWxlbmRhcikge1xuICAgIGNhbGVuZGFyLmFkZFBsdWdpbklucHV0cyhpbnB1dHMpOyAvLyB3aWxsIGdyYWNlZnVsbHkgaGFuZGxlIGR1cGxpY2F0ZXNcbn1cblxudmFyIGNvbmZpZyA9IHt9OyAvLyBUT0RPOiBtYWtlIHRoZXNlIG9wdGlvbnNcbnZhciBnbG9iYWxEZWZhdWx0cyA9IHtcbiAgICBkZWZhdWx0UmFuZ2VTZXBhcmF0b3I6ICcgLSAnLFxuICAgIHRpdGxlUmFuZ2VTZXBhcmF0b3I6ICcgXFx1MjAxMyAnLFxuICAgIGRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb246ICcwMTowMDowMCcsXG4gICAgZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb246IHsgZGF5OiAxIH0sXG4gICAgZm9yY2VFdmVudER1cmF0aW9uOiBmYWxzZSxcbiAgICBuZXh0RGF5VGhyZXNob2xkOiAnMDA6MDA6MDAnLFxuICAgIC8vIGRpc3BsYXlcbiAgICBjb2x1bW5IZWFkZXI6IHRydWUsXG4gICAgZGVmYXVsdFZpZXc6ICcnLFxuICAgIGFzcGVjdFJhdGlvOiAxLjM1LFxuICAgIGhlYWRlcjoge1xuICAgICAgICBsZWZ0OiAndGl0bGUnLFxuICAgICAgICBjZW50ZXI6ICcnLFxuICAgICAgICByaWdodDogJ3RvZGF5IHByZXYsbmV4dCdcbiAgICB9LFxuICAgIHdlZWtlbmRzOiB0cnVlLFxuICAgIHdlZWtOdW1iZXJzOiBmYWxzZSxcbiAgICB3ZWVrTnVtYmVyQ2FsY3VsYXRpb246ICdsb2NhbCcsXG4gICAgZWRpdGFibGU6IGZhbHNlLFxuICAgIC8vIG5vd0luZGljYXRvcjogZmFsc2UsXG4gICAgc2Nyb2xsVGltZTogJzA2OjAwOjAwJyxcbiAgICBtaW5UaW1lOiAnMDA6MDA6MDAnLFxuICAgIG1heFRpbWU6ICcyNDowMDowMCcsXG4gICAgc2hvd05vbkN1cnJlbnREYXRlczogdHJ1ZSxcbiAgICAvLyBldmVudCBhamF4XG4gICAgbGF6eUZldGNoaW5nOiB0cnVlLFxuICAgIHN0YXJ0UGFyYW06ICdzdGFydCcsXG4gICAgZW5kUGFyYW06ICdlbmQnLFxuICAgIHRpbWVab25lUGFyYW06ICd0aW1lWm9uZScsXG4gICAgdGltZVpvbmU6ICdsb2NhbCcsXG4gICAgLy8gYWxsRGF5RGVmYXVsdDogdW5kZWZpbmVkLFxuICAgIC8vIGxvY2FsZVxuICAgIGxvY2FsZXM6IFtdLFxuICAgIGxvY2FsZTogJycsXG4gICAgLy8gZGlyOiB3aWxsIGdldCB0aGlzIGZyb20gdGhlIGRlZmF1bHQgbG9jYWxlXG4gICAgLy8gYnV0dG9uSWNvbnM6IG51bGwsXG4gICAgLy8gYWxsb3dzIHNldHRpbmcgYSBtaW4taGVpZ2h0IHRvIHRoZSBldmVudCBzZWdtZW50IHRvIHByZXZlbnQgc2hvcnQgZXZlbnRzIG92ZXJsYXBwaW5nIGVhY2ggb3RoZXJcbiAgICB0aW1lR3JpZEV2ZW50TWluSGVpZ2h0OiAwLFxuICAgIHRoZW1lU3lzdGVtOiAnc3RhbmRhcmQnLFxuICAgIC8vIGV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0OiBmYWxzZSxcbiAgICBkcmFnUmV2ZXJ0RHVyYXRpb246IDUwMCxcbiAgICBkcmFnU2Nyb2xsOiB0cnVlLFxuICAgIGFsbERheU1haW50YWluRHVyYXRpb246IGZhbHNlLFxuICAgIC8vIHNlbGVjdGFibGU6IGZhbHNlLFxuICAgIHVuc2VsZWN0QXV0bzogdHJ1ZSxcbiAgICAvLyBzZWxlY3RNaW5EaXN0YW5jZTogMCxcbiAgICBkcm9wQWNjZXB0OiAnKicsXG4gICAgZXZlbnRPcmRlcjogJ3N0YXJ0LC1kdXJhdGlvbixhbGxEYXksdGl0bGUnLFxuICAgIC8vIF4gaWYgc3RhcnQgdGllLCBsb25nZXIgZXZlbnRzIGdvIGJlZm9yZSBzaG9ydGVyLiBmaW5hbCB0aWUtYnJlYWtlciBpcyB0aXRsZSB0ZXh0XG4gICAgLy8gcmVyZW5kZXJEZWxheTogbnVsbCxcbiAgICBldmVudExpbWl0OiBmYWxzZSxcbiAgICBldmVudExpbWl0Q2xpY2s6ICdwb3BvdmVyJyxcbiAgICBkYXlQb3BvdmVyRm9ybWF0OiB7IG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnLCB5ZWFyOiAnbnVtZXJpYycgfSxcbiAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgd2luZG93UmVzaXplRGVsYXk6IDEwMCxcbiAgICBsb25nUHJlc3NEZWxheTogMTAwMCxcbiAgICBldmVudERyYWdNaW5EaXN0YW5jZTogNSAvLyBvbmx5IGFwcGxpZXMgdG8gbW91c2Vcbn07XG52YXIgcnRsRGVmYXVsdHMgPSB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIGxlZnQ6ICduZXh0LHByZXYgdG9kYXknLFxuICAgICAgICBjZW50ZXI6ICcnLFxuICAgICAgICByaWdodDogJ3RpdGxlJ1xuICAgIH0sXG4gICAgYnV0dG9uSWNvbnM6IHtcbiAgICAgICAgLy8gVE9ETzogbWFrZSBSVEwgc3VwcG9ydCB0aGUgcmVzcG9uaWJpbGl0eSBvZiB0aGUgdGhlbWVcbiAgICAgICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1yaWdodCcsXG4gICAgICAgIG5leHQ6ICdmYy1pY29uLWNoZXZyb24tbGVmdCcsXG4gICAgICAgIHByZXZZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1yaWdodCcsXG4gICAgICAgIG5leHRZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1sZWZ0J1xuICAgIH1cbn07XG52YXIgY29tcGxleE9wdGlvbnMgPSBbXG4gICAgJ2hlYWRlcicsXG4gICAgJ2Zvb3RlcicsXG4gICAgJ2J1dHRvblRleHQnLFxuICAgICdidXR0b25JY29ucydcbl07XG4vLyBNZXJnZXMgYW4gYXJyYXkgb2Ygb3B0aW9uIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3RcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhvcHRpb25PYmpzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMob3B0aW9uT2JqcywgY29tcGxleE9wdGlvbnMpO1xufVxuLy8gVE9ETzogbW92ZSB0aGlzIHN0dWZmIHRvIGEgXCJwbHVnaW5cIi1yZWxhdGVkIGZpbGUuLi5cbnZhciBJTlRFUk5BTF9QTFVHSU5TID0gW1xuICAgIEFycmF5RXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgRnVuY0V2ZW50U291cmNlUGx1Z2luLFxuICAgIEpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgU2ltcGxlUmVjdXJyZW5jZVBsdWdpbixcbiAgICBEZWZhdWx0T3B0aW9uQ2hhbmdlSGFuZGxlcnNcbl07XG5mdW5jdGlvbiByZWZpbmVQbHVnaW5EZWZzKHBsdWdpbklucHV0cykge1xuICAgIHZhciBwbHVnaW5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBwbHVnaW5JbnB1dHNfMSA9IHBsdWdpbklucHV0czsgX2kgPCBwbHVnaW5JbnB1dHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHBsdWdpbklucHV0ID0gcGx1Z2luSW5wdXRzXzFbX2ldO1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbklucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGdsb2JhbE5hbWUgPSAnRnVsbENhbGVuZGFyJyArIGNhcGl0YWxpc2VGaXJzdExldHRlcihwbHVnaW5JbnB1dCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvd1tnbG9iYWxOYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGx1Z2luIGZpbGUgbm90IGxvYWRlZCBmb3IgJyArIHBsdWdpbklucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCh3aW5kb3dbZ2xvYmFsTmFtZV0uZGVmYXVsdCk7IC8vIGlzIGFuIEVTNiBtb2R1bGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsdWdpbnMucHVzaChwbHVnaW5JbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElOVEVSTkFMX1BMVUdJTlMuY29uY2F0KHBsdWdpbnMpO1xufVxuXG52YXIgUkFXX0VOX0xPQ0FMRSA9IHtcbiAgICBjb2RlOiAnZW4nLFxuICAgIHdlZWs6IHtcbiAgICAgICAgZG93OiAwLFxuICAgICAgICBkb3k6IDQgLy8gNCBkYXlzIG5lZWQgdG8gYmUgd2l0aGluIHRoZSB5ZWFyIHRvIGJlIGNvbnNpZGVyZWQgdGhlIGZpcnN0IHdlZWtcbiAgICB9LFxuICAgIGRpcjogJ2x0cicsXG4gICAgYnV0dG9uVGV4dDoge1xuICAgICAgICBwcmV2OiAncHJldicsXG4gICAgICAgIG5leHQ6ICduZXh0JyxcbiAgICAgICAgcHJldlllYXI6ICdwcmV2IHllYXInLFxuICAgICAgICBuZXh0WWVhcjogJ25leHQgeWVhcicsXG4gICAgICAgIHllYXI6ICd5ZWFyJyxcbiAgICAgICAgdG9kYXk6ICd0b2RheScsXG4gICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICB3ZWVrOiAnd2VlaycsXG4gICAgICAgIGRheTogJ2RheScsXG4gICAgICAgIGxpc3Q6ICdsaXN0J1xuICAgIH0sXG4gICAgd2Vla0xhYmVsOiAnVycsXG4gICAgYWxsRGF5VGV4dDogJ2FsbC1kYXknLFxuICAgIGV2ZW50TGltaXRUZXh0OiAnbW9yZScsXG4gICAgbm9FdmVudHNNZXNzYWdlOiAnTm8gZXZlbnRzIHRvIGRpc3BsYXknXG59O1xuZnVuY3Rpb24gcGFyc2VSYXdMb2NhbGVzKGV4cGxpY2l0UmF3TG9jYWxlcykge1xuICAgIHZhciBkZWZhdWx0Q29kZSA9IGV4cGxpY2l0UmF3TG9jYWxlcy5sZW5ndGggPiAwID8gZXhwbGljaXRSYXdMb2NhbGVzWzBdLmNvZGUgOiAnZW4nO1xuICAgIHZhciBnbG9iYWxBcnJheSA9IHdpbmRvd1snRnVsbENhbGVuZGFyTG9jYWxlc0FsbCddIHx8IFtdOyAvLyBmcm9tIGxvY2FsZXMtYWxsLmpzXG4gICAgdmFyIGdsb2JhbE9iamVjdCA9IHdpbmRvd1snRnVsbENhbGVuZGFyTG9jYWxlcyddIHx8IHt9OyAvLyBmcm9tIGxvY2FsZXMvKi5qcy4ga2V5cyBhcmUgbWVhbmluZ2xlc3NcbiAgICB2YXIgYWxsUmF3TG9jYWxlcyA9IGdsb2JhbEFycmF5LmNvbmNhdCgvLyBnbG9iYWxBcnJheSBpcyBsb3cgcHJpb1xuICAgIGhhc2hWYWx1ZXNUb0FycmF5KGdsb2JhbE9iamVjdCksIC8vIG1lZGl1bSBwcmlvXG4gICAgZXhwbGljaXRSYXdMb2NhbGVzIC8vIGhpZ2hlc3QgcHJpb1xuICAgICk7XG4gICAgdmFyIHJhd0xvY2FsZU1hcCA9IHtcbiAgICAgICAgZW46IFJBV19FTl9MT0NBTEUgLy8gbmVjZXNzYXJ5P1xuICAgIH07XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxSYXdMb2NhbGVzXzEgPSBhbGxSYXdMb2NhbGVzOyBfaSA8IGFsbFJhd0xvY2FsZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJhd0xvY2FsZSA9IGFsbFJhd0xvY2FsZXNfMVtfaV07XG4gICAgICAgIHJhd0xvY2FsZU1hcFtyYXdMb2NhbGUuY29kZV0gPSByYXdMb2NhbGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1hcDogcmF3TG9jYWxlTWFwLFxuICAgICAgICBkZWZhdWx0Q29kZTogZGVmYXVsdENvZGVcbiAgICB9O1xufVxuZnVuY3Rpb24gYnVpbGRMb2NhbGUoaW5wdXRTaW5ndWxhciwgYXZhaWxhYmxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFNpbmd1bGFyID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbnB1dFNpbmd1bGFyKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VMb2NhbGUoaW5wdXRTaW5ndWxhci5jb2RlLCBbaW5wdXRTaW5ndWxhci5jb2RlXSwgaW5wdXRTaW5ndWxhcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcXVlcnlMb2NhbGUoaW5wdXRTaW5ndWxhciwgYXZhaWxhYmxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBxdWVyeUxvY2FsZShjb2RlQXJnLCBhdmFpbGFibGUpIHtcbiAgICB2YXIgY29kZXMgPSBbXS5jb25jYXQoY29kZUFyZyB8fCBbXSk7IC8vIHdpbGwgY29udmVydCB0byBhcnJheVxuICAgIHZhciByYXcgPSBxdWVyeVJhd0xvY2FsZShjb2RlcywgYXZhaWxhYmxlKSB8fCBSQVdfRU5fTE9DQUxFO1xuICAgIHJldHVybiBwYXJzZUxvY2FsZShjb2RlQXJnLCBjb2RlcywgcmF3KTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5UmF3TG9jYWxlKGNvZGVzLCBhdmFpbGFibGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGNvZGVzW2ldLnRvTG9jYWxlTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IHBhcnRzLmxlbmd0aDsgaiA+IDA7IGotLSkge1xuICAgICAgICAgICAgdmFyIHNpbXBsZUlkID0gcGFydHMuc2xpY2UoMCwgaikuam9pbignLScpO1xuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVtzaW1wbGVJZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXZhaWxhYmxlW3NpbXBsZUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHBhcnNlTG9jYWxlKGNvZGVBcmcsIGNvZGVzLCByYXcpIHtcbiAgICB2YXIgbWVyZ2VkID0gbWVyZ2VQcm9wcyhbUkFXX0VOX0xPQ0FMRSwgcmF3XSwgWydidXR0b25UZXh0J10pO1xuICAgIGRlbGV0ZSBtZXJnZWQuY29kZTsgLy8gZG9uJ3Qgd2FudCB0aGlzIHBhcnQgb2YgdGhlIG9wdGlvbnNcbiAgICB2YXIgd2VlayA9IG1lcmdlZC53ZWVrO1xuICAgIGRlbGV0ZSBtZXJnZWQud2VlaztcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2RlQXJnOiBjb2RlQXJnLFxuICAgICAgICBjb2RlczogY29kZXMsXG4gICAgICAgIHdlZWs6IHdlZWssXG4gICAgICAgIHNpbXBsZU51bWJlckZvcm1hdDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGNvZGVBcmcpLFxuICAgICAgICBvcHRpb25zOiBtZXJnZWRcbiAgICB9O1xufVxuXG52YXIgT3B0aW9uc01hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT3B0aW9uc01hbmFnZXIob3ZlcnJpZGVzKSB7XG4gICAgICAgIHRoaXMub3ZlcnJpZGVzID0gX19hc3NpZ24oe30sIG92ZXJyaWRlcyk7IC8vIG1ha2UgYSBjb3B5XG4gICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbXB1dGUoKTtcbiAgICB9XG4gICAgT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLm11dGF0ZSA9IGZ1bmN0aW9uICh1cGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljKSB7XG4gICAgICAgIHZhciBvdmVycmlkZUhhc2ggPSBpc0R5bmFtaWMgPyB0aGlzLmR5bmFtaWNPdmVycmlkZXMgOiB0aGlzLm92ZXJyaWRlcztcbiAgICAgICAgX19hc3NpZ24ob3ZlcnJpZGVIYXNoLCB1cGRhdGVzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZW1vdmFsc18xID0gcmVtb3ZhbHM7IF9pIDwgcmVtb3ZhbHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHJlbW92YWxzXzFbX2ldO1xuICAgICAgICAgICAgZGVsZXRlIG92ZXJyaWRlSGFzaFtwcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wdXRlKCk7XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyB0aGUgZmxhdHRlbmVkIG9wdGlvbnMgaGFzaCBmb3IgdGhlIGNhbGVuZGFyIGFuZCBhc3NpZ25zIHRvIGB0aGlzLm9wdGlvbnNgLlxuICAgIC8vIEFzc3VtZXMgdGhpcy5vdmVycmlkZXMgYW5kIHRoaXMuZHluYW1pY092ZXJyaWRlcyBoYXZlIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZC5cbiAgICBPcHRpb25zTWFuYWdlci5wcm90b3R5cGUuY29tcHV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETzogbm90IGEgdmVyeSBlZmZpY2llbnQgc3lzdGVtXG4gICAgICAgIHZhciBsb2NhbGVzID0gZmlyc3REZWZpbmVkKC8vIGV4cGxpY2l0IGxvY2FsZSBvcHRpb24gZ2l2ZW4/XG4gICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcy5sb2NhbGVzLCB0aGlzLm92ZXJyaWRlcy5sb2NhbGVzLCBnbG9iYWxEZWZhdWx0cy5sb2NhbGVzKTtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGZpcnN0RGVmaW5lZCgvLyBleHBsaWNpdCBsb2NhbGVzIG9wdGlvbiBnaXZlbj9cbiAgICAgICAgdGhpcy5keW5hbWljT3ZlcnJpZGVzLmxvY2FsZSwgdGhpcy5vdmVycmlkZXMubG9jYWxlLCBnbG9iYWxEZWZhdWx0cy5sb2NhbGUpO1xuICAgICAgICB2YXIgYXZhaWxhYmxlID0gcGFyc2VSYXdMb2NhbGVzKGxvY2FsZXMpO1xuICAgICAgICB2YXIgbG9jYWxlRGVmYXVsdHMgPSBidWlsZExvY2FsZShsb2NhbGUgfHwgYXZhaWxhYmxlLmRlZmF1bHRDb2RlLCBhdmFpbGFibGUubWFwKS5vcHRpb25zO1xuICAgICAgICB2YXIgZGlyID0gZmlyc3REZWZpbmVkKC8vIGJhc2VkIG9uIG9wdGlvbnMgY29tcHV0ZWQgc28gZmFyLCBpcyBkaXJlY3Rpb24gUlRMP1xuICAgICAgICB0aGlzLmR5bmFtaWNPdmVycmlkZXMuZGlyLCB0aGlzLm92ZXJyaWRlcy5kaXIsIGxvY2FsZURlZmF1bHRzLmRpcik7XG4gICAgICAgIHZhciBkaXJEZWZhdWx0cyA9IGRpciA9PT0gJ3J0bCcgPyBydGxEZWZhdWx0cyA6IHt9O1xuICAgICAgICB0aGlzLmRpckRlZmF1bHRzID0gZGlyRGVmYXVsdHM7XG4gICAgICAgIHRoaXMubG9jYWxlRGVmYXVsdHMgPSBsb2NhbGVEZWZhdWx0cztcbiAgICAgICAgdGhpcy5jb21wdXRlZCA9IG1lcmdlT3B0aW9ucyhbXG4gICAgICAgICAgICBnbG9iYWxEZWZhdWx0cyxcbiAgICAgICAgICAgIGRpckRlZmF1bHRzLFxuICAgICAgICAgICAgbG9jYWxlRGVmYXVsdHMsXG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlcyxcbiAgICAgICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlc1xuICAgICAgICBdKTtcbiAgICB9O1xuICAgIHJldHVybiBPcHRpb25zTWFuYWdlcjtcbn0oKSk7XG5cbnZhciBjYWxlbmRhclN5c3RlbUNsYXNzTWFwID0ge307XG5mdW5jdGlvbiByZWdpc3RlckNhbGVuZGFyU3lzdGVtKG5hbWUsIHRoZUNsYXNzKSB7XG4gICAgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSA9IHRoZUNsYXNzO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2FsZW5kYXJTeXN0ZW0obmFtZSkge1xuICAgIHJldHVybiBuZXcgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSgpO1xufVxudmFyIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtKCkge1xuICAgIH1cbiAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuZ2V0TWFya2VyWWVhciA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgfTtcbiAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuZ2V0TWFya2VyTW9udGggPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gZC5nZXRVVENNb250aCgpO1xuICAgIH07XG4gICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLmdldE1hcmtlckRheSA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKTtcbiAgICB9O1xuICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5hcnJheVRvTWFya2VyID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYXJyKTtcbiAgICB9O1xuICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5tYXJrZXJUb0FycmF5ID0gZnVuY3Rpb24gKG1hcmtlcikge1xuICAgICAgICByZXR1cm4gZGF0ZVRvVXRjQXJyYXkobWFya2VyKTtcbiAgICB9O1xuICAgIHJldHVybiBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbTtcbn0oKSk7XG5yZWdpc3RlckNhbGVuZGFyU3lzdGVtKCdncmVnb3J5JywgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0pO1xuXG52YXIgSVNPX1JFID0gL15cXHMqKFxcZHs0fSkoLShcXGR7Mn0pKC0oXFxkezJ9KShbVCBdKFxcZHsyfSk6KFxcZHsyfSkoOihcXGR7Mn0pKFxcLihcXGQrKSk/KT8oWnwoKFstK10pKFxcZHsyfSkoOj8oXFxkezJ9KSk/KSk/KT8pPyk/JC87XG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgICB2YXIgbSA9IElTT19SRS5leGVjKHN0cik7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBEYXRlKERhdGUuVVRDKE51bWJlcihtWzFdKSwgbVszXSA/IE51bWJlcihtWzNdKSAtIDEgOiAwLCBOdW1iZXIobVs1XSB8fCAxKSwgTnVtYmVyKG1bN10gfHwgMCksIE51bWJlcihtWzhdIHx8IDApLCBOdW1iZXIobVsxMF0gfHwgMCksIG1bMTJdID8gTnVtYmVyKCcwLicgKyBtWzEyXSkgKiAxMDAwIDogMCkpO1xuICAgICAgICBpZiAoaXNWYWxpZERhdGUobWFya2VyKSkge1xuICAgICAgICAgICAgdmFyIHRpbWVab25lT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChtWzEzXSkge1xuICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gKG1bMTVdID09PSAnLScgPyAtMSA6IDEpICogKE51bWJlcihtWzE2XSB8fCAwKSAqIDYwICtcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKG1bMThdIHx8IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICAgICAgICAgaXNUaW1lVW5zcGVjaWZpZWQ6ICFtWzZdLFxuICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiB0aW1lWm9uZU9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxudmFyIERhdGVFbnYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGF0ZUVudihzZXR0aW5ncykge1xuICAgICAgICB2YXIgdGltZVpvbmUgPSB0aGlzLnRpbWVab25lID0gc2V0dGluZ3MudGltZVpvbmU7XG4gICAgICAgIHZhciBpc05hbWVkVGltZVpvbmUgPSB0aW1lWm9uZSAhPT0gJ2xvY2FsJyAmJiB0aW1lWm9uZSAhPT0gJ1VUQyc7XG4gICAgICAgIGlmIChzZXR0aW5ncy5uYW1lZFRpbWVab25lSW1wbCAmJiBpc05hbWVkVGltZVpvbmUpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZWRUaW1lWm9uZUltcGwgPSBuZXcgc2V0dGluZ3MubmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FuQ29tcHV0ZU9mZnNldCA9IEJvb2xlYW4oIWlzTmFtZWRUaW1lWm9uZSB8fCB0aGlzLm5hbWVkVGltZVpvbmVJbXBsKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbSA9IGNyZWF0ZUNhbGVuZGFyU3lzdGVtKHNldHRpbmdzLmNhbGVuZGFyU3lzdGVtKTtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBzZXR0aW5ncy5sb2NhbGU7XG4gICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmxvY2FsZS53ZWVrLmRvdztcbiAgICAgICAgdGhpcy53ZWVrRG95ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG95O1xuICAgICAgICBpZiAoc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uID09PSAnSVNPJykge1xuICAgICAgICAgICAgdGhpcy53ZWVrRG93ID0gMTtcbiAgICAgICAgICAgIHRoaXMud2Vla0RveSA9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5maXJzdERheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmZpcnN0RGF5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLndlZWtOdW1iZXJGdW5jID0gc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2Vla0xhYmVsID0gc2V0dGluZ3Mud2Vla0xhYmVsICE9IG51bGwgPyBzZXR0aW5ncy53ZWVrTGFiZWwgOiBzZXR0aW5ncy5sb2NhbGUub3B0aW9ucy53ZWVrTGFiZWw7XG4gICAgICAgIHRoaXMuY21kRm9ybWF0dGVyID0gc2V0dGluZ3MuY21kRm9ybWF0dGVyO1xuICAgIH1cbiAgICAvLyBDcmVhdGluZyAvIFBhcnNpbmdcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdmFyIG1ldGEgPSB0aGlzLmNyZWF0ZU1hcmtlck1ldGEoaW5wdXQpO1xuICAgICAgICBpZiAobWV0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGEubWFya2VyO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuY3JlYXRlTm93TWFya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jYW5Db21wdXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBUb01hcmtlcihuZXcgRGF0ZSgpLnZhbHVlT2YoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBjYW4ndCBjb21wdXRlIHRoZSBjdXJyZW50IGRhdGUgdmFsIGZvciBhIHRpbWV6b25lLFxuICAgICAgICAgICAgLy8gYmV0dGVyIHRvIGdpdmUgdGhlIGN1cnJlbnQgbG9jYWwgZGF0ZSB2YWxzIHRoYW4gVVRDXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoZGF0ZVRvTG9jYWxBcnJheShuZXcgRGF0ZSgpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLmNyZWF0ZU1hcmtlck1ldGEgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya2VyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG1hcmtlciA9IHRoaXMudGltZXN0YW1wVG9NYXJrZXIoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIG1hcmtlciA9IHRoaXMudGltZXN0YW1wVG9NYXJrZXIoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBtYXJrZXIgPSBhcnJheVRvVXRjRGF0ZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcmtlciA9PT0gbnVsbCB8fCAhaXNWYWxpZERhdGUobWFya2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbWFya2VyOiBtYXJrZXIsIGlzVGltZVVuc3BlY2lmaWVkOiBmYWxzZSwgZm9yY2VkVHpvOiBudWxsIH07XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IHBhcnNlKHMpO1xuICAgICAgICBpZiAocGFydHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrZXIgPSBwYXJ0cy5tYXJrZXI7XG4gICAgICAgIHZhciBmb3JjZWRUem8gPSBudWxsO1xuICAgICAgICBpZiAocGFydHMudGltZVpvbmVPZmZzZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbkNvbXB1dGVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKG1hcmtlci52YWx1ZU9mKCkgLSBwYXJ0cy50aW1lWm9uZU9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JjZWRUem8gPSBwYXJ0cy50aW1lWm9uZU9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBtYXJrZXI6IG1hcmtlciwgaXNUaW1lVW5zcGVjaWZpZWQ6IHBhcnRzLmlzVGltZVVuc3BlY2lmaWVkLCBmb3JjZWRUem86IGZvcmNlZFR6byB9O1xuICAgIH07XG4gICAgLy8gQWNjZXNzb3JzXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0WWVhciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtYXJrZXIpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0TW9udGggPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG1hcmtlcik7XG4gICAgfTtcbiAgICAvLyBBZGRpbmcgLyBTdWJ0cmFjdGluZ1xuICAgIERhdGVFbnYucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzBdICs9IGR1ci55ZWFycztcbiAgICAgICAgYVsxXSArPSBkdXIubW9udGhzO1xuICAgICAgICBhWzJdICs9IGR1ci5kYXlzO1xuICAgICAgICBhWzZdICs9IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzBdIC09IGR1ci55ZWFycztcbiAgICAgICAgYVsxXSAtPSBkdXIubW9udGhzO1xuICAgICAgICBhWzJdIC09IGR1ci5kYXlzO1xuICAgICAgICBhWzZdIC09IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5hZGRZZWFycyA9IGZ1bmN0aW9uIChtYXJrZXIsIG4pIHtcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgYVswXSArPSBuO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuYWRkTW9udGhzID0gZnVuY3Rpb24gKG1hcmtlciwgbikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzFdICs9IG47XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICAvLyBEaWZmaW5nIFdob2xlIFVuaXRzXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZGlmZldob2xlWWVhcnMgPSBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgIHZhciBjYWxlbmRhclN5c3RlbSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW07XG4gICAgICAgIGlmICh0aW1lQXNNcyhtMCkgPT09IHRpbWVBc01zKG0xKSAmJlxuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyRGF5KG0wKSA9PT0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyRGF5KG0xKSAmJlxuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTApID09PSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0xKSAtIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZGlmZldob2xlTW9udGhzID0gZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICB2YXIgY2FsZW5kYXJTeXN0ZW0gPSB0aGlzLmNhbGVuZGFyU3lzdGVtO1xuICAgICAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkgJiZcbiAgICAgICAgICAgIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTApKSArXG4gICAgICAgICAgICAgICAgKGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtMCkpICogMTI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICAvLyBSYW5nZSAvIER1cmF0aW9uXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ3JlYXRlc3RXaG9sZVVuaXQgPSBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3llYXInLCB2YWx1ZTogbiB9O1xuICAgICAgICB9XG4gICAgICAgIG4gPSB0aGlzLmRpZmZXaG9sZU1vbnRocyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZldob2xlV2Vla3MobTAsIG0xKTtcbiAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICd3ZWVrJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZldob2xlRGF5cyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ2RheScsIHZhbHVlOiBuIH07XG4gICAgICAgIH1cbiAgICAgICAgbiA9IGRpZmZIb3VycyhtMCwgbTEpO1xuICAgICAgICBpZiAoaXNJbnQobikpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZk1pbnV0ZXMobTAsIG0xKTtcbiAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWludXRlJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZlNlY29uZHMobTAsIG0xKTtcbiAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnc2Vjb25kJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB1bml0OiAnbWlsbGlzZWNvbmQnLCB2YWx1ZTogbTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpIH07XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jb3VudER1cmF0aW9uc0JldHdlZW4gPSBmdW5jdGlvbiAobTAsIG0xLCBkKSB7XG4gICAgICAgIC8vIFRPRE86IGNhbiB1c2UgZ3JlYXRlc3RXaG9sZVVuaXRcbiAgICAgICAgdmFyIGRpZmY7XG4gICAgICAgIGlmIChkLnllYXJzKSB7XG4gICAgICAgICAgICBkaWZmID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hZZWFycyhkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZC5tb250aHMpIHtcbiAgICAgICAgICAgIGRpZmYgPSB0aGlzLmRpZmZXaG9sZU1vbnRocyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hNb250aHMoZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGQuZGF5cykge1xuICAgICAgICAgICAgZGlmZiA9IGRpZmZXaG9sZURheXMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChkaWZmICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZmYgLyBhc1JvdWdoRGF5cyhkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyBhc1JvdWdoTXMoZCk7XG4gICAgfTtcbiAgICAvLyBTdGFydC1PZlxuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2YgPSBmdW5jdGlvbiAobSwgdW5pdCkge1xuICAgICAgICBpZiAodW5pdCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mWWVhcihtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bml0ID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mTW9udGgobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mV2VlayhtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bml0ID09PSAnZGF5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZEYXkobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRPZkhvdXIobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ21pbnV0ZScpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFydE9mTWludXRlKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuaXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRPZlNlY29uZChtKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuc3RhcnRPZlllYXIgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtKVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2ZNb250aCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoW1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0pLFxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtKVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2ZXZWVrID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uYXJyYXlUb01hcmtlcihbXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSksXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG0pLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCkgLSAoKG0uZ2V0VVRDRGF5KCkgLSB0aGlzLndlZWtEb3cgKyA3KSAlIDcpXG4gICAgICAgIF0pO1xuICAgIH07XG4gICAgLy8gV2VlayBOdW1iZXJcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jb21wdXRlV2Vla051bWJlciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgaWYgKHRoaXMud2Vla051bWJlckZ1bmMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlZWtOdW1iZXJGdW5jKHRoaXMudG9EYXRlKG1hcmtlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobWFya2VyLCB0aGlzLndlZWtEb3csIHRoaXMud2Vla0RveSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRPRE86IGNob2tlIG9uIHRpbWVab25lTmFtZTogbG9uZ1xuICAgIERhdGVFbnYucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGZvcm1hdHRlciwgZGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGVPcHRpb25zID09PSB2b2lkIDApIHsgZGF0ZU9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdCh7XG4gICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlT3B0aW9ucy5mb3JjZWRUem8gIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgZGF0ZU9wdGlvbnMuZm9yY2VkVHpvIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihtYXJrZXIpXG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZm9ybWF0dGVyLCBkYXRlT3B0aW9ucykge1xuICAgICAgICBpZiAoZGF0ZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBkYXRlT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmIChkYXRlT3B0aW9ucy5pc0VuZEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgZW5kID0gYWRkTXMoZW5kLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRSYW5nZSh7XG4gICAgICAgICAgICBtYXJrZXI6IHN0YXJ0LFxuICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGRhdGVPcHRpb25zLmZvcmNlZFN0YXJ0VHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgIGRhdGVPcHRpb25zLmZvcmNlZFN0YXJ0VHpvIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihzdGFydClcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbWFya2VyOiBlbmQsXG4gICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogZGF0ZU9wdGlvbnMuZm9yY2VkRW5kVHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgIGRhdGVPcHRpb25zLmZvcmNlZEVuZFR6byA6XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRGb3JNYXJrZXIoZW5kKVxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLmZvcm1hdElzbyA9IGZ1bmN0aW9uIChtYXJrZXIsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICBpZiAoZXh0cmFPcHRpb25zID09PSB2b2lkIDApIHsgZXh0cmFPcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHRpbWVab25lT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFleHRyYU9wdGlvbnMub21pdFRpbWVab25lT2Zmc2V0KSB7XG4gICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zLmZvcmNlZFR6byAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQgPSBleHRyYU9wdGlvbnMuZm9yY2VkVHpvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQgPSB0aGlzLm9mZnNldEZvck1hcmtlcihtYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZElzb1N0cmluZyhtYXJrZXIsIHRpbWVab25lT2Zmc2V0LCBleHRyYU9wdGlvbnMub21pdFRpbWUpO1xuICAgIH07XG4gICAgLy8gVGltZVpvbmVcbiAgICBEYXRlRW52LnByb3RvdHlwZS50aW1lc3RhbXBUb01hcmtlciA9IGZ1bmN0aW9uIChtcykge1xuICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGRhdGVUb0xvY2FsQXJyYXkobmV3IERhdGUobXMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycgfHwgIXRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUodGhpcy5uYW1lZFRpbWVab25lSW1wbC50aW1lc3RhbXBUb0FycmF5KG1zKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLm9mZnNldEZvck1hcmtlciA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gLWFycmF5VG9Mb2NhbERhdGUoZGF0ZVRvVXRjQXJyYXkobSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7IC8vIGNvbnZlcnQgXCJpbnZlcnNlXCIgb2Zmc2V0IHRvIFwibm9ybWFsXCIgb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVkVGltZVpvbmVJbXBsLm9mZnNldEZvckFycmF5KGRhdGVUb1V0Y0FycmF5KG0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8vIENvbnZlcnNpb25cbiAgICBEYXRlRW52LnByb3RvdHlwZS50b0RhdGUgPSBmdW5jdGlvbiAobSwgZm9yY2VkVHpvKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb0xvY2FsRGF0ZShkYXRlVG9VdGNBcnJheShtKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSk7IC8vIG1ha2Ugc3VyZSBpdCdzIGEgY29weVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLm5hbWVkVGltZVpvbmVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobS52YWx1ZU9mKCkgLSAoZm9yY2VkVHpvIHx8IDApKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSAtXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lZFRpbWVab25lSW1wbC5vZmZzZXRGb3JBcnJheShkYXRlVG9VdGNBcnJheShtKSkgKiAxMDAwICogNjAgLy8gY29udmVydCBtaW51dGVzIC0+IG1zXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGF0ZUVudjtcbn0oKSk7XG5cbnZhciBTSU1QTEVfU09VUkNFX1BST1BTID0ge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgYWxsRGF5RGVmYXVsdDogQm9vbGVhbixcbiAgICBldmVudERhdGFUcmFuc2Zvcm06IEZ1bmN0aW9uLFxuICAgIHN1Y2Nlc3M6IEZ1bmN0aW9uLFxuICAgIGZhaWx1cmU6IEZ1bmN0aW9uXG59O1xudmFyIHVpZCQyID0gMDtcbmZ1bmN0aW9uIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGRlZnMgPSBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZXZlbnRTb3VyY2VEZWZzO1xuICAgIHJldHVybiAhZGVmc1tldmVudFNvdXJjZS5zb3VyY2VEZWZJZF0uaWdub3JlUmFuZ2U7XG59XG5mdW5jdGlvbiBwYXJzZUV2ZW50U291cmNlKHJhdywgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGVmcyA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudFNvdXJjZURlZnM7XG4gICAgZm9yICh2YXIgaSA9IGRlZnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsgLy8gbGF0ZXItYWRkZWQgcGx1Z2lucyB0YWtlIHByZWNlZGVuY2VcbiAgICAgICAgdmFyIGRlZiA9IGRlZnNbaV07XG4gICAgICAgIHZhciBtZXRhID0gZGVmLnBhcnNlTWV0YShyYXcpO1xuICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgICAgdmFyIHJlcyA9IHBhcnNlRXZlbnRTb3VyY2VQcm9wcyh0eXBlb2YgcmF3ID09PSAnb2JqZWN0JyA/IHJhdyA6IHt9LCBtZXRhLCBpLCBjYWxlbmRhcik7XG4gICAgICAgICAgICByZXMuX3JhdyA9IHJhdztcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBwYXJzZUV2ZW50U291cmNlUHJvcHMocmF3LCBtZXRhLCBzb3VyY2VEZWZJZCwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbGVmdG92ZXJzMCA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhdywgU0lNUExFX1NPVVJDRV9QUk9QUywge30sIGxlZnRvdmVyczApO1xuICAgIHZhciBsZWZ0b3ZlcnMxID0ge307XG4gICAgdmFyIHVpID0gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhsZWZ0b3ZlcnMwLCBjYWxlbmRhciwgbGVmdG92ZXJzMSk7XG4gICAgcHJvcHMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgIHByb3BzLmxhdGVzdEZldGNoSWQgPSAnJztcbiAgICBwcm9wcy5mZXRjaFJhbmdlID0gbnVsbDtcbiAgICBwcm9wcy5wdWJsaWNJZCA9IFN0cmluZyhyYXcuaWQgfHwgJycpO1xuICAgIHByb3BzLnNvdXJjZUlkID0gU3RyaW5nKHVpZCQyKyspO1xuICAgIHByb3BzLnNvdXJjZURlZklkID0gc291cmNlRGVmSWQ7XG4gICAgcHJvcHMubWV0YSA9IG1ldGE7XG4gICAgcHJvcHMudWkgPSB1aTtcbiAgICBwcm9wcy5leHRlbmRlZFByb3BzID0gbGVmdG92ZXJzMTtcbiAgICByZXR1cm4gcHJvcHM7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZUV2ZW50U291cmNlcyAoZXZlbnRTb3VyY2VzLCBhY3Rpb24sIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnQUREX0VWRU5UX1NPVVJDRVMnOiAvLyBhbHJlYWR5IHBhcnNlZFxuICAgICAgICAgICAgcmV0dXJuIGFkZFNvdXJjZXMoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlcywgZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnUkVNT1ZFX0VWRU5UX1NPVVJDRSc6XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlU291cmNlKGV2ZW50U291cmNlcywgYWN0aW9uLnNvdXJjZUlkKTtcbiAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaERpcnR5U291cmNlcyhldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdGRVRDSF9FVkVOVF9TT1VSQ0VTJzpcbiAgICAgICAgY2FzZSAnQ0hBTkdFX1RJTUVaT05FJzpcbiAgICAgICAgICAgIHJldHVybiBmZXRjaFNvdXJjZXNCeUlkcyhldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZHMgP1xuICAgICAgICAgICAgICAgIGFycmF5VG9IYXNoKGFjdGlvbi5zb3VyY2VJZHMpIDpcbiAgICAgICAgICAgICAgICBleGNsdWRlU3RhdGljU291cmNlcyhldmVudFNvdXJjZXMsIGNhbGVuZGFyKSwgZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOlxuICAgICAgICBjYXNlICdSRUNFSVZFX0VWRU5UX0VSUk9SJzpcbiAgICAgICAgICAgIHJldHVybiByZWNlaXZlUmVzcG9uc2UoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlSWQsIGFjdGlvbi5mZXRjaElkLCBhY3Rpb24uZmV0Y2hSYW5nZSk7XG4gICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgIH1cbn1cbnZhciB1aWQkMyA9IDA7XG5mdW5jdGlvbiBhZGRTb3VyY2VzKGV2ZW50U291cmNlSGFzaCwgc291cmNlcywgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgaGFzaCA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgc291cmNlc18xID0gc291cmNlczsgX2kgPCBzb3VyY2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzXzFbX2ldO1xuICAgICAgICBoYXNoW3NvdXJjZS5zb3VyY2VJZF0gPSBzb3VyY2U7XG4gICAgfVxuICAgIGlmIChmZXRjaFJhbmdlKSB7XG4gICAgICAgIGhhc2ggPSBmZXRjaERpcnR5U291cmNlcyhoYXNoLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgfVxuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnRTb3VyY2VIYXNoLCBoYXNoKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVNvdXJjZShldmVudFNvdXJjZUhhc2gsIHNvdXJjZUlkKSB7XG4gICAgcmV0dXJuIGZpbHRlckhhc2goZXZlbnRTb3VyY2VIYXNoLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50U291cmNlLnNvdXJjZUlkICE9PSBzb3VyY2VJZDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZldGNoRGlydHlTb3VyY2VzKHNvdXJjZUhhc2gsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGZldGNoU291cmNlc0J5SWRzKHNvdXJjZUhhc2gsIGZpbHRlckhhc2goc291cmNlSGFzaCwgZnVuY3Rpb24gKGV2ZW50U291cmNlKSB7XG4gICAgICAgIHJldHVybiBpc1NvdXJjZURpcnR5KGV2ZW50U291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgfSksIGZldGNoUmFuZ2UsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIGlzU291cmNlRGlydHkoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgaWYgKCFkb2VzU291cmNlTmVlZFJhbmdlKGV2ZW50U291cmNlLCBjYWxlbmRhcikpIHtcbiAgICAgICAgcmV0dXJuICFldmVudFNvdXJjZS5sYXRlc3RGZXRjaElkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICFjYWxlbmRhci5vcHQoJ2xhenlGZXRjaGluZycpIHx8XG4gICAgICAgICAgICAhZXZlbnRTb3VyY2UuZmV0Y2hSYW5nZSB8fFxuICAgICAgICAgICAgZmV0Y2hSYW5nZS5zdGFydCA8IGV2ZW50U291cmNlLmZldGNoUmFuZ2Uuc3RhcnQgfHxcbiAgICAgICAgICAgIGZldGNoUmFuZ2UuZW5kID4gZXZlbnRTb3VyY2UuZmV0Y2hSYW5nZS5lbmQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZmV0Y2hTb3VyY2VzQnlJZHMocHJldlNvdXJjZXMsIHNvdXJjZUlkSGFzaCwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbmV4dFNvdXJjZXMgPSB7fTtcbiAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBwcmV2U291cmNlcykge1xuICAgICAgICB2YXIgc291cmNlID0gcHJldlNvdXJjZXNbc291cmNlSWRdO1xuICAgICAgICBpZiAoc291cmNlSWRIYXNoW3NvdXJjZUlkXSkge1xuICAgICAgICAgICAgbmV4dFNvdXJjZXNbc291cmNlSWRdID0gZmV0Y2hTb3VyY2Uoc291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXh0U291cmNlc1tzb3VyY2VJZF0gPSBzb3VyY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRTb3VyY2VzO1xufVxuZnVuY3Rpb24gZmV0Y2hTb3VyY2UoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHNvdXJjZURlZiA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudFNvdXJjZURlZnNbZXZlbnRTb3VyY2Uuc291cmNlRGVmSWRdO1xuICAgIHZhciBmZXRjaElkID0gU3RyaW5nKHVpZCQzKyspO1xuICAgIHNvdXJjZURlZi5mZXRjaCh7XG4gICAgICAgIGV2ZW50U291cmNlOiBldmVudFNvdXJjZSxcbiAgICAgICAgY2FsZW5kYXI6IGNhbGVuZGFyLFxuICAgICAgICByYW5nZTogZmV0Y2hSYW5nZVxuICAgIH0sIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIHJhd0V2ZW50cyA9IHJlcy5yYXdFdmVudHM7XG4gICAgICAgIHZhciBjYWxTdWNjZXNzID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZVN1Y2Nlc3MnKTtcbiAgICAgICAgdmFyIGNhbFN1Y2Nlc3NSZXM7XG4gICAgICAgIHZhciBzb3VyY2VTdWNjZXNzUmVzO1xuICAgICAgICBpZiAoZXZlbnRTb3VyY2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgc291cmNlU3VjY2Vzc1JlcyA9IGV2ZW50U291cmNlLnN1Y2Nlc3MocmF3RXZlbnRzLCByZXMueGhyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsU3VjY2Vzcykge1xuICAgICAgICAgICAgY2FsU3VjY2Vzc1JlcyA9IGNhbFN1Y2Nlc3MocmF3RXZlbnRzLCByZXMueGhyKTtcbiAgICAgICAgfVxuICAgICAgICByYXdFdmVudHMgPSBzb3VyY2VTdWNjZXNzUmVzIHx8IGNhbFN1Y2Nlc3NSZXMgfHwgcmF3RXZlbnRzO1xuICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVDRUlWRV9FVkVOVFMnLFxuICAgICAgICAgICAgc291cmNlSWQ6IGV2ZW50U291cmNlLnNvdXJjZUlkLFxuICAgICAgICAgICAgZmV0Y2hJZDogZmV0Y2hJZCxcbiAgICAgICAgICAgIGZldGNoUmFuZ2U6IGZldGNoUmFuZ2UsXG4gICAgICAgICAgICByYXdFdmVudHM6IHJhd0V2ZW50c1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIGNhbGxGYWlsdXJlID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZUZhaWx1cmUnKTtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yLm1lc3NhZ2UsIGVycm9yKTtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlLmZhaWx1cmUpIHtcbiAgICAgICAgICAgIGV2ZW50U291cmNlLmZhaWx1cmUoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsRmFpbHVyZSkge1xuICAgICAgICAgICAgY2FsbEZhaWx1cmUoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX0VWRU5UX0VSUk9SJyxcbiAgICAgICAgICAgIHNvdXJjZUlkOiBldmVudFNvdXJjZS5zb3VyY2VJZCxcbiAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnRTb3VyY2UsIHsgaXNGZXRjaGluZzogdHJ1ZSwgbGF0ZXN0RmV0Y2hJZDogZmV0Y2hJZCB9KTtcbn1cbmZ1bmN0aW9uIHJlY2VpdmVSZXNwb25zZShzb3VyY2VIYXNoLCBzb3VyY2VJZCwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZXZlbnRTb3VyY2UgPSBzb3VyY2VIYXNoW3NvdXJjZUlkXTtcbiAgICBpZiAoZXZlbnRTb3VyY2UgJiYgLy8gbm90IGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICBmZXRjaElkID09PSBldmVudFNvdXJjZS5sYXRlc3RGZXRjaElkKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgc291cmNlSGFzaCwgKF9hID0ge30sIF9hW3NvdXJjZUlkXSA9IF9fYXNzaWduKHt9LCBldmVudFNvdXJjZSwgeyBpc0ZldGNoaW5nOiBmYWxzZSwgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSB9KSwgX2EpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZUhhc2g7XG59XG5mdW5jdGlvbiBleGNsdWRlU3RhdGljU291cmNlcyhldmVudFNvdXJjZXMsIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGZpbHRlckhhc2goZXZlbnRTb3VyY2VzLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKTtcbiAgICB9KTtcbn1cblxudmFyIERhdGVQcm9maWxlR2VuZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGVQcm9maWxlR2VuZXJhdG9yKHZpZXdTcGVjLCBjYWxlbmRhcikge1xuICAgICAgICB0aGlzLnZpZXdTcGVjID0gdmlld1NwZWM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHZpZXdTcGVjLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdGhpcy5pbml0SGlkZGVuRGF5cygpO1xuICAgIH1cbiAgICAvKiBEYXRlIFJhbmdlIENvbXB1dGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHdoYXQgdGhlIGRhdGVzL3JhbmdlcyB3aWxsIGJlIGZvciB0aGUgXCJwcmV2XCIgdmlldy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRQcmV2ID0gZnVuY3Rpb24gKGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciBwcmV2RGF0ZSA9IGRhdGVFbnYuc3VidHJhY3QoZGF0ZUVudi5zdGFydE9mKGN1cnJlbnREYXRlLCBjdXJyZW50RGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdCksIC8vIGltcG9ydGFudCBmb3Igc3RhcnQtb2YtbW9udGhcbiAgICAgICAgY3VycmVudERhdGVQcm9maWxlLmRhdGVJbmNyZW1lbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZChwcmV2RGF0ZSwgLTEpO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIHdpdGggaW5mbyBhYm91dCB3aGF0IHRoZSBkYXRlcy9yYW5nZXMgd2lsbCBiZSBmb3IgdGhlIFwibmV4dFwiIHZpZXcuXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkTmV4dCA9IGZ1bmN0aW9uIChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICB2YXIgbmV4dERhdGUgPSBkYXRlRW52LmFkZChkYXRlRW52LnN0YXJ0T2YoY3VycmVudERhdGUsIGN1cnJlbnREYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0KSwgLy8gaW1wb3J0YW50IGZvciBzdGFydC1vZi1tb250aFxuICAgICAgICBjdXJyZW50RGF0ZVByb2ZpbGUuZGF0ZUluY3JlbWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKG5leHREYXRlLCAxKTtcbiAgICB9O1xuICAgIC8vIEJ1aWxkcyBhIHN0cnVjdHVyZSBob2xkaW5nIGRhdGVzL3JhbmdlcyBmb3IgcmVuZGVyaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAvLyBPcHRpb25hbCBkaXJlY3Rpb24gcGFyYW0gaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGRhdGUgaXMgYmVpbmcgaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWRcbiAgICAvLyBmcm9tIGl0cyBwcmV2aW91cyB2YWx1ZS4gZGVjcmVtZW50ZWQgPSAtMSwgaW5jcmVtZW50ZWQgPSAxIChkZWZhdWx0KS5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoY3VycmVudERhdGUsIGRpcmVjdGlvbiwgZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgIGlmIChmb3JjZVRvVmFsaWQgPT09IHZvaWQgMCkgeyBmb3JjZVRvVmFsaWQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgdmFsaWRSYW5nZTtcbiAgICAgICAgdmFyIG1pblRpbWUgPSBudWxsO1xuICAgICAgICB2YXIgbWF4VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50SW5mbztcbiAgICAgICAgdmFyIGlzUmFuZ2VBbGxEYXk7XG4gICAgICAgIHZhciByZW5kZXJSYW5nZTtcbiAgICAgICAgdmFyIGFjdGl2ZVJhbmdlO1xuICAgICAgICB2YXIgaXNWYWxpZDtcbiAgICAgICAgdmFsaWRSYW5nZSA9IHRoaXMuYnVpbGRWYWxpZFJhbmdlKCk7XG4gICAgICAgIHZhbGlkUmFuZ2UgPSB0aGlzLnRyaW1IaWRkZW5EYXlzKHZhbGlkUmFuZ2UpO1xuICAgICAgICBpZiAoZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICBjdXJyZW50RGF0ZSA9IGNvbnN0cmFpbk1hcmtlclRvUmFuZ2UoY3VycmVudERhdGUsIHZhbGlkUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJbmZvID0gdGhpcy5idWlsZEN1cnJlbnRSYW5nZUluZm8oY3VycmVudERhdGUsIGRpcmVjdGlvbik7XG4gICAgICAgIGlzUmFuZ2VBbGxEYXkgPSAvXih5ZWFyfG1vbnRofHdlZWt8ZGF5KSQvLnRlc3QoY3VycmVudEluZm8udW5pdCk7XG4gICAgICAgIHJlbmRlclJhbmdlID0gdGhpcy5idWlsZFJlbmRlclJhbmdlKHRoaXMudHJpbUhpZGRlbkRheXMoY3VycmVudEluZm8ucmFuZ2UpLCBjdXJyZW50SW5mby51bml0LCBpc1JhbmdlQWxsRGF5KTtcbiAgICAgICAgcmVuZGVyUmFuZ2UgPSB0aGlzLnRyaW1IaWRkZW5EYXlzKHJlbmRlclJhbmdlKTtcbiAgICAgICAgYWN0aXZlUmFuZ2UgPSByZW5kZXJSYW5nZTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd05vbkN1cnJlbnREYXRlcykge1xuICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMoYWN0aXZlUmFuZ2UsIGN1cnJlbnRJbmZvLnJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBtaW5UaW1lID0gY3JlYXRlRHVyYXRpb24odGhpcy5vcHRpb25zLm1pblRpbWUpO1xuICAgICAgICBtYXhUaW1lID0gY3JlYXRlRHVyYXRpb24odGhpcy5vcHRpb25zLm1heFRpbWUpO1xuICAgICAgICBhY3RpdmVSYW5nZSA9IHRoaXMuYWRqdXN0QWN0aXZlUmFuZ2UoYWN0aXZlUmFuZ2UsIG1pblRpbWUsIG1heFRpbWUpO1xuICAgICAgICBhY3RpdmVSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhhY3RpdmVSYW5nZSwgdmFsaWRSYW5nZSk7IC8vIG1pZ2h0IHJldHVybiBudWxsXG4gICAgICAgIC8vIGl0J3MgaW52YWxpZCBpZiB0aGUgb3JpZ2luYWxseSByZXF1ZXN0ZWQgZGF0ZSBpcyBub3QgY29udGFpbmVkLFxuICAgICAgICAvLyBvciBpZiB0aGUgcmFuZ2UgaXMgY29tcGxldGVseSBvdXRzaWRlIG9mIHRoZSB2YWxpZCByYW5nZS5cbiAgICAgICAgaXNWYWxpZCA9IHJhbmdlc0ludGVyc2VjdChjdXJyZW50SW5mby5yYW5nZSwgdmFsaWRSYW5nZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBjb25zdHJhaW50IGZvciB3aGVyZSBwcmV2L25leHQgb3BlcmF0aW9ucyBjYW4gZ28gYW5kIHdoZXJlIGV2ZW50cyBjYW4gYmUgZHJhZ2dlZC9yZXNpemVkIHRvLlxuICAgICAgICAgICAgLy8gYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgc3RhcnQgYW5kIGVuZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgdmFsaWRSYW5nZTogdmFsaWRSYW5nZSxcbiAgICAgICAgICAgIC8vIHJhbmdlIHRoZSB2aWV3IGlzIGZvcm1hbGx5IHJlc3BvbnNpYmxlIGZvci5cbiAgICAgICAgICAgIC8vIGZvciBleGFtcGxlLCBhIG1vbnRoIHZpZXcgbWlnaHQgaGF2ZSAxc3QtMzFzdCwgZXhjbHVkaW5nIHBhZGRlZCBkYXRlc1xuICAgICAgICAgICAgY3VycmVudFJhbmdlOiBjdXJyZW50SW5mby5yYW5nZSxcbiAgICAgICAgICAgIC8vIG5hbWUgb2YgbGFyZ2VzdCB1bml0IGJlaW5nIGRpc3BsYXllZCwgbGlrZSBcIm1vbnRoXCIgb3IgXCJ3ZWVrXCJcbiAgICAgICAgICAgIGN1cnJlbnRSYW5nZVVuaXQ6IGN1cnJlbnRJbmZvLnVuaXQsXG4gICAgICAgICAgICBpc1JhbmdlQWxsRGF5OiBpc1JhbmdlQWxsRGF5LFxuICAgICAgICAgICAgLy8gZGF0ZXMgdGhhdCBkaXNwbGF5IGV2ZW50cyBhbmQgYWNjZXB0IGRyYWctbi1kcm9wXG4gICAgICAgICAgICAvLyB3aWxsIGJlIGBudWxsYCBpZiBubyBkYXRlcyBhY2NlcHQgZXZlbnRzXG4gICAgICAgICAgICBhY3RpdmVSYW5nZTogYWN0aXZlUmFuZ2UsXG4gICAgICAgICAgICAvLyBkYXRlIHJhbmdlIHdpdGggYSByZW5kZXJlZCBza2VsZXRvblxuICAgICAgICAgICAgLy8gaW5jbHVkZXMgbm90LWFjdGl2ZSBkYXlzIHRoYXQgbmVlZCBzb21lIHNvcnQgb2YgRE9NXG4gICAgICAgICAgICByZW5kZXJSYW5nZTogcmVuZGVyUmFuZ2UsXG4gICAgICAgICAgICAvLyBEdXJhdGlvbiBvYmplY3QgdGhhdCBkZW5vdGVzIHRoZSBmaXJzdCB2aXNpYmxlIHRpbWUgb2YgYW55IGdpdmVuIGRheVxuICAgICAgICAgICAgbWluVGltZTogbWluVGltZSxcbiAgICAgICAgICAgIC8vIER1cmF0aW9uIG9iamVjdCB0aGF0IGRlbm90ZXMgdGhlIGV4Y2x1c2l2ZSB2aXNpYmxlIGVuZCB0aW1lIG9mIGFueSBnaXZlbiBkYXlcbiAgICAgICAgICAgIG1heFRpbWU6IG1heFRpbWUsXG4gICAgICAgICAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxuICAgICAgICAgICAgLy8gaG93IGZhciB0aGUgY3VycmVudCBkYXRlIHdpbGwgbW92ZSBmb3IgYSBwcmV2L25leHQgb3BlcmF0aW9uXG4gICAgICAgICAgICBkYXRlSW5jcmVtZW50OiB0aGlzLmJ1aWxkRGF0ZUluY3JlbWVudChjdXJyZW50SW5mby5kdXJhdGlvbilcbiAgICAgICAgICAgIC8vIHBhc3MgYSBmYWxsYmFjayAobWlnaHQgYmUgbnVsbCkgXlxuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGFuIG9iamVjdCB3aXRoIG9wdGlvbmFsIHN0YXJ0L2VuZCBwcm9wZXJ0aWVzLlxuICAgIC8vIEluZGljYXRlcyB0aGUgbWluaW11bS9tYXhpbXVtIGRhdGVzIHRvIGRpc3BsYXkuXG4gICAgLy8gbm90IHJlc3BvbnNpYmxlIGZvciB0cmltbWluZyBoaWRkZW4gZGF5cy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRWYWxpZFJhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZU9wdGlvbigndmFsaWRSYW5nZScsIHRoaXMuY2FsZW5kYXIuZ2V0Tm93KCkpIHx8XG4gICAgICAgICAgICB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTsgLy8gY29tcGxldGVseSBvcGVuLWVuZGVkXG4gICAgfTtcbiAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHRoZSBcImN1cnJlbnRcIiByYW5nZSwgdGhlIHJhbmdlIHRoYXQgaXNcbiAgICAvLyBoaWdobGlnaHRlZCBhcyBiZWluZyB0aGUgY3VycmVudCBtb250aCBmb3IgZXhhbXBsZS5cbiAgICAvLyBTZWUgYnVpbGQoKSBmb3IgYSBkZXNjcmlwdGlvbiBvZiBgZGlyZWN0aW9uYC5cbiAgICAvLyBHdWFyYW50ZWVkIHRvIGhhdmUgYHJhbmdlYCBhbmQgYHVuaXRgIHByb3BlcnRpZXMuIGBkdXJhdGlvbmAgaXMgb3B0aW9uYWwuXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkQ3VycmVudFJhbmdlSW5mbyA9IGZ1bmN0aW9uIChkYXRlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdmlld1NwZWMgPSBfYS52aWV3U3BlYywgZGF0ZUVudiA9IF9hLmRhdGVFbnY7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciB1bml0ID0gbnVsbDtcbiAgICAgICAgdmFyIHJhbmdlID0gbnVsbDtcbiAgICAgICAgdmFyIGRheUNvdW50O1xuICAgICAgICBpZiAodmlld1NwZWMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gdmlld1NwZWMuZHVyYXRpb247XG4gICAgICAgICAgICB1bml0ID0gdmlld1NwZWMuZHVyYXRpb25Vbml0O1xuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24oZGF0ZSwgZGlyZWN0aW9uLCBkdXJhdGlvbiwgdW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGRheUNvdW50ID0gdGhpcy5vcHRpb25zLmRheUNvdW50KSkge1xuICAgICAgICAgICAgdW5pdCA9ICdkYXknO1xuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmJ1aWxkUmFuZ2VGcm9tRGF5Q291bnQoZGF0ZSwgZGlyZWN0aW9uLCBkYXlDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHJhbmdlID0gdGhpcy5idWlsZEN1c3RvbVZpc2libGVSYW5nZShkYXRlKSkpIHtcbiAgICAgICAgICAgIHVuaXQgPSBkYXRlRW52LmdyZWF0ZXN0V2hvbGVVbml0KHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpLnVuaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZ2V0RmFsbGJhY2tEdXJhdGlvbigpO1xuICAgICAgICAgICAgdW5pdCA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkdXJhdGlvbikudW5pdDtcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5idWlsZFJhbmdlRnJvbUR1cmF0aW9uKGRhdGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIHVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGR1cmF0aW9uOiBkdXJhdGlvbiwgdW5pdDogdW5pdCwgcmFuZ2U6IHJhbmdlIH07XG4gICAgfTtcbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuZ2V0RmFsbGJhY2tEdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZGF5OiAxIH0pO1xuICAgIH07XG4gICAgLy8gUmV0dXJucyBhIG5ldyBhY3RpdmVSYW5nZSB0byBoYXZlIHRpbWUgdmFsdWVzICh1bi1hbWJpZ3VhdGUpXG4gICAgLy8gbWluVGltZSBvciBtYXhUaW1lIGNhdXNlcyB0aGUgcmFuZ2UgdG8gZXhwYW5kLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5hZGp1c3RBY3RpdmVSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSwgbWluVGltZSwgbWF4VGltZSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgIGlmICh0aGlzLnZpZXdTcGVjLmNsYXNzLnByb3RvdHlwZS51c2VzTWluTWF4VGltZSkge1xuICAgICAgICAgICAgLy8gZXhwYW5kIGFjdGl2ZSByYW5nZSBpZiBtaW5UaW1lIGlzIG5lZ2F0aXZlICh3aHkgbm90IHdoZW4gcG9zaXRpdmU/KVxuICAgICAgICAgICAgaWYgKGFzUm91Z2hEYXlzKG1pblRpbWUpIDwgMCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuYWRkKHN0YXJ0LCBtaW5UaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV4cGFuZCBhY3RpdmUgcmFuZ2UgaWYgbWF4VGltZSBpcyBiZXlvbmQgb25lIGRheSAod2h5IG5vdCB3aGVuIHBvc2l0aXZlPylcbiAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhtYXhUaW1lKSA+IDEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydE9mRGF5KGVuZCk7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICBlbmQgPSBhZGREYXlzKGVuZCwgLTEpO1xuICAgICAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKGVuZCwgbWF4VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBcImN1cnJlbnRcIiByYW5nZSB3aGVuIGl0IGlzIHNwZWNpZmllZCBhcyBhbiBleHBsaWNpdCBkdXJhdGlvbi5cbiAgICAvLyBgdW5pdGAgaXMgdGhlIGFscmVhZHktY29tcHV0ZWQgZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yIHVuaXQgb2YgZHVyYXRpb24uXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24gPSBmdW5jdGlvbiAoZGF0ZSwgZGlyZWN0aW9uLCBkdXJhdGlvbiwgdW5pdCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIGFsaWdubWVudCA9IHRoaXMub3B0aW9ucy5kYXRlQWxpZ25tZW50O1xuICAgICAgICB2YXIgZGF0ZUluY3JlbWVudElucHV0O1xuICAgICAgICB2YXIgZGF0ZUluY3JlbWVudER1cmF0aW9uO1xuICAgICAgICB2YXIgc3RhcnQ7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIC8vIGNvbXB1dGUgd2hhdCB0aGUgYWxpZ25tZW50IHNob3VsZCBiZVxuICAgICAgICBpZiAoIWFsaWdubWVudCkge1xuICAgICAgICAgICAgZGF0ZUluY3JlbWVudElucHV0ID0gdGhpcy5vcHRpb25zLmRhdGVJbmNyZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZGF0ZUluY3JlbWVudElucHV0KSB7XG4gICAgICAgICAgICAgICAgZGF0ZUluY3JlbWVudER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24oZGF0ZUluY3JlbWVudElucHV0KTtcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHNtYWxsZXIgb2YgdGhlIHR3byB1bml0c1xuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoTXMoZGF0ZUluY3JlbWVudER1cmF0aW9uKSA8IGFzUm91Z2hNcyhkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGRhdGVJbmNyZW1lbnREdXJhdGlvbiwgIWdldFdlZWtzRnJvbUlucHV0KGRhdGVJbmNyZW1lbnRJbnB1dCkpLnVuaXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQgPSB1bml0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsaWdubWVudCA9IHVuaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHZpZXcgZGlzcGxheXMgYSBzaW5nbGUgZGF5IG9yIHNtYWxsZXJcbiAgICAgICAgaWYgKGFzUm91Z2hEYXlzKGR1cmF0aW9uKSA8PSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0hpZGRlbkRheShzdGFydCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydE9mRGF5KHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wdXRlUmVzKCkge1xuICAgICAgICAgICAgc3RhcnQgPSBkYXRlRW52LnN0YXJ0T2YoZGF0ZSwgYWxpZ25tZW50KTtcbiAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKHN0YXJ0LCBkdXJhdGlvbik7XG4gICAgICAgICAgICByZXMgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICBjb21wdXRlUmVzKCk7XG4gICAgICAgIC8vIGlmIHJhbmdlIGlzIGNvbXBsZXRlbHkgZW52ZWxvcGVkIGJ5IGhpZGRlbiBkYXlzLCBnbyBwYXN0IHRoZSBoaWRkZW4gZGF5c1xuICAgICAgICBpZiAoIXRoaXMudHJpbUhpZGRlbkRheXMocmVzKSkge1xuICAgICAgICAgICAgZGF0ZSA9IHRoaXMuc2tpcEhpZGRlbkRheXMoZGF0ZSwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbXB1dGVSZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBcImN1cnJlbnRcIiByYW5nZSB3aGVuIGEgZGF5Q291bnQgaXMgc3BlY2lmaWVkLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJhbmdlRnJvbURheUNvdW50ID0gZnVuY3Rpb24gKGRhdGUsIGRpcmVjdGlvbiwgZGF5Q291bnQpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciBjdXN0b21BbGlnbm1lbnQgPSB0aGlzLm9wdGlvbnMuZGF0ZUFsaWdubWVudDtcbiAgICAgICAgdmFyIHJ1bm5pbmdDb3VudCA9IDA7XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGU7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIGlmIChjdXN0b21BbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mKHN0YXJ0LCBjdXN0b21BbGlnbm1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7XG4gICAgICAgIHN0YXJ0ID0gdGhpcy5za2lwSGlkZGVuRGF5cyhzdGFydCwgZGlyZWN0aW9uKTtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGVuZCA9IGFkZERheXMoZW5kLCAxKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0hpZGRlbkRheShlbmQpKSB7XG4gICAgICAgICAgICAgICAgcnVubmluZ0NvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHJ1bm5pbmdDb3VudCA8IGRheUNvdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGEgbm9ybWFsaXplZCByYW5nZSBvYmplY3QgZm9yIHRoZSBcInZpc2libGVcIiByYW5nZSxcbiAgICAvLyB3aGljaCBpcyBhIHdheSB0byBkZWZpbmUgdGhlIGN1cnJlbnRSYW5nZSBhbmQgYWN0aXZlUmFuZ2UgYXQgdGhlIHNhbWUgdGltZS5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRDdXN0b21WaXNpYmxlUmFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIHZpc2libGVSYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPcHRpb24oJ3Zpc2libGVSYW5nZScsIGRhdGVFbnYudG9EYXRlKGRhdGUpKTtcbiAgICAgICAgaWYgKHZpc2libGVSYW5nZSAmJiAodmlzaWJsZVJhbmdlLnN0YXJ0ID09IG51bGwgfHwgdmlzaWJsZVJhbmdlLmVuZCA9PSBudWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpc2libGVSYW5nZTtcbiAgICB9O1xuICAgIC8vIENvbXB1dGVzIHRoZSByYW5nZSB0aGF0IHdpbGwgcmVwcmVzZW50IHRoZSBlbGVtZW50L2NlbGxzIGZvciAqcmVuZGVyaW5nKixcbiAgICAvLyBidXQgd2hpY2ggbWF5IGhhdmUgdm9pZGVkIGRheXMvdGltZXMuXG4gICAgLy8gbm90IHJlc3BvbnNpYmxlIGZvciB0cmltbWluZyBoaWRkZW4gZGF5cy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRSZW5kZXJSYW5nZSA9IGZ1bmN0aW9uIChjdXJyZW50UmFuZ2UsIGN1cnJlbnRSYW5nZVVuaXQsIGlzUmFuZ2VBbGxEYXkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRSYW5nZTtcbiAgICB9O1xuICAgIC8vIENvbXB1dGUgdGhlIGR1cmF0aW9uIHZhbHVlIHRoYXQgc2hvdWxkIGJlIGFkZGVkL3N1YnN0cmFjdGVkIHRvIHRoZSBjdXJyZW50IGRhdGVcbiAgICAvLyB3aGVuIGEgcHJldi9uZXh0IG9wZXJhdGlvbiBoYXBwZW5zLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZERhdGVJbmNyZW1lbnQgPSBmdW5jdGlvbiAoZmFsbGJhY2spIHtcbiAgICAgICAgdmFyIGRhdGVJbmNyZW1lbnRJbnB1dCA9IHRoaXMub3B0aW9ucy5kYXRlSW5jcmVtZW50O1xuICAgICAgICB2YXIgY3VzdG9tQWxpZ25tZW50O1xuICAgICAgICBpZiAoZGF0ZUluY3JlbWVudElucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oZGF0ZUluY3JlbWVudElucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoY3VzdG9tQWxpZ25tZW50ID0gdGhpcy5vcHRpb25zLmRhdGVBbGlnbm1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oMSwgY3VzdG9tQWxpZ25tZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZGF5czogMSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQXJndW1lbnRzIGFmdGVyIG5hbWUgd2lsbCBiZSBmb3J3YXJkZWQgdG8gYSBoeXBvdGhldGljYWwgZnVuY3Rpb24gdmFsdWVcbiAgICAvLyBXQVJOSU5HOiBwYXNzZWQtaW4gYXJndW1lbnRzIHdpbGwgYmUgZ2l2ZW4gdG8gZ2VuZXJhdG9yIGZ1bmN0aW9ucyBhcy1pcyBhbmQgY2FuIGNhdXNlIHNpZGUtZWZmZWN0cy5cbiAgICAvLyBBbHdheXMgY2xvbmUgeW91ciBvYmplY3RzIGlmIHlvdSBmZWFyIG11dGF0aW9uLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5nZXRSYW5nZU9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG90aGVyQXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gdGhpcy5vcHRpb25zW25hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KG51bGwsIG90aGVyQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgdmFsID0gcGFyc2VSYW5nZSh2YWwsIHRoaXMuZGF0ZUVudik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgdmFsID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZSh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICAvKiBIaWRkZW4gRGF5c1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgLy8gSW5pdGlhbGl6ZXMgaW50ZXJuYWwgdmFyaWFibGVzIHJlbGF0ZWQgdG8gY2FsY3VsYXRpbmcgaGlkZGVuIGRheXMtb2Ytd2Vla1xuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5pbml0SGlkZGVuRGF5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkRheXMgPSB0aGlzLm9wdGlvbnMuaGlkZGVuRGF5cyB8fCBbXTsgLy8gYXJyYXkgb2YgZGF5LW9mLXdlZWsgaW5kaWNlcyB0aGF0IGFyZSBoaWRkZW5cbiAgICAgICAgdmFyIGlzSGlkZGVuRGF5SGFzaCA9IFtdOyAvLyBpcyB0aGUgZGF5LW9mLXdlZWsgaGlkZGVuPyAoaGFzaCB3aXRoIGRheS1vZi13ZWVrLWluZGV4IC0+IGJvb2wpXG4gICAgICAgIHZhciBkYXlDbnQgPSAwO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53ZWVrZW5kcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGhpZGRlbkRheXMucHVzaCgwLCA2KTsgLy8gMD1zdW5kYXksIDY9c2F0dXJkYXlcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIShpc0hpZGRlbkRheUhhc2hbaV0gPSBoaWRkZW5EYXlzLmluZGV4T2YoaSkgIT09IC0xKSkge1xuICAgICAgICAgICAgICAgIGRheUNudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZGF5Q250KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaGlkZGVuRGF5cycpOyAvLyBhbGwgZGF5cyB3ZXJlIGhpZGRlbj8gYmFkLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNIaWRkZW5EYXlIYXNoID0gaXNIaWRkZW5EYXlIYXNoO1xuICAgIH07XG4gICAgLy8gUmVtb3ZlIGRheXMgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIHJhbmdlIHRoYXQgYXJlIGNvbXB1dGVkIGFzIGhpZGRlbi5cbiAgICAvLyBJZiB0aGUgd2hvbGUgcmFuZ2UgaXMgdHJpbW1lZCBvZmYsIHJldHVybnMgbnVsbFxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS50cmltSGlkZGVuRGF5cyA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IHJhbmdlLmVuZDtcbiAgICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoZW5kLCAtMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgfHwgc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8vIElzIHRoZSBjdXJyZW50IGRheSBoaWRkZW4/XG4gICAgLy8gYGRheWAgaXMgYSBkYXktb2Ytd2VlayBpbmRleCAoMC02KSwgb3IgYSBEYXRlICh1c2VkIGZvciBVVEMpXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmlzSGlkZGVuRGF5ID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICBpZiAoZGF5IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgZGF5ID0gZGF5LmdldFVUQ0RheSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlzSGlkZGVuRGF5SGFzaFtkYXldO1xuICAgIH07XG4gICAgLy8gSW5jcmVtZW50aW5nIHRoZSBjdXJyZW50IGRheSB1bnRpbCBpdCBpcyBubyBsb25nZXIgYSBoaWRkZW4gZGF5LCByZXR1cm5pbmcgYSBjb3B5LlxuICAgIC8vIERPRVMgTk9UIENPTlNJREVSIHZhbGlkUmFuZ2UhXG4gICAgLy8gSWYgdGhlIGluaXRpYWwgdmFsdWUgb2YgYGRhdGVgIGlzIG5vdCBhIGhpZGRlbiBkYXksIGRvbid0IGRvIGFueXRoaW5nLlxuICAgIC8vIFBhc3MgYGlzRXhjbHVzaXZlYCBhcyBgdHJ1ZWAgaWYgeW91IGFyZSBkZWFsaW5nIHdpdGggYW4gZW5kIGRhdGUuXG4gICAgLy8gYGluY2AgZGVmYXVsdHMgdG8gYDFgIChpbmNyZW1lbnQgb25lIGRheSBmb3J3YXJkIGVhY2ggdGltZSlcbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuc2tpcEhpZGRlbkRheXMgPSBmdW5jdGlvbiAoZGF0ZSwgaW5jLCBpc0V4Y2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jID09PSB2b2lkIDApIHsgaW5jID0gMTsgfVxuICAgICAgICBpZiAoaXNFeGNsdXNpdmUgPT09IHZvaWQgMCkgeyBpc0V4Y2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHdoaWxlICh0aGlzLmlzSGlkZGVuRGF5SGFzaFsoZGF0ZS5nZXRVVENEYXkoKSArIChpc0V4Y2x1c2l2ZSA/IGluYyA6IDApICsgNykgJSA3XSkge1xuICAgICAgICAgICAgZGF0ZSA9IGFkZERheXMoZGF0ZSwgaW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRlUHJvZmlsZUdlbmVyYXRvcjtcbn0oKSk7XG4vLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGF2b2lkIGNvbXBhcmluZyBEYXRlUHJvZmlsZXMuIGl0J3MgdGVkaW91c1xuZnVuY3Rpb24gaXNEYXRlUHJvZmlsZXNFcXVhbChwMCwgcDEpIHtcbiAgICByZXR1cm4gcmFuZ2VzRXF1YWwocDAudmFsaWRSYW5nZSwgcDEudmFsaWRSYW5nZSkgJiZcbiAgICAgICAgcmFuZ2VzRXF1YWwocDAuYWN0aXZlUmFuZ2UsIHAxLmFjdGl2ZVJhbmdlKSAmJlxuICAgICAgICByYW5nZXNFcXVhbChwMC5yZW5kZXJSYW5nZSwgcDEucmVuZGVyUmFuZ2UpICYmXG4gICAgICAgIGR1cmF0aW9uc0VxdWFsKHAwLm1pblRpbWUsIHAxLm1pblRpbWUpICYmXG4gICAgICAgIGR1cmF0aW9uc0VxdWFsKHAwLm1heFRpbWUsIHAxLm1heFRpbWUpO1xuICAgIC8qXG4gICAgVE9ETzogY29tcGFyZSBtb3JlP1xuICAgICAgY3VycmVudFJhbmdlOiBEYXRlUmFuZ2VcbiAgICAgIGN1cnJlbnRSYW5nZVVuaXQ6IHN0cmluZ1xuICAgICAgaXNSYW5nZUFsbERheTogYm9vbGVhblxuICAgICAgaXNWYWxpZDogYm9vbGVhblxuICAgICAgZGF0ZUluY3JlbWVudDogRHVyYXRpb25cbiAgICAqL1xufVxuXG5mdW5jdGlvbiByZWR1Y2UgKHN0YXRlLCBhY3Rpb24sIGNhbGVuZGFyKSB7XG4gICAgdmFyIHZpZXdUeXBlID0gcmVkdWNlVmlld1R5cGUoc3RhdGUudmlld1R5cGUsIGFjdGlvbik7XG4gICAgdmFyIGRhdGVQcm9maWxlID0gcmVkdWNlRGF0ZVByb2ZpbGUoc3RhdGUuZGF0ZVByb2ZpbGUsIGFjdGlvbiwgc3RhdGUuY3VycmVudERhdGUsIHZpZXdUeXBlLCBjYWxlbmRhcik7XG4gICAgdmFyIGV2ZW50U291cmNlcyA9IHJlZHVjZUV2ZW50U291cmNlcyhzdGF0ZS5ldmVudFNvdXJjZXMsIGFjdGlvbiwgZGF0ZVByb2ZpbGUsIGNhbGVuZGFyKTtcbiAgICB2YXIgbmV4dFN0YXRlID0gX19hc3NpZ24oe30sIHN0YXRlLCB7IHZpZXdUeXBlOiB2aWV3VHlwZSxcbiAgICAgICAgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZTogcmVkdWNlQ3VycmVudERhdGUoc3RhdGUuY3VycmVudERhdGUsIGFjdGlvbiwgZGF0ZVByb2ZpbGUpLCBldmVudFNvdXJjZXM6IGV2ZW50U291cmNlcywgZXZlbnRTdG9yZTogcmVkdWNlRXZlbnRTdG9yZShzdGF0ZS5ldmVudFN0b3JlLCBhY3Rpb24sIGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUsIGNhbGVuZGFyKSwgZGF0ZVNlbGVjdGlvbjogcmVkdWNlRGF0ZVNlbGVjdGlvbihzdGF0ZS5kYXRlU2VsZWN0aW9uLCBhY3Rpb24sIGNhbGVuZGFyKSwgZXZlbnRTZWxlY3Rpb246IHJlZHVjZVNlbGVjdGVkRXZlbnQoc3RhdGUuZXZlbnRTZWxlY3Rpb24sIGFjdGlvbiksIGV2ZW50RHJhZzogcmVkdWNlRXZlbnREcmFnKHN0YXRlLmV2ZW50RHJhZywgYWN0aW9uLCBldmVudFNvdXJjZXMsIGNhbGVuZGFyKSwgZXZlbnRSZXNpemU6IHJlZHVjZUV2ZW50UmVzaXplKHN0YXRlLmV2ZW50UmVzaXplLCBhY3Rpb24sIGV2ZW50U291cmNlcywgY2FsZW5kYXIpLCBldmVudFNvdXJjZUxvYWRpbmdMZXZlbDogY29tcHV0ZUxvYWRpbmdMZXZlbChldmVudFNvdXJjZXMpLCBsb2FkaW5nTGV2ZWw6IGNvbXB1dGVMb2FkaW5nTGV2ZWwoZXZlbnRTb3VyY2VzKSB9KTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLnJlZHVjZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcmVkdWNlckZ1bmMgPSBfYVtfaV07XG4gICAgICAgIG5leHRTdGF0ZSA9IHJlZHVjZXJGdW5jKG5leHRTdGF0ZSwgYWN0aW9uLCBjYWxlbmRhcik7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGFjdGlvbi50eXBlLCBuZXh0U3RhdGUpXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbn1cbmZ1bmN0aW9uIHJlZHVjZVZpZXdUeXBlKGN1cnJlbnRWaWV3VHlwZSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24udmlld1R5cGU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZpZXdUeXBlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZURhdGVQcm9maWxlKGN1cnJlbnREYXRlUHJvZmlsZSwgYWN0aW9uLCBjdXJyZW50RGF0ZSwgdmlld1R5cGUsIGNhbGVuZGFyKSB7XG4gICAgdmFyIG5ld0RhdGVQcm9maWxlO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUFJFVic6XG4gICAgICAgICAgICBuZXdEYXRlUHJvZmlsZSA9IGNhbGVuZGFyLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV0uYnVpbGRQcmV2KGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBjYWxlbmRhci5kYXRlUHJvZmlsZUdlbmVyYXRvcnNbdmlld1R5cGVdLmJ1aWxkTmV4dChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTRVRfREFURSc6XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnREYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSB8fFxuICAgICAgICAgICAgICAgICFyYW5nZUNvbnRhaW5zTWFya2VyKGN1cnJlbnREYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UsIGFjdGlvbi5kYXRlTWFya2VyKSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGVQcm9maWxlID0gY2FsZW5kYXIuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzW3ZpZXdUeXBlXS5idWlsZChhY3Rpb24uZGF0ZU1hcmtlciwgdW5kZWZpbmVkLCB0cnVlIC8vIGZvcmNlVG9WYWxpZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU0VUX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICB2YXIgZ2VuZXJhdG9yID0gY2FsZW5kYXIuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzW3ZpZXdUeXBlXTtcbiAgICAgICAgICAgIGlmICghZ2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHZpZXdUeXBlID9cbiAgICAgICAgICAgICAgICAgICAgJ1RoZSBGdWxsQ2FsZW5kYXIgdmlldyBcIicgKyB2aWV3VHlwZSArICdcIiBkb2VzIG5vdCBleGlzdC4gTWFrZSBzdXJlIHlvdXIgcGx1Z2lucyBhcmUgbG9hZGVkIGNvcnJlY3RseS4nIDpcbiAgICAgICAgICAgICAgICAgICAgJ05vIGF2YWlsYWJsZSBGdWxsQ2FsZW5kYXIgdmlldyBwbHVnaW5zLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBnZW5lcmF0b3IuYnVpbGQoYWN0aW9uLmRhdGVNYXJrZXIgfHwgY3VycmVudERhdGUsIHVuZGVmaW5lZCwgdHJ1ZSAvLyBmb3JjZVRvVmFsaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKG5ld0RhdGVQcm9maWxlICYmXG4gICAgICAgIG5ld0RhdGVQcm9maWxlLmlzVmFsaWQgJiZcbiAgICAgICAgIShjdXJyZW50RGF0ZVByb2ZpbGUgJiYgaXNEYXRlUHJvZmlsZXNFcXVhbChjdXJyZW50RGF0ZVByb2ZpbGUsIG5ld0RhdGVQcm9maWxlKSkpIHtcbiAgICAgICAgcmV0dXJuIG5ld0RhdGVQcm9maWxlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlUHJvZmlsZTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWR1Y2VDdXJyZW50RGF0ZShjdXJyZW50RGF0ZSwgYWN0aW9uLCBkYXRlUHJvZmlsZSkge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUFJFVic6XG4gICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIHZhciBuZXdEYXRlID0gYWN0aW9uLmRhdGVNYXJrZXIgfHwgY3VycmVudERhdGU7XG4gICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UgJiYgIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIG5ld0RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdEYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZURhdGVTZWxlY3Rpb24oY3VycmVudFNlbGVjdGlvbiwgYWN0aW9uLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VMRUNUX0RBVEVTJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uc2VsZWN0aW9uO1xuICAgICAgICBjYXNlICdVTlNFTEVDVF9EQVRFUyc6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50U2VsZWN0aW9uO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZVNlbGVjdGVkRXZlbnQoY3VycmVudEluc3RhbmNlSWQsIGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VMRUNUX0VWRU5UJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZXZlbnRJbnN0YW5jZUlkO1xuICAgICAgICBjYXNlICdVTlNFTEVDVF9FVkVOVCc6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEluc3RhbmNlSWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVkdWNlRXZlbnREcmFnKGN1cnJlbnREcmFnLCBhY3Rpb24sIHNvdXJjZXMsIGNhbGVuZGFyKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdTRVRfRVZFTlRfRFJBRyc6XG4gICAgICAgICAgICB2YXIgbmV3RHJhZyA9IGFjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRFdmVudHM6IG5ld0RyYWcuYWZmZWN0ZWRFdmVudHMsXG4gICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbmV3RHJhZy5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IG5ld0RyYWcuaXNFdmVudCxcbiAgICAgICAgICAgICAgICBvcmlnU2VnOiBuZXdEcmFnLm9yaWdTZWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ1VOU0VUX0VWRU5UX0RSQUcnOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERyYWc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVkdWNlRXZlbnRSZXNpemUoY3VycmVudFJlc2l6ZSwgYWN0aW9uLCBzb3VyY2VzLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VUX0VWRU5UX1JFU0laRSc6XG4gICAgICAgICAgICB2YXIgbmV3UmVzaXplID0gYWN0aW9uLnN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogbmV3UmVzaXplLmFmZmVjdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IG5ld1Jlc2l6ZS5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IG5ld1Jlc2l6ZS5pc0V2ZW50LFxuICAgICAgICAgICAgICAgIG9yaWdTZWc6IG5ld1Jlc2l6ZS5vcmlnU2VnXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdVTlNFVF9FVkVOVF9SRVNJWkUnOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFJlc2l6ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wdXRlTG9hZGluZ0xldmVsKGV2ZW50U291cmNlcykge1xuICAgIHZhciBjbnQgPSAwO1xuICAgIGZvciAodmFyIHNvdXJjZUlkIGluIGV2ZW50U291cmNlcykge1xuICAgICAgICBpZiAoZXZlbnRTb3VyY2VzW3NvdXJjZUlkXS5pc0ZldGNoaW5nKSB7XG4gICAgICAgICAgICBjbnQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY250O1xufVxuXG52YXIgU1RBTkRBUkRfUFJPUFMgPSB7XG4gICAgc3RhcnQ6IG51bGwsXG4gICAgZW5kOiBudWxsLFxuICAgIGFsbERheTogQm9vbGVhblxufTtcbmZ1bmN0aW9uIHBhcnNlRGF0ZVNwYW4ocmF3LCBkYXRlRW52LCBkZWZhdWx0RHVyYXRpb24pIHtcbiAgICB2YXIgc3BhbiA9IHBhcnNlT3BlbkRhdGVTcGFuKHJhdywgZGF0ZUVudik7XG4gICAgdmFyIHJhbmdlID0gc3Bhbi5yYW5nZTtcbiAgICBpZiAoIXJhbmdlLnN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoIXJhbmdlLmVuZCkge1xuICAgICAgICBpZiAoZGVmYXVsdER1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2UuZW5kID0gZGF0ZUVudi5hZGQocmFuZ2Uuc3RhcnQsIGRlZmF1bHREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwYW47XG59XG4vKlxuVE9ETzogc29tZWhvdyBjb21iaW5lIHdpdGggcGFyc2VSYW5nZT9cbldpbGwgcmV0dXJuIG51bGwgaWYgdGhlIHN0YXJ0L2VuZCBwcm9wcyB3ZXJlIHByZXNlbnQgYnV0IHBhcnNlZCBpbnZhbGlkbHkuXG4qL1xuZnVuY3Rpb24gcGFyc2VPcGVuRGF0ZVNwYW4ocmF3LCBkYXRlRW52KSB7XG4gICAgdmFyIGxlZnRvdmVycyA9IHt9O1xuICAgIHZhciBzdGFuZGFyZFByb3BzID0gcmVmaW5lUHJvcHMocmF3LCBTVEFOREFSRF9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgdmFyIHN0YXJ0TWV0YSA9IHN0YW5kYXJkUHJvcHMuc3RhcnQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5zdGFydCkgOiBudWxsO1xuICAgIHZhciBlbmRNZXRhID0gc3RhbmRhcmRQcm9wcy5lbmQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5lbmQpIDogbnVsbDtcbiAgICB2YXIgYWxsRGF5ID0gc3RhbmRhcmRQcm9wcy5hbGxEYXk7XG4gICAgaWYgKGFsbERheSA9PSBudWxsKSB7XG4gICAgICAgIGFsbERheSA9IChzdGFydE1ldGEgJiYgc3RhcnRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKSAmJlxuICAgICAgICAgICAgKCFlbmRNZXRhIHx8IGVuZE1ldGEuaXNUaW1lVW5zcGVjaWZpZWQpO1xuICAgIH1cbiAgICAvLyB1c2UgdGhpcyBsZWZ0b3ZlciBvYmplY3QgYXMgdGhlIHNlbGVjdGlvbiBvYmplY3RcbiAgICBsZWZ0b3ZlcnMucmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0OiBzdGFydE1ldGEgPyBzdGFydE1ldGEubWFya2VyIDogbnVsbCxcbiAgICAgICAgZW5kOiBlbmRNZXRhID8gZW5kTWV0YS5tYXJrZXIgOiBudWxsXG4gICAgfTtcbiAgICBsZWZ0b3ZlcnMuYWxsRGF5ID0gYWxsRGF5O1xuICAgIHJldHVybiBsZWZ0b3ZlcnM7XG59XG5mdW5jdGlvbiBpc0RhdGVTcGFuc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgIHJldHVybiByYW5nZXNFcXVhbChzcGFuMC5yYW5nZSwgc3BhbjEucmFuZ2UpICYmXG4gICAgICAgIHNwYW4wLmFsbERheSA9PT0gc3BhbjEuYWxsRGF5ICYmXG4gICAgICAgIGlzU3BhblByb3BzRXF1YWwoc3BhbjAsIHNwYW4xKTtcbn1cbi8vIHRoZSBOT04tREFURS1SRUxBVEVEIHByb3BzXG5mdW5jdGlvbiBpc1NwYW5Qcm9wc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4xKSB7XG4gICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ3JhbmdlJyAmJiBwcm9wTmFtZSAhPT0gJ2FsbERheScpIHtcbiAgICAgICAgICAgIGlmIChzcGFuMFtwcm9wTmFtZV0gIT09IHNwYW4xW3Byb3BOYW1lXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhcmUgdGhlcmUgYW55IHByb3BzIHRoYXQgc3BhbjAgaGFzIHRoYXQgc3BhbjEgRE9FU04nVCBoYXZlP1xuICAgIC8vIGJvdGggaGF2ZSByYW5nZS9hbGxEYXksIHNvIG5vIG5lZWQgdG8gc3BlY2lhbC1jYXNlLlxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4wKSB7XG4gICAgICAgIGlmICghKHByb3BOYW1lIGluIHNwYW4xKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYnVpbGREYXRlU3BhbkFwaShzcGFuLCBkYXRlRW52KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGRhdGVFbnYudG9EYXRlKHNwYW4ucmFuZ2Uuc3RhcnQpLFxuICAgICAgICBlbmQ6IGRhdGVFbnYudG9EYXRlKHNwYW4ucmFuZ2UuZW5kKSxcbiAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICBlbmRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2UuZW5kLCB7IG9taXRUaW1lOiBzcGFuLmFsbERheSB9KSxcbiAgICAgICAgYWxsRGF5OiBzcGFuLmFsbERheVxuICAgIH07XG59XG5mdW5jdGlvbiBidWlsZERhdGVQb2ludEFwaShzcGFuLCBkYXRlRW52KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoc3Bhbi5yYW5nZS5zdGFydCksXG4gICAgICAgIGRhdGVTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICBhbGxEYXk6IHNwYW4uYWxsRGF5XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZhYnJpY2F0ZUV2ZW50UmFuZ2UoZGF0ZVNwYW4sIGV2ZW50VWlCYXNlcywgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZih7IGVkaXRhYmxlOiBmYWxzZSB9LCAnJywgLy8gc291cmNlSWRcbiAgICBkYXRlU3Bhbi5hbGxEYXksIHRydWUsIC8vIGhhc0VuZFxuICAgIGNhbGVuZGFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWY6IGRlZixcbiAgICAgICAgdWk6IGNvbXBpbGVFdmVudFVpKGRlZiwgZXZlbnRVaUJhc2VzKSxcbiAgICAgICAgaW5zdGFuY2U6IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCBkYXRlU3Bhbi5yYW5nZSksXG4gICAgICAgIHJhbmdlOiBkYXRlU3Bhbi5yYW5nZSxcbiAgICAgICAgaXNTdGFydDogdHJ1ZSxcbiAgICAgICAgaXNFbmQ6IHRydWVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlVmlld0RlZnMoZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgIHZhciBoYXNoID0ge307XG4gICAgdmFyIHZpZXdUeXBlO1xuICAgIGZvciAodmlld1R5cGUgaW4gZGVmYXVsdENvbmZpZ3MpIHtcbiAgICAgICAgZW5zdXJlVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgfVxuICAgIGZvciAodmlld1R5cGUgaW4gb3ZlcnJpZGVDb25maWdzKSB7XG4gICAgICAgIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpIHtcbiAgICBpZiAoaGFzaFt2aWV3VHlwZV0pIHtcbiAgICAgICAgcmV0dXJuIGhhc2hbdmlld1R5cGVdO1xuICAgIH1cbiAgICB2YXIgdmlld0RlZiA9IGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgaWYgKHZpZXdEZWYpIHtcbiAgICAgICAgaGFzaFt2aWV3VHlwZV0gPSB2aWV3RGVmO1xuICAgIH1cbiAgICByZXR1cm4gdmlld0RlZjtcbn1cbmZ1bmN0aW9uIGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgIHZhciBkZWZhdWx0Q29uZmlnID0gZGVmYXVsdENvbmZpZ3Nbdmlld1R5cGVdO1xuICAgIHZhciBvdmVycmlkZUNvbmZpZyA9IG92ZXJyaWRlQ29uZmlnc1t2aWV3VHlwZV07XG4gICAgdmFyIHF1ZXJ5UHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAoZGVmYXVsdENvbmZpZyAmJiBkZWZhdWx0Q29uZmlnW25hbWVdICE9PSBudWxsKSA/IGRlZmF1bHRDb25maWdbbmFtZV0gOlxuICAgICAgICAgICAgKChvdmVycmlkZUNvbmZpZyAmJiBvdmVycmlkZUNvbmZpZ1tuYW1lXSAhPT0gbnVsbCkgPyBvdmVycmlkZUNvbmZpZ1tuYW1lXSA6IG51bGwpO1xuICAgIH07XG4gICAgdmFyIHRoZUNsYXNzID0gcXVlcnlQcm9wKCdjbGFzcycpO1xuICAgIHZhciBzdXBlclR5cGUgPSBxdWVyeVByb3AoJ3N1cGVyVHlwZScpO1xuICAgIGlmICghc3VwZXJUeXBlICYmIHRoZUNsYXNzKSB7XG4gICAgICAgIHN1cGVyVHlwZSA9XG4gICAgICAgICAgICBmaW5kVmlld05hbWVCeVN1YmNsYXNzKHRoZUNsYXNzLCBvdmVycmlkZUNvbmZpZ3MpIHx8XG4gICAgICAgICAgICAgICAgZmluZFZpZXdOYW1lQnlTdWJjbGFzcyh0aGVDbGFzcywgZGVmYXVsdENvbmZpZ3MpO1xuICAgIH1cbiAgICB2YXIgc3VwZXJEZWYgPSBudWxsO1xuICAgIGlmIChzdXBlclR5cGUpIHtcbiAgICAgICAgaWYgKHN1cGVyVHlwZSA9PT0gdmlld1R5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBoYXZlIGEgY3VzdG9tIHZpZXcgdHlwZSB0aGF0IHJlZmVyZW5jZXMgaXRzZWxmJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXJEZWYgPSBlbnN1cmVWaWV3RGVmKHN1cGVyVHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgfVxuICAgIGlmICghdGhlQ2xhc3MgJiYgc3VwZXJEZWYpIHtcbiAgICAgICAgdGhlQ2xhc3MgPSBzdXBlckRlZi5jbGFzcztcbiAgICB9XG4gICAgaWYgKCF0aGVDbGFzcykge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gZG9uJ3QgdGhyb3cgYSB3YXJuaW5nLCBtaWdodCBiZSBzZXR0aW5ncyBmb3IgYSBzaW5nbGUtdW5pdCB2aWV3XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHZpZXdUeXBlLFxuICAgICAgICBjbGFzczogdGhlQ2xhc3MsXG4gICAgICAgIGRlZmF1bHRzOiBfX2Fzc2lnbih7fSwgKHN1cGVyRGVmID8gc3VwZXJEZWYuZGVmYXVsdHMgOiB7fSksIChkZWZhdWx0Q29uZmlnID8gZGVmYXVsdENvbmZpZy5vcHRpb25zIDoge30pKSxcbiAgICAgICAgb3ZlcnJpZGVzOiBfX2Fzc2lnbih7fSwgKHN1cGVyRGVmID8gc3VwZXJEZWYub3ZlcnJpZGVzIDoge30pLCAob3ZlcnJpZGVDb25maWcgPyBvdmVycmlkZUNvbmZpZy5vcHRpb25zIDoge30pKVxuICAgIH07XG59XG5mdW5jdGlvbiBmaW5kVmlld05hbWVCeVN1YmNsYXNzKHZpZXdTdWJjbGFzcywgY29uZmlncykge1xuICAgIHZhciBzdXBlclByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZpZXdTdWJjbGFzcy5wcm90b3R5cGUpO1xuICAgIGZvciAodmFyIHZpZXdUeXBlIGluIGNvbmZpZ3MpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IGNvbmZpZ3Nbdmlld1R5cGVdO1xuICAgICAgICAvLyBuZWVkIERJUkVDVCBzdWJjbGFzcywgc28gaW5zdGFuY2VvZiB3b24ndCBkbyBpdFxuICAgICAgICBpZiAocGFyc2VkLmNsYXNzICYmIHBhcnNlZC5jbGFzcy5wcm90b3R5cGUgPT09IHN1cGVyUHJvdG8pIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3VHlwZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmlld0NvbmZpZ3MoaW5wdXRzKSB7XG4gICAgcmV0dXJuIG1hcEhhc2goaW5wdXRzLCBwYXJzZVZpZXdDb25maWcpO1xufVxudmFyIFZJRVdfREVGX1BST1BTID0ge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjbGFzczogbnVsbFxufTtcbmZ1bmN0aW9uIHBhcnNlVmlld0NvbmZpZyhpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW5wdXQgPSB7IGNsYXNzOiBpbnB1dCB9O1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKGlucHV0LCBWSUVXX0RFRl9QUk9QUywge30sIG9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1cGVyVHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgY2xhc3M6IHByb3BzLmNsYXNzLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRWaWV3U3BlY3MoZGVmYXVsdElucHV0cywgb3B0aW9uc01hbmFnZXIpIHtcbiAgICB2YXIgZGVmYXVsdENvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKGRlZmF1bHRJbnB1dHMpO1xuICAgIHZhciBvdmVycmlkZUNvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKG9wdGlvbnNNYW5hZ2VyLm92ZXJyaWRlcy52aWV3cyk7XG4gICAgdmFyIHZpZXdEZWZzID0gY29tcGlsZVZpZXdEZWZzKGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgIHJldHVybiBtYXBIYXNoKHZpZXdEZWZzLCBmdW5jdGlvbiAodmlld0RlZikge1xuICAgICAgICByZXR1cm4gYnVpbGRWaWV3U3BlYyh2aWV3RGVmLCBvdmVycmlkZUNvbmZpZ3MsIG9wdGlvbnNNYW5hZ2VyKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGJ1aWxkVmlld1NwZWModmlld0RlZiwgb3ZlcnJpZGVDb25maWdzLCBvcHRpb25zTWFuYWdlcikge1xuICAgIHZhciBkdXJhdGlvbklucHV0ID0gdmlld0RlZi5vdmVycmlkZXMuZHVyYXRpb24gfHxcbiAgICAgICAgdmlld0RlZi5kZWZhdWx0cy5kdXJhdGlvbiB8fFxuICAgICAgICBvcHRpb25zTWFuYWdlci5keW5hbWljT3ZlcnJpZGVzLmR1cmF0aW9uIHx8XG4gICAgICAgIG9wdGlvbnNNYW5hZ2VyLm92ZXJyaWRlcy5kdXJhdGlvbjtcbiAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgIHZhciBkdXJhdGlvblVuaXQgPSAnJztcbiAgICB2YXIgc2luZ2xlVW5pdCA9ICcnO1xuICAgIHZhciBzaW5nbGVVbml0T3ZlcnJpZGVzID0ge307XG4gICAgaWYgKGR1cmF0aW9uSW5wdXQpIHtcbiAgICAgICAgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihkdXJhdGlvbklucHV0KTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7IC8vIHZhbGlkP1xuICAgICAgICAgICAgdmFyIGRlbm9tID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGR1cmF0aW9uLCAhZ2V0V2Vla3NGcm9tSW5wdXQoZHVyYXRpb25JbnB1dCkpO1xuICAgICAgICAgICAgZHVyYXRpb25Vbml0ID0gZGVub20udW5pdDtcbiAgICAgICAgICAgIGlmIChkZW5vbS52YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHNpbmdsZVVuaXQgPSBkdXJhdGlvblVuaXQ7XG4gICAgICAgICAgICAgICAgc2luZ2xlVW5pdE92ZXJyaWRlcyA9IG92ZXJyaWRlQ29uZmlnc1tkdXJhdGlvblVuaXRdID8gb3ZlcnJpZGVDb25maWdzW2R1cmF0aW9uVW5pdF0ub3B0aW9ucyA6IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBxdWVyeUJ1dHRvblRleHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgYnV0dG9uVGV4dE1hcCA9IG9wdGlvbnMuYnV0dG9uVGV4dCB8fCB7fTtcbiAgICAgICAgdmFyIGJ1dHRvblRleHRLZXkgPSB2aWV3RGVmLmRlZmF1bHRzLmJ1dHRvblRleHRLZXk7XG4gICAgICAgIGlmIChidXR0b25UZXh0S2V5ICE9IG51bGwgJiYgYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBidXR0b25UZXh0TWFwW3ZpZXdEZWYudHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHZpZXdEZWYudHlwZSxcbiAgICAgICAgY2xhc3M6IHZpZXdEZWYuY2xhc3MsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25Vbml0OiBkdXJhdGlvblVuaXQsXG4gICAgICAgIHNpbmdsZVVuaXQ6IHNpbmdsZVVuaXQsXG4gICAgICAgIG9wdGlvbnM6IF9fYXNzaWduKHt9LCBnbG9iYWxEZWZhdWx0cywgdmlld0RlZi5kZWZhdWx0cywgb3B0aW9uc01hbmFnZXIuZGlyRGVmYXVsdHMsIG9wdGlvbnNNYW5hZ2VyLmxvY2FsZURlZmF1bHRzLCBvcHRpb25zTWFuYWdlci5vdmVycmlkZXMsIHNpbmdsZVVuaXRPdmVycmlkZXMsIHZpZXdEZWYub3ZlcnJpZGVzLCBvcHRpb25zTWFuYWdlci5keW5hbWljT3ZlcnJpZGVzKSxcbiAgICAgICAgYnV0dG9uVGV4dE92ZXJyaWRlOiBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIuZHluYW1pY092ZXJyaWRlcykgfHxcbiAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25zTWFuYWdlci5vdmVycmlkZXMpIHx8IC8vIGNvbnN0cnVjdG9yLXNwZWNpZmllZCBidXR0b25UZXh0IGxvb2t1cCBoYXNoIHRha2VzIHByZWNlZGVuY2VcbiAgICAgICAgICAgIHZpZXdEZWYub3ZlcnJpZGVzLmJ1dHRvblRleHQsXG4gICAgICAgIGJ1dHRvblRleHREZWZhdWx0OiBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIubG9jYWxlRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIuZGlyRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICB2aWV3RGVmLmRlZmF1bHRzLmJ1dHRvblRleHQgfHxcbiAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChnbG9iYWxEZWZhdWx0cykgfHxcbiAgICAgICAgICAgIHZpZXdEZWYudHlwZSAvLyBmYWxsIGJhY2sgdG8gZ2l2ZW4gdmlldyBuYW1lXG4gICAgfTtcbn1cblxudmFyIFRvb2xiYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvb2xiYXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVG9vbGJhcihjb250ZXh0LCBleHRyYUNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmVuZGVyTGF5b3V0ID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJMYXlvdXQsIF90aGlzLnVucmVuZGVyTGF5b3V0KTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVRpdGxlID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVUaXRsZSwgbnVsbCwgW190aGlzLl9yZW5kZXJMYXlvdXRdKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZUJ1dHRvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlQWN0aXZlQnV0dG9uLCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICBfdGhpcy5fdXBkYXRlVG9kYXkgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZVRvZGF5LCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICBfdGhpcy5fdXBkYXRlUHJldiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlUHJldiwgbnVsbCwgW190aGlzLl9yZW5kZXJMYXlvdXRdKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZU5leHQgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZU5leHQsIG51bGwsIFtfdGhpcy5fcmVuZGVyTGF5b3V0XSk7XG4gICAgICAgIF90aGlzLmVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy10b29sYmFyICcgKyBleHRyYUNsYXNzTmFtZSB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUb29sYmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyTGF5b3V0LnVucmVuZGVyKCk7IC8vIHNob3VsZCB1bnJlbmRlciBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLl9yZW5kZXJMYXlvdXQocHJvcHMubGF5b3V0KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGl0bGUocHJvcHMudGl0bGUpO1xuICAgICAgICB0aGlzLl91cGRhdGVBY3RpdmVCdXR0b24ocHJvcHMuYWN0aXZlQnV0dG9uKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVG9kYXkocHJvcHMuaXNUb2RheUVuYWJsZWQpO1xuICAgICAgICB0aGlzLl91cGRhdGVQcmV2KHByb3BzLmlzUHJldkVuYWJsZWQpO1xuICAgICAgICB0aGlzLl91cGRhdGVOZXh0KHByb3BzLmlzTmV4dEVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUucmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKGxheW91dCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB0aGlzLnZpZXdzV2l0aEJ1dHRvbnMgPSBbXTtcbiAgICAgICAgYXBwZW5kVG9FbGVtZW50KGVsLCB0aGlzLnJlbmRlclNlY3Rpb24oJ2xlZnQnLCBsYXlvdXQubGVmdCkpO1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbignY2VudGVyJywgbGF5b3V0LmNlbnRlcikpO1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbigncmlnaHQnLCBsYXlvdXQucmlnaHQpKTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnVucmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9ICcnO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUucmVuZGVyU2VjdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgYnV0dG9uU3RyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHRoZW1lID0gX2EudGhlbWUsIGNhbGVuZGFyID0gX2EuY2FsZW5kYXI7XG4gICAgICAgIHZhciBvcHRpb25zTWFuYWdlciA9IGNhbGVuZGFyLm9wdGlvbnNNYW5hZ2VyO1xuICAgICAgICB2YXIgdmlld1NwZWNzID0gY2FsZW5kYXIudmlld1NwZWNzO1xuICAgICAgICB2YXIgc2VjdGlvbkVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy0nICsgcG9zaXRpb24gfSk7XG4gICAgICAgIHZhciBjYWxlbmRhckN1c3RvbUJ1dHRvbnMgPSBvcHRpb25zTWFuYWdlci5jb21wdXRlZC5jdXN0b21CdXR0b25zIHx8IHt9O1xuICAgICAgICB2YXIgY2FsZW5kYXJCdXR0b25UZXh0T3ZlcnJpZGVzID0gb3B0aW9uc01hbmFnZXIub3ZlcnJpZGVzLmJ1dHRvblRleHQgfHwge307XG4gICAgICAgIHZhciBjYWxlbmRhckJ1dHRvblRleHQgPSBvcHRpb25zTWFuYWdlci5jb21wdXRlZC5idXR0b25UZXh0IHx8IHt9O1xuICAgICAgICBpZiAoYnV0dG9uU3RyKSB7XG4gICAgICAgICAgICBidXR0b25TdHIuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25Hcm91cFN0ciwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBncm91cENoaWxkcmVuID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGlzT25seUJ1dHRvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBncm91cEVsO1xuICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwU3RyLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uTmFtZSwgaikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VzdG9tQnV0dG9uUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3U3BlYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uSWNvbjsgLy8gb25seSBvbmUgb2YgdGhlc2Ugd2lsbCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvblRleHQ7IC8vIFwiXG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25Jbm5lckh0bWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25DbGFzc2VzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uRWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25BcmlhQXR0cjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbk5hbWUgPT09ICd0aXRsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChodG1sVG9FbGVtZW50KCc8aDI+Jm5ic3A7PC9oMj4nKSk7IC8vIHdlIGFsd2F5cyB3YW50IGl0IHRvIHRha2UgdXAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICBpc09ubHlCdXR0b25zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGN1c3RvbUJ1dHRvblByb3BzID0gY2FsZW5kYXJDdXN0b21CdXR0b25zW2J1dHRvbk5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21CdXR0b25Qcm9wcy5jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQnV0dG9uUHJvcHMuY2xpY2suY2FsbChidXR0b25FbCwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyhjdXN0b21CdXR0b25Qcm9wcykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGN1c3RvbUJ1dHRvblByb3BzLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHZpZXdTcGVjID0gdmlld1NwZWNzW2J1dHRvbk5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdzV2l0aEJ1dHRvbnMucHVzaChidXR0b25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuY2hhbmdlVmlldyhidXR0b25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25UZXh0ID0gdmlld1NwZWMuYnV0dG9uVGV4dE92ZXJyaWRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEljb25DbGFzcyhidXR0b25OYW1lKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSB2aWV3U3BlYy5idXR0b25UZXh0RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYWxlbmRhcltidXR0b25OYW1lXSkgeyAvLyBhIGNhbGVuZGFyIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhcltidXR0b25OYW1lXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSBjYWxlbmRhckJ1dHRvblRleHRPdmVycmlkZXNbYnV0dG9uTmFtZV0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGNhbGVuZGFyQnV0dG9uVGV4dFtidXR0b25OYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBeIGV2ZXJ5dGhpbmcgZWxzZSBpcyBjb25zaWRlcmVkIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsYXNzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYy0nICsgYnV0dG9uTmFtZSArICctYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWUuZ2V0Q2xhc3MoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Jbm5lckh0bWwgPSBodG1sRXNjYXBlKGJ1dHRvblRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25BcmlhQXR0ciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b25JY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbklubmVySHRtbCA9IFwiPHNwYW4gY2xhc3M9J1wiICsgYnV0dG9uSWNvbiArIFwiJz48L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkFyaWFBdHRyID0gJyBhcmlhLWxhYmVsPVwiJyArIGJ1dHRvbk5hbWUgKyAnXCInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25FbCA9IGh0bWxUb0VsZW1lbnQoLy8gdHlwZT1cImJ1dHRvblwiIHNvIHRoYXQgaXQgZG9lc24ndCBzdWJtaXQgYSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJyArIGJ1dHRvbkNsYXNzZXMuam9pbignICcpICsgJ1wiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkFyaWFBdHRyICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4nICsgYnV0dG9uSW5uZXJIdG1sICsgJzwvYnV0dG9uPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9uQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChidXR0b25FbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBDaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkdyb3VwQ2xhc3NOYW1lID0gdGhlbWUuZ2V0Q2xhc3MoJ2J1dHRvbkdyb3VwJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09ubHlCdXR0b25zICYmIGJ1dHRvbkdyb3VwQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEVsLmNsYXNzTGlzdC5hZGQoYnV0dG9uR3JvdXBDbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudChncm91cEVsLCBncm91cENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkVsLmFwcGVuZENoaWxkKGdyb3VwRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHNlY3Rpb25FbCwgZ3JvdXBDaGlsZHJlbik7IC8vIDEgb3IgMCBjaGlsZHJlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWN0aW9uRWw7XG4gICAgfTtcbiAgICBUb29sYmFyLnByb3RvdHlwZS51cGRhdGVUb2RheSA9IGZ1bmN0aW9uIChpc1RvZGF5RW5hYmxlZCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbkVuYWJsZWQoJ3RvZGF5JywgaXNUb2RheUVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlUHJldiA9IGZ1bmN0aW9uIChpc1ByZXZFbmFibGVkKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRW5hYmxlZCgncHJldicsIGlzUHJldkVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlTmV4dCA9IGZ1bmN0aW9uIChpc05leHRFbmFibGVkKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRW5hYmxlZCgnbmV4dCcsIGlzTmV4dEVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlVGl0bGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICBmaW5kRWxlbWVudHModGhpcy5lbCwgJ2gyJykuZm9yRWFjaChmdW5jdGlvbiAodGl0bGVFbCkge1xuICAgICAgICAgICAgdGl0bGVFbC5pbm5lclRleHQgPSB0ZXh0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZUFjdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIChidXR0b25OYW1lKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnRoZW1lLmdldENsYXNzKCdidXR0b25BY3RpdmUnKTtcbiAgICAgICAgZmluZEVsZW1lbnRzKHRoaXMuZWwsICdidXR0b24nKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25FbCkge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbk5hbWUgJiYgYnV0dG9uRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy0nICsgYnV0dG9uTmFtZSArICctYnV0dG9uJykpIHtcbiAgICAgICAgICAgICAgICBidXR0b25FbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b25FbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudG9nZ2xlQnV0dG9uRW5hYmxlZCA9IGZ1bmN0aW9uIChidXR0b25OYW1lLCBib29sKSB7XG4gICAgICAgIGZpbmRFbGVtZW50cyh0aGlzLmVsLCAnLmZjLScgKyBidXR0b25OYW1lICsgJy1idXR0b24nKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25FbCkge1xuICAgICAgICAgICAgYnV0dG9uRWwuZGlzYWJsZWQgPSAhYm9vbDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVG9vbGJhcjtcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBDYWxlbmRhckNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2FsZW5kYXJDb21wb25lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2FsZW5kYXJDb21wb25lbnQoY29udGV4dCwgZWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3JlbmRlclRvb2xiYXJzID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJUb29sYmFycyk7XG4gICAgICAgIF90aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMgPSBtZW1vaXplKGJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMpO1xuICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICBwcmVwZW5kVG9FbGVtZW50KGVsLCBfdGhpcy5jb250ZW50RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLXZpZXctY29udGFpbmVyJyB9KSk7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IF90aGlzLmNhbGVuZGFyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLnZpZXdDb250YWluZXJNb2RpZmllcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbW9kaWZ5Vmlld0NvbnRhaW5lciA9IF9hW19pXTtcbiAgICAgICAgICAgIG1vZGlmeVZpZXdDb250YWluZXIoX3RoaXMuY29udGVudEVsLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMudG9nZ2xlRWxDbGFzc05hbWVzKHRydWUpO1xuICAgICAgICBfdGhpcy5jb21wdXRlVGl0bGUgPSBtZW1vaXplKGNvbXB1dGVUaXRsZSk7XG4gICAgICAgIF90aGlzLnBhcnNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VCdXNpbmVzc0hvdXJzKGlucHV0LCBfdGhpcy5jYWxlbmRhcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mb290ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5jb250ZW50RWwpO1xuICAgICAgICB0aGlzLnRvZ2dsZUVsQ2xhc3NOYW1lcyhmYWxzZSk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnRvZ2dsZUVsQ2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSB0aGlzLmVsLmNsYXNzTGlzdDtcbiAgICAgICAgdmFyIGRpckNsYXNzTmFtZSA9ICdmYy0nICsgdGhpcy5vcHQoJ2RpcicpO1xuICAgICAgICB2YXIgdGhlbWVDbGFzc05hbWUgPSB0aGlzLnRoZW1lLmdldENsYXNzKCd3aWRnZXQnKTtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZjJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKGRpckNsYXNzTmFtZSk7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoZW1lQ2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2ZjJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGRpckNsYXNzTmFtZSk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoZW1lQ2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLmZyZWV6ZUhlaWdodCgpO1xuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmNvbXB1dGVUaXRsZShwcm9wcy5kYXRlUHJvZmlsZSwgcHJvcHMudmlld1NwZWMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3JlbmRlclRvb2xiYXJzKHByb3BzLnZpZXdTcGVjLCBwcm9wcy5kYXRlUHJvZmlsZSwgcHJvcHMuY3VycmVudERhdGUsIHByb3BzLmRhdGVQcm9maWxlR2VuZXJhdG9yLCB0aXRsZSk7XG4gICAgICAgIHRoaXMucmVuZGVyVmlldyhwcm9wcywgdGl0bGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgdGhpcy50aGF3SGVpZ2h0KCk7XG4gICAgfTtcbiAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyVG9vbGJhcnMgPSBmdW5jdGlvbiAodmlld1NwZWMsIGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSwgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHRpdGxlKSB7XG4gICAgICAgIHZhciBoZWFkZXJMYXlvdXQgPSB0aGlzLm9wdCgnaGVhZGVyJyk7XG4gICAgICAgIHZhciBmb290ZXJMYXlvdXQgPSB0aGlzLm9wdCgnZm9vdGVyJyk7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLmNhbGVuZGFyLmdldE5vdygpO1xuICAgICAgICB2YXIgdG9kYXlJbmZvID0gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGQobm93KTtcbiAgICAgICAgdmFyIHByZXZJbmZvID0gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGRQcmV2KGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSk7XG4gICAgICAgIHZhciBuZXh0SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkTmV4dChkYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICB2YXIgdG9vbGJhclByb3BzID0ge1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uOiB2aWV3U3BlYy50eXBlLFxuICAgICAgICAgICAgaXNUb2RheUVuYWJsZWQ6IHRvZGF5SW5mby5pc1ZhbGlkICYmICFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgbm93KSxcbiAgICAgICAgICAgIGlzUHJldkVuYWJsZWQ6IHByZXZJbmZvLmlzVmFsaWQsXG4gICAgICAgICAgICBpc05leHRFbmFibGVkOiBuZXh0SW5mby5pc1ZhbGlkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoZWFkZXJMYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlciA9IG5ldyBUb29sYmFyKHRoaXMuY29udGV4dCwgJ2ZjLWhlYWRlci10b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgcHJlcGVuZFRvRWxlbWVudCh0aGlzLmVsLCB0aGlzLmhlYWRlci5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhlYWRlci5yZWNlaXZlUHJvcHMoX19hc3NpZ24oeyBsYXlvdXQ6IGhlYWRlckxheW91dCB9LCB0b29sYmFyUHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb290ZXJMYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5mb290ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvb3RlciA9IG5ldyBUb29sYmFyKHRoaXMuY29udGV4dCwgJ2ZjLWZvb3Rlci10b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHRoaXMuZWwsIHRoaXMuZm9vdGVyLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7IGxheW91dDogZm9vdGVyTGF5b3V0IH0sIHRvb2xiYXJQcm9wcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZm9vdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmZvb3Rlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmZvb3RlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJWaWV3ID0gZnVuY3Rpb24gKHByb3BzLCB0aXRsZSkge1xuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgdmFyIHZpZXdTcGVjID0gcHJvcHMudmlld1NwZWMsIGRhdGVQcm9maWxlR2VuZXJhdG9yID0gcHJvcHMuZGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG4gICAgICAgIGlmICghdmlldyB8fCB2aWV3LnZpZXdTcGVjICE9PSB2aWV3U3BlYykge1xuICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLnZpZXcgPSBuZXcgdmlld1NwZWNbJ2NsYXNzJ10oe1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyOiB0aGlzLmNhbGVuZGFyLFxuICAgICAgICAgICAgICAgIHZpZXc6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZUVudjogdGhpcy5kYXRlRW52LFxuICAgICAgICAgICAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHZpZXdTcGVjLm9wdGlvbnNcbiAgICAgICAgICAgIH0sIHZpZXdTcGVjLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgdGhpcy5jb250ZW50RWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmlldy5hZGRTY3JvbGwodmlldy5xdWVyeVNjcm9sbCgpKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3LnRpdGxlID0gdGl0bGU7IC8vIGZvciB0aGUgQVBJXG4gICAgICAgIHZhciB2aWV3UHJvcHMgPSB7XG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJzOiB0aGlzLnBhcnNlQnVzaW5lc3NIb3Vycyh2aWV3U3BlYy5vcHRpb25zLmJ1c2luZXNzSG91cnMpLFxuICAgICAgICAgICAgZXZlbnRTdG9yZTogcHJvcHMuZXZlbnRTdG9yZSxcbiAgICAgICAgICAgIGV2ZW50VWlCYXNlczogcHJvcHMuZXZlbnRVaUJhc2VzLFxuICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcHJvcHMuZGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLFxuICAgICAgICAgICAgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplXG4gICAgICAgIH07XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lcnMgPSB0aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnModGhpcy5jYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3Mudmlld1Byb3BzVHJhbnNmb3JtZXJzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB0cmFuc2Zvcm1lcnNfMSA9IHRyYW5zZm9ybWVyczsgX2kgPCB0cmFuc2Zvcm1lcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyc18xW19pXTtcbiAgICAgICAgICAgIF9fYXNzaWduKHZpZXdQcm9wcywgdHJhbnNmb3JtZXIudHJhbnNmb3JtKHZpZXdQcm9wcywgdmlld1NwZWMsIHByb3BzLCB2aWV3KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5yZWNlaXZlUHJvcHModmlld1Byb3BzKTtcbiAgICB9O1xuICAgIC8vIFNpemluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUpIHtcbiAgICAgICAgaWYgKGlzUmVzaXplID09PSB2b2lkIDApIHsgaXNSZXNpemUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgaWYgKGlzUmVzaXplKSB7XG4gICAgICAgICAgICB2aWV3LmFkZFNjcm9sbCh2aWV3LnF1ZXJ5U2Nyb2xsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Jlc2l6ZSB8fCB0aGlzLmlzSGVpZ2h0QXV0byA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVIZWlnaHRWYXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy51cGRhdGVTaXplKGlzUmVzaXplLCB0aGlzLnZpZXdIZWlnaHQsIHRoaXMuaXNIZWlnaHRBdXRvKTtcbiAgICAgICAgdmlldy51cGRhdGVOb3dJbmRpY2F0b3IoKTsgLy8gd2UgbmVlZCB0byBndWFyYW50ZWUgdGhpcyB3aWxsIHJ1biBhZnRlciB1cGRhdGVTaXplXG4gICAgICAgIHZpZXcucG9wU2Nyb2xsKGlzUmVzaXplKTtcbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5jb21wdXRlSGVpZ2h0VmFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gdGhpcy5jYWxlbmRhcjsgLy8geXVjay4gbmVlZCB0byBoYW5kbGUgZHluYW1pYyBvcHRpb25zXG4gICAgICAgIHZhciBoZWlnaHRJbnB1dCA9IGNhbGVuZGFyLm9wdCgnaGVpZ2h0Jyk7XG4gICAgICAgIHZhciBjb250ZW50SGVpZ2h0SW5wdXQgPSBjYWxlbmRhci5vcHQoJ2NvbnRlbnRIZWlnaHQnKTtcbiAgICAgICAgdGhpcy5pc0hlaWdodEF1dG8gPSBoZWlnaHRJbnB1dCA9PT0gJ2F1dG8nIHx8IGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ2F1dG8nO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ251bWJlcicpIHsgLy8gZXhpc3RzIGFuZCBub3QgJ2F1dG8nXG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBjb250ZW50SGVpZ2h0SW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGlzdHMgYW5kIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGNvbnRlbnRIZWlnaHRJbnB1dCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBoZWlnaHRJbnB1dCA9PT0gJ251bWJlcicpIHsgLy8gZXhpc3RzIGFuZCBub3QgJ2F1dG8nXG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBoZWlnaHRJbnB1dCAtIHRoaXMucXVlcnlUb29sYmFyc0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBoZWlnaHRJbnB1dCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGlzdHMgYW5kIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGhlaWdodElucHV0KCkgLSB0aGlzLnF1ZXJ5VG9vbGJhcnNIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoZWlnaHRJbnB1dCA9PT0gJ3BhcmVudCcpIHsgLy8gc2V0IHRvIGhlaWdodCBvZiBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdGhpcy5lbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gcGFyZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gdGhpcy5xdWVyeVRvb2xiYXJzSGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuY29udGVudEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC9cbiAgICAgICAgICAgICAgICBNYXRoLm1heChjYWxlbmRhci5vcHQoJ2FzcGVjdFJhdGlvJyksIC41KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5xdWVyeVRvb2xiYXJzSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyKSB7XG4gICAgICAgICAgICBoZWlnaHQgKz0gY29tcHV0ZUhlaWdodEFuZE1hcmdpbnModGhpcy5oZWFkZXIuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgaGVpZ2h0ICs9IGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKHRoaXMuZm9vdGVyLmVsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG4gICAgLy8gSGVpZ2h0IFwiRnJlZXppbmdcIlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLmZyZWV6ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmVsLCB7XG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnRoYXdIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcGx5U3R5bGUodGhpcy5lbCwge1xuICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnJ1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDYWxlbmRhckNvbXBvbmVudDtcbn0oQ29tcG9uZW50KSk7XG4vLyBUaXRsZSBhbmQgRGF0ZSBGb3JtYXR0aW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ29tcHV0ZXMgd2hhdCB0aGUgdGl0bGUgYXQgdGhlIHRvcCBvZiB0aGUgY2FsZW5kYXIgc2hvdWxkIGJlIGZvciB0aGlzIHZpZXdcbmZ1bmN0aW9uIGNvbXB1dGVUaXRsZShkYXRlUHJvZmlsZSwgdmlld09wdGlvbnMpIHtcbiAgICB2YXIgcmFuZ2U7XG4gICAgLy8gZm9yIHZpZXdzIHRoYXQgc3BhbiBhIGxhcmdlIHVuaXQgb2YgdGltZSwgc2hvdyB0aGUgcHJvcGVyIGludGVydmFsLCBpZ25vcmluZyBzdHJheSBkYXlzIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICBpZiAoL14oeWVhcnxtb250aCkkLy50ZXN0KGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpKSB7XG4gICAgICAgIHJhbmdlID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlO1xuICAgIH1cbiAgICBlbHNlIHsgLy8gZm9yIGRheSB1bml0cyBvciBzbWFsbGVyLCB1c2UgdGhlIGFjdHVhbCBkYXkgcmFuZ2VcbiAgICAgICAgcmFuZ2UgPSBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0ZUVudi5mb3JtYXRSYW5nZShyYW5nZS5zdGFydCwgcmFuZ2UuZW5kLCBjcmVhdGVGb3JtYXR0ZXIodmlld09wdGlvbnMudGl0bGVGb3JtYXQgfHwgY29tcHV0ZVRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSwgdmlld09wdGlvbnMudGl0bGVSYW5nZVNlcGFyYXRvciksIHsgaXNFbmRFeGNsdXNpdmU6IGRhdGVQcm9maWxlLmlzUmFuZ2VBbGxEYXkgfSk7XG59XG4vLyBHZW5lcmF0ZXMgdGhlIGZvcm1hdCBzdHJpbmcgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdGl0bGUgZm9yIHRoZSBjdXJyZW50IGRhdGUgcmFuZ2UuXG4vLyBBdHRlbXB0cyB0byBjb21wdXRlIHRoZSBtb3N0IGFwcHJvcHJpYXRlIGZvcm1hdCBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgd2l0aCBgdGl0bGVGb3JtYXRgLlxuZnVuY3Rpb24gY29tcHV0ZVRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZVVuaXQgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0O1xuICAgIGlmIChjdXJyZW50UmFuZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnJlbnRSYW5nZVVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnIH07IC8vIGxpa2UgXCJTZXB0ZW1iZXIgMjAxNFwiXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZGF5cyA9IGRpZmZXaG9sZURheXMoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0LCBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UuZW5kKTtcbiAgICAgICAgaWYgKGRheXMgIT09IG51bGwgJiYgZGF5cyA+IDEpIHtcbiAgICAgICAgICAgIC8vIG11bHRpLWRheSByYW5nZS4gc2hvcnRlciwgbGlrZSBcIlNlcCA5IC0gMTAgMjAxNFwiXG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb25lIGRheS4gbG9uZ2VyLCBsaWtlIFwiU2VwdGVtYmVyIDkgMjAxNFwiXG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH07XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBQbHVnaW5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBidWlsZFZpZXdQcm9wVHJhbnNmb3JtZXJzKHRoZUNsYXNzZXMpIHtcbiAgICByZXR1cm4gdGhlQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKHRoZUNsYXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhlQ2xhc3MoKTtcbiAgICB9KTtcbn1cblxudmFyIEludGVyYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVyYWN0aW9uKHNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgIH1cbiAgICBJbnRlcmFjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBJbnRlcmFjdGlvbjtcbn0oKSk7XG5mdW5jdGlvbiBwYXJzZUludGVyYWN0aW9uU2V0dGluZ3MoY29tcG9uZW50LCBpbnB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICBlbDogaW5wdXQuZWwsXG4gICAgICAgIHVzZUV2ZW50Q2VudGVyOiBpbnB1dC51c2VFdmVudENlbnRlciAhPSBudWxsID8gaW5wdXQudXNlRXZlbnRDZW50ZXIgOiB0cnVlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlKHNldHRpbmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfYSA9IHt9LFxuICAgICAgICBfYVtzZXR0aW5ncy5jb21wb25lbnQudWlkXSA9IHNldHRpbmdzLFxuICAgICAgICBfYTtcbn1cbi8vIGdsb2JhbCBzdGF0ZVxudmFyIGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSA9IHt9O1xuXG4vKlxuRGV0ZWN0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBldmVudCB3aXRoaW4gYSBEYXRlQ29tcG9uZW50XG4qL1xudmFyIEV2ZW50Q2xpY2tpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZW50Q2xpY2tpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXZlbnRDbGlja2luZyhzZXR0aW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFuZGxlU2VnQ2xpY2sgPSBmdW5jdGlvbiAoZXYsIHNlZ0VsKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX3RoaXMuY29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIHNlZyA9IGdldEVsU2VnKHNlZ0VsKTtcbiAgICAgICAgICAgIGlmIChzZWcgJiYgLy8gbWlnaHQgYmUgdGhlIDxkaXY+IHN1cnJvdW5kaW5nIHRoZSBtb3JlIGxpbmtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgLy8gb3VyIHdheSB0byBzaW11bGF0ZSBhIGxpbmsgY2xpY2sgZm9yIGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgPGE+IHRhZ3NcbiAgICAgICAgICAgICAgICAvLyBncmFiIGJlZm9yZSB0cmlnZ2VyIGZpcmVkIGluIGNhc2UgdHJpZ2dlciB0cmFzaGVzIERPTSB0aHJ1IHJlcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgdmFyIGhhc1VybENvbnRhaW5lciA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgJy5mYy1oYXMtdXJsJyk7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGhhc1VybENvbnRhaW5lciA/IGhhc1VybENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdJykuaHJlZiA6ICcnO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50Q2xpY2snLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWdFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY29tcG9uZW50LmNhbGVuZGFyLCBzZWcuZXZlbnRSYW5nZS5kZWYsIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgIWV2LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICBfdGhpcy5kZXN0cm95ID0gbGlzdGVuQnlTZWxlY3Rvcihjb21wb25lbnQuZWwsICdjbGljaycsIGNvbXBvbmVudC5mZ1NlZ1NlbGVjdG9yICsgJywnICsgY29tcG9uZW50LmJnU2VnU2VsZWN0b3IsIF90aGlzLmhhbmRsZVNlZ0NsaWNrKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRDbGlja2luZztcbn0oSW50ZXJhY3Rpb24pKTtcblxuLypcblRyaWdnZXJzIGV2ZW50cyBhbmQgYWRkcy9yZW1vdmVzIGNvcmUgY2xhc3NOYW1lcyB3aGVuIHRoZSB1c2VyJ3MgcG9pbnRlclxuZW50ZXJzL2xlYXZlcyBldmVudC1lbGVtZW50cyBvZiBhIGNvbXBvbmVudC5cbiovXG52YXIgRXZlbnRIb3ZlcmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRXZlbnRIb3ZlcmluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudEhvdmVyaW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAvLyBmb3Igc2ltdWxhdGluZyBhbiBldmVudE1vdXNlTGVhdmUgd2hlbiB0aGUgZXZlbnQgZWwgaXMgZGVzdHJveWVkIHdoaWxlIG1vdXNlIGlzIG92ZXIgaXRcbiAgICAgICAgX3RoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKGVsID09PSBfdGhpcy5jdXJyZW50U2VnRWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVTZWdMZWF2ZShudWxsLCBfdGhpcy5jdXJyZW50U2VnRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVTZWdFbnRlciA9IGZ1bmN0aW9uIChldiwgc2VnRWwpIHtcbiAgICAgICAgICAgIGlmIChnZXRFbFNlZyhzZWdFbCkpIHsgLy8gVE9ETzogYmV0dGVyIHdheSB0byBtYWtlIHN1cmUgbm90IGhvdmVyaW5nIG92ZXIgbW9yZSsgbGluayBvciBpdHMgd3JhcHBlclxuICAgICAgICAgICAgICAgIHNlZ0VsLmNsYXNzTGlzdC5hZGQoJ2ZjLWFsbG93LW1vdXNlLXJlc2l6ZScpO1xuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRTZWdFbCA9IHNlZ0VsO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJFdmVudCgnZXZlbnRNb3VzZUVudGVyJywgZXYsIHNlZ0VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlU2VnTGVhdmUgPSBmdW5jdGlvbiAoZXYsIHNlZ0VsKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudFNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgc2VnRWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtYWxsb3ctbW91c2UtcmVzaXplJyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFNlZ0VsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyRXZlbnQoJ2V2ZW50TW91c2VMZWF2ZScsIGV2LCBzZWdFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wb25lbnQgPSBzZXR0aW5ncy5jb21wb25lbnQ7XG4gICAgICAgIF90aGlzLnJlbW92ZUhvdmVyTGlzdGVuZXJzID0gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29tcG9uZW50LmVsLCBjb21wb25lbnQuZmdTZWdTZWxlY3RvciArICcsJyArIGNvbXBvbmVudC5iZ1NlZ1NlbGVjdG9yLCBfdGhpcy5oYW5kbGVTZWdFbnRlciwgX3RoaXMuaGFuZGxlU2VnTGVhdmUpO1xuICAgICAgICBjb21wb25lbnQuY2FsZW5kYXIub24oJ2V2ZW50RWxSZW1vdmUnLCBfdGhpcy5oYW5kbGVFdmVudEVsUmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUhvdmVyTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmNhbGVuZGFyLm9mZignZXZlbnRFbFJlbW92ZScsIHRoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSk7XG4gICAgfTtcbiAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS50cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiAocHVibGljRXZOYW1lLCBldiwgc2VnRWwpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50O1xuICAgICAgICB2YXIgc2VnID0gZ2V0RWxTZWcoc2VnRWwpO1xuICAgICAgICBpZiAoIWV2IHx8IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wdWJsaWNseVRyaWdnZXIocHVibGljRXZOYW1lLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbDogc2VnRWwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkodGhpcy5jb21wb25lbnQuY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50SG92ZXJpbmc7XG59KEludGVyYWN0aW9uKSk7XG5cbnZhciBTdGFuZGFyZFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGFuZGFyZFRoZW1lLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YW5kYXJkVGhlbWUoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN0YW5kYXJkVGhlbWU7XG59KFRoZW1lKSk7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5jbGFzc2VzID0ge1xuICAgIHdpZGdldDogJ2ZjLXVudGhlbWVkJyxcbiAgICB3aWRnZXRIZWFkZXI6ICdmYy13aWRnZXQtaGVhZGVyJyxcbiAgICB3aWRnZXRDb250ZW50OiAnZmMtd2lkZ2V0LWNvbnRlbnQnLFxuICAgIGJ1dHRvbkdyb3VwOiAnZmMtYnV0dG9uLWdyb3VwJyxcbiAgICBidXR0b246ICdmYy1idXR0b24gZmMtYnV0dG9uLXByaW1hcnknLFxuICAgIGJ1dHRvbkFjdGl2ZTogJ2ZjLWJ1dHRvbi1hY3RpdmUnLFxuICAgIHBvcG92ZXJIZWFkZXI6ICdmYy13aWRnZXQtaGVhZGVyJyxcbiAgICBwb3BvdmVyQ29udGVudDogJ2ZjLXdpZGdldC1jb250ZW50JyxcbiAgICAvLyBkYXkgZ3JpZFxuICAgIGhlYWRlclJvdzogJ2ZjLXdpZGdldC1oZWFkZXInLFxuICAgIGRheVJvdzogJ2ZjLXdpZGdldC1jb250ZW50JyxcbiAgICAvLyBsaXN0IHZpZXdcbiAgICBsaXN0VmlldzogJ2ZjLXdpZGdldC1jb250ZW50J1xufTtcblN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmJhc2VJY29uQ2xhc3MgPSAnZmMtaWNvbic7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHtcbiAgICBjbG9zZTogJ2ZjLWljb24teCcsXG4gICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1sZWZ0JyxcbiAgICBuZXh0OiAnZmMtaWNvbi1jaGV2cm9uLXJpZ2h0JyxcbiAgICBwcmV2WWVhcjogJ2ZjLWljb24tY2hldnJvbnMtbGVmdCcsXG4gICAgbmV4dFllYXI6ICdmYy1pY29uLWNoZXZyb25zLXJpZ2h0J1xufTtcblN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZU9wdGlvbiA9ICdidXR0b25JY29ucyc7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24gPSAnaWNvbic7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVQcmVmaXggPSAnZmMtaWNvbi0nO1xuXG52YXIgQ2FsZW5kYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FsZW5kYXIoZWwsIG92ZXJyaWRlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnBhcnNlUmF3TG9jYWxlcyA9IG1lbW9pemUocGFyc2VSYXdMb2NhbGVzKTtcbiAgICAgICAgdGhpcy5idWlsZExvY2FsZSA9IG1lbW9pemUoYnVpbGRMb2NhbGUpO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0ZUVudiA9IG1lbW9pemUoYnVpbGREYXRlRW52KTtcbiAgICAgICAgdGhpcy5idWlsZFRoZW1lID0gbWVtb2l6ZShidWlsZFRoZW1lKTtcbiAgICAgICAgdGhpcy5idWlsZEV2ZW50VWlTaW5nbGVCYXNlID0gbWVtb2l6ZSh0aGlzLl9idWlsZEV2ZW50VWlTaW5nbGVCYXNlKTtcbiAgICAgICAgdGhpcy5idWlsZFNlbGVjdGlvbkNvbmZpZyA9IG1lbW9pemUodGhpcy5fYnVpbGRTZWxlY3Rpb25Db25maWcpO1xuICAgICAgICB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlID0gbWVtb2l6ZU91dHB1dChidWlsZEV2ZW50VWlCeVNvdXJjZSwgaXNQcm9wc0VxdWFsKTtcbiAgICAgICAgdGhpcy5idWlsZEV2ZW50VWlCYXNlcyA9IG1lbW9pemUoYnVpbGRFdmVudFVpQmFzZXMpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uc1N0b3JlID0ge307XG4gICAgICAgIHRoaXMuYWN0aW9uUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5pc1JlZHVjaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIGlzRGlzcGxheWluZzogYm9vbGVhbiA9IGZhbHNlIC8vIGluc3RhbGxlZCBpbiBET00/IGFjY2VwdGluZyByZW5kZXJzP1xuICAgICAgICB0aGlzLm5lZWRzUmVyZW5kZXIgPSBmYWxzZTsgLy8gbmVlZHMgYSByZW5kZXI/XG4gICAgICAgIHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmluZyA9IGZhbHNlOyAvLyBjdXJyZW50bHkgaW4gdGhlIGV4ZWN1dGVSZW5kZXIgZnVuY3Rpb24/XG4gICAgICAgIHRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCA9IDA7XG4gICAgICAgIHRoaXMuYnVpbGREZWxheWVkUmVyZW5kZXIgPSBtZW1vaXplKGJ1aWxkRGVsYXllZFJlcmVuZGVyKTtcbiAgICAgICAgdGhpcy5hZnRlclNpemluZ1RyaWdnZXJzID0ge307XG4gICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRGF0ZXNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNFdmVudHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5vcHRpb25zTWFuYWdlciA9IG5ldyBPcHRpb25zTWFuYWdlcihvdmVycmlkZXMgfHwge30pO1xuICAgICAgICB0aGlzLnBsdWdpblN5c3RlbSA9IG5ldyBQbHVnaW5TeXN0ZW0oKTtcbiAgICAgICAgLy8gb25seSBkbyBvbmNlLiBkb24ndCBkbyBpbiBoYW5kbGVPcHRpb25zLiBiZWNhdXNlIGNhbid0IHJlbW92ZSBwbHVnaW5zXG4gICAgICAgIHRoaXMuYWRkUGx1Z2luSW5wdXRzKHRoaXMub3B0aW9uc01hbmFnZXIuY29tcHV0ZWQucGx1Z2lucyB8fCBbXSk7XG4gICAgICAgIHRoaXMuaGFuZGxlT3B0aW9ucyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKTtcbiAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ19pbml0Jyk7IC8vIGZvciB0ZXN0c1xuICAgICAgICB0aGlzLmh5ZHJhdGUoKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhckludGVyYWN0aW9ucyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLmNhbGVuZGFySW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjYWxlbmRhckludGVyYWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsZW5kYXJJbnRlcmFjdGlvbkNsYXNzKF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5hZGRQbHVnaW5JbnB1dHMgPSBmdW5jdGlvbiAocGx1Z2luSW5wdXRzKSB7XG4gICAgICAgIHZhciBwbHVnaW5EZWZzID0gcmVmaW5lUGx1Z2luRGVmcyhwbHVnaW5JbnB1dHMpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBsdWdpbkRlZnNfMSA9IHBsdWdpbkRlZnM7IF9pIDwgcGx1Z2luRGVmc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbkRlZiA9IHBsdWdpbkRlZnNfMVtfaV07XG4gICAgICAgICAgICB0aGlzLnBsdWdpblN5c3RlbS5hZGQocGx1Z2luRGVmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbGVuZGFyLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgLy8gcHVibGljIEFQSVxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCA/IHRoaXMuY29tcG9uZW50LnZpZXcgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBQdWJsaWMgQVBJIGZvciByZW5kZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyYWJsZUV2ZW50U3RvcmUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFJlcmVuZGVyKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5kZXN0cm95KCk7IC8vIGRvbid0IG51bGwtb3V0LiBpbiBjYXNlIEFQSSBuZWVkcyBhY2Nlc3NcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDsgLy8gdW1tID8/P1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuY2FsZW5kYXJJbnRlcmFjdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCdfZGVzdHJveWVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYmluZEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBldmVudCBkZWxlZ2F0aW9uIGZvciBuYXYgbGlua3NcbiAgICAgICAgdGhpcy5yZW1vdmVOYXZMaW5rTGlzdGVuZXIgPSBsaXN0ZW5CeVNlbGVjdG9yKHRoaXMuZWwsICdjbGljaycsICdhW2RhdGEtZ290b10nLCBmdW5jdGlvbiAoZXYsIGFuY2hvckVsKSB7XG4gICAgICAgICAgICB2YXIgZ290b09wdGlvbnMgPSBhbmNob3JFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZ290bycpO1xuICAgICAgICAgICAgZ290b09wdGlvbnMgPSBnb3RvT3B0aW9ucyA/IEpTT04ucGFyc2UoZ290b09wdGlvbnMpIDoge307XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IF90aGlzLmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgZGF0ZU1hcmtlciA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGdvdG9PcHRpb25zLmRhdGUpO1xuICAgICAgICAgICAgdmFyIHZpZXdUeXBlID0gZ290b09wdGlvbnMudHlwZTtcbiAgICAgICAgICAgIC8vIHByb3BlcnR5IGxpa2UgXCJuYXZMaW5rRGF5Q2xpY2tcIi4gbWlnaHQgYmUgYSBzdHJpbmcgb3IgYSBmdW5jdGlvblxuICAgICAgICAgICAgdmFyIGN1c3RvbUFjdGlvbiA9IF90aGlzLnZpZXdPcHQoJ25hdkxpbmsnICsgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHZpZXdUeXBlKSArICdDbGljaycpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21BY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjdXN0b21BY3Rpb24oZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlciksIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tQWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZSA9IGN1c3RvbUFjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuem9vbVRvKGRhdGVNYXJrZXIsIHZpZXdUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9wdCgnaGFuZGxlV2luZG93UmVzaXplJykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZVByb3h5ID0gZGVib3VuY2UoLy8gcHJldmVudHMgcmFwaWQgY2FsbHNcbiAgICAgICAgICAgIHRoaXMud2luZG93UmVzaXplLmJpbmQodGhpcyksIHRoaXMub3B0KCd3aW5kb3dSZXNpemVEZWxheScpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS51bmJpbmRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVOYXZMaW5rTGlzdGVuZXIoKTtcbiAgICAgICAgaWYgKHRoaXMud2luZG93UmVzaXplUHJveHkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZVByb3h5KTtcbiAgICAgICAgICAgIHRoaXMud2luZG93UmVzaXplUHJveHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBEaXNwYXRjaGVyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuYnVpbGRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgdmFyIHJhd1NvdXJjZXMgPSB0aGlzLm9wdCgnZXZlbnRTb3VyY2VzJykgfHwgW107XG4gICAgICAgIHZhciBzaW5nbGVSYXdTb3VyY2UgPSB0aGlzLm9wdCgnZXZlbnRzJyk7XG4gICAgICAgIHZhciBzb3VyY2VzID0gW107IC8vIHBhcnNlZFxuICAgICAgICBpZiAoc2luZ2xlUmF3U291cmNlKSB7XG4gICAgICAgICAgICByYXdTb3VyY2VzLnVuc2hpZnQoc2luZ2xlUmF3U291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJhd1NvdXJjZXNfMSA9IHJhd1NvdXJjZXM7IF9pIDwgcmF3U291cmNlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJhd1NvdXJjZSA9IHJhd1NvdXJjZXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgc291cmNlID0gcGFyc2VFdmVudFNvdXJjZShyYXdTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0Y2hSZW5kZXJpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goeyB0eXBlOiAnSU5JVCcgfSk7IC8vIHBhc3MgaW4gc291cmNlcyBoZXJlP1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goeyB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLCBzb3VyY2VzOiBzb3VyY2VzIH0pO1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICB2aWV3VHlwZTogX3RoaXMub3B0KCdkZWZhdWx0VmlldycpIHx8IF90aGlzLnBsdWdpblN5c3RlbS5ob29rcy5kZWZhdWx0Vmlld1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkSW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlld1R5cGU6IG51bGwsXG4gICAgICAgICAgICBsb2FkaW5nTGV2ZWw6IDAsXG4gICAgICAgICAgICBldmVudFNvdXJjZUxvYWRpbmdMZXZlbDogMCxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlOiB0aGlzLmdldEluaXRpYWxEYXRlKCksXG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogbnVsbCxcbiAgICAgICAgICAgIGV2ZW50U291cmNlczoge30sXG4gICAgICAgICAgICBldmVudFN0b3JlOiBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb246IG51bGwsXG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbjogJycsXG4gICAgICAgICAgICBldmVudERyYWc6IG51bGwsXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGlvblF1ZXVlLnB1c2goYWN0aW9uKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVkdWNpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaXNSZWR1Y2luZyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuYWN0aW9uUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucmVkdWNlKHRoaXMuc3RhdGUsIHRoaXMuYWN0aW9uUXVldWUuc2hpZnQoKSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgdGhpcy5pc1JlZHVjaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIW9sZFN0YXRlLmxvYWRpbmdMZXZlbCAmJiBuZXdTdGF0ZS5sb2FkaW5nTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignbG9hZGluZycsIFt0cnVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbGRTdGF0ZS5sb2FkaW5nTGV2ZWwgJiYgIW5ld1N0YXRlLmxvYWRpbmdMZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCdsb2FkaW5nJywgW2ZhbHNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuY29tcG9uZW50LnZpZXc7XG4gICAgICAgICAgICBpZiAob2xkU3RhdGUuZXZlbnRTdG9yZSAhPT0gbmV3U3RhdGUuZXZlbnRTdG9yZSB8fCB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLmV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0V2ZW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5kYXRlUHJvZmlsZSAhPT0gbmV3U3RhdGUuZGF0ZVByb2ZpbGUgfHwgdGhpcy5uZWVkc0Z1bGxSZXJlbmRlcikge1xuICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5kYXRlUHJvZmlsZSAmJiB2aWV3KSB7IC8vIHdoeSB3b3VsZCB2aWV3IGJlIG51bGwhP1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignZGF0ZXNEZXN0cm95JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHZpZXcuZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNEYXRlc1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnZpZXdUeXBlICE9PSBuZXdTdGF0ZS52aWV3VHlwZSB8fCB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnZpZXdUeXBlICYmIHZpZXcpIHsgLy8gd2h5IHdvdWxkIHZpZXcgYmUgbnVsbCE/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCd2aWV3U2tlbGV0b25EZXN0cm95JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHZpZXcuZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RSZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24sIGNhbGVuZGFyKSB7XG4gICAgICAgIHJldHVybiByZWR1Y2Uoc3RhdGUsIGFjdGlvbiwgY2FsZW5kYXIpO1xuICAgIH07XG4gICAgLy8gUmVuZGVyIFF1ZXVlXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVxdWVzdFJlcmVuZGVyID0gZnVuY3Rpb24gKG5lZWRzRnVsbCkge1xuICAgICAgICBpZiAobmVlZHNGdWxsID09PSB2b2lkIDApIHsgbmVlZHNGdWxsID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc0Z1bGxSZXJlbmRlciA9IHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgfHwgbmVlZHNGdWxsO1xuICAgICAgICB0aGlzLmRlbGF5ZWRSZXJlbmRlcigpOyAvLyB3aWxsIGNhbGwgYSBkZWJvdW5jZWQtdmVyc2lvbiBvZiB0cnlSZXJlbmRlclxuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnRyeVJlcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQgJiYgLy8gbXVzdCBiZSBhY2NlcHRpbmcgcmVuZGVyc1xuICAgICAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyICYmIC8vIGluZGljYXRlcyB0aGF0IGEgcmVyZW5kZXIgd2FzIHJlcXVlc3RlZFxuICAgICAgICAgICAgIXRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCAmJiAvLyBub3QgcGF1c2VkXG4gICAgICAgICAgICAhdGhpcy5pc1JlbmRlcmluZyAvLyBub3QgY3VycmVudGx5IGluIHRoZSByZW5kZXIgbG9vcFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYmF0Y2hSZW5kZXJpbmcgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICB0aGlzLnJlbmRlcmluZ1BhdXNlRGVwdGgrKztcbiAgICAgICAgZnVuYygpO1xuICAgICAgICB0aGlzLnJlbmRlcmluZ1BhdXNlRGVwdGgtLTtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNSZXJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZXhlY3V0ZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5lZWRzRnVsbFJlcmVuZGVyID0gdGhpcy5uZWVkc0Z1bGxSZXJlbmRlcjsgLy8gc2F2ZSBiZWZvcmUgY2xlYXJpbmdcbiAgICAgICAgLy8gY2xlYXIgdGhlc2UgQkVGT1JFIHRoZSByZW5kZXIgc28gdGhhdCBuZXcgdmFsdWVzIHdpbGwgYWNjdW11bGF0ZSBkdXJpbmcgcmVuZGVyXG4gICAgICAgIHRoaXMubmVlZHNSZXJlbmRlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlckNvbXBvbmVudChuZWVkc0Z1bGxSZXJlbmRlcik7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gcmVjZWl2ZWQgYSByZXJlbmRlciByZXF1ZXN0IHdoaWxlIHJlbmRlcmluZ1xuICAgICAgICBpZiAodGhpcy5uZWVkc1JlcmVuZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRSZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKlxuICAgIGRvbid0IGNhbGwgdGhpcyBkaXJlY3RseS4gdXNlIGV4ZWN1dGVSZW5kZXIgaW5zdGVhZFxuICAgICovXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlckNvbXBvbmVudCA9IGZ1bmN0aW9uIChuZWVkc0Z1bGwpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgc3RhdGUgPSBfYS5zdGF0ZSwgY29tcG9uZW50ID0gX2EuY29tcG9uZW50O1xuICAgICAgICB2YXIgdmlld1R5cGUgPSBzdGF0ZS52aWV3VHlwZTtcbiAgICAgICAgdmFyIHZpZXdTcGVjID0gdGhpcy52aWV3U3BlY3Nbdmlld1R5cGVdO1xuICAgICAgICB2YXIgc2F2ZWRTY3JvbGwgPSAobmVlZHNGdWxsICYmIGNvbXBvbmVudCkgPyBjb21wb25lbnQudmlldy5xdWVyeVNjcm9sbCgpIDogbnVsbDtcbiAgICAgICAgaWYgKCF2aWV3U3BlYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmlldyB0eXBlIFxcXCJcIiArIHZpZXdUeXBlICsgXCJcXFwiIGlzIG5vdCB2YWxpZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBldmVudCBzb3VyY2VzIGFyZSBzdGlsbCBsb2FkaW5nIGFuZCBwcm9ncmVzc2l2ZSByZW5kZXJpbmcgaGFzbid0IGJlZW4gZW5hYmxlZCxcbiAgICAgICAgLy8ga2VlcCByZW5kZXJpbmcgdGhlIGxhc3QgZnVsbHkgbG9hZGVkIHNldCBvZiBldmVudHNcbiAgICAgICAgdmFyIHJlbmRlcmFibGVFdmVudFN0b3JlID0gdGhpcy5yZW5kZXJhYmxlRXZlbnRTdG9yZSA9XG4gICAgICAgICAgICAoc3RhdGUuZXZlbnRTb3VyY2VMb2FkaW5nTGV2ZWwgJiYgIXRoaXMub3B0KCdwcm9ncmVzc2l2ZUV2ZW50UmVuZGVyaW5nJykpID9cbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmFibGVFdmVudFN0b3JlIDpcbiAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudFN0b3JlO1xuICAgICAgICB2YXIgZXZlbnRVaVNpbmdsZUJhc2UgPSB0aGlzLmJ1aWxkRXZlbnRVaVNpbmdsZUJhc2Uodmlld1NwZWMub3B0aW9ucyk7XG4gICAgICAgIHZhciBldmVudFVpQnlTb3VyY2UgPSB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlKHN0YXRlLmV2ZW50U291cmNlcyk7XG4gICAgICAgIHZhciBldmVudFVpQmFzZXMgPSB0aGlzLmV2ZW50VWlCYXNlcyA9IHRoaXMuYnVpbGRFdmVudFVpQmFzZXMocmVuZGVyYWJsZUV2ZW50U3RvcmUuZGVmcywgZXZlbnRVaVNpbmdsZUJhc2UsIGV2ZW50VWlCeVNvdXJjZSk7XG4gICAgICAgIGlmIChuZWVkc0Z1bGwgfHwgIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5mcmVlemVIZWlnaHQoKTsgLy8gbmV4dCBjb21wb25lbnQgd2lsbCB1bmZyZWV6ZSBpdFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudCA9IG5ldyBDYWxlbmRhckNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgdmlldzogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlRW52OiB0aGlzLmRhdGVFbnYsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHRoaXMudGhlbWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zTWFuYWdlci5jb21wdXRlZFxuICAgICAgICAgICAgfSwgdGhpcy5lbCk7XG4gICAgICAgICAgICB0aGlzLmlzVmlld1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzRXZlbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7fSwgc3RhdGUsIHsgdmlld1NwZWM6IHZpZXdTcGVjLCBkYXRlUHJvZmlsZTogc3RhdGUuZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yOiB0aGlzLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV0sIGV2ZW50U3RvcmU6IHJlbmRlcmFibGVFdmVudFN0b3JlLCBldmVudFVpQmFzZXM6IGV2ZW50VWlCYXNlcywgZGF0ZVNlbGVjdGlvbjogc3RhdGUuZGF0ZVNlbGVjdGlvbiwgZXZlbnRTZWxlY3Rpb246IHN0YXRlLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWc6IHN0YXRlLmV2ZW50RHJhZywgZXZlbnRSZXNpemU6IHN0YXRlLmV2ZW50UmVzaXplIH0pKTtcbiAgICAgICAgaWYgKHNhdmVkU2Nyb2xsKSB7XG4gICAgICAgICAgICBjb21wb25lbnQudmlldy5hcHBseVNjcm9sbChzYXZlZFNjcm9sbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVmlld1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3ZpZXdTa2VsZXRvblJlbmRlcicsIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbXBvbmVudC52aWV3LFxuICAgICAgICAgICAgICAgICAgICBlbDogY29tcG9uZW50LnZpZXcuZWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0RhdGVzVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2RhdGVzUmVuZGVyJywgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGVsOiBjb21wb25lbnQudmlldy5lbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRXZlbnRzVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0V2ZW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbGVhc2VBZnRlclNpemluZ1RyaWdnZXJzKCk7XG4gICAgfTtcbiAgICAvLyBPcHRpb25zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMubXV0YXRlT3B0aW9ucygoX2EgPSB7fSwgX2FbbmFtZV0gPSB2YWwsIF9hKSwgW10sIHRydWUpO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm9wdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3T3B0cygpW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3U3BlY3NbdGhpcy5zdGF0ZS52aWV3VHlwZV0ub3B0aW9ucztcbiAgICB9O1xuICAgIC8qXG4gICAgaGFuZGxlcyBvcHRpb24gY2hhbmdlcyAobGlrZSBhIGRpZmYpXG4gICAgKi9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUubXV0YXRlT3B0aW9ucyA9IGZ1bmN0aW9uICh1cGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljLCBkZWVwRXF1YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNoYW5nZUhhbmRsZXJzID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3Mub3B0aW9uQ2hhbmdlSGFuZGxlcnM7XG4gICAgICAgIHZhciBub3JtYWxVcGRhdGVzID0ge307XG4gICAgICAgIHZhciBzcGVjaWFsVXBkYXRlcyA9IHt9O1xuICAgICAgICB2YXIgb2xkRGF0ZUVudiA9IHRoaXMuZGF0ZUVudjsgLy8gZG8gdGhpcyBiZWZvcmUgaGFuZGxlT3B0aW9uc1xuICAgICAgICB2YXIgaXNUaW1lWm9uZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIHZhciBpc1NpemVEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB2YXIgYW55RGlmZmljdWx0T3B0aW9ucyA9IEJvb2xlYW4ocmVtb3ZhbHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgbmFtZV8xIGluIHVwZGF0ZXMpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VIYW5kbGVyc1tuYW1lXzFdKSB7XG4gICAgICAgICAgICAgICAgc3BlY2lhbFVwZGF0ZXNbbmFtZV8xXSA9IHVwZGF0ZXNbbmFtZV8xXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vcm1hbFVwZGF0ZXNbbmFtZV8xXSA9IHVwZGF0ZXNbbmFtZV8xXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuYW1lXzIgaW4gbm9ybWFsVXBkYXRlcykge1xuICAgICAgICAgICAgaWYgKC9eKGhlaWdodHxjb250ZW50SGVpZ2h0fGFzcGVjdFJhdGlvKSQvLnRlc3QobmFtZV8yKSkge1xuICAgICAgICAgICAgICAgIGlzU2l6ZURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9eKGRlZmF1bHREYXRlfGRlZmF1bHRWaWV3KSQvLnRlc3QobmFtZV8yKSkgO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYW55RGlmZmljdWx0T3B0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVfMiA9PT0gJ3RpbWVab25lJykge1xuICAgICAgICAgICAgICAgICAgICBpc1RpbWVab25lRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNNYW5hZ2VyLm11dGF0ZShub3JtYWxVcGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljKTtcbiAgICAgICAgaWYgKGFueURpZmZpY3VsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlT3B0aW9ucyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKTtcbiAgICAgICAgICAgIHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0Y2hSZW5kZXJpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFueURpZmZpY3VsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUaW1lWm9uZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfVElNRVpPTkUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkRGF0ZUVudjogb2xkRGF0ZUVudlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogSEFDS1xuICAgICAgICAgICAgICAgIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgY2FsbGluZyB0aGlzLnJlcXVlc3RSZXJlbmRlcih0cnVlKVxuICAgICAgICAgICAgICAgIGJ1dCByZWNvbXB1dGVzIHRoZSBzdGF0ZSdzIGRhdGVQcm9maWxlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld1R5cGU6IF90aGlzLnN0YXRlLnZpZXdUeXBlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1NpemVEaXJ0eSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNwZWNpYWwgdXBkYXRlc1xuICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWVfMyBpbiBzcGVjaWFsVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIYW5kbGVyc1tuYW1lXzNdKHNwZWNpYWxVcGRhdGVzW25hbWVfM10sIF90aGlzLCBkZWVwRXF1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKlxuICAgIHJlYnVpbGRzIHRoaW5ncyBiYXNlZCBvZmYgb2YgYSBjb21wbGV0ZSBzZXQgb2YgcmVmaW5lZCBvcHRpb25zXG4gICAgKi9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaGFuZGxlT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwbHVnaW5Ib29rcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzO1xuICAgICAgICB0aGlzLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ob3B0aW9ucy5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbik7XG4gICAgICAgIHRoaXMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKG9wdGlvbnMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbik7XG4gICAgICAgIHRoaXMuZGVsYXllZFJlcmVuZGVyID0gdGhpcy5idWlsZERlbGF5ZWRSZXJlbmRlcihvcHRpb25zLnJlcmVuZGVyRGVsYXkpO1xuICAgICAgICB0aGlzLnRoZW1lID0gdGhpcy5idWlsZFRoZW1lKG9wdGlvbnMpO1xuICAgICAgICB2YXIgYXZhaWxhYmxlID0gdGhpcy5wYXJzZVJhd0xvY2FsZXMob3B0aW9ucy5sb2NhbGVzKTtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVSYXdMb2NhbGVzID0gYXZhaWxhYmxlLm1hcDtcbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMuYnVpbGRMb2NhbGUob3B0aW9ucy5sb2NhbGUgfHwgYXZhaWxhYmxlLmRlZmF1bHRDb2RlLCBhdmFpbGFibGUubWFwKTtcbiAgICAgICAgdGhpcy5kYXRlRW52ID0gdGhpcy5idWlsZERhdGVFbnYobG9jYWxlLCBvcHRpb25zLnRpbWVab25lLCBwbHVnaW5Ib29rcy5uYW1lZFRpbWVab25lZEltcGwsIG9wdGlvbnMuZmlyc3REYXksIG9wdGlvbnMud2Vla051bWJlckNhbGN1bGF0aW9uLCBvcHRpb25zLndlZWtMYWJlbCwgcGx1Z2luSG9va3MuY21kRm9ybWF0dGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25Db25maWcgPSB0aGlzLmJ1aWxkU2VsZWN0aW9uQ29uZmlnKG9wdGlvbnMpOyAvLyBuZWVkcyBkYXRlRW52LiBkbyBhZnRlciA6KFxuICAgICAgICAvLyBpbmVmZmVjaWVudCB0byBkbyBldmVyeSB0aW1lP1xuICAgICAgICB0aGlzLnZpZXdTcGVjcyA9IGJ1aWxkVmlld1NwZWNzKHBsdWdpbkhvb2tzLnZpZXdzLCB0aGlzLm9wdGlvbnNNYW5hZ2VyKTtcbiAgICAgICAgLy8gaW5lZmZlY2llbnQgdG8gZG8gZXZlcnkgdGltZT9cbiAgICAgICAgdGhpcy5kYXRlUHJvZmlsZUdlbmVyYXRvcnMgPSBtYXBIYXNoKHRoaXMudmlld1NwZWNzLCBmdW5jdGlvbiAodmlld1NwZWMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdmlld1NwZWMuY2xhc3MucHJvdG90eXBlLmRhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3Modmlld1NwZWMsIF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0QXZhaWxhYmxlTG9jYWxlQ29kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF2YWlsYWJsZVJhd0xvY2FsZXMpO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLl9idWlsZFNlbGVjdGlvbkNvbmZpZyA9IGZ1bmN0aW9uIChyYXdPcHRzKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzU2NvcGVkVWlQcm9wcygnc2VsZWN0JywgcmF3T3B0cywgdGhpcyk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuX2J1aWxkRXZlbnRVaVNpbmdsZUJhc2UgPSBmdW5jdGlvbiAocmF3T3B0cykge1xuICAgICAgICBpZiAocmF3T3B0cy5lZGl0YWJsZSkgeyAvLyBzbyAnZWRpdGFibGUnIGFmZmVjdGVkIGV2ZW50c1xuICAgICAgICAgICAgcmF3T3B0cyA9IF9fYXNzaWduKHt9LCByYXdPcHRzLCB7IGV2ZW50RWRpdGFibGU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NTY29wZWRVaVByb3BzKCdldmVudCcsIHJhd09wdHMsIHRoaXMpO1xuICAgIH07XG4gICAgLy8gVHJpZ2dlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmhhc1B1YmxpY0hhbmRsZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzSGFuZGxlcnMobmFtZSkgfHxcbiAgICAgICAgICAgIHRoaXMub3B0KG5hbWUpOyAvLyBoYW5kbGVyIHNwZWNpZmllZCBpbiBvcHRpb25zXG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIG9wdEhhbmRsZXIgPSB0aGlzLm9wdChuYW1lKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyV2l0aChuYW1lLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgaWYgKG9wdEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgYWZ0ZXJTaXppbmdUcmlnZ2VycyA9IHRoaXMuYWZ0ZXJTaXppbmdUcmlnZ2VycztcbiAgICAgICAgKGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV0gfHwgKGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV0gPSBbXSkpLnB1c2goYXJncyk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVsZWFzZUFmdGVyU2l6aW5nVHJpZ2dlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhZnRlclNpemluZ1RyaWdnZXJzID0gdGhpcy5hZnRlclNpemluZ1RyaWdnZXJzO1xuICAgICAgICBmb3IgKHZhciBuYW1lXzQgaW4gYWZ0ZXJTaXppbmdUcmlnZ2Vycykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV80XTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcihuYW1lXzQsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWZ0ZXJTaXppbmdUcmlnZ2VycyA9IHt9O1xuICAgIH07XG4gICAgLy8gVmlld1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUmV0dXJucyBhIGJvb2xlYW4gYWJvdXQgd2hldGhlciB0aGUgdmlldyBpcyBva2F5IHRvIGluc3RhbnRpYXRlIGF0IHNvbWUgcG9pbnRcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaXNWYWxpZFZpZXdUeXBlID0gZnVuY3Rpb24gKHZpZXdUeXBlKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlXSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuY2hhbmdlVmlldyA9IGZ1bmN0aW9uICh2aWV3VHlwZSwgZGF0ZU9yUmFuZ2UpIHtcbiAgICAgICAgdmFyIGRhdGVNYXJrZXIgPSBudWxsO1xuICAgICAgICBpZiAoZGF0ZU9yUmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT3JSYW5nZS5zdGFydCAmJiBkYXRlT3JSYW5nZS5lbmQpIHsgLy8gYSByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01hbmFnZXIubXV0YXRlKHsgdmlzaWJsZVJhbmdlOiBkYXRlT3JSYW5nZSB9LCBbXSk7IC8vIHdpbGwgbm90IHJlcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVPcHRpb25zKHRoaXMub3B0aW9uc01hbmFnZXIuY29tcHV0ZWQpOyAvLyAuLi5idXQgeXVja1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIGEgZGF0ZVxuICAgICAgICAgICAgICAgIGRhdGVNYXJrZXIgPSB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKGRhdGVPclJhbmdlKTsgLy8ganVzdCBsaWtlIGdvdG9EYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgIHZpZXdUeXBlOiB2aWV3VHlwZSxcbiAgICAgICAgICAgIGRhdGVNYXJrZXI6IGRhdGVNYXJrZXJcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBGb3JjZXMgbmF2aWdhdGlvbiB0byBhIHZpZXcgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICAgIC8vIGB2aWV3VHlwZWAgY2FuIGJlIGEgc3BlY2lmaWMgdmlldyBuYW1lIG9yIGEgZ2VuZXJpYyBvbmUgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLlxuICAgIC8vIG5lZWRzIHRvIGNoYW5nZVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS56b29tVG8gPSBmdW5jdGlvbiAoZGF0ZU1hcmtlciwgdmlld1R5cGUpIHtcbiAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgIHZpZXdUeXBlID0gdmlld1R5cGUgfHwgJ2RheSc7IC8vIGRheSBpcyBkZWZhdWx0IHpvb21cbiAgICAgICAgc3BlYyA9IHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlXSB8fFxuICAgICAgICAgICAgdGhpcy5nZXRVbml0Vmlld1NwZWModmlld1R5cGUpO1xuICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgIGlmIChzcGVjKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX1ZJRVdfVFlQRScsXG4gICAgICAgICAgICAgICAgdmlld1R5cGU6IHNwZWMudHlwZSxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBkYXRlTWFya2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogZGF0ZU1hcmtlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdpdmVuIGEgZHVyYXRpb24gc2luZ3VsYXIgdW5pdCwgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLCBmaW5kcyBhIG1hdGNoaW5nIHZpZXcgc3BlYy5cbiAgICAvLyBQcmVmZXJlbmNlIGlzIGdpdmVuIHRvIHZpZXdzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGJ1dHRvbnMuXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldFVuaXRWaWV3U3BlYyA9IGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgdmFyIHZpZXdUeXBlcyA9IFtdO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgIC8vIHB1dCB2aWV3cyB0aGF0IGhhdmUgYnV0dG9ucyBmaXJzdC4gdGhlcmUgd2lsbCBiZSBkdXBsaWNhdGVzLCBidXQgb2hcbiAgICAgICAgaWYgKGNvbXBvbmVudC5oZWFkZXIpIHtcbiAgICAgICAgICAgIHZpZXdUeXBlcy5wdXNoLmFwcGx5KHZpZXdUeXBlcywgY29tcG9uZW50LmhlYWRlci52aWV3c1dpdGhCdXR0b25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcG9uZW50LmZvb3Rlcikge1xuICAgICAgICAgICAgdmlld1R5cGVzLnB1c2guYXBwbHkodmlld1R5cGVzLCBjb21wb25lbnQuZm9vdGVyLnZpZXdzV2l0aEJ1dHRvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHZpZXdUeXBlIGluIHRoaXMudmlld1NwZWNzKSB7XG4gICAgICAgICAgICB2aWV3VHlwZXMucHVzaCh2aWV3VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZpZXdUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3BlYyA9IHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlc1tpXV07XG4gICAgICAgICAgICBpZiAoc3BlYykge1xuICAgICAgICAgICAgICAgIGlmIChzcGVjLnNpbmdsZVVuaXQgPT09IHVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwZWM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDdXJyZW50IERhdGVcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRJbml0aWFsRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlZmF1bHREYXRlSW5wdXQgPSB0aGlzLm9wdCgnZGVmYXVsdERhdGUnKTtcbiAgICAgICAgLy8gY29tcHV0ZSB0aGUgaW5pdGlhbCBhbWJpZy10aW1lem9uZSBkYXRlXG4gICAgICAgIGlmIChkZWZhdWx0RGF0ZUlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKGRlZmF1bHREYXRlSW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm93KCk7IC8vIGdldE5vdyBhbHJlYWR5IHJldHVybnMgdW56b25lZFxuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1BSRVYnIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdORVhUJyB9KTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5wcmV2WWVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkWWVhcnModGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSwgLTEpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm5leHRZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgIGRhdGVNYXJrZXI6IHRoaXMuZGF0ZUVudi5hZGRZZWFycyh0aGlzLnN0YXRlLmN1cnJlbnREYXRlLCAxKVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS50b2RheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmdldE5vdygpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdvdG9EYXRlID0gZnVuY3Rpb24gKHpvbmVkRGF0ZUlucHV0KSB7XG4gICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnU0VUX0RBVEUnLFxuICAgICAgICAgICAgZGF0ZU1hcmtlcjogdGhpcy5kYXRlRW52LmNyZWF0ZU1hcmtlcih6b25lZERhdGVJbnB1dClcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaW5jcmVtZW50RGF0ZSA9IGZ1bmN0aW9uIChkZWx0YUlucHV0KSB7XG4gICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICBpZiAoZGVsdGEpIHsgLy8gZWxzZSwgd2FybiBhYm91dCBpbnZhbGlkIGlucHV0P1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkKHRoaXMuc3RhdGUuY3VycmVudERhdGUsIGRlbHRhKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGZvciBleHRlcm5hbCBBUElcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSk7XG4gICAgfTtcbiAgICAvLyBEYXRlIEZvcm1hdHRpbmcgVXRpbHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5mb3JtYXREYXRlID0gZnVuY3Rpb24gKGQsIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KGRhdGVFbnYuY3JlYXRlTWFya2VyKGQpLCBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0dGVyKSk7XG4gICAgfTtcbiAgICAvLyBgc2V0dGluZ3NgIGlzIGZvciBmb3JtYXR0ZXIgQU5EIGlzRW5kRXhjbHVzaXZlXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKGQwLCBkMSwgc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKGRhdGVFbnYuY3JlYXRlTWFya2VyKGQwKSwgZGF0ZUVudi5jcmVhdGVNYXJrZXIoZDEpLCBjcmVhdGVGb3JtYXR0ZXIoc2V0dGluZ3MsIHRoaXMub3B0KCdkZWZhdWx0UmFuZ2VTZXBhcmF0b3InKSksIHNldHRpbmdzKTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5mb3JtYXRJc28gPSBmdW5jdGlvbiAoZCwgb21pdFRpbWUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdElzbyhkYXRlRW52LmNyZWF0ZU1hcmtlcihkKSwgeyBvbWl0VGltZTogb21pdFRpbWUgfSk7XG4gICAgfTtcbiAgICAvLyBTaXppbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS53aW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSGFuZGxpbmdXaW5kb3dSZXNpemUgJiZcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ICYmIC8vIHdoeT9cbiAgICAgICAgICAgIGV2LnRhcmdldCA9PT0gd2luZG93IC8vIG5vdCBhIGpxdWkgcmVzaXplIGV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5pc0hhbmRsaW5nV2luZG93UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3dpbmRvd1Jlc2l6ZScsIFt0aGlzLnZpZXddKTtcbiAgICAgICAgICAgIHRoaXMuaXNIYW5kbGluZ1dpbmRvd1Jlc2l6ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7IC8vIHdoZW4/XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVTaXplKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDb21wb25lbnQgUmVnaXN0cmF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIHNldHRpbmdzSW5wdXQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gcGFyc2VJbnRlcmFjdGlvblNldHRpbmdzKGNvbXBvbmVudCwgc2V0dGluZ3NJbnB1dCk7XG4gICAgICAgIHZhciBERUZBVUxUX0lOVEVSQUNUSU9OUyA9IFtcbiAgICAgICAgICAgIEV2ZW50Q2xpY2tpbmcsXG4gICAgICAgICAgICBFdmVudEhvdmVyaW5nXG4gICAgICAgIF07XG4gICAgICAgIHZhciBpbnRlcmFjdGlvbkNsYXNzZXMgPSBERUZBVUxUX0lOVEVSQUNUSU9OUy5jb25jYXQodGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuY29tcG9uZW50SW50ZXJhY3Rpb25zKTtcbiAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IGludGVyYWN0aW9uQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGludGVyYWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaW50ZXJhY3Rpb25DbGFzcyhzZXR0aW5ncyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdID0gaW50ZXJhY3Rpb25zO1xuICAgICAgICBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmVbY29tcG9uZW50LnVpZF0gPSBzZXR0aW5ncztcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gX2FbX2ldO1xuICAgICAgICAgICAgbGlzdGVuZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgICAgICBkZWxldGUgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgIH07XG4gICAgLy8gRGF0ZSBTZWxlY3Rpb24gLyBFdmVudCBTZWxlY3Rpb24gLyBEYXlDbGlja1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhpcyBwdWJsaWMgbWV0aG9kIHJlY2VpdmVzIHN0YXJ0L2VuZCBkYXRlcyBpbiBhbnkgZm9ybWF0LCB3aXRoIGFueSB0aW1lem9uZVxuICAgIC8vIE5PVEU6IGFyZ3Mgd2VyZSBjaGFuZ2VkIGZyb20gdjNcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKGRhdGVPck9iaiwgZW5kRGF0ZSkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uSW5wdXQ7XG4gICAgICAgIGlmIChlbmREYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT3JPYmouc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbklucHV0ID0gZGF0ZU9yT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlT3JPYmosXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbnVsbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25JbnB1dCA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogZGF0ZU9yT2JqLFxuICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZWN0aW9uID0gcGFyc2VEYXRlU3BhbihzZWxlY3Rpb25JbnB1dCwgdGhpcy5kYXRlRW52LCBjcmVhdGVEdXJhdGlvbih7IGRheXM6IDEgfSkgLy8gVE9ETzogY2FjaGUgdGhpcz9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbikgeyAvLyB0aHJvdyBwYXJzZSBlcnJvciBvdGhlcndpc2U/XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogc2VsZWN0aW9uIH0pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRGF0ZVNlbGVjdChzZWxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBwdWJsaWMgbWV0aG9kXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnVuc2VsZWN0ID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kYXRlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0RBVEVTJyB9KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckRhdGVVbnNlbGVjdChwZXYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUudHJpZ2dlckRhdGVTZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0aW9uLCBwZXYpIHtcbiAgICAgICAgdmFyIGFyZyA9IF9fYXNzaWduKHt9LCB0aGlzLmJ1aWxkRGF0ZVNwYW5BcGkoc2VsZWN0aW9uKSwgeyBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCwgdmlldzogdGhpcy52aWV3IH0pO1xuICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignc2VsZWN0JywgW2FyZ10pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnRyaWdnZXJEYXRlVW5zZWxlY3QgPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCd1bnNlbGVjdCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCxcbiAgICAgICAgICAgICAgICB2aWV3OiB0aGlzLnZpZXdcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiByZWNlaXZlIHBldj9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUudHJpZ2dlckRhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRlU3BhbiwgZGF5RWwsIHZpZXcsIGV2KSB7XG4gICAgICAgIHZhciBhcmcgPSBfX2Fzc2lnbih7fSwgdGhpcy5idWlsZERhdGVQb2ludEFwaShkYXRlU3BhbiksIHsgZGF5RWw6IGRheUVsLCBqc0V2ZW50OiBldiwgLy8gSXMgdGhpcyBhbHdheXMgYSBtb3VzZSBldmVudD8gU2VlICM0NjU1XG4gICAgICAgICAgICB2aWV3OiB2aWV3IH0pO1xuICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignZGF0ZUNsaWNrJywgW2FyZ10pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkRGF0ZVBvaW50QXBpID0gZnVuY3Rpb24gKGRhdGVTcGFuKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuZGF0ZVBvaW50VHJhbnNmb3JtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfYVtfaV07XG4gICAgICAgICAgICBfX2Fzc2lnbihwcm9wcywgdHJhbnNmb3JtKGRhdGVTcGFuLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgX19hc3NpZ24ocHJvcHMsIGJ1aWxkRGF0ZVBvaW50QXBpKGRhdGVTcGFuLCB0aGlzLmRhdGVFbnYpKTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkRGF0ZVNwYW5BcGkgPSBmdW5jdGlvbiAoZGF0ZVNwYW4pIHtcbiAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnBsdWdpblN5c3RlbS5ob29rcy5kYXRlU3BhblRyYW5zZm9ybXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gX2FbX2ldO1xuICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIHRyYW5zZm9ybShkYXRlU3BhbiwgdGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIF9fYXNzaWduKHByb3BzLCBidWlsZERhdGVTcGFuQXBpKGRhdGVTcGFuLCB0aGlzLmRhdGVFbnYpKTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG4gICAgLy8gRGF0ZSBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUmV0dXJucyBhIERhdGVNYXJrZXIgZm9yIHRoZSBjdXJyZW50IGRhdGUsIGFzIGRlZmluZWQgYnkgdGhlIGNsaWVudCdzIGNvbXB1dGVyIG9yIGZyb20gdGhlIGBub3dgIG9wdGlvblxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXROb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLm9wdCgnbm93Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBub3cgPSBub3coKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm93ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTm93TWFya2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi5jcmVhdGVNYXJrZXIobm93KTtcbiAgICB9O1xuICAgIC8vIEV2ZW50LURhdGUgVXRpbGl0aWVzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBHaXZlbiBhbiBldmVudCdzIGFsbERheSBzdGF0dXMgYW5kIHN0YXJ0IGRhdGUsIHJldHVybiB3aGF0IGl0cyBmYWxsYmFjayBlbmQgZGF0ZSBzaG91bGQgYmUuXG4gICAgLy8gVE9ETzogcmVuYW1lIHRvIGNvbXB1dGVEZWZhdWx0RXZlbnRFbmRcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RGVmYXVsdEV2ZW50RW5kID0gZnVuY3Rpb24gKGFsbERheSwgbWFya2VyKSB7XG4gICAgICAgIHZhciBlbmQgPSBtYXJrZXI7XG4gICAgICAgIGlmIChhbGxEYXkpIHtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0T2ZEYXkoZW5kKTtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuZGF0ZUVudi5hZGQoZW5kLCB0aGlzLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuZGF0ZUVudi5hZGQoZW5kLCB0aGlzLmRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmQ7XG4gICAgfTtcbiAgICAvLyBQdWJsaWMgRXZlbnRzIEFQSVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50SW5wdXQsIHNvdXJjZUlucHV0KSB7XG4gICAgICAgIGlmIChldmVudElucHV0IGluc3RhbmNlb2YgRXZlbnRBcGkpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBldmVudElucHV0Ll9kZWY7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudElucHV0Ll9pbnN0YW5jZTtcbiAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50U3RvcmUuZGVmc1tkZWYuZGVmSWRdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRUdXBsZVRvU3RvcmUoeyBkZWY6IGRlZiwgaW5zdGFuY2U6IGluc3RhbmNlIH0pIC8vIFRPRE86IGJldHRlciB1dGlsIGZvciB0d28gYXJncz9cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudElucHV0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2VJZDtcbiAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgIHNvdXJjZUlkID0gc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzb3VyY2VJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlQXBpID0gdGhpcy5nZXRFdmVudFNvdXJjZUJ5SWQoc291cmNlSW5wdXQpOyAvLyBUT0RPOiB1c2UgYW4gaW50ZXJuYWwgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghc291cmNlQXBpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBhbiBldmVudCBzb3VyY2Ugd2l0aCBJRCBcIicgKyBzb3VyY2VJbnB1dCArICdcIicpOyAvLyBUT0RPOiB0ZXN0XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VJZCA9IHNvdXJjZUFwaS5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0dXBsZSA9IHBhcnNlRXZlbnQoZXZlbnRJbnB1dCwgc291cmNlSWQsIHRoaXMpO1xuICAgICAgICBpZiAodHVwbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEFwaSh0aGlzLCB0dXBsZS5kZWYsIHR1cGxlLmRlZi5yZWN1cnJpbmdEZWYgPyBudWxsIDogdHVwbGUuaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgLy8gVE9ETzogb3B0aW1pemVcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RXZlbnRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuc3RhdGUuZXZlbnRTdG9yZSwgZGVmcyA9IF9hLmRlZnMsIGluc3RhbmNlcyA9IF9hLmluc3RhbmNlcztcbiAgICAgICAgaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBkZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tkZWZJZF07XG4gICAgICAgICAgICBpZiAoZGVmLnB1YmxpY0lkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRBcGkodGhpcywgZGVmLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuZGVmSWQgPT09IGRlZi5kZWZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRBcGkodGhpcywgZGVmLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnN0YXRlLmV2ZW50U3RvcmUsIGRlZnMgPSBfYS5kZWZzLCBpbnN0YW5jZXMgPSBfYS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBldmVudEFwaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgZXZlbnRBcGlzLnB1c2gobmV3IEV2ZW50QXBpKHRoaXMsIGRlZiwgaW5zdGFuY2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcGlzO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbW92ZUFsbEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdSRU1PVkVfQUxMX0VWRU5UUycgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVyZW5kZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUkVTRVRfRVZFTlRTJyB9KTtcbiAgICB9O1xuICAgIC8vIFB1YmxpYyBFdmVudCBTb3VyY2VzIEFQSVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldEV2ZW50U291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZUhhc2ggPSB0aGlzLnN0YXRlLmV2ZW50U291cmNlcztcbiAgICAgICAgdmFyIHNvdXJjZUFwaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaW50ZXJuYWxJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICBzb3VyY2VBcGlzLnB1c2gobmV3IEV2ZW50U291cmNlQXBpKHRoaXMsIHNvdXJjZUhhc2hbaW50ZXJuYWxJZF0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlQXBpcztcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRFdmVudFNvdXJjZUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIHNvdXJjZUhhc2ggPSB0aGlzLnN0YXRlLmV2ZW50U291cmNlcztcbiAgICAgICAgaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlSGFzaFtzb3VyY2VJZF0ucHVibGljSWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLCBzb3VyY2VIYXNoW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYWRkRXZlbnRTb3VyY2UgPSBmdW5jdGlvbiAoc291cmNlSW5wdXQpIHtcbiAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50U291cmNlc1tzb3VyY2VJbnB1dC5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VJbnB1dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBwYXJzZUV2ZW50U291cmNlKHNvdXJjZUlucHV0LCB0aGlzKTtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlKSB7IC8vIFRPRE86IGVycm9yIG90aGVyd2lzZT9cbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLCBzb3VyY2VzOiBbZXZlbnRTb3VyY2VdIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLCBldmVudFNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVtb3ZlQWxsRXZlbnRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUycgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVmZXRjaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyB9KTtcbiAgICB9O1xuICAgIC8vIFNjcm9sbFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnNjcm9sbFRvVGltZSA9IGZ1bmN0aW9uICh0aW1lSW5wdXQpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24odGltZUlucHV0KTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC52aWV3LnNjcm9sbFRvRHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ2FsZW5kYXI7XG59KCkpO1xuRW1pdHRlck1peGluLm1peEludG8oQ2FsZW5kYXIpO1xuLy8gZm9yIG1lbW9pemVyc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGJ1aWxkRGF0ZUVudihsb2NhbGUsIHRpbWVab25lLCBuYW1lZFRpbWVab25lSW1wbCwgZmlyc3REYXksIHdlZWtOdW1iZXJDYWxjdWxhdGlvbiwgd2Vla0xhYmVsLCBjbWRGb3JtYXR0ZXIpIHtcbiAgICByZXR1cm4gbmV3IERhdGVFbnYoe1xuICAgICAgICBjYWxlbmRhclN5c3RlbTogJ2dyZWdvcnknLFxuICAgICAgICB0aW1lWm9uZTogdGltZVpvbmUsXG4gICAgICAgIG5hbWVkVGltZVpvbmVJbXBsOiBuYW1lZFRpbWVab25lSW1wbCxcbiAgICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICAgIHdlZWtOdW1iZXJDYWxjdWxhdGlvbjogd2Vla051bWJlckNhbGN1bGF0aW9uLFxuICAgICAgICBmaXJzdERheTogZmlyc3REYXksXG4gICAgICAgIHdlZWtMYWJlbDogd2Vla0xhYmVsLFxuICAgICAgICBjbWRGb3JtYXR0ZXI6IGNtZEZvcm1hdHRlclxuICAgIH0pO1xufVxuZnVuY3Rpb24gYnVpbGRUaGVtZShjYWxlbmRhck9wdGlvbnMpIHtcbiAgICB2YXIgdGhlbWVDbGFzcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLnRoZW1lQ2xhc3Nlc1tjYWxlbmRhck9wdGlvbnMudGhlbWVTeXN0ZW1dIHx8IFN0YW5kYXJkVGhlbWU7XG4gICAgcmV0dXJuIG5ldyB0aGVtZUNsYXNzKGNhbGVuZGFyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBidWlsZERlbGF5ZWRSZXJlbmRlcih3YWl0KSB7XG4gICAgdmFyIGZ1bmMgPSB0aGlzLnRyeVJlcmVuZGVyLmJpbmQodGhpcyk7XG4gICAgaWYgKHdhaXQgIT0gbnVsbCkge1xuICAgICAgICBmdW5jID0gZGVib3VuY2UoZnVuYywgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xufVxuZnVuY3Rpb24gYnVpbGRFdmVudFVpQnlTb3VyY2UoZXZlbnRTb3VyY2VzKSB7XG4gICAgcmV0dXJuIG1hcEhhc2goZXZlbnRTb3VyY2VzLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50U291cmNlLnVpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYnVpbGRFdmVudFVpQmFzZXMoZXZlbnREZWZzLCBldmVudFVpU2luZ2xlQmFzZSwgZXZlbnRVaUJ5U291cmNlKSB7XG4gICAgdmFyIGV2ZW50VWlCYXNlcyA9IHsgJyc6IGV2ZW50VWlTaW5nbGVCYXNlIH07XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnREZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudERlZnNbZGVmSWRdO1xuICAgICAgICBpZiAoZGVmLnNvdXJjZUlkICYmIGV2ZW50VWlCeVNvdXJjZVtkZWYuc291cmNlSWRdKSB7XG4gICAgICAgICAgICBldmVudFVpQmFzZXNbZGVmSWRdID0gZXZlbnRVaUJ5U291cmNlW2RlZi5zb3VyY2VJZF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50VWlCYXNlcztcbn1cblxudmFyIFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZpZXcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlldyhjb250ZXh0LCB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQsIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtdmlldyBmYy0nICsgdmlld1NwZWMudHlwZSArICctdmlldycgfSksIHRydWUgLy8gaXNWaWV3IChIQUNLKVxuICAgICAgICApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlbmRlckRhdGVzTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJEYXRlc1dyYXAsIF90aGlzLnVucmVuZGVyRGF0ZXNXcmFwKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQnVzaW5lc3NIb3Vyc01lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyQnVzaW5lc3NIb3VycywgX3RoaXMudW5yZW5kZXJCdXNpbmVzc0hvdXJzLCBbX3RoaXMucmVuZGVyRGF0ZXNNZW1dKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbk1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIF90aGlzLnVucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudHNNZW0gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckV2ZW50cywgX3RoaXMudW5yZW5kZXJFdmVudHMsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbk1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRXZlbnRTZWxlY3Rpb25XcmFwLCBfdGhpcy51bnJlbmRlckV2ZW50U2VsZWN0aW9uV3JhcCwgW190aGlzLnJlbmRlckV2ZW50c01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudERyYWdNZW0gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckV2ZW50RHJhZ1dyYXAsIF90aGlzLnVucmVuZGVyRXZlbnREcmFnV3JhcCwgW190aGlzLnJlbmRlckRhdGVzTWVtXSk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50UmVzaXplTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJFdmVudFJlc2l6ZVdyYXAsIF90aGlzLnVucmVuZGVyRXZlbnRSZXNpemVXcmFwLCBbX3RoaXMucmVuZGVyRGF0ZXNNZW1dKTtcbiAgICAgICAgX3RoaXMudmlld1NwZWMgPSB2aWV3U3BlYztcbiAgICAgICAgX3RoaXMuZGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSBkYXRlUHJvZmlsZUdlbmVyYXRvcjtcbiAgICAgICAgX3RoaXMudHlwZSA9IHZpZXdTcGVjLnR5cGU7XG4gICAgICAgIF90aGlzLmV2ZW50T3JkZXJTcGVjcyA9IHBhcnNlRmllbGRTcGVjcyhfdGhpcy5vcHQoJ2V2ZW50T3JkZXInKSk7XG4gICAgICAgIF90aGlzLm5leHREYXlUaHJlc2hvbGQgPSBjcmVhdGVEdXJhdGlvbihfdGhpcy5vcHQoJ25leHREYXlUaHJlc2hvbGQnKSk7XG4gICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKF90aGlzLmVsKTtcbiAgICAgICAgX3RoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwiYWN0aXZlU3RhcnRcIiwge1xuICAgICAgICAvLyBEYXRlIFNldHRpbmcvVW5zZXR0aW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZS5zdGFydCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3LnByb3RvdHlwZSwgXCJhY3RpdmVFbmRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYudG9EYXRlKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UuZW5kKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXcucHJvdG90eXBlLCBcImN1cnJlbnRTdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2Uuc3RhcnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwiY3VycmVudEVuZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UuZW5kKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gR2VuZXJhbCBSZW5kZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVzTWVtKHByb3BzLmRhdGVQcm9maWxlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCdXNpbmVzc0hvdXJzTWVtKHByb3BzLmJ1c2luZXNzSG91cnMpO1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb25NZW0ocHJvcHMuZGF0ZVNlbGVjdGlvbik7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRzTWVtKHByb3BzLmV2ZW50U3RvcmUpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uTWVtKHByb3BzLmV2ZW50U2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWdNZW0ocHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZU1lbShwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlc01lbS51bnJlbmRlcigpOyAvLyBzaG91bGQgdW5yZW5kZXIgZXZlcnl0aGluZyBlbHNlXG4gICAgfTtcbiAgICAvLyBTaXppbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0bykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICBpZiAoaXNSZXNpemUgfHwgLy8gSEFDS1MuLi5cbiAgICAgICAgICAgIGNhbGVuZGFyLmlzVmlld1VwZGF0ZWQgfHxcbiAgICAgICAgICAgIGNhbGVuZGFyLmlzRGF0ZXNVcGRhdGVkIHx8XG4gICAgICAgICAgICBjYWxlbmRhci5pc0V2ZW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIC8vIHNvcnQgb2YgdGhlIGNhdGNoLWFsbCBzaXppbmdcbiAgICAgICAgICAgIC8vIGFueXRoaW5nIHRoYXQgbWlnaHQgY2F1c2UgZGltZW5zaW9uIGNoYW5nZXNcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmFzZVNpemUoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZUJhc2VTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB2aWV3SGVpZ2h0LCBpc0F1dG8pIHtcbiAgICB9O1xuICAgIC8vIERhdGUgUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJEYXRlc1dyYXAgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlcyhkYXRlUHJvZmlsZSk7XG4gICAgICAgIHRoaXMuYWRkU2Nyb2xsKHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbih0aGlzLm9wdCgnc2Nyb2xsVGltZScpKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFydE5vd0luZGljYXRvcihkYXRlUHJvZmlsZSk7IC8vIHNob3VsZG4ndCByZW5kZXIgeWV0IGJlY2F1c2UgdXBkYXRlU2l6ZSB3aWxsIGJlIGNhbGxlZCBzb29uXG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVzV3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wTm93SW5kaWNhdG9yKCk7XG4gICAgICAgIHRoaXMudW5yZW5kZXJEYXRlcygpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRGF0ZXMgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8vIEJ1c2luZXNzIEhvdXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJCdXNpbmVzc0hvdXJzID0gZnVuY3Rpb24gKGJ1c2luZXNzSG91cnMpIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckJ1c2luZXNzSG91cnMgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLy8gRGF0ZSBTZWxlY3Rpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckRhdGVTZWxlY3Rpb25XcmFwID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJEYXRlU2VsZWN0aW9uV3JhcCA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckRhdGVTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IH07XG4gICAgLy8gRXZlbnQgUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudHMgPSBmdW5jdGlvbiAoZXZlbnRTdG9yZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8vIHV0aWwgZm9yIHN1YmNsYXNzZXNcbiAgICBWaWV3LnByb3RvdHlwZS5zbGljZUV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBhbGxEYXkpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIHNsaWNlRXZlbnRTdG9yZShldmVudFN0b3JlLCBwcm9wcy5ldmVudFVpQmFzZXMsIHByb3BzLmRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBhbGxEYXkgPyB0aGlzLm5leHREYXlUaHJlc2hvbGQgOiBudWxsKS5mZztcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVFdmVudERyYWdnYWJsZSA9IGZ1bmN0aW9uIChldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXJzID0gdGhpcy5jYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM7XG4gICAgICAgIHZhciB2YWwgPSBldmVudFVpLnN0YXJ0RWRpdGFibGU7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdHJhbnNmb3JtZXJzXzEgPSB0cmFuc2Zvcm1lcnM7IF9pIDwgdHJhbnNmb3JtZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcnNfMVtfaV07XG4gICAgICAgICAgICB2YWwgPSB0cmFuc2Zvcm1lcih2YWwsIGV2ZW50RGVmLCBldmVudFVpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUgPSBmdW5jdGlvbiAoZXZlbnREZWYsIGV2ZW50VWkpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50VWkuZHVyYXRpb25FZGl0YWJsZSAmJiB0aGlzLm9wdCgnZXZlbnRSZXNpemFibGVGcm9tU3RhcnQnKTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVFdmVudEVuZFJlc2l6YWJsZSA9IGZ1bmN0aW9uIChldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICByZXR1cm4gZXZlbnRVaS5kdXJhdGlvbkVkaXRhYmxlO1xuICAgIH07XG4gICAgLy8gRXZlbnQgU2VsZWN0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFNlbGVjdGlvbldyYXAgPSBmdW5jdGlvbiAoaW5zdGFuY2VJZCkge1xuICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbihpbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFNlbGVjdGlvbldyYXAgPSBmdW5jdGlvbiAoaW5zdGFuY2VJZCkge1xuICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50U2VsZWN0aW9uKGluc3RhbmNlSWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7IH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7IH07XG4gICAgLy8gRXZlbnQgRHJhZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRXZlbnREcmFnV3JhcCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnREcmFnKHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudERyYWdXcmFwID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50RHJhZyhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7IH07XG4gICAgLy8gRXZlbnQgUmVzaXplXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFJlc2l6ZVdyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckV2ZW50UmVzaXplKHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFJlc2l6ZVdyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnVucmVuZGVyRXZlbnRSZXNpemUoc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFJlc2l6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRSZXNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHsgfTtcbiAgICAvKiBOb3cgSW5kaWNhdG9yXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBJbW1lZGlhdGVseSByZW5kZXIgdGhlIGN1cnJlbnQgdGltZSBpbmRpY2F0b3IgYW5kIGJlZ2lucyByZS1yZW5kZXJpbmcgaXQgYXQgYW4gaW50ZXJ2YWwsXG4gICAgLy8gd2hpY2ggaXMgZGVmaW5lZCBieSB0aGlzLmdldE5vd0luZGljYXRvclVuaXQoKS5cbiAgICAvLyBUT0RPOiBzb21laG93IGRvIHRoaXMgZm9yIHRoZSBjdXJyZW50IHdob2xlIGRheSdzIGJhY2tncm91bmQgdG9vXG4gICAgVmlldy5wcm90b3R5cGUuc3RhcnROb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciB1bml0O1xuICAgICAgICB2YXIgdXBkYXRlO1xuICAgICAgICB2YXIgZGVsYXk7IC8vIG1zIHdhaXQgdmFsdWVcbiAgICAgICAgaWYgKHRoaXMub3B0KCdub3dJbmRpY2F0b3InKSkge1xuICAgICAgICAgICAgdW5pdCA9IHRoaXMuZ2V0Tm93SW5kaWNhdG9yVW5pdChkYXRlUHJvZmlsZSk7XG4gICAgICAgICAgICBpZiAodW5pdCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRoaXMudXBkYXRlTm93SW5kaWNhdG9yLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsTm93RGF0ZSA9IHRoaXMuY2FsZW5kYXIuZ2V0Tm93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsTm93UXVlcmllZE1zID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgLy8gd2FpdCB1bnRpbCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGludGVydmFsXG4gICAgICAgICAgICAgICAgZGVsYXkgPSBkYXRlRW52LmFkZChkYXRlRW52LnN0YXJ0T2YodGhpcy5pbml0aWFsTm93RGF0ZSwgdW5pdCksIGNyZWF0ZUR1cmF0aW9uKDEsIHVuaXQpKS52YWx1ZU9mKCkgLSB0aGlzLmluaXRpYWxOb3dEYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBhbHdheXMgdXNlIHNldFRpbWVvdXQsIHdhaXRpbmcgdW50aWwgc3RhcnQgb2YgbmV4dCB1bml0XG4gICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubm93SW5kaWNhdG9yVGltZW91dElEID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bml0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAxMDAwOyAvLyBldmVyeSBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMTAwMCAqIDYwOyAvLyBvdGhlcndpc2UsIGV2ZXJ5IG1pbnV0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5vd0luZGljYXRvckludGVydmFsSUQgPSBzZXRJbnRlcnZhbCh1cGRhdGUsIGRlbGF5KTsgLy8gdXBkYXRlIGV2ZXJ5IGludGVydmFsXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVuZGVyaW5nIHdpbGwgYmUgaW5pdGlhdGVkIGluIHVwZGF0ZVNpemVcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcmVyZW5kZXJzIHRoZSBub3cgaW5kaWNhdG9yLCBjb21wdXRpbmcgdGhlIG5ldyBjdXJyZW50IHRpbWUgZnJvbSB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXMgcGFzc2VkXG4gICAgLy8gc2luY2UgdGhlIGluaXRpYWwgZ2V0Tm93IGNhbGwuXG4gICAgVmlldy5wcm90b3R5cGUudXBkYXRlTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSAmJiAvLyBhIHdheSB0byBkZXRlcm1pbmUgaWYgZGF0ZXMgd2VyZSByZW5kZXJlZCB5ZXRcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbE5vd0RhdGUgLy8gYWN0aXZhdGVkIGJlZm9yZT9cbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnVucmVuZGVyTm93SW5kaWNhdG9yKCk7IC8vIHdvbid0IHVucmVuZGVyIGlmIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vd0luZGljYXRvcihhZGRNcyh0aGlzLmluaXRpYWxOb3dEYXRlLCBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHRoaXMuaW5pdGlhbE5vd1F1ZXJpZWRNcykpO1xuICAgICAgICAgICAgdGhpcy5pc05vd0luZGljYXRvclJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSW1tZWRpYXRlbHkgdW5yZW5kZXJzIHRoZSB2aWV3J3MgY3VycmVudCB0aW1lIGluZGljYXRvciBhbmQgc3RvcHMgYW55IHJlLXJlbmRlcmluZyB0aW1lcnMuXG4gICAgLy8gV29uJ3QgY2F1c2Ugc2lkZSBlZmZlY3RzIGlmIGluZGljYXRvciBpc24ndCByZW5kZXJlZC5cbiAgICBWaWV3LnByb3RvdHlwZS5zdG9wTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc05vd0luZGljYXRvclJlbmRlcmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQpO1xuICAgICAgICAgICAgICAgIHRoaXMubm93SW5kaWNhdG9yVGltZW91dElEID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm5vd0luZGljYXRvckludGVydmFsSUQpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMubm93SW5kaWNhdG9ySW50ZXJ2YWxJRCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JJbnRlcnZhbElEID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudW5yZW5kZXJOb3dJbmRpY2F0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuaXNOb3dJbmRpY2F0b3JSZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5nZXROb3dJbmRpY2F0b3JVbml0ID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIC8vIHN1YmNsYXNzZXMgc2hvdWxkIGltcGxlbWVudFxuICAgIH07XG4gICAgLy8gUmVuZGVycyBhIGN1cnJlbnQgdGltZSBpbmRpY2F0b3IgYXQgdGhlIGdpdmVuIGRhdGV0aW1lXG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgLy8gU1VCQ0xBU1NFUyBNVVNUIFBBU1MgVE8gQ0hJTERSRU4hXG4gICAgfTtcbiAgICAvLyBVbmRvZXMgdGhlIHJlbmRlcmluZyBhY3Rpb25zIGZyb20gcmVuZGVyTm93SW5kaWNhdG9yXG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNVQkNMQVNTRVMgTVVTVCBQQVNTIFRPIENISUxEUkVOIVxuICAgIH07XG4gICAgLyogU2Nyb2xsZXJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIFZpZXcucHJvdG90eXBlLmFkZFNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwpIHtcbiAgICAgICAgdmFyIHF1ZXVlZFNjcm9sbCA9IHRoaXMucXVldWVkU2Nyb2xsIHx8ICh0aGlzLnF1ZXVlZFNjcm9sbCA9IHt9KTtcbiAgICAgICAgX19hc3NpZ24ocXVldWVkU2Nyb2xsLCBzY3JvbGwpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucG9wU2Nyb2xsID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIHRoaXMuYXBwbHlRdWV1ZWRTY3JvbGwoaXNSZXNpemUpO1xuICAgICAgICB0aGlzLnF1ZXVlZFNjcm9sbCA9IG51bGw7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5hcHBseVF1ZXVlZFNjcm9sbCA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSkge1xuICAgICAgICB0aGlzLmFwcGx5U2Nyb2xsKHRoaXMucXVldWVkU2Nyb2xsIHx8IHt9LCBpc1Jlc2l6ZSk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5xdWVyeVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHt9O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSkgeyAvLyBkYXRlcyByZW5kZXJlZCB5ZXQ/XG4gICAgICAgICAgICBfX2Fzc2lnbihzY3JvbGwsIHRoaXMucXVlcnlEYXRlU2Nyb2xsKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY3JvbGw7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5hcHBseVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwsIGlzUmVzaXplKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHNjcm9sbC5kdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzY3JvbGwuZHVyYXRpb247XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSkgeyAvLyBkYXRlcyByZW5kZXJlZCB5ZXQ/XG4gICAgICAgICAgICAgICAgX19hc3NpZ24oc2Nyb2xsLCB0aGlzLmNvbXB1dGVEYXRlU2Nyb2xsKGR1cmF0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUpIHsgLy8gZGF0ZXMgcmVuZGVyZWQgeWV0P1xuICAgICAgICAgICAgdGhpcy5hcHBseURhdGVTY3JvbGwoc2Nyb2xsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHt9OyAvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5xdWVyeURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTsgLy8gc3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudFxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICAvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50XG4gICAgfTtcbiAgICAvLyBmb3IgQVBJXG4gICAgVmlldy5wcm90b3R5cGUuc2Nyb2xsVG9EdXJhdGlvbiA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB0aGlzLmFwcGx5U2Nyb2xsKHsgZHVyYXRpb246IGR1cmF0aW9uIH0sIGZhbHNlKTtcbiAgICB9O1xuICAgIHJldHVybiBWaWV3O1xufShEYXRlQ29tcG9uZW50KSk7XG5FbWl0dGVyTWl4aW4ubWl4SW50byhWaWV3KTtcblZpZXcucHJvdG90eXBlLnVzZXNNaW5NYXhUaW1lID0gZmFsc2U7XG5WaWV3LnByb3RvdHlwZS5kYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzID0gRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG5cbnZhciBGZ0V2ZW50UmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmdFdmVudFJlbmRlcmVyKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5zZWdzID0gW107XG4gICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdGhpcy5yYW5nZVVwZGF0ZWQoKTsgLy8gY2FsbGVkIHRvbyBmcmVxdWVudGx5IDooXG4gICAgICAgIC8vIHJlbmRlciBhbiBgLmVsYCBvbiBlYWNoIHNlZ1xuICAgICAgICAvLyByZXR1cm5zIGEgc3Vic2V0IG9mIHRoZSBzZWdzLiBzZWdzIHRoYXQgd2VyZSBhY3R1YWxseSByZW5kZXJlZFxuICAgICAgICBzZWdzID0gdGhpcy5yZW5kZXJTZWdFbHMoc2VncywgbWlycm9ySW5mbyk7XG4gICAgICAgIHRoaXMuc2VncyA9IHNlZ3M7XG4gICAgICAgIHRoaXMuYXR0YWNoU2VncyhzZWdzLCBtaXJyb3JJbmZvKTtcbiAgICAgICAgdGhpcy5pc1NpemVEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuY29udGV4dC52aWV3LnRyaWdnZXJSZW5kZXJlZFNlZ3ModGhpcy5zZWdzLCBCb29sZWFuKG1pcnJvckluZm8pKTtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUudW5yZW5kZXIgPSBmdW5jdGlvbiAoX3NlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnZpZXcudHJpZ2dlcldpbGxSZW1vdmVTZWdzKHRoaXMuc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgIHRoaXMuZGV0YWNoU2Vncyh0aGlzLnNlZ3MpO1xuICAgICAgICB0aGlzLnNlZ3MgPSBbXTtcbiAgICB9O1xuICAgIC8vIFVwZGF0ZXMgdmFsdWVzIHRoYXQgcmVseSBvbiBvcHRpb25zIGFuZCBhbHNvIHJlbGF0ZSB0byByYW5nZVxuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUucmFuZ2VVcGRhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuY29udGV4dC5vcHRpb25zO1xuICAgICAgICB2YXIgZGlzcGxheUV2ZW50VGltZTtcbiAgICAgICAgdmFyIGRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgdGhpcy5ldmVudFRpbWVGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIob3B0aW9ucy5ldmVudFRpbWVGb3JtYXQgfHwgdGhpcy5jb21wdXRlRXZlbnRUaW1lRm9ybWF0KCksIG9wdGlvbnMuZGVmYXVsdFJhbmdlU2VwYXJhdG9yKTtcbiAgICAgICAgZGlzcGxheUV2ZW50VGltZSA9IG9wdGlvbnMuZGlzcGxheUV2ZW50VGltZTtcbiAgICAgICAgaWYgKGRpc3BsYXlFdmVudFRpbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGxheUV2ZW50VGltZSA9IHRoaXMuY29tcHV0ZURpc3BsYXlFdmVudFRpbWUoKTsgLy8gbWlnaHQgYmUgYmFzZWQgb2ZmIG9mIHJhbmdlXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGxheUV2ZW50RW5kID0gb3B0aW9ucy5kaXNwbGF5RXZlbnRFbmQ7XG4gICAgICAgIGlmIChkaXNwbGF5RXZlbnRFbmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGxheUV2ZW50RW5kID0gdGhpcy5jb21wdXRlRGlzcGxheUV2ZW50RW5kKCk7IC8vIG1pZ2h0IGJlIGJhc2VkIG9mZiBvZiByYW5nZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGxheUV2ZW50VGltZSA9IGRpc3BsYXlFdmVudFRpbWU7XG4gICAgICAgIHRoaXMuZGlzcGxheUV2ZW50RW5kID0gZGlzcGxheUV2ZW50RW5kO1xuICAgIH07XG4gICAgLy8gUmVuZGVycyBhbmQgYXNzaWducyBhbiBgZWxgIHByb3BlcnR5IGZvciBlYWNoIGZvcmVncm91bmQgZXZlbnQgc2VnbWVudC5cbiAgICAvLyBPbmx5IHJldHVybnMgc2VnbWVudHMgdGhhdCBzdWNjZXNzZnVsbHkgcmVuZGVyZWQuXG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdFbHMgPSBmdW5jdGlvbiAoc2VncywgbWlycm9ySW5mbykge1xuICAgICAgICB2YXIgaHRtbCA9ICcnO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHNlZ3MubGVuZ3RoKSB7IC8vIGRvbid0IGJ1aWxkIGFuIGVtcHR5IGh0bWwgc3RyaW5nXG4gICAgICAgICAgICAvLyBidWlsZCBhIGxhcmdlIGNvbmNhdGVuYXRpb24gb2YgZXZlbnQgc2VnbWVudCBIVE1MXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJTZWdIdG1sKHNlZ3NbaV0sIG1pcnJvckluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR3JhYiBpbmRpdmlkdWFsIGVsZW1lbnRzIGZyb20gdGhlIGNvbWJpbmVkIEhUTUwgc3RyaW5nLiBVc2UgZWFjaCBhcyB0aGUgZGVmYXVsdCByZW5kZXJpbmcuXG4gICAgICAgICAgICAvLyBUaGVuLCBjb21wdXRlIHRoZSAnZWwnIGZvciBlYWNoIHNlZ21lbnQuIEFuIGVsIG1pZ2h0IGJlIG51bGwgaWYgdGhlIGV2ZW50UmVuZGVyIGNhbGxiYWNrIHJldHVybmVkIGZhbHNlLlxuICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWdzID0gZmlsdGVyU2Vnc1ZpYUVscyh0aGlzLmNvbnRleHQudmlldywgc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICAvLyBHZW5lcmljIHV0aWxpdHkgZm9yIGdlbmVyYXRpbmcgdGhlIEhUTUwgY2xhc3NOYW1lcyBmb3IgYW4gZXZlbnQgc2VnbWVudCdzIGVsZW1lbnRcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNlZ0NsYXNzZXMgPSBmdW5jdGlvbiAoc2VnLCBpc0RyYWdnYWJsZSwgaXNSZXNpemFibGUsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBbXG4gICAgICAgICAgICAnZmMtZXZlbnQnLFxuICAgICAgICAgICAgc2VnLmlzU3RhcnQgPyAnZmMtc3RhcnQnIDogJ2ZjLW5vdC1zdGFydCcsXG4gICAgICAgICAgICBzZWcuaXNFbmQgPyAnZmMtZW5kJyA6ICdmYy1ub3QtZW5kJ1xuICAgICAgICBdLmNvbmNhdChzZWcuZXZlbnRSYW5nZS51aS5jbGFzc05hbWVzKTtcbiAgICAgICAgaWYgKGlzRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRyYWdnYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Jlc2l6YWJsZSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1yZXNpemFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlycm9ySW5mbykge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1taXJyb3InKTtcbiAgICAgICAgICAgIGlmIChtaXJyb3JJbmZvLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWlycm9ySW5mby5pc1Jlc2l6aW5nKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1yZXNpemluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgIH07XG4gICAgLy8gQ29tcHV0ZSB0aGUgdGV4dCB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gYW4gZXZlbnQncyBlbGVtZW50LlxuICAgIC8vIGByYW5nZWAgY2FuIGJlIHRoZSBFdmVudCBvYmplY3QgaXRzZWxmLCBvciBzb21ldGhpbmcgcmFuZ2UtbGlrZSwgd2l0aCBhdCBsZWFzdCBhIGBzdGFydGAuXG4gICAgLy8gSWYgZXZlbnQgdGltZXMgYXJlIGRpc2FibGVkLCBvciB0aGUgZXZlbnQgaGFzIG5vIHRpbWUsIHdpbGwgcmV0dXJuIGEgYmxhbmsgc3RyaW5nLlxuICAgIC8vIElmIG5vdCBzcGVjaWZpZWQsIGZvcm1hdHRlciB3aWxsIGRlZmF1bHQgdG8gdGhlIGV2ZW50VGltZUZvcm1hdCBzZXR0aW5nLFxuICAgIC8vIGFuZCBkaXNwbGF5RW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgZGlzcGxheUV2ZW50RW5kIHNldHRpbmcuXG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5nZXRUaW1lVGV4dCA9IGZ1bmN0aW9uIChldmVudFJhbmdlLCBmb3JtYXR0ZXIsIGRpc3BsYXlFbmQpIHtcbiAgICAgICAgdmFyIGRlZiA9IGV2ZW50UmFuZ2UuZGVmLCBpbnN0YW5jZSA9IGV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUaW1lVGV4dChpbnN0YW5jZS5yYW5nZS5zdGFydCwgZGVmLmhhc0VuZCA/IGluc3RhbmNlLnJhbmdlLmVuZCA6IG51bGwsIGRlZi5hbGxEYXksIGZvcm1hdHRlciwgZGlzcGxheUVuZCwgaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sIGluc3RhbmNlLmZvcmNlZEVuZFR6byk7XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLl9nZXRUaW1lVGV4dCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBhbGxEYXksIGZvcm1hdHRlciwgZGlzcGxheUVuZCwgZm9yY2VkU3RhcnRUem8sIGZvcmNlZEVuZFR6bykge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuY29udGV4dC5kYXRlRW52O1xuICAgICAgICBpZiAoZm9ybWF0dGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlciA9IHRoaXMuZXZlbnRUaW1lRm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5RW5kID09IG51bGwpIHtcbiAgICAgICAgICAgIGRpc3BsYXlFbmQgPSB0aGlzLmRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5RXZlbnRUaW1lICYmICFhbGxEYXkpIHtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5RW5kICYmIGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKHN0YXJ0LCBlbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRTdGFydFR6bzogZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlZEVuZFR6bzogZm9yY2VkRW5kVHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem86IGZvcmNlZFN0YXJ0VHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRXZlbnRUaW1lRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBvbWl0WmVyb01pbnV0ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRGlzcGxheUV2ZW50VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVEaXNwbGF5RXZlbnRFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgLy8gVXRpbGl0eSBmb3IgZ2VuZXJhdGluZyBldmVudCBza2luLXJlbGF0ZWQgQ1NTIHByb3BlcnRpZXNcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNraW5Dc3MgPSBmdW5jdGlvbiAodWkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogdWkuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6IHVpLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgY29sb3I6IHVpLnRleHRDb2xvclxuICAgICAgICB9O1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5zb3J0RXZlbnRTZWdzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHNwZWNzID0gdGhpcy5jb250ZXh0LnZpZXcuZXZlbnRPcmRlclNwZWNzO1xuICAgICAgICB2YXIgb2JqcyA9IHNlZ3MubWFwKGJ1aWxkU2VnQ29tcGFyZU9iaik7XG4gICAgICAgIG9ianMuc29ydChmdW5jdGlvbiAob2JqMCwgb2JqMSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgc3BlY3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9ianMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5fc2VnO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLmlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVTZWdTaXplcyh0aGlzLnNlZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLmlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmFzc2lnblNlZ1NpemVzKHRoaXMuc2Vncyk7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgIH07XG4gICAgLy8gTWFuaXB1bGF0aW9uIG9uIHJlbmRlcmVkIHNlZ3NcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmhpZGVCeUhhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnNob3dCeUhhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnNlbGVjdEJ5SW5zdGFuY2VJZCA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zZWdzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SW5zdGFuY2UgPSBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRJbnN0YW5jZSAmJiBldmVudEluc3RhbmNlLmluc3RhbmNlSWQgPT09IGluc3RhbmNlSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsIC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnVuc2VsZWN0QnlJbnN0YW5jZUlkID0gZnVuY3Rpb24gKGluc3RhbmNlSWQpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoc2VnLmVsKSB7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZjLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmdFdmVudFJlbmRlcmVyO1xufSgpKTtcbi8vIHJldHVybnMgYSBvYmplY3Qgd2l0aCBhbGwgcHJpbWl0aXZlIHByb3BzIHRoYXQgY2FuIGJlIGNvbXBhcmVkXG5mdW5jdGlvbiBidWlsZFNlZ0NvbXBhcmVPYmooc2VnKSB7XG4gICAgdmFyIGV2ZW50RGVmID0gc2VnLmV2ZW50UmFuZ2UuZGVmO1xuICAgIHZhciByYW5nZSA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLnJhbmdlO1xuICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0ID8gcmFuZ2Uuc3RhcnQudmFsdWVPZigpIDogMDsgLy8gVE9ETzogYmV0dGVyIHN1cHBvcnQgZm9yIG9wZW4tcmFuZ2UgZXZlbnRzXG4gICAgdmFyIGVuZCA9IHJhbmdlLmVuZCA/IHJhbmdlLmVuZC52YWx1ZU9mKCkgOiAwOyAvLyBcIlxuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnREZWYuZXh0ZW5kZWRQcm9wcywgZXZlbnREZWYsIHsgaWQ6IGV2ZW50RGVmLnB1YmxpY0lkLCBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogZW5kLCBkdXJhdGlvbjogZW5kIC0gc3RhcnQsIGFsbERheTogTnVtYmVyKGV2ZW50RGVmLmFsbERheSksIF9zZWc6IHNlZyAvLyBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgIH0pO1xufVxuXG52YXIgRmlsbFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGxSZW5kZXJlcihjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZmlsbFNlZ1RhZyA9ICdkaXYnO1xuICAgICAgICB0aGlzLmRpcnR5U2l6ZUZsYWdzID0ge307XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWxzQnlUeXBlID0ge307XG4gICAgICAgIHRoaXMuc2Vnc0J5VHlwZSA9IHt9O1xuICAgIH1cbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmdldFNlZ3NCeVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdzQnlUeXBlW3R5cGVdIHx8IFtdO1xuICAgIH07XG4gICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcmVuZGVyZWRTZWdzID0gdGhpcy5yZW5kZXJTZWdFbHModHlwZSwgc2Vncyk7IC8vIGFzc2lnbmVzIGAuZWxgIHRvIGVhY2ggc2VnLiByZXR1cm5zIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCBzZWdzXG4gICAgICAgIHZhciBjb250YWluZXJFbHMgPSB0aGlzLmF0dGFjaFNlZ3ModHlwZSwgcmVuZGVyZWRTZWdzKTtcbiAgICAgICAgaWYgKGNvbnRhaW5lckVscykge1xuICAgICAgICAgICAgKF9hID0gKHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdIHx8ICh0aGlzLmNvbnRhaW5lckVsc0J5VHlwZVt0eXBlXSA9IFtdKSkpLnB1c2guYXBwbHkoX2EsIGNvbnRhaW5lckVscyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWdzQnlUeXBlW3R5cGVdID0gcmVuZGVyZWRTZWdzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudmlldy50cmlnZ2VyUmVuZGVyZWRTZWdzKHJlbmRlcmVkU2VncywgZmFsc2UpOyAvLyBpc01pcnJvcj1mYWxzZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlydHlTaXplRmxhZ3NbdHlwZV0gPSB0cnVlO1xuICAgIH07XG4gICAgLy8gVW5yZW5kZXJzIGEgc3BlY2lmaWMgdHlwZSBvZiBmaWxsIHRoYXQgaXMgY3VycmVudGx5IHJlbmRlcmVkIG9uIHRoZSBncmlkXG4gICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS51bnJlbmRlciA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBzZWdzID0gdGhpcy5zZWdzQnlUeXBlW3R5cGVdO1xuICAgICAgICBpZiAoc2Vncykge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdiZ0V2ZW50Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC52aWV3LnRyaWdnZXJXaWxsUmVtb3ZlU2VncyhzZWdzLCBmYWxzZSk7IC8vIGlzTWlycm9yPWZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldGFjaFNlZ3ModHlwZSwgc2Vncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJlbmRlcnMgYW5kIGFzc2lnbnMgYW4gYGVsYCBwcm9wZXJ0eSBmb3IgZWFjaCBmaWxsIHNlZ21lbnQuIEdlbmVyaWMgZW5vdWdoIHRvIHdvcmsgd2l0aCBkaWZmZXJlbnQgdHlwZXMuXG4gICAgLy8gT25seSByZXR1cm5zIHNlZ21lbnRzIHRoYXQgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkLlxuICAgIEZpbGxSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyU2VnRWxzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGh0bWwgPSAnJztcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChzZWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gYnVpbGQgYSBsYXJnZSBjb25jYXRlbmF0aW9uIG9mIHNlZ21lbnQgSFRNTFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBodG1sICs9IHRoaXMucmVuZGVyU2VnSHRtbCh0eXBlLCBzZWdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdyYWIgaW5kaXZpZHVhbCBlbGVtZW50cyBmcm9tIHRoZSBjb21iaW5lZCBIVE1MIHN0cmluZy4gVXNlIGVhY2ggYXMgdGhlIGRlZmF1bHQgcmVuZGVyaW5nLlxuICAgICAgICAgICAgLy8gVGhlbiwgY29tcHV0ZSB0aGUgJ2VsJyBmb3IgZWFjaCBzZWdtZW50LlxuICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgc2VncyA9IGZpbHRlclNlZ3NWaWFFbHModGhpcy5jb250ZXh0LnZpZXcsIHNlZ3MsIGZhbHNlIC8vIGlzTWlycm9yLiBiYWNrZ3JvdW5kIGV2ZW50cyBjYW4gbmV2ZXIgYmUgbWlycm9yIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcnJlY3QgZWxlbWVudCB0eXBlPyAod291bGQgYmUgYmFkIGlmIGEgbm9uLVREIHdlcmUgaW5zZXJ0ZWQgaW50byBhIHRhYmxlIGZvciBleGFtcGxlKVxuICAgICAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudE1hdGNoZXMoc2VnLmVsLCBfdGhpcy5maWxsU2VnVGFnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBIVE1MIG5lZWRlZCBmb3Igb25lIGZpbGwgc2VnbWVudC4gR2VuZXJpYyBlbm91Z2ggdG8gd29yayB3aXRoIGRpZmZlcmVudCB0eXBlcy5cbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ0h0bWwgPSBmdW5jdGlvbiAodHlwZSwgc2VnKSB7XG4gICAgICAgIHZhciBjc3MgPSBudWxsO1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtdO1xuICAgICAgICBpZiAodHlwZSAhPT0gJ2hpZ2hsaWdodCcgJiYgdHlwZSAhPT0gJ2J1c2luZXNzSG91cnMnKSB7XG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBzZWcuZXZlbnRSYW5nZS51aS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgIT09ICdoaWdobGlnaHQnKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzID0gY2xhc3NOYW1lcy5jb25jYXQoc2VnLmV2ZW50UmFuZ2UudWkuY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1iZ2V2ZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLScgKyB0eXBlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPCcgKyB0aGlzLmZpbGxTZWdUYWcgK1xuICAgICAgICAgICAgKGNsYXNzTmFtZXMubGVuZ3RoID8gJyBjbGFzcz1cIicgKyBjbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgOiAnJykgK1xuICAgICAgICAgICAgKGNzcyA/ICcgc3R5bGU9XCInICsgY3NzVG9TdHIoY3NzKSArICdcIicgOiAnJykgK1xuICAgICAgICAgICAgJz48LycgKyB0aGlzLmZpbGxTZWdUYWcgKyAnPic7XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmRldGFjaFNlZ3MgPSBmdW5jdGlvbiAodHlwZSwgc2Vncykge1xuICAgICAgICB2YXIgY29udGFpbmVyRWxzID0gdGhpcy5jb250YWluZXJFbHNCeVR5cGVbdHlwZV07XG4gICAgICAgIGlmIChjb250YWluZXJFbHMpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVscy5mb3JFYWNoKHJlbW92ZUVsZW1lbnQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTaXplcyA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuc2Vnc0J5VHlwZSkge1xuICAgICAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMuZGlydHlTaXplRmxhZ3NbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVTZWdTaXplcyh0aGlzLnNlZ3NCeVR5cGVbdHlwZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5zZWdzQnlUeXBlKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy5kaXJ0eVNpemVGbGFnc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduU2VnU2l6ZXModGhpcy5zZWdzQnlUeXBlW3R5cGVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpcnR5U2l6ZUZsYWdzID0ge307XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTZWdTaXplcyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICB9O1xuICAgIHJldHVybiBGaWxsUmVuZGVyZXI7XG59KCkpO1xuXG52YXIgTmFtZWRUaW1lWm9uZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmVOYW1lKSB7XG4gICAgICAgIHRoaXMudGltZVpvbmVOYW1lID0gdGltZVpvbmVOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZWRUaW1lWm9uZUltcGw7XG59KCkpO1xuXG4vKlxuQW4gYWJzdHJhY3Rpb24gZm9yIGEgZHJhZ2dpbmcgaW50ZXJhY3Rpb24gb3JpZ2luYXRpbmcgb24gYW4gZXZlbnQuXG5Eb2VzIGhpZ2hlci1sZXZlbCB0aGluZ3MgdGhhbiBQb2ludGVyRHJhZ2dlciwgc3VjaCBhcyBwb3NzaWJseTpcbi0gYSBcIm1pcnJvclwiIHRoYXQgbW92ZXMgd2l0aCB0aGUgcG9pbnRlclxuLSBhIG1pbmltdW0gbnVtYmVyIG9mIHBpeGVscyBvciBvdGhlciBjcml0ZXJpYSBmb3IgYSB0cnVlIGRyYWcgdG8gYmVnaW5cblxuc3ViY2xhc3NlcyBtdXN0IGVtaXQ6XG4tIHBvaW50ZXJkb3duXG4tIGRyYWdzdGFydFxuLSBkcmFnbW92ZVxuLSBwb2ludGVydXBcbi0gZHJhZ2VuZFxuKi9cbnZhciBFbGVtZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudERyYWdnaW5nKGVsKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyTWl4aW4oKTtcbiAgICB9XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAvLyBvcHRpb25hbCBpZiBzdWJjbGFzcyBkb2Vzbid0IHdhbnQgdG8gc3VwcG9ydCBhIG1pcnJvclxuICAgIH07XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JOZWVkc1JldmVydCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIC8vIG9wdGlvbmFsIGlmIHN1YmNsYXNzIGRvZXNuJ3Qgd2FudCB0byBzdXBwb3J0IGEgbWlycm9yXG4gICAgfTtcbiAgICBFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldEF1dG9TY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICB9O1xuICAgIHJldHVybiBFbGVtZW50RHJhZ2dpbmc7XG59KCkpO1xuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGVJbnB1dCwgc2V0dGluZ3MpIHtcbiAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgdmFyIGRhdGVFbnYgPSBidWlsZERhdGVFbnYkMShzZXR0aW5ncyk7XG4gICAgdmFyIGZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcihzZXR0aW5ncyk7XG4gICAgdmFyIGRhdGVNZXRhID0gZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKGRhdGVJbnB1dCk7XG4gICAgaWYgKCFkYXRlTWV0YSkgeyAvLyBUT0RPOiB3YXJuaW5nP1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBkYXRlRW52LmZvcm1hdChkYXRlTWV0YS5tYXJrZXIsIGZvcm1hdHRlciwge1xuICAgICAgICBmb3JjZWRUem86IGRhdGVNZXRhLmZvcmNlZFR6b1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZm9ybWF0UmFuZ2Uoc3RhcnRJbnB1dCwgZW5kSW5wdXQsIHNldHRpbmdzIC8vIG1peHR1cmUgb2YgZW52IGFuZCBmb3JtYXR0ZXIgc2V0dGluZ3Ncbikge1xuICAgIHZhciBkYXRlRW52ID0gYnVpbGREYXRlRW52JDEodHlwZW9mIHNldHRpbmdzID09PSAnb2JqZWN0JyAmJiBzZXR0aW5ncyA/IHNldHRpbmdzIDoge30pOyAvLyBwYXNzIGluIGlmIG5vbi1udWxsIG9iamVjdFxuICAgIHZhciBmb3JtYXR0ZXIgPSBjcmVhdGVGb3JtYXR0ZXIoc2V0dGluZ3MsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRSYW5nZVNlcGFyYXRvcik7XG4gICAgdmFyIHN0YXJ0TWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShzdGFydElucHV0KTtcbiAgICB2YXIgZW5kTWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShlbmRJbnB1dCk7XG4gICAgaWYgKCFzdGFydE1ldGEgfHwgIWVuZE1ldGEpIHsgLy8gVE9ETzogd2FybmluZz9cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXRSYW5nZShzdGFydE1ldGEubWFya2VyLCBlbmRNZXRhLm1hcmtlciwgZm9ybWF0dGVyLCB7XG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICBmb3JjZWRFbmRUem86IGVuZE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICBpc0VuZEV4Y2x1c2l2ZTogc2V0dGluZ3MuaXNFbmRFeGNsdXNpdmVcbiAgICB9KTtcbn1cbi8vIFRPRE86IG1vcmUgRFJZIGFuZCBvcHRpbWl6ZWRcbmZ1bmN0aW9uIGJ1aWxkRGF0ZUVudiQxKHNldHRpbmdzKSB7XG4gICAgdmFyIGxvY2FsZSA9IGJ1aWxkTG9jYWxlKHNldHRpbmdzLmxvY2FsZSB8fCAnZW4nLCBwYXJzZVJhd0xvY2FsZXMoW10pLm1hcCk7IC8vIFRPRE86IGRvbid0IGhhcmRjb2RlICdlbicgZXZlcnl3aGVyZVxuICAgIC8vIGVuc3VyZSByZXF1aXJlZCBzZXR0aW5nc1xuICAgIHNldHRpbmdzID0gX19hc3NpZ24oeyB0aW1lWm9uZTogZ2xvYmFsRGVmYXVsdHMudGltZVpvbmUsIGNhbGVuZGFyU3lzdGVtOiAnZ3JlZ29yeScgfSwgc2V0dGluZ3MsIHsgbG9jYWxlOiBsb2NhbGUgfSk7XG4gICAgcmV0dXJuIG5ldyBEYXRlRW52KHNldHRpbmdzKTtcbn1cblxudmFyIERSQUdfTUVUQV9QUk9QUyA9IHtcbiAgICBzdGFydFRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICBjcmVhdGU6IEJvb2xlYW4sXG4gICAgc291cmNlSWQ6IFN0cmluZ1xufTtcbnZhciBEUkFHX01FVEFfREVGQVVMVFMgPSB7XG4gICAgY3JlYXRlOiB0cnVlXG59O1xuZnVuY3Rpb24gcGFyc2VEcmFnTWV0YShyYXcpIHtcbiAgICB2YXIgbGVmdG92ZXJQcm9wcyA9IHt9O1xuICAgIHZhciByZWZpbmVkID0gcmVmaW5lUHJvcHMocmF3LCBEUkFHX01FVEFfUFJPUFMsIERSQUdfTUVUQV9ERUZBVUxUUywgbGVmdG92ZXJQcm9wcyk7XG4gICAgcmVmaW5lZC5sZWZ0b3ZlclByb3BzID0gbGVmdG92ZXJQcm9wcztcbiAgICByZXR1cm4gcmVmaW5lZDtcbn1cblxuLy8gQ29tcHV0ZXMgYSBkZWZhdWx0IGNvbHVtbiBoZWFkZXIgZm9ybWF0dGluZyBzdHJpbmcgaWYgYGNvbEZvcm1hdGAgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZFxuZnVuY3Rpb24gY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0KGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXlDbnQpIHtcbiAgICAvLyBpZiBtb3JlIHRoYW4gb25lIHdlZWsgcm93LCBvciBpZiB0aGVyZSBhcmUgYSBsb3Qgb2YgY29sdW1ucyB3aXRoIG5vdCBtdWNoIHNwYWNlLFxuICAgIC8vIHB1dCBqdXN0IHRoZSBkYXkgbnVtYmVycyB3aWxsIGJlIGluIGVhY2ggY2VsbFxuICAgIGlmICghZGF0ZXNSZXBEaXN0aW5jdERheXMgfHwgZGF5Q250ID4gMTApIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ3Nob3J0JyB9OyAvLyBcIlNhdFwiXG4gICAgfVxuICAgIGVsc2UgaWYgKGRheUNudCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdudW1lcmljJywgZGF5OiAnbnVtZXJpYycsIG9taXRDb21tYXM6IHRydWUgfTsgLy8gXCJTYXQgMTEvMTJcIlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ2xvbmcnIH07IC8vIFwiU2F0dXJkYXlcIlxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbmRlckRhdGVDZWxsKGRhdGVNYXJrZXIsIGRhdGVQcm9maWxlLCBkYXRlc1JlcERpc3RpbmN0RGF5cywgY29sQ250LCBjb2xIZWFkRm9ybWF0LCBjb250ZXh0LCBjb2xzcGFuLCBvdGhlckF0dHJzKSB7XG4gICAgdmFyIHZpZXcgPSBjb250ZXh0LnZpZXcsIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIHRoZW1lID0gY29udGV4dC50aGVtZSwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICB2YXIgaXNEYXRlVmFsaWQgPSByYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBkYXRlTWFya2VyKTsgLy8gVE9ETzogY2FsbGVkIHRvbyBmcmVxdWVudGx5LiBjYWNoZSBzb21laG93LlxuICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAnZmMtZGF5LWhlYWRlcicsXG4gICAgICAgIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKVxuICAgIF07XG4gICAgdmFyIGlubmVySHRtbDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29sdW1uSGVhZGVySHRtbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbm5lckh0bWwgPSBvcHRpb25zLmNvbHVtbkhlYWRlckh0bWwoZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlcikpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5jb2x1bW5IZWFkZXJUZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlubmVySHRtbCA9IGh0bWxFc2NhcGUob3B0aW9ucy5jb2x1bW5IZWFkZXJUZXh0KGRhdGVFbnYudG9EYXRlKGRhdGVNYXJrZXIpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbm5lckh0bWwgPSBodG1sRXNjYXBlKGRhdGVFbnYuZm9ybWF0KGRhdGVNYXJrZXIsIGNvbEhlYWRGb3JtYXQpKTtcbiAgICB9XG4gICAgLy8gaWYgb25seSBvbmUgcm93IG9mIGRheXMsIHRoZSBjbGFzc05hbWVzIG9uIHRoZSBoZWFkZXIgY2FuIHJlcHJlc2VudCB0aGUgc3BlY2lmaWMgZGF5cyBiZW5lYXRoXG4gICAgaWYgKGRhdGVzUmVwRGlzdGluY3REYXlzKSB7XG4gICAgICAgIGNsYXNzTmFtZXMgPSBjbGFzc05hbWVzLmNvbmNhdChcbiAgICAgICAgLy8gaW5jbHVkZXMgdGhlIGRheS1vZi13ZWVrIGNsYXNzXG4gICAgICAgIC8vIG5vVGhlbWVIaWdobGlnaHQ9dHJ1ZSAoZG9uJ3QgaGlnaGxpZ2h0IHRoZSBoZWFkZXIpXG4gICAgICAgIGdldERheUNsYXNzZXMoZGF0ZU1hcmtlciwgZGF0ZVByb2ZpbGUsIGNvbnRleHQsIHRydWUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtJyArIERBWV9JRFNbZGF0ZU1hcmtlci5nZXRVVENEYXkoKV0pOyAvLyBvbmx5IGFkZCB0aGUgZGF5LW9mLXdlZWsgY2xhc3NcbiAgICB9XG4gICAgcmV0dXJuICcnICtcbiAgICAgICAgJzx0aCBjbGFzcz1cIicgKyBjbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAoKGlzRGF0ZVZhbGlkICYmIGRhdGVzUmVwRGlzdGluY3REYXlzKSA/XG4gICAgICAgICAgICAnIGRhdGEtZGF0ZT1cIicgKyBkYXRlRW52LmZvcm1hdElzbyhkYXRlTWFya2VyLCB7IG9taXRUaW1lOiB0cnVlIH0pICsgJ1wiJyA6XG4gICAgICAgICAgICAnJykgK1xuICAgICAgICAoY29sc3BhbiA+IDEgP1xuICAgICAgICAgICAgJyBjb2xzcGFuPVwiJyArIGNvbHNwYW4gKyAnXCInIDpcbiAgICAgICAgICAgICcnKSArXG4gICAgICAgIChvdGhlckF0dHJzID9cbiAgICAgICAgICAgICcgJyArIG90aGVyQXR0cnMgOlxuICAgICAgICAgICAgJycpICtcbiAgICAgICAgJz4nICtcbiAgICAgICAgKGlzRGF0ZVZhbGlkID9cbiAgICAgICAgICAgIC8vIGRvbid0IG1ha2UgYSBsaW5rIGlmIHRoZSBoZWFkaW5nIGNvdWxkIHJlcHJlc2VudCBtdWx0aXBsZSBkYXlzLCBvciBpZiB0aGVyZSdzIG9ubHkgb25lIGRheSAoZm9yY2VPZmYpXG4gICAgICAgICAgICBidWlsZEdvdG9BbmNob3JIdG1sKHZpZXcsIHsgZGF0ZTogZGF0ZU1hcmtlciwgZm9yY2VPZmY6ICFkYXRlc1JlcERpc3RpbmN0RGF5cyB8fCBjb2xDbnQgPT09IDEgfSwgaW5uZXJIdG1sKSA6XG4gICAgICAgICAgICAvLyBpZiBub3QgdmFsaWQsIGRpc3BsYXkgdGV4dCwgYnV0IG5vIGxpbmtcbiAgICAgICAgICAgIGlubmVySHRtbCkgK1xuICAgICAgICAnPC90aD4nO1xufVxuXG52YXIgRGF5SGVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlIZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5SGVhZGVyKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIHBhcmVudEVsLmlubmVySFRNTCA9ICcnOyAvLyBiZWNhdXNlIG1pZ2h0IGJlIG5ic3BcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoX3RoaXMuZWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtcm93ICcgKyBfdGhpcy50aGVtZS5nZXRDbGFzcygnaGVhZGVyUm93JykgKyAnXCI+JyArXG4gICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwiJyArIF90aGlzLnRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArICdcIj4nICtcbiAgICAgICAgICAgICc8dGhlYWQ+PC90aGVhZD4nICtcbiAgICAgICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAgICAgJzwvZGl2PicpKTtcbiAgICAgICAgX3RoaXMudGhlYWQgPSBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERheUhlYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICB9O1xuICAgIERheUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBkYXRlcyA9IHByb3BzLmRhdGVzLCBkYXRlc1JlcERpc3RpbmN0RGF5cyA9IHByb3BzLmRhdGVzUmVwRGlzdGluY3REYXlzO1xuICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgaWYgKHByb3BzLnJlbmRlckludHJvSHRtbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChwcm9wcy5yZW5kZXJJbnRyb0h0bWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbEhlYWRGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIodGhpcy5vcHQoJ2NvbHVtbkhlYWRlckZvcm1hdCcpIHx8XG4gICAgICAgICAgICBjb21wdXRlRmFsbGJhY2tIZWFkZXJGb3JtYXQoZGF0ZXNSZXBEaXN0aW5jdERheXMsIGRhdGVzLmxlbmd0aCkpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGVzXzEgPSBkYXRlczsgX2kgPCBkYXRlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlc18xW19pXTtcbiAgICAgICAgICAgIHBhcnRzLnB1c2gocmVuZGVyRGF0ZUNlbGwoZGF0ZSwgcHJvcHMuZGF0ZVByb2ZpbGUsIGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXRlcy5sZW5ndGgsIGNvbEhlYWRGb3JtYXQsIHRoaXMuY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICBwYXJ0cy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aGVhZC5pbm5lckhUTUwgPSAnPHRyPicgKyBwYXJ0cy5qb2luKCcnKSArICc8L3RyPic7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5SGVhZGVyO1xufShDb21wb25lbnQpKTtcblxudmFyIERheVNlcmllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXlTZXJpZXMocmFuZ2UsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBkYXRlID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgIHZhciBpbmRpY2VzID0gW107XG4gICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICB2YXIgZGF5SW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKGRhdGUgPCBlbmQpIHsgLy8gbG9vcCBlYWNoIGRheSBmcm9tIHN0YXJ0IHRvIGVuZFxuICAgICAgICAgICAgaWYgKGRhdGVQcm9maWxlR2VuZXJhdG9yLmlzSGlkZGVuRGF5KGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGRheUluZGV4ICsgMC41KTsgLy8gbWFyayB0aGF0IGl0J3MgYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXlJbmRleCsrO1xuICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChkYXlJbmRleCk7XG4gICAgICAgICAgICAgICAgZGF0ZXMucHVzaChkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGUgPSBhZGREYXlzKGRhdGUsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0ZXMgPSBkYXRlcztcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgdGhpcy5jbnQgPSBkYXRlcy5sZW5ndGg7XG4gICAgfVxuICAgIERheVNlcmllcy5wcm90b3R5cGUuc2xpY2VSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICB2YXIgZmlyc3RJbmRleCA9IHRoaXMuZ2V0RGF0ZURheUluZGV4KHJhbmdlLnN0YXJ0KTsgLy8gaW5jbHVzaXZlIGZpcnN0IGluZGV4XG4gICAgICAgIHZhciBsYXN0SW5kZXggPSB0aGlzLmdldERhdGVEYXlJbmRleChhZGREYXlzKHJhbmdlLmVuZCwgLTEpKTsgLy8gaW5jbHVzaXZlIGxhc3QgaW5kZXhcbiAgICAgICAgdmFyIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5tYXgoMCwgZmlyc3RJbmRleCk7XG4gICAgICAgIHZhciBjbGlwcGVkTGFzdEluZGV4ID0gTWF0aC5taW4odGhpcy5jbnQgLSAxLCBsYXN0SW5kZXgpO1xuICAgICAgICAvLyBkZWFsIHdpdGggaW4tYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5jZWlsKGNsaXBwZWRGaXJzdEluZGV4KTsgLy8gaW4tYmV0d2VlbiBzdGFydHMgcm91bmQgdG8gbmV4dCBjZWxsXG4gICAgICAgIGNsaXBwZWRMYXN0SW5kZXggPSBNYXRoLmZsb29yKGNsaXBwZWRMYXN0SW5kZXgpOyAvLyBpbi1iZXR3ZWVuIGVuZHMgcm91bmQgdG8gcHJldiBjZWxsXG4gICAgICAgIGlmIChjbGlwcGVkRmlyc3RJbmRleCA8PSBjbGlwcGVkTGFzdEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZpcnN0SW5kZXg6IGNsaXBwZWRGaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgIGxhc3RJbmRleDogY2xpcHBlZExhc3RJbmRleCxcbiAgICAgICAgICAgICAgICBpc1N0YXJ0OiBmaXJzdEluZGV4ID09PSBjbGlwcGVkRmlyc3RJbmRleCxcbiAgICAgICAgICAgICAgICBpc0VuZDogbGFzdEluZGV4ID09PSBjbGlwcGVkTGFzdEluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdpdmVuIGEgZGF0ZSwgcmV0dXJucyBpdHMgY2hyb25vbG9jaWFsIGNlbGwtaW5kZXggZnJvbSB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgZ3JpZC5cbiAgICAvLyBJZiB0aGUgZGF0ZSBsaWVzIGJldHdlZW4gY2VsbHMgKGJlY2F1c2Ugb2YgaGlkZGVuRGF5cyksIHJldHVybnMgYSBmbG9hdGluZy1wb2ludCB2YWx1ZSBiZXR3ZWVuIG9mZnNldHMuXG4gICAgLy8gSWYgYmVmb3JlIHRoZSBmaXJzdCBvZmZzZXQsIHJldHVybnMgYSBuZWdhdGl2ZSBudW1iZXIuXG4gICAgLy8gSWYgYWZ0ZXIgdGhlIGxhc3Qgb2Zmc2V0LCByZXR1cm5zIGFuIG9mZnNldCBwYXN0IHRoZSBsYXN0IGNlbGwgb2Zmc2V0LlxuICAgIC8vIE9ubHkgd29ya3MgZm9yICpzdGFydCogZGF0ZXMgb2YgY2VsbHMuIFdpbGwgbm90IHdvcmsgZm9yIGV4Y2x1c2l2ZSBlbmQgZGF0ZXMgZm9yIGNlbGxzLlxuICAgIERheVNlcmllcy5wcm90b3R5cGUuZ2V0RGF0ZURheUluZGV4ID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIGluZGljZXMgPSB0aGlzLmluZGljZXM7XG4gICAgICAgIHZhciBkYXlPZmZzZXQgPSBNYXRoLmZsb29yKGRpZmZEYXlzKHRoaXMuZGF0ZXNbMF0sIGRhdGUpKTtcbiAgICAgICAgaWYgKGRheU9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRpY2VzWzBdIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXlPZmZzZXQgPj0gaW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGljZXNbZGF5T2Zmc2V0XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERheVNlcmllcztcbn0oKSk7XG5cbnZhciBEYXlUYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXlUYWJsZShkYXlTZXJpZXMsIGJyZWFrT25XZWVrcykge1xuICAgICAgICB2YXIgZGF0ZXMgPSBkYXlTZXJpZXMuZGF0ZXM7XG4gICAgICAgIHZhciBkYXlzUGVyUm93O1xuICAgICAgICB2YXIgZmlyc3REYXk7XG4gICAgICAgIHZhciByb3dDbnQ7XG4gICAgICAgIGlmIChicmVha09uV2Vla3MpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IGNvbHVtbnMgdW50aWwgdGhlIGRheS1vZi13ZWVrIHJlcGVhdHNcbiAgICAgICAgICAgIGZpcnN0RGF5ID0gZGF0ZXNbMF0uZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICBmb3IgKGRheXNQZXJSb3cgPSAxOyBkYXlzUGVyUm93IDwgZGF0ZXMubGVuZ3RoOyBkYXlzUGVyUm93KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5c1BlclJvd10uZ2V0VVRDRGF5KCkgPT09IGZpcnN0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvd0NudCA9IE1hdGguY2VpbChkYXRlcy5sZW5ndGggLyBkYXlzUGVyUm93KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJvd0NudCA9IDE7XG4gICAgICAgICAgICBkYXlzUGVyUm93ID0gZGF0ZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm93Q250ID0gcm93Q250O1xuICAgICAgICB0aGlzLmNvbENudCA9IGRheXNQZXJSb3c7XG4gICAgICAgIHRoaXMuZGF5U2VyaWVzID0gZGF5U2VyaWVzO1xuICAgICAgICB0aGlzLmNlbGxzID0gdGhpcy5idWlsZENlbGxzKCk7XG4gICAgICAgIHRoaXMuaGVhZGVyRGF0ZXMgPSB0aGlzLmJ1aWxkSGVhZGVyRGF0ZXMoKTtcbiAgICB9XG4gICAgRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb3dzID0gW107XG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMucm93Q250OyByb3crKykge1xuICAgICAgICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmNvbENudDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuYnVpbGRDZWxsKHJvdywgY29sKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzLnB1c2goY2VsbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH07XG4gICAgRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0ZTogdGhpcy5kYXlTZXJpZXMuZGF0ZXNbcm93ICogdGhpcy5jb2xDbnQgKyBjb2xdXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBEYXlUYWJsZS5wcm90b3R5cGUuYnVpbGRIZWFkZXJEYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY29sQ250OyBjb2wrKykge1xuICAgICAgICAgICAgZGF0ZXMucHVzaCh0aGlzLmNlbGxzWzBdW2NvbF0uZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVzO1xuICAgIH07XG4gICAgRGF5VGFibGUucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgdmFyIGNvbENudCA9IHRoaXMuY29sQ250O1xuICAgICAgICB2YXIgc2VyaWVzU2VnID0gdGhpcy5kYXlTZXJpZXMuc2xpY2VSYW5nZShyYW5nZSk7XG4gICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgIGlmIChzZXJpZXNTZWcpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdEluZGV4ID0gc2VyaWVzU2VnLmZpcnN0SW5kZXgsIGxhc3RJbmRleCA9IHNlcmllc1NlZy5sYXN0SW5kZXg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBmaXJzdEluZGV4O1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gY29sQ250KTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gTWF0aC5taW4oKHJvdyArIDEpICogY29sQ250LCBsYXN0SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICBzZWdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDb2w6IGluZGV4ICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29sOiAobmV4dEluZGV4IC0gMSkgJSBjb2xDbnQsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlcmllc1NlZy5pc1N0YXJ0ICYmIGluZGV4ID09PSBmaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VyaWVzU2VnLmlzRW5kICYmIChuZXh0SW5kZXggLSAxKSA9PT0gbGFzdEluZGV4XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5VGFibGU7XG59KCkpO1xuXG52YXIgU2xpY2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNsaWNlcigpIHtcbiAgICAgICAgdGhpcy5zbGljZUJ1c2luZXNzSG91cnMgPSBtZW1vaXplKHRoaXMuX3NsaWNlQnVzaW5lc3NIb3Vycyk7XG4gICAgICAgIHRoaXMuc2xpY2VEYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zbGljZURhdGVTcGFuKTtcbiAgICAgICAgdGhpcy5zbGljZUV2ZW50U3RvcmUgPSBtZW1vaXplKHRoaXMuX3NsaWNlRXZlbnRTdG9yZSk7XG4gICAgICAgIHRoaXMuc2xpY2VFdmVudERyYWcgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgICAgICB0aGlzLnNsaWNlRXZlbnRSZXNpemUgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgIH1cbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudFVpQmFzZXMgPSBwcm9wcy5ldmVudFVpQmFzZXM7XG4gICAgICAgIHZhciBldmVudFNlZ3MgPSB0aGlzLnNsaWNlRXZlbnRTdG9yZS5hcHBseSh0aGlzLCBbcHJvcHMuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlU2VsZWN0aW9uU2VnczogdGhpcy5zbGljZURhdGVTZWxlY3Rpb24uYXBwbHkodGhpcywgW3Byb3BzLmRhdGVTZWxlY3Rpb24sIGV2ZW50VWlCYXNlcywgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJTZWdzOiB0aGlzLnNsaWNlQnVzaW5lc3NIb3Vycy5hcHBseSh0aGlzLCBbcHJvcHMuYnVzaW5lc3NIb3VycywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbXBvbmVudF0uY29uY2F0KGV4dHJhQXJncykpLFxuICAgICAgICAgICAgZmdFdmVudFNlZ3M6IGV2ZW50U2Vncy5mZyxcbiAgICAgICAgICAgIGJnRXZlbnRTZWdzOiBldmVudFNlZ3MuYmcsXG4gICAgICAgICAgICBldmVudERyYWc6IHRoaXMuc2xpY2VFdmVudERyYWcuYXBwbHkodGhpcywgW3Byb3BzLmV2ZW50RHJhZywgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogdGhpcy5zbGljZUV2ZW50UmVzaXplLmFwcGx5KHRoaXMsIFtwcm9wcy5ldmVudFJlc2l6ZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb25cbiAgICAgICAgfTsgLy8gVE9ETzogZ2l2ZSBpbnRlcmFjdGlvblNlZ3M/XG4gICAgfTtcbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlTm93RGF0ZSA9IGZ1bmN0aW9uICgvLyBkb2VzIG5vdCBtZW1vaXplXG4gICAgZGF0ZSwgY29tcG9uZW50KSB7XG4gICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGV4dHJhQXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VEYXRlU3Bhbi5hcHBseSh0aGlzLCBbeyByYW5nZTogeyBzdGFydDogZGF0ZSwgZW5kOiBhZGRNcyhkYXRlLCAxKSB9LCBhbGxEYXk6IGZhbHNlIH0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGNvbXBvbmVudF0uY29uY2F0KGV4dHJhQXJncykpO1xuICAgIH07XG4gICAgU2xpY2VyLnByb3RvdHlwZS5fc2xpY2VCdXNpbmVzc0hvdXJzID0gZnVuY3Rpb24gKGJ1c2luZXNzSG91cnMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYnVzaW5lc3NIb3Vycykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zbGljZUV2ZW50U3RvcmUuYXBwbHkodGhpcywgW2V4cGFuZFJlY3VycmluZyhidXNpbmVzc0hvdXJzLCBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIEJvb2xlYW4obmV4dERheVRocmVzaG9sZCkpLCBjb21wb25lbnQuY2FsZW5kYXIpLFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBkYXRlUHJvZmlsZSxcbiAgICAgICAgICAgIG5leHREYXlUaHJlc2hvbGQsXG4gICAgICAgICAgICBjb21wb25lbnRdLmNvbmNhdChleHRyYUFyZ3MpKS5iZztcbiAgICB9O1xuICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlRXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDU7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudFN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VSZXMgPSBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIEJvb2xlYW4obmV4dERheVRocmVzaG9sZCkpLCBuZXh0RGF5VGhyZXNob2xkKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmc6IHRoaXMuc2xpY2VFdmVudFJhbmdlcyhyYW5nZVJlcy5iZywgY29tcG9uZW50LCBleHRyYUFyZ3MpLFxuICAgICAgICAgICAgICAgIGZnOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGNvbXBvbmVudCwgZXh0cmFBcmdzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGJnOiBbXSwgZmc6IFtdIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb24sIGV2ZW50VWlCYXNlcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgZXh0cmFBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gNTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSA1XSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJhbmdlUmVzID0gc2xpY2VFdmVudFN0b3JlKGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMsIGV2ZW50VWlCYXNlcywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgbmV4dERheVRocmVzaG9sZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWdzOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGNvbXBvbmVudCwgZXh0cmFBcmdzKSxcbiAgICAgICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzOiBpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cy5pbnN0YW5jZXMsXG4gICAgICAgICAgICBpc0V2ZW50OiBpbnRlcmFjdGlvbi5pc0V2ZW50LFxuICAgICAgICAgICAgc291cmNlU2VnOiBpbnRlcmFjdGlvbi5vcmlnU2VnXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZURhdGVTcGFuID0gZnVuY3Rpb24gKGRhdGVTcGFuLCBldmVudFVpQmFzZXMsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgZXh0cmFBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRlU3Bhbikge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudFJhbmdlID0gZmFicmljYXRlRXZlbnRSYW5nZShkYXRlU3BhbiwgZXZlbnRVaUJhc2VzLCBjb21wb25lbnQuY2FsZW5kYXIpO1xuICAgICAgICB2YXIgc2VncyA9IHRoaXMuc2xpY2VSYW5nZS5hcHBseSh0aGlzLCBbZGF0ZVNwYW4ucmFuZ2VdLmNvbmNhdChleHRyYUFyZ3MpKTtcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBzZWdzXzEgPSBzZWdzOyBfYSA8IHNlZ3NfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2FdO1xuICAgICAgICAgICAgc2VnLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgIHNlZy5ldmVudFJhbmdlID0gZXZlbnRSYW5nZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VncztcbiAgICB9O1xuICAgIC8qXG4gICAgXCJjb21wbGV0ZVwiIHNlZyBtZWFucyBpdCBoYXMgY29tcG9uZW50IGFuZCBldmVudFJhbmdlXG4gICAgKi9cbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlRXZlbnRSYW5nZXMgPSBmdW5jdGlvbiAoZXZlbnRSYW5nZXMsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgIGV4dHJhQXJncykge1xuICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGV2ZW50UmFuZ2VzXzEgPSBldmVudFJhbmdlczsgX2kgPCBldmVudFJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBldmVudFJhbmdlc18xW19pXTtcbiAgICAgICAgICAgIHNlZ3MucHVzaC5hcHBseShzZWdzLCB0aGlzLnNsaWNlRXZlbnRSYW5nZShldmVudFJhbmdlLCBjb21wb25lbnQsIGV4dHJhQXJncykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgLypcbiAgICBcImNvbXBsZXRlXCIgc2VnIG1lYW5zIGl0IGhhcyBjb21wb25lbnQgYW5kIGV2ZW50UmFuZ2VcbiAgICAqL1xuICAgIFNsaWNlci5wcm90b3R5cGUuc2xpY2VFdmVudFJhbmdlID0gZnVuY3Rpb24gKGV2ZW50UmFuZ2UsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgIGV4dHJhQXJncykge1xuICAgICAgICB2YXIgc2VncyA9IHRoaXMuc2xpY2VSYW5nZS5hcHBseSh0aGlzLCBbZXZlbnRSYW5nZS5yYW5nZV0uY29uY2F0KGV4dHJhQXJncykpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgICAgICBzZWcuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICAgICAgc2VnLmV2ZW50UmFuZ2UgPSBldmVudFJhbmdlO1xuICAgICAgICAgICAgc2VnLmlzU3RhcnQgPSBldmVudFJhbmdlLmlzU3RhcnQgJiYgc2VnLmlzU3RhcnQ7XG4gICAgICAgICAgICBzZWcuaXNFbmQgPSBldmVudFJhbmdlLmlzRW5kICYmIHNlZy5pc0VuZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VncztcbiAgICB9O1xuICAgIHJldHVybiBTbGljZXI7XG59KCkpO1xuLypcbmZvciBpbmNvcnBvcmF0aW5nIG1pblRpbWUvbWF4VGltZSBpZiBhcHByb3ByaWF0ZVxuVE9ETzogc2hvdWxkIGJlIHBhcnQgb2YgRGF0ZVByb2ZpbGUhXG5UaW1lbGluZURhdGVQcm9maWxlIGFscmVhZHkgZG9lcyB0aGlzIGJ0d1xuKi9cbmZ1bmN0aW9uIGNvbXB1dGVBY3RpdmVSYW5nZShkYXRlUHJvZmlsZSwgaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICB2YXIgcmFuZ2UgPSBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZTtcbiAgICBpZiAoaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogYWRkTXMocmFuZ2Uuc3RhcnQsIGRhdGVQcm9maWxlLm1pblRpbWUubWlsbGlzZWNvbmRzKSxcbiAgICAgICAgZW5kOiBhZGRNcyhyYW5nZS5lbmQsIGRhdGVQcm9maWxlLm1heFRpbWUubWlsbGlzZWNvbmRzIC0gODY0ZTUpIC8vIDg2NGU1ID0gbXMgaW4gYSBkYXlcbiAgICB9O1xufVxuXG4vLyBleHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIHZlcnNpb24gPSAnNC4zLjEnO1xuXG5leHBvcnQgeyBDYWxlbmRhciwgQ29tcG9uZW50LCBEYXRlQ29tcG9uZW50LCBEYXRlRW52LCBEYXRlUHJvZmlsZUdlbmVyYXRvciwgRGF5SGVhZGVyLCBEYXlTZXJpZXMsIERheVRhYmxlLCBFbGVtZW50RHJhZ2dpbmcsIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLCBFbWl0dGVyTWl4aW4sIEV2ZW50QXBpLCBGZ0V2ZW50UmVuZGVyZXIsIEZpbGxSZW5kZXJlciwgSW50ZXJhY3Rpb24sIE1peGluLCBOYW1lZFRpbWVab25lSW1wbCwgUG9zaXRpb25DYWNoZSwgU2Nyb2xsQ29tcG9uZW50LCBTY3JvbGxDb250cm9sbGVyLCBTbGljZXIsIFNwbGl0dGVyLCBUaGVtZSwgVmlldywgV2luZG93U2Nyb2xsQ29udHJvbGxlciwgYWRkRGF5cywgYWRkRHVyYXRpb25zLCBhZGRNcywgYWRkV2Vla3MsIGFsbG93Q29udGV4dE1lbnUsIGFsbG93U2VsZWN0aW9uLCBhcHBlbmRUb0VsZW1lbnQsIGFwcGx5QWxsLCBhcHBseU11dGF0aW9uVG9FdmVudFN0b3JlLCBhcHBseVN0eWxlLCBhcHBseVN0eWxlUHJvcCwgYXNSb3VnaE1pbnV0ZXMsIGFzUm91Z2hNcywgYXNSb3VnaFNlY29uZHMsIGJ1aWxkR290b0FuY2hvckh0bWwsIGJ1aWxkU2VnQ29tcGFyZU9iaiwgY2FwaXRhbGlzZUZpcnN0TGV0dGVyLCBjb21iaW5lRXZlbnRVaXMsIGNvbXBhcmVCeUZpZWxkU3BlYywgY29tcGFyZUJ5RmllbGRTcGVjcywgY29tcGFyZU51bWJlcnMsIGNvbXBlbnNhdGVTY3JvbGwsIGNvbXB1dGVDbGlwcGluZ1JlY3QsIGNvbXB1dGVFZGdlcywgY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0LCBjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucywgY29tcHV0ZUlubmVyUmVjdCwgY29tcHV0ZVJlY3QsIGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UsIGNvbmZpZywgY29uc3RyYWluUG9pbnQsIGNyZWF0ZUR1cmF0aW9uLCBjcmVhdGVFbGVtZW50LCBjcmVhdGVFbXB0eUV2ZW50U3RvcmUsIGNyZWF0ZUV2ZW50SW5zdGFuY2UsIGNyZWF0ZUZvcm1hdHRlciwgY3JlYXRlUGx1Z2luLCBjc3NUb1N0ciwgZGVib3VuY2UsIGRpZmZEYXRlcywgZGlmZkRheUFuZFRpbWUsIGRpZmZEYXlzLCBkaWZmUG9pbnRzLCBkaWZmV2Vla3MsIGRpZmZXaG9sZURheXMsIGRpZmZXaG9sZVdlZWtzLCBkaXNhYmxlQ3Vyc29yLCBkaXN0cmlidXRlSGVpZ2h0LCBlbGVtZW50Q2xvc2VzdCwgZWxlbWVudE1hdGNoZXMsIGVuYWJsZUN1cnNvciwgZXZlbnRUdXBsZVRvU3RvcmUsIGZpbHRlckV2ZW50U3RvcmVEZWZzLCBmaWx0ZXJIYXNoLCBmaW5kQ2hpbGRyZW4sIGZpbmRFbGVtZW50cywgZmxleGlibGVDb21wYXJlLCBmb3JjZUNsYXNzTmFtZSwgZm9ybWF0RGF0ZSwgZm9ybWF0SXNvVGltZVN0cmluZywgZm9ybWF0UmFuZ2UsIGdldEFsbERheUh0bWwsIGdldENsaXBwaW5nUGFyZW50cywgZ2V0RGF5Q2xhc3NlcywgZ2V0RWxTZWcsIGdldFJlY3RDZW50ZXIsIGdldFJlbGV2YW50RXZlbnRzLCBnbG9iYWxEZWZhdWx0cywgZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yLCBoYXNCZ1JlbmRlcmluZywgaHRtbEVzY2FwZSwgaHRtbFRvRWxlbWVudCwgaW5zZXJ0QWZ0ZXJFbGVtZW50LCBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmUsIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlLCBpbnRlcnNlY3RSYW5nZXMsIGludGVyc2VjdFJlY3RzLCBpc0FycmF5c0VxdWFsLCBpc0RhdGVTcGFuc0VxdWFsLCBpc0ludCwgaXNJbnRlcmFjdGlvblZhbGlkLCBpc011bHRpRGF5UmFuZ2UsIGlzUHJvcHNFcXVhbCwgaXNQcm9wc1ZhbGlkLCBpc1NpbmdsZURheSwgaXNWYWxpZERhdGUsIGxpc3RlbkJ5U2VsZWN0b3IsIG1hcEhhc2gsIG1hdGNoQ2VsbFdpZHRocywgbWVtb2l6ZSwgbWVtb2l6ZU91dHB1dCwgbWVtb2l6ZVJlbmRlcmluZywgbWVyZ2VFdmVudFN0b3JlcywgbXVsdGlwbHlEdXJhdGlvbiwgcGFkU3RhcnQsIHBhcnNlQnVzaW5lc3NIb3VycywgcGFyc2VEcmFnTWV0YSwgcGFyc2VFdmVudERlZiwgcGFyc2VGaWVsZFNwZWNzLCBwYXJzZSBhcyBwYXJzZU1hcmtlciwgcG9pbnRJbnNpZGVSZWN0LCBwcmVwZW5kVG9FbGVtZW50LCBwcmV2ZW50Q29udGV4dE1lbnUsIHByZXZlbnREZWZhdWx0LCBwcmV2ZW50U2VsZWN0aW9uLCBwcm9jZXNzU2NvcGVkVWlQcm9wcywgcmFuZ2VDb250YWluc01hcmtlciwgcmFuZ2VDb250YWluc1JhbmdlLCByYW5nZXNFcXVhbCwgcmFuZ2VzSW50ZXJzZWN0LCByZWZpbmVQcm9wcywgcmVtb3ZlRWxlbWVudCwgcmVtb3ZlRXhhY3QsIHJlbmRlckRhdGVDZWxsLCByZXF1ZXN0SnNvbiwgc2xpY2VFdmVudFN0b3JlLCBzdGFydE9mRGF5LCBzdWJ0cmFjdElubmVyRWxIZWlnaHQsIHRyYW5zbGF0ZVJlY3QsIHVuY29tcGVuc2F0ZVNjcm9sbCwgdW5kaXN0cmlidXRlSGVpZ2h0LCB1bnByb21pc2lmeSwgdmVyc2lvbiwgd2hlblRyYW5zaXRpb25Eb25lLCB3aG9sZURpdmlkZUR1cmF0aW9ucyB9O1xuIiwiLyohXG5GdWxsQ2FsZW5kYXIgUmVzb3VyY2VzIENvbW1vbiBQbHVnaW4gdjQuMy4xXG5Eb2NzICYgTGljZW5zZTogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vc2NoZWR1bGVyXG4oYykgMjAxOSBBZGFtIFNoYXdcbiovXG5cbmltcG9ydCB7IG1lbW9pemUsIGZpbHRlckhhc2gsIHJhbmdlc0ludGVyc2VjdCwgbWVtb2l6ZU91dHB1dCwgaXNQcm9wc0VxdWFsLCBtYXBIYXNoLCBjb21iaW5lRXZlbnRVaXMsIHJlZmluZVByb3BzLCByYW5nZXNFcXVhbCwgcHJvY2Vzc1Njb3BlZFVpUHJvcHMsIHBhcnNlQnVzaW5lc3NIb3VycywgRXZlbnRBcGksIENhbGVuZGFyLCBTcGxpdHRlciwgbWVyZ2VFdmVudFN0b3JlcywgaXNQcm9wc1ZhbGlkLCBhcHBlbmRUb0VsZW1lbnQsIGh0bWxFc2NhcGUsIGNzc1RvU3RyLCBjb25maWcsIGlzVmFsaWREYXRlLCBhZGREYXlzLCB1bnByb21pc2lmeSwgcmVxdWVzdEpzb24sIGh0bWxUb0VsZW1lbnQsIHJlbW92ZUVsZW1lbnQsIGNyZWF0ZUZvcm1hdHRlciwgY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0LCByZW5kZXJEYXRlQ2VsbCwgZmluZEVsZW1lbnRzLCBDb21wb25lbnQsIGZsZXhpYmxlQ29tcGFyZSwgY29tcGFyZUJ5RmllbGRTcGVjcywgY3JlYXRlUGx1Z2luIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcblxuZnVuY3Rpb24gbWFzc2FnZUV2ZW50RHJhZ011dGF0aW9uKGV2ZW50TXV0YXRpb24sIGhpdDAsIGhpdDEpIHtcbiAgICB2YXIgcmVzb3VyY2UwID0gaGl0MC5kYXRlU3Bhbi5yZXNvdXJjZUlkO1xuICAgIHZhciByZXNvdXJjZTEgPSBoaXQxLmRhdGVTcGFuLnJlc291cmNlSWQ7XG4gICAgaWYgKHJlc291cmNlMCAmJiByZXNvdXJjZTEgJiZcbiAgICAgICAgcmVzb3VyY2UwICE9PSByZXNvdXJjZTEpIHtcbiAgICAgICAgZXZlbnRNdXRhdGlvbi5yZXNvdXJjZU11dGF0aW9uID0ge1xuICAgICAgICAgICAgbWF0Y2hSZXNvdXJjZUlkOiByZXNvdXJjZTAsXG4gICAgICAgICAgICBzZXRSZXNvdXJjZUlkOiByZXNvdXJjZTFcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKlxuVE9ETzogYWxsIHRoaXMgd291bGQgYmUgbXVjaCBlYXNpZXIgaWYgd2Ugd2VyZSB1c2luZyBhIGhhc2ghXG4qL1xuZnVuY3Rpb24gYXBwbHlFdmVudERlZk11dGF0aW9uKGV2ZW50RGVmLCBtdXRhdGlvbiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVzb3VyY2VNdXRhdGlvbiA9IG11dGF0aW9uLnJlc291cmNlTXV0YXRpb247XG4gICAgaWYgKHJlc291cmNlTXV0YXRpb24gJiYgY29tcHV0ZVJlc291cmNlRWRpdGFibGUoZXZlbnREZWYsIGNhbGVuZGFyKSkge1xuICAgICAgICB2YXIgaW5kZXggPSBldmVudERlZi5yZXNvdXJjZUlkcy5pbmRleE9mKHJlc291cmNlTXV0YXRpb24ubWF0Y2hSZXNvdXJjZUlkKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlSWRzID0gZXZlbnREZWYucmVzb3VyY2VJZHMuc2xpY2UoKTsgLy8gY29weVxuICAgICAgICAgICAgcmVzb3VyY2VJZHMuc3BsaWNlKGluZGV4LCAxKTsgLy8gcmVtb3ZlXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VJZHMuaW5kZXhPZihyZXNvdXJjZU11dGF0aW9uLnNldFJlc291cmNlSWQpID09PSAtMSkgeyAvLyBub3QgYWxyZWFkeSBpbiB0aGVyZVxuICAgICAgICAgICAgICAgIHJlc291cmNlSWRzLnB1c2gocmVzb3VyY2VNdXRhdGlvbi5zZXRSZXNvdXJjZUlkKTsgLy8gYWRkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudERlZi5yZXNvdXJjZUlkcyA9IHJlc291cmNlSWRzO1xuICAgICAgICB9XG4gICAgfVxufVxuLypcbkhBQ0tcblRPRE86IHVzZSBFdmVudFVpIHN5c3RlbSBpbnN0ZWFkIG9mIHRoaXNcbiovXG5mdW5jdGlvbiBjb21wdXRlUmVzb3VyY2VFZGl0YWJsZShldmVudERlZiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVzb3VyY2VFZGl0YWJsZSA9IGV2ZW50RGVmLnJlc291cmNlRWRpdGFibGU7XG4gICAgaWYgKHJlc291cmNlRWRpdGFibGUgPT0gbnVsbCkge1xuICAgICAgICB2YXIgc291cmNlID0gZXZlbnREZWYuc291cmNlSWQgJiYgY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzW2V2ZW50RGVmLnNvdXJjZUlkXTtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgcmVzb3VyY2VFZGl0YWJsZSA9IHNvdXJjZS5leHRlbmRlZFByb3BzLnJlc291cmNlRWRpdGFibGU7IC8vIHVzZWQgdGhlIFNvdXJjZTo6ZXh0ZW5kZWRQcm9wcyBoYWNrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc291cmNlRWRpdGFibGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb3VyY2VFZGl0YWJsZSA9IGNhbGVuZGFyLm9wdCgnZXZlbnRSZXNvdXJjZUVkaXRhYmxlJyk7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2VFZGl0YWJsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VFZGl0YWJsZSA9IGNhbGVuZGFyLm9wdCgnZWRpdGFibGUnKTsgLy8gVE9ETzogdXNlIGRlZmF1bHRzIHN5c3RlbSBpbnN0ZWFkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlRWRpdGFibGU7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1FdmVudERyb3AobXV0YXRpb24sIGNhbGVuZGFyKSB7XG4gICAgdmFyIHJlc291cmNlTXV0YXRpb24gPSBtdXRhdGlvbi5yZXNvdXJjZU11dGF0aW9uO1xuICAgIGlmIChyZXNvdXJjZU11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvbGRSZXNvdXJjZTogY2FsZW5kYXIuZ2V0UmVzb3VyY2VCeUlkKHJlc291cmNlTXV0YXRpb24ubWF0Y2hSZXNvdXJjZUlkKSxcbiAgICAgICAgICAgIG5ld1Jlc291cmNlOiBjYWxlbmRhci5nZXRSZXNvdXJjZUJ5SWQocmVzb3VyY2VNdXRhdGlvbi5zZXRSZXNvdXJjZUlkKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9sZFJlc291cmNlOiBudWxsLFxuICAgICAgICAgICAgbmV3UmVzb3VyY2U6IG51bGxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnZhciBSZXNvdXJjZURhdGFBZGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNvdXJjZURhdGFBZGRlcigpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJSZXNvdXJjZXMgPSBtZW1vaXplKGZpbHRlclJlc291cmNlcyk7XG4gICAgfVxuICAgIFJlc291cmNlRGF0YUFkZGVyLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmlld1Byb3BzLCB2aWV3U3BlYywgY2FsZW5kYXJQcm9wcywgdmlldykge1xuICAgICAgICBpZiAodmlld1NwZWMuY2xhc3MubmVlZHNSZXNvdXJjZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VTdG9yZTogdGhpcy5maWx0ZXJSZXNvdXJjZXMoY2FsZW5kYXJQcm9wcy5yZXNvdXJjZVN0b3JlLCB2aWV3Lm9wdCgnZmlsdGVyUmVzb3VyY2VzV2l0aEV2ZW50cycpLCBjYWxlbmRhclByb3BzLmV2ZW50U3RvcmUsIGNhbGVuZGFyUHJvcHMuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UpLFxuICAgICAgICAgICAgICAgIHJlc291cmNlRW50aXR5RXhwYW5zaW9uczogY2FsZW5kYXJQcm9wcy5yZXNvdXJjZUVudGl0eUV4cGFuc2lvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXNvdXJjZURhdGFBZGRlcjtcbn0oKSk7XG5mdW5jdGlvbiBmaWx0ZXJSZXNvdXJjZXMocmVzb3VyY2VTdG9yZSwgZG9GaWx0ZXJSZXNvdXJjZXNXaXRoRXZlbnRzLCBldmVudFN0b3JlLCBhY3RpdmVSYW5nZSkge1xuICAgIGlmIChkb0ZpbHRlclJlc291cmNlc1dpdGhFdmVudHMpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlc0luUmFuZ2UgPSBmaWx0ZXJFdmVudEluc3RhbmNlc0luUmFuZ2UoZXZlbnRTdG9yZS5pbnN0YW5jZXMsIGFjdGl2ZVJhbmdlKTtcbiAgICAgICAgdmFyIGhhc0V2ZW50c18xID0gY29tcHV0ZUhhc0V2ZW50cyhpbnN0YW5jZXNJblJhbmdlLCBldmVudFN0b3JlLmRlZnMpO1xuICAgICAgICBfX2Fzc2lnbihoYXNFdmVudHNfMSwgY29tcHV0ZUFuY2VzdG9ySGFzRXZlbnRzKGhhc0V2ZW50c18xLCByZXNvdXJjZVN0b3JlKSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJIYXNoKHJlc291cmNlU3RvcmUsIGZ1bmN0aW9uIChyZXNvdXJjZSwgcmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc0V2ZW50c18xW3Jlc291cmNlSWRdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvdXJjZVN0b3JlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbHRlckV2ZW50SW5zdGFuY2VzSW5SYW5nZShldmVudEluc3RhbmNlcywgYWN0aXZlUmFuZ2UpIHtcbiAgICByZXR1cm4gZmlsdGVySGFzaChldmVudEluc3RhbmNlcywgZnVuY3Rpb24gKGV2ZW50SW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlc0ludGVyc2VjdChldmVudEluc3RhbmNlLnJhbmdlLCBhY3RpdmVSYW5nZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjb21wdXRlSGFzRXZlbnRzKGV2ZW50SW5zdGFuY2VzLCBldmVudERlZnMpIHtcbiAgICB2YXIgaGFzRXZlbnRzID0ge307XG4gICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBldmVudEluc3RhbmNlcykge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudEluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGV2ZW50RGVmc1tpbnN0YW5jZS5kZWZJZF0ucmVzb3VyY2VJZHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VJZCA9IF9hW19pXTtcbiAgICAgICAgICAgIGhhc0V2ZW50c1tyZXNvdXJjZUlkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc0V2ZW50cztcbn1cbi8qXG5tYXJrIHJlc291cmNlcyBhcyBoYXZpbmcgZXZlbnRzIGlmIGFueSBvZiB0aGVpciBhbmNlc3RvcnMgaGF2ZSB0aGVtXG5OT1RFOiByZXNvdXJjZVN0b3JlIG1pZ2h0IG5vdCBoYXZlIGFsbCB0aGUgcmVzb3VyY2VzIHRoYXQgaGFzRXZlbnRze30gaGFzIGtleWVkXG4qL1xuZnVuY3Rpb24gY29tcHV0ZUFuY2VzdG9ySGFzRXZlbnRzKGhhc0V2ZW50cywgcmVzb3VyY2VTdG9yZSkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBmb3IgKHZhciByZXNvdXJjZUlkIGluIGhhc0V2ZW50cykge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICgocmVzb3VyY2UgPSByZXNvdXJjZVN0b3JlW3Jlc291cmNlSWRdKSkge1xuICAgICAgICAgICAgcmVzb3VyY2VJZCA9IHJlc291cmNlLnBhcmVudElkOyAvLyBub3cgZnVuY3Rpb25pbmcgYXMgdGhlIHBhcmVudElkXG4gICAgICAgICAgICBpZiAocmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgICAgIHJlc1tyZXNvdXJjZUlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gZm9yIHdoZW4gbm9uLXJlc291cmNlIHZpZXcgc2hvdWxkIGJlIGdpdmVuIEV2ZW50VWkgaW5mbyAoZm9yIGV2ZW50IGNvbG9yaW5nL2NvbnN0cmFpbnRzIGJhc2VkIG9mZiBvZiByZXNvdXJjZSBkYXRhKVxudmFyIFJlc291cmNlRXZlbnRDb25maWdBZGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNvdXJjZUV2ZW50Q29uZmlnQWRkZXIoKSB7XG4gICAgICAgIHRoaXMuYnVpbGRSZXNvdXJjZUV2ZW50VWlzID0gbWVtb2l6ZU91dHB1dChidWlsZFJlc291cmNlRXZlbnRVaXMsIGlzUHJvcHNFcXVhbCk7XG4gICAgICAgIHRoaXMuaW5qZWN0UmVzb3VyY2VFdmVudFVpcyA9IG1lbW9pemUoaW5qZWN0UmVzb3VyY2VFdmVudFVpcyk7XG4gICAgfVxuICAgIFJlc291cmNlRXZlbnRDb25maWdBZGRlci5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKHZpZXdQcm9wcywgdmlld1NwZWMsIGNhbGVuZGFyUHJvcHMpIHtcbiAgICAgICAgaWYgKCF2aWV3U3BlYy5jbGFzcy5uZWVkc1Jlc291cmNlRGF0YSkgeyAvLyBpcyBhIG5vbi1yZXNvdXJjZSB2aWV3P1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBldmVudFVpQmFzZXM6IHRoaXMuaW5qZWN0UmVzb3VyY2VFdmVudFVpcyh2aWV3UHJvcHMuZXZlbnRVaUJhc2VzLCB2aWV3UHJvcHMuZXZlbnRTdG9yZS5kZWZzLCB0aGlzLmJ1aWxkUmVzb3VyY2VFdmVudFVpcyhjYWxlbmRhclByb3BzLnJlc291cmNlU3RvcmUpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlRXZlbnRDb25maWdBZGRlcjtcbn0oKSk7XG5mdW5jdGlvbiBidWlsZFJlc291cmNlRXZlbnRVaXMocmVzb3VyY2VTdG9yZSkge1xuICAgIHJldHVybiBtYXBIYXNoKHJlc291cmNlU3RvcmUsIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gcmVzb3VyY2UudWk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpbmplY3RSZXNvdXJjZUV2ZW50VWlzKGV2ZW50VWlCYXNlcywgZXZlbnREZWZzLCByZXNvdXJjZUV2ZW50VWlzKSB7XG4gICAgcmV0dXJuIG1hcEhhc2goZXZlbnRVaUJhc2VzLCBmdW5jdGlvbiAoZXZlbnRVaSwgZGVmSWQpIHtcbiAgICAgICAgaWYgKGRlZklkKSB7IC8vIG5vdCB0aGUgJycga2V5XG4gICAgICAgICAgICByZXR1cm4gaW5qZWN0UmVzb3VyY2VFdmVudFVpKGV2ZW50VWksIGV2ZW50RGVmc1tkZWZJZF0sIHJlc291cmNlRXZlbnRVaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50VWk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGluamVjdFJlc291cmNlRXZlbnRVaShvcmlnRXZlbnRVaSwgZXZlbnREZWYsIHJlc291cmNlRXZlbnRVaXMpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAvLyBmaXJzdCByZXNvdXJjZSB0YWtlcyBwcmVjZWRlbmNlLCB3aGljaCBmaWdodHMgd2l0aCB0aGUgb3JkZXJpbmcgb2YgY29tYmluZUV2ZW50VWlzLCB0aHVzIHRoZSB1bnNoaWZ0c1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBldmVudERlZi5yZXNvdXJjZUlkczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJlc291cmNlSWQgPSBfYVtfaV07XG4gICAgICAgIGlmIChyZXNvdXJjZUV2ZW50VWlzW3Jlc291cmNlSWRdKSB7XG4gICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KHJlc291cmNlRXZlbnRVaXNbcmVzb3VyY2VJZF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnRzLnVuc2hpZnQob3JpZ0V2ZW50VWkpO1xuICAgIHJldHVybiBjb21iaW5lRXZlbnRVaXMocGFydHMpO1xufVxuLy8gZm9yIG1ha2luZyBzdXJlIGV2ZW50cyB0aGF0IGhhdmUgZWRpdGFibGUgcmVzb3VyY2VzIGFyZSBhbHdheXMgZHJhZ2dhYmxlIGluIHJlc291cmNlIHZpZXdzXG5mdW5jdGlvbiB0cmFuc2Zvcm1Jc0RyYWdnYWJsZSh2YWwsIGV2ZW50RGVmLCBldmVudFVpLCB2aWV3KSB7XG4gICAgaWYgKCF2YWwpIHtcbiAgICAgICAgaWYgKHZpZXcudmlld1NwZWMuY2xhc3MubmVlZHNSZXNvdXJjZURhdGEpIHtcbiAgICAgICAgICAgIGlmIChjb21wdXRlUmVzb3VyY2VFZGl0YWJsZShldmVudERlZiwgdmlldy5jYWxlbmRhcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsO1xufVxuXG52YXIgUkVTT1VSQ0VfU09VUkNFX1BST1BTID0ge1xuICAgIGlkOiBTdHJpbmdcbn07XG52YXIgZGVmcyA9IFtdO1xudmFyIHVpZCA9IDA7XG5mdW5jdGlvbiByZWdpc3RlclJlc291cmNlU291cmNlRGVmKGRlZikge1xuICAgIGRlZnMucHVzaChkZWYpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VTb3VyY2VEZWYoaWQpIHtcbiAgICByZXR1cm4gZGVmc1tpZF07XG59XG5mdW5jdGlvbiBkb2VzU291cmNlSWdub3JlUmFuZ2Uoc291cmNlKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZGVmc1tzb3VyY2Uuc291cmNlRGVmSWRdLmlnbm9yZVJhbmdlKTtcbn1cbmZ1bmN0aW9uIHBhcnNlUmVzb3VyY2VTb3VyY2UoaW5wdXQpIHtcbiAgICBmb3IgKHZhciBpID0gZGVmcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgeyAvLyBsYXRlci1hZGRlZCBwbHVnaW5zIHRha2UgcHJlY2VkZW5jZVxuICAgICAgICB2YXIgZGVmID0gZGVmc1tpXTtcbiAgICAgICAgdmFyIG1ldGEgPSBkZWYucGFyc2VNZXRhKGlucHV0KTtcbiAgICAgICAgaWYgKG1ldGEpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBwYXJzZVJlc291cmNlU291cmNlUHJvcHMoKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQpID8gaW5wdXQgOiB7fSwgbWV0YSwgaSk7XG4gICAgICAgICAgICByZXMuX3JhdyA9IGlucHV0O1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHBhcnNlUmVzb3VyY2VTb3VyY2VQcm9wcyhpbnB1dCwgbWV0YSwgc291cmNlRGVmSWQpIHtcbiAgICB2YXIgcHJvcHMgPSByZWZpbmVQcm9wcyhpbnB1dCwgUkVTT1VSQ0VfU09VUkNFX1BST1BTKTtcbiAgICBwcm9wcy5zb3VyY2VJZCA9IFN0cmluZyh1aWQrKyk7XG4gICAgcHJvcHMuc291cmNlRGVmSWQgPSBzb3VyY2VEZWZJZDtcbiAgICBwcm9wcy5tZXRhID0gbWV0YTtcbiAgICBwcm9wcy5wdWJsaWNJZCA9IHByb3BzLmlkO1xuICAgIHByb3BzLmlzRmV0Y2hpbmcgPSBmYWxzZTtcbiAgICBwcm9wcy5sYXRlc3RGZXRjaElkID0gJyc7XG4gICAgcHJvcHMuZmV0Y2hSYW5nZSA9IG51bGw7XG4gICAgZGVsZXRlIHByb3BzLmlkO1xuICAgIHJldHVybiBwcm9wcztcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmVzb3VyY2VTb3VyY2UgKHNvdXJjZSwgYWN0aW9uLCBkYXRlUHJvZmlsZSwgY2FsZW5kYXIpIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0lOSVQnOlxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNvdXJjZShjYWxlbmRhci5vcHQoJ3Jlc291cmNlcycpLCBjYWxlbmRhcik7XG4gICAgICAgIGNhc2UgJ1JFU0VUX1JFU09VUkNFX1NPVVJDRSc6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU291cmNlKGFjdGlvbi5yZXNvdXJjZVNvdXJjZUlucHV0LCBjYWxlbmRhciwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgJ1BSRVYnOiAvLyBUT0RPOiBob3cgZG8gd2UgdHJhY2sgYWxsIGFjdGlvbnMgdGhhdCBhZmZlY3QgZGF0ZVByb2ZpbGUgOihcbiAgICAgICAgY2FzZSAnTkVYVCc6XG4gICAgICAgIGNhc2UgJ1NFVF9EQVRFJzpcbiAgICAgICAgY2FzZSAnU0VUX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlUmFuZ2Uoc291cmNlLCBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdSRUNFSVZFX1JFU09VUkNFUyc6XG4gICAgICAgIGNhc2UgJ1JFQ0VJVkVfUkVTT1VSQ0VfRVJST1InOlxuICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVSZXNwb25zZShzb3VyY2UsIGFjdGlvbi5mZXRjaElkLCBhY3Rpb24uZmV0Y2hSYW5nZSk7XG4gICAgICAgIGNhc2UgJ1JFRkVUQ0hfUkVTT1VSQ0VTJzpcbiAgICAgICAgICAgIHJldHVybiBmZXRjaFNvdXJjZShzb3VyY2UsIGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbn1cbnZhciB1aWQkMSA9IDA7XG5mdW5jdGlvbiBjcmVhdGVTb3VyY2UoaW5wdXQsIGNhbGVuZGFyLCBmb3JjZUZldGNoKSB7XG4gICAgaWYgKGlucHV0KSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBwYXJzZVJlc291cmNlU291cmNlKGlucHV0KTtcbiAgICAgICAgaWYgKGZvcmNlRmV0Y2ggfHwgIWNhbGVuZGFyLm9wdCgncmVmZXRjaFJlc291cmNlc09uTmF2aWdhdGUnKSkgeyAvLyBiZWNhdXNlIGFzc3VtZXMgaGFuZGxlUmFuZ2Ugd2lsbCBkbyBpdCBsYXRlclxuICAgICAgICAgICAgc291cmNlID0gZmV0Y2hTb3VyY2Uoc291cmNlLCBudWxsLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBoYW5kbGVSYW5nZShzb3VyY2UsIGFjdGl2ZVJhbmdlLCBjYWxlbmRhcikge1xuICAgIGlmIChjYWxlbmRhci5vcHQoJ3JlZmV0Y2hSZXNvdXJjZXNPbk5hdmlnYXRlJykgJiZcbiAgICAgICAgIWRvZXNTb3VyY2VJZ25vcmVSYW5nZShzb3VyY2UpICYmXG4gICAgICAgICghc291cmNlLmZldGNoUmFuZ2UgfHwgIXJhbmdlc0VxdWFsKHNvdXJjZS5mZXRjaFJhbmdlLCBhY3RpdmVSYW5nZSkpKSB7XG4gICAgICAgIHJldHVybiBmZXRjaFNvdXJjZShzb3VyY2UsIGFjdGl2ZVJhbmdlLCBjYWxlbmRhcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZldGNoU291cmNlKHNvdXJjZSwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgc291cmNlRGVmID0gZ2V0UmVzb3VyY2VTb3VyY2VEZWYoc291cmNlLnNvdXJjZURlZklkKTtcbiAgICB2YXIgZmV0Y2hJZCA9IFN0cmluZyh1aWQkMSsrKTtcbiAgICBzb3VyY2VEZWYuZmV0Y2goe1xuICAgICAgICByZXNvdXJjZVNvdXJjZTogc291cmNlLFxuICAgICAgICBjYWxlbmRhcjogY2FsZW5kYXIsXG4gICAgICAgIHJhbmdlOiBmZXRjaFJhbmdlXG4gICAgfSwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAvLyBIQUNLXG4gICAgICAgIC8vIGRvIGJlZm9yZSBjYWxsaW5nIGRpc3BhdGNoIGluIGNhc2UgZGlzcGF0Y2ggcmVuZGVycyBzeW5jaHJvbm91c2x5XG4gICAgICAgIGNhbGVuZGFyLmFmdGVyU2l6aW5nVHJpZ2dlcnMuX3Jlc291cmNlc1JlbmRlcmVkID0gW251bGxdOyAvLyBmaXJlIG9uY2VcbiAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1JFQ0VJVkVfUkVTT1VSQ0VTJyxcbiAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlLFxuICAgICAgICAgICAgcmF3UmVzb3VyY2VzOiByZXMucmF3UmVzb3VyY2VzXG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVDRUlWRV9SRVNPVVJDRV9FUlJPUicsXG4gICAgICAgICAgICBmZXRjaElkOiBmZXRjaElkLFxuICAgICAgICAgICAgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX19hc3NpZ24oe30sIHNvdXJjZSwgeyBpc0ZldGNoaW5nOiB0cnVlLCBsYXRlc3RGZXRjaElkOiBmZXRjaElkIH0pO1xufVxuZnVuY3Rpb24gcmVjZWl2ZVJlc3BvbnNlKHNvdXJjZSwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSkge1xuICAgIGlmIChmZXRjaElkID09PSBzb3VyY2UubGF0ZXN0RmV0Y2hJZCkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHNvdXJjZSwgeyBpc0ZldGNoaW5nOiBmYWxzZSwgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbn1cblxudmFyIFJFU09VUkNFX1BST1BTID0ge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBwYXJlbnRJZDogU3RyaW5nLFxuICAgIGJ1c2luZXNzSG91cnM6IG51bGwsXG4gICAgY2hpbGRyZW46IG51bGwsXG4gICAgZXh0ZW5kZWRQcm9wczogbnVsbFxufTtcbnZhciBQUklWQVRFX0lEX1BSRUZJWCA9ICdfZmM6JztcbnZhciB1aWQkMiA9IDA7XG4vKlxubmVlZHMgYSBmdWxsIHN0b3JlIHNvIHRoYXQgaXQgY2FuIHBvcHVsYXRlIGNoaWxkcmVuIHRvb1xuKi9cbmZ1bmN0aW9uIHBhcnNlUmVzb3VyY2UoaW5wdXQsIHBhcmVudElkLCBzdG9yZSwgY2FsZW5kYXIpIHtcbiAgICBpZiAocGFyZW50SWQgPT09IHZvaWQgMCkgeyBwYXJlbnRJZCA9ICcnOyB9XG4gICAgdmFyIGxlZnRvdmVyczAgPSB7fTtcbiAgICB2YXIgcHJvcHMgPSByZWZpbmVQcm9wcyhpbnB1dCwgUkVTT1VSQ0VfUFJPUFMsIHt9LCBsZWZ0b3ZlcnMwKTtcbiAgICB2YXIgbGVmdG92ZXJzMSA9IHt9O1xuICAgIHZhciB1aSA9IHByb2Nlc3NTY29wZWRVaVByb3BzKCdldmVudCcsIGxlZnRvdmVyczAsIGNhbGVuZGFyLCBsZWZ0b3ZlcnMxKTtcbiAgICBpZiAoIXByb3BzLmlkKSB7XG4gICAgICAgIHByb3BzLmlkID0gUFJJVkFURV9JRF9QUkVGSVggKyAodWlkJDIrKyk7XG4gICAgfVxuICAgIGlmICghcHJvcHMucGFyZW50SWQpIHsgLy8gZ2l2ZSBwcmVjZWRlbmNlIHRvIHRoZSBwYXJlbnRJZCBwcm9wZXJ0eVxuICAgICAgICBwcm9wcy5wYXJlbnRJZCA9IHBhcmVudElkO1xuICAgIH1cbiAgICBwcm9wcy5idXNpbmVzc0hvdXJzID0gcHJvcHMuYnVzaW5lc3NIb3VycyA/IHBhcnNlQnVzaW5lc3NIb3Vycyhwcm9wcy5idXNpbmVzc0hvdXJzLCBjYWxlbmRhcikgOiBudWxsO1xuICAgIHByb3BzLnVpID0gdWk7XG4gICAgcHJvcHMuZXh0ZW5kZWRQcm9wcyA9IF9fYXNzaWduKHt9LCBsZWZ0b3ZlcnMxLCBwcm9wcy5leHRlbmRlZFByb3BzKTtcbiAgICAvLyBoZWxwIG91dCBSZXNvdXJjZUFwaSBmcm9tIGhhdmluZyB1c2VyIG1vZGlmeSBwcm9wc1xuICAgIE9iamVjdC5mcmVlemUodWkuY2xhc3NOYW1lcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShwcm9wcy5leHRlbmRlZFByb3BzKTtcbiAgICBpZiAoc3RvcmVbcHJvcHMuaWRdKSA7XG4gICAgZWxzZSB7XG4gICAgICAgIHN0b3JlW3Byb3BzLmlkXSA9IHByb3BzO1xuICAgICAgICBpZiAocHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBwcm9wcy5jaGlsZHJlbjsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRJbnB1dCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBwYXJzZVJlc291cmNlKGNoaWxkSW5wdXQsIHByb3BzLmlkLCBzdG9yZSwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHByb3BzLmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wcztcbn1cbi8qXG5UT0RPOiB1c2UgdGhpcyBpbiBtb3JlIHBsYWNlc1xuKi9cbmZ1bmN0aW9uIGdldFB1YmxpY0lkKGlkKSB7XG4gICAgaWYgKGlkLmluZGV4T2YoUFJJVkFURV9JRF9QUkVGSVgpID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXNvdXJjZVN0b3JlIChzdG9yZSwgYWN0aW9uLCBzb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdJTklUJzpcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9SRVNPVVJDRVMnOlxuICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVSYXdSZXNvdXJjZXMoc3RvcmUsIGFjdGlvbi5yYXdSZXNvdXJjZXMsIGFjdGlvbi5mZXRjaElkLCBzb3VyY2UsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnQUREX1JFU09VUkNFJzpcbiAgICAgICAgICAgIHJldHVybiBhZGRSZXNvdXJjZShzdG9yZSwgYWN0aW9uLnJlc291cmNlSGFzaCk7XG4gICAgICAgIGNhc2UgJ1JFTU9WRV9SRVNPVVJDRSc6XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlUmVzb3VyY2Uoc3RvcmUsIGFjdGlvbi5yZXNvdXJjZUlkKTtcbiAgICAgICAgY2FzZSAnU0VUX1JFU09VUkNFX1BST1AnOlxuICAgICAgICAgICAgcmV0dXJuIHNldFJlc291cmNlUHJvcChzdG9yZSwgYWN0aW9uLnJlc291cmNlSWQsIGFjdGlvbi5wcm9wTmFtZSwgYWN0aW9uLnByb3BWYWx1ZSk7XG4gICAgICAgIGNhc2UgJ1JFU0VUX1JFU09VUkNFUyc6XG4gICAgICAgICAgICAvLyBtdXN0IG1ha2UgdGhlIGNhbGVuZGFyIHRoaW5rIGVhY2ggcmVzb3VyY2UgaXMgYSBuZXcgb2JqZWN0IDovXG4gICAgICAgICAgICByZXR1cm4gbWFwSGFzaChzdG9yZSwgZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCByZXNvdXJjZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdG9yZTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWNlaXZlUmF3UmVzb3VyY2VzKGV4aXN0aW5nU3RvcmUsIGlucHV0cywgZmV0Y2hJZCwgc291cmNlLCBjYWxlbmRhcikge1xuICAgIGlmIChzb3VyY2UubGF0ZXN0RmV0Y2hJZCA9PT0gZmV0Y2hJZCkge1xuICAgICAgICB2YXIgbmV4dFN0b3JlID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgaW5wdXRzXzEgPSBpbnB1dHM7IF9pIDwgaW5wdXRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNfMVtfaV07XG4gICAgICAgICAgICBwYXJzZVJlc291cmNlKGlucHV0LCAnJywgbmV4dFN0b3JlLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHRTdG9yZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1N0b3JlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFJlc291cmNlKGV4aXN0aW5nU3RvcmUsIGFkZGl0aW9ucykge1xuICAgIC8vIFRPRE86IHdhcm4gYWJvdXQgZHVwbGljYXRlIElEc1xuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXhpc3RpbmdTdG9yZSwgYWRkaXRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVJlc291cmNlKGV4aXN0aW5nU3RvcmUsIHJlc291cmNlSWQpIHtcbiAgICB2YXIgbmV3U3RvcmUgPSBfX2Fzc2lnbih7fSwgZXhpc3RpbmdTdG9yZSk7XG4gICAgZGVsZXRlIG5ld1N0b3JlW3Jlc291cmNlSWRdO1xuICAgIC8vIHByb21vdGUgY2hpbGRyZW5cbiAgICBmb3IgKHZhciBjaGlsZFJlc291cmNlSWQgaW4gbmV3U3RvcmUpIHsgLy8gYSBjaGlsZCwgKm1heWJlKiBidXQgcHJvYmFibHkgbm90XG4gICAgICAgIGlmIChuZXdTdG9yZVtjaGlsZFJlc291cmNlSWRdLnBhcmVudElkID09PSByZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICBuZXdTdG9yZVtjaGlsZFJlc291cmNlSWRdID0gX19hc3NpZ24oe30sIG5ld1N0b3JlW2NoaWxkUmVzb3VyY2VJZF0sIHsgcGFyZW50SWQ6ICcnIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdTdG9yZTtcbn1cbmZ1bmN0aW9uIHNldFJlc291cmNlUHJvcChleGlzdGluZ1N0b3JlLCByZXNvdXJjZUlkLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIGV4aXN0aW5nUmVzb3VyY2UgPSBleGlzdGluZ1N0b3JlW3Jlc291cmNlSWRdO1xuICAgIC8vIFRPRE86IHNhbml0aXphdGlvblxuICAgIGlmIChleGlzdGluZ1Jlc291cmNlKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXhpc3RpbmdTdG9yZSwgKF9hID0ge30sIF9hW3Jlc291cmNlSWRdID0gX19hc3NpZ24oe30sIGV4aXN0aW5nUmVzb3VyY2UsIChfYiA9IHt9LCBfYltuYW1lXSA9IHZhbHVlLCBfYikpLCBfYSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nU3RvcmU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXNvdXJjZUVudGl0eUV4cGFuc2lvbnMoZXhwYW5zaW9ucywgYWN0aW9uKSB7XG4gICAgdmFyIF9hO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnSU5JVCc6XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIGNhc2UgJ1NFVF9SRVNPVVJDRV9FTlRJVFlfRVhQQU5ERUQnOlxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBleHBhbnNpb25zLCAoX2EgPSB7fSwgX2FbYWN0aW9uLmlkXSA9IGFjdGlvbi5pc0V4cGFuZGVkLCBfYSkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGV4cGFuc2lvbnM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZXNvdXJjZXNSZWR1Y2VycyAoc3RhdGUsIGFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVzb3VyY2VTb3VyY2UgPSByZWR1Y2VSZXNvdXJjZVNvdXJjZShzdGF0ZS5yZXNvdXJjZVNvdXJjZSwgYWN0aW9uLCBzdGF0ZS5kYXRlUHJvZmlsZSwgY2FsZW5kYXIpO1xuICAgIHZhciByZXNvdXJjZVN0b3JlID0gcmVkdWNlUmVzb3VyY2VTdG9yZShzdGF0ZS5yZXNvdXJjZVN0b3JlLCBhY3Rpb24sIHJlc291cmNlU291cmNlLCBjYWxlbmRhcik7XG4gICAgdmFyIHJlc291cmNlRW50aXR5RXhwYW5zaW9ucyA9IHJlZHVjZVJlc291cmNlRW50aXR5RXhwYW5zaW9ucyhzdGF0ZS5yZXNvdXJjZUVudGl0eUV4cGFuc2lvbnMsIGFjdGlvbik7XG4gICAgcmV0dXJuIF9fYXNzaWduKHt9LCBzdGF0ZSwgeyByZXNvdXJjZVNvdXJjZTogcmVzb3VyY2VTb3VyY2UsXG4gICAgICAgIHJlc291cmNlU3RvcmU6IHJlc291cmNlU3RvcmUsXG4gICAgICAgIHJlc291cmNlRW50aXR5RXhwYW5zaW9uczogcmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zIH0pO1xufVxuXG52YXIgUkVTT1VSQ0VfUkVMQVRFRF9QUk9QUyA9IHtcbiAgICByZXNvdXJjZUlkOiBTdHJpbmcsXG4gICAgcmVzb3VyY2VJZHM6IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICByZXR1cm4gKGl0ZW1zIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVzb3VyY2VFZGl0YWJsZTogQm9vbGVhblxufTtcbmZ1bmN0aW9uIHBhcnNlRXZlbnREZWYoZGVmLCBwcm9wcywgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHJlc291cmNlUmVsYXRlZFByb3BzID0gcmVmaW5lUHJvcHMocHJvcHMsIFJFU09VUkNFX1JFTEFURURfUFJPUFMsIHt9LCBsZWZ0b3ZlcnMpO1xuICAgIHZhciByZXNvdXJjZUlkcyA9IHJlc291cmNlUmVsYXRlZFByb3BzLnJlc291cmNlSWRzO1xuICAgIGlmIChyZXNvdXJjZVJlbGF0ZWRQcm9wcy5yZXNvdXJjZUlkKSB7XG4gICAgICAgIHJlc291cmNlSWRzLnB1c2gocmVzb3VyY2VSZWxhdGVkUHJvcHMucmVzb3VyY2VJZCk7XG4gICAgfVxuICAgIGRlZi5yZXNvdXJjZUlkcyA9IHJlc291cmNlSWRzO1xuICAgIGRlZi5yZXNvdXJjZUVkaXRhYmxlID0gcmVzb3VyY2VSZWxhdGVkUHJvcHMucmVzb3VyY2VFZGl0YWJsZTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRGF0ZVNlbGVjdGlvbkpvaW4oaGl0MCwgaGl0MSkge1xuICAgIHZhciByZXNvdXJjZUlkMCA9IGhpdDAuZGF0ZVNwYW4ucmVzb3VyY2VJZDtcbiAgICB2YXIgcmVzb3VyY2VJZDEgPSBoaXQxLmRhdGVTcGFuLnJlc291cmNlSWQ7XG4gICAgaWYgKHJlc291cmNlSWQwICYmIHJlc291cmNlSWQxKSB7XG4gICAgICAgIGlmIChoaXQwLmNvbXBvbmVudC5hbGxvd0Fjcm9zc1Jlc291cmNlcyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIHJlc291cmNlSWQwICE9PSByZXNvdXJjZUlkMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgcmVzb3VyY2VJZDogcmVzb3VyY2VJZDAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIFJlc291cmNlQXBpID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlQXBpKGNhbGVuZGFyLCByYXdSZXNvdXJjZSkge1xuICAgICAgICB0aGlzLl9jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICB0aGlzLl9yZXNvdXJjZSA9IHJhd1Jlc291cmNlO1xuICAgIH1cbiAgICBSZXNvdXJjZUFwaS5wcm90b3R5cGUuc2V0UHJvcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9jYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnU0VUX1JFU09VUkNFX1BST1AnLFxuICAgICAgICAgICAgcmVzb3VyY2VJZDogdGhpcy5fcmVzb3VyY2UuaWQsXG4gICAgICAgICAgICBwcm9wTmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BWYWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXNvdXJjZUFwaS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX1JFU09VUkNFJyxcbiAgICAgICAgICAgIHJlc291cmNlSWQ6IHRoaXMuX3Jlc291cmNlLmlkXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUmVzb3VyY2VBcGkucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gdGhpcy5fY2FsZW5kYXI7XG4gICAgICAgIHZhciBwYXJlbnRJZCA9IHRoaXMuX3Jlc291cmNlLnBhcmVudElkO1xuICAgICAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2VBcGkoY2FsZW5kYXIsIGNhbGVuZGFyLnN0YXRlLnJlc291cmNlU291cmNlW3BhcmVudElkXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzb3VyY2VBcGkucHJvdG90eXBlLmdldENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpc1Jlc291cmNlSWQgPSB0aGlzLl9yZXNvdXJjZS5pZDtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gdGhpcy5fY2FsZW5kYXI7XG4gICAgICAgIHZhciByZXNvdXJjZVN0b3JlID0gY2FsZW5kYXIuc3RhdGUucmVzb3VyY2VTdG9yZTtcbiAgICAgICAgdmFyIGNoaWxkQXBpcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciByZXNvdXJjZUlkIGluIHJlc291cmNlU3RvcmUpIHtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZVN0b3JlW3Jlc291cmNlSWRdLnBhcmVudElkID09PSB0aGlzUmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgICAgIGNoaWxkQXBpcy5wdXNoKG5ldyBSZXNvdXJjZUFwaShjYWxlbmRhciwgcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZEFwaXM7XG4gICAgfTtcbiAgICAvKlxuICAgIHRoaXMgaXMgcmVhbGx5IGluZWZmaWNpZW50IVxuICAgIFRPRE86IG1ha2UgRXZlbnRBcGk6OnJlc291cmNlSWRzIGEgaGFzaCBvciBrZWVwIGFuIGluZGV4IGluIHRoZSBDYWxlbmRhcidzIHN0YXRlXG4gICAgKi9cbiAgICBSZXNvdXJjZUFwaS5wcm90b3R5cGUuZ2V0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpc1Jlc291cmNlSWQgPSB0aGlzLl9yZXNvdXJjZS5pZDtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gdGhpcy5fY2FsZW5kYXI7XG4gICAgICAgIHZhciBfYSA9IGNhbGVuZGFyLnN0YXRlLmV2ZW50U3RvcmUsIGRlZnMgPSBfYS5kZWZzLCBpbnN0YW5jZXMgPSBfYS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBldmVudEFwaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBpbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgICAgIGlmIChkZWYucmVzb3VyY2VJZHMuaW5kZXhPZih0aGlzUmVzb3VyY2VJZCkgIT09IC0xKSB7IC8vIGluZWZmaWNpZW50ISEhXG4gICAgICAgICAgICAgICAgZXZlbnRBcGlzLnB1c2gobmV3IEV2ZW50QXBpKGNhbGVuZGFyLCBkZWYsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50QXBpcztcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiaWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLmlkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2VBcGkucHJvdG90eXBlLCBcInRpdGxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXNvdXJjZS50aXRsZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJldmVudENvbnN0cmFpbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLmNvbnN0cmFpbnRzWzBdIHx8IG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXZlbnRPdmVybGFwXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXNvdXJjZS51aS5vdmVybGFwOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2VBcGkucHJvdG90eXBlLCBcImV2ZW50QWxsb3dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLmFsbG93c1swXSB8fCBudWxsOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2VBcGkucHJvdG90eXBlLCBcImV2ZW50QmFja2dyb3VuZENvbG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXNvdXJjZS51aS5iYWNrZ3JvdW5kQ29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXZlbnRCb3JkZXJDb2xvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UudWkuYm9yZGVyQ29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXZlbnRUZXh0Q29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLnRleHRDb2xvcjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJldmVudENsYXNzTmFtZXNcIiwge1xuICAgICAgICAvLyBOT1RFOiB1c2VyIGNhbid0IG1vZGlmeSB0aGVzZSBiZWNhdXNlIE9iamVjdC5mcmVlemUgd2FzIGNhbGxlZCBpbiBldmVudC1kZWYgcGFyc2luZ1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLmNsYXNzTmFtZXM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXh0ZW5kZWRQcm9wc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UuZXh0ZW5kZWRQcm9wczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFJlc291cmNlQXBpO1xufSgpKTtcblxuQ2FsZW5kYXIucHJvdG90eXBlLmFkZFJlc291cmNlID0gZnVuY3Rpb24gKGlucHV0LCBzY3JvbGxUbykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoc2Nyb2xsVG8gPT09IHZvaWQgMCkgeyBzY3JvbGxUbyA9IHRydWU7IH1cbiAgICB2YXIgcmVzb3VyY2VIYXNoO1xuICAgIHZhciByZXNvdXJjZTtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXNvdXJjZUFwaSkge1xuICAgICAgICByZXNvdXJjZSA9IGlucHV0Ll9yZXNvdXJjZTtcbiAgICAgICAgcmVzb3VyY2VIYXNoID0gKF9hID0ge30sIF9hW3Jlc291cmNlLmlkXSA9IHJlc291cmNlLCBfYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXNvdXJjZUhhc2ggPSB7fTtcbiAgICAgICAgcmVzb3VyY2UgPSBwYXJzZVJlc291cmNlKGlucHV0LCAnJywgcmVzb3VyY2VIYXNoLCB0aGlzKTtcbiAgICB9XG4gICAgLy8gSEFDS1xuICAgIGlmIChzY3JvbGxUbykge1xuICAgICAgICB0aGlzLmNvbXBvbmVudC52aWV3LmFkZFNjcm9sbCh7IGZvcmNlZFJvd0lkOiByZXNvdXJjZS5pZCB9KTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdBRERfUkVTT1VSQ0UnLFxuICAgICAgICByZXNvdXJjZUhhc2g6IHJlc291cmNlSGFzaFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgUmVzb3VyY2VBcGkodGhpcywgcmVzb3VyY2UpO1xufTtcbkNhbGVuZGFyLnByb3RvdHlwZS5nZXRSZXNvdXJjZUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZCA9IFN0cmluZyhpZCk7XG4gICAgaWYgKHRoaXMuc3RhdGUucmVzb3VyY2VTdG9yZSkgeyAvLyBndWFyZCBhZ2FpbnN0IGNhbGVuZGFyIHdpdGggbm8gcmVzb3VyY2UgZnVuY3Rpb25hbGl0eVxuICAgICAgICB2YXIgcmF3UmVzb3VyY2UgPSB0aGlzLnN0YXRlLnJlc291cmNlU3RvcmVbaWRdO1xuICAgICAgICBpZiAocmF3UmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2VBcGkodGhpcywgcmF3UmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbkNhbGVuZGFyLnByb3RvdHlwZS5nZXRSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc291cmNlU3RvcmUgPSB0aGlzLnN0YXRlLnJlc291cmNlU3RvcmU7XG4gICAgdmFyIHJlc291cmNlQXBpcyA9IFtdO1xuICAgIGlmIChyZXNvdXJjZVN0b3JlKSB7IC8vIGd1YXJkIGFnYWluc3QgY2FsZW5kYXIgd2l0aCBubyByZXNvdXJjZSBmdW5jdGlvbmFsaXR5XG4gICAgICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gcmVzb3VyY2VTdG9yZSkge1xuICAgICAgICAgICAgcmVzb3VyY2VBcGlzLnB1c2gobmV3IFJlc291cmNlQXBpKHRoaXMsIHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VBcGlzO1xufTtcbkNhbGVuZGFyLnByb3RvdHlwZS5nZXRUb3BMZXZlbFJlc291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzb3VyY2VTdG9yZSA9IHRoaXMuc3RhdGUucmVzb3VyY2VTdG9yZTtcbiAgICB2YXIgcmVzb3VyY2VBcGlzID0gW107XG4gICAgaWYgKHJlc291cmNlU3RvcmUpIHsgLy8gZ3VhcmQgYWdhaW5zdCBjYWxlbmRhciB3aXRoIG5vIHJlc291cmNlIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgICAgICBpZiAoIXJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF0ucGFyZW50SWQpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZUFwaXMucHVzaChuZXcgUmVzb3VyY2VBcGkodGhpcywgcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZUFwaXM7XG59O1xuQ2FsZW5kYXIucHJvdG90eXBlLnJlcmVuZGVyUmVzb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnUkVTRVRfUkVTT1VSQ0VTJ1xuICAgIH0pO1xufTtcbkNhbGVuZGFyLnByb3RvdHlwZS5yZWZldGNoUmVzb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnUkVGRVRDSF9SRVNPVVJDRVMnXG4gICAgfSk7XG59O1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0ZVBvaW50KGRhdGVTcGFuLCBjYWxlbmRhcikge1xuICAgIHJldHVybiBkYXRlU3Bhbi5yZXNvdXJjZUlkID9cbiAgICAgICAgeyByZXNvdXJjZTogY2FsZW5kYXIuZ2V0UmVzb3VyY2VCeUlkKGRhdGVTcGFuLnJlc291cmNlSWQpIH0gOlxuICAgICAgICB7fTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGVTcGFuKGRhdGVTcGFuLCBjYWxlbmRhcikge1xuICAgIHJldHVybiBkYXRlU3Bhbi5yZXNvdXJjZUlkID9cbiAgICAgICAgeyByZXNvdXJjZTogY2FsZW5kYXIuZ2V0UmVzb3VyY2VCeUlkKGRhdGVTcGFuLnJlc291cmNlSWQpIH0gOlxuICAgICAgICB7fTtcbn1cblxuLypcbnNwbGl0cyB0aGluZ3MgQkFTRUQgT0ZGIE9GIHdoaWNoIHJlc291cmNlcyB0aGV5IGFyZSBhc3NvY2lhdGVkIHdpdGguXG5jcmVhdGVzIGEgJycgZW50cnkgd2hpY2ggaXMgd2hlbiBzb21ldGhpbmcgaGFzIE5PIHJlc291cmNlLlxuKi9cbnZhciBSZXNvdXJjZVNwbGl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXNvdXJjZVNwbGl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlc291cmNlU3BsaXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5SW5mbyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyAnJzoge30gfSwgcHJvcHMucmVzb3VyY2VTdG9yZSAvLyBhbHJlYWR5IGhhcyBgdWlgIGFuZCBgYnVzaW5lc3NIb3Vyc2Aga2V5cyFcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIFJlc291cmNlU3BsaXR0ZXIucHJvdG90eXBlLmdldEtleXNGb3JEYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICByZXR1cm4gW2RhdGVTcGFuLnJlc291cmNlSWQgfHwgJyddO1xuICAgIH07XG4gICAgUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5c0ZvckV2ZW50RGVmID0gZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHZhciByZXNvdXJjZUlkcyA9IGV2ZW50RGVmLnJlc291cmNlSWRzO1xuICAgICAgICBpZiAoIXJlc291cmNlSWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc291cmNlSWRzO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlU3BsaXR0ZXI7XG59KFNwbGl0dGVyKSk7XG5cbmZ1bmN0aW9uIGlzUHJvcHNWYWxpZFdpdGhSZXNvdXJjZXMocHJvcHMsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHNwbGl0dGVyID0gbmV3IFJlc291cmNlU3BsaXR0ZXIoKTtcbiAgICB2YXIgc2V0cyA9IHNwbGl0dGVyLnNwbGl0UHJvcHMoX19hc3NpZ24oe30sIHByb3BzLCB7IHJlc291cmNlU3RvcmU6IGNhbGVuZGFyLnN0YXRlLnJlc291cmNlU3RvcmUgfSkpO1xuICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gc2V0cykge1xuICAgICAgICB2YXIgcHJvcHNfMSA9IHNldHNbcmVzb3VyY2VJZF07XG4gICAgICAgIC8vIG1lcmdlIGluIGV2ZW50IGRhdGEgZnJvbSB0aGUgbm9uLXJlc291cmNlIHNlZ21lbnRcbiAgICAgICAgaWYgKHJlc291cmNlSWQgJiYgc2V0c1snJ10pIHsgLy8gY3VycmVudCBzZWdtZW50IGlzIG5vdCB0aGUgbm9uLXJlc291cmNlIG9uZSwgYW5kIHRoZXJlIElTIGEgbm9uLXJlc291cmNlIG9uZVxuICAgICAgICAgICAgcHJvcHNfMSA9IF9fYXNzaWduKHt9LCBwcm9wc18xLCB7IGV2ZW50U3RvcmU6IG1lcmdlRXZlbnRTdG9yZXMoc2V0c1snJ10uZXZlbnRTdG9yZSwgcHJvcHNfMS5ldmVudFN0b3JlKSwgZXZlbnRVaUJhc2VzOiBfX2Fzc2lnbih7fSwgc2V0c1snJ10uZXZlbnRVaUJhc2VzLCBwcm9wc18xLmV2ZW50VWlCYXNlcykgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1Byb3BzVmFsaWQocHJvcHNfMSwgY2FsZW5kYXIsIHsgcmVzb3VyY2VJZDogcmVzb3VyY2VJZCB9LCBmaWx0ZXJDb25maWcuYmluZChudWxsLCByZXNvdXJjZUlkKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGZpbHRlckNvbmZpZyhyZXNvdXJjZUlkLCBjb25maWcpIHtcbiAgICByZXR1cm4gX19hc3NpZ24oe30sIGNvbmZpZywgeyBjb25zdHJhaW50czogZmlsdGVyQ29uc3RyYWludHMocmVzb3VyY2VJZCwgY29uZmlnLmNvbnN0cmFpbnRzKSB9KTtcbn1cbmZ1bmN0aW9uIGZpbHRlckNvbnN0cmFpbnRzKHJlc291cmNlSWQsIGNvbnN0cmFpbnRzKSB7XG4gICAgcmV0dXJuIGNvbnN0cmFpbnRzLm1hcChmdW5jdGlvbiAoY29uc3RyYWludCkge1xuICAgICAgICB2YXIgZGVmcyA9IGNvbnN0cmFpbnQuZGVmcztcbiAgICAgICAgaWYgKGRlZnMpIHsgLy8gd2UgYXJlIGRlYWxpbmcgd2l0aCBhbiBFdmVudFN0b3JlXG4gICAgICAgICAgICAvLyBpZiBhbnkgb2YgdGhlIGV2ZW50cyBkZWZpbmUgY29uc3RyYWludHMgdG8gcmVzb3VyY2VzIHRoYXQgYXJlIE5PVCB0aGlzIHJlc291cmNlLFxuICAgICAgICAgICAgLy8gdGhlbiB0aGlzIHJlc291cmNlIGlzIHVuY29uZGl0aW9uYWxseSBwcm9oaWJpdGVkLCB3aGljaCBpcyB3aGF0IGEgYGZhbHNlYCB2YWx1ZSBkb2VzLlxuICAgICAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZGVmcykge1xuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZUlkcyA9IGRlZnNbZGVmSWRdLnJlc291cmNlSWRzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZUlkcy5sZW5ndGggJiYgcmVzb3VyY2VJZHMuaW5kZXhPZihyZXNvdXJjZUlkKSA9PT0gLTEpIHsgLy8gVE9ETzogdXNlIGEgaGFzaD8hISEgKGZvciBvdGhlciByZWFzb25zIHRvbylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXh0ZXJuYWxEZWYoZGF0ZVNwYW4pIHtcbiAgICByZXR1cm4gZGF0ZVNwYW4ucmVzb3VyY2VJZCA/XG4gICAgICAgIHsgcmVzb3VyY2VJZDogZGF0ZVNwYW4ucmVzb3VyY2VJZCB9IDpcbiAgICAgICAge307XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUV2ZW50UmVzaXplSm9pbihoaXQwLCBoaXQxKSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IGhpdDAuY29tcG9uZW50O1xuICAgIGlmIChjb21wb25lbnQuYWxsb3dBY3Jvc3NSZXNvdXJjZXMgPT09IGZhbHNlICYmXG4gICAgICAgIGhpdDAuZGF0ZVNwYW4ucmVzb3VyY2VJZCAhPT0gaGl0MS5kYXRlU3Bhbi5yZXNvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbkV2ZW50QXBpLnByb3RvdHlwZS5nZXRSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhbGVuZGFyID0gdGhpcy5fY2FsZW5kYXI7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5yZXNvdXJjZUlkcy5tYXAoZnVuY3Rpb24gKHJlc291cmNlSWQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGVuZGFyLmdldFJlc291cmNlQnlJZChyZXNvdXJjZUlkKTtcbiAgICB9KTtcbn07XG5FdmVudEFwaS5wcm90b3R5cGUuc2V0UmVzb3VyY2VzID0gZnVuY3Rpb24gKHJlc291cmNlcykge1xuICAgIHZhciByZXNvdXJjZUlkcyA9IFtdO1xuICAgIC8vIG1hc3NhZ2UgcmVzb3VyY2VzIC0+IHJlc291cmNlSWRzXG4gICAgZm9yICh2YXIgX2kgPSAwLCByZXNvdXJjZXNfMSA9IHJlc291cmNlczsgX2kgPCByZXNvdXJjZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VzXzFbX2ldO1xuICAgICAgICB2YXIgcmVzb3VyY2VJZCA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXNvdXJjZUlkID0gcmVzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlc291cmNlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmVzb3VyY2VJZCA9IFN0cmluZyhyZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBSZXNvdXJjZUFwaSkge1xuICAgICAgICAgICAgcmVzb3VyY2VJZCA9IHJlc291cmNlLmlkOyAvLyBndWFyYW50ZWVkIHRvIGFsd2F5cyBoYXZlIGFuIElELiBobW1tXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Vua25vd24gcmVzb3VyY2UgdHlwZTogJyArIHJlc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgcmVzb3VyY2VJZHMucHVzaChyZXNvdXJjZUlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgIHN0YW5kYXJkUHJvcHM6IHtcbiAgICAgICAgICAgIHJlc291cmNlSWRzOiByZXNvdXJjZUlkc1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG52YXIgUkVMRUFTRV9EQVRFID0gJzIwMTktMDgtMTAnOyAvLyBmb3IgU2NoZWR1bGVyXG52YXIgVVBHUkFERV9XSU5ET1cgPSAzNjUgKyA3OyAvLyBkYXlzLiAxIHdlZWsgbGVld2F5LCBmb3IgdHogc2hpZnQgcmVhc29ucyB0b29cbnZhciBMSUNFTlNFX0lORk9fVVJMID0gJ2h0dHA6Ly9mdWxsY2FsZW5kYXIuaW8vc2NoZWR1bGVyL2xpY2Vuc2UvJztcbnZhciBQUkVTRVRfTElDRU5TRV9LRVlTID0gW1xuICAgICdHUEwtTXktUHJvamVjdC1Jcy1PcGVuLVNvdXJjZScsXG4gICAgJ0NDLUF0dHJpYnV0aW9uLU5vbkNvbW1lcmNpYWwtTm9EZXJpdmF0aXZlcydcbl07XG52YXIgQ1NTID0ge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICd6LWluZGV4JzogOTk5OTksXG4gICAgYm90dG9tOiAnMXB4JyxcbiAgICBsZWZ0OiAnMXB4JyxcbiAgICBiYWNrZ3JvdW5kOiAnI2VlZScsXG4gICAgJ2JvcmRlci1jb2xvcic6ICcjZGRkJyxcbiAgICAnYm9yZGVyLXN0eWxlJzogJ3NvbGlkJyxcbiAgICAnYm9yZGVyLXdpZHRoJzogJzFweCAxcHggMCAwJyxcbiAgICBwYWRkaW5nOiAnMnB4IDRweCcsXG4gICAgJ2ZvbnQtc2l6ZSc6ICcxMnB4JyxcbiAgICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiAnM3B4J1xufTtcbmZ1bmN0aW9uIGluamVjdExpY2Vuc2VXYXJuaW5nKGNvbnRhaW5lckVsLCBjYWxlbmRhcikge1xuICAgIHZhciBrZXkgPSBjYWxlbmRhci5vcHQoJ3NjaGVkdWxlckxpY2Vuc2VLZXknKTtcbiAgICBpZiAoIWlzSW1tdW5lVXJsKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSAmJiAhaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIGFwcGVuZFRvRWxlbWVudChjb250YWluZXJFbCwgJzxkaXYgY2xhc3M9XCJmYy1saWNlbnNlLW1lc3NhZ2VcIiBzdHlsZT1cIicgKyBodG1sRXNjYXBlKGNzc1RvU3RyKENTUykpICsgJ1wiPicgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1c2UgYSB2YWxpZCBsaWNlbnNlIGtleS4gPGEgaHJlZj1cIicgKyBMSUNFTlNFX0lORk9fVVJMICsgJ1wiPk1vcmUgSW5mbzwvYT4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nKTtcbiAgICB9XG59XG4vKlxuVGhpcyBkZWNyeXB0aW9uIGlzIG5vdCBtZWFudCB0byBiZSBidWxsZXRwcm9vZi4gSnVzdCBhIHdheSB0byByZW1pbmQgYWJvdXQgYW4gdXBncmFkZS5cbiovXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICAgIGlmIChQUkVTRVRfTElDRU5TRV9LRVlTLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBwYXJ0cyA9IChrZXkgfHwgJycpLm1hdGNoKC9eKFxcZCspXFwtZmNzXFwtKFxcZCspJC8pO1xuICAgIGlmIChwYXJ0cyAmJiAocGFydHNbMV0ubGVuZ3RoID09PSAxMCkpIHtcbiAgICAgICAgdmFyIHB1cmNoYXNlRGF0ZSA9IG5ldyBEYXRlKHBhcnNlSW50KHBhcnRzWzJdLCAxMCkgKiAxMDAwKTtcbiAgICAgICAgdmFyIHJlbGVhc2VEYXRlID0gbmV3IERhdGUoY29uZmlnLm1vY2tTY2hlZHVsZXJSZWxlYXNlRGF0ZSB8fCBSRUxFQVNFX0RBVEUpO1xuICAgICAgICBpZiAoaXNWYWxpZERhdGUocmVsZWFzZURhdGUpKSB7IC8vIHRva2VuIHdvbid0IGJlIHJlcGxhY2VkIGluIGRldiBtb2RlXG4gICAgICAgICAgICB2YXIgbWluUHVyY2hhc2VEYXRlID0gYWRkRGF5cyhyZWxlYXNlRGF0ZSwgLVVQR1JBREVfV0lORE9XKTtcbiAgICAgICAgICAgIGlmIChtaW5QdXJjaGFzZURhdGUgPCBwdXJjaGFzZURhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0ltbXVuZVVybCh1cmwpIHtcbiAgICByZXR1cm4gL1xcdytcXDpcXC9cXC9mdWxsY2FsZW5kYXJcXC5pb1xcL3xcXC9leGFtcGxlc1xcL1tcXHctXStcXC5odG1sJC8udGVzdCh1cmwpO1xufVxuXG52YXIgb3B0aW9uQ2hhbmdlSGFuZGxlcnMgPSB7XG4gICAgcmVzb3VyY2VzOiBoYW5kbGVSZXNvdXJjZXNcbn07XG5mdW5jdGlvbiBoYW5kbGVSZXNvdXJjZXMobmV3U291cmNlSW5wdXQsIGNhbGVuZGFyLCBkZWVwRXF1YWwpIHtcbiAgICB2YXIgb2xkU291cmNlSW5wdXQgPSBjYWxlbmRhci5zdGF0ZS5yZXNvdXJjZVNvdXJjZS5fcmF3O1xuICAgIGlmICghZGVlcEVxdWFsKG9sZFNvdXJjZUlucHV0LCBuZXdTb3VyY2VJbnB1dCkpIHtcbiAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1JFU0VUX1JFU09VUkNFX1NPVVJDRScsXG4gICAgICAgICAgICByZXNvdXJjZVNvdXJjZUlucHV0OiBuZXdTb3VyY2VJbnB1dFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbnJlZ2lzdGVyUmVzb3VyY2VTb3VyY2VEZWYoe1xuICAgIGlnbm9yZVJhbmdlOiB0cnVlLFxuICAgIHBhcnNlTWV0YTogZnVuY3Rpb24gKHJhdykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmF3LnJlc291cmNlcykpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcucmVzb3VyY2VzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICBzdWNjZXNzQ2FsbGJhY2soe1xuICAgICAgICAgICAgcmF3UmVzb3VyY2VzOiBhcmcucmVzb3VyY2VTb3VyY2UubWV0YVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxucmVnaXN0ZXJSZXNvdXJjZVNvdXJjZURlZih7XG4gICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiByYXcucmVzb3VyY2VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3LnJlc291cmNlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGZldGNoOiBmdW5jdGlvbiAoYXJnLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gYXJnLmNhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBmdW5jID0gYXJnLnJlc291cmNlU291cmNlLm1ldGE7XG4gICAgICAgIHZhciBwdWJsaWNBcmcgPSB7fTtcbiAgICAgICAgaWYgKGFyZy5yYW5nZSkge1xuICAgICAgICAgICAgcHVibGljQXJnID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi50b0RhdGUoYXJnLnJhbmdlLmVuZCksXG4gICAgICAgICAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKGFyZy5yYW5nZS5zdGFydCksXG4gICAgICAgICAgICAgICAgZW5kU3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZTogZGF0ZUVudi50aW1lWm9uZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBtYWtlIG1vcmUgZHJ5IHdpdGggRXZlbnRTb3VyY2VGdW5jXG4gICAgICAgIC8vIFRPRE86IGFjY2VwdCBhIHJlc3BvbnNlP1xuICAgICAgICB1bnByb21pc2lmeShmdW5jLmJpbmQobnVsbCwgcHVibGljQXJnKSwgZnVuY3Rpb24gKHJhd1Jlc291cmNlcykge1xuICAgICAgICAgICAgc3VjY2Vzcyh7IHJhd1Jlc291cmNlczogcmF3UmVzb3VyY2VzIH0pOyAvLyBuZWVkcyBhbiBvYmplY3QgcmVzcG9uc2VcbiAgICAgICAgfSwgZmFpbHVyZSAvLyBzZW5kIGVycm9yT2JqIGRpcmVjdGx5IHRvIGZhaWx1cmUgY2FsbGJhY2tcbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxucmVnaXN0ZXJSZXNvdXJjZVNvdXJjZURlZih7XG4gICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmF3ID0geyB1cmw6IHJhdyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFyYXcgfHwgdHlwZW9mIHJhdyAhPT0gJ29iamVjdCcgfHwgIXJhdy51cmwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cmw6IHJhdy51cmwsXG4gICAgICAgICAgICBtZXRob2Q6IChyYXcubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgZXh0cmFQYXJhbXM6IHJhdy5leHRyYVBhcmFtc1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBtZXRhID0gYXJnLnJlc291cmNlU291cmNlLm1ldGE7XG4gICAgICAgIHZhciByZXF1ZXN0UGFyYW1zID0gYnVpbGRSZXF1ZXN0UGFyYW1zKG1ldGEsIGFyZy5yYW5nZSwgYXJnLmNhbGVuZGFyKTtcbiAgICAgICAgcmVxdWVzdEpzb24obWV0YS5tZXRob2QsIG1ldGEudXJsLCByZXF1ZXN0UGFyYW1zLCBmdW5jdGlvbiAocmF3UmVzb3VyY2VzLCB4aHIpIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh7IHJhd1Jlc291cmNlczogcmF3UmVzb3VyY2VzLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKG1lc3NhZ2UsIHhocikge1xuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKHsgbWVzc2FnZTogbWVzc2FnZSwgeGhyOiB4aHIgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuLy8gVE9ETzogc29tZWhvdyBjb25zb2xpZGF0ZSB3aXRoIGV2ZW50IGpzb24gZmVlZFxuZnVuY3Rpb24gYnVpbGRSZXF1ZXN0UGFyYW1zKG1ldGEsIHJhbmdlLCBjYWxlbmRhcikge1xuICAgIHZhciBkYXRlRW52ID0gY2FsZW5kYXIuZGF0ZUVudjtcbiAgICB2YXIgc3RhcnRQYXJhbTtcbiAgICB2YXIgZW5kUGFyYW07XG4gICAgdmFyIHRpbWVab25lUGFyYW07XG4gICAgdmFyIGN1c3RvbVJlcXVlc3RQYXJhbXM7XG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgICAvLyBzdGFydFBhcmFtID0gbWV0YS5zdGFydFBhcmFtXG4gICAgICAgIC8vIGlmIChzdGFydFBhcmFtID09IG51bGwpIHtcbiAgICAgICAgc3RhcnRQYXJhbSA9IGNhbGVuZGFyLm9wdCgnc3RhcnRQYXJhbScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGVuZFBhcmFtID0gbWV0YS5lbmRQYXJhbVxuICAgICAgICAvLyBpZiAoZW5kUGFyYW0gPT0gbnVsbCkge1xuICAgICAgICBlbmRQYXJhbSA9IGNhbGVuZGFyLm9wdCgnZW5kUGFyYW0nKTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB0aW1lWm9uZVBhcmFtID0gbWV0YS50aW1lWm9uZVBhcmFtXG4gICAgICAgIC8vIGlmICh0aW1lWm9uZVBhcmFtID09IG51bGwpIHtcbiAgICAgICAgdGltZVpvbmVQYXJhbSA9IGNhbGVuZGFyLm9wdCgndGltZVpvbmVQYXJhbScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHBhcmFtc1tzdGFydFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgcGFyYW1zW2VuZFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLmVuZCk7XG4gICAgICAgIGlmIChkYXRlRW52LnRpbWVab25lICE9PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICBwYXJhbXNbdGltZVpvbmVQYXJhbV0gPSBkYXRlRW52LnRpbWVab25lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHJldHJpZXZlIGFueSBvdXRib3VuZCBHRVQvUE9TVCBkYXRhIGZyb20gdGhlIG9wdGlvbnNcbiAgICBpZiAodHlwZW9mIG1ldGEuZXh0cmFQYXJhbXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gc3VwcGxpZWQgYXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBrZXkvdmFsdWUgb2JqZWN0XG4gICAgICAgIGN1c3RvbVJlcXVlc3RQYXJhbXMgPSBtZXRhLmV4dHJhUGFyYW1zKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBwcm9iYWJseSBzdXBwbGllZCBhcyBhIHN0cmFpZ2h0IGtleS92YWx1ZSBvYmplY3RcbiAgICAgICAgY3VzdG9tUmVxdWVzdFBhcmFtcyA9IG1ldGEuZXh0cmFQYXJhbXMgfHwge307XG4gICAgfVxuICAgIF9fYXNzaWduKHBhcmFtcywgY3VzdG9tUmVxdWVzdFBhcmFtcyk7XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cblxuZnVuY3Rpb24gYnVpbGRSZXNvdXJjZVRleHRGdW5jKHJlc291cmNlVGV4dFNldHRpbmcsIGNhbGVuZGFyKSB7XG4gICAgaWYgKHR5cGVvZiByZXNvdXJjZVRleHRTZXR0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZVRleHRTZXR0aW5nKG5ldyBSZXNvdXJjZUFwaShjYWxlbmRhciwgcmVzb3VyY2UpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZS50aXRsZSB8fCBnZXRQdWJsaWNJZChyZXNvdXJjZS5pZCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG52YXIgUmVzb3VyY2VEYXlIZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlc291cmNlRGF5SGVhZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlc291cmNlRGF5SGVhZGVyKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRhdGVzQWJvdmVSZXNvdXJjZXMgPSBfdGhpcy5vcHQoJ2RhdGVzQWJvdmVSZXNvdXJjZXMnKTtcbiAgICAgICAgX3RoaXMucmVzb3VyY2VUZXh0RnVuYyA9IGJ1aWxkUmVzb3VyY2VUZXh0RnVuYyhfdGhpcy5vcHQoJ3Jlc291cmNlVGV4dCcpLCBfdGhpcy5jYWxlbmRhcik7XG4gICAgICAgIHBhcmVudEVsLmlubmVySFRNTCA9ICcnOyAvLyBiZWNhdXNlIG1pZ2h0IGJlIG5ic3BcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoX3RoaXMuZWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtcm93ICcgKyBfdGhpcy50aGVtZS5nZXRDbGFzcygnaGVhZGVyUm93JykgKyAnXCI+JyArXG4gICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwiJyArIF90aGlzLnRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArICdcIj4nICtcbiAgICAgICAgICAgICc8dGhlYWQ+PC90aGVhZD4nICtcbiAgICAgICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAgICAgJzwvZGl2PicpKTtcbiAgICAgICAgX3RoaXMudGhlYWQgPSBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlc291cmNlRGF5SGVhZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgaHRtbDtcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gY3JlYXRlRm9ybWF0dGVyKHRoaXMub3B0KCdjb2x1bW5IZWFkZXJGb3JtYXQnKSB8fFxuICAgICAgICAgICAgY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0KHByb3BzLmRhdGVzUmVwRGlzdGluY3REYXlzLCBwcm9wcy5kYXRlcy5sZW5ndGgpKTtcbiAgICAgICAgaWYgKHByb3BzLmRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaHRtbCA9IHRoaXMucmVuZGVyUmVzb3VyY2VSb3cocHJvcHMucmVzb3VyY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGVzQWJvdmVSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICBodG1sID0gdGhpcy5yZW5kZXJEYXlBbmRSZXNvdXJjZVJvd3MocHJvcHMuZGF0ZXMsIHByb3BzLnJlc291cmNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBodG1sID0gdGhpcy5yZW5kZXJSZXNvdXJjZUFuZERheVJvd3MocHJvcHMucmVzb3VyY2VzLCBwcm9wcy5kYXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aGVhZC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLnByb2Nlc3NSZXNvdXJjZUVscyhwcm9wcy5yZXNvdXJjZXMpO1xuICAgIH07XG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLnJlbmRlclJlc291cmNlUm93ID0gZnVuY3Rpb24gKHJlc291cmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2VsbEh0bWxzID0gcmVzb3VyY2VzLm1hcChmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJSZXNvdXJjZUNlbGwocmVzb3VyY2UsIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRUcihjZWxsSHRtbHMpO1xuICAgIH07XG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLnJlbmRlckRheUFuZFJlc291cmNlUm93cyA9IGZ1bmN0aW9uIChkYXRlcywgcmVzb3VyY2VzKSB7XG4gICAgICAgIHZhciBkYXRlSHRtbHMgPSBbXTtcbiAgICAgICAgdmFyIHJlc291cmNlSHRtbHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkYXRlc18xID0gZGF0ZXM7IF9pIDwgZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gZGF0ZXNfMVtfaV07XG4gICAgICAgICAgICBkYXRlSHRtbHMucHVzaCh0aGlzLnJlbmRlckRhdGVDZWxsKGRhdGUsIHJlc291cmNlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcmVzb3VyY2VzXzEgPSByZXNvdXJjZXM7IF9hIDwgcmVzb3VyY2VzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VzXzFbX2FdO1xuICAgICAgICAgICAgICAgIHJlc291cmNlSHRtbHMucHVzaCh0aGlzLnJlbmRlclJlc291cmNlQ2VsbChyZXNvdXJjZSwgMSwgZGF0ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkVHIoZGF0ZUh0bWxzKSArXG4gICAgICAgICAgICB0aGlzLmJ1aWxkVHIocmVzb3VyY2VIdG1scyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyUmVzb3VyY2VBbmREYXlSb3dzID0gZnVuY3Rpb24gKHJlc291cmNlcywgZGF0ZXMpIHtcbiAgICAgICAgdmFyIHJlc291cmNlSHRtbHMgPSBbXTtcbiAgICAgICAgdmFyIGRhdGVIdG1scyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJlc291cmNlc18yID0gcmVzb3VyY2VzOyBfaSA8IHJlc291cmNlc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VzXzJbX2ldO1xuICAgICAgICAgICAgcmVzb3VyY2VIdG1scy5wdXNoKHRoaXMucmVuZGVyUmVzb3VyY2VDZWxsKHJlc291cmNlLCBkYXRlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgZGF0ZXNfMiA9IGRhdGVzOyBfYSA8IGRhdGVzXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlc18yW19hXTtcbiAgICAgICAgICAgICAgICBkYXRlSHRtbHMucHVzaCh0aGlzLnJlbmRlckRhdGVDZWxsKGRhdGUsIDEsIHJlc291cmNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRUcihyZXNvdXJjZUh0bWxzKSArXG4gICAgICAgICAgICB0aGlzLmJ1aWxkVHIoZGF0ZUh0bWxzKTtcbiAgICB9O1xuICAgIC8vIENlbGwgUmVuZGVyaW5nIFV0aWxzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGEgY2VsbCB3aXRoIHRoZSByZXNvdXJjZSBuYW1lLiBtaWdodCBiZSBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBkYXlcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyUmVzb3VyY2VDZWxsID0gZnVuY3Rpb24gKHJlc291cmNlLCBjb2xzcGFuLCBkYXRlKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICByZXR1cm4gJzx0aCBjbGFzcz1cImZjLXJlc291cmNlLWNlbGxcIicgK1xuICAgICAgICAgICAgJyBkYXRhLXJlc291cmNlLWlkPVwiJyArIHJlc291cmNlLmlkICsgJ1wiJyArXG4gICAgICAgICAgICAoZGF0ZSA/XG4gICAgICAgICAgICAgICAgJyBkYXRhLWRhdGU9XCInICsgZGF0ZUVudi5mb3JtYXRJc28oZGF0ZSwgeyBvbWl0VGltZTogdHJ1ZSB9KSArICdcIicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAoY29sc3BhbiA+IDEgP1xuICAgICAgICAgICAgICAgICcgY29sc3Bhbj1cIicgKyBjb2xzcGFuICsgJ1wiJyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICBodG1sRXNjYXBlKHRoaXMucmVzb3VyY2VUZXh0RnVuYyhyZXNvdXJjZSkpICtcbiAgICAgICAgICAgICc8L3RoPic7XG4gICAgfTtcbiAgICAvLyBhIGNlbGwgd2l0aCBkYXRlIHRleHQuIG1pZ2h0IGhhdmUgYSByZXNvdXJjZSBhc3NvY2lhdGVkIHdpdGggaXRcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyRGF0ZUNlbGwgPSBmdW5jdGlvbiAoZGF0ZSwgY29sc3BhbiwgcmVzb3VyY2UpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIHJlbmRlckRhdGVDZWxsKGRhdGUsIHByb3BzLmRhdGVQcm9maWxlLCBwcm9wcy5kYXRlc1JlcERpc3RpbmN0RGF5cywgcHJvcHMuZGF0ZXMubGVuZ3RoICogcHJvcHMucmVzb3VyY2VzLmxlbmd0aCwgdGhpcy5kYXRlRm9ybWF0LCB0aGlzLmNvbnRleHQsIGNvbHNwYW4sIHJlc291cmNlID8gJ2RhdGEtcmVzb3VyY2UtaWQ9XCInICsgcmVzb3VyY2UuaWQgKyAnXCInIDogJycpO1xuICAgIH07XG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLmJ1aWxkVHIgPSBmdW5jdGlvbiAoY2VsbEh0bWxzKSB7XG4gICAgICAgIGlmICghY2VsbEh0bWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2VsbEh0bWxzID0gWyc8dGQ+Jm5ic3A7PC90ZD4nXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5yZW5kZXJJbnRyb0h0bWwpIHtcbiAgICAgICAgICAgIGNlbGxIdG1scyA9IFt0aGlzLnByb3BzLnJlbmRlckludHJvSHRtbCgpXS5jb25jYXQoY2VsbEh0bWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1J0bCkge1xuICAgICAgICAgICAgY2VsbEh0bWxzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJzx0cj4nICtcbiAgICAgICAgICAgIGNlbGxIdG1scy5qb2luKCcnKSArXG4gICAgICAgICAgICAnPC90cj4nO1xuICAgIH07XG4gICAgLy8gUG9zdC1yZW5kZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gZ2l2ZW4gYSBjb250YWluZXIgd2l0aCBhbHJlYWR5IHJlbmRlcmVkIHJlc291cmNlIGNlbGxzXG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLnByb2Nlc3NSZXNvdXJjZUVscyA9IGZ1bmN0aW9uIChyZXNvdXJjZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXc7XG4gICAgICAgIGZpbmRFbGVtZW50cyh0aGlzLnRoZWFkLCAnLmZjLXJlc291cmNlLWNlbGwnKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlLCBjb2wpIHtcbiAgICAgICAgICAgIGNvbCA9IGNvbCAlIHJlc291cmNlcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNSdGwpIHtcbiAgICAgICAgICAgICAgICBjb2wgPSByZXNvdXJjZXMubGVuZ3RoIC0gMSAtIGNvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlc1tjb2xdO1xuICAgICAgICAgICAgdmlldy5wdWJsaWNseVRyaWdnZXIoJ3Jlc291cmNlUmVuZGVyJywgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IG5ldyBSZXNvdXJjZUFwaShfdGhpcy5jYWxlbmRhciwgcmVzb3VyY2UpLFxuICAgICAgICAgICAgICAgICAgICBlbDogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogdmlld1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNvdXJjZURheUhlYWRlcjtcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBBYnN0cmFjdFJlc291cmNlRGF5VGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJzdHJhY3RSZXNvdXJjZURheVRhYmxlKGRheVRhYmxlLCByZXNvdXJjZXMpIHtcbiAgICAgICAgdGhpcy5kYXlUYWJsZSA9IGRheVRhYmxlO1xuICAgICAgICB0aGlzLnJlc291cmNlcyA9IHJlc291cmNlcztcbiAgICAgICAgdGhpcy5yZXNvdXJjZUluZGV4ID0gbmV3IFJlc291cmNlSW5kZXgocmVzb3VyY2VzKTtcbiAgICAgICAgdGhpcy5yb3dDbnQgPSBkYXlUYWJsZS5yb3dDbnQ7XG4gICAgICAgIHRoaXMuY29sQ250ID0gZGF5VGFibGUuY29sQ250ICogcmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuYnVpbGRDZWxscygpO1xuICAgIH1cbiAgICBBYnN0cmFjdFJlc291cmNlRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJvd0NudCA9IF9hLnJvd0NudCwgZGF5VGFibGUgPSBfYS5kYXlUYWJsZSwgcmVzb3VyY2VzID0gX2EucmVzb3VyY2VzO1xuICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCByb3dDbnQ7IHJvdysrKSB7XG4gICAgICAgICAgICB2YXIgcm93Q2VsbHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGRhdGVDb2wgPSAwOyBkYXRlQ29sIDwgZGF5VGFibGUuY29sQ250OyBkYXRlQ29sKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByZXNvdXJjZUNvbCA9IDA7IHJlc291cmNlQ29sIDwgcmVzb3VyY2VzLmxlbmd0aDsgcmVzb3VyY2VDb2wrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSByZXNvdXJjZXNbcmVzb3VyY2VDb2xdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbEF0dHJzID0gJ2RhdGEtcmVzb3VyY2UtaWQ9XCInICsgcmVzb3VyY2UuaWQgKyAnXCInO1xuICAgICAgICAgICAgICAgICAgICByb3dDZWxsc1t0aGlzLmNvbXB1dGVDb2woZGF0ZUNvbCwgcmVzb3VyY2VDb2wpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRheVRhYmxlLmNlbGxzW3Jvd11bZGF0ZUNvbF0uZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxBdHRyczogaHRtbEF0dHJzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93cy5wdXNoKHJvd0NlbGxzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuICAgIHJldHVybiBBYnN0cmFjdFJlc291cmNlRGF5VGFibGU7XG59KCkpO1xuLypcbnJlc291cmNlcyBvdmVyIGRhdGVzXG4qL1xudmFyIFJlc291cmNlRGF5VGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlc291cmNlRGF5VGFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VEYXlUYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBSZXNvdXJjZURheVRhYmxlLnByb3RvdHlwZS5jb21wdXRlQ29sID0gZnVuY3Rpb24gKGRhdGVJLCByZXNvdXJjZUkpIHtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlSSAqIHRoaXMuZGF5VGFibGUuY29sQ250ICsgZGF0ZUk7XG4gICAgfTtcbiAgICAvKlxuICAgIGFsbCBkYXRlIHJhbmdlcyBhcmUgaW50YWN0XG4gICAgKi9cbiAgICBSZXNvdXJjZURheVRhYmxlLnByb3RvdHlwZS5jb21wdXRlQ29sUmFuZ2VzID0gZnVuY3Rpb24gKGRhdGVTdGFydEksIGRhdGVFbmRJLCByZXNvdXJjZUkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaXJzdENvbDogdGhpcy5jb21wdXRlQ29sKGRhdGVTdGFydEksIHJlc291cmNlSSksXG4gICAgICAgICAgICAgICAgbGFzdENvbDogdGhpcy5jb21wdXRlQ29sKGRhdGVFbmRJLCByZXNvdXJjZUkpLFxuICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNFbmQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9O1xuICAgIHJldHVybiBSZXNvdXJjZURheVRhYmxlO1xufShBYnN0cmFjdFJlc291cmNlRGF5VGFibGUpKTtcbi8qXG5kYXRlcyBvdmVyIHJlc291cmNlc1xuKi9cbnZhciBEYXlSZXNvdXJjZVRhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlSZXNvdXJjZVRhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERheVJlc291cmNlVGFibGUoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRGF5UmVzb3VyY2VUYWJsZS5wcm90b3R5cGUuY29tcHV0ZUNvbCA9IGZ1bmN0aW9uIChkYXRlSSwgcmVzb3VyY2VJKSB7XG4gICAgICAgIHJldHVybiBkYXRlSSAqIHRoaXMucmVzb3VyY2VzLmxlbmd0aCArIHJlc291cmNlSTtcbiAgICB9O1xuICAgIC8qXG4gICAgZXZlcnkgc2luZ2xlIGRheSBpcyBicm9rZW4gdXBcbiAgICAqL1xuICAgIERheVJlc291cmNlVGFibGUucHJvdG90eXBlLmNvbXB1dGVDb2xSYW5nZXMgPSBmdW5jdGlvbiAoZGF0ZVN0YXJ0SSwgZGF0ZUVuZEksIHJlc291cmNlSSkge1xuICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gZGF0ZVN0YXJ0STsgaSA8PSBkYXRlRW5kSTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29sID0gdGhpcy5jb21wdXRlQ29sKGksIHJlc291cmNlSSk7XG4gICAgICAgICAgICBzZWdzLnB1c2goe1xuICAgICAgICAgICAgICAgIGZpcnN0Q29sOiBjb2wsXG4gICAgICAgICAgICAgICAgbGFzdENvbDogY29sLFxuICAgICAgICAgICAgICAgIGlzU3RhcnQ6IGkgPT09IGRhdGVTdGFydEksXG4gICAgICAgICAgICAgICAgaXNFbmQ6IGkgPT09IGRhdGVFbmRJXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VncztcbiAgICB9O1xuICAgIHJldHVybiBEYXlSZXNvdXJjZVRhYmxlO1xufShBYnN0cmFjdFJlc291cmNlRGF5VGFibGUpKTtcbnZhciBSZXNvdXJjZUluZGV4ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlSW5kZXgocmVzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRpY2VzQnlJZCA9IHt9O1xuICAgICAgICB2YXIgaWRzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSByZXNvdXJjZXNbaV0uaWQ7XG4gICAgICAgICAgICBpZHMucHVzaChpZCk7XG4gICAgICAgICAgICBpbmRpY2VzQnlJZFtpZF0gPSBpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWRzID0gaWRzO1xuICAgICAgICB0aGlzLmluZGljZXNCeUlkID0gaW5kaWNlc0J5SWQ7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gcmVzb3VyY2VzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlSW5kZXg7XG59KCkpO1xuLypcblRPRE86IGp1c3QgdXNlIFJlc291cmNlSGFzaCBzb21laG93PyBjb3VsZCB0aGVuIHVzZSB0aGUgZ2VuZXJpYyBSZXNvdXJjZVNwbGl0dGVyXG4qL1xudmFyIFZSZXNvdXJjZVNwbGl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWUmVzb3VyY2VTcGxpdHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWUmVzb3VyY2VTcGxpdHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBWUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5SW5mbyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgcmVzb3VyY2VEYXlUYWJsZSA9IHByb3BzLnJlc291cmNlRGF5VGFibGU7XG4gICAgICAgIHZhciBoYXNoID0gbWFwSGFzaChyZXNvdXJjZURheVRhYmxlLnJlc291cmNlSW5kZXguaW5kaWNlc0J5SWQsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb3VyY2VEYXlUYWJsZS5yZXNvdXJjZXNbaV07IC8vIGhhcyBgdWlgIEFORCBgYnVzaW5lc3NIb3Vyc2Aga2V5cyFcbiAgICAgICAgfSk7IC8vIDooXG4gICAgICAgIGhhc2hbJyddID0ge307XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH07XG4gICAgVlJlc291cmNlU3BsaXR0ZXIucHJvdG90eXBlLmdldEtleXNGb3JEYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICByZXR1cm4gW2RhdGVTcGFuLnJlc291cmNlSWQgfHwgJyddO1xuICAgIH07XG4gICAgVlJlc291cmNlU3BsaXR0ZXIucHJvdG90eXBlLmdldEtleXNGb3JFdmVudERlZiA9IGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICB2YXIgcmVzb3VyY2VJZHMgPSBldmVudERlZi5yZXNvdXJjZUlkcztcbiAgICAgICAgaWYgKCFyZXNvdXJjZUlkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbJyddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvdXJjZUlkcztcbiAgICB9O1xuICAgIHJldHVybiBWUmVzb3VyY2VTcGxpdHRlcjtcbn0oU3BsaXR0ZXIpKTtcbi8vIGpvaW5lclxudmFyIE5PX1NFR1MgPSBbXTsgLy8gZm9yIG1lbW9pemluZ1xudmFyIFZSZXNvdXJjZUpvaW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWUmVzb3VyY2VKb2luZXIoKSB7XG4gICAgICAgIHRoaXMuam9pbkRhdGVTZWxlY3Rpb24gPSBtZW1vaXplKHRoaXMuam9pblNlZ3MpO1xuICAgICAgICB0aGlzLmpvaW5CdXNpbmVzc0hvdXJzID0gbWVtb2l6ZSh0aGlzLmpvaW5TZWdzKTtcbiAgICAgICAgdGhpcy5qb2luRmdFdmVudHMgPSBtZW1vaXplKHRoaXMuam9pblNlZ3MpO1xuICAgICAgICB0aGlzLmpvaW5CZ0V2ZW50cyA9IG1lbW9pemUodGhpcy5qb2luU2Vncyk7XG4gICAgICAgIHRoaXMuam9pbkV2ZW50RHJhZ3MgPSBtZW1vaXplKHRoaXMuam9pbkludGVyYWN0aW9ucyk7XG4gICAgICAgIHRoaXMuam9pbkV2ZW50UmVzaXplcyA9IG1lbW9pemUodGhpcy5qb2luSW50ZXJhY3Rpb25zKTtcbiAgICB9XG4gICAgLypcbiAgICBwcm9wU2V0cyBhbHNvIGhhcyBhICcnIGtleSBmb3IgdGhpbmdzIHdpdGggbm8gcmVzb3VyY2VcbiAgICAqL1xuICAgIFZSZXNvdXJjZUpvaW5lci5wcm90b3R5cGUuam9pblByb3BzID0gZnVuY3Rpb24gKHByb3BTZXRzLCByZXNvdXJjZURheVRhYmxlKSB7XG4gICAgICAgIHZhciBkYXRlU2VsZWN0aW9uU2V0cyA9IFtdO1xuICAgICAgICB2YXIgYnVzaW5lc3NIb3Vyc1NldHMgPSBbXTtcbiAgICAgICAgdmFyIGZnRXZlbnRTZXRzID0gW107XG4gICAgICAgIHZhciBiZ0V2ZW50U2V0cyA9IFtdO1xuICAgICAgICB2YXIgZXZlbnREcmFncyA9IFtdO1xuICAgICAgICB2YXIgZXZlbnRSZXNpemVzID0gW107XG4gICAgICAgIHZhciBldmVudFNlbGVjdGlvbiA9ICcnO1xuICAgICAgICB2YXIga2V5cyA9IHJlc291cmNlRGF5VGFibGUucmVzb3VyY2VJbmRleC5pZHMuY29uY2F0KFsnJ10pOyAvLyBhZGQgaW4gdGhlIGFsbC1yZXNvdXJjZSBrZXlcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzEgPSBrZXlzOyBfaSA8IGtleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gcHJvcFNldHNba2V5XTtcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25TZXRzLnB1c2gocHJvcHMuZGF0ZVNlbGVjdGlvblNlZ3MpO1xuICAgICAgICAgICAgYnVzaW5lc3NIb3Vyc1NldHMucHVzaChrZXkgPyBwcm9wcy5idXNpbmVzc0hvdXJTZWdzIDogTk9fU0VHUyk7IC8vIGRvbid0IGluY2x1ZGUgcmVkdW5kYW50IGFsbC1yZXNvdXJjZSBidXNpbmVzc2hvdXJzXG4gICAgICAgICAgICBmZ0V2ZW50U2V0cy5wdXNoKGtleSA/IHByb3BzLmZnRXZlbnRTZWdzIDogTk9fU0VHUyk7IC8vIGRvbid0IGluY2x1ZGUgZmcgYWxsLXJlc291cmNlIHNlZ3NcbiAgICAgICAgICAgIGJnRXZlbnRTZXRzLnB1c2gocHJvcHMuYmdFdmVudFNlZ3MpO1xuICAgICAgICAgICAgZXZlbnREcmFncy5wdXNoKHByb3BzLmV2ZW50RHJhZyk7XG4gICAgICAgICAgICBldmVudFJlc2l6ZXMucHVzaChwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbiA9IGV2ZW50U2VsZWN0aW9uIHx8IHByb3BzLmV2ZW50U2VsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlU2VsZWN0aW9uU2VnczogdGhpcy5qb2luRGF0ZVNlbGVjdGlvbi5hcHBseSh0aGlzLCBbcmVzb3VyY2VEYXlUYWJsZV0uY29uY2F0KGRhdGVTZWxlY3Rpb25TZXRzKSksXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJTZWdzOiB0aGlzLmpvaW5CdXNpbmVzc0hvdXJzLmFwcGx5KHRoaXMsIFtyZXNvdXJjZURheVRhYmxlXS5jb25jYXQoYnVzaW5lc3NIb3Vyc1NldHMpKSxcbiAgICAgICAgICAgIGZnRXZlbnRTZWdzOiB0aGlzLmpvaW5GZ0V2ZW50cy5hcHBseSh0aGlzLCBbcmVzb3VyY2VEYXlUYWJsZV0uY29uY2F0KGZnRXZlbnRTZXRzKSksXG4gICAgICAgICAgICBiZ0V2ZW50U2VnczogdGhpcy5qb2luQmdFdmVudHMuYXBwbHkodGhpcywgW3Jlc291cmNlRGF5VGFibGVdLmNvbmNhdChiZ0V2ZW50U2V0cykpLFxuICAgICAgICAgICAgZXZlbnREcmFnOiB0aGlzLmpvaW5FdmVudERyYWdzLmFwcGx5KHRoaXMsIFtyZXNvdXJjZURheVRhYmxlXS5jb25jYXQoZXZlbnREcmFncykpLFxuICAgICAgICAgICAgZXZlbnRSZXNpemU6IHRoaXMuam9pbkV2ZW50UmVzaXplcy5hcHBseSh0aGlzLCBbcmVzb3VyY2VEYXlUYWJsZV0uY29uY2F0KGV2ZW50UmVzaXplcykpLFxuICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IGV2ZW50U2VsZWN0aW9uXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBWUmVzb3VyY2VKb2luZXIucHJvdG90eXBlLmpvaW5TZWdzID0gZnVuY3Rpb24gKHJlc291cmNlRGF5VGFibGUpIHtcbiAgICAgICAgdmFyIHNlZ0dyb3VwcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgc2VnR3JvdXBzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXNvdXJjZUNudCA9IHJlc291cmNlRGF5VGFibGUucmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkU2VncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc291cmNlQ250OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBzZWdHcm91cHNbaV07IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IF9iW19hXTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFNlZ3MucHVzaC5hcHBseSh0cmFuc2Zvcm1lZFNlZ3MsIHRoaXMudHJhbnNmb3JtU2VnKHNlZywgcmVzb3VyY2VEYXlUYWJsZSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBfZCA9IHNlZ0dyb3Vwc1tyZXNvdXJjZUNudF07IF9jIDwgX2QubGVuZ3RoOyBfYysrKSB7IC8vIG9uZSBiZXlvbmQuIHRoZSBhbGwtcmVzb3VyY2VcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2RbX2NdO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkU2Vncy5wdXNoLmFwcGx5KC8vIG9uZSBiZXlvbmQuIHRoZSBhbGwtcmVzb3VyY2VcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFNlZ3MsIHRoaXMudHJhbnNmb3JtU2VnKHNlZywgcmVzb3VyY2VEYXlUYWJsZSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFNlZ3M7XG4gICAgfTtcbiAgICAvKlxuICAgIGZvciBleHBhbmRpbmcgbm9uLXJlc291cmNlIHNlZ3MgdG8gYWxsIHJlc291cmNlcy5cbiAgICBvbmx5IGZvciBwdWJsaWMgdXNlLlxuICAgIG5vIG1lbW9pemluZy5cbiAgICAqL1xuICAgIFZSZXNvdXJjZUpvaW5lci5wcm90b3R5cGUuZXhwYW5kU2VncyA9IGZ1bmN0aW9uIChyZXNvdXJjZURheVRhYmxlLCBzZWdzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZUNudCA9IHJlc291cmNlRGF5VGFibGUucmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkU2VncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc291cmNlQ250OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18xID0gc2VnczsgX2kgPCBzZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMVtfaV07XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRTZWdzLnB1c2guYXBwbHkodHJhbnNmb3JtZWRTZWdzLCB0aGlzLnRyYW5zZm9ybVNlZyhzZWcsIHJlc291cmNlRGF5VGFibGUsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRTZWdzO1xuICAgIH07XG4gICAgVlJlc291cmNlSm9pbmVyLnByb3RvdHlwZS5qb2luSW50ZXJhY3Rpb25zID0gZnVuY3Rpb24gKHJlc291cmNlRGF5VGFibGUpIHtcbiAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaW50ZXJhY3Rpb25zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXNvdXJjZUNudCA9IHJlc291cmNlRGF5VGFibGUucmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIGFmZmVjdGVkSW5zdGFuY2VzID0ge307XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZFNlZ3MgPSBbXTtcbiAgICAgICAgdmFyIGlzRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNvdXJjZVNlZyA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2VDbnQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gaW50ZXJhY3Rpb25zW2ldO1xuICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IGludGVyYWN0aW9uLnNlZ3M7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYltfYV07XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkU2Vncy5wdXNoLmFwcGx5KHRyYW5zZm9ybWVkU2VncywgdGhpcy50cmFuc2Zvcm1TZWcoc2VnLCByZXNvdXJjZURheVRhYmxlLCBpKSAvLyBUT0RPOiB0ZW1wbGF0ZWlmeSBJbnRlcmFjdGlvbjo6c2Vnc1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfX2Fzc2lnbihhZmZlY3RlZEluc3RhbmNlcywgaW50ZXJhY3Rpb24uYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgICAgIGlzRXZlbnQgPSBpc0V2ZW50IHx8IGludGVyYWN0aW9uLmlzRXZlbnQ7XG4gICAgICAgICAgICAgICAgc291cmNlU2VnID0gc291cmNlU2VnIHx8IGludGVyYWN0aW9uLnNvdXJjZVNlZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbnNbcmVzb3VyY2VDbnRdKSB7IC8vIG9uZSBiZXlvbmQuIHRoZSBhbGwtcmVzb3VyY2VcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gaW50ZXJhY3Rpb25zW3Jlc291cmNlQ250XS5zZWdzOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2RbX2NdO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFNlZ3MucHVzaC5hcHBseSh0cmFuc2Zvcm1lZFNlZ3MsIHRoaXMudHJhbnNmb3JtU2VnKHNlZywgcmVzb3VyY2VEYXlUYWJsZSwgaSkgLy8gVE9ETzogdGVtcGxhdGVpZnkgSW50ZXJhY3Rpb246OnNlZ3NcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzOiBhZmZlY3RlZEluc3RhbmNlcyxcbiAgICAgICAgICAgIHNlZ3M6IHRyYW5zZm9ybWVkU2VncyxcbiAgICAgICAgICAgIGlzRXZlbnQ6IGlzRXZlbnQsXG4gICAgICAgICAgICBzb3VyY2VTZWc6IHNvdXJjZVNlZ1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFZSZXNvdXJjZUpvaW5lcjtcbn0oKSk7XG5cbi8qXG5kb2Vzbid0IGFjY2VwdCBncm91cGluZ1xuKi9cbmZ1bmN0aW9uIGZsYXR0ZW5SZXNvdXJjZXMocmVzb3VyY2VTdG9yZSwgb3JkZXJTcGVjcykge1xuICAgIHJldHVybiBidWlsZFJvd05vZGVzKHJlc291cmNlU3RvcmUsIFtdLCBvcmRlclNwZWNzLCBmYWxzZSwge30sIHRydWUpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUucmVzb3VyY2U7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBidWlsZFJvd05vZGVzKHJlc291cmNlU3RvcmUsIGdyb3VwU3BlY3MsIG9yZGVyU3BlY3MsIGlzVkdyb3VwaW5nLCBleHBhbnNpb25zLCBleHBhbnNpb25EZWZhdWx0KSB7XG4gICAgdmFyIGNvbXBsZXhOb2RlcyA9IGJ1aWxkSGllcmFyY2h5KHJlc291cmNlU3RvcmUsIGlzVkdyb3VwaW5nID8gLTEgOiAxLCBncm91cFNwZWNzLCBvcmRlclNwZWNzKTtcbiAgICB2YXIgZmxhdE5vZGVzID0gW107XG4gICAgZmxhdHRlbk5vZGVzKGNvbXBsZXhOb2RlcywgZmxhdE5vZGVzLCBpc1ZHcm91cGluZywgW10sIDAsIGV4cGFuc2lvbnMsIGV4cGFuc2lvbkRlZmF1bHQpO1xuICAgIHJldHVybiBmbGF0Tm9kZXM7XG59XG5mdW5jdGlvbiBmbGF0dGVuTm9kZXMoY29tcGxleE5vZGVzLCByZXMsIGlzVkdyb3VwaW5nLCByb3dTcGFucywgZGVwdGgsIGV4cGFuc2lvbnMsIGV4cGFuc2lvbkRlZmF1bHQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBsZXhOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29tcGxleE5vZGUgPSBjb21wbGV4Tm9kZXNbaV07XG4gICAgICAgIHZhciBncm91cCA9IGNvbXBsZXhOb2RlLmdyb3VwO1xuICAgICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgICAgIGlmIChpc1ZHcm91cGluZykge1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdFJvd0luZGV4ID0gcmVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgcm93U3BhbkluZGV4ID0gcm93U3BhbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZsYXR0ZW5Ob2Rlcyhjb21wbGV4Tm9kZS5jaGlsZHJlbiwgcmVzLCBpc1ZHcm91cGluZywgcm93U3BhbnMuY29uY2F0KDApLCBkZXB0aCwgZXhwYW5zaW9ucywgZXhwYW5zaW9uRGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Um93SW5kZXggPCByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdFJvdyA9IHJlc1tmaXJzdFJvd0luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Um93U3BhbnMgPSBmaXJzdFJvdy5yb3dTcGFucyA9IGZpcnN0Um93LnJvd1NwYW5zLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Um93U3BhbnNbcm93U3BhbkluZGV4XSA9IHJlcy5sZW5ndGggLSBmaXJzdFJvd0luZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IGdyb3VwLnNwZWMuZmllbGQgKyAnOicgKyBncm91cC52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNFeHBhbmRlZCA9IGV4cGFuc2lvbnNbaWRdICE9IG51bGwgPyBleHBhbnNpb25zW2lkXSA6IGV4cGFuc2lvbkRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goeyBpZDogaWQsIGdyb3VwOiBncm91cCwgaXNFeHBhbmRlZDogaXNFeHBhbmRlZCB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBmbGF0dGVuTm9kZXMoY29tcGxleE5vZGUuY2hpbGRyZW4sIHJlcywgaXNWR3JvdXBpbmcsIHJvd1NwYW5zLCBkZXB0aCArIDEsIGV4cGFuc2lvbnMsIGV4cGFuc2lvbkRlZmF1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb21wbGV4Tm9kZS5yZXNvdXJjZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gY29tcGxleE5vZGUucmVzb3VyY2UuaWQ7XG4gICAgICAgICAgICB2YXIgaXNFeHBhbmRlZCA9IGV4cGFuc2lvbnNbaWRdICE9IG51bGwgPyBleHBhbnNpb25zW2lkXSA6IGV4cGFuc2lvbkRlZmF1bHQ7XG4gICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHJvd1NwYW5zOiByb3dTcGFucyxcbiAgICAgICAgICAgICAgICBkZXB0aDogZGVwdGgsXG4gICAgICAgICAgICAgICAgaXNFeHBhbmRlZDogaXNFeHBhbmRlZCxcbiAgICAgICAgICAgICAgICBoYXNDaGlsZHJlbjogQm9vbGVhbihjb21wbGV4Tm9kZS5jaGlsZHJlbi5sZW5ndGgpLFxuICAgICAgICAgICAgICAgIHJlc291cmNlOiBjb21wbGV4Tm9kZS5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICByZXNvdXJjZUZpZWxkczogY29tcGxleE5vZGUucmVzb3VyY2VGaWVsZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzRXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICBmbGF0dGVuTm9kZXMoY29tcGxleE5vZGUuY2hpbGRyZW4sIHJlcywgaXNWR3JvdXBpbmcsIHJvd1NwYW5zLCBkZXB0aCArIDEsIGV4cGFuc2lvbnMsIGV4cGFuc2lvbkRlZmF1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbGRIaWVyYXJjaHkocmVzb3VyY2VTdG9yZSwgbWF4RGVwdGgsIGdyb3VwU3BlY3MsIG9yZGVyU3BlY3MpIHtcbiAgICB2YXIgcmVzb3VyY2VOb2RlcyA9IGJ1aWxkUmVzb3VyY2VOb2RlcyhyZXNvdXJjZVN0b3JlLCBvcmRlclNwZWNzKTtcbiAgICB2YXIgYnVpbHROb2RlcyA9IFtdO1xuICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gcmVzb3VyY2VOb2Rlcykge1xuICAgICAgICB2YXIgcmVzb3VyY2VOb2RlID0gcmVzb3VyY2VOb2Rlc1tyZXNvdXJjZUlkXTtcbiAgICAgICAgaWYgKCFyZXNvdXJjZU5vZGUucmVzb3VyY2UucGFyZW50SWQpIHtcbiAgICAgICAgICAgIGluc2VydFJlc291cmNlTm9kZShyZXNvdXJjZU5vZGUsIGJ1aWx0Tm9kZXMsIGdyb3VwU3BlY3MsIDAsIG1heERlcHRoLCBvcmRlclNwZWNzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVpbHROb2Rlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkUmVzb3VyY2VOb2RlcyhyZXNvdXJjZVN0b3JlLCBvcmRlclNwZWNzKSB7XG4gICAgdmFyIG5vZGVIYXNoID0ge307XG4gICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF07XG4gICAgICAgIG5vZGVIYXNoW3Jlc291cmNlSWRdID0ge1xuICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLFxuICAgICAgICAgICAgcmVzb3VyY2VGaWVsZHM6IGJ1aWxkUmVzb3VyY2VGaWVsZHMocmVzb3VyY2UpLFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gcmVzb3VyY2VTdG9yZSkge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSByZXNvdXJjZVN0b3JlW3Jlc291cmNlSWRdO1xuICAgICAgICBpZiAocmVzb3VyY2UucGFyZW50SWQpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZUhhc2hbcmVzb3VyY2UucGFyZW50SWRdO1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRSZXNvdXJjZU5vZGVJblNpYmxpbmdzKG5vZGVIYXNoW3Jlc291cmNlSWRdLCBwYXJlbnROb2RlLmNoaWxkcmVuLCBvcmRlclNwZWNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZUhhc2g7XG59XG5mdW5jdGlvbiBpbnNlcnRSZXNvdXJjZU5vZGUocmVzb3VyY2VOb2RlLCBub2RlcywgZ3JvdXBTcGVjcywgZGVwdGgsIG1heERlcHRoLCBvcmRlclNwZWNzKSB7XG4gICAgaWYgKGdyb3VwU3BlY3MubGVuZ3RoICYmIChtYXhEZXB0aCA9PT0gLTEgfHwgZGVwdGggPD0gbWF4RGVwdGgpKSB7XG4gICAgICAgIHZhciBncm91cE5vZGUgPSBlbnN1cmVHcm91cE5vZGVzKHJlc291cmNlTm9kZSwgbm9kZXMsIGdyb3VwU3BlY3NbMF0pO1xuICAgICAgICBpbnNlcnRSZXNvdXJjZU5vZGUocmVzb3VyY2VOb2RlLCBncm91cE5vZGUuY2hpbGRyZW4sIGdyb3VwU3BlY3Muc2xpY2UoMSksIGRlcHRoICsgMSwgbWF4RGVwdGgsIG9yZGVyU3BlY3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5zZXJ0UmVzb3VyY2VOb2RlSW5TaWJsaW5ncyhyZXNvdXJjZU5vZGUsIG5vZGVzLCBvcmRlclNwZWNzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbnN1cmVHcm91cE5vZGVzKHJlc291cmNlTm9kZSwgbm9kZXMsIGdyb3VwU3BlYykge1xuICAgIHZhciBncm91cFZhbHVlID0gcmVzb3VyY2VOb2RlLnJlc291cmNlRmllbGRzW2dyb3VwU3BlYy5maWVsZF07XG4gICAgdmFyIGdyb3VwTm9kZTtcbiAgICB2YXIgbmV3R3JvdXBJbmRleDtcbiAgICAvLyBmaW5kIGFuIGV4aXN0aW5nIGdyb3VwIHRoYXQgbWF0Y2hlcywgb3IgZGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBmb3IgYSBuZXcgZ3JvdXBcbiAgICBpZiAoZ3JvdXBTcGVjLm9yZGVyKSB7XG4gICAgICAgIGZvciAobmV3R3JvdXBJbmRleCA9IDA7IG5ld0dyb3VwSW5kZXggPCBub2Rlcy5sZW5ndGg7IG5ld0dyb3VwSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tuZXdHcm91cEluZGV4XTtcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNtcCA9IGZsZXhpYmxlQ29tcGFyZShncm91cFZhbHVlLCBub2RlLmdyb3VwLnZhbHVlKSAqIGdyb3VwU3BlYy5vcmRlcjtcbiAgICAgICAgICAgICAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjbXAgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHsgLy8gdGhlIGdyb3VwcyBhcmUgdW5vcmRlcmVkXG4gICAgICAgIGZvciAobmV3R3JvdXBJbmRleCA9IDA7IG5ld0dyb3VwSW5kZXggPCBub2Rlcy5sZW5ndGg7IG5ld0dyb3VwSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tuZXdHcm91cEluZGV4XTtcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwICYmIGdyb3VwVmFsdWUgPT09IG5vZGUuZ3JvdXAudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBncm91cE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZ3JvdXBOb2RlKSB7XG4gICAgICAgIGdyb3VwTm9kZSA9IHtcbiAgICAgICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGdyb3VwVmFsdWUsXG4gICAgICAgICAgICAgICAgc3BlYzogZ3JvdXBTcGVjXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH07XG4gICAgICAgIG5vZGVzLnNwbGljZShuZXdHcm91cEluZGV4LCAwLCBncm91cE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBOb2RlO1xufVxuZnVuY3Rpb24gaW5zZXJ0UmVzb3VyY2VOb2RlSW5TaWJsaW5ncyhyZXNvdXJjZU5vZGUsIHNpYmxpbmdzLCBvcmRlclNwZWNzKSB7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjbXAgPSBjb21wYXJlQnlGaWVsZFNwZWNzKHNpYmxpbmdzW2ldLnJlc291cmNlRmllbGRzLCByZXNvdXJjZU5vZGUucmVzb3VyY2VGaWVsZHMsIG9yZGVyU3BlY3MpO1xuICAgICAgICBpZiAoY21wID4gMCkgeyAvLyB3ZW50IDEgcGFzdC4gaW5zZXJ0IGF0IGlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNpYmxpbmdzLnNwbGljZShpLCAwLCByZXNvdXJjZU5vZGUpO1xufVxuZnVuY3Rpb24gYnVpbGRSZXNvdXJjZUZpZWxkcyhyZXNvdXJjZSkge1xuICAgIHZhciBvYmogPSBfX2Fzc2lnbih7fSwgcmVzb3VyY2UuZXh0ZW5kZWRQcm9wcywgcmVzb3VyY2UudWksIHJlc291cmNlKTtcbiAgICBkZWxldGUgb2JqLnVpO1xuICAgIGRlbGV0ZSBvYmouZXh0ZW5kZWRQcm9wcztcbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gaXNHcm91cHNFcXVhbChncm91cDAsIGdyb3VwMSkge1xuICAgIHJldHVybiBncm91cDAuc3BlYyA9PT0gZ3JvdXAxLnNwZWMgJiYgZ3JvdXAwLnZhbHVlID09PSBncm91cDEudmFsdWU7XG59XG5cbnZhciBtYWluID0gY3JlYXRlUGx1Z2luKHtcbiAgICByZWR1Y2VyczogW3Jlc291cmNlc1JlZHVjZXJzXSxcbiAgICBldmVudERlZlBhcnNlcnM6IFtwYXJzZUV2ZW50RGVmXSxcbiAgICBpc0RyYWdnYWJsZVRyYW5zZm9ybWVyczogW3RyYW5zZm9ybUlzRHJhZ2dhYmxlXSxcbiAgICBldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VyczogW21hc3NhZ2VFdmVudERyYWdNdXRhdGlvbl0sXG4gICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBbYXBwbHlFdmVudERlZk11dGF0aW9uXSxcbiAgICBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzOiBbdHJhbnNmb3JtRGF0ZVNlbGVjdGlvbkpvaW5dLFxuICAgIGRhdGVQb2ludFRyYW5zZm9ybXM6IFt0cmFuc2Zvcm1EYXRlUG9pbnRdLFxuICAgIGRhdGVTcGFuVHJhbnNmb3JtczogW3RyYW5zZm9ybURhdGVTcGFuXSxcbiAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IFtSZXNvdXJjZURhdGFBZGRlciwgUmVzb3VyY2VFdmVudENvbmZpZ0FkZGVyXSxcbiAgICBpc1Byb3BzVmFsaWQ6IGlzUHJvcHNWYWxpZFdpdGhSZXNvdXJjZXMsXG4gICAgZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zOiBbdHJhbnNmb3JtRXh0ZXJuYWxEZWZdLFxuICAgIGV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXM6IFt0cmFuc2Zvcm1FdmVudFJlc2l6ZUpvaW5dLFxuICAgIHZpZXdDb250YWluZXJNb2RpZmllcnM6IFtpbmplY3RMaWNlbnNlV2FybmluZ10sXG4gICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBbdHJhbnNmb3JtRXZlbnREcm9wXSxcbiAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogb3B0aW9uQ2hhbmdlSGFuZGxlcnNcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtYWluO1xuZXhwb3J0IHsgQWJzdHJhY3RSZXNvdXJjZURheVRhYmxlLCBEYXlSZXNvdXJjZVRhYmxlLCBSZXNvdXJjZUFwaSwgUmVzb3VyY2VEYXlIZWFkZXIsIFJlc291cmNlRGF5VGFibGUsIFJlc291cmNlU3BsaXR0ZXIsIFZSZXNvdXJjZUpvaW5lciwgVlJlc291cmNlU3BsaXR0ZXIsIGJ1aWxkUmVzb3VyY2VGaWVsZHMsIGJ1aWxkUmVzb3VyY2VUZXh0RnVuYywgYnVpbGRSb3dOb2RlcywgZmxhdHRlblJlc291cmNlcywgaXNHcm91cHNFcXVhbCB9O1xuIiwiLyohXG5GdWxsQ2FsZW5kYXIgUmVzb3VyY2UgVGltZWxpbmUgUGx1Z2luIHY0LjMuMFxuRG9jcyAmIExpY2Vuc2U6IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL3NjaGVkdWxlclxuKGMpIDIwMTkgQWRhbSBTaGF3XG4qL1xuXG5pbXBvcnQgeyByZW1vdmVFbGVtZW50LCBDb21wb25lbnQsIG1lbW9pemVSZW5kZXJpbmcsIGNyZWF0ZUVsZW1lbnQsIGh0bWxUb0VsZW1lbnQsIGh0bWxFc2NhcGUsIGlzQXJyYXlzRXF1YWwsIEVtaXR0ZXJNaXhpbiwgbWVtb2l6ZSwgcGFyc2VGaWVsZFNwZWNzLCBQb3NpdGlvbkNhY2hlLCBhcHBseVN0eWxlUHJvcCwgVmlldywgY3JlYXRlUGx1Z2luIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcbmltcG9ydCBUaW1lbGluZVBsdWdpbiwgeyBUaW1lbGluZUxhbmUsIEhlYWRlckJvZHlMYXlvdXQsIFRpbWVBeGlzLCBTY3JvbGxKb2luZXIsIFN0aWNreVNjcm9sbGVyIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci90aW1lbGluZSc7XG5pbXBvcnQgUmVzb3VyY2VDb21tb25QbHVnaW4sIHsgaXNHcm91cHNFcXVhbCwgYnVpbGRSZXNvdXJjZUZpZWxkcywgYnVpbGRSZXNvdXJjZVRleHRGdW5jLCBSZXNvdXJjZUFwaSwgUmVzb3VyY2VTcGxpdHRlciwgYnVpbGRSb3dOb2RlcyB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvcmVzb3VyY2UtY29tbW9uJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcblxudmFyIFJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUm93LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJvdyhjb250ZXh0LCBzcHJlYWRzaGVldFBhcmVudCwgc3ByZWFkc2hlZXROZXh0U2libGluZywgdGltZUF4aXNQYXJlbnQsIHRpbWVBeGlzTmV4dFNpYmxpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgc3ByZWFkc2hlZXRQYXJlbnQuaW5zZXJ0QmVmb3JlKF90aGlzLnNwcmVhZHNoZWV0VHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpLCBzcHJlYWRzaGVldE5leHRTaWJsaW5nKTtcbiAgICAgICAgdGltZUF4aXNQYXJlbnQuaW5zZXJ0QmVmb3JlKF90aGlzLnRpbWVBeGlzVHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpLCB0aW1lQXhpc05leHRTaWJsaW5nKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSb3cucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5zcHJlYWRzaGVldFRyKTtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLnRpbWVBeGlzVHIpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFJvdy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSkge1xuICAgICAgICB0aGlzLmlzU2l6ZURpcnR5ID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gUm93O1xufShDb21wb25lbnQpKTtcblxuZnVuY3Rpb24gdXBkYXRlRXhwYW5kZXJJY29uKGVsLCBpc0V4cGFuZGVkKSB7XG4gICAgdmFyIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDtcbiAgICBpZiAoaXNFeHBhbmRlZCkge1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdmYy1pY29uLXBsdXMtc3F1YXJlJyk7XG4gICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZjLWljb24tbWludXMtc3F1YXJlJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdmYy1pY29uLW1pbnVzLXNxdWFyZScpO1xuICAgICAgICBjbGFzc0xpc3QuYWRkKCdmYy1pY29uLXBsdXMtc3F1YXJlJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJFeHBhbmRlckljb24oZWwpIHtcbiAgICB2YXIgY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0O1xuICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2ZjLWljb24tbWludXMtc3F1YXJlJyk7XG4gICAgY2xhc3NMaXN0LnJlbW92ZSgnZmMtaWNvbi1wbHVzLXNxdWFyZScpO1xufVxuZnVuY3Rpb24gdXBkYXRlVHJSZXNvdXJjZUlkKHRyLCByZXNvdXJjZUlkKSB7XG4gICAgdHIuc2V0QXR0cmlidXRlKCdkYXRhLXJlc291cmNlLWlkJywgcmVzb3VyY2VJZCk7XG59XG5cbnZhciBHcm91cFJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR3JvdXBSb3csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gR3JvdXBSb3coKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQ2VsbHMgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckNlbGxzLCBfdGhpcy51bnJlbmRlckNlbGxzKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUV4cGFuZGVySWNvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlRXhwYW5kZXJJY29uLCBudWxsLCBbX3RoaXMuX3JlbmRlckNlbGxzXSk7XG4gICAgICAgIF90aGlzLm9uRXhwYW5kZXJDbGljayA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gX3RoaXMucHJvcHM7XG4gICAgICAgICAgICBfdGhpcy5jYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9SRVNPVVJDRV9FTlRJVFlfRVhQQU5ERUQnLFxuICAgICAgICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiAhcHJvcHMuaXNFeHBhbmRlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgR3JvdXBSb3cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLl9yZW5kZXJDZWxscyhwcm9wcy5ncm91cCwgcHJvcHMuc3ByZWFkc2hlZXRDb2xDbnQpO1xuICAgICAgICB0aGlzLl91cGRhdGVFeHBhbmRlckljb24ocHJvcHMuaXNFeHBhbmRlZCk7XG4gICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSB0cnVlO1xuICAgIH07XG4gICAgR3JvdXBSb3cucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9yZW5kZXJDZWxscy51bnJlbmRlcigpOyAvLyBzaG91bGQgdW5yZW5kZXIgZXZlcnl0aGluZyBlbHNlXG4gICAgfTtcbiAgICBHcm91cFJvdy5wcm90b3R5cGUucmVuZGVyQ2VsbHMgPSBmdW5jdGlvbiAoZ3JvdXAsIHNwcmVhZHNoZWV0Q29sQ250KSB7XG4gICAgICAgIHZhciBzcHJlYWRzaGVldENvbnRlbnRFbCA9IHRoaXMucmVuZGVyU3ByZWFkc2hlZXRDb250ZW50KGdyb3VwKTtcbiAgICAgICAgdGhpcy5zcHJlYWRzaGVldFRyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3RkJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtZGl2aWRlcicsXG4gICAgICAgICAgICBjb2xTcGFuOiBzcHJlYWRzaGVldENvbENudCAvLyBzcGFuIGFjcm9zcyBhbGwgY29sdW1uc1xuICAgICAgICB9LCB0aGlzLnNwcmVhZHNoZWV0SGVpZ2h0RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBudWxsLCBzcHJlYWRzaGVldENvbnRlbnRFbCkpIC8vIG5lZWRlZCBieSBzZXRUcklubmVySGVpZ2h0XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZXhwYW5kZXJJY29uRWwgPSBzcHJlYWRzaGVldENvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKCcuZmMtaWNvbicpO1xuICAgICAgICB0aGlzLmV4cGFuZGVySWNvbkVsLnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uRXhwYW5kZXJDbGljayk7XG4gICAgICAgIC8vIGluc2VydCBhIHNpbmdsZSBjZWxsLCB3aXRoIGEgc2luZ2xlIGVtcHR5IDxkaXY+LlxuICAgICAgICAvLyB0aGVyZSB3aWxsIGJlIG5vIGNvbnRlbnRcbiAgICAgICAgdGhpcy50aW1lQXhpc1RyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoJ3RkJywgeyBjbGFzc05hbWU6ICdmYy1kaXZpZGVyJyB9LCB0aGlzLnRpbWVBeGlzSGVpZ2h0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkpO1xuICAgIH07XG4gICAgR3JvdXBSb3cucHJvdG90eXBlLnVucmVuZGVyQ2VsbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3ByZWFkc2hlZXRUci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdGhpcy50aW1lQXhpc1RyLmlubmVySFRNTCA9ICcnO1xuICAgIH07XG4gICAgLypcbiAgICBSZW5kZXJzIHRoZSBjb250ZW50IHdyYXBwZXIgZWxlbWVudCB0aGF0IHdpbGwgYmUgaW5zZXJ0ZWQgaW50byB0aGlzIHJvdydzIFREIGNlbGwuXG4gICAgKi9cbiAgICBHcm91cFJvdy5wcm90b3R5cGUucmVuZGVyU3ByZWFkc2hlZXRDb250ZW50ID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5yZW5kZXJDZWxsVGV4dChncm91cCk7XG4gICAgICAgIHZhciBjb250ZW50RWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtY2VsbC1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1leHBhbmRlclwiPicgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtaWNvblwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICc8L3NwYW4+JyArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1jZWxsLXRleHRcIj4nICtcbiAgICAgICAgICAgICh0ZXh0ID8gaHRtbEVzY2FwZSh0ZXh0KSA6ICcmbmJzcDsnKSArXG4gICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICB2YXIgZmlsdGVyID0gZ3JvdXAuc3BlYy5yZW5kZXI7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250ZW50RWwgPSBmaWx0ZXIoY29udGVudEVsLCBncm91cC52YWx1ZSkgfHwgY29udGVudEVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZW50RWw7XG4gICAgfTtcbiAgICBHcm91cFJvdy5wcm90b3R5cGUucmVuZGVyQ2VsbFRleHQgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgdmFyIHRleHQgPSBncm91cC52YWx1ZSB8fCAnJzsgLy8gbWlnaHQgYmUgbnVsbC91bmRlZmluZWQgaWYgYW4gYWQtaG9jIGdyb3VwaW5nXG4gICAgICAgIHZhciBmaWx0ZXIgPSBncm91cC5zcGVjLnRleHQ7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0ZXh0ID0gZmlsdGVyKHRleHQpIHx8IHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICBHcm91cFJvdy5wcm90b3R5cGUuZ2V0SGVpZ2h0RWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuc3ByZWFkc2hlZXRIZWlnaHRFbCwgdGhpcy50aW1lQXhpc0hlaWdodEVsXTtcbiAgICB9O1xuICAgIEdyb3VwUm93LnByb3RvdHlwZS51cGRhdGVFeHBhbmRlckljb24gPSBmdW5jdGlvbiAoaXNFeHBhbmRlZCkge1xuICAgICAgICB1cGRhdGVFeHBhbmRlckljb24odGhpcy5leHBhbmRlckljb25FbCwgaXNFeHBhbmRlZCk7XG4gICAgfTtcbiAgICByZXR1cm4gR3JvdXBSb3c7XG59KFJvdykpO1xuR3JvdXBSb3cuYWRkRXF1YWxpdHlGdW5jcyh7XG4gICAgZ3JvdXA6IGlzR3JvdXBzRXF1YWwgLy8gSEFDSyBmb3IgUmVzb3VyY2VUaW1lbGluZVZpZXc6OnJlbmRlclJvd3Ncbn0pO1xuXG52YXIgU3ByZWFkc2hlZXRSb3cgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNwcmVhZHNoZWV0Um93LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwcmVhZHNoZWV0Um93KGNvbnRleHQsIHRyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yZW5kZXJSb3cgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlclJvdywgX3RoaXMudW5yZW5kZXJSb3cpO1xuICAgICAgICBfdGhpcy5fdXBkYXRlVHJSZXNvdXJjZUlkID0gbWVtb2l6ZVJlbmRlcmluZyh1cGRhdGVUclJlc291cmNlSWQsIG51bGwsIFtfdGhpcy5fcmVuZGVyUm93XSk7XG4gICAgICAgIF90aGlzLl91cGRhdGVFeHBhbmRlckljb24gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZUV4cGFuZGVySWNvbiwgbnVsbCwgW190aGlzLl9yZW5kZXJSb3ddKTtcbiAgICAgICAgX3RoaXMub25FeHBhbmRlckNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wcztcbiAgICAgICAgICAgIF90aGlzLmNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX1JFU09VUkNFX0VOVElUWV9FWFBBTkRFRCcsXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzLmlkLFxuICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6ICFwcm9wcy5pc0V4cGFuZGVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMudHIgPSB0cjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTcHJlYWRzaGVldFJvdy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclJvdyhwcm9wcy5yZXNvdXJjZSwgcHJvcHMucm93U3BhbnMsIHByb3BzLmRlcHRoLCBwcm9wcy5jb2xTcGVjcyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRyUmVzb3VyY2VJZCh0aGlzLnRyLCBwcm9wcy5yZXNvdXJjZS5pZCk7IC8vIFRPRE86IG9ubHkgdXNlIHB1YmxpYyBJRD9cbiAgICAgICAgdGhpcy5fdXBkYXRlRXhwYW5kZXJJY29uKHByb3BzLmhhc0NoaWxkcmVuLCBwcm9wcy5pc0V4cGFuZGVkKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0Um93LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyUm93LnVucmVuZGVyKCk7IC8vIHNob3VsZCB1bnJlbmRlciBldmVyeXRoaW5nIGVsc2VcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0Um93LnByb3RvdHlwZS5yZW5kZXJSb3cgPSBmdW5jdGlvbiAocmVzb3VyY2UsIHJvd1NwYW5zLCBkZXB0aCwgY29sU3BlY3MpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdHIgPSBfYS50ciwgdGhlbWUgPSBfYS50aGVtZSwgY2FsZW5kYXIgPSBfYS5jYWxlbmRhciwgdmlldyA9IF9hLnZpZXc7XG4gICAgICAgIHZhciByZXNvdXJjZUZpZWxkcyA9IGJ1aWxkUmVzb3VyY2VGaWVsZHMocmVzb3VyY2UpOyAvLyBzbGlnaHRseSBpbmVmZmljaWVudC4gYWxyZWFkeSBkb25lIHVwIHRoZSBjYWxsIHN0YWNrXG4gICAgICAgIHZhciBtYWluVGQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sU3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2xTcGVjID0gY29sU3BlY3NbaV07XG4gICAgICAgICAgICB2YXIgcm93U3BhbiA9IHJvd1NwYW5zW2ldO1xuICAgICAgICAgICAgaWYgKHJvd1NwYW4gPT09IDApIHsgLy8gbm90IHJlc3BvbnNpYmxlIGZvciBncm91cC1iYXNlZCByb3dzLiBWUm93R3JvdXAgaXNcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJvd1NwYW4gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJvd1NwYW4gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRleHQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoY29sU3BlYy5maWVsZCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSByZXNvdXJjZUZpZWxkc1tjb2xTcGVjLmZpZWxkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHQgPSBidWlsZFJlc291cmNlVGV4dEZ1bmMoY29sU3BlYy50ZXh0LCBjYWxlbmRhcikocmVzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbnRlbnRFbCA9IGh0bWxUb0VsZW1lbnQoJzxkaXYgY2xhc3M9XCJmYy1jZWxsLWNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgICAgICAoY29sU3BlYy5pc01haW4gPyByZW5kZXJJY29uSHRtbChkZXB0aCkgOiAnJykgK1xuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWNlbGwtdGV4dFwiPicgK1xuICAgICAgICAgICAgICAgICh0ZXh0ID8gaHRtbEVzY2FwZSh0ZXh0KSA6ICcmbmJzcDsnKSArXG4gICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+Jyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbFNwZWMucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7IC8vIGEgZmlsdGVyIGZ1bmN0aW9uIGZvciB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIGNvbnRlbnRFbCA9IGNvbFNwZWMucmVuZGVyKG5ldyBSZXNvdXJjZUFwaShjYWxlbmRhciwgcmVzb3VyY2UpLCBjb250ZW50RWwpIHx8IGNvbnRlbnRFbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3dTcGFuID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRFbC5jbGFzc0xpc3QuYWRkKCdmYy1zdGlja3knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ZCA9IGNyZWF0ZUVsZW1lbnQoJ3RkJywge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiByb3dTcGFuXG4gICAgICAgICAgICB9LCBjb250ZW50RWwpO1xuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGNlbGwgb2YgdGhlIHJvdyBuZWVkcyB0byBoYXZlIGFuIGlubmVyIGRpdiBmb3Igc2V0VHJJbm5lckhlaWdodFxuICAgICAgICAgICAgaWYgKGNvbFNwZWMuaXNNYWluKSB7XG4gICAgICAgICAgICAgICAgdGQuYXBwZW5kQ2hpbGQodGhpcy5oZWlnaHRFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwsIHRkLmNoaWxkTm9kZXMpIC8vIGlubmVyIHdyYXBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG1haW5UZCA9IHRkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhwYW5kZXJJY29uRWwgPSB0ci5xdWVyeVNlbGVjdG9yKCcuZmMtZXhwYW5kZXItc3BhY2UgLmZjLWljb24nKTtcbiAgICAgICAgLy8gd2FpdCB1bnRpbCB2ZXJ5IGVuZFxuICAgICAgICB2aWV3LnB1YmxpY2x5VHJpZ2dlcigncmVzb3VyY2VSZW5kZXInLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IG5ldyBSZXNvdXJjZUFwaShjYWxlbmRhciwgcmVzb3VyY2UpLFxuICAgICAgICAgICAgICAgIGVsOiBtYWluVGQsXG4gICAgICAgICAgICAgICAgdmlldzogdmlld1xuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0Um93LnByb3RvdHlwZS51bnJlbmRlclJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50ci5pbm5lckhUTUwgPSAnJztcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0Um93LnByb3RvdHlwZS51cGRhdGVFeHBhbmRlckljb24gPSBmdW5jdGlvbiAoaGFzQ2hpbGRyZW4sIGlzRXhwYW5kZWQpIHtcbiAgICAgICAgdmFyIGV4cGFuZGVySWNvbkVsID0gdGhpcy5leHBhbmRlckljb25FbDtcbiAgICAgICAgdmFyIGV4cGFuZGVyRWwgPSBleHBhbmRlckljb25FbC5wYXJlbnRFbGVtZW50O1xuICAgICAgICBpZiAoZXhwYW5kZXJJY29uRWwgJiZcbiAgICAgICAgICAgIGV4cGFuZGVyRWwgLy8gd2h5IHdvdWxkIHRoaXMgYmUgbnVsbD8/IHdhcyB0aGUgY2FzZSBpbiBJRTExXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZXhwYW5kZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25FeHBhbmRlckNsaWNrKTtcbiAgICAgICAgICAgICAgICBleHBhbmRlckVsLmNsYXNzTGlzdC5hZGQoJ2ZjLWV4cGFuZGVyJyk7XG4gICAgICAgICAgICAgICAgdXBkYXRlRXhwYW5kZXJJY29uKGV4cGFuZGVySWNvbkVsLCBpc0V4cGFuZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4cGFuZGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uRXhwYW5kZXJDbGljayk7XG4gICAgICAgICAgICAgICAgZXhwYW5kZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy1leHBhbmRlcicpO1xuICAgICAgICAgICAgICAgIGNsZWFyRXhwYW5kZXJJY29uKGV4cGFuZGVySWNvbkVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNwcmVhZHNoZWV0Um93O1xufShDb21wb25lbnQpKTtcbi8qXG5SZW5kZXJzIHRoZSBIVE1MIHJlc3BvbnNpYmxlIGZvciB0aGUgc3Vicm93IGV4cGFuZGVyIGFyZWEsXG5hcyB3ZWxsIGFzIHRoZSBzcGFjZSBiZWZvcmUgaXQgKHVzZWQgdG8gYWxpZ24gZXhwYW5kZXJzIG9mIHNpbWlsYXIgZGVwdGhzKVxuKi9cbmZ1bmN0aW9uIHJlbmRlckljb25IdG1sKGRlcHRoKSB7XG4gICAgdmFyIGh0bWwgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcHRoOyBpKyspIHtcbiAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJmYy1pY29uXCI+PC9zcGFuPic7XG4gICAgfVxuICAgIGh0bWwgKz1cbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtZXhwYW5kZXItc3BhY2VcIj4nICtcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWljb25cIj48L3NwYW4+JyArXG4gICAgICAgICAgICAnPC9zcGFuPic7XG4gICAgcmV0dXJuIGh0bWw7XG59XG5cbnZhciBSZXNvdXJjZVJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVzb3VyY2VSb3csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VSb3coY29udGV4dCwgYSwgYiwgYywgZCwgdGltZUF4aXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCwgYSwgYiwgYywgZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVRyUmVzb3VyY2VJZCA9IG1lbW9pemVSZW5kZXJpbmcodXBkYXRlVHJSZXNvdXJjZUlkKTtcbiAgICAgICAgX3RoaXMuc3ByZWFkc2hlZXRSb3cgPSBuZXcgU3ByZWFkc2hlZXRSb3coY29udGV4dCwgX3RoaXMuc3ByZWFkc2hlZXRUcik7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzVHIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgndGQnLCB7IGNsYXNzTmFtZTogX3RoaXMudGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSB9LCBfdGhpcy5pbm5lckNvbnRhaW5lckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpKTtcbiAgICAgICAgX3RoaXMubGFuZSA9IG5ldyBUaW1lbGluZUxhbmUoY29udGV4dCwgX3RoaXMuaW5uZXJDb250YWluZXJFbCwgX3RoaXMuaW5uZXJDb250YWluZXJFbCwgdGltZUF4aXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlc291cmNlUm93LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNwcmVhZHNoZWV0Um93LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sYW5lLmRlc3Ryb3koKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVJvdy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIC8vIHNwcmVhZHNoZWV0Um93IGhhbmRsZXMgY2FsbGluZyB1cGRhdGVUclJlc291cmNlSWQgZm9yIHNwcmVhZHNoZWV0VHJcbiAgICAgICAgdGhpcy5zcHJlYWRzaGVldFJvdy5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgY29sU3BlY3M6IHByb3BzLmNvbFNwZWNzLFxuICAgICAgICAgICAgaWQ6IHByb3BzLmlkLFxuICAgICAgICAgICAgcm93U3BhbnM6IHByb3BzLnJvd1NwYW5zLFxuICAgICAgICAgICAgZGVwdGg6IHByb3BzLmRlcHRoLFxuICAgICAgICAgICAgaXNFeHBhbmRlZDogcHJvcHMuaXNFeHBhbmRlZCxcbiAgICAgICAgICAgIGhhc0NoaWxkcmVuOiBwcm9wcy5oYXNDaGlsZHJlbixcbiAgICAgICAgICAgIHJlc291cmNlOiBwcm9wcy5yZXNvdXJjZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVHJSZXNvdXJjZUlkKHRoaXMudGltZUF4aXNUciwgcHJvcHMucmVzb3VyY2UuaWQpO1xuICAgICAgICB0aGlzLmxhbmUucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgIG5leHREYXlUaHJlc2hvbGQ6IHByb3BzLm5leHREYXlUaHJlc2hvbGQsXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBwcm9wcy5idXNpbmVzc0hvdXJzLFxuICAgICAgICAgICAgZXZlbnRTdG9yZTogcHJvcHMuZXZlbnRTdG9yZSxcbiAgICAgICAgICAgIGV2ZW50VWlCYXNlczogcHJvcHMuZXZlbnRVaUJhc2VzLFxuICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcHJvcHMuZGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLFxuICAgICAgICAgICAgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlzU2l6ZURpcnR5ID0gdHJ1ZTtcbiAgICB9O1xuICAgIFJlc291cmNlUm93LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlU2l6ZS5jYWxsKHRoaXMsIGlzUmVzaXplKTtcbiAgICAgICAgdGhpcy5sYW5lLnVwZGF0ZVNpemUoaXNSZXNpemUpO1xuICAgIH07XG4gICAgUmVzb3VyY2VSb3cucHJvdG90eXBlLmdldEhlaWdodEVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnNwcmVhZHNoZWV0Um93LmhlaWdodEVsLCB0aGlzLmlubmVyQ29udGFpbmVyRWxdO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlUm93O1xufShSb3cpKTtcblJlc291cmNlUm93LmFkZEVxdWFsaXR5RnVuY3Moe1xuICAgIHJvd1NwYW5zOiBpc0FycmF5c0VxdWFsIC8vIEhBQ0sgZm9yIGlzU2l6ZURpcnR5LCBSZXNvdXJjZVRpbWVsaW5lVmlldzo6cmVuZGVyUm93c1xufSk7XG5cbnZhciBDT0xfTUlOX1dJRFRIID0gMzA7XG52YXIgU3ByZWFkc2hlZXRIZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNwcmVhZHNoZWV0SGVhZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwcmVhZHNoZWV0SGVhZGVyKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlc2l6YWJsZXMgPSBbXTtcbiAgICAgICAgX3RoaXMuY29sV2lkdGhzID0gW107XG4gICAgICAgIF90aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlck1peGluKCk7XG4gICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKF90aGlzLnRhYmxlRWwgPSBjcmVhdGVFbGVtZW50KCd0YWJsZScsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogX3RoaXMudGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlR3JpZCcpXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTcHJlYWRzaGVldEhlYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucmVzaXphYmxlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByZXNpemFibGUgPSBfYVtfaV07XG4gICAgICAgICAgICByZXNpemFibGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy50YWJsZUVsKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldEhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciB0aGVtZSA9IHRoaXMudGhlbWU7XG4gICAgICAgIHZhciBjb2xTcGVjcyA9IHByb3BzLmNvbFNwZWNzO1xuICAgICAgICB2YXIgaHRtbCA9ICc8Y29sZ3JvdXA+JyArIHByb3BzLmNvbFRhZ3MgKyAnPC9jb2xncm91cD4nICtcbiAgICAgICAgICAgICc8dGJvZHk+JztcbiAgICAgICAgaWYgKHByb3BzLnN1cGVySGVhZGVyVGV4dCkge1xuICAgICAgICAgICAgaHRtbCArPVxuICAgICAgICAgICAgICAgICc8dHIgY2xhc3M9XCJmYy1zdXBlclwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPVwiJyArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKSArICdcIiBjb2xzcGFuPVwiJyArIGNvbFNwZWNzLmxlbmd0aCArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1jZWxsLWNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtY2VsbC10ZXh0XCI+JyArXG4gICAgICAgICAgICAgICAgICAgIGh0bWxFc2NhcGUocHJvcHMuc3VwZXJIZWFkZXJUZXh0KSArXG4gICAgICAgICAgICAgICAgICAgICc8L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvdGg+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L3RyPic7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSAnPHRyPic7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sU3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gY29sU3BlY3NbaV07XG4gICAgICAgICAgICB2YXIgaXNMYXN0ID0gaSA9PT0gKGNvbFNwZWNzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaHRtbCArPVxuICAgICAgICAgICAgICAgIFwiPHRoIGNsYXNzPVxcXCJcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKSArIFwiXFxcIj5cIiArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWNlbGwtY29udGVudFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAoby5pc01haW4gP1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtZXhwYW5kZXItc3BhY2VcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1pY29uXCI+PC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NwYW4+JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1jZWxsLXRleHRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgaHRtbEVzY2FwZShvLmxhYmVsVGV4dCB8fCAnJykgKyAvLyB3aGF0IGFib3V0IG5vcm1hbGl6aW5nIHRoaXMgdmFsdWUgYWhlYWQgb2YgdGltZT9cbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAoIWlzTGFzdCA/ICc8ZGl2IGNsYXNzPVwiZmMtY29sLXJlc2l6ZXJcIj48L2Rpdj4nIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPC90aD4nO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gJzwvdHI+JztcbiAgICAgICAgaHRtbCArPSAnPC90Ym9keT4nO1xuICAgICAgICB0aGlzLnRhYmxlRWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy50aEVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMudGFibGVFbC5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpKTtcbiAgICAgICAgdGhpcy5jb2xFbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLnRhYmxlRWwucXVlcnlTZWxlY3RvckFsbCgnY29sJykpO1xuICAgICAgICB0aGlzLnJlc2l6ZXJFbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLnRhYmxlRWwucXVlcnlTZWxlY3RvckFsbCgnLmZjLWNvbC1yZXNpemVyJykpO1xuICAgICAgICB0aGlzLmluaXRDb2xSZXNpemluZygpO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXRIZWFkZXIucHJvdG90eXBlLmluaXRDb2xSZXNpemluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIEVsZW1lbnREcmFnZ2luZ0ltcGwgPSB0aGlzLmNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5lbGVtZW50RHJhZ2dpbmdJbXBsO1xuICAgICAgICBpZiAoRWxlbWVudERyYWdnaW5nSW1wbCkge1xuICAgICAgICAgICAgdGhpcy5yZXNpemFibGVzID0gdGhpcy5yZXNpemVyRWxzLm1hcChmdW5jdGlvbiAoaGFuZGxlRWwsIGNvbEluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gbmV3IEVsZW1lbnREcmFnZ2luZ0ltcGwoaGFuZGxlRWwpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFdpZHRoO1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRXaWR0aCA9IF90aGlzLmNvbFdpZHRoc1tjb2xJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhcnRXaWR0aCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0V2lkdGggPSBfdGhpcy50aEVsc1tjb2xJbmRleF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnbW92ZScsIGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29sV2lkdGhzW2NvbEluZGV4XSA9IE1hdGgubWF4KHN0YXJ0V2lkdGggKyBwZXYuZGVsdGFYICogKF90aGlzLmlzUnRsID8gLTEgOiAxKSwgQ09MX01JTl9XSURUSCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignY29sd2lkdGhjaGFuZ2UnLCBfdGhpcy5jb2xXaWR0aHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnNldEF1dG9TY3JvbGxFbmFibGVkKGZhbHNlKTsgLy8gYmVjYXVzZSBnZXRzIHdlaXJkIHdpdGggYXV0by1zY3JvbGxpbmcgdGltZSBhcmVhXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyYWdnaW5nO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTcHJlYWRzaGVldEhlYWRlcjtcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBTcHJlYWRzaGVldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ByZWFkc2hlZXQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ByZWFkc2hlZXQoY29udGV4dCwgaGVhZFBhcmVudEVsLCBib2R5UGFyZW50RWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3JlbmRlckNlbGxzID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJDZWxscywgX3RoaXMudW5yZW5kZXJDZWxscyk7XG4gICAgICAgIF90aGlzLmxheW91dCA9IG5ldyBIZWFkZXJCb2R5TGF5b3V0KGhlYWRQYXJlbnRFbCwgYm9keVBhcmVudEVsLCAnY2xpcHBlZC1zY3JvbGwnKTtcbiAgICAgICAgdmFyIGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIgPSBfdGhpcy5sYXlvdXQuaGVhZGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIHZhciBib2R5RW5oYW5jZWRTY3JvbGxlciA9IF90aGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIF90aGlzLmhlYWRlciA9IG5ldyBTcHJlYWRzaGVldEhlYWRlcihjb250ZXh0LCBoZWFkZXJFbmhhbmNlZFNjcm9sbGVyLmNhbnZhcy5jb250ZW50RWwpO1xuICAgICAgICBfdGhpcy5oZWFkZXIuZW1pdHRlci5vbignY29sd2lkdGhjaGFuZ2UnLCBmdW5jdGlvbiAoY29sV2lkdGhzKSB7XG4gICAgICAgICAgICBfdGhpcy5hcHBseUNvbFdpZHRocyhjb2xXaWR0aHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgYm9keUVuaGFuY2VkU2Nyb2xsZXIuY2FudmFzLmNvbnRlbnRFbFxuICAgICAgICAgICAgLmFwcGVuZENoaWxkKF90aGlzLmJvZHlDb250YWluZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtcm93cycgfSwgJzx0YWJsZT4nICtcbiAgICAgICAgICAgICc8Y29sZ3JvdXAgLz4nICtcbiAgICAgICAgICAgICc8dGJvZHkgLz4nICtcbiAgICAgICAgICAgICc8L3RhYmxlPicpKTtcbiAgICAgICAgX3RoaXMuYm9keUNvbEdyb3VwID0gX3RoaXMuYm9keUNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJ2NvbGdyb3VwJyk7XG4gICAgICAgIF90aGlzLmJvZHlUYm9keSA9IF90aGlzLmJvZHlDb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCd0Ym9keScpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhlYWRlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubGF5b3V0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2VsbHMudW5yZW5kZXIoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckNlbGxzKHByb3BzLnN1cGVySGVhZGVyVGV4dCwgcHJvcHMuY29sU3BlY3MpO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXQucHJvdG90eXBlLnJlbmRlckNlbGxzID0gZnVuY3Rpb24gKHN1cGVySGVhZGVyVGV4dCwgY29sU3BlY3MpIHtcbiAgICAgICAgdmFyIGNvbFRhZ3MgPSB0aGlzLnJlbmRlckNvbFRhZ3MoY29sU3BlY3MpO1xuICAgICAgICB0aGlzLmhlYWRlci5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgc3VwZXJIZWFkZXJUZXh0OiBzdXBlckhlYWRlclRleHQsXG4gICAgICAgICAgICBjb2xTcGVjczogY29sU3BlY3MsXG4gICAgICAgICAgICBjb2xUYWdzOiBjb2xUYWdzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJvZHlDb2xHcm91cC5pbm5lckhUTUwgPSBjb2xUYWdzO1xuICAgICAgICB0aGlzLmJvZHlDb2xFbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmJvZHlDb2xHcm91cC5xdWVyeVNlbGVjdG9yQWxsKCdjb2wnKSk7XG4gICAgICAgIHRoaXMuYXBwbHlDb2xXaWR0aHMoY29sU3BlY3MubWFwKGZ1bmN0aW9uIChjb2xTcGVjKSB7IHJldHVybiBjb2xTcGVjLndpZHRoOyB9KSk7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldC5wcm90b3R5cGUudW5yZW5kZXJDZWxscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ib2R5Q29sR3JvdXAuaW5uZXJIVE1MID0gJyc7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldC5wcm90b3R5cGUucmVuZGVyQ29sVGFncyA9IGZ1bmN0aW9uIChjb2xTcGVjcykge1xuICAgICAgICB2YXIgaHRtbCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbFNwZWNzXzEgPSBjb2xTcGVjczsgX2kgPCBjb2xTcGVjc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG8gPSBjb2xTcGVjc18xW19pXTtcbiAgICAgICAgICAgIGlmIChvLmlzTWFpbikge1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxjb2wgY2xhc3M9XCJmYy1tYWluLWNvbFwiLz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPGNvbC8+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB0b3RhbEhlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIHRoaXMubGF5b3V0LnNldEhlaWdodCh0b3RhbEhlaWdodCwgaXNBdXRvKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS5hcHBseUNvbFdpZHRocyA9IGZ1bmN0aW9uIChjb2xXaWR0aHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY29sV2lkdGhzLmZvckVhY2goZnVuY3Rpb24gKGNvbFdpZHRoLCBjb2xJbmRleCkge1xuICAgICAgICAgICAgdmFyIGhlYWRFbCA9IF90aGlzLmhlYWRlci5jb2xFbHNbY29sSW5kZXhdOyAvLyBiYWQgdG8gYWNjZXNzIGNoaWxkXG4gICAgICAgICAgICB2YXIgYm9keUVsID0gX3RoaXMuYm9keUNvbEVsc1tjb2xJbmRleF07XG4gICAgICAgICAgICB2YXIgc3R5bGVWYWw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbFdpZHRoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHN0eWxlVmFsID0gY29sV2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbFdpZHRoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdHlsZVZhbCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhZEVsLnN0eWxlLndpZHRoID0gYm9keUVsLnN0eWxlLndpZHRoID0gc3R5bGVWYWw7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNwcmVhZHNoZWV0O1xufShDb21wb25lbnQpKTtcblxudmFyIE1JTl9SRVNPVVJDRV9BUkVBX1dJRFRIID0gMzA7IC8vIGRlZmluaXRlbHkgYmlnZ2VyIHRoYW4gc2Nyb2xsYmFyc1xudmFyIFJlc291cmNlVGltZWxpbmVWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXNvdXJjZVRpbWVsaW5lVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXNvdXJjZVRpbWVsaW5lVmlldyhjb250ZXh0LCB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQsIHZpZXdTcGVjLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgcGFyZW50RWwpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RpY2t5U2Nyb2xsRGlydHkgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMucm93Tm9kZXMgPSBbXTtcbiAgICAgICAgX3RoaXMucm93Q29tcG9uZW50cyA9IFtdO1xuICAgICAgICBfdGhpcy5yb3dDb21wb25lbnRzQnlJZCA9IHt9O1xuICAgICAgICBfdGhpcy5yZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5ncyA9IFtdO1xuICAgICAgICBfdGhpcy5zcGxpdHRlciA9IG5ldyBSZXNvdXJjZVNwbGl0dGVyKCk7IC8vIGRvZXNuJ3QgbGV0IGl0IGRvIGJ1c2luZXNzSG91cnMgdGhvXG4gICAgICAgIF90aGlzLmhhc1Jlc291cmNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUoaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzKTtcbiAgICAgICAgX3RoaXMuYnVpbGRSb3dOb2RlcyA9IG1lbW9pemUoYnVpbGRSb3dOb2Rlcyk7XG4gICAgICAgIF90aGlzLmhhc05lc3RpbmcgPSBtZW1vaXplKGhhc05lc3RpbmcpO1xuICAgICAgICBfdGhpcy5fdXBkYXRlSGFzTmVzdGluZyA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlSGFzTmVzdGluZyk7XG4gICAgICAgIHZhciBhbGxDb2xTcGVjcyA9IF90aGlzLm9wdCgncmVzb3VyY2VDb2x1bW5zJykgfHwgW107XG4gICAgICAgIHZhciBsYWJlbFRleHQgPSBfdGhpcy5vcHQoJ3Jlc291cmNlTGFiZWxUZXh0Jyk7IC8vIFRPRE86IHZpZXcub3ZlcnJpZGVcbiAgICAgICAgdmFyIGRlZmF1bHRMYWJlbFRleHQgPSAnUmVzb3VyY2VzJzsgLy8gVE9ETzogdmlldy5kZWZhdWx0c1xuICAgICAgICB2YXIgc3VwZXJIZWFkZXJUZXh0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFhbGxDb2xTcGVjcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFsbENvbFNwZWNzLnB1c2goe1xuICAgICAgICAgICAgICAgIGxhYmVsVGV4dDogbGFiZWxUZXh0IHx8IGRlZmF1bHRMYWJlbFRleHQsXG4gICAgICAgICAgICAgICAgdGV4dDogYnVpbGRSZXNvdXJjZVRleHRGdW5jKF90aGlzLm9wdCgncmVzb3VyY2VUZXh0JyksIF90aGlzLmNhbGVuZGFyKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlckhlYWRlclRleHQgPSBsYWJlbFRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsYWluQ29sU3BlY3MgPSBbXTtcbiAgICAgICAgdmFyIGdyb3VwQ29sU3BlY3MgPSBbXTtcbiAgICAgICAgdmFyIGdyb3VwU3BlY3MgPSBbXTtcbiAgICAgICAgdmFyIGlzVkdyb3VwaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBpc0hHcm91cGluZyA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFsbENvbFNwZWNzXzEgPSBhbGxDb2xTcGVjczsgX2kgPCBhbGxDb2xTcGVjc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGNvbFNwZWMgPSBhbGxDb2xTcGVjc18xW19pXTtcbiAgICAgICAgICAgIGlmIChjb2xTcGVjLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xTcGVjcy5wdXNoKGNvbFNwZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxhaW5Db2xTcGVjcy5wdXNoKGNvbFNwZWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBsYWluQ29sU3BlY3NbMF0uaXNNYWluID0gdHJ1ZTtcbiAgICAgICAgaWYgKGdyb3VwQ29sU3BlY3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBncm91cFNwZWNzID0gZ3JvdXBDb2xTcGVjcztcbiAgICAgICAgICAgIGlzVkdyb3VwaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBoR3JvdXBGaWVsZCA9IF90aGlzLm9wdCgncmVzb3VyY2VHcm91cEZpZWxkJyk7XG4gICAgICAgICAgICBpZiAoaEdyb3VwRmllbGQpIHtcbiAgICAgICAgICAgICAgICBpc0hHcm91cGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZ3JvdXBTcGVjcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGhHcm91cEZpZWxkLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBfdGhpcy5vcHQoJ3Jlc291cmNlR3JvdXBUZXh0JyksXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcjogX3RoaXMub3B0KCdyZXNvdXJjZUdyb3VwUmVuZGVyJylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxsT3JkZXJTcGVjcyA9IHBhcnNlRmllbGRTcGVjcyhfdGhpcy5vcHQoJ3Jlc291cmNlT3JkZXInKSk7XG4gICAgICAgIHZhciBwbGFpbk9yZGVyU3BlY3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBhbGxPcmRlclNwZWNzXzEgPSBhbGxPcmRlclNwZWNzOyBfYSA8IGFsbE9yZGVyU3BlY3NfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBvcmRlclNwZWMgPSBhbGxPcmRlclNwZWNzXzFbX2FdO1xuICAgICAgICAgICAgdmFyIGlzR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgZ3JvdXBTcGVjc18xID0gZ3JvdXBTcGVjczsgX2IgPCBncm91cFNwZWNzXzEubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwU3BlYyA9IGdyb3VwU3BlY3NfMVtfYl07XG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwU3BlYy5maWVsZCA9PT0gb3JkZXJTcGVjLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwU3BlYy5vcmRlciA9IG9yZGVyU3BlYy5vcmRlcjsgLy8gLTEsIDAsIDFcbiAgICAgICAgICAgICAgICAgICAgaXNHcm91cCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNHcm91cCkge1xuICAgICAgICAgICAgICAgIHBsYWluT3JkZXJTcGVjcy5wdXNoKG9yZGVyU3BlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuc3VwZXJIZWFkZXJUZXh0ID0gc3VwZXJIZWFkZXJUZXh0O1xuICAgICAgICBfdGhpcy5pc1ZHcm91cGluZyA9IGlzVkdyb3VwaW5nO1xuICAgICAgICBfdGhpcy5pc0hHcm91cGluZyA9IGlzSEdyb3VwaW5nO1xuICAgICAgICBfdGhpcy5ncm91cFNwZWNzID0gZ3JvdXBTcGVjcztcbiAgICAgICAgX3RoaXMuY29sU3BlY3MgPSBncm91cENvbFNwZWNzLmNvbmNhdChwbGFpbkNvbFNwZWNzKTtcbiAgICAgICAgX3RoaXMub3JkZXJTcGVjcyA9IHBsYWluT3JkZXJTcGVjcztcbiAgICAgICAgLy8gU1RBUlQgUkVOREVSSU5HLi4uXG4gICAgICAgIF90aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXRpbWVsaW5lJyk7XG4gICAgICAgIGlmIChfdGhpcy5vcHQoJ2V2ZW50T3ZlcmxhcCcpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgX3RoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZmMtbm8tb3ZlcmxhcCcpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmVsLmlubmVySFRNTCA9IF90aGlzLnJlbmRlclNrZWxldG9uSHRtbCgpO1xuICAgICAgICBfdGhpcy5yZXNvdXJjZUFyZWFIZWFkRWwgPSBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCAuZmMtcmVzb3VyY2UtYXJlYScpO1xuICAgICAgICBfdGhpcy5zZXRSZXNvdXJjZUFyZWFXaWR0aChfdGhpcy5vcHQoJ3Jlc291cmNlQXJlYVdpZHRoJykpO1xuICAgICAgICBfdGhpcy5pbml0UmVzb3VyY2VBcmVhV2lkdGhEcmFnZ2luZygpO1xuICAgICAgICBfdGhpcy5taXNjSGVpZ2h0ID0gX3RoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICBfdGhpcy5zcHJlYWRzaGVldCA9IG5ldyBTcHJlYWRzaGVldChfdGhpcy5jb250ZXh0LCBfdGhpcy5yZXNvdXJjZUFyZWFIZWFkRWwsIF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5IC5mYy1yZXNvdXJjZS1hcmVhJykpO1xuICAgICAgICBfdGhpcy50aW1lQXhpcyA9IG5ldyBUaW1lQXhpcyhfdGhpcy5jb250ZXh0LCBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCAuZmMtdGltZS1hcmVhJyksIF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5IC5mYy10aW1lLWFyZWEnKSk7XG4gICAgICAgIHZhciB0aW1lQXhpc1Jvd0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtcm93cycgfSwgJzx0YWJsZT48dGJvZHkgLz48L3RhYmxlPicpO1xuICAgICAgICBfdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5jb250ZW50RWwuYXBwZW5kQ2hpbGQodGltZUF4aXNSb3dDb250YWluZXIpO1xuICAgICAgICBfdGhpcy50aW1lQXhpc1Rib2R5ID0gdGltZUF4aXNSb3dDb250YWluZXIucXVlcnlTZWxlY3RvcigndGJvZHknKTtcbiAgICAgICAgX3RoaXMubGFuZSA9IG5ldyBUaW1lbGluZUxhbmUoX3RoaXMuY29udGV4dCwgbnVsbCwgX3RoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuYmdFbCwgX3RoaXMudGltZUF4aXMpO1xuICAgICAgICBfdGhpcy5ib2R5U2Nyb2xsSm9pbmVyID0gbmV3IFNjcm9sbEpvaW5lcigndmVydGljYWwnLCBbXG4gICAgICAgICAgICBfdGhpcy5zcHJlYWRzaGVldC5sYXlvdXQuYm9keVNjcm9sbGVyLFxuICAgICAgICAgICAgX3RoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlclxuICAgICAgICBdKTtcbiAgICAgICAgLy8gYWZ0ZXIgc2Nyb2xsam9pbmVyXG4gICAgICAgIF90aGlzLnNwcmVhZHNoZWV0Qm9keVN0aWNreVNjcm9sbGVyID0gbmV3IFN0aWNreVNjcm9sbGVyKF90aGlzLnNwcmVhZHNoZWV0LmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwsIF90aGlzLmlzUnRsLCB0cnVlIC8vIGlzVmVydGljYWxcbiAgICAgICAgKTtcbiAgICAgICAgX3RoaXMuc3ByZWFkc2hlZXQucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIHN1cGVySGVhZGVyVGV4dDogX3RoaXMuc3VwZXJIZWFkZXJUZXh0LFxuICAgICAgICAgICAgY29sU3BlY3M6IF90aGlzLmNvbFNwZWNzXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDb21wb25lbnQuLi5cbiAgICAgICAgY29udGV4dC5jYWxlbmRhci5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzLCB7XG4gICAgICAgICAgICBlbDogX3RoaXMudGltZUF4aXMuc2xhdHMuZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnJlbmRlclNrZWxldG9uSHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoZW1lID0gdGhpcy50aGVtZTtcbiAgICAgICAgcmV0dXJuIFwiPHRhYmxlIGNsYXNzPVxcXCJcIiArIHRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArIFwiXFxcIj4gPHRoZWFkIGNsYXNzPVxcXCJmYy1oZWFkXFxcIj4gPHRyPiA8dGQgY2xhc3M9XFxcImZjLXJlc291cmNlLWFyZWEgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyBcIlxcXCI+PC90ZD4gPHRkIGNsYXNzPVxcXCJmYy1kaXZpZGVyIGZjLWNvbC1yZXNpemVyIFwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldEhlYWRlcicpICsgXCJcXFwiPjwvdGQ+IDx0ZCBjbGFzcz1cXFwiZmMtdGltZS1hcmVhIFwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldEhlYWRlcicpICsgXCJcXFwiPjwvdGQ+IDwvdHI+IDwvdGhlYWQ+IDx0Ym9keSBjbGFzcz1cXFwiZmMtYm9keVxcXCI+IDx0cj4gPHRkIGNsYXNzPVxcXCJmYy1yZXNvdXJjZS1hcmVhIFwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSArIFwiXFxcIj48L3RkPiA8dGQgY2xhc3M9XFxcImZjLWRpdmlkZXIgZmMtY29sLXJlc2l6ZXIgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyBcIlxcXCI+PC90ZD4gPHRkIGNsYXNzPVxcXCJmYy10aW1lLWFyZWEgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpICsgXCJcXFwiPjwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+XCI7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcywgcHJvcHMpO1xuICAgICAgICB2YXIgc3BsaXRQcm9wcyA9IHRoaXMuc3BsaXR0ZXIuc3BsaXRQcm9wcyhwcm9wcyk7XG4gICAgICAgIHZhciBoYXNSZXNvdXJjZUJ1c2luZXNzSG91cnMgPSB0aGlzLmhhc1Jlc291cmNlQnVzaW5lc3NIb3Vycyhwcm9wcy5yZXNvdXJjZVN0b3JlKTtcbiAgICAgICAgdGhpcy50aW1lQXhpcy5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBmb3IgYWxsLXJlc291cmNlIGJnIGV2ZW50cyAvIHNlbGVjdGlvbnMgLyBidXNpbmVzcy1ob3Vyc1xuICAgICAgICB0aGlzLmxhbmUucmVjZWl2ZVByb3BzKF9fYXNzaWduKHt9LCBzcGxpdFByb3BzWycnXSwgeyBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQ6IHRoaXMubmV4dERheVRocmVzaG9sZCwgYnVzaW5lc3NIb3VyczogaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzID8gbnVsbCA6IHByb3BzLmJ1c2luZXNzSG91cnMgfSkpO1xuICAgICAgICB2YXIgbmV3Um93Tm9kZXMgPSB0aGlzLmJ1aWxkUm93Tm9kZXMocHJvcHMucmVzb3VyY2VTdG9yZSwgdGhpcy5ncm91cFNwZWNzLCB0aGlzLm9yZGVyU3BlY3MsIHRoaXMuaXNWR3JvdXBpbmcsIHByb3BzLnJlc291cmNlRW50aXR5RXhwYW5zaW9ucywgdGhpcy5vcHQoJ3Jlc291cmNlc0luaXRpYWxseUV4cGFuZGVkJykpO1xuICAgICAgICB0aGlzLl91cGRhdGVIYXNOZXN0aW5nKHRoaXMuaGFzTmVzdGluZyhuZXdSb3dOb2RlcykpO1xuICAgICAgICB0aGlzLmRpZmZSb3dzKG5ld1Jvd05vZGVzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJSb3dzKHByb3BzLmRhdGVQcm9maWxlLCBoYXNSZXNvdXJjZUJ1c2luZXNzSG91cnMgPyBwcm9wcy5idXNpbmVzc0hvdXJzIDogbnVsbCwgLy8gQ09ORlVTSU5HLCBjb21tZW50XG4gICAgICAgIHNwbGl0UHJvcHMpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnVwZGF0ZUhhc05lc3RpbmcgPSBmdW5jdGlvbiAoaXNOZXN0aW5nKSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSB0aGlzLmVsLmNsYXNzTGlzdDtcbiAgICAgICAgaWYgKGlzTmVzdGluZykge1xuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnZmMtZmxhdCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnZmMtZmxhdCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuZGlmZlJvd3MgPSBmdW5jdGlvbiAobmV3Tm9kZXMpIHtcbiAgICAgICAgdmFyIG9sZE5vZGVzID0gdGhpcy5yb3dOb2RlcztcbiAgICAgICAgdmFyIG9sZExlbiA9IG9sZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgdmFyIG9sZEluZGV4SGFzaCA9IHt9OyAvLyBpZCAtPiBpbmRleFxuICAgICAgICB2YXIgb2xkSSA9IDA7XG4gICAgICAgIHZhciBuZXdJID0gMDtcbiAgICAgICAgZm9yIChvbGRJID0gMDsgb2xkSSA8IG9sZExlbjsgb2xkSSsrKSB7XG4gICAgICAgICAgICBvbGRJbmRleEhhc2hbb2xkTm9kZXNbb2xkSV0uaWRdID0gb2xkSTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpdGVyYXRlIG5ldyBub2Rlc1xuICAgICAgICBmb3IgKG9sZEkgPSAwLCBuZXdJID0gMDsgbmV3SSA8IG5ld05vZGVzLmxlbmd0aDsgbmV3SSsrKSB7XG4gICAgICAgICAgICB2YXIgbmV3Tm9kZSA9IG5ld05vZGVzW25ld0ldO1xuICAgICAgICAgICAgdmFyIG9sZElGb3VuZCA9IG9sZEluZGV4SGFzaFtuZXdOb2RlLmlkXTtcbiAgICAgICAgICAgIGlmIChvbGRJRm91bmQgIT0gbnVsbCAmJiBvbGRJRm91bmQgPj0gb2xkSSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUm93cyhuZXdJLCBvbGRJRm91bmQgLSBvbGRJLCBvbGROb2Rlcyk7IC8vIHdvbid0IGRvIGFueXRoaW5nIGlmIHNhbWUgaW5kZXhcbiAgICAgICAgICAgICAgICBvbGRJID0gb2xkSUZvdW5kICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93KG5ld0ksIG5ld05vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG9sZCByb3dzIHRoYXQgd2VyZW4ndCBmb3VuZCBuZWVkIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgdGhpcy5yZW1vdmVSb3dzKG5ld0ksIG9sZExlbiAtIG9sZEksIG9sZE5vZGVzKTsgLy8gd29uJ3QgZG8gYW55dGhpbmcgaWYgc2FtZSBpbmRleFxuICAgICAgICB0aGlzLnJvd05vZGVzID0gbmV3Tm9kZXM7XG4gICAgfTtcbiAgICAvKlxuICAgIHJvd0NvbXBvbmVudHMgaXMgdGhlIGluLXByb2dyZXNzIHJlc3VsdFxuICAgICovXG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmFkZFJvdyA9IGZ1bmN0aW9uIChpbmRleCwgcm93Tm9kZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByb3dDb21wb25lbnRzID0gX2Eucm93Q29tcG9uZW50cywgcm93Q29tcG9uZW50c0J5SWQgPSBfYS5yb3dDb21wb25lbnRzQnlJZDtcbiAgICAgICAgdmFyIG5leHRDb21wb25lbnQgPSByb3dDb21wb25lbnRzW2luZGV4XTtcbiAgICAgICAgdmFyIG5ld0NvbXBvbmVudCA9IHRoaXMuYnVpbGRDaGlsZENvbXBvbmVudChyb3dOb2RlLCB0aGlzLnNwcmVhZHNoZWV0LmJvZHlUYm9keSwgbmV4dENvbXBvbmVudCA/IG5leHRDb21wb25lbnQuc3ByZWFkc2hlZXRUciA6IG51bGwsIHRoaXMudGltZUF4aXNUYm9keSwgbmV4dENvbXBvbmVudCA/IG5leHRDb21wb25lbnQudGltZUF4aXNUciA6IG51bGwpO1xuICAgICAgICByb3dDb21wb25lbnRzLnNwbGljZShpbmRleCwgMCwgbmV3Q29tcG9uZW50KTtcbiAgICAgICAgcm93Q29tcG9uZW50c0J5SWRbcm93Tm9kZS5pZF0gPSBuZXdDb21wb25lbnQ7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUucmVtb3ZlUm93cyA9IGZ1bmN0aW9uIChzdGFydEluZGV4LCBsZW4sIG9sZFJvd05vZGVzKSB7XG4gICAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHJvd0NvbXBvbmVudHMgPSBfYS5yb3dDb21wb25lbnRzLCByb3dDb21wb25lbnRzQnlJZCA9IF9hLnJvd0NvbXBvbmVudHNCeUlkO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciByb3dDb21wb25lbnQgPSByb3dDb21wb25lbnRzW3N0YXJ0SW5kZXggKyBpXTtcbiAgICAgICAgICAgICAgICByb3dDb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByb3dDb21wb25lbnRzQnlJZFtvbGRSb3dOb2Rlc1tpXS5pZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dDb21wb25lbnRzLnNwbGljZShzdGFydEluZGV4LCBsZW4pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuYnVpbGRDaGlsZENvbXBvbmVudCA9IGZ1bmN0aW9uIChub2RlLCBzcHJlYWRzaGVldFRib2R5LCBzcHJlYWRzaGVldE5leHQsIHRpbWVBeGlzVGJvZHksIHRpbWVBeGlzTmV4dCkge1xuICAgICAgICBpZiAobm9kZS5ncm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBHcm91cFJvdyh0aGlzLmNvbnRleHQsIHNwcmVhZHNoZWV0VGJvZHksIHNwcmVhZHNoZWV0TmV4dCwgdGltZUF4aXNUYm9keSwgdGltZUF4aXNOZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLnJlc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc291cmNlUm93KHRoaXMuY29udGV4dCwgc3ByZWFkc2hlZXRUYm9keSwgc3ByZWFkc2hlZXROZXh0LCB0aW1lQXhpc1Rib2R5LCB0aW1lQXhpc05leHQsIHRoaXMudGltZUF4aXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUucmVuZGVyUm93cyA9IGZ1bmN0aW9uIChkYXRlUHJvZmlsZSwgZmFsbGJhY2tCdXNpbmVzc0hvdXJzLCBzcGxpdFByb3BzKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJvd05vZGVzID0gX2Eucm93Tm9kZXMsIHJvd0NvbXBvbmVudHMgPSBfYS5yb3dDb21wb25lbnRzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd05vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcm93Tm9kZSA9IHJvd05vZGVzW2ldO1xuICAgICAgICAgICAgdmFyIHJvd0NvbXBvbmVudCA9IHJvd0NvbXBvbmVudHNbaV07XG4gICAgICAgICAgICBpZiAocm93Tm9kZS5ncm91cCkge1xuICAgICAgICAgICAgICAgIHJvd0NvbXBvbmVudC5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICBzcHJlYWRzaGVldENvbENudDogdGhpcy5jb2xTcGVjcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGlkOiByb3dOb2RlLmlkLFxuICAgICAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiByb3dOb2RlLmlzRXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiByb3dOb2RlLmdyb3VwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSByb3dOb2RlLnJlc291cmNlO1xuICAgICAgICAgICAgICAgIHJvd0NvbXBvbmVudC5yZWNlaXZlUHJvcHMoX19hc3NpZ24oe30sIHNwbGl0UHJvcHNbcmVzb3VyY2UuaWRdLCB7IGRhdGVQcm9maWxlOiBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZDogdGhpcy5uZXh0RGF5VGhyZXNob2xkLCBidXNpbmVzc0hvdXJzOiByZXNvdXJjZS5idXNpbmVzc0hvdXJzIHx8IGZhbGxiYWNrQnVzaW5lc3NIb3VycywgY29sU3BlY3M6IHRoaXMuY29sU3BlY3MsIGlkOiByb3dOb2RlLmlkLCByb3dTcGFuczogcm93Tm9kZS5yb3dTcGFucywgZGVwdGg6IHJvd05vZGUuZGVwdGgsIGlzRXhwYW5kZWQ6IHJvd05vZGUuaXNFeHBhbmRlZCwgaGFzQ2hpbGRyZW46IHJvd05vZGUuaGFzQ2hpbGRyZW4sIHJlc291cmNlOiByb3dOb2RlLnJlc291cmNlIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0bykge1xuICAgICAgICAvLyBGWUk6IHRoaXMgb3JkZXJpbmcgaXMgcmVhbGx5IGltcG9ydGFudFxuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICB2YXIgaXNCYXNlU2l6aW5nID0gaXNSZXNpemUgfHwgY2FsZW5kYXIuaXNWaWV3VXBkYXRlZCB8fCBjYWxlbmRhci5pc0RhdGVzVXBkYXRlZCB8fCBjYWxlbmRhci5pc0V2ZW50c1VwZGF0ZWQ7XG4gICAgICAgIGlmIChpc0Jhc2VTaXppbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc3luY0hlYWRIZWlnaHRzKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVBeGlzLnVwZGF0ZVNpemUoaXNSZXNpemUsIHZpZXdIZWlnaHQgLSB0aGlzLm1pc2NIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgICAgICB0aGlzLnNwcmVhZHNoZWV0LnVwZGF0ZVNpemUoaXNSZXNpemUsIHZpZXdIZWlnaHQgLSB0aGlzLm1pc2NIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJvd1NpemluZ0NudCA9IHRoaXMudXBkYXRlUm93U2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICB0aGlzLmxhbmUudXBkYXRlU2l6ZShpc1Jlc2l6ZSk7IC8vIGlzIGVmZmljaWVudC4gdXNlcyBmbGFnc1xuICAgICAgICBpZiAoaXNCYXNlU2l6aW5nIHx8IHJvd1NpemluZ0NudCkge1xuICAgICAgICAgICAgdGhpcy5ib2R5U2Nyb2xsSm9pbmVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy50aW1lQXhpcy5sYXlvdXQuc2Nyb2xsSm9pbmVyLnVwZGF0ZSgpOyAvLyBoYWNrXG4gICAgICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucyA9IG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMudGltZUF4aXMuc2xhdHMuZWwsIHRoaXMucm93Q29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKHJvd0NvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByb3dDb21wb25lbnQudGltZUF4aXNUcjtcbiAgICAgICAgICAgIH0pLCBmYWxzZSwgLy8gaXNIb3Jpem9udGFsXG4gICAgICAgICAgICB0cnVlIC8vIGlzVmVydGljYWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucy5idWlsZCgpO1xuICAgICAgICAgICAgdGhpcy5pc1N0aWNreVNjcm9sbERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnN5bmNIZWFkSGVpZ2h0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNwcmVhZHNoZWV0SGVhZEVsID0gdGhpcy5zcHJlYWRzaGVldC5oZWFkZXIudGFibGVFbDtcbiAgICAgICAgdmFyIHRpbWVBeGlzSGVhZEVsID0gdGhpcy50aW1lQXhpcy5oZWFkZXIudGFibGVFbDtcbiAgICAgICAgc3ByZWFkc2hlZXRIZWFkRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgIHRpbWVBeGlzSGVhZEVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgoc3ByZWFkc2hlZXRIZWFkRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LCB0aW1lQXhpc0hlYWRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpO1xuICAgICAgICBzcHJlYWRzaGVldEhlYWRFbC5zdHlsZS5oZWlnaHQgPVxuICAgICAgICAgICAgdGltZUF4aXNIZWFkRWwuc3R5bGUuaGVpZ2h0ID0gbWF4ICsgJ3B4JztcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS51cGRhdGVSb3dTaXplcyA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSkge1xuICAgICAgICB2YXIgZGlydHlSb3dDb21wb25lbnRzID0gdGhpcy5yb3dDb21wb25lbnRzO1xuICAgICAgICBpZiAoIWlzUmVzaXplKSB7XG4gICAgICAgICAgICBkaXJ0eVJvd0NvbXBvbmVudHMgPSBkaXJ0eVJvd0NvbXBvbmVudHMuZmlsdGVyKGZ1bmN0aW9uIChyb3dDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93Q29tcG9uZW50LmlzU2l6ZURpcnR5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsQXJyYXlzID0gZGlydHlSb3dDb21wb25lbnRzLm1hcChmdW5jdGlvbiAocm93Q29tcG9uZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcm93Q29tcG9uZW50LmdldEhlaWdodEVscygpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gcmVzZXQgdG8gbmF0dXJhbCBoZWlnaHRzXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZWxBcnJheXNfMSA9IGVsQXJyYXlzOyBfaSA8IGVsQXJyYXlzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWxBcnJheSA9IGVsQXJyYXlzXzFbX2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBlbEFycmF5XzEgPSBlbEFycmF5OyBfYSA8IGVsQXJyYXlfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBlbEFycmF5XzFbX2FdO1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGxldCByb3dzIHVwZGF0ZSB0aGVpciBjb250ZW50cycgaGVpZ2h0c1xuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIGRpcnR5Um93Q29tcG9uZW50c18xID0gZGlydHlSb3dDb21wb25lbnRzOyBfYiA8IGRpcnR5Um93Q29tcG9uZW50c18xLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIHJvd0NvbXBvbmVudCA9IGRpcnR5Um93Q29tcG9uZW50c18xW19iXTtcbiAgICAgICAgICAgIHJvd0NvbXBvbmVudC51cGRhdGVTaXplKGlzUmVzaXplKTsgLy8gd2lsbCByZXNldCBpc1NpemVEaXJ0eVxuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhIZWlnaHRzID0gZWxBcnJheXMubWFwKGZ1bmN0aW9uIChlbEFycmF5KSB7XG4gICAgICAgICAgICB2YXIgbWF4SGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZWxBcnJheV8yID0gZWxBcnJheTsgX2kgPCBlbEFycmF5XzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZWxBcnJheV8yW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChtYXhIZWlnaHQgPT09IG51bGwgfHwgaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF4SGVpZ2h0O1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbEFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBfZCA9IGVsQXJyYXlzW2ldOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IF9kW19jXTtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSBtYXhIZWlnaHRzW2ldICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlydHlSb3dDb21wb25lbnRzLmxlbmd0aDtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5yb3dDb21wb25lbnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJvd0NvbXBvbmVudCA9IF9hW19pXTtcbiAgICAgICAgICAgIHJvd0NvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb3dOb2RlcyA9IFtdO1xuICAgICAgICB0aGlzLnJvd0NvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5zcHJlYWRzaGVldC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMudGltZUF4aXMuZGVzdHJveSgpO1xuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5yZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5nczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5nID0gX2NbX2JdO1xuICAgICAgICAgICAgcmVzb3VyY2VBcmVhV2lkdGhEcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcHJlYWRzaGVldEJvZHlTdGlja3lTY3JvbGxlci5kZXN0cm95KCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNhbGVuZGFyLnVucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCh0aGlzKTtcbiAgICB9O1xuICAgIC8vIE5vdyBJbmRpY2F0b3JcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuZ2V0Tm93SW5kaWNhdG9yVW5pdCA9IGZ1bmN0aW9uIChkYXRlUHJvZmlsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lQXhpcy5nZXROb3dJbmRpY2F0b3JVbml0KGRhdGVQcm9maWxlKTtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnJlbmRlck5vd0luZGljYXRvcihkYXRlKTtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS51bnJlbmRlck5vd0luZGljYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aW1lQXhpcy51bnJlbmRlck5vd0luZGljYXRvcigpO1xuICAgIH07XG4gICAgLy8gU2Nyb2xsaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhpcyBpcyB1c2VmdWwgZm9yIHNjcm9sbGluZyBwcmV2L25leHQgZGF0ZXMgd2hpbGUgcmVzb3VyY2UgaXMgc2Nyb2xsZWQgZG93blxuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5xdWVyeVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbCA9IF9zdXBlci5wcm90b3R5cGUucXVlcnlTY3JvbGwuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucmVzb3VyY2VTdG9yZSkge1xuICAgICAgICAgICAgX19hc3NpZ24oc2Nyb2xsLCB0aGlzLnF1ZXJ5UmVzb3VyY2VTY3JvbGwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjcm9sbDtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5hcHBseVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwsIGlzUmVzaXplKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuYXBwbHlTY3JvbGwuY2FsbCh0aGlzLCBzY3JvbGwsIGlzUmVzaXplKTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucmVzb3VyY2VTdG9yZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVJlc291cmNlU2Nyb2xsKHNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgdXBkYXRpbmcgc3RpY2t5c2Nyb2xsIHRvbyBvZnRlblxuICAgICAgICBpZiAoaXNSZXNpemUgfHwgdGhpcy5pc1N0aWNreVNjcm9sbERpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RpY2t5U2Nyb2xsRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc3ByZWFkc2hlZXRCb2R5U3RpY2t5U2Nyb2xsZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgICAgICAgdGhpcy50aW1lQXhpcy51cGRhdGVTdGlja3lTY3JvbGxlcnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmNvbXB1dGVEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVBeGlzLmNvbXB1dGVEYXRlU2Nyb2xsKGR1cmF0aW9uKTtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5xdWVyeURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVBeGlzLnF1ZXJ5RGF0ZVNjcm9sbCgpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmFwcGx5RGF0ZVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwpIHtcbiAgICAgICAgdGhpcy50aW1lQXhpcy5hcHBseURhdGVTY3JvbGwoc2Nyb2xsKTtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5xdWVyeVJlc291cmNlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCByb3dDb21wb25lbnRzID0gX2Eucm93Q29tcG9uZW50cywgcm93Tm9kZXMgPSBfYS5yb3dOb2RlcztcbiAgICAgICAgdmFyIHNjcm9sbCA9IHt9O1xuICAgICAgICB2YXIgc2Nyb2xsZXJUb3AgPSB0aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wOyAvLyBmaXhlZCBwb3NpdGlvblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd0NvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByb3dDb21wb25lbnQgPSByb3dDb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgdmFyIHJvd05vZGUgPSByb3dOb2Rlc1tpXTtcbiAgICAgICAgICAgIHZhciBlbCA9IHJvd0NvbXBvbmVudC50aW1lQXhpc1RyO1xuICAgICAgICAgICAgdmFyIGVsQm90dG9tID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tOyAvLyBmaXhlZCBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKGVsQm90dG9tID4gc2Nyb2xsZXJUb3ApIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwucm93SWQgPSByb3dOb2RlLmlkO1xuICAgICAgICAgICAgICAgIHNjcm9sbC5ib3R0b20gPSBlbEJvdHRvbSAtIHNjcm9sbGVyVG9wO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHdoYXQgYWJvdXQgbGVmdCBzY3JvbGwgc3RhdGUgZm9yIHNwcmVhZHNoZWV0IGFyZWE/XG4gICAgICAgIHJldHVybiBzY3JvbGw7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuYXBwbHlSZXNvdXJjZVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwpIHtcbiAgICAgICAgdmFyIHJvd0lkID0gc2Nyb2xsLmZvcmNlZFJvd0lkIHx8IHNjcm9sbC5yb3dJZDtcbiAgICAgICAgaWYgKHJvd0lkKSB7XG4gICAgICAgICAgICB2YXIgcm93Q29tcG9uZW50ID0gdGhpcy5yb3dDb21wb25lbnRzQnlJZFtyb3dJZF07XG4gICAgICAgICAgICBpZiAocm93Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gcm93Q29tcG9uZW50LnRpbWVBeGlzVHI7XG4gICAgICAgICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclRvcCA9IHRoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93UmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gKHNjcm9sbC5mb3JjZWRSb3dJZCA/XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dSZWN0LnRvcCA6IC8vIGp1c3QgdXNlIHRvcCBlZGdlXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dSZWN0LmJvdHRvbSAtIHNjcm9sbC5ib3R0b20pIC0gLy8gcGl4ZWxzIGZyb20gYm90dG9tIGVkZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyVG9wO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuc2V0U2Nyb2xsVG9wKHNjcm9sbFRvcCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ByZWFkc2hlZXQubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5zZXRTY3JvbGxUb3Aoc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRPRE86IHNjcm9sbFRvUmVzb3VyY2VcbiAgICAvLyBIaXQgU3lzdGVtXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmJ1aWxkUG9zaXRpb25DYWNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMuc2xhdHMudXBkYXRlU2l6ZSgpO1xuICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucy5idWlsZCgpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5SGl0ID0gZnVuY3Rpb24gKHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3ApIHtcbiAgICAgICAgdmFyIHJvd1Bvc2l0aW9ucyA9IHRoaXMucm93UG9zaXRpb25zO1xuICAgICAgICB2YXIgc2xhdHMgPSB0aGlzLnRpbWVBeGlzLnNsYXRzO1xuICAgICAgICB2YXIgcm93SW5kZXggPSByb3dQb3NpdGlvbnMudG9wVG9JbmRleChwb3NpdGlvblRvcCk7XG4gICAgICAgIGlmIChyb3dJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSB0aGlzLnJvd05vZGVzW3Jvd0luZGV4XS5yZXNvdXJjZTtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZSkgeyAvLyBub3QgYSBncm91cFxuICAgICAgICAgICAgICAgIHZhciBzbGF0SGl0ID0gc2xhdHMucG9zaXRpb25Ub0hpdChwb3NpdGlvbkxlZnQpO1xuICAgICAgICAgICAgICAgIGlmIChzbGF0SGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlU3Bhbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBzbGF0SGl0LmRhdGVTcGFuLnJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheTogc2xhdEhpdC5kYXRlU3Bhbi5hbGxEYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogc2xhdEhpdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBzbGF0SGl0LnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcm93UG9zaXRpb25zLnRvcHNbcm93SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogcm93UG9zaXRpb25zLmJvdHRvbXNbcm93SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWw6IHNsYXRIaXQuZGF5RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogMFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVzb3VyY2UgQXJlYVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5zZXRSZXNvdXJjZUFyZWFXaWR0aCA9IGZ1bmN0aW9uICh3aWR0aFZhbCkge1xuICAgICAgICB0aGlzLnJlc291cmNlQXJlYVdpZHRoID0gd2lkdGhWYWw7XG4gICAgICAgIGFwcGx5U3R5bGVQcm9wKHRoaXMucmVzb3VyY2VBcmVhSGVhZEVsLCAnd2lkdGgnLCB3aWR0aFZhbCB8fCAnJyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuaW5pdFJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXNvdXJjZUFyZWFEaXZpZGVyRWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuZmMtY29sLXJlc2l6ZXInKSk7XG4gICAgICAgIHZhciBFbGVtZW50RHJhZ2dpbmdJbXBsID0gdGhpcy5jYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZWxlbWVudERyYWdnaW5nSW1wbDtcbiAgICAgICAgaWYgKEVsZW1lbnREcmFnZ2luZ0ltcGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VBcmVhV2lkdGhEcmFnZ2luZ3MgPSByZXNvdXJjZUFyZWFEaXZpZGVyRWxzLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ2dpbmcgPSBuZXcgRWxlbWVudERyYWdnaW5nSW1wbChlbCk7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWdTdGFydFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3V2lkdGg7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkcmFnU3RhcnRXaWR0aCA9IF90aGlzLnJlc291cmNlQXJlYVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRyYWdTdGFydFdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1N0YXJ0V2lkdGggPSBfdGhpcy5yZXNvdXJjZUFyZWFIZWFkRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmlld1dpZHRoID0gX3RoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ21vdmUnLCBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IGRyYWdTdGFydFdpZHRoICsgcGV2LmRlbHRhWCAqIChfdGhpcy5pc1J0bCA/IC0xIDogMSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1dpZHRoID0gTWF0aC5tYXgobmV3V2lkdGgsIE1JTl9SRVNPVVJDRV9BUkVBX1dJRFRIKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3V2lkdGggPSBNYXRoLm1pbihuZXdXaWR0aCwgdmlld1dpZHRoIC0gTUlOX1JFU09VUkNFX0FSRUFfV0lEVEgpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRSZXNvdXJjZUFyZWFXaWR0aChuZXdXaWR0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0QXV0b1Njcm9sbEVuYWJsZWQoZmFsc2UpOyAvLyBiZWNhdXNlIGdldHMgd2VpcmQgd2l0aCBhdXRvLXNjcm9sbGluZyB0aW1lIGFyZWFcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhZ2dpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcubmVlZHNSZXNvdXJjZURhdGEgPSB0cnVlOyAvLyBmb3IgUmVzb3VyY2VWaWV3UHJvcHNcbiAgICByZXR1cm4gUmVzb3VyY2VUaW1lbGluZVZpZXc7XG59KFZpZXcpKTtcbmZ1bmN0aW9uIGhhc1Jlc291cmNlQnVzaW5lc3NIb3VycyhyZXNvdXJjZVN0b3JlKSB7XG4gICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF07XG4gICAgICAgIGlmIChyZXNvdXJjZS5idXNpbmVzc0hvdXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNOZXN0aW5nKG5vZGVzKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBub2Rlc18xID0gbm9kZXM7IF9pIDwgbm9kZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc18xW19pXTtcbiAgICAgICAgaWYgKG5vZGUuZ3JvdXApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUucmVzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgbWFpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZGVwczogW1Jlc291cmNlQ29tbW9uUGx1Z2luLCBUaW1lbGluZVBsdWdpbl0sXG4gICAgZGVmYXVsdFZpZXc6ICdyZXNvdXJjZVRpbWVsaW5lRGF5JyxcbiAgICB2aWV3czoge1xuICAgICAgICByZXNvdXJjZVRpbWVsaW5lOiB7XG4gICAgICAgICAgICBjbGFzczogUmVzb3VyY2VUaW1lbGluZVZpZXcsXG4gICAgICAgICAgICByZXNvdXJjZUFyZWFXaWR0aDogJzMwJScsXG4gICAgICAgICAgICByZXNvdXJjZXNJbml0aWFsbHlFeHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0OiB0cnVlIC8vIFRPRE86IG5vdCBEUlkgd2l0aCB0aGlzIHNhbWUgc2V0dGluZyBpbiB0aGUgbWFpbiB0aW1lbGluZSBjb25maWdcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUaW1lbGluZURheToge1xuICAgICAgICAgICAgdHlwZTogJ3Jlc291cmNlVGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc291cmNlVGltZWxpbmVXZWVrOiB7XG4gICAgICAgICAgICB0eXBlOiAncmVzb3VyY2VUaW1lbGluZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyB3ZWVrczogMSB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc291cmNlVGltZWxpbmVNb250aDoge1xuICAgICAgICAgICAgdHlwZTogJ3Jlc291cmNlVGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgbW9udGhzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUaW1lbGluZVllYXI6IHtcbiAgICAgICAgICAgIHR5cGU6ICdyZXNvdXJjZVRpbWVsaW5lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IHllYXJzOiAxIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtYWluO1xuZXhwb3J0IHsgUmVzb3VyY2VUaW1lbGluZVZpZXcgfTtcbiIsIi8qIVxuRnVsbENhbGVuZGFyIFRpbWVsaW5lIFBsdWdpbiB2NC4zLjBcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9zY2hlZHVsZXJcbihjKSAyMDE5IEFkYW0gU2hhd1xuKi9cblxuaW1wb3J0IHsgaHRtbFRvRWxlbWVudCwgZm9yY2VDbGFzc05hbWUsIGFwcGx5U3R5bGUsIGRlYm91bmNlLCBwcmV2ZW50RGVmYXVsdCwgU2Nyb2xsQ29tcG9uZW50LCBFbWl0dGVyTWl4aW4sIHJlbW92ZUVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQsIGNvbXB1dGVFZGdlcywgYXNSb3VnaE1zLCBpc1NpbmdsZURheSwgZ2V0RGF5Q2xhc3NlcywgZmluZEVsZW1lbnRzLCBDb21wb25lbnQsIFBvc2l0aW9uQ2FjaGUsIGZpbmRDaGlsZHJlbiwgaXNJbnQsIG11bHRpcGx5RHVyYXRpb24sIGNvbmZpZywgY3JlYXRlRm9ybWF0dGVyLCBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IsIGNyZWF0ZUR1cmF0aW9uLCB3aG9sZURpdmlkZUR1cmF0aW9ucywgYWRkRGF5cywgc3RhcnRPZkRheSwgY29tcHV0ZVZpc2libGVEYXlSYW5nZSwgYXNSb3VnaE1pbnV0ZXMsIHBhZFN0YXJ0LCBhc1JvdWdoU2Vjb25kcywgZGlmZldob2xlRGF5cywgYnVpbGRHb3RvQW5jaG9ySHRtbCwgaHRtbEVzY2FwZSwgdHJhbnNsYXRlUmVjdCwgcmFuZ2VDb250YWluc01hcmtlciwgY3NzVG9TdHIsIGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zLCBhcHBseVN0eWxlUHJvcCwgRmdFdmVudFJlbmRlcmVyLCBGaWxsUmVuZGVyZXIsIG1lbW9pemVSZW5kZXJpbmcsIERhdGVDb21wb25lbnQsIGludGVyc2VjdFJhbmdlcywgYWRkTXMsIFNsaWNlciwgVmlldywgY3JlYXRlUGx1Z2luIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxudmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcblxuLypcbkEgcmVjdGFuZ3VsYXIgYXJlYSBvZiBjb250ZW50IHRoYXQgbGl2ZXMgd2l0aGluIGEgU2Nyb2xsZXIuXG5DYW4gaGF2ZSBcImd1dHRlcnNcIiwgYXJlYXMgb2YgZGVhZCBzcGFjaW5nIGFyb3VuZCB0aGUgcGVyaW1ldGVyLlxuQWxzbyB2ZXJ5IHVzZWZ1bCBmb3IgZm9yY2luZyBhIHdpZHRoLCB3aGljaCBhIFNjcm9sbGVyIGNhbm5vdCBkbyBhbG9uZS5cbkhhcyBhIGNvbnRlbnQgYXJlYSB0aGF0IGxpdmVzIGFib3ZlIGEgYmFja2dyb3VuZCBhcmVhLlxuKi9cbnZhciBTY3JvbGxlckNhbnZhcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxlckNhbnZhcygpIHtcbiAgICAgICAgdGhpcy5ndXR0ZXJzID0ge307XG4gICAgICAgIHRoaXMuZWwgPSBodG1sVG9FbGVtZW50KFwiPGRpdiBjbGFzcz1cXFwiZmMtc2Nyb2xsZXItY2FudmFzXFxcIj4gPGRpdiBjbGFzcz1cXFwiZmMtY29udGVudFxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImZjLWJnXFxcIj48L2Rpdj4gPC9kaXY+XCIpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLmZjLWNvbnRlbnQnKTtcbiAgICAgICAgdGhpcy5iZ0VsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuZmMtYmcnKTtcbiAgICB9XG4gICAgLypcbiAgICBJZiBmYWxzeSwgcmVzZXRzIGFsbCB0aGUgZ3V0dGVycyB0byAwXG4gICAgKi9cbiAgICBTY3JvbGxlckNhbnZhcy5wcm90b3R5cGUuc2V0R3V0dGVycyA9IGZ1bmN0aW9uIChndXR0ZXJzKSB7XG4gICAgICAgIGlmICghZ3V0dGVycykge1xuICAgICAgICAgICAgdGhpcy5ndXR0ZXJzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfX2Fzc2lnbih0aGlzLmd1dHRlcnMsIGd1dHRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgIH07XG4gICAgU2Nyb2xsZXJDYW52YXMucHJvdG90eXBlLnNldFdpZHRoID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG4gICAgfTtcbiAgICBTY3JvbGxlckNhbnZhcy5wcm90b3R5cGUuc2V0TWluV2lkdGggPSBmdW5jdGlvbiAobWluV2lkdGgpIHtcbiAgICAgICAgdGhpcy5taW5XaWR0aCA9IG1pbldpZHRoO1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICB9O1xuICAgIFNjcm9sbGVyQ2FudmFzLnByb3RvdHlwZS5jbGVhcldpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLndpZHRoID0gbnVsbDtcbiAgICAgICAgdGhpcy5taW5XaWR0aCA9IG51bGw7XG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgIH07XG4gICAgU2Nyb2xsZXJDYW52YXMucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGd1dHRlcnMgPSBfYS5ndXR0ZXJzLCBlbCA9IF9hLmVsO1xuICAgICAgICAvLyBpcyBib3JkZXItYm94ICh3aWR0aCBpbmNsdWRlcyBwYWRkaW5nKVxuICAgICAgICBmb3JjZUNsYXNzTmFtZShlbCwgJ2ZjLWd1dHRlci1sZWZ0JywgZ3V0dGVycy5sZWZ0KTtcbiAgICAgICAgZm9yY2VDbGFzc05hbWUoZWwsICdmYy1ndXR0ZXItcmlnaHQnLCBndXR0ZXJzLnJpZ2h0KTtcbiAgICAgICAgZm9yY2VDbGFzc05hbWUoZWwsICdmYy1ndXR0ZXItdG9wJywgZ3V0dGVycy50b3ApO1xuICAgICAgICBmb3JjZUNsYXNzTmFtZShlbCwgJ2ZjLWd1dHRlci1ib3R0b20nLCBndXR0ZXJzLmJvdHRvbSk7XG4gICAgICAgIGFwcGx5U3R5bGUoZWwsIHtcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBndXR0ZXJzLmxlZnQgfHwgJycsXG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IGd1dHRlcnMucmlnaHQgfHwgJycsXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXJzLnRvcCB8fCAnJyxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IGd1dHRlcnMuYm90dG9tIHx8ICcnLFxuICAgICAgICAgICAgd2lkdGg6ICh0aGlzLndpZHRoICE9IG51bGwpID9cbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoICsgKGd1dHRlcnMubGVmdCB8fCAwKSArIChndXR0ZXJzLnJpZ2h0IHx8IDApIDpcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIG1pbldpZHRoOiAodGhpcy5taW5XaWR0aCAhPSBudWxsKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5taW5XaWR0aCArIChndXR0ZXJzLmxlZnQgfHwgMCkgKyAoZ3V0dGVycy5yaWdodCB8fCAwKSA6XG4gICAgICAgICAgICAgICAgJydcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcGx5U3R5bGUodGhpcy5iZ0VsLCB7XG4gICAgICAgICAgICBsZWZ0OiBndXR0ZXJzLmxlZnQgfHwgJycsXG4gICAgICAgICAgICByaWdodDogZ3V0dGVycy5yaWdodCB8fCAnJyxcbiAgICAgICAgICAgIHRvcDogZ3V0dGVycy50b3AgfHwgJycsXG4gICAgICAgICAgICBib3R0b206IGd1dHRlcnMuYm90dG9tIHx8ICcnXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFNjcm9sbGVyQ2FudmFzO1xufSgpKTtcblxudmFyIEVuaGFuY2VkU2Nyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVuaGFuY2VkU2Nyb2xsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW5oYW5jZWRTY3JvbGxlcihvdmVyZmxvd1gsIG92ZXJmbG93WSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvdmVyZmxvd1gsIG92ZXJmbG93WSkgfHwgdGhpcztcbiAgICAgICAgLy8gU2Nyb2xsIEV2ZW50c1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIF90aGlzLnJlcG9ydFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXBvcnRTY3JvbGxTdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMudHJpZ2dlcignc2Nyb2xsJyk7XG4gICAgICAgICAgICBfdGhpcy5pc01vdmluZyA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5yZXF1ZXN0TW92aW5nRW5kKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnJlcG9ydFNjcm9sbFN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1Njcm9sbGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdzY3JvbGxTdGFydCcsIF90aGlzLmlzVG91Y2hpbmcpOyAvLyBjcmVhdGVkIGluIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIHdpbGwgZmlyZSAqYmVmb3JlKiB0aGUgc2Nyb2xsIGV2ZW50IGlzIGZpcmVkXG4gICAgICAgIF90aGlzLnJlcG9ydFRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5pc1RvdWNoaW5nID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucmVwb3J0VG91Y2hFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNUb3VjaGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzVG91Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBpZiB0b3VjaCBzY3JvbGxpbmcgd2FzIHJlLWVuYWJsZWQgZHVyaW5nIGEgcmVjZW50IHRvdWNoIHNjcm9sbFxuICAgICAgICAgICAgICAgIC8vIHRoZW4gdW5iaW5kIHRoZSBoYW5kbGVycyB0aGF0IGFyZSBwcmV2ZW50aW5nIGl0IGZyb20gaGFwcGVuaW5nLlxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc1RvdWNoU2Nyb2xsRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy51bmJpbmRQcmV2ZW50VG91Y2hTY3JvbGwoKTsgLy8gd29uJ3QgZG8gYW55dGhpbmcgaWYgbm90IGJvdW5kXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB1c2VyIGVuZGVkIHRoZWlyIHRvdWNoLCBhbmQgdGhlIHNjcm9sbCBhcmVhIHdhc24ndCBtb3ZpbmcsXG4gICAgICAgICAgICAgICAgLy8gd2UgY29uc2lkZXIgdGhpcyB0byBiZSB0aGUgZW5kIG9mIHRoZSBzY3JvbGwuXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc01vdmluZykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXBvcnRTY3JvbGxFbmQoKTsgLy8gd29uJ3QgZmlyZSBpZiBhbHJlYWR5IGVuZGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1RvdWNoaW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzVG91Y2hTY3JvbGxFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMucmVxdWVzdE1vdmluZ0VuZCA9IGRlYm91bmNlKF90aGlzLnJlcG9ydE1vdmluZ0VuZCwgNTAwKTtcbiAgICAgICAgX3RoaXMuY2FudmFzID0gbmV3IFNjcm9sbGVyQ2FudmFzKCk7XG4gICAgICAgIF90aGlzLmVsLmFwcGVuZENoaWxkKF90aGlzLmNhbnZhcy5lbCk7XG4gICAgICAgIF90aGlzLmFwcGx5T3ZlcmZsb3coKTtcbiAgICAgICAgX3RoaXMuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMudW5iaW5kSGFuZGxlcnMoKTtcbiAgICB9O1xuICAgIC8vIFRvdWNoIHNjcm9sbCBwcmV2ZW50aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLmRpc2FibGVUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1RvdWNoU2Nyb2xsRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJpbmRQcmV2ZW50VG91Y2hTY3JvbGwoKTsgLy8gd2lsbCBiZSB1bmJvdW5kIGluIGVuYWJsZVRvdWNoU2Nyb2xsIG9yIHJlcG9ydFRvdWNoRW5kXG4gICAgfTtcbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5lbmFibGVUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1RvdWNoU2Nyb2xsRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIC8vIG9ubHkgaW1tZWRpYXRlbHkgdW5iaW5kIGlmIGEgdG91Y2ggZXZlbnQgaXMgTk9UIGluIHByb2dyZXNzLlxuICAgICAgICAvLyBvdGhlcndpc2UsIGl0IHdpbGwgYmUgaGFuZGxlZCBieSByZXBvcnRUb3VjaEVuZC5cbiAgICAgICAgaWYgKCF0aGlzLmlzVG91Y2hpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kUHJldmVudFRvdWNoU2Nyb2xsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLmJpbmRQcmV2ZW50VG91Y2hTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcmV2ZW50VG91Y2hTY3JvbGxIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsICh0aGlzLnByZXZlbnRUb3VjaFNjcm9sbEhhbmRsZXIgPSBwcmV2ZW50RGVmYXVsdCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS51bmJpbmRQcmV2ZW50VG91Y2hTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXZlbnRUb3VjaFNjcm9sbEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5wcmV2ZW50VG91Y2hTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMucHJldmVudFRvdWNoU2Nyb2xsSGFuZGxlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLmJpbmRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnJlcG9ydFNjcm9sbCk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMucmVwb3J0VG91Y2hTdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5yZXBvcnRUb3VjaEVuZCk7XG4gICAgfTtcbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS51bmJpbmRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnJlcG9ydFNjcm9sbCk7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMucmVwb3J0VG91Y2hTdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5yZXBvcnRUb3VjaEVuZCk7XG4gICAgfTtcbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5yZXBvcnRNb3ZpbmdFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gb25seSBlbmQgdGhlIHNjcm9sbCBpZiBub3QgY3VycmVudGx5IHRvdWNoaW5nLlxuICAgICAgICAvLyBpZiB0b3VjaGluZywgdGhlIHNjcm9sbGluZyB3aWxsIGVuZCBsYXRlciwgb24gdG91Y2hlbmQuXG4gICAgICAgIGlmICghdGhpcy5pc1RvdWNoaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydFNjcm9sbEVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5yZXBvcnRTY3JvbGxFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbEVuZCcpO1xuICAgICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBIb3Jpem9udGFsIFNjcm9sbCBOb3JtYWxpemF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQyNzY2MTkvYmV0dGVyLXdheS10by1nZXQtdGhlLXZpZXdwb3J0LW9mLWEtc2Nyb2xsYWJsZS1kaXYtaW4tcnRsLW1vZGUvMjQzOTQzNzYjMjQzOTQzNzZcbiAgICAvLyBUT0RPOiBtb3ZlIGFsbCB0aGlzIHRvIHV0aWwgZnVuY3Rpb25zXG4gICAgLypcbiAgICBJZiBSVEwsIGFuZCBzY3JvbGxlZCB0byB0aGUgbGVmdCwgcmV0dXJucyBORUdBVElWRSB2YWx1ZSAobGlrZSBGaXJlZm94KVxuICAgICovXG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5kaXJlY3Rpb247XG4gICAgICAgIHZhciB2YWwgPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgICAgc3dpdGNoIChnZXRSdGxTY3JvbGxTeXN0ZW0oKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Bvc2l0aXZlJzpcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gKHZhbCArIGVsLmNsaWVudFdpZHRoKSAtIGVsLnNjcm9sbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZXZlcnNlJzpcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuICAgIC8qXG4gICAgQWNjZXB0cyBhIE5FR0FUSVZFIHZhbHVlIGZvciB3aGVuIHNjcm9sbGVkIGluIFJUTFxuICAgICovXG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5kaXJlY3Rpb247XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJ0bFNjcm9sbFN5c3RlbSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAodmFsIC0gZWwuY2xpZW50V2lkdGgpICsgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAtdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gdmFsO1xuICAgIH07XG4gICAgLypcbiAgICBBbHdheXMgcmV0dXJucyB0aGUgbnVtYmVyIG9mIHBpeGVscyBzY3JvbGxlZCBmcm9tIHRoZSBsZWZ0bW9zdCBwb3NpdGlvbiAoZXZlbiBpZiBSVEwpLlxuICAgIEFsd2F5cyBwb3NpdGl2ZS5cbiAgICAqL1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbEZyb21MZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHZhbCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJ0bFNjcm9sbFN5c3RlbSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbmVnYXRpdmUnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAodmFsIC0gZWwuY2xpZW50V2lkdGgpICsgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAoLXZhbCAtIGVsLmNsaWVudFdpZHRoKSArIGVsLnNjcm9sbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgcmV0dXJuIEVuaGFuY2VkU2Nyb2xsZXI7XG59KFNjcm9sbENvbXBvbmVudCkpO1xuRW1pdHRlck1peGluLm1peEludG8oRW5oYW5jZWRTY3JvbGxlcik7XG4vLyBIb3Jpem9udGFsIFNjcm9sbCBTeXN0ZW0gRGV0ZWN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgX3J0bFNjcm9sbFN5c3RlbTtcbmZ1bmN0aW9uIGdldFJ0bFNjcm9sbFN5c3RlbSgpIHtcbiAgICByZXR1cm4gX3J0bFNjcm9sbFN5c3RlbSB8fCAoX3J0bFNjcm9sbFN5c3RlbSA9IGRldGVjdFJ0bFNjcm9sbFN5c3RlbSgpKTtcbn1cbmZ1bmN0aW9uIGRldGVjdFJ0bFNjcm9sbFN5c3RlbSgpIHtcbiAgICB2YXIgZWwgPSBodG1sVG9FbGVtZW50KFwiPGRpdiBzdHlsZT1cXFwiIHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtMTAwMHB4OyB3aWR0aDogMXB4OyBoZWlnaHQ6IDFweDsgb3ZlcmZsb3c6IHNjcm9sbDsgZGlyZWN0aW9uOiBydGw7IGZvbnQtc2l6ZTogMTAwcHg7IFxcXCI+QTwvZGl2PlwiKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICB2YXIgc3lzdGVtO1xuICAgIGlmIChlbC5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICBzeXN0ZW0gPSAncG9zaXRpdmUnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IDE7XG4gICAgICAgIGlmIChlbC5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICAgICAgc3lzdGVtID0gJ3JldmVyc2UnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3lzdGVtID0gJ25lZ2F0aXZlJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gc3lzdGVtO1xufVxuXG4vKlxuQSBTY3JvbGxlciwgYnV0IHdpdGggYSB3cmFwcGluZyBkaXYgdGhhdCBhbGxvd3MgXCJjbGlwcGluZ1wiIGF3YXkgb2YgbmF0aXZlIHNjcm9sbGJhcnMsXG5naXZpbmcgdGhlIGFwcGVhcmFuY2UgdGhhdCB0aGVyZSBhcmUgbm8gc2Nyb2xsYmFycy5cbiovXG52YXIgQ2xpcHBlZFNjcm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qXG4gICAgUmVjZWl2ZWQgb3ZlcmZsb3dzIGNhbiBiZSBzZXQgdG8gJ2NsaXBwZWQnLCBtZWFuaW5nIHNjcm9sbGJhcnMgc2hvdWxkbid0IGJlIHZpc2libGVcbiAgICB0byB0aGUgdXNlciwgYnV0IHRoZSBhcmVhIHNob3VsZCBzdGlsbCBzY3JvbGwuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBDbGlwcGVkU2Nyb2xsZXIob3ZlcmZsb3dYLCBvdmVyZmxvd1ksIHBhcmVudEVsKSB7XG4gICAgICAgIHRoaXMuaXNIU2Nyb2xsYmFyc0NsaXBwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1ZTY3JvbGxiYXJzQ2xpcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAob3ZlcmZsb3dYID09PSAnY2xpcHBlZC1zY3JvbGwnKSB7XG4gICAgICAgICAgICBvdmVyZmxvd1ggPSAnc2Nyb2xsJztcbiAgICAgICAgICAgIHRoaXMuaXNIU2Nyb2xsYmFyc0NsaXBwZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdmVyZmxvd1kgPT09ICdjbGlwcGVkLXNjcm9sbCcpIHtcbiAgICAgICAgICAgIG92ZXJmbG93WSA9ICdzY3JvbGwnO1xuICAgICAgICAgICAgdGhpcy5pc1ZTY3JvbGxiYXJzQ2xpcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmhhbmNlZFNjcm9sbCA9IG5ldyBFbmhhbmNlZFNjcm9sbGVyKG92ZXJmbG93WCwgb3ZlcmZsb3dZKTtcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGhpcy5lbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ZjLXNjcm9sbGVyLWNsaXAnXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmVuaGFuY2VkU2Nyb2xsLmVsKTtcbiAgICB9XG4gICAgQ2xpcHBlZFNjcm9sbGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgQ2xpcHBlZFNjcm9sbGVyLnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW5oYW5jZWRTY3JvbGwgPSB0aGlzLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICB2YXIgc2Nyb2xsRWwgPSBlbmhhbmNlZFNjcm9sbC5lbDtcbiAgICAgICAgdmFyIGVkZ2VzID0gY29tcHV0ZUVkZ2VzKHNjcm9sbEVsKTtcbiAgICAgICAgdmFyIGNzc1Byb3BzID0geyBtYXJnaW5MZWZ0OiAwLCBtYXJnaW5SaWdodDogMCwgbWFyZ2luVG9wOiAwLCBtYXJnaW5Cb3R0b206IDAgfTtcbiAgICAgICAgLy8gZ2l2ZSB0aGUgaW5uZXIgc2Nyb2xsaW5nIGRpdiBuZWdhdGl2ZSBtYXJnaW5zIHNvIHRoYXQgaXRzIHNjcm9sbGJhcnNcbiAgICAgICAgLy8gYXJlIG51ZGdlZCBvdXRzaWRlIG9mIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHdyYXBwZXIsIHdoaWNoIGlzIG92ZXJmbG93OmhpZGRlblxuICAgICAgICBpZiAodGhpcy5pc1ZTY3JvbGxiYXJzQ2xpcHBlZCkge1xuICAgICAgICAgICAgY3NzUHJvcHMubWFyZ2luTGVmdCA9IC1lZGdlcy5zY3JvbGxiYXJMZWZ0O1xuICAgICAgICAgICAgY3NzUHJvcHMubWFyZ2luUmlnaHQgPSAtZWRnZXMuc2Nyb2xsYmFyUmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNIU2Nyb2xsYmFyc0NsaXBwZWQpIHtcbiAgICAgICAgICAgIGNzc1Byb3BzLm1hcmdpbkJvdHRvbSA9IC1lZGdlcy5zY3JvbGxiYXJCb3R0b207XG4gICAgICAgIH1cbiAgICAgICAgYXBwbHlTdHlsZShzY3JvbGxFbCwgY3NzUHJvcHMpO1xuICAgICAgICAvLyBpZiB3ZSBhcmUgYXR0ZW1wdGluZyB0byBoaWRlIHRoZSBzY3JvbGxiYXJzIG9mZnNjcmVlbiwgT1NYL2lPUyB3aWxsIHN0aWxsXG4gICAgICAgIC8vIGRpc3BsYXkgdGhlIGZsb2F0aW5nIHNjcm9sbGJhcnMuIGF0dGFjaCBhIGNsYXNzTmFtZSB0byBmb3JjZS1oaWRlIHRoZW0uXG4gICAgICAgIGlmICgodGhpcy5pc0hTY3JvbGxiYXJzQ2xpcHBlZCB8fCAoZW5oYW5jZWRTY3JvbGwub3ZlcmZsb3dYID09PSAnaGlkZGVuJykpICYmIC8vIHNob3VsZCBuZXZlciBzaG93P1xuICAgICAgICAgICAgKHRoaXMuaXNWU2Nyb2xsYmFyc0NsaXBwZWQgfHwgKGVuaGFuY2VkU2Nyb2xsLm92ZXJmbG93WSA9PT0gJ2hpZGRlbicpKSAmJiAvLyBzaG91bGQgbmV2ZXIgc2hvdz9cbiAgICAgICAgICAgICEoIC8vIGRvZXNuJ3QgaGF2ZSBhbnkgc2Nyb2xsYmFyIG1hc3NcbiAgICAgICAgICAgIGVkZ2VzLnNjcm9sbGJhckxlZnQgfHxcbiAgICAgICAgICAgICAgICBlZGdlcy5zY3JvbGxiYXJSaWdodCB8fFxuICAgICAgICAgICAgICAgIGVkZ2VzLnNjcm9sbGJhckJvdHRvbSkpIHtcbiAgICAgICAgICAgIHNjcm9sbEVsLmNsYXNzTGlzdC5hZGQoJ2ZjLW5vLXNjcm9sbGJhcnMnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNjcm9sbEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZjLW5vLXNjcm9sbGJhcnMnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2xpcHBlZFNjcm9sbGVyLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZW5oYW5jZWRTY3JvbGwuc2V0SGVpZ2h0KGhlaWdodCk7XG4gICAgfTtcbiAgICAvKlxuICAgIEFjY291bnRzIGZvciAnY2xpcHBlZCcgc2Nyb2xsYmFyc1xuICAgICovXG4gICAgQ2xpcHBlZFNjcm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxiYXJXaWR0aHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3aWR0aHMgPSB0aGlzLmVuaGFuY2VkU2Nyb2xsLmdldFNjcm9sbGJhcldpZHRocygpO1xuICAgICAgICBpZiAodGhpcy5pc1ZTY3JvbGxiYXJzQ2xpcHBlZCkge1xuICAgICAgICAgICAgd2lkdGhzLmxlZnQgPSAwO1xuICAgICAgICAgICAgd2lkdGhzLnJpZ2h0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0hTY3JvbGxiYXJzQ2xpcHBlZCkge1xuICAgICAgICAgICAgd2lkdGhzLmJvdHRvbSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZHRocztcbiAgICB9O1xuICAgIHJldHVybiBDbGlwcGVkU2Nyb2xsZXI7XG59KCkpO1xuXG52YXIgU2Nyb2xsSm9pbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbEpvaW5lcihheGlzLCBzY3JvbGxlcnMpIHtcbiAgICAgICAgdGhpcy5heGlzID0gYXhpcztcbiAgICAgICAgdGhpcy5zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbGVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxlciA9IF9hW19pXTtcbiAgICAgICAgICAgIHRoaXMuaW5pdFNjcm9sbGVyKHNjcm9sbGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTY3JvbGxKb2luZXIucHJvdG90eXBlLmluaXRTY3JvbGxlciA9IGZ1bmN0aW9uIChzY3JvbGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZW5oYW5jZWRTY3JvbGwgPSBzY3JvbGxlci5lbmhhbmNlZFNjcm9sbDtcbiAgICAgICAgLy8gd2hlbiB0aGUgdXNlciBzY3JvbGxzIHZpYSBtb3VzZXdoZWVsLCB3ZSBrbm93IGZvciBzdXJlIHRoZSB0YXJnZXRcbiAgICAgICAgLy8gc2Nyb2xsZXIgc2hvdWxkIGJlIHRoZSBtYXN0ZXIuIGNhcHR1cmUgdGhlIHZhcmlvdXMgeC1icm93c2VyIGV2ZW50cyB0aGF0IGZpcmUuXG4gICAgICAgIHZhciBvblNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFzc2lnbk1hc3RlclNjcm9sbGVyKHNjcm9sbGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgJ3doZWVsIG1vdXNld2hlZWwgRG9tTW91c2VTY3JvbGwgTW96TW91c2VQaXhlbFNjcm9sbCcuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldk5hbWUpIHtcbiAgICAgICAgICAgIGVuaGFuY2VkU2Nyb2xsLmVsLmFkZEV2ZW50TGlzdGVuZXIoZXZOYW1lLCBvblNjcm9sbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBlbmhhbmNlZFNjcm9sbFxuICAgICAgICAgICAgLm9uKCdzY3JvbGxTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMubWFzdGVyU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hc3NpZ25NYXN0ZXJTY3JvbGxlcihzY3JvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxlciA9PT0gX3RoaXMubWFzdGVyU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gX3RoaXMuc2Nyb2xsZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJTY3JvbGxlciA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyU2Nyb2xsZXIgIT09IHNjcm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF90aGlzLmF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdob3Jpem9udGFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5lbC5zY3JvbGxMZWZ0ID0gZW5oYW5jZWRTY3JvbGwuZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmVydGljYWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLnNldFNjcm9sbFRvcChlbmhhbmNlZFNjcm9sbC5nZXRTY3JvbGxUb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdzY3JvbGxFbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsZXIgPT09IF90aGlzLm1hc3RlclNjcm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudW5hc3NpZ25NYXN0ZXJTY3JvbGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFNjcm9sbEpvaW5lci5wcm90b3R5cGUuYXNzaWduTWFzdGVyU2Nyb2xsZXIgPSBmdW5jdGlvbiAoc2Nyb2xsZXIpIHtcbiAgICAgICAgdGhpcy51bmFzc2lnbk1hc3RlclNjcm9sbGVyKCk7XG4gICAgICAgIHRoaXMubWFzdGVyU2Nyb2xsZXIgPSBzY3JvbGxlcjtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG90aGVyU2Nyb2xsZXIgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAob3RoZXJTY3JvbGxlciAhPT0gc2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBvdGhlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmRpc2FibGVUb3VjaFNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxKb2luZXIucHJvdG90eXBlLnVuYXNzaWduTWFzdGVyU2Nyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm1hc3RlclNjcm9sbGVyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyU2Nyb2xsZXIgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgb3RoZXJTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5lbmFibGVUb3VjaFNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXN0ZXJTY3JvbGxlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEpvaW5lci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYWxsV2lkdGhzID0gdGhpcy5zY3JvbGxlcnMubWFwKGZ1bmN0aW9uIChzY3JvbGxlcikgeyByZXR1cm4gc2Nyb2xsZXIuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7IH0pO1xuICAgICAgICB2YXIgbWF4TGVmdCA9IDA7XG4gICAgICAgIHZhciBtYXhSaWdodCA9IDA7XG4gICAgICAgIHZhciBtYXhUb3AgPSAwO1xuICAgICAgICB2YXIgbWF4Qm90dG9tID0gMDtcbiAgICAgICAgdmFyIHdpZHRocztcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYWxsV2lkdGhzXzEgPSBhbGxXaWR0aHM7IF9pIDwgYWxsV2lkdGhzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB3aWR0aHMgPSBhbGxXaWR0aHNfMVtfaV07XG4gICAgICAgICAgICBtYXhMZWZ0ID0gTWF0aC5tYXgobWF4TGVmdCwgd2lkdGhzLmxlZnQpO1xuICAgICAgICAgICAgbWF4UmlnaHQgPSBNYXRoLm1heChtYXhSaWdodCwgd2lkdGhzLnJpZ2h0KTtcbiAgICAgICAgICAgIG1heFRvcCA9IE1hdGgubWF4KG1heFRvcCwgd2lkdGhzLnRvcCk7XG4gICAgICAgICAgICBtYXhCb3R0b20gPSBNYXRoLm1heChtYXhCb3R0b20sIHdpZHRocy5ib3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNjcm9sbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNjcm9sbGVyID0gdGhpcy5zY3JvbGxlcnNbaV07XG4gICAgICAgICAgICB3aWR0aHMgPSBhbGxXaWR0aHNbaV07XG4gICAgICAgICAgICBzY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuc2V0R3V0dGVycyh0aGlzLmF4aXMgPT09ICdob3Jpem9udGFsJyA/XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBtYXhMZWZ0IC0gd2lkdGhzLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBtYXhSaWdodCAtIHdpZHRocy5yaWdodFxuICAgICAgICAgICAgICAgIH0gOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBtYXhUb3AgLSB3aWR0aHMudG9wLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IG1heEJvdHRvbSAtIHdpZHRocy5ib3R0b21cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNjcm9sbEpvaW5lcjtcbn0oKSk7XG5cbnZhciBIZWFkZXJCb2R5TGF5b3V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qXG4gICAgdmVydGljYWxTY3JvbGwgPSAnYXV0bycgfCAnY2xpcHBlZC1zY3JvbGwnXG4gICAgKi9cbiAgICBmdW5jdGlvbiBIZWFkZXJCb2R5TGF5b3V0KGhlYWRlckNvbnRhaW5lckVsLCBib2R5Q29udGFpbmVyRWwsIHZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyU2Nyb2xsZXIgPSBuZXcgQ2xpcHBlZFNjcm9sbGVyKCdjbGlwcGVkLXNjcm9sbCcsICdoaWRkZW4nLCBoZWFkZXJDb250YWluZXJFbCk7XG4gICAgICAgIHRoaXMuYm9keVNjcm9sbGVyID0gbmV3IENsaXBwZWRTY3JvbGxlcignYXV0bycsIHZlcnRpY2FsU2Nyb2xsLCBib2R5Q29udGFpbmVyRWwpO1xuICAgICAgICB0aGlzLnNjcm9sbEpvaW5lciA9IG5ldyBTY3JvbGxKb2luZXIoJ2hvcml6b250YWwnLCBbXG4gICAgICAgICAgICB0aGlzLmhlYWRlclNjcm9sbGVyLFxuICAgICAgICAgICAgdGhpcy5ib2R5U2Nyb2xsZXJcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIEhlYWRlckJvZHlMYXlvdXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyU2Nyb2xsZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJvZHlTY3JvbGxlci5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBIZWFkZXJCb2R5TGF5b3V0LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAodG90YWxIZWlnaHQsIGlzQXV0bykge1xuICAgICAgICB2YXIgYm9keUhlaWdodDtcbiAgICAgICAgaWYgKGlzQXV0bykge1xuICAgICAgICAgICAgYm9keUhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJvZHlIZWlnaHQgPSB0b3RhbEhlaWdodCAtIHRoaXMucXVlcnlIZWFkSGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib2R5U2Nyb2xsZXIuc2V0SGVpZ2h0KGJvZHlIZWlnaHQpO1xuICAgICAgICB0aGlzLmhlYWRlclNjcm9sbGVyLnVwZGF0ZVNpemUoKTsgLy8gYWRqdXN0cyBndXR0ZXJzIGFuZCBjbGFzc05hbWVzXG4gICAgICAgIHRoaXMuYm9keVNjcm9sbGVyLnVwZGF0ZVNpemUoKTsgLy8gYWRqdXN0cyBndXR0ZXJzIGFuZCBjbGFzc05hbWVzXG4gICAgICAgIHRoaXMuc2Nyb2xsSm9pbmVyLnVwZGF0ZSgpO1xuICAgIH07XG4gICAgSGVhZGVyQm9keUxheW91dC5wcm90b3R5cGUucXVlcnlIZWFkSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuY29udGVudEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICB9O1xuICAgIHJldHVybiBIZWFkZXJCb2R5TGF5b3V0O1xufSgpKTtcblxudmFyIFRpbWVsaW5lSGVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lbGluZUhlYWRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZUhlYWRlcihjb250ZXh0LCBwYXJlbnRFbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChfdGhpcy50YWJsZUVsID0gY3JlYXRlRWxlbWVudCgndGFibGUnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IF90aGlzLnRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVIZWFkZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy50YWJsZUVsKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBUaW1lbGluZUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRoaXMucmVuZGVyRGF0ZXMocHJvcHMudERhdGVQcm9maWxlKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lSGVhZGVyLnByb3RvdHlwZS5yZW5kZXJEYXRlcyA9IGZ1bmN0aW9uICh0RGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZGF0ZUVudiA9IF9hLmRhdGVFbnYsIHRoZW1lID0gX2EudGhlbWU7XG4gICAgICAgIHZhciBjZWxsUm93cyA9IHREYXRlUHJvZmlsZS5jZWxsUm93cztcbiAgICAgICAgdmFyIGxhc3RSb3cgPSBjZWxsUm93c1tjZWxsUm93cy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIGlzQ2hyb25vID0gYXNSb3VnaE1zKHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsKSA+IGFzUm91Z2hNcyh0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKTtcbiAgICAgICAgdmFyIG9uZURheSA9IGlzU2luZ2xlRGF5KHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pO1xuICAgICAgICB2YXIgaHRtbCA9ICc8Y29sZ3JvdXA+JztcbiAgICAgICAgLy8gbmVlZHMgdG8gYmUgYSBjb2wgZm9yIGVhY2ggYm9keSBzbGF0LiBoZWFkZXIgY2VsbHMgd2lsbCBoYXZlIGNvbHNwYW5zXG4gICAgICAgIGZvciAodmFyIGkgPSB0RGF0ZVByb2ZpbGUuc2xvdENudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBodG1sICs9ICc8Y29sLz4nO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gJzwvY29sZ3JvdXA+JztcbiAgICAgICAgaHRtbCArPSAnPHRib2R5Pic7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY2VsbFJvd3NfMSA9IGNlbGxSb3dzOyBfaSA8IGNlbGxSb3dzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcm93Q2VsbHMgPSBjZWxsUm93c18xW19pXTtcbiAgICAgICAgICAgIHZhciBpc0xhc3QgPSByb3dDZWxscyA9PT0gbGFzdFJvdztcbiAgICAgICAgICAgIGh0bWwgKz0gJzx0cicgKyAoaXNDaHJvbm8gJiYgaXNMYXN0ID8gJyBjbGFzcz1cImZjLWNocm9ub1wiJyA6ICcnKSArICc+JztcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgcm93Q2VsbHNfMSA9IHJvd0NlbGxzOyBfYiA8IHJvd0NlbGxzXzEubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGwgPSByb3dDZWxsc18xW19iXTtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyQ2VsbENsYXNzTmFtZXMgPSBbdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldEhlYWRlcicpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5pc1dlZWtTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJDZWxsQ2xhc3NOYW1lcy5wdXNoKCdmYy1lbS1jZWxsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvbmVEYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ2VsbENsYXNzTmFtZXMgPSBoZWFkZXJDZWxsQ2xhc3NOYW1lcy5jb25jYXQoZ2V0RGF5Q2xhc3NlcyhjZWxsLmRhdGUsIHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUsIHRoaXMuY29udGV4dCwgdHJ1ZSkgLy8gYWRkcyBcInRvZGF5XCIgY2xhc3MgYW5kIG90aGVyIGRheS1iYXNlZCBjbGFzc2VzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWwgKz1cbiAgICAgICAgICAgICAgICAgICAgJzx0aCBjbGFzcz1cIicgKyBoZWFkZXJDZWxsQ2xhc3NOYW1lcy5qb2luKCcgJykgKyAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgZGF0YS1kYXRlPVwiJyArIGRhdGVFbnYuZm9ybWF0SXNvKGNlbGwuZGF0ZSwgeyBvbWl0VGltZTogIXREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSwgb21pdFRpbWVab25lT2Zmc2V0OiB0cnVlIH0pICsgJ1wiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2VsbC5jb2xzcGFuID4gMSA/ICcgY29sc3Bhbj1cIicgKyBjZWxsLmNvbHNwYW4gKyAnXCInIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWNlbGwtY29udGVudFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zcGFuSHRtbCArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC90aD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCArPSAnPC90cj4nO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gJzwvdGJvZHk+JztcbiAgICAgICAgdGhpcy50YWJsZUVsLmlubmVySFRNTCA9IGh0bWw7IC8vIFRPRE86IGRvZXMgdGhpcyB3b3JrIGNyb3NzLWJyb3dzZXI/XG4gICAgICAgIHRoaXMuc2xhdENvbEVscyA9IGZpbmRFbGVtZW50cyh0aGlzLnRhYmxlRWwsICdjb2wnKTtcbiAgICAgICAgdGhpcy5pbm5lckVscyA9IGZpbmRFbGVtZW50cyh0aGlzLnRhYmxlRWwucXVlcnlTZWxlY3RvcigndHI6bGFzdC1jaGlsZCcpLCAvLyBjb21wb3VuZCBzZWxlY3RvciB3b24ndCB3b3JrIGJlY2F1c2Ugb2YgcXVlcnktcm9vdCBwcm9ibGVtXG4gICAgICAgICd0aCAuZmMtY2VsbC10ZXh0Jyk7XG4gICAgICAgIGZpbmRFbGVtZW50cyh0aGlzLnRhYmxlRWwucXVlcnlTZWxlY3RvckFsbCgndHI6bm90KDpsYXN0LWNoaWxkKScpLCAvLyBjb21wb3VuZCBzZWxlY3RvciB3b24ndCB3b3JrIGJlY2F1c2Ugb2YgcXVlcnktcm9vdCBwcm9ibGVtXG4gICAgICAgICd0aCAuZmMtY2VsbC10ZXh0JykuZm9yRWFjaChmdW5jdGlvbiAoaW5uZXJFbCkge1xuICAgICAgICAgICAgaW5uZXJFbC5jbGFzc0xpc3QuYWRkKCdmYy1zdGlja3knKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVIZWFkZXI7XG59KENvbXBvbmVudCkpO1xuXG52YXIgVGltZWxpbmVTbGF0cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZWxpbmVTbGF0cywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZVNsYXRzKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKF90aGlzLmVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy1zbGF0cycgfSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVsaW5lU2xhdHMucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRoaXMucmVuZGVyRGF0ZXMocHJvcHMudERhdGVQcm9maWxlKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lU2xhdHMucHJvdG90eXBlLnJlbmRlckRhdGVzID0gZnVuY3Rpb24gKHREYXRlUHJvZmlsZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0aGVtZSA9IF9hLnRoZW1lLCB2aWV3ID0gX2EudmlldywgZGF0ZUVudiA9IF9hLmRhdGVFbnY7XG4gICAgICAgIHZhciBzbG90RGF0ZXMgPSB0RGF0ZVByb2ZpbGUuc2xvdERhdGVzLCBpc1dlZWtTdGFydHMgPSB0RGF0ZVByb2ZpbGUuaXNXZWVrU3RhcnRzO1xuICAgICAgICB2YXIgaHRtbCA9ICc8dGFibGUgY2xhc3M9XCInICsgdGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlR3JpZCcpICsgJ1wiPicgK1xuICAgICAgICAgICAgJzxjb2xncm91cD4nO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsb3REYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaHRtbCArPSAnPGNvbC8+JztcbiAgICAgICAgfVxuICAgICAgICBodG1sICs9ICc8L2NvbGdyb3VwPic7XG4gICAgICAgIGh0bWwgKz0gJzx0Ym9keT48dHI+JztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbG90RGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5zbGF0Q2VsbEh0bWwoc2xvdERhdGVzW2ldLCBpc1dlZWtTdGFydHNbaV0sIHREYXRlUHJvZmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSAnPC90cj48L3Rib2R5PjwvdGFibGU+JztcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLnNsYXRDb2xFbHMgPSBmaW5kRWxlbWVudHModGhpcy5lbCwgJ2NvbCcpO1xuICAgICAgICB0aGlzLnNsYXRFbHMgPSBmaW5kRWxlbWVudHModGhpcy5lbCwgJ3RkJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xvdERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2aWV3LnB1YmxpY2x5VHJpZ2dlcignZGF5UmVuZGVyJywgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoc2xvdERhdGVzW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgZWw6IHRoaXMuc2xhdEVsc1tpXSxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogdmlld1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0ZXJDb29yZENhY2hlID0gbmV3IFBvc2l0aW9uQ2FjaGUodGhpcy5lbCwgdGhpcy5zbGF0RWxzLCB0cnVlLCAvLyBpc0hvcml6b250YWxcbiAgICAgICAgZmFsc2UgLy8gaXNWZXJ0aWNhbFxuICAgICAgICApO1xuICAgICAgICAvLyBmb3IgdGhlIGlubmVyIGRpdnMgd2l0aGluIHRoZSBzbGF0c1xuICAgICAgICAvLyB1c2VkIGZvciBldmVudCByZW5kZXJpbmcgYW5kIHNjcm9sbFRpbWUsIHRvIGRpc3JlZ2FyZCBzbGF0IGJvcmRlclxuICAgICAgICB0aGlzLmlubmVyQ29vcmRDYWNoZSA9IG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMuZWwsIGZpbmRDaGlsZHJlbih0aGlzLnNsYXRFbHMsICdkaXYnKSwgdHJ1ZSwgLy8gaXNIb3Jpem9udGFsXG4gICAgICAgIGZhbHNlIC8vIGlzVmVydGljYWxcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lU2xhdHMucHJvdG90eXBlLnNsYXRDZWxsSHRtbCA9IGZ1bmN0aW9uIChkYXRlLCBpc0VtLCB0RGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdGhlbWUgPSBfYS50aGVtZSwgZGF0ZUVudiA9IF9hLmRhdGVFbnY7XG4gICAgICAgIHZhciBjbGFzc2VzO1xuICAgICAgICBpZiAodERhdGVQcm9maWxlLmlzVGltZVNjYWxlKSB7XG4gICAgICAgICAgICBjbGFzc2VzID0gW107XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goaXNJbnQoZGF0ZUVudi5jb3VudER1cmF0aW9uc0JldHdlZW4odERhdGVQcm9maWxlLm5vcm1hbGl6ZWRSYW5nZS5zdGFydCwgZGF0ZSwgdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwpKSA/XG4gICAgICAgICAgICAgICAgJ2ZjLW1ham9yJyA6XG4gICAgICAgICAgICAgICAgJ2ZjLW1pbm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGFzc2VzID0gZ2V0RGF5Q2xhc3NlcyhkYXRlLCB0aGlzLnByb3BzLmRhdGVQcm9maWxlLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1kYXknKTtcbiAgICAgICAgfVxuICAgICAgICBjbGFzc2VzLnVuc2hpZnQodGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSk7XG4gICAgICAgIGlmIChpc0VtKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWVtLWNlbGwnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJzx0ZCBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgJyBkYXRhLWRhdGU9XCInICsgZGF0ZUVudi5mb3JtYXRJc28oZGF0ZSwgeyBvbWl0VGltZTogIXREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSwgb21pdFRpbWVab25lT2Zmc2V0OiB0cnVlIH0pICsgJ1wiJyArXG4gICAgICAgICAgICAnPjxkaXY+PC9kaXY+PC90ZD4nO1xuICAgIH07XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vdXRlckNvb3JkQ2FjaGUuYnVpbGQoKTtcbiAgICAgICAgdGhpcy5pbm5lckNvb3JkQ2FjaGUuYnVpbGQoKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lU2xhdHMucHJvdG90eXBlLnBvc2l0aW9uVG9IaXQgPSBmdW5jdGlvbiAobGVmdFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBvdXRlckNvb3JkQ2FjaGUgPSB0aGlzLm91dGVyQ29vcmRDYWNoZTtcbiAgICAgICAgdmFyIHREYXRlUHJvZmlsZSA9IHRoaXMucHJvcHMudERhdGVQcm9maWxlO1xuICAgICAgICB2YXIgc2xhdEluZGV4ID0gb3V0ZXJDb29yZENhY2hlLmxlZnRUb0luZGV4KGxlZnRQb3NpdGlvbik7XG4gICAgICAgIGlmIChzbGF0SW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gc29tZXdoYXQgc2ltaWxhciB0byB3aGF0IFRpbWVHcmlkIGRvZXMuIGNvbnNvbGlkYXRlP1xuICAgICAgICAgICAgdmFyIHNsYXRXaWR0aCA9IG91dGVyQ29vcmRDYWNoZS5nZXRXaWR0aChzbGF0SW5kZXgpO1xuICAgICAgICAgICAgdmFyIHBhcnRpYWwgPSB0aGlzLmlzUnRsID9cbiAgICAgICAgICAgICAgICAob3V0ZXJDb29yZENhY2hlLnJpZ2h0c1tzbGF0SW5kZXhdIC0gbGVmdFBvc2l0aW9uKSAvIHNsYXRXaWR0aCA6XG4gICAgICAgICAgICAgICAgKGxlZnRQb3NpdGlvbiAtIG91dGVyQ29vcmRDYWNoZS5sZWZ0c1tzbGF0SW5kZXhdKSAvIHNsYXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBsb2NhbFNuYXBJbmRleCA9IE1hdGguZmxvb3IocGFydGlhbCAqIHREYXRlUHJvZmlsZS5zbmFwc1BlclNsb3QpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5kYXRlRW52LmFkZCh0RGF0ZVByb2ZpbGUuc2xvdERhdGVzW3NsYXRJbmRleF0sIG11bHRpcGx5RHVyYXRpb24odERhdGVQcm9maWxlLnNuYXBEdXJhdGlvbiwgbG9jYWxTbmFwSW5kZXgpKTtcbiAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLmRhdGVFbnYuYWRkKHN0YXJ0LCB0RGF0ZVByb2ZpbGUuc25hcER1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0ZVNwYW46IHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9LFxuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6ICF0aGlzLnByb3BzLnREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF5RWw6IHRoaXMuc2xhdENvbEVsc1tzbGF0SW5kZXhdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IG91dGVyQ29vcmRDYWNoZS5sZWZ0c1tzbGF0SW5kZXhdLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBvdXRlckNvb3JkQ2FjaGUucmlnaHRzW3NsYXRJbmRleF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVTbGF0cztcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBNSU5fQVVUT19MQUJFTFMgPSAxODsgLy8gbW9yZSB0aGFuIGAxMmAgbW9udGhzIGJ1dCBsZXNzIHRoYXQgYDI0YCBob3Vyc1xudmFyIE1BWF9BVVRPX1NMT1RTX1BFUl9MQUJFTCA9IDY7IC8vIGFsbG93cyA2IDEwLW1pbiBzbG90cyBpbiBhbiBob3VyXG52YXIgTUFYX0FVVE9fQ0VMTFMgPSAyMDA7IC8vIGFsbG93cyA0LWRheXMgdG8gaGF2ZSBhIDozMCBzbG90IGR1cmF0aW9uXG5jb25maWcuTUFYX1RJTUVMSU5FX1NMT1RTID0gMTAwMDtcbi8vIHBvdGVudGlhbCBuaWNlIHZhbHVlcyBmb3Igc2xvdC1kdXJhdGlvbiBhbmQgaW50ZXJ2YWwtZHVyYXRpb25cbnZhciBTVE9DS19TVUJfRFVSQVRJT05TID0gW1xuICAgIHsgeWVhcnM6IDEgfSxcbiAgICB7IG1vbnRoczogMSB9LFxuICAgIHsgZGF5czogMSB9LFxuICAgIHsgaG91cnM6IDEgfSxcbiAgICB7IG1pbnV0ZXM6IDMwIH0sXG4gICAgeyBtaW51dGVzOiAxNSB9LFxuICAgIHsgbWludXRlczogMTAgfSxcbiAgICB7IG1pbnV0ZXM6IDUgfSxcbiAgICB7IG1pbnV0ZXM6IDEgfSxcbiAgICB7IHNlY29uZHM6IDMwIH0sXG4gICAgeyBzZWNvbmRzOiAxNSB9LFxuICAgIHsgc2Vjb25kczogMTAgfSxcbiAgICB7IHNlY29uZHM6IDUgfSxcbiAgICB7IHNlY29uZHM6IDEgfSxcbiAgICB7IG1pbGxpc2Vjb25kczogNTAwIH0sXG4gICAgeyBtaWxsaXNlY29uZHM6IDEwMCB9LFxuICAgIHsgbWlsbGlzZWNvbmRzOiAxMCB9LFxuICAgIHsgbWlsbGlzZWNvbmRzOiAxIH1cbl07XG5mdW5jdGlvbiBidWlsZFRpbWVsaW5lRGF0ZVByb2ZpbGUoZGF0ZVByb2ZpbGUsIHZpZXcpIHtcbiAgICB2YXIgZGF0ZUVudiA9IHZpZXcuZGF0ZUVudjtcbiAgICB2YXIgdERhdGVQcm9maWxlID0ge1xuICAgICAgICBsYWJlbEludGVydmFsOiBxdWVyeUR1cmF0aW9uT3B0aW9uKHZpZXcsICdzbG90TGFiZWxJbnRlcnZhbCcpLFxuICAgICAgICBzbG90RHVyYXRpb246IHF1ZXJ5RHVyYXRpb25PcHRpb24odmlldywgJ3Nsb3REdXJhdGlvbicpXG4gICAgfTtcbiAgICB2YWxpZGF0ZUxhYmVsQW5kU2xvdCh0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KTsgLy8gdmFsaWRhdGUgYWZ0ZXIgY29tcHV0ZWQgZ3JpZCBkdXJhdGlvblxuICAgIGVuc3VyZUxhYmVsSW50ZXJ2YWwodERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudik7XG4gICAgZW5zdXJlU2xvdER1cmF0aW9uKHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpO1xuICAgIHZhciBpbnB1dCA9IHZpZXcub3B0KCdzbG90TGFiZWxGb3JtYXQnKTtcbiAgICB2YXIgcmF3Rm9ybWF0cyA9IEFycmF5LmlzQXJyYXkoaW5wdXQpID9cbiAgICAgICAgaW5wdXRcbiAgICAgICAgOiAoaW5wdXQgIT0gbnVsbCkgP1xuICAgICAgICAgICAgW2lucHV0XVxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNvbXB1dGVIZWFkZXJGb3JtYXRzKHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYsIHZpZXcpO1xuICAgIHREYXRlUHJvZmlsZS5oZWFkZXJGb3JtYXRzID0gcmF3Rm9ybWF0cy5tYXAoZnVuY3Rpb24gKHJhd0Zvcm1hdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRm9ybWF0dGVyKHJhd0Zvcm1hdCk7XG4gICAgfSk7XG4gICAgdERhdGVQcm9maWxlLmlzVGltZVNjYWxlID0gQm9vbGVhbih0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uLm1pbGxpc2Vjb25kcyk7XG4gICAgdmFyIGxhcmdlVW5pdCA9IG51bGw7XG4gICAgaWYgKCF0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIHNsb3RVbml0ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pLnVuaXQ7XG4gICAgICAgIGlmICgveWVhcnxtb250aHx3ZWVrLy50ZXN0KHNsb3RVbml0KSkge1xuICAgICAgICAgICAgbGFyZ2VVbml0ID0gc2xvdFVuaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdERhdGVQcm9maWxlLmxhcmdlVW5pdCA9IGxhcmdlVW5pdDtcbiAgICB0RGF0ZVByb2ZpbGUuZW1waGFzaXplV2Vla3MgPVxuICAgICAgICBpc1NpbmdsZURheSh0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKSAmJlxuICAgICAgICAgICAgY3VycmVudFJhbmdlQXMoJ3dlZWtzJywgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpID49IDIgJiZcbiAgICAgICAgICAgICF2aWV3Lm9wdCgnYnVzaW5lc3NIb3VycycpO1xuICAgIC8qXG4gICAgY29uc29sZS5sb2coJ2xhYmVsIGludGVydmFsID0nLCB0aW1lbGluZVZpZXcubGFiZWxJbnRlcnZhbC5odW1hbml6ZSgpKVxuICAgIGNvbnNvbGUubG9nKCdzbG90IGR1cmF0aW9uID0nLCB0aW1lbGluZVZpZXcuc2xvdER1cmF0aW9uLmh1bWFuaXplKCkpXG4gICAgY29uc29sZS5sb2coJ2hlYWRlciBmb3JtYXRzID0nLCB0aW1lbGluZVZpZXcuaGVhZGVyRm9ybWF0cylcbiAgICBjb25zb2xlLmxvZygnaXNUaW1lU2NhbGUnLCB0aW1lbGluZVZpZXcuaXNUaW1lU2NhbGUpXG4gICAgY29uc29sZS5sb2coJ2xhcmdlVW5pdCcsIHRpbWVsaW5lVmlldy5sYXJnZVVuaXQpXG4gICAgKi9cbiAgICB2YXIgcmF3U25hcER1cmF0aW9uID0gdmlldy5vcHQoJ3NuYXBEdXJhdGlvbicpO1xuICAgIHZhciBzbmFwRHVyYXRpb247XG4gICAgdmFyIHNuYXBzUGVyU2xvdDtcbiAgICBpZiAocmF3U25hcER1cmF0aW9uKSB7XG4gICAgICAgIHNuYXBEdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHJhd1NuYXBEdXJhdGlvbik7XG4gICAgICAgIHNuYXBzUGVyU2xvdCA9IHdob2xlRGl2aWRlRHVyYXRpb25zKHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24sIHNuYXBEdXJhdGlvbik7XG4gICAgICAgIC8vIF4gVE9ETzogd2FybmluZyBpZiBub3Qgd2hvbGU/XG4gICAgfVxuICAgIGlmIChzbmFwc1BlclNsb3QgPT0gbnVsbCkge1xuICAgICAgICBzbmFwRHVyYXRpb24gPSB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uO1xuICAgICAgICBzbmFwc1BlclNsb3QgPSAxO1xuICAgIH1cbiAgICB0RGF0ZVByb2ZpbGUuc25hcER1cmF0aW9uID0gc25hcER1cmF0aW9uO1xuICAgIHREYXRlUHJvZmlsZS5zbmFwc1BlclNsb3QgPSBzbmFwc1BlclNsb3Q7XG4gICAgLy8gbW9yZS4uLlxuICAgIHZhciB0aW1lV2luZG93TXMgPSBhc1JvdWdoTXMoZGF0ZVByb2ZpbGUubWF4VGltZSkgLSBhc1JvdWdoTXMoZGF0ZVByb2ZpbGUubWluVGltZSk7XG4gICAgLy8gVE9ETzogd2h5IG5vdCB1c2Ugbm9ybWFsaXplUmFuZ2UhP1xuICAgIHZhciBub3JtYWxpemVkU3RhcnQgPSBub3JtYWxpemVEYXRlKGRhdGVQcm9maWxlLnJlbmRlclJhbmdlLnN0YXJ0LCB0RGF0ZVByb2ZpbGUsIGRhdGVFbnYpO1xuICAgIHZhciBub3JtYWxpemVkRW5kID0gbm9ybWFsaXplRGF0ZShkYXRlUHJvZmlsZS5yZW5kZXJSYW5nZS5lbmQsIHREYXRlUHJvZmlsZSwgZGF0ZUVudik7XG4gICAgLy8gYXBwbHkgbWluVGltZS9tYXhUaW1lXG4gICAgLy8gVE9ETzogVmlldyBzaG91bGQgYmUgcmVzcG9uc2libGUuXG4gICAgaWYgKHREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSkge1xuICAgICAgICBub3JtYWxpemVkU3RhcnQgPSBkYXRlRW52LmFkZChub3JtYWxpemVkU3RhcnQsIGRhdGVQcm9maWxlLm1pblRpbWUpO1xuICAgICAgICBub3JtYWxpemVkRW5kID0gZGF0ZUVudi5hZGQoYWRkRGF5cyhub3JtYWxpemVkRW5kLCAtMSksIGRhdGVQcm9maWxlLm1heFRpbWUpO1xuICAgIH1cbiAgICB0RGF0ZVByb2ZpbGUudGltZVdpbmRvd01zID0gdGltZVdpbmRvd01zO1xuICAgIHREYXRlUHJvZmlsZS5ub3JtYWxpemVkUmFuZ2UgPSB7IHN0YXJ0OiBub3JtYWxpemVkU3RhcnQsIGVuZDogbm9ybWFsaXplZEVuZCB9O1xuICAgIHZhciBzbG90RGF0ZXMgPSBbXTtcbiAgICB2YXIgZGF0ZSA9IG5vcm1hbGl6ZWRTdGFydDtcbiAgICB3aGlsZSAoZGF0ZSA8IG5vcm1hbGl6ZWRFbmQpIHtcbiAgICAgICAgaWYgKGlzVmFsaWREYXRlKGRhdGUsIHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIHZpZXcpKSB7XG4gICAgICAgICAgICBzbG90RGF0ZXMucHVzaChkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRlID0gZGF0ZUVudi5hZGQoZGF0ZSwgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbik7XG4gICAgfVxuICAgIHREYXRlUHJvZmlsZS5zbG90RGF0ZXMgPSBzbG90RGF0ZXM7XG4gICAgLy8gbW9yZS4uLlxuICAgIHZhciBzbmFwSW5kZXggPSAtMTtcbiAgICB2YXIgc25hcERpZmYgPSAwOyAvLyBpbmRleCBvZiB0aGUgZGlmZiA6KFxuICAgIHZhciBzbmFwRGlmZlRvSW5kZXggPSBbXTtcbiAgICB2YXIgc25hcEluZGV4VG9EaWZmID0gW107XG4gICAgZGF0ZSA9IG5vcm1hbGl6ZWRTdGFydDtcbiAgICB3aGlsZSAoZGF0ZSA8IG5vcm1hbGl6ZWRFbmQpIHtcbiAgICAgICAgaWYgKGlzVmFsaWREYXRlKGRhdGUsIHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIHZpZXcpKSB7XG4gICAgICAgICAgICBzbmFwSW5kZXgrKztcbiAgICAgICAgICAgIHNuYXBEaWZmVG9JbmRleC5wdXNoKHNuYXBJbmRleCk7XG4gICAgICAgICAgICBzbmFwSW5kZXhUb0RpZmYucHVzaChzbmFwRGlmZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzbmFwRGlmZlRvSW5kZXgucHVzaChzbmFwSW5kZXggKyAwLjUpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGUgPSBkYXRlRW52LmFkZChkYXRlLCB0RGF0ZVByb2ZpbGUuc25hcER1cmF0aW9uKTtcbiAgICAgICAgc25hcERpZmYrKztcbiAgICB9XG4gICAgdERhdGVQcm9maWxlLnNuYXBEaWZmVG9JbmRleCA9IHNuYXBEaWZmVG9JbmRleDtcbiAgICB0RGF0ZVByb2ZpbGUuc25hcEluZGV4VG9EaWZmID0gc25hcEluZGV4VG9EaWZmO1xuICAgIHREYXRlUHJvZmlsZS5zbmFwQ250ID0gc25hcEluZGV4ICsgMTsgLy8gaXMgYWx3YXlzIG9uZSBiZWhpbmRcbiAgICB0RGF0ZVByb2ZpbGUuc2xvdENudCA9IHREYXRlUHJvZmlsZS5zbmFwQ250IC8gdERhdGVQcm9maWxlLnNuYXBzUGVyU2xvdDtcbiAgICAvLyBtb3JlLi4uXG4gICAgdERhdGVQcm9maWxlLmlzV2Vla1N0YXJ0cyA9IGJ1aWxkSXNXZWVrU3RhcnRzKHREYXRlUHJvZmlsZSwgZGF0ZUVudik7XG4gICAgdERhdGVQcm9maWxlLmNlbGxSb3dzID0gYnVpbGRDZWxsUm93cyh0RGF0ZVByb2ZpbGUsIGRhdGVFbnYsIHZpZXcpO1xuICAgIHJldHVybiB0RGF0ZVByb2ZpbGU7XG59XG4vKlxuc25hcHMgdG8gYXBwcm9wcmlhdGUgdW5pdFxuKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURhdGUoZGF0ZSwgdERhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgdmFyIG5vcm1hbERhdGUgPSBkYXRlO1xuICAgIGlmICghdERhdGVQcm9maWxlLmlzVGltZVNjYWxlKSB7XG4gICAgICAgIG5vcm1hbERhdGUgPSBzdGFydE9mRGF5KG5vcm1hbERhdGUpO1xuICAgICAgICBpZiAodERhdGVQcm9maWxlLmxhcmdlVW5pdCkge1xuICAgICAgICAgICAgbm9ybWFsRGF0ZSA9IGRhdGVFbnYuc3RhcnRPZihub3JtYWxEYXRlLCB0RGF0ZVByb2ZpbGUubGFyZ2VVbml0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsRGF0ZTtcbn1cbi8qXG5zbmFwcyB0byBhcHByb3ByaWF0ZSB1bml0XG4qL1xuZnVuY3Rpb24gbm9ybWFsaXplUmFuZ2UocmFuZ2UsIHREYXRlUHJvZmlsZSwgZGF0ZUVudikge1xuICAgIGlmICghdERhdGVQcm9maWxlLmlzVGltZVNjYWxlKSB7XG4gICAgICAgIHJhbmdlID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZShyYW5nZSk7XG4gICAgICAgIGlmICh0RGF0ZVByb2ZpbGUubGFyZ2VVbml0KSB7XG4gICAgICAgICAgICB2YXIgZGF5UmFuZ2UgPSByYW5nZTsgLy8gcHJlc2VydmUgb3JpZ2luYWwgcmVzdWx0XG4gICAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogZGF0ZUVudi5zdGFydE9mKHJhbmdlLnN0YXJ0LCB0RGF0ZVByb2ZpbGUubGFyZ2VVbml0KSxcbiAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbnYuc3RhcnRPZihyYW5nZS5lbmQsIHREYXRlUHJvZmlsZS5sYXJnZVVuaXQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gaWYgZGF0ZSBpcyBwYXJ0aWFsbHkgdGhyb3VnaCB0aGUgaW50ZXJ2YWwsIG9yIGlzIGluIHRoZSBzYW1lIGludGVydmFsIGFzIHRoZSBzdGFydCxcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIGV4Y2x1c2l2ZSBlbmQgYmUgdGhlICpuZXh0KiBpbnRlcnZhbFxuICAgICAgICAgICAgaWYgKHJhbmdlLmVuZC52YWx1ZU9mKCkgIT09IGRheVJhbmdlLmVuZC52YWx1ZU9mKCkgfHwgcmFuZ2UuZW5kIDw9IHJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiByYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW52LmFkZChyYW5nZS5lbmQsIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlLCB0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCB2aWV3KSB7XG4gICAgaWYgKHZpZXcuZGF0ZVByb2ZpbGVHZW5lcmF0b3IuaXNIaWRkZW5EYXkoZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHRoZSB0aW1lIGlzIHdpdGhpbiBtaW5UaW1lL21heFRpbWUsIHdoaWNoIG1heSBoYXZlIHdhY2t5IHZhbHVlc1xuICAgICAgICB2YXIgZGF5ID0gc3RhcnRPZkRheShkYXRlKTtcbiAgICAgICAgdmFyIHRpbWVNcyA9IGRhdGUudmFsdWVPZigpIC0gZGF5LnZhbHVlT2YoKTtcbiAgICAgICAgdmFyIG1zID0gdGltZU1zIC0gYXNSb3VnaE1zKGRhdGVQcm9maWxlLm1pblRpbWUpOyAvLyBtaWxsaXNlY29uZHMgc2luY2UgbWluVGltZVxuICAgICAgICBtcyA9ICgobXMgJSA4NjQwMDAwMCkgKyA4NjQwMDAwMCkgJSA4NjQwMDAwMDsgLy8gbWFrZSBuZWdhdGl2ZSB2YWx1ZXMgd3JhcCB0byAyNGhyIGNsb2NrXG4gICAgICAgIHJldHVybiBtcyA8IHREYXRlUHJvZmlsZS50aW1lV2luZG93TXM7IC8vIGJlZm9yZSB0aGUgbWF4VGltZT9cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXJ5RHVyYXRpb25PcHRpb24odmlldywgbmFtZSkge1xuICAgIHZhciBpbnB1dCA9IHZpZXcub3B0KG5hbWUpO1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihpbnB1dCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVMYWJlbEFuZFNsb3QodERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikge1xuICAgIHZhciBjdXJyZW50UmFuZ2UgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2U7XG4gICAgLy8gbWFrZSBzdXJlIGxhYmVsSW50ZXJ2YWwgZG9lc24ndCBleGNlZWQgdGhlIG1heCBudW1iZXIgb2YgY2VsbHNcbiAgICBpZiAodERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwpIHtcbiAgICAgICAgdmFyIGxhYmVsQ250ID0gZGF0ZUVudi5jb3VudER1cmF0aW9uc0JldHdlZW4oY3VycmVudFJhbmdlLnN0YXJ0LCBjdXJyZW50UmFuZ2UuZW5kLCB0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCk7XG4gICAgICAgIGlmIChsYWJlbENudCA+IGNvbmZpZy5NQVhfVElNRUxJTkVfU0xPVFMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2xvdExhYmVsSW50ZXJ2YWwgcmVzdWx0cyBpbiB0b28gbWFueSBjZWxscycpO1xuICAgICAgICAgICAgdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSBzbG90RHVyYXRpb24gZG9lc24ndCBleGNlZWQgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNlbGxzXG4gICAgaWYgKHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHNsb3RDbnQgPSBkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2VlbihjdXJyZW50UmFuZ2Uuc3RhcnQsIGN1cnJlbnRSYW5nZS5lbmQsIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pO1xuICAgICAgICBpZiAoc2xvdENudCA+IGNvbmZpZy5NQVhfVElNRUxJTkVfU0xPVFMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2xvdER1cmF0aW9uIHJlc3VsdHMgaW4gdG9vIG1hbnkgY2VsbHMnKTtcbiAgICAgICAgICAgIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSBsYWJlbEludGVydmFsIGlzIGEgbXVsdGlwbGUgb2Ygc2xvdER1cmF0aW9uXG4gICAgaWYgKHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsICYmIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHNsb3RzUGVyTGFiZWwgPSB3aG9sZURpdmlkZUR1cmF0aW9ucyh0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCwgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbik7XG4gICAgICAgIGlmIChzbG90c1BlckxhYmVsID09PSBudWxsIHx8IHNsb3RzUGVyTGFiZWwgPCAxKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3Nsb3RMYWJlbEludGVydmFsIG11c3QgYmUgYSBtdWx0aXBsZSBvZiBzbG90RHVyYXRpb24nKTtcbiAgICAgICAgICAgIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW5zdXJlTGFiZWxJbnRlcnZhbCh0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZSA9IGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZTtcbiAgICB2YXIgbGFiZWxJbnRlcnZhbCA9IHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsO1xuICAgIGlmICghbGFiZWxJbnRlcnZhbCkge1xuICAgICAgICAvLyBjb21wdXRlIGJhc2VkIG9mZiB0aGUgc2xvdCBkdXJhdGlvblxuICAgICAgICAvLyBmaW5kIHRoZSBsYXJnZXN0IGxhYmVsIGludGVydmFsIHdpdGggYW4gYWNjZXB0YWJsZSBzbG90cy1wZXItbGFiZWxcbiAgICAgICAgdmFyIGlucHV0ID0gdm9pZCAwO1xuICAgICAgICBpZiAodERhdGVQcm9maWxlLnNsb3REdXJhdGlvbikge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBTVE9DS19TVUJfRFVSQVRJT05TXzEgPSBTVE9DS19TVUJfRFVSQVRJT05TOyBfaSA8IFNUT0NLX1NVQl9EVVJBVElPTlNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IFNUT0NLX1NVQl9EVVJBVElPTlNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIHRyeUxhYmVsSW50ZXJ2YWwgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCk7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3RzUGVyTGFiZWwgPSB3aG9sZURpdmlkZUR1cmF0aW9ucyh0cnlMYWJlbEludGVydmFsLCB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdHNQZXJMYWJlbCAhPT0gbnVsbCAmJiBzbG90c1BlckxhYmVsIDw9IE1BWF9BVVRPX1NMT1RTX1BFUl9MQUJFTCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbEludGVydmFsID0gdHJ5TGFiZWxJbnRlcnZhbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdXNlIHRoZSBzbG90IGR1cmF0aW9uIGFzIGEgbGFzdCByZXNvcnRcbiAgICAgICAgICAgIGlmICghbGFiZWxJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGxhYmVsSW50ZXJ2YWwgPSB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29tcHV0ZSBiYXNlZCBvZmYgdGhlIHZpZXcncyBkdXJhdGlvblxuICAgICAgICAgICAgLy8gZmluZCB0aGUgbGFyZ2VzdCBsYWJlbCBpbnRlcnZhbCB0aGF0IHlpZWxkcyB0aGUgbWluaW11bSBudW1iZXIgb2YgbGFiZWxzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIFNUT0NLX1NVQl9EVVJBVElPTlNfMiA9IFNUT0NLX1NVQl9EVVJBVElPTlM7IF9hIDwgU1RPQ0tfU1VCX0RVUkFUSU9OU18yLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gU1RPQ0tfU1VCX0RVUkFUSU9OU18yW19hXTtcbiAgICAgICAgICAgICAgICBsYWJlbEludGVydmFsID0gY3JlYXRlRHVyYXRpb24oaW5wdXQpO1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbENudCA9IGRhdGVFbnYuY291bnREdXJhdGlvbnNCZXR3ZWVuKGN1cnJlbnRSYW5nZS5zdGFydCwgY3VycmVudFJhbmdlLmVuZCwgbGFiZWxJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsQ250ID49IE1JTl9BVVRPX0xBQkVMUykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwgPSBsYWJlbEludGVydmFsO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxJbnRlcnZhbDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVNsb3REdXJhdGlvbih0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZSA9IGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZTtcbiAgICB2YXIgc2xvdER1cmF0aW9uID0gdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbjtcbiAgICBpZiAoIXNsb3REdXJhdGlvbikge1xuICAgICAgICB2YXIgbGFiZWxJbnRlcnZhbCA9IGVuc3VyZUxhYmVsSW50ZXJ2YWwodERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudik7IC8vIHdpbGwgY29tcHV0ZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgLy8gY29tcHV0ZSBiYXNlZCBvZmYgdGhlIGxhYmVsIGludGVydmFsXG4gICAgICAgIC8vIGZpbmQgdGhlIGxhcmdlc3Qgc2xvdCBkdXJhdGlvbiB0aGF0IGlzIGRpZmZlcmVudCBmcm9tIGxhYmVsSW50ZXJ2YWwsIGJ1dCBzdGlsbCBhY2NlcHRhYmxlXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgU1RPQ0tfU1VCX0RVUkFUSU9OU18zID0gU1RPQ0tfU1VCX0RVUkFUSU9OUzsgX2kgPCBTVE9DS19TVUJfRFVSQVRJT05TXzMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBTVE9DS19TVUJfRFVSQVRJT05TXzNbX2ldO1xuICAgICAgICAgICAgdmFyIHRyeVNsb3REdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0KTtcbiAgICAgICAgICAgIHZhciBzbG90c1BlckxhYmVsID0gd2hvbGVEaXZpZGVEdXJhdGlvbnMobGFiZWxJbnRlcnZhbCwgdHJ5U2xvdER1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChzbG90c1BlckxhYmVsICE9PSBudWxsICYmIHNsb3RzUGVyTGFiZWwgPiAxICYmIHNsb3RzUGVyTGFiZWwgPD0gTUFYX0FVVE9fU0xPVFNfUEVSX0xBQkVMKSB7XG4gICAgICAgICAgICAgICAgc2xvdER1cmF0aW9uID0gdHJ5U2xvdER1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG9ubHkgYWxsb3cgdGhlIHZhbHVlIGlmIGl0IHdvbid0IGV4Y2VlZCB0aGUgdmlldydzICMgb2Ygc2xvdHMgbGltaXRcbiAgICAgICAgaWYgKHNsb3REdXJhdGlvbikge1xuICAgICAgICAgICAgdmFyIHNsb3RDbnQgPSBkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2VlbihjdXJyZW50UmFuZ2Uuc3RhcnQsIGN1cnJlbnRSYW5nZS5lbmQsIHNsb3REdXJhdGlvbik7XG4gICAgICAgICAgICBpZiAoc2xvdENudCA+IE1BWF9BVVRPX0NFTExTKSB7XG4gICAgICAgICAgICAgICAgc2xvdER1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB1c2UgdGhlIGxhYmVsIGludGVydmFsIGFzIGEgbGFzdCByZXNvcnRcbiAgICAgICAgaWYgKCFzbG90RHVyYXRpb24pIHtcbiAgICAgICAgICAgIHNsb3REdXJhdGlvbiA9IGxhYmVsSW50ZXJ2YWw7XG4gICAgICAgIH1cbiAgICAgICAgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbiA9IHNsb3REdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHNsb3REdXJhdGlvbjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVIZWFkZXJGb3JtYXRzKHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYsIHZpZXcpIHtcbiAgICB2YXIgZm9ybWF0MTtcbiAgICB2YXIgZm9ybWF0MjtcbiAgICB2YXIgbGFiZWxJbnRlcnZhbCA9IHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsO1xuICAgIHZhciB1bml0ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGxhYmVsSW50ZXJ2YWwpLnVuaXQ7XG4gICAgdmFyIHdlZWtOdW1iZXJzVmlzaWJsZSA9IHZpZXcub3B0KCd3ZWVrTnVtYmVycycpO1xuICAgIHZhciBmb3JtYXQwID0gKGZvcm1hdDEgPSAoZm9ybWF0MiA9IG51bGwpKTtcbiAgICAvLyBOT1RFOiB3ZWVrTnVtYmVyIGNvbXB1dGF0aW9uIGZ1bmN0aW9uIHdvbnQgd29ya1xuICAgIGlmICgodW5pdCA9PT0gJ3dlZWsnKSAmJiAhd2Vla051bWJlcnNWaXNpYmxlKSB7XG4gICAgICAgIHVuaXQgPSAnZGF5JztcbiAgICB9XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgZm9ybWF0MCA9IHsgeWVhcjogJ251bWVyaWMnIH07IC8vICcyMDE1J1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFuZ2VBcygneWVhcnMnLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikgPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHsgeWVhcjogJ251bWVyaWMnIH07IC8vICcyMDE1J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybWF0MSA9IHsgbW9udGg6ICdzaG9ydCcgfTsgLy8gJ0phbidcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFuZ2VBcygneWVhcnMnLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikgPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHsgeWVhcjogJ251bWVyaWMnIH07IC8vICcyMDE1J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybWF0MSA9IHsgd2VlazogJ25hcnJvdycgfTsgLy8gJ1drNCdcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYW5nZUFzKCd5ZWFycycsIGRhdGVQcm9maWxlLCBkYXRlRW52KSA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycgfTsgLy8gJ0phbnVhcnkgMjAxNCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRSYW5nZUFzKCdtb250aHMnLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikgPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHsgbW9udGg6ICdsb25nJyB9OyAvLyAnSmFudWFyeSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3ZWVrTnVtYmVyc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQxID0geyB3ZWVrOiAnc2hvcnQnIH07IC8vICdXayA0J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybWF0MiA9IHsgd2Vla2RheTogJ25hcnJvdycsIGRheTogJ251bWVyaWMnIH07IC8vICdTdSA5J1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgaWYgKHdlZWtOdW1iZXJzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdDAgPSB7IHdlZWs6ICdzaG9ydCcgfTsgLy8gJ1drIDQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFJhbmdlQXMoJ2RheXMnLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikgPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MSA9IHsgd2Vla2RheTogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIG1vbnRoOiAnbnVtZXJpYycsIG9taXRDb21tYXM6IHRydWUgfTsgLy8gU2F0IDQvN1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybWF0MiA9IHtcbiAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICAgICAgb21pdFplcm9NaW51dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgbWVyaWRpZW06ICdzaG9ydCdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgIC8vIHN1ZmZpY2llbnRseSBsYXJnZSBudW1iZXIgb2YgZGlmZmVyZW50IG1pbnV0ZSBjZWxscz9cbiAgICAgICAgICAgIGlmICgoYXNSb3VnaE1pbnV0ZXMobGFiZWxJbnRlcnZhbCkgLyA2MCkgPj0gTUFYX0FVVE9fU0xPVFNfUEVSX0xBQkVMKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbTogJ3Nob3J0J1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9ybWF0MSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHBhZFN0YXJ0KHBhcmFtcy5kYXRlLm1pbnV0ZSwgMik7IC8vICc6MzAnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1hdDAgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtOiAnc2hvcnQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgLy8gc3VmZmljaWVudGx5IGxhcmdlIG51bWJlciBvZiBkaWZmZXJlbnQgc2Vjb25kIGNlbGxzP1xuICAgICAgICAgICAgaWYgKChhc1JvdWdoU2Vjb25kcyhsYWJlbEludGVydmFsKSAvIDYwKSA+PSBNQVhfQVVUT19TTE9UU19QRVJfTEFCRUwpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0geyBob3VyOiAnbnVtZXJpYycsIG1pbnV0ZTogJzItZGlnaXQnLCBtZXJpZGllbTogJ2xvd2VyY2FzZScgfTsgLy8gJzg6MzAgUE0nXG4gICAgICAgICAgICAgICAgZm9ybWF0MSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc6JyArIHBhZFN0YXJ0KHBhcmFtcy5kYXRlLnNlY29uZCwgMik7IC8vICc6MzAnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1hdDAgPSB7IGhvdXI6ICdudW1lcmljJywgbWludXRlOiAnMi1kaWdpdCcsIHNlY29uZDogJzItZGlnaXQnLCBtZXJpZGllbTogJ2xvd2VyY2FzZScgfTsgLy8gJzg6MzA6NDUgUE0nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgZm9ybWF0MCA9IHsgaG91cjogJ251bWVyaWMnLCBtaW51dGU6ICcyLWRpZ2l0Jywgc2Vjb25kOiAnMi1kaWdpdCcsIG1lcmlkaWVtOiAnbG93ZXJjYXNlJyB9OyAvLyAnODozMDo0NSBQTSdcbiAgICAgICAgICAgIGZvcm1hdDEgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcuJyArIHBhZFN0YXJ0KHBhcmFtcy5taWxsaXNlY29uZCwgMyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBbXS5jb25jYXQoZm9ybWF0MCB8fCBbXSwgZm9ybWF0MSB8fCBbXSwgZm9ybWF0MiB8fCBbXSk7XG59XG4vLyBDb21wdXRlIHRoZSBudW1iZXIgb2YgdGhlIGdpdmUgdW5pdHMgaW4gdGhlIFwiY3VycmVudFwiIHJhbmdlLlxuLy8gV29uJ3QgZ28gbW9yZSBwcmVjaXNlIHRoYW4gZGF5cy5cbi8vIFdpbGwgcmV0dXJuIGAwYCBpZiB0aGVyZSdzIG5vdCBhIGNsZWFuIHdob2xlIGludGVydmFsLlxuZnVuY3Rpb24gY3VycmVudFJhbmdlQXModW5pdCwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpIHtcbiAgICB2YXIgcmFuZ2UgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2U7XG4gICAgdmFyIHJlcyA9IG51bGw7XG4gICAgaWYgKHVuaXQgPT09ICd5ZWFycycpIHtcbiAgICAgICAgcmVzID0gZGF0ZUVudi5kaWZmV2hvbGVZZWFycyhyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdCA9PT0gJ21vbnRocycpIHtcbiAgICAgICAgcmVzID0gZGF0ZUVudi5kaWZmV2hvbGVNb250aHMocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVuaXQgPT09ICd3ZWVrcycpIHtcbiAgICAgICAgcmVzID0gZGF0ZUVudi5kaWZmV2hvbGVNb250aHMocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVuaXQgPT09ICdkYXlzJykge1xuICAgICAgICByZXMgPSBkaWZmV2hvbGVEYXlzKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzIHx8IDA7XG59XG5mdW5jdGlvbiBidWlsZElzV2Vla1N0YXJ0cyh0RGF0ZVByb2ZpbGUsIGRhdGVFbnYpIHtcbiAgICB2YXIgc2xvdERhdGVzID0gdERhdGVQcm9maWxlLnNsb3REYXRlcywgZW1waGFzaXplV2Vla3MgPSB0RGF0ZVByb2ZpbGUuZW1waGFzaXplV2Vla3M7XG4gICAgdmFyIHByZXZXZWVrTnVtYmVyID0gbnVsbDtcbiAgICB2YXIgaXNXZWVrU3RhcnRzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzbG90RGF0ZXNfMSA9IHNsb3REYXRlczsgX2kgPCBzbG90RGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNsb3REYXRlID0gc2xvdERhdGVzXzFbX2ldO1xuICAgICAgICB2YXIgd2Vla051bWJlciA9IGRhdGVFbnYuY29tcHV0ZVdlZWtOdW1iZXIoc2xvdERhdGUpO1xuICAgICAgICB2YXIgaXNXZWVrU3RhcnQgPSBlbXBoYXNpemVXZWVrcyAmJiAocHJldldlZWtOdW1iZXIgIT09IG51bGwpICYmIChwcmV2V2Vla051bWJlciAhPT0gd2Vla051bWJlcik7XG4gICAgICAgIHByZXZXZWVrTnVtYmVyID0gd2Vla051bWJlcjtcbiAgICAgICAgaXNXZWVrU3RhcnRzLnB1c2goaXNXZWVrU3RhcnQpO1xuICAgIH1cbiAgICByZXR1cm4gaXNXZWVrU3RhcnRzO1xufVxuZnVuY3Rpb24gYnVpbGRDZWxsUm93cyh0RGF0ZVByb2ZpbGUsIGRhdGVFbnYsIHZpZXcpIHtcbiAgICB2YXIgc2xvdERhdGVzID0gdERhdGVQcm9maWxlLnNsb3REYXRlcztcbiAgICB2YXIgZm9ybWF0cyA9IHREYXRlUHJvZmlsZS5oZWFkZXJGb3JtYXRzO1xuICAgIHZhciBjZWxsUm93cyA9IGZvcm1hdHMubWFwKGZ1bmN0aW9uIChmb3JtYXQpIHsgcmV0dXJuIFtdOyB9KTsgLy8gaW5kZXhlZCBieSByb3csY29sXG4gICAgLy8gc3BlY2lmaWNhbGx5IGZvciBuYXZjbGlja3NcbiAgICB2YXIgcm93VW5pdHMgPSBmb3JtYXRzLm1hcChmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQuZ2V0TGFyZ2VzdFVuaXQgPyBmb3JtYXQuZ2V0TGFyZ2VzdFVuaXQoKSA6IG51bGw7XG4gICAgfSk7XG4gICAgLy8gYnVpbGRzIGNlbGxSb3dzIGFuZCBzbG90Q2VsbHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsb3REYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGF0ZSA9IHNsb3REYXRlc1tpXTtcbiAgICAgICAgdmFyIGlzV2Vla1N0YXJ0ID0gdERhdGVQcm9maWxlLmlzV2Vla1N0YXJ0c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgZm9ybWF0cy5sZW5ndGg7IHJvdysrKSB7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gZm9ybWF0c1tyb3ddO1xuICAgICAgICAgICAgdmFyIHJvd0NlbGxzID0gY2VsbFJvd3Nbcm93XTtcbiAgICAgICAgICAgIHZhciBsZWFkaW5nQ2VsbCA9IHJvd0NlbGxzW3Jvd0NlbGxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgdmFyIGlzU3VwZXJSb3cgPSAoZm9ybWF0cy5sZW5ndGggPiAxKSAmJiAocm93IDwgKGZvcm1hdHMubGVuZ3RoIC0gMSkpOyAvLyBtb3JlIHRoYW4gb25lIHJvdyBhbmQgbm90IHRoZSBsYXN0XG4gICAgICAgICAgICB2YXIgbmV3Q2VsbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNTdXBlclJvdykge1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZGF0ZUVudi5mb3JtYXQoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgICBpZiAoIWxlYWRpbmdDZWxsIHx8IChsZWFkaW5nQ2VsbC50ZXh0ICE9PSB0ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdDZWxsID0gYnVpbGRDZWxsT2JqZWN0KGRhdGUsIHRleHQsIHJvd1VuaXRzW3Jvd10sIHZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZ0NlbGwuY29sc3BhbiArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghbGVhZGluZ0NlbGwgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNJbnQoZGF0ZUVudi5jb3VudER1cmF0aW9uc0JldHdlZW4odERhdGVQcm9maWxlLm5vcm1hbGl6ZWRSYW5nZS5zdGFydCwgZGF0ZSwgdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwpKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGRhdGVFbnYuZm9ybWF0KGRhdGUsIGZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSBidWlsZENlbGxPYmplY3QoZGF0ZSwgdGV4dCwgcm93VW5pdHNbcm93XSwgdmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nQ2VsbC5jb2xzcGFuICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld0NlbGwpIHtcbiAgICAgICAgICAgICAgICBuZXdDZWxsLndlZWtTdGFydCA9IGlzV2Vla1N0YXJ0O1xuICAgICAgICAgICAgICAgIHJvd0NlbGxzLnB1c2gobmV3Q2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNlbGxSb3dzO1xufVxuZnVuY3Rpb24gYnVpbGRDZWxsT2JqZWN0KGRhdGUsIHRleHQsIHJvd1VuaXQsIHZpZXcpIHtcbiAgICB2YXIgc3Bhbkh0bWwgPSBidWlsZEdvdG9BbmNob3JIdG1sKHZpZXcsIHtcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgdHlwZTogcm93VW5pdCxcbiAgICAgICAgZm9yY2VPZmY6ICFyb3dVbml0XG4gICAgfSwge1xuICAgICAgICAnY2xhc3MnOiAnZmMtY2VsbC10ZXh0J1xuICAgIH0sIGh0bWxFc2NhcGUodGV4dCkpO1xuICAgIHJldHVybiB7IHRleHQ6IHRleHQsIHNwYW5IdG1sOiBzcGFuSHRtbCwgZGF0ZTogZGF0ZSwgY29sc3BhbjogMSwgaXNXZWVrU3RhcnQ6IGZhbHNlIH07XG59XG5cbnZhciBUaW1lbGluZU5vd0luZGljYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lbGluZU5vd0luZGljYXRvcihoZWFkUGFyZW50LCBib2R5UGFyZW50KSB7XG4gICAgICAgIHRoaXMuaGVhZFBhcmVudCA9IGhlYWRQYXJlbnQ7XG4gICAgICAgIHRoaXMuYm9keVBhcmVudCA9IGJvZHlQYXJlbnQ7XG4gICAgfVxuICAgIFRpbWVsaW5lTm93SW5kaWNhdG9yLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY29vcmQsIGlzUnRsKSB7XG4gICAgICAgIHZhciBzdHlsZVByb3BzID0gaXNSdGwgPyB7IHJpZ2h0OiAtY29vcmQgfSA6IHsgbGVmdDogY29vcmQgfTtcbiAgICAgICAgdGhpcy5oZWFkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMuYXJyb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ZjLW5vdy1pbmRpY2F0b3IgZmMtbm93LWluZGljYXRvci1hcnJvdycsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVQcm9wc1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuYm9keVBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmxpbmVFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ZjLW5vdy1pbmRpY2F0b3IgZmMtbm93LWluZGljYXRvci1saW5lJyxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVByb3BzXG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lTm93SW5kaWNhdG9yLnByb3RvdHlwZS51bnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXJyb3dFbCkge1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmFycm93RWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpbmVFbCkge1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmxpbmVFbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZU5vd0luZGljYXRvcjtcbn0oKSk7XG5cbnZhciBTVElDS1lfUFJPUF9WQUwgPSBjb21wdXRlU3RpY2t5UHJvcFZhbCgpOyAvLyBpZiBudWxsLCBtZWFucyBub3Qgc3VwcG9ydGVkIGF0IGFsbFxudmFyIElTX01TX0VER0UgPSAvRWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbnZhciBJU19TQUZBUkkgPSBTVElDS1lfUFJPUF9WQUwgPT09ICctd2Via2l0LXN0aWNreSc7IC8vIGdvb2QgYi9jIGRvZXNuJ3QgY29uZnVzZSBjaHJvbWVcbnZhciBTVElDS1lfQ0xBU1NOQU1FID0gJ2ZjLXN0aWNreSc7XG4vKlxudXNlZnVsIGJleW9uZCB0aGUgbmF0aXZlIHBvc2l0aW9uOnN0aWNreSBmb3IgdGhlc2UgcmVhc29uczpcbi0gc3VwcG9ydCBpbiBJRTExXG4tIG5pY2UgY2VudGVyaW5nIHN1cHBvcnRcbiovXG52YXIgU3RpY2t5U2Nyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RpY2t5U2Nyb2xsZXIoc2Nyb2xsZXIsIGlzUnRsLCBpc1ZlcnRpY2FsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudXNpbmdSZWxhdGl2ZSA9IG51bGw7XG4gICAgICAgIC8qXG4gICAgICAgIGtub3duIGJ1ZzogY2FsbGVkIHR3aWNlIG9uIGluaXQuIHByb2JsZW0gd2hlbiBtaXhpbmcgd2l0aCBTY3JvbGxKb2luZXJcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKF90aGlzLnNjcm9sbGVyLmNhbnZhcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIFNUSUNLWV9DTEFTU05BTUUpKTtcbiAgICAgICAgICAgIHZhciBlbEdlb21zID0gX3RoaXMucXVlcnlFbEdlb21zKGVscyk7XG4gICAgICAgICAgICB2YXIgdmlld3BvcnRXaWR0aCA9IF90aGlzLnNjcm9sbGVyLmVsLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgaWYgKF90aGlzLnVzaW5nUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxEZXN0aW5hdGlvbnMgPSBfdGhpcy5jb21wdXRlRWxEZXN0aW5hdGlvbnMoZWxHZW9tcywgdmlld3BvcnRXaWR0aCk7IC8vIHJlYWQgYmVmb3JlIHByZXBQb3NpdGlvbmluZ1xuICAgICAgICAgICAgICAgIGFzc2lnblJlbGF0aXZlUG9zaXRpb25zKGVscywgZWxHZW9tcywgZWxEZXN0aW5hdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXNzaWduU3RpY2t5UG9zaXRpb25zKGVscywgZWxHZW9tcywgdmlld3BvcnRXaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIgPSBzY3JvbGxlcjtcbiAgICAgICAgdGhpcy51c2luZ1JlbGF0aXZlID1cbiAgICAgICAgICAgICFTVElDS1lfUFJPUF9WQUwgfHwgLy8gSUUxMVxuICAgICAgICAgICAgICAgIChJU19NU19FREdFICYmIGlzUnRsKSB8fCAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xODg4MzMwNS9cbiAgICAgICAgICAgICAgICAoKElTX01TX0VER0UgfHwgSVNfU0FGQVJJKSAmJiBpc1ZlcnRpY2FsKTsgLy8gYmVjYXVzZSBkb2Vzbid0IHdvcmsgd2l0aCByb3dzcGFuIGluIHRhYmxlcywgb3VyIG9ubHkgdmVydGlhbCB1c2VcbiAgICAgICAgaWYgKHRoaXMudXNpbmdSZWxhdGl2ZSkge1xuICAgICAgICAgICAgc2Nyb2xsZXIub24oJ3Njcm9sbEVuZCcsIHRoaXMudXBkYXRlU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3RpY2t5U2Nyb2xsZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIub2ZmKCdzY3JvbGxFbmQnLCB0aGlzLnVwZGF0ZVNpemUpO1xuICAgIH07XG4gICAgU3RpY2t5U2Nyb2xsZXIucHJvdG90eXBlLnF1ZXJ5RWxHZW9tcyA9IGZ1bmN0aW9uIChlbHMpIHtcbiAgICAgICAgdmFyIGNhbnZhc09yaWdpbiA9IHRoaXMuc2Nyb2xsZXIuY2FudmFzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgZWxHZW9tcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGVsc18xID0gZWxzOyBfaSA8IGVsc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGVsID0gZWxzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHBhcmVudEJvdW5kID0gdHJhbnNsYXRlUmVjdChlbC5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCAtY2FudmFzT3JpZ2luLmxlZnQsIC1jYW52YXNPcmlnaW4udG9wKTtcbiAgICAgICAgICAgIHZhciBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgICAgIHZhciBjb21wdXRlZFRleHRBbGlnbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLnBhcmVudE5vZGUpLnRleHRBbGlnbjsgLy8gYXNrIHRoZSBwYXJlbnRcbiAgICAgICAgICAgIHZhciBpbnRlbmRlZFRleHRBbGlnbiA9IGNvbXB1dGVkVGV4dEFsaWduO1xuICAgICAgICAgICAgdmFyIG5hdHVyYWxCb3VuZCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29tcHV0ZWRTdHlsZXMucG9zaXRpb24gIT09ICdzdGlja3knKSB7XG4gICAgICAgICAgICAgICAgbmF0dXJhbEJvdW5kID0gdHJhbnNsYXRlUmVjdChlbFJlY3QsIC1jYW52YXNPcmlnaW4ubGVmdCAtIChwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGVzLmxlZnQpIHx8IDApLCAvLyBjb3VsZCBiZSAnYXV0bydcbiAgICAgICAgICAgICAgICAtY2FudmFzT3JpZ2luLnRvcCAtIChwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGVzLnRvcCkgfHwgMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1zdGlja3ktY2VudGVyJykpIHtcbiAgICAgICAgICAgICAgICBpbnRlbmRlZFRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxHZW9tcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRCb3VuZDogcGFyZW50Qm91bmQsXG4gICAgICAgICAgICAgICAgbmF0dXJhbEJvdW5kOiBuYXR1cmFsQm91bmQsXG4gICAgICAgICAgICAgICAgZWxXaWR0aDogZWxSZWN0LndpZHRoLFxuICAgICAgICAgICAgICAgIGVsSGVpZ2h0OiBlbFJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkVGV4dEFsaWduOiBjb21wdXRlZFRleHRBbGlnbixcbiAgICAgICAgICAgICAgICBpbnRlbmRlZFRleHRBbGlnbjogaW50ZW5kZWRUZXh0QWxpZ25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbEdlb21zO1xuICAgIH07XG4gICAgU3RpY2t5U2Nyb2xsZXIucHJvdG90eXBlLmNvbXB1dGVFbERlc3RpbmF0aW9ucyA9IGZ1bmN0aW9uIChlbEdlb21zLCB2aWV3cG9ydFdpZHRoKSB7XG4gICAgICAgIHZhciB2aWV3cG9ydExlZnQgPSB0aGlzLnNjcm9sbGVyLmdldFNjcm9sbEZyb21MZWZ0KCk7XG4gICAgICAgIHZhciB2aWV3cG9ydFRvcCA9IHRoaXMuc2Nyb2xsZXIuZ2V0U2Nyb2xsVG9wKCk7XG4gICAgICAgIHZhciB2aWV3cG9ydFJpZ2h0ID0gdmlld3BvcnRMZWZ0ICsgdmlld3BvcnRXaWR0aDtcbiAgICAgICAgcmV0dXJuIGVsR2VvbXMubWFwKGZ1bmN0aW9uIChlbEdlb20pIHtcbiAgICAgICAgICAgIHZhciBlbFdpZHRoID0gZWxHZW9tLmVsV2lkdGgsIGVsSGVpZ2h0ID0gZWxHZW9tLmVsSGVpZ2h0LCBwYXJlbnRCb3VuZCA9IGVsR2VvbS5wYXJlbnRCb3VuZCwgbmF0dXJhbEJvdW5kID0gZWxHZW9tLm5hdHVyYWxCb3VuZDtcbiAgICAgICAgICAgIHZhciBkZXN0TGVmdDsgLy8gcmVsYXRpdmUgdG8gY2FudmFzIHRvcGxlZnRcbiAgICAgICAgICAgIHZhciBkZXN0VG9wOyAvLyBcIlxuICAgICAgICAgICAgc3dpdGNoIChlbEdlb20uaW50ZW5kZWRUZXh0QWxpZ24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgZGVzdExlZnQgPSB2aWV3cG9ydExlZnQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgZGVzdExlZnQgPSB2aWV3cG9ydFJpZ2h0IC0gZWxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgZGVzdExlZnQgPSAodmlld3BvcnRMZWZ0ICsgdmlld3BvcnRSaWdodCkgLyAyIC0gZWxXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdExlZnQgPSBNYXRoLm1pbihkZXN0TGVmdCwgcGFyZW50Qm91bmQucmlnaHQgLSBlbFdpZHRoKTtcbiAgICAgICAgICAgIGRlc3RMZWZ0ID0gTWF0aC5tYXgoZGVzdExlZnQsIHBhcmVudEJvdW5kLmxlZnQpO1xuICAgICAgICAgICAgZGVzdFRvcCA9IHZpZXdwb3J0VG9wO1xuICAgICAgICAgICAgZGVzdFRvcCA9IE1hdGgubWluKGRlc3RUb3AsIHBhcmVudEJvdW5kLmJvdHRvbSAtIGVsSGVpZ2h0KTtcbiAgICAgICAgICAgIGRlc3RUb3AgPSBNYXRoLm1heChkZXN0VG9wLCBuYXR1cmFsQm91bmQudG9wKTsgLy8gYmV0dGVyIHRvIHVzZSBuYXR1cmFsIHRvcCBmb3IgdXBwZXIgYm91bmRcbiAgICAgICAgICAgIHJldHVybiB7IGxlZnQ6IGRlc3RMZWZ0LCB0b3A6IGRlc3RUb3AgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3RpY2t5U2Nyb2xsZXI7XG59KCkpO1xuZnVuY3Rpb24gYXNzaWduUmVsYXRpdmVQb3NpdGlvbnMoZWxzLCBlbEdlb21zLCBlbERlc3RpbmF0aW9ucykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgbmF0dXJhbEJvdW5kID0gZWxHZW9tc1tpXS5uYXR1cmFsQm91bmQ7XG4gICAgICAgIGFwcGx5U3R5bGUoZWwsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgbGVmdDogZWxEZXN0aW5hdGlvbnNbaV0ubGVmdCAtIG5hdHVyYWxCb3VuZC5sZWZ0LFxuICAgICAgICAgICAgdG9wOiBlbERlc3RpbmF0aW9uc1tpXS50b3AgLSBuYXR1cmFsQm91bmQudG9wXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYXNzaWduU3RpY2t5UG9zaXRpb25zKGVscywgZWxHZW9tcywgdmlld3BvcnRXaWR0aCkge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgc3RpY2t5TGVmdCA9IDA7XG4gICAgICAgIGlmIChlbEdlb21zW2ldLmludGVuZGVkVGV4dEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgc3RpY2t5TGVmdCA9ICh2aWV3cG9ydFdpZHRoIC0gZWxHZW9tc1tpXS5lbFdpZHRoKSAvIDI7XG4gICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBmb3JjZWQgdG8gbGVmdD9cbiAgICAgICAgICAgIGlmIChlbEdlb21zW2ldLmNvbXB1dGVkVGV4dEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGlja3ktY2VudGVyJywgJycpIC8vIHJlbWVtYmVyIGZvciBuZXh0IHF1ZXJ5RWxHZW9tc1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnN0eWxlLnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcHBseVN0eWxlKGVsLCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogU1RJQ0tZX1BST1BfVkFMLFxuICAgICAgICAgICAgbGVmdDogc3RpY2t5TGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgdG9wOiAwXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY29tcHV0ZVN0aWNreVByb3BWYWwoKSB7XG4gICAgdmFyIGVsID0gaHRtbFRvRWxlbWVudCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOi13ZWJraXQtc3RpY2t5O3Bvc2l0aW9uOnN0aWNreVwiPjwvZGl2PicpO1xuICAgIHZhciB2YWwgPSBlbC5zdHlsZS5wb3NpdGlvbjtcbiAgICBpZiAodmFsLmluZGV4T2YoJ3N0aWNreScpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG52YXIgVGltZUF4aXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVBeGlzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVBeGlzKGNvbnRleHQsIGhlYWRlckNvbnRhaW5lckVsLCBib2R5Q29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgdmFyIGxheW91dCA9IF90aGlzLmxheW91dCA9IG5ldyBIZWFkZXJCb2R5TGF5b3V0KGhlYWRlckNvbnRhaW5lckVsLCBib2R5Q29udGFpbmVyRWwsICdhdXRvJyk7XG4gICAgICAgIHZhciBoZWFkZXJFbmhhbmNlZFNjcm9sbGVyID0gbGF5b3V0LmhlYWRlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICB2YXIgYm9keUVuaGFuY2VkU2Nyb2xsZXIgPSBsYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICAvLyBuZWVkcyB0byBnbyBhZnRlciBsYXlvdXQsIHdoaWNoIGhhcyBTY3JvbGxKb2luZXJcbiAgICAgICAgX3RoaXMuaGVhZFN0aWNreVNjcm9sbGVyID0gbmV3IFN0aWNreVNjcm9sbGVyKGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIsIF90aGlzLmlzUnRsLCBmYWxzZSk7IC8vIGlzVmVydGljYWw9ZmFsc2VcbiAgICAgICAgX3RoaXMuYm9keVN0aWNreVNjcm9sbGVyID0gbmV3IFN0aWNreVNjcm9sbGVyKGJvZHlFbmhhbmNlZFNjcm9sbGVyLCBfdGhpcy5pc1J0bCwgZmFsc2UpOyAvLyBpc1ZlcnRpY2FsPWZhbHNlXG4gICAgICAgIF90aGlzLmhlYWRlciA9IG5ldyBUaW1lbGluZUhlYWRlcihjb250ZXh0LCBoZWFkZXJFbmhhbmNlZFNjcm9sbGVyLmNhbnZhcy5jb250ZW50RWwpO1xuICAgICAgICBfdGhpcy5zbGF0cyA9IG5ldyBUaW1lbGluZVNsYXRzKGNvbnRleHQsIGJvZHlFbmhhbmNlZFNjcm9sbGVyLmNhbnZhcy5iZ0VsKTtcbiAgICAgICAgX3RoaXMubm93SW5kaWNhdG9yID0gbmV3IFRpbWVsaW5lTm93SW5kaWNhdG9yKGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIuY2FudmFzLmVsLCBib2R5RW5oYW5jZWRTY3JvbGxlci5jYW52YXMuZWwpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxheW91dC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5zbGF0cy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubm93SW5kaWNhdG9yLnVucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuaGVhZFN0aWNreVNjcm9sbGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5ib2R5U3RpY2t5U2Nyb2xsZXIuZGVzdHJveSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdmFyIHREYXRlUHJvZmlsZSA9IHRoaXMudERhdGVQcm9maWxlID1cbiAgICAgICAgICAgIGJ1aWxkVGltZWxpbmVEYXRlUHJvZmlsZShwcm9wcy5kYXRlUHJvZmlsZSwgdGhpcy52aWV3KTsgLy8gVE9ETzogY2FjaGVcbiAgICAgICAgdGhpcy5oZWFkZXIucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgIHREYXRlUHJvZmlsZTogdERhdGVQcm9maWxlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNsYXRzLnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICB0RGF0ZVByb2ZpbGU6IHREYXRlUHJvZmlsZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIE5vdyBJbmRpY2F0b3JcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuZ2V0Tm93SW5kaWNhdG9yVW5pdCA9IGZ1bmN0aW9uIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAvLyB5dWNrXG4gICAgICAgIHZhciB0RGF0ZVByb2ZpbGUgPSB0aGlzLnREYXRlUHJvZmlsZSA9XG4gICAgICAgICAgICBidWlsZFRpbWVsaW5lRGF0ZVByb2ZpbGUoZGF0ZVByb2ZpbGUsIHRoaXMudmlldyk7IC8vIFRPRE86IGNhY2hlXG4gICAgICAgIGlmICh0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IodERhdGVQcm9maWxlLnNsb3REdXJhdGlvbikudW5pdDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gd2lsbCBvbmx5IGV4ZWN1dGUgaWYgaXNUaW1lU2NhbGVcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgaWYgKHJhbmdlQ29udGFpbnNNYXJrZXIodGhpcy50RGF0ZVByb2ZpbGUubm9ybWFsaXplZFJhbmdlLCBkYXRlKSkge1xuICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3IucmVuZGVyKHRoaXMuZGF0ZVRvQ29vcmQoZGF0ZSksIHRoaXMuaXNSdGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyB3aWxsIG9ubHkgZXhlY3V0ZSBpZiBpc1RpbWVTY2FsZVxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS51bnJlbmRlck5vd0luZGljYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3IudW5yZW5kZXIoKTtcbiAgICB9O1xuICAgIC8vIFNpemluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB0b3RhbEhlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIHRoaXMuYXBwbHlTbG90V2lkdGgodGhpcy5jb21wdXRlU2xvdFdpZHRoKCkpO1xuICAgICAgICAvLyBhZGp1c3RzIGd1dHRlcnMuIGRvIGFmdGVyIHNsb3Qgd2lkdGhzIHNldFxuICAgICAgICB0aGlzLmxheW91dC5zZXRIZWlnaHQodG90YWxIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgIC8vIHByZXR0eSBtdWNoIGp1c3QgcXVlcmllcyBjb29yZHMuIGRvIGxhc3RcbiAgICAgICAgdGhpcy5zbGF0cy51cGRhdGVTaXplKCk7XG4gICAgfTtcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUudXBkYXRlU3RpY2t5U2Nyb2xsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhlYWRTdGlja3lTY3JvbGxlci51cGRhdGVTaXplKCk7XG4gICAgICAgIHRoaXMuYm9keVN0aWNreVNjcm9sbGVyLnVwZGF0ZVNpemUoKTtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5jb21wdXRlU2xvdFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2xvdFdpZHRoID0gdGhpcy5vcHQoJ3Nsb3RXaWR0aCcpIHx8ICcnO1xuICAgICAgICBpZiAoc2xvdFdpZHRoID09PSAnJykge1xuICAgICAgICAgICAgc2xvdFdpZHRoID0gdGhpcy5jb21wdXRlRGVmYXVsdFNsb3RXaWR0aCh0aGlzLnREYXRlUHJvZmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsb3RXaWR0aDtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5jb21wdXRlRGVmYXVsdFNsb3RXaWR0aCA9IGZ1bmN0aW9uICh0RGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIG1heElubmVyV2lkdGggPSAwOyAvLyBUT0RPOiBoYXJuZXNzIGNvcmUncyBgbWF0Y2hDZWxsV2lkdGhzYCBmb3IgdGhpc1xuICAgICAgICB0aGlzLmhlYWRlci5pbm5lckVscy5mb3JFYWNoKGZ1bmN0aW9uIChpbm5lckVsLCBpKSB7XG4gICAgICAgICAgICBtYXhJbm5lcldpZHRoID0gTWF0aC5tYXgobWF4SW5uZXJXaWR0aCwgaW5uZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgaGVhZGluZ0NlbGxXaWR0aCA9IE1hdGguY2VpbChtYXhJbm5lcldpZHRoKSArIDE7IC8vIGFzc3VtZSBubyBwYWRkaW5nLCBhbmQgb25lIHBpeGVsIGJvcmRlclxuICAgICAgICAvLyBpbiBUaW1lbGluZVZpZXcuZGVmYXVsdHMgd2UgZW5zdXJlZCB0aGF0IGxhYmVsSW50ZXJ2YWwgaXMgYW4gaW50ZXJ2YWwgb2Ygc2xvdER1cmF0aW9uXG4gICAgICAgIC8vIFRPRE86IHJlbmFtZSBsYWJlbER1cmF0aW9uP1xuICAgICAgICB2YXIgc2xvdHNQZXJMYWJlbCA9IHdob2xlRGl2aWRlRHVyYXRpb25zKHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsLCB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKTtcbiAgICAgICAgdmFyIHNsb3RXaWR0aCA9IE1hdGguY2VpbChoZWFkaW5nQ2VsbFdpZHRoIC8gc2xvdHNQZXJMYWJlbCk7XG4gICAgICAgIHZhciBtaW5XaWR0aCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuaGVhZGVyLnNsYXRDb2xFbHNbMF0pLm1pbldpZHRoO1xuICAgICAgICBpZiAobWluV2lkdGgpIHtcbiAgICAgICAgICAgIG1pbldpZHRoID0gcGFyc2VJbnQobWluV2lkdGgsIDEwKTtcbiAgICAgICAgICAgIGlmIChtaW5XaWR0aCkge1xuICAgICAgICAgICAgICAgIHNsb3RXaWR0aCA9IE1hdGgubWF4KHNsb3RXaWR0aCwgbWluV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzbG90V2lkdGg7XG4gICAgfTtcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuYXBwbHlTbG90V2lkdGggPSBmdW5jdGlvbiAoc2xvdFdpZHRoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGxheW91dCA9IF9hLmxheW91dCwgdERhdGVQcm9maWxlID0gX2EudERhdGVQcm9maWxlO1xuICAgICAgICB2YXIgY29udGFpbmVyV2lkdGggPSAnJztcbiAgICAgICAgdmFyIGNvbnRhaW5lck1pbldpZHRoID0gJyc7XG4gICAgICAgIHZhciBub25MYXN0U2xvdFdpZHRoID0gJyc7XG4gICAgICAgIGlmIChzbG90V2lkdGggIT09ICcnKSB7XG4gICAgICAgICAgICBzbG90V2lkdGggPSBNYXRoLnJvdW5kKHNsb3RXaWR0aCk7XG4gICAgICAgICAgICBjb250YWluZXJXaWR0aCA9IHNsb3RXaWR0aCAqIHREYXRlUHJvZmlsZS5zbG90RGF0ZXMubGVuZ3RoO1xuICAgICAgICAgICAgY29udGFpbmVyTWluV2lkdGggPSAnJztcbiAgICAgICAgICAgIG5vbkxhc3RTbG90V2lkdGggPSBzbG90V2lkdGg7XG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlV2lkdGggPSBsYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmdldENsaWVudFdpZHRoKCk7XG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlV2lkdGggPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lck1pbldpZHRoID0gYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyV2lkdGggPSAnJztcbiAgICAgICAgICAgICAgICBub25MYXN0U2xvdFdpZHRoID0gTWF0aC5mbG9vcihhdmFpbGFibGVXaWR0aCAvIHREYXRlUHJvZmlsZS5zbG90RGF0ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXlvdXQuaGVhZGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLnNldFdpZHRoKGNvbnRhaW5lcldpZHRoKTtcbiAgICAgICAgbGF5b3V0LmhlYWRlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5zZXRNaW5XaWR0aChjb250YWluZXJNaW5XaWR0aCk7XG4gICAgICAgIGxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLnNldFdpZHRoKGNvbnRhaW5lcldpZHRoKTtcbiAgICAgICAgbGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuc2V0TWluV2lkdGgoY29udGFpbmVyTWluV2lkdGgpO1xuICAgICAgICBpZiAobm9uTGFzdFNsb3RXaWR0aCAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnNsYXRDb2xFbHMuc2xpY2UoMCwgLTEpLmNvbmNhdCh0aGlzLnNsYXRzLnNsYXRDb2xFbHMuc2xpY2UoMCwgLTEpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gbm9uTGFzdFNsb3RXaWR0aCArICdweCc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcmV0dXJuZWQgdmFsdWUgaXMgYmV0d2VlbiAwIGFuZCB0aGUgbnVtYmVyIG9mIHNuYXBzXG4gICAgVGltZUF4aXMucHJvdG90eXBlLmNvbXB1dGVEYXRlU25hcENvdmVyYWdlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZGF0ZUVudiA9IF9hLmRhdGVFbnYsIHREYXRlUHJvZmlsZSA9IF9hLnREYXRlUHJvZmlsZTtcbiAgICAgICAgdmFyIHNuYXBEaWZmID0gZGF0ZUVudi5jb3VudER1cmF0aW9uc0JldHdlZW4odERhdGVQcm9maWxlLm5vcm1hbGl6ZWRSYW5nZS5zdGFydCwgZGF0ZSwgdERhdGVQcm9maWxlLnNuYXBEdXJhdGlvbik7XG4gICAgICAgIGlmIChzbmFwRGlmZiA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNuYXBEaWZmID49IHREYXRlUHJvZmlsZS5zbmFwRGlmZlRvSW5kZXgubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdERhdGVQcm9maWxlLnNuYXBDbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc25hcERpZmZJbnQgPSBNYXRoLmZsb29yKHNuYXBEaWZmKTtcbiAgICAgICAgICAgIHZhciBzbmFwQ292ZXJhZ2UgPSB0RGF0ZVByb2ZpbGUuc25hcERpZmZUb0luZGV4W3NuYXBEaWZmSW50XTtcbiAgICAgICAgICAgIGlmIChpc0ludChzbmFwQ292ZXJhZ2UpKSB7IC8vIG5vdCBhbiBpbi1iZXR3ZWVuIHZhbHVlXG4gICAgICAgICAgICAgICAgc25hcENvdmVyYWdlICs9IHNuYXBEaWZmIC0gc25hcERpZmZJbnQ7IC8vIGFkZCB0aGUgcmVtYWluZGVyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhIGZyYWN0aW9uYWwgdmFsdWUsIG1lYW5pbmcgdGhlIGRhdGUgaXMgbm90IHZpc2libGVcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgcm91bmQgdXAgaW4gdGhpcyBjYXNlLiB3b3JrcyBmb3Igc3RhcnQgQU5EIGVuZCBkYXRlcyBpbiBhIHJhbmdlLlxuICAgICAgICAgICAgICAgIHNuYXBDb3ZlcmFnZSA9IE1hdGguY2VpbChzbmFwQ292ZXJhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNuYXBDb3ZlcmFnZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gZm9yIExUUiwgcmVzdWx0cyByYW5nZSBmcm9tIDAgdG8gd2lkdGggb2YgYXJlYVxuICAgIC8vIGZvciBSVEwsIHJlc3VsdHMgcmFuZ2UgZnJvbSBuZWdhdGl2ZSB3aWR0aCBvZiBhcmVhIHRvIDBcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuZGF0ZVRvQ29vcmQgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgdERhdGVQcm9maWxlID0gdGhpcy50RGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBzbmFwQ292ZXJhZ2UgPSB0aGlzLmNvbXB1dGVEYXRlU25hcENvdmVyYWdlKGRhdGUpO1xuICAgICAgICB2YXIgc2xvdENvdmVyYWdlID0gc25hcENvdmVyYWdlIC8gdERhdGVQcm9maWxlLnNuYXBzUGVyU2xvdDtcbiAgICAgICAgdmFyIHNsb3RJbmRleCA9IE1hdGguZmxvb3Ioc2xvdENvdmVyYWdlKTtcbiAgICAgICAgc2xvdEluZGV4ID0gTWF0aC5taW4oc2xvdEluZGV4LCB0RGF0ZVByb2ZpbGUuc2xvdENudCAtIDEpO1xuICAgICAgICB2YXIgcGFydGlhbCA9IHNsb3RDb3ZlcmFnZSAtIHNsb3RJbmRleDtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5zbGF0cywgaW5uZXJDb29yZENhY2hlID0gX2EuaW5uZXJDb29yZENhY2hlLCBvdXRlckNvb3JkQ2FjaGUgPSBfYS5vdXRlckNvb3JkQ2FjaGU7XG4gICAgICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICByZXR1cm4gKG91dGVyQ29vcmRDYWNoZS5yaWdodHNbc2xvdEluZGV4XSAtXG4gICAgICAgICAgICAgICAgKGlubmVyQ29vcmRDYWNoZS5nZXRXaWR0aChzbG90SW5kZXgpICogcGFydGlhbCkpIC0gb3V0ZXJDb29yZENhY2hlLm9yaWdpbkNsaWVudFJlY3Qud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKG91dGVyQ29vcmRDYWNoZS5sZWZ0c1tzbG90SW5kZXhdICtcbiAgICAgICAgICAgICAgICAoaW5uZXJDb29yZENhY2hlLmdldFdpZHRoKHNsb3RJbmRleCkgKiBwYXJ0aWFsKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5yYW5nZVRvQ29vcmRzID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICByZXR1cm4geyByaWdodDogdGhpcy5kYXRlVG9Db29yZChyYW5nZS5zdGFydCksIGxlZnQ6IHRoaXMuZGF0ZVRvQ29vcmQocmFuZ2UuZW5kKSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGVmdDogdGhpcy5kYXRlVG9Db29yZChyYW5nZS5zdGFydCksIHJpZ2h0OiB0aGlzLmRhdGVUb0Nvb3JkKHJhbmdlLmVuZCkgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gU2Nyb2xsaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVGltZUF4aXMucHJvdG90eXBlLmNvbXB1dGVEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlO1xuICAgICAgICB2YXIgbGVmdCA9IDA7XG4gICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgbGVmdCA9IHRoaXMuZGF0ZVRvQ29vcmQoZGF0ZUVudi5hZGQoc3RhcnRPZkRheShkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZS5zdGFydCksIC8vIHN0YXJ0T2ZEYXkgbmVlZGVkP1xuICAgICAgICAgICAgZHVyYXRpb24pKTtcbiAgICAgICAgICAgIC8vIGhhY2sgdG8gb3ZlcmNvbWUgdGhlIGxlZnQgYm9yZGVycyBvZiBub24tZmlyc3Qgc2xhdFxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUnRsICYmIGxlZnQpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbGVmdDogbGVmdCB9O1xuICAgIH07XG4gICAgVGltZUF4aXMucHJvdG90eXBlLnF1ZXJ5RGF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuaGFuY2VkU2Nyb2xsID0gdGhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogZW5oYW5jZWRTY3JvbGwuZ2V0U2Nyb2xsTGVmdCgpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICAvLyBUT0RPOiBsYW1lIHdlIGhhdmUgdG8gdXBkYXRlIGJvdGguIHVzZSB0aGUgc2Nyb2xsam9pbmVyIGluc3RlYWQgbWF5YmVcbiAgICAgICAgdGhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLnNldFNjcm9sbExlZnQoc2Nyb2xsLmxlZnQgfHwgMCk7XG4gICAgICAgIHRoaXMubGF5b3V0LmhlYWRlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLnNldFNjcm9sbExlZnQoc2Nyb2xsLmxlZnQgfHwgMCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZUF4aXM7XG59KENvbXBvbmVudCkpO1xuXG52YXIgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyKGNvbnRleHQsIG1hc3RlckNvbnRhaW5lckVsLCB0aW1lQXhpcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tYXN0ZXJDb250YWluZXJFbCA9IG1hc3RlckNvbnRhaW5lckVsO1xuICAgICAgICBfdGhpcy50aW1lQXhpcyA9IHRpbWVBeGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ0h0bWwgPSBmdW5jdGlvbiAoc2VnLCBtaXJyb3JJbmZvKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5jb250ZXh0LnZpZXc7XG4gICAgICAgIHZhciBldmVudFJhbmdlID0gc2VnLmV2ZW50UmFuZ2U7XG4gICAgICAgIHZhciBldmVudERlZiA9IGV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICB2YXIgZXZlbnRVaSA9IGV2ZW50UmFuZ2UudWk7XG4gICAgICAgIHZhciBpc0RyYWdnYWJsZSA9IHZpZXcuY29tcHV0ZUV2ZW50RHJhZ2dhYmxlKGV2ZW50RGVmLCBldmVudFVpKTtcbiAgICAgICAgdmFyIGlzUmVzaXphYmxlRnJvbVN0YXJ0ID0gc2VnLmlzU3RhcnQgJiYgdmlldy5jb21wdXRlRXZlbnRTdGFydFJlc2l6YWJsZShldmVudERlZiwgZXZlbnRVaSk7XG4gICAgICAgIHZhciBpc1Jlc2l6YWJsZUZyb21FbmQgPSBzZWcuaXNFbmQgJiYgdmlldy5jb21wdXRlRXZlbnRFbmRSZXNpemFibGUoZXZlbnREZWYsIGV2ZW50VWkpO1xuICAgICAgICB2YXIgY2xhc3NlcyA9IHRoaXMuZ2V0U2VnQ2xhc3NlcyhzZWcsIGlzRHJhZ2dhYmxlLCBpc1Jlc2l6YWJsZUZyb21TdGFydCB8fCBpc1Jlc2l6YWJsZUZyb21FbmQsIG1pcnJvckluZm8pO1xuICAgICAgICBjbGFzc2VzLnVuc2hpZnQoJ2ZjLXRpbWVsaW5lLWV2ZW50JywgJ2ZjLWgtZXZlbnQnKTtcbiAgICAgICAgdmFyIHRpbWVUZXh0ID0gdGhpcy5nZXRUaW1lVGV4dChldmVudFJhbmdlKTtcbiAgICAgICAgcmV0dXJuICc8YSBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIiBzdHlsZT1cIicgKyBjc3NUb1N0cih0aGlzLmdldFNraW5Dc3MoZXZlbnRVaSkpICsgJ1wiJyArXG4gICAgICAgICAgICAoZXZlbnREZWYudXJsID9cbiAgICAgICAgICAgICAgICAnIGhyZWY9XCInICsgaHRtbEVzY2FwZShldmVudERlZi51cmwpICsgJ1wiJyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAodGltZVRleHQgP1xuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLXRpbWUtd3JhcFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy10aW1lXCI+JyArXG4gICAgICAgICAgICAgICAgICAgIGh0bWxFc2NhcGUodGltZVRleHQpICtcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtdGl0bGUtd3JhcFwiPicgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtdGl0bGUgZmMtc3RpY2t5XCI+JyArXG4gICAgICAgICAgICAoZXZlbnREZWYudGl0bGUgPyBodG1sRXNjYXBlKGV2ZW50RGVmLnRpdGxlKSA6ICcmbmJzcDsnKSArXG4gICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgIChpc1Jlc2l6YWJsZUZyb21TdGFydCA/XG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1yZXNpemVyIGZjLXN0YXJ0LXJlc2l6ZXJcIj48L2Rpdj4nIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgKGlzUmVzaXphYmxlRnJvbUVuZCA/XG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1yZXNpemVyIGZjLWVuZC1yZXNpemVyXCI+PC9kaXY+JyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc8L2E+JztcbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVEaXNwbGF5RXZlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMudGltZUF4aXMudERhdGVQcm9maWxlLmlzVGltZVNjYWxlOyAvLyBiZWNhdXNlIHRpbWVzIHNob3VsZCBiZSBvYnZpb3VzIHZpYSBheGlzXG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRGlzcGxheUV2ZW50RW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyBhIGRlZmF1bHQgZXZlbnQgdGltZSBmb3JtYXR0aW5nIHN0cmluZyBpZiBgdGltZUZvcm1hdGAgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZFxuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVFdmVudFRpbWVGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIG9taXRaZXJvTWludXRlOiB0cnVlLFxuICAgICAgICAgICAgbWVyaWRpZW06ICduYXJyb3cnXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsICYmIHRoaXMubWFzdGVyQ29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLWV2ZW50LWNvbnRhaW5lcicgfSk7XG4gICAgICAgICAgICBpZiAobWlycm9ySW5mbykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZmMtbWlycm9yLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXN0ZXJDb250YWluZXJFbC5hcHBlbmRDaGlsZCh0aGlzLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHNlZy5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmRldGFjaFNlZ3MgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50KHNlZy5lbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGNvbXB1dGVzIEFORCBhc3NpZ25zIChhc3NpZ25zIHRoZSBsZWZ0L3JpZ2h0IGF0IGxlYXN0KS4gYmFkXG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHRpbWVBeGlzID0gdGhpcy50aW1lQXhpcztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzMgPSBzZWdzOyBfaSA8IHNlZ3NfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzNbX2ldO1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHRpbWVBeGlzLnJhbmdlVG9Db29yZHMoc2VnKTsgLy8gd29ya3MgYmVjYXVzZSBTZWcgaGFzIHN0YXJ0L2VuZFxuICAgICAgICAgICAgYXBwbHlTdHlsZShzZWcuZWwsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAoc2VnLmxlZnQgPSBjb29yZHMubGVmdCksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IC0oc2VnLnJpZ2h0ID0gY29vcmRzLnJpZ2h0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tcHV0ZSBzZWcgdmVydGljYWxzXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc180ID0gc2VnczsgX2kgPCBzZWdzXzQubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc180W19pXTtcbiAgICAgICAgICAgIHNlZy5oZWlnaHQgPSBjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucyhzZWcuZWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVpbGRTZWdMZXZlbHMoc2Vncyk7IC8vIHBvcHVsYXRlcyBhYm92ZS9iZWxvdyBwcm9wcyBmb3IgY29tcHV0ZU9mZnNldEZvclNlZ3NcbiAgICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gY29tcHV0ZU9mZnNldEZvclNlZ3Moc2Vncyk7IC8vIGFsc28gYXNzaWducyBzZWcudG9wXG4gICAgICAgIGFwcGx5U3R5bGVQcm9wKHRoaXMuZWwsICdoZWlnaHQnLCB0b3RhbEhlaWdodCk7XG4gICAgICAgIC8vIGFzc2lnbiBzZWcgdmVydGljYWxzXG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgc2Vnc181ID0gc2VnczsgX2EgPCBzZWdzXzUubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc181W19hXTtcbiAgICAgICAgICAgIGFwcGx5U3R5bGVQcm9wKHNlZy5lbCwgJ3RvcCcsIHNlZy50b3ApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5idWlsZFNlZ0xldmVscyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIHZhciBzZWdMZXZlbHMgPSBbXTtcbiAgICAgICAgc2VncyA9IHRoaXMuc29ydEV2ZW50U2VncyhzZWdzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzYgPSBzZWdzOyBfaSA8IHNlZ3NfNi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB1bnBsYWNlZFNlZyA9IHNlZ3NfNltfaV07XG4gICAgICAgICAgICB1bnBsYWNlZFNlZy5hYm92ZSA9IFtdO1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBmaXJzdCBsZXZlbCB3aXRoIG5vIGNvbGxpc2lvbnNcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IDA7IC8vIGxldmVsIGluZGV4XG4gICAgICAgICAgICB3aGlsZSAobGV2ZWwgPCBzZWdMZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzTGV2ZWxDb2xsaXNpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgY29sbGlzaW9uc1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSBzZWdMZXZlbHNbbGV2ZWxdOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2VkU2VnID0gX2JbX2FdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGltZVJvd1NlZ3NDb2xsaWRlKHVucGxhY2VkU2VnLCBwbGFjZWRTZWcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBsYWNlZFNlZy5hYm92ZS5wdXNoKHBsYWNlZFNlZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xldmVsQ29sbGlzaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNMZXZlbENvbGxpc2lvbikge1xuICAgICAgICAgICAgICAgICAgICBsZXZlbCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW5zZXJ0IGludG8gdGhlIGZpcnN0IG5vbi1jb2xsaWRpbmcgbGV2ZWwuIGNyZWF0ZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIChzZWdMZXZlbHNbbGV2ZWxdIHx8IChzZWdMZXZlbHNbbGV2ZWxdID0gW10pKVxuICAgICAgICAgICAgICAgIC5wdXNoKHVucGxhY2VkU2VnKTtcbiAgICAgICAgICAgIC8vIHJlY29yZCBwb3NzaWJsZSBjb2xsaWRpbmcgc2VnbWVudHMgYmVsb3cgKFRPRE86IGF1dG9tYXRlZCB0ZXN0IGZvciB0aGlzKVxuICAgICAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgICAgIHdoaWxlIChsZXZlbCA8IHNlZ0xldmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gc2VnTGV2ZWxzW2xldmVsXTsgX2MgPCBfZC5sZW5ndGg7IF9jKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlbG93U2VnID0gX2RbX2NdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGltZVJvd1NlZ3NDb2xsaWRlKHVucGxhY2VkU2VnLCBiZWxvd1NlZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlbG93U2VnLmFib3ZlLnB1c2godW5wbGFjZWRTZWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldmVsICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ0xldmVscztcbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyO1xufShGZ0V2ZW50UmVuZGVyZXIpKTtcbmZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRGb3JTZWdzKHNlZ3MpIHtcbiAgICB2YXIgbWF4ID0gMDtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfNyA9IHNlZ3M7IF9pIDwgc2Vnc183Lmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc2VnID0gc2Vnc183W19pXTtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBjb21wdXRlT2Zmc2V0Rm9yU2VnKHNlZykpO1xuICAgIH1cbiAgICByZXR1cm4gbWF4O1xufVxuZnVuY3Rpb24gY29tcHV0ZU9mZnNldEZvclNlZyhzZWcpIHtcbiAgICBpZiAoKHNlZy50b3AgPT0gbnVsbCkpIHtcbiAgICAgICAgc2VnLnRvcCA9IGNvbXB1dGVPZmZzZXRGb3JTZWdzKHNlZy5hYm92ZSk7XG4gICAgfVxuICAgIHJldHVybiBzZWcudG9wICsgc2VnLmhlaWdodDtcbn1cbmZ1bmN0aW9uIHRpbWVSb3dTZWdzQ29sbGlkZShzZWcwLCBzZWcxKSB7XG4gICAgcmV0dXJuIChzZWcwLmxlZnQgPCBzZWcxLnJpZ2h0KSAmJiAoc2VnMC5yaWdodCA+IHNlZzEubGVmdCk7XG59XG5cbnZhciBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIoY29udGV4dCwgbWFzdGVyQ29udGFpbmVyRWwsIHRpbWVBeGlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1hc3RlckNvbnRhaW5lckVsID0gbWFzdGVyQ29udGFpbmVyRWw7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzID0gdGltZUF4aXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVMYW5lRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hTZWdzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgaWYgKHNlZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdiZ2V2ZW50JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2luZyBhIG5ldyBjb250YWluZXIgZWFjaCB0aW1lIGlzIE9LQVlcbiAgICAgICAgICAgIC8vIGFsbCB0eXBlcyBvZiBzZWdzIChiYWNrZ3JvdW5kIG9yIGJ1c2luZXNzIGhvdXJzIG9yIHdoYXRldmVyKSBhcmUgcmVuZGVyZWQgaW4gb25lIHBhc3NcbiAgICAgICAgICAgIHZhciBjb250YWluZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtJyArIGNsYXNzTmFtZSArICctY29udGFpbmVyJyB9KTtcbiAgICAgICAgICAgIHRoaXMubWFzdGVyQ29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChzZWcuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtjb250YWluZXJFbF07IC8vIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTZWdTaXplcyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIHZhciB0aW1lQXhpcyA9IHRoaXMudGltZUF4aXM7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18yID0gc2VnczsgX2kgPCBzZWdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18yW19pXTtcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSB0aW1lQXhpcy5yYW5nZVRvQ29vcmRzKHNlZyk7XG4gICAgICAgICAgICBzZWcubGVmdCA9IGNvb3Jkcy5sZWZ0O1xuICAgICAgICAgICAgc2VnLnJpZ2h0ID0gY29vcmRzLnJpZ2h0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzMgPSBzZWdzOyBfaSA8IHNlZ3NfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzNbX2ldO1xuICAgICAgICAgICAgYXBwbHlTdHlsZShzZWcuZWwsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBzZWcubGVmdCxcbiAgICAgICAgICAgICAgICByaWdodDogLXNlZy5yaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXI7XG59KEZpbGxSZW5kZXJlcikpO1xuXG52YXIgVGltZWxpbmVMYW5lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lbGluZUxhbmUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGltZWxpbmVMYW5lKGNvbnRleHQsIGZnQ29udGFpbmVyRWwsIGJnQ29udGFpbmVyRWwsIHRpbWVBeGlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQsIGJnQ29udGFpbmVyRWwpIC8vIHNob3VsZCBlbCBiZSBiZ0NvbnRhaW5lckVsPz8/XG4gICAgICAgICB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zbGljZXIgPSBuZXcgVGltZWxpbmVMYW5lU2xpY2VyKCk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50RHJhZyA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMuX3JlbmRlckV2ZW50RHJhZywgX3RoaXMuX3VucmVuZGVyRXZlbnREcmFnKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRXZlbnRSZXNpemUgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLl9yZW5kZXJFdmVudFJlc2l6ZSwgX3RoaXMuX3VucmVuZGVyRXZlbnRSZXNpemUpO1xuICAgICAgICB2YXIgZmlsbFJlbmRlcmVyID0gX3RoaXMuZmlsbFJlbmRlcmVyID0gbmV3IFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlcihjb250ZXh0LCBiZ0NvbnRhaW5lckVsLCB0aW1lQXhpcyk7XG4gICAgICAgIHZhciBldmVudFJlbmRlcmVyID0gX3RoaXMuZXZlbnRSZW5kZXJlciA9IG5ldyBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyKGNvbnRleHQsIGZnQ29udGFpbmVyRWwsIHRpbWVBeGlzKTtcbiAgICAgICAgX3RoaXMubWlycm9yUmVuZGVyZXIgPSBuZXcgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlcihjb250ZXh0LCBmZ0NvbnRhaW5lckVsLCB0aW1lQXhpcyk7XG4gICAgICAgIF90aGlzLnJlbmRlckJ1c2luZXNzSG91cnMgPSBtZW1vaXplUmVuZGVyaW5nKGZpbGxSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZmlsbFJlbmRlcmVyLCAnYnVzaW5lc3NIb3VycycpLCBmaWxsUmVuZGVyZXIudW5yZW5kZXIuYmluZChmaWxsUmVuZGVyZXIsICdidXNpbmVzc0hvdXJzJykpO1xuICAgICAgICBfdGhpcy5yZW5kZXJEYXRlU2VsZWN0aW9uID0gbWVtb2l6ZVJlbmRlcmluZyhmaWxsUmVuZGVyZXIucmVuZGVyU2Vncy5iaW5kKGZpbGxSZW5kZXJlciwgJ2hpZ2hsaWdodCcpLCBmaWxsUmVuZGVyZXIudW5yZW5kZXIuYmluZChmaWxsUmVuZGVyZXIsICdoaWdobGlnaHQnKSk7XG4gICAgICAgIF90aGlzLnJlbmRlckJnRXZlbnRzID0gbWVtb2l6ZVJlbmRlcmluZyhmaWxsUmVuZGVyZXIucmVuZGVyU2Vncy5iaW5kKGZpbGxSZW5kZXJlciwgJ2JnRXZlbnQnKSwgZmlsbFJlbmRlcmVyLnVucmVuZGVyLmJpbmQoZmlsbFJlbmRlcmVyLCAnYmdFdmVudCcpKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRmdFdmVudHMgPSBtZW1vaXplUmVuZGVyaW5nKGV2ZW50UmVuZGVyZXIucmVuZGVyU2Vncy5iaW5kKGV2ZW50UmVuZGVyZXIpLCBldmVudFJlbmRlcmVyLnVucmVuZGVyLmJpbmQoZXZlbnRSZW5kZXJlcikpO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IG1lbW9pemVSZW5kZXJpbmcoZXZlbnRSZW5kZXJlci5zZWxlY3RCeUluc3RhbmNlSWQuYmluZChldmVudFJlbmRlcmVyKSwgZXZlbnRSZW5kZXJlci51bnNlbGVjdEJ5SW5zdGFuY2VJZC5iaW5kKGV2ZW50UmVuZGVyZXIpLCBbX3RoaXMucmVuZGVyRmdFdmVudHNdKTtcbiAgICAgICAgX3RoaXMudGltZUF4aXMgPSB0aW1lQXhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgc2xpY2VkUHJvcHMgPSB0aGlzLnNsaWNlci5zbGljZVByb3BzKHByb3BzLCBwcm9wcy5kYXRlUHJvZmlsZSwgdGhpcy50aW1lQXhpcy50RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUgPyBudWxsIDogcHJvcHMubmV4dERheVRocmVzaG9sZCwgdGhpcywgdGhpcy50aW1lQXhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyQnVzaW5lc3NIb3VycyhzbGljZWRQcm9wcy5idXNpbmVzc0hvdXJTZWdzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlU2VsZWN0aW9uKHNsaWNlZFByb3BzLmRhdGVTZWxlY3Rpb25TZWdzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCZ0V2ZW50cyhzbGljZWRQcm9wcy5iZ0V2ZW50U2Vncyk7XG4gICAgICAgIHRoaXMucmVuZGVyRmdFdmVudHMoc2xpY2VkUHJvcHMuZmdFdmVudFNlZ3MpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uKHNsaWNlZFByb3BzLmV2ZW50U2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWcoc2xpY2VkUHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZShzbGljZWRQcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnJlbmRlckJ1c2luZXNzSG91cnMudW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlU2VsZWN0aW9uLnVucmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyQmdFdmVudHMudW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJGZ0V2ZW50cy51bnJlbmRlcigpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uLnVucmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnREcmFnLnVucmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRSZXNpemUudW5yZW5kZXIoKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUuX3JlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZW5kZXJlci5oaWRlQnlIYXNoKHN0YXRlLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIucmVuZGVyU2VncyhzdGF0ZS5zZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZzogc3RhdGUuc291cmNlU2VnIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLl91bnJlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZW5kZXJlci5zaG93QnlIYXNoKHN0YXRlLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIudW5yZW5kZXIoc3RhdGUuc2VncywgeyBpc0RyYWdnaW5nOiB0cnVlLCBzb3VyY2VTZWc6IHN0YXRlLnNvdXJjZVNlZyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZWxpbmVMYW5lLnByb3RvdHlwZS5fcmVuZGVyRXZlbnRSZXNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAvLyBIQUNLLiBldmVudFJlbmRlcmVyIGFuZCBmaWxsUmVuZGVyZXIgYm90aCB1c2UgdGhlc2Ugc2Vncy4gd291bGQgY29tcGV0ZSBvdmVyIHNlZy5lbFxuICAgICAgICAgICAgdmFyIHNlZ3NGb3JIaWdobGlnaHQgPSBzdGF0ZS5zZWdzLm1hcChmdW5jdGlvbiAoc2VnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBzZWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50UmVuZGVyZXIuaGlkZUJ5SGFzaChzdGF0ZS5hZmZlY3RlZEluc3RhbmNlcyk7XG4gICAgICAgICAgICB0aGlzLmZpbGxSZW5kZXJlci5yZW5kZXJTZWdzKCdoaWdobGlnaHQnLCBzZWdzRm9ySGlnaGxpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIucmVuZGVyU2VncyhzdGF0ZS5zZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZzogc3RhdGUuc291cmNlU2VnIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLl91bnJlbmRlckV2ZW50UmVzaXplID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFJlbmRlcmVyLnNob3dCeUhhc2goc3RhdGUuYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgdGhpcy5maWxsUmVuZGVyZXIudW5yZW5kZXIoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JSZW5kZXJlci51bnJlbmRlcihzdGF0ZS5zZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZzogc3RhdGUuc291cmNlU2VnIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZmlsbFJlbmRlcmVyID0gX2EuZmlsbFJlbmRlcmVyLCBldmVudFJlbmRlcmVyID0gX2EuZXZlbnRSZW5kZXJlciwgbWlycm9yUmVuZGVyZXIgPSBfYS5taXJyb3JSZW5kZXJlcjtcbiAgICAgICAgZmlsbFJlbmRlcmVyLmNvbXB1dGVTaXplcyhpc1Jlc2l6ZSk7XG4gICAgICAgIGV2ZW50UmVuZGVyZXIuY29tcHV0ZVNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgbWlycm9yUmVuZGVyZXIuY29tcHV0ZVNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgZmlsbFJlbmRlcmVyLmFzc2lnblNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgZXZlbnRSZW5kZXJlci5hc3NpZ25TaXplcyhpc1Jlc2l6ZSk7XG4gICAgICAgIG1pcnJvclJlbmRlcmVyLmFzc2lnblNpemVzKGlzUmVzaXplKTtcbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZUxhbmU7XG59KERhdGVDb21wb25lbnQpKTtcbnZhciBUaW1lbGluZUxhbmVTbGljZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVsaW5lTGFuZVNsaWNlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZUxhbmVTbGljZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVMYW5lU2xpY2VyLnByb3RvdHlwZS5zbGljZVJhbmdlID0gZnVuY3Rpb24gKG9yaWdSYW5nZSwgdGltZUF4aXMpIHtcbiAgICAgICAgdmFyIHREYXRlUHJvZmlsZSA9IHRpbWVBeGlzLnREYXRlUHJvZmlsZTtcbiAgICAgICAgdmFyIGRhdGVQcm9maWxlID0gdGltZUF4aXMucHJvcHMuZGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBub3JtYWxSYW5nZSA9IG5vcm1hbGl6ZVJhbmdlKG9yaWdSYW5nZSwgdERhdGVQcm9maWxlLCB0aW1lQXhpcy5kYXRlRW52KTtcbiAgICAgICAgdmFyIHNlZ3MgPSBbXTtcbiAgICAgICAgLy8gcHJvdGVjdCBhZ2FpbnN0IHdoZW4gdGhlIHNwYW4gaXMgZW50aXJlbHkgaW4gYW4gaW52YWxpZCBkYXRlIHJlZ2lvblxuICAgICAgICBpZiAodGltZUF4aXMuY29tcHV0ZURhdGVTbmFwQ292ZXJhZ2Uobm9ybWFsUmFuZ2Uuc3RhcnQpIDwgdGltZUF4aXMuY29tcHV0ZURhdGVTbmFwQ292ZXJhZ2Uobm9ybWFsUmFuZ2UuZW5kKSkge1xuICAgICAgICAgICAgLy8gaW50ZXJzZWN0IHRoZSBmb290cHJpbnQncyByYW5nZSB3aXRoIHRoZSBncmlkJ3MgcmFuZ2VcbiAgICAgICAgICAgIHZhciBzbGljZWRSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhub3JtYWxSYW5nZSwgdERhdGVQcm9maWxlLm5vcm1hbGl6ZWRSYW5nZSk7XG4gICAgICAgICAgICBpZiAoc2xpY2VkUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBzZWdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc2xpY2VkUmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogc2xpY2VkUmFuZ2UuZW5kLFxuICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBzbGljZWRSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IG5vcm1hbFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSAmJiBpc1ZhbGlkRGF0ZShzbGljZWRSYW5nZS5zdGFydCwgdERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgdGltZUF4aXMudmlldyksXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBzbGljZWRSYW5nZS5lbmQudmFsdWVPZigpID09PSBub3JtYWxSYW5nZS5lbmQudmFsdWVPZigpICYmIGlzVmFsaWREYXRlKGFkZE1zKHNsaWNlZFJhbmdlLmVuZCwgLTEpLCB0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCB0aW1lQXhpcy52aWV3KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lTGFuZVNsaWNlcjtcbn0oU2xpY2VyKSk7XG5cbnZhciBUaW1lbGluZVZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVsaW5lVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZVZpZXcoY29udGV4dCwgdmlld1NwZWMsIGRhdGVQcm9maWxlR2VuZXJhdG9yLCBwYXJlbnRFbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0LCB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHBhcmVudEVsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdmYy10aW1lbGluZScpO1xuICAgICAgICBpZiAoX3RoaXMub3B0KCdldmVudE92ZXJsYXAnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF90aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2ZjLW5vLW92ZXJsYXAnKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5lbC5pbm5lckhUTUwgPSBfdGhpcy5yZW5kZXJTa2VsZXRvbkh0bWwoKTtcbiAgICAgICAgX3RoaXMudGltZUF4aXMgPSBuZXcgVGltZUF4aXMoX3RoaXMuY29udGV4dCwgX3RoaXMuZWwucXVlcnlTZWxlY3RvcigndGhlYWQgLmZjLXRpbWUtYXJlYScpLCBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0Ym9keSAuZmMtdGltZS1hcmVhJykpO1xuICAgICAgICBfdGhpcy5sYW5lID0gbmV3IFRpbWVsaW5lTGFuZShfdGhpcy5jb250ZXh0LCBfdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5jb250ZW50RWwsIF90aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLmJnRWwsIF90aGlzLnRpbWVBeGlzKTtcbiAgICAgICAgY29udGV4dC5jYWxlbmRhci5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzLCB7XG4gICAgICAgICAgICBlbDogX3RoaXMudGltZUF4aXMuc2xhdHMuZWxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sYW5lLmRlc3Ryb3koKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIudW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KHRoaXMpO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXJTa2VsZXRvbkh0bWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGVtZSA9IHRoaXMudGhlbWU7XG4gICAgICAgIHJldHVybiBcIjx0YWJsZSBjbGFzcz1cXFwiXCIgKyB0aGVtZS5nZXRDbGFzcygndGFibGVHcmlkJykgKyBcIlxcXCI+IDx0aGVhZCBjbGFzcz1cXFwiZmMtaGVhZFxcXCI+IDx0cj4gPHRkIGNsYXNzPVxcXCJmYy10aW1lLWFyZWEgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyBcIlxcXCI+PC90ZD4gPC90cj4gPC90aGVhZD4gPHRib2R5IGNsYXNzPVxcXCJmYy1ib2R5XFxcIj4gPHRyPiA8dGQgY2xhc3M9XFxcImZjLXRpbWUtYXJlYSBcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRDb250ZW50JykgKyBcIlxcXCI+PC90ZD4gPC90cj4gPC90Ym9keT4gPC90YWJsZT5cIjtcbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcywgcHJvcHMpOyAvLyBmbGFncyBmb3IgdXBkYXRlU2l6ZSwgYWRkU2Nyb2xsXG4gICAgICAgIHRoaXMudGltZUF4aXMucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sYW5lLnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7fSwgcHJvcHMsIHsgbmV4dERheVRocmVzaG9sZDogdGhpcy5uZXh0RGF5VGhyZXNob2xkIH0pKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSwgdG90YWxIZWlnaHQsIGlzQXV0bykge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnVwZGF0ZVNpemUoaXNSZXNpemUsIHRvdGFsSGVpZ2h0LCBpc0F1dG8pO1xuICAgICAgICB0aGlzLmxhbmUudXBkYXRlU2l6ZShpc1Jlc2l6ZSk7XG4gICAgfTtcbiAgICAvLyBOb3cgSW5kaWNhdG9yXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5nZXROb3dJbmRpY2F0b3JVbml0ID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVBeGlzLmdldE5vd0luZGljYXRvclVuaXQoZGF0ZVByb2ZpbGUpO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnJlbmRlck5vd0luZGljYXRvcihkYXRlKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUudW5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMudW5yZW5kZXJOb3dJbmRpY2F0b3IoKTtcbiAgICB9O1xuICAgIC8vIFNjcm9sbCBTeXN0ZW1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLmNvbXB1dGVEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVBeGlzLmNvbXB1dGVEYXRlU2Nyb2xsKGR1cmF0aW9uKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUuYXBwbHlTY3JvbGwgPSBmdW5jdGlvbiAoc2Nyb2xsLCBpc1Jlc2l6ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmFwcGx5U2Nyb2xsLmNhbGwodGhpcywgc2Nyb2xsLCBpc1Jlc2l6ZSk7IC8vIHdpbGwgY2FsbCBhcHBseURhdGVTY3JvbGxcbiAgICAgICAgLy8gYXZvaWQgdXBkYXRpbmcgc3RpY2t5c2Nyb2xsIHRvbyBvZnRlblxuICAgICAgICAvLyBUT0RPOiByZXBlYXQgY29kZSBhcyBSZXNvdXJjZVRpbWVsaW5lVmlldzo6dXBkYXRlU2l6ZVxuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICBpZiAoaXNSZXNpemUgfHwgY2FsZW5kYXIuaXNWaWV3VXBkYXRlZCB8fCBjYWxlbmRhci5pc0RhdGVzVXBkYXRlZCB8fCBjYWxlbmRhci5pc0V2ZW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGltZUF4aXMudXBkYXRlU3RpY2t5U2Nyb2xsZXJzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLmFwcGx5RGF0ZVNjcm9sbChzY3JvbGwpO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5xdWVyeVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuaGFuY2VkU2Nyb2xsID0gdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiBlbmhhbmNlZFNjcm9sbC5nZXRTY3JvbGxUb3AoKSxcbiAgICAgICAgICAgIGxlZnQ6IGVuaGFuY2VkU2Nyb2xsLmdldFNjcm9sbExlZnQoKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gSGl0IFN5c3RlbVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUuYnVpbGRQb3NpdGlvbkNhY2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aW1lQXhpcy5zbGF0cy51cGRhdGVTaXplKCk7XG4gICAgfTtcbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5SGl0ID0gZnVuY3Rpb24gKHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3AsIGVsV2lkdGgsIGVsSGVpZ2h0KSB7XG4gICAgICAgIHZhciBzbGF0SGl0ID0gdGhpcy50aW1lQXhpcy5zbGF0cy5wb3NpdGlvblRvSGl0KHBvc2l0aW9uTGVmdCk7XG4gICAgICAgIGlmIChzbGF0SGl0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgICAgICAgICBkYXRlU3Bhbjogc2xhdEhpdC5kYXRlU3BhbixcbiAgICAgICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHNsYXRIaXQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHNsYXRIaXQucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBlbEhlaWdodFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF5RWw6IHNsYXRIaXQuZGF5RWwsXG4gICAgICAgICAgICAgICAgbGF5ZXI6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZVZpZXc7XG59KFZpZXcpKTtcblxudmFyIG1haW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgIGRlZmF1bHRWaWV3OiAndGltZWxpbmVEYXknLFxuICAgIHZpZXdzOiB7XG4gICAgICAgIHRpbWVsaW5lOiB7XG4gICAgICAgICAgICBjbGFzczogVGltZWxpbmVWaWV3LFxuICAgICAgICAgICAgZXZlbnRSZXNpemFibGVGcm9tU3RhcnQ6IHRydWUgLy8gaG93IGlzIHRoaXMgY29uc3VtZWQgZm9yIFRpbWVsaW5lVmlldyB0aG8/XG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVsaW5lRGF5OiB7XG4gICAgICAgICAgICB0eXBlOiAndGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVsaW5lV2Vlazoge1xuICAgICAgICAgICAgdHlwZTogJ3RpbWVsaW5lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IHdlZWtzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGltZWxpbmVNb250aDoge1xuICAgICAgICAgICAgdHlwZTogJ3RpbWVsaW5lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IG1vbnRoczogMSB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVsaW5lWWVhcjoge1xuICAgICAgICAgICAgdHlwZTogJ3RpbWVsaW5lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IHllYXJzOiAxIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtYWluO1xuZXhwb3J0IHsgSGVhZGVyQm9keUxheW91dCwgU2Nyb2xsSm9pbmVyLCBTdGlja3lTY3JvbGxlciwgVGltZUF4aXMsIFRpbWVsaW5lTGFuZSwgVGltZWxpbmVWaWV3IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiXSwic291cmNlUm9vdCI6IiJ9