/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./development/admin/js/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/admin/js/components/Room.js":
/*!*************************************************!*\
  !*** ./development/admin/js/components/Room.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Room =
/*#__PURE__*/
function () {
  function Room() {
    _classCallCheck(this, Room);

    this.cancelBtn = $('.joeee-booking-room-cancel-btn');
    this.roomForm = $('#joeee-roombooking-room-form');
    this.roomBgModal = $('.joeee-booking-room-bg-modal');
  }

  _createClass(Room, [{
    key: "cancel",
    value: function cancel() {
      this.cancelBtn.click(function (ev) {
        ev.preventDefault();
        this.roomForm.trigger('reset');
        this.roomBgModal.css("display", "none");
        location.reload();
      });
    }
  }]);

  return Room;
}();

/***/ }),

/***/ "./development/admin/js/components/test.js":
/*!*************************************************!*\
  !*** ./development/admin/js/components/test.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// @TODO This is an example console.log(). Remove for production
console.log('testadmin.js');

/***/ }),

/***/ "./development/admin/js/script.js":
/*!****************************************!*\
  !*** ./development/admin/js/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_test__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/test */ "./development/admin/js/components/test.js");
/* harmony import */ var _components_test__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_test__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fullcalendar/resource-timeline */ "./node_modules/@fullcalendar/resource-timeline/main.esm.js");
/* harmony import */ var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fullcalendar/interaction */ "./node_modules/@fullcalendar/interaction/main.esm.js");
/* harmony import */ var _components_Room__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/Room */ "./development/admin/js/components/Room.js");
/* harmony import */ var _components_Room__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_components_Room__WEBPACK_IMPORTED_MODULE_5__);
/**
 * All of the code for your admin-facing JavaScript source
 * should reside in the file "development/admin/js/script.js".
 *
 * Note: It has been assumed you will write jQuery code here, so the
 * $ function reference has been prepared (import $ from 'jquery')for usage within the scope
 * of this function.
 *
 * This enables you to define handlers, for when the DOM is ready:
 *
 * $(function() {
 *
 * });
 *
 * When the window is loaded:
 *
 * $( window ).load(function() {
 *
 * });
 *
 * ...and/or other possibilities.
 *
 * Ideally, it is not considered best practise to attach more than a
 * single DOM-ready or window-load handler for a particular page.
 * Although scripts in the WordPress core, Plugins and Themes may be
 * practising this, we should strive to set a better example in our own work.
 *
 * The file is enqueued from src/admin/class-assets.php.
 */
 // @TODO This is an example import. Remove for production





 // Constants for internationalization purposes

var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    _x = _wp$i18n._x,
    _n = _wp$i18n._n,
    _nx = _wp$i18n._nx;
jQuery(document).ready(function () {
  var ROOMFORM = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-roombooking-room-form');
  var ROOMID = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-id');
  var ROOMNUMBER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-roomnumber');
  var FLOORNUMBER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-floornumber');
  var ROOMADULTS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-adults');
  var ROOMKIDS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-kids');
  var ROOMPRICE = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-price');
  var ROOMDESC = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-desc');
  var ROOMACTIVE = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-active');
  var ROOMSUBMITBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-submit');
  var ROOMSUBMITMODIFY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-form-submit-modify');
  var ROOMDELETEBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-delete-btn');
  var ROOMCANCELBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-cancel-btn');
  var RESCANCELBTN = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-cancel-btn');
  var RESBGMODAL = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".joeee-booking-reservation-bg-modal");
  var RESROOMID = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-roomid');
  var RESARRIVAL = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#joeee-booking-reservation-arrival");
  var RESDEPARTURE = jquery__WEBPACK_IMPORTED_MODULE_0___default()("#joeee-booking-reservation-departure");
  var RESPERSONS = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-persons');
  var RESEMAIL = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-email');
  var RESFIRSTNAME = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-firstname');
  var RESLASTNAME = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-lastname');
  var RESNATIONALITY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-nationality-select');
  var RESGENDER = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-gender');
  var RESBIRTHDAY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-birthday');
  var RESSTREET = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-street');
  var RESZIP = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-zip');
  var RESCITY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-city');
  var RESCOUNTRY = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-country-select');
  var RESSUBMIT = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-submit');

  function cancel(ev, comesfrom) {
    ev.preventDefault();

    if (comesfrom === "room") {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-roombooking-room-form').trigger('reset');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "none");
    }

    if (comesfrom === "reservation") {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-reservation-form').trigger('reset');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-bg-modal').css("display", "none");
    }

    location.reload();
  }

  function emailIsValid(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  function checkReservationFormInputs(comesfrom) {
    var formout = {};
    var arrival = RESARRIVAL.val();
    var departure = RESDEPARTURE.val();
    var persons = RESPERSONS.val();
    var email = RESEMAIL.val();
    var firstName = RESFIRSTNAME.val().trim();
    var lastName = RESLASTNAME.val().trim();
    var nationality = RESNATIONALITY.val();
    var gender = RESGENDER.val();
    var birthday = RESBIRTHDAY.val();
    var street = RESSTREET.val().trim();
    var zip = RESZIP.val().trim();
    var city = RESCITY.val().trim();
    var country = RESCOUNTRY.val();

    if (arrival === '') {
      setErrorFor(RESARRIVAL, __('The arrival date is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESARRIVAL);
      formout.booked_from = RESARRIVAL;
    }

    if (departure === '') {
      setErrorFor(RESDEPARTURE, __('The departure date is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESDEPARTURE);
      formout.booked_to = RESDEPARTURE;
    }

    if (isNaN(persons) || persons === '') {
      setErrorFor(RESPERSONS, __('The persons field is required!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESPERSONS);
      formout.persons = persons;
    }

    if (email === "" || emailIsValid(email)) {
      formout.email = email;
      setSuccessFor(RESEMAIL);
    } else {
      setErrorFor(RESEMAIL, __('The E-Mail has a wrong format.', 'joeee-booking'));
      return false;
    }

    if (typeof firstName === 'string') {
      setSuccessFor(RESFIRSTNAME);

      if (firstName !== "") {
        formout.first_name = firstName;
      }
    } else {
      setErrorFor(RESFIRSTNAME, __('The first name have to be in string format!', 'joeee-booking'));
      return false;
    }

    if (lastName === "" || typeof lastName !== 'string') {
      setErrorFor(RESLASTNAME, __('The last name is required and has to be in string format', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(RESLASTNAME);
      formout.last_name = lastName;
    }

    formout.nationality = nationality;
    formout.gender = gender;

    if (birthday !== "") {
      setSuccessFor(RESBIRTHDAY);
      formout.birthday = birthday;
    }

    if (typeof street === 'string') {
      setSuccessFor(RESSTREET);
      formout.street = street;
    } else {
      setErrorFor(RESSTREET, __('The street has to be a string', 'joeee-booking'));
      return false;
    }

    if (typeof zip === 'string' || typeof zip === 'number') {
      setSuccessFor(RESZIP);
      formout.zip = zip;
    } else {
      setErrorFor(RESZIP, __('There is an error with your given zip.', 'joeee-booking'));
      return false;
    }

    if (typeof city === 'string') {
      setSuccessFor(RESCITY);
      formout.city = city;
    } else {
      setErrorFor(RESCITY, __('The city has to be a string.', 'joeee-booking'));
      return false;
    }

    formout.country = country;
    return formout;
  }

  function checkRoomFormInputs(comesfrom) {
    var formout = {};
    var roomnumberValue = ROOMNUMBER.val().trim();
    var floornumberValue = FLOORNUMBER.val().trim();
    var roomAdultsValue = ROOMADULTS.val().trim();
    var roomKidsValue = ROOMKIDS.val().trim();
    var roompriceValue = ROOMPRICE.val().trim().replace(',', '.');
    var roomDescription = ROOMDESC.val().trim();

    if (isNaN(roomnumberValue.toString()) || roomnumberValue === '') {
      setErrorFor(ROOMNUMBER, __('The room number must be set as string!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMNUMBER);
      formout.number = roomnumberValue.toString();
    }

    if (isNaN(floornumberValue) || floornumberValue === '') {
      setErrorFor(FLOORNUMBER, __('The floor number must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(FLOORNUMBER);
      formout.floor = floornumberValue;
    }

    if (isNaN(roomAdultsValue) || roomAdultsValue === '') {
      setErrorFor(ROOMADULTS, __('The adults must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMADULTS);
      formout.adults = parseInt(roomAdultsValue);
    }

    if (isNaN(roomKidsValue) || roomKidsValue === '') {
      setErrorFor(ROOMKIDS, __('The kids must be an integer!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMKIDS);
      formout.kids = parseInt(roomAdultsValue);
    }

    if (isNaN(roompriceValue) || roompriceValue === '') {
      setErrorFor(ROOMPRICE, __('The price must be a float number!', 'joeee-booking'));
      return false;
    } else {
      setSuccessFor(ROOMPRICE);
      formout.price = parseFloat(roompriceValue);
    }

    if (typeof roomDescription === 'string') {
      formout.description = roomDescription;
    }

    if (ROOMACTIVE.is(":checked")) {
      formout.active = true;
    } else {
      formout.active = false;
    }

    return formout;
  }

  function setErrorFor(input, message) {
    var formControl = input.parent();
    var small = formControl.find('small');
    formControl.addClass('error');
    small.text(message);
  }

  function setSuccessFor(input) {
    var formControl = input.parent();
    formControl.addClass('success');
  }

  var setLocale = 'en';
  var calendarEl = document.getElementById('joeeeBookingCalendar');
  var calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_2__["Calendar"](calendarEl, {
    schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
    plugins: [_fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_4__["default"], _fullcalendar_resource_timeline__WEBPACK_IMPORTED_MODULE_3__["default"]],
    aspectRatio: 1.5,
    resourceAreaWidth: '10%',
    slotDuration: '12:00',
    scrollTime: '00:00',
    // undo default 6am scrollTime
    locale: setLocale,
    header: {
      left: 'addRoom, addReservation, today, prev, next',
      center: 'title',
      right: 'resourceTimelineMonth, resourceTimelineWeek'
    },
    customButtons: {
      addRoom: {
        text: __('Add room', 'joeee-booking'),
        click: function click() {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "flex");
        }
      },
      addReservation: {
        text: __('Add reservation', 'joeee-booking'),
        click: function click() {
          RESBGMODAL.css("display", "flex");
        }
      }
    },
    defaultView: 'resourceTimelineMonth',
    selectable: true,
    selectHelper: true,
    editable: true,
    // enable draggable events
    resourceColumns: [{
      labelText: __('Room', 'joeee-booking'),
      field: 'title',
      width: '15px'
    }, {
      labelText: __('Beds', 'joeee-booking'),
      field: 'adults'
    }],
    resourceOrder: 'title',
    resources: {
      url: joeeeRest.restURL + 'joeee-booking/v1/room',
      method: 'GET'
    },
    resourceRender: function resourceRender(renderInfo) {
      renderInfo.el.addEventListener('click', function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
          type: 'GET',
          dataType: 'json',
          contentType: 'application/json',
          url: joeeeRest.restURL + 'joeee-booking/v1/room/' + renderInfo.resource.id,
          success: function success(data) {
            ROOMID.val(data.id);
            ROOMNUMBER.val(data.number);
            ROOMADULTS.val(data.adults);
            ROOMKIDS.val(data.kids);
            FLOORNUMBER.val(data.floor);
            ROOMPRICE.val(data.price);
            ROOMDESC.val(data.description);

            if (data.active == 1) {
              ROOMACTIVE.prop('checked', true);
            } else {
              ROOMACTIVE.prop('checked', false);
            }

            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-bg-modal').css("display", "flex");
            ROOMSUBMITBTN.addClass('close');
            ROOMSUBMITMODIFY.addClass('open');
            ROOMDELETEBTN.addClass('open');
          },
          error: function error(data) {
            alert(__("Error by receiving the room information.", 'joeee-booking'));
          },
          beforeSend: function beforeSend(xhr) {
            xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
          },
          data: ""
        });
      });
    },
    timeZone: 'UTC',
    events: [{
      id: '1',
      resourceId: '14',
      title: 'Test User',
      start: '2020-03-04T12:00:00',
      end: '2020-03-09T12:00:00',
      color: 'green'
    }, {
      id: '2',
      resourceId: '16',
      title: 'Test User2',
      start: '2020-03-04T12:00:00',
      end: '2020-03-14T12:00:00'
    }],
    eventClick: function eventClick(info) {
      console.log('Event: ' + info.event.title);
    },
    select: function select(arg) {
      var arrival = arg.start.toISOString().substr(0, 10);
      var departure = arg.end.toISOString().substr(0, 10);
      RESBGMODAL.css("display", "flex");
      RESROOMID.val(arg.resource.id);
      RESARRIVAL.val(arrival);
      RESDEPARTURE.val(departure);
      console.log('select callback', arg.startStr, arg.endStr, arg.resource ? arg.resource.id : '(no resource)');
    },
    dateClick: function dateClick(arg) {
      RESBGMODAL.css("display", "flex");
      var date = arg.date.toISOString().substr(0, 10);
      RESROOMID.val(arg.resource.id);
      RESARRIVAL.val(date);
      console.log('dateClick', arg.date, arg.resource ? arg.resource.id : '(no resource)', arg.date.toISOString(), arg.date.toString());
    }
  });
  calendar.render();
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-close').click(function () {
    ROOMCANCELBTN.trigger('click');
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-reservation-close').click(function () {
    RESCANCELBTN.trigger('click');
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-submit').click(function (ev) {
    ev.preventDefault();
    var checked = checkRoomFormInputs("submit");

    if (checked) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room',
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            ROOMCANCELBTN.trigger('click');
            location.reload();
          }, 2000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: JSON.stringify(checked)
      });
    }
  });
  ROOMCANCELBTN.click(function (ev) {
    cancel(ev, "room");
  });
  RESCANCELBTN.click(function (ev) {
    cancel(ev, "reservation");
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-room-form-submit-modify').click(function (ev) {
    ev.preventDefault();
    var checked = checkRoomFormInputs("update");

    if (checked) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'PUT',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room/' + ROOMID.val(),
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            ROOMCANCELBTN.trigger('click');
          }, 1000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: JSON.stringify(checked)
      });
    }
  });
  ROOMDELETEBTN.click(function (ev) {
    ev.preventDefault();

    if (confirm(__('You really wanna delete this room? Every booking in this room will be removed too by doing so!', 'joeee-booking'))) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({
        type: 'DELETE',
        dataType: 'json',
        contentType: 'application/json',
        url: joeeeRest.restURL + 'joeee-booking/v1/room/' + ROOMID.val(),
        success: function success(data) {
          var success = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-success');
          success.addClass('success');
          success.text(__('Saved changes successfully.', 'joeee-booking'));
          setTimeout(function () {
            jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-cancel-btn').trigger('click');
          }, 1000);
        },
        error: function error(data) {
          var err = data.responseJSON.message;
          var submitError = jquery__WEBPACK_IMPORTED_MODULE_0___default()('.joeee-booking-room-error');
          submitError.addClass('error');
          submitError.text(err);
        },
        beforeSend: function beforeSend(xhr) {
          xhr.setRequestHeader('X-WP-Nonce', joeeeRest.restNonce);
        },
        data: ""
      });
    } else {
      ROOMCANCELBTN.trigger('click');
    }
  });
  RESSUBMIT.click(function (ev) {
    ev.preventDefault();
    var checked = checkReservationFormInputs();
  });
  var i = 1;
  jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-extras-add').click(function () {
    i++;
    jquery__WEBPACK_IMPORTED_MODULE_0___default()('#joeee-booking-extras-table-dynamic').append('<tr id="row' + i + '"><td><input type="text" name="name[]" placeholder="Extra" class="joeee-booking-form--extras-control"></td><td><input type="text" name="price[]" placeholder="Price" class="joeee-booking-form--extras-control"></td><td><button type="button" name="remove" id="' + i + '" class="btn btn-danger btn-remove">X</button></td></tr>');
  });
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on('click', '.btn-remove', function () {
    var button_id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr("id");
    console.log(button_id);
    jquery__WEBPACK_IMPORTED_MODULE_0___default()('#row' + button_id).remove();
  });
});

/***/ }),

/***/ "./node_modules/@fullcalendar/core/main.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/core/main.esm.js ***!
  \*****************************************************/
/*! exports provided: Calendar, Component, DateComponent, DateEnv, DateProfileGenerator, DayHeader, DaySeries, DayTable, ElementDragging, ElementScrollController, EmitterMixin, EventApi, FgEventRenderer, FillRenderer, Interaction, Mixin, NamedTimeZoneImpl, PositionCache, ScrollComponent, ScrollController, Slicer, Splitter, Theme, View, WindowScrollController, addDays, addDurations, addMs, addWeeks, allowContextMenu, allowSelection, appendToElement, applyAll, applyMutationToEventStore, applyStyle, applyStyleProp, asRoughMinutes, asRoughMs, asRoughSeconds, buildGotoAnchorHtml, buildSegCompareObj, capitaliseFirstLetter, combineEventUis, compareByFieldSpec, compareByFieldSpecs, compareNumbers, compensateScroll, computeClippingRect, computeEdges, computeFallbackHeaderFormat, computeHeightAndMargins, computeInnerRect, computeRect, computeVisibleDayRange, config, constrainPoint, createDuration, createElement, createEmptyEventStore, createEventInstance, createFormatter, createPlugin, cssToStr, debounce, diffDates, diffDayAndTime, diffDays, diffPoints, diffWeeks, diffWholeDays, diffWholeWeeks, disableCursor, distributeHeight, elementClosest, elementMatches, enableCursor, eventTupleToStore, filterEventStoreDefs, filterHash, findChildren, findElements, flexibleCompare, forceClassName, formatDate, formatIsoTimeString, formatRange, getAllDayHtml, getClippingParents, getDayClasses, getElSeg, getRectCenter, getRelevantEvents, globalDefaults, greatestDurationDenominator, hasBgRendering, htmlEscape, htmlToElement, insertAfterElement, interactionSettingsStore, interactionSettingsToStore, intersectRanges, intersectRects, isArraysEqual, isDateSpansEqual, isInt, isInteractionValid, isMultiDayRange, isPropsEqual, isPropsValid, isSingleDay, isValidDate, listenBySelector, mapHash, matchCellWidths, memoize, memoizeOutput, memoizeRendering, mergeEventStores, multiplyDuration, padStart, parseBusinessHours, parseDragMeta, parseEventDef, parseFieldSpecs, parseMarker, pointInsideRect, prependToElement, preventContextMenu, preventDefault, preventSelection, processScopedUiProps, rangeContainsMarker, rangeContainsRange, rangesEqual, rangesIntersect, refineProps, removeElement, removeExact, renderDateCell, requestJson, sliceEventStore, startOfDay, subtractInnerElHeight, translateRect, uncompensateScroll, undistributeHeight, unpromisify, version, whenTransitionDone, wholeDivideDurations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calendar", function() { return Calendar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateComponent", function() { return DateComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateEnv", function() { return DateEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateProfileGenerator", function() { return DateProfileGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayHeader", function() { return DayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DaySeries", function() { return DaySeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayTable", function() { return DayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementDragging", function() { return ElementDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementScrollController", function() { return ElementScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmitterMixin", function() { return EmitterMixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventApi", function() { return EventApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FgEventRenderer", function() { return FgEventRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FillRenderer", function() { return FillRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interaction", function() { return Interaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mixin", function() { return Mixin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedTimeZoneImpl", function() { return NamedTimeZoneImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionCache", function() { return PositionCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollComponent", function() { return ScrollComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollController", function() { return ScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Slicer", function() { return Slicer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Splitter", function() { return Splitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Theme", function() { return Theme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "View", function() { return View; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindowScrollController", function() { return WindowScrollController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDays", function() { return addDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addDurations", function() { return addDurations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMs", function() { return addMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addWeeks", function() { return addWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowContextMenu", function() { return allowContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowSelection", function() { return allowSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToElement", function() { return appendToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyAll", function() { return applyAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMutationToEventStore", function() { return applyMutationToEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyle", function() { return applyStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyStyleProp", function() { return applyStyleProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMinutes", function() { return asRoughMinutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughMs", function() { return asRoughMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asRoughSeconds", function() { return asRoughSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildGotoAnchorHtml", function() { return buildGotoAnchorHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildSegCompareObj", function() { return buildSegCompareObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitaliseFirstLetter", function() { return capitaliseFirstLetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineEventUis", function() { return combineEventUis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpec", function() { return compareByFieldSpec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareByFieldSpecs", function() { return compareByFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareNumbers", function() { return compareNumbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compensateScroll", function() { return compensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeClippingRect", function() { return computeClippingRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeEdges", function() { return computeEdges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeFallbackHeaderFormat", function() { return computeFallbackHeaderFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeHeightAndMargins", function() { return computeHeightAndMargins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeInnerRect", function() { return computeInnerRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeRect", function() { return computeRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeVisibleDayRange", function() { return computeVisibleDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constrainPoint", function() { return constrainPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDuration", function() { return createDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createElement", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEmptyEventStore", function() { return createEmptyEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEventInstance", function() { return createEventInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFormatter", function() { return createFormatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlugin", function() { return createPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssToStr", function() { return cssToStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDates", function() { return diffDates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDayAndTime", function() { return diffDayAndTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffDays", function() { return diffDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffPoints", function() { return diffPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWeeks", function() { return diffWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeDays", function() { return diffWholeDays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "diffWholeWeeks", function() { return diffWholeWeeks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableCursor", function() { return disableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distributeHeight", function() { return distributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementClosest", function() { return elementClosest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementMatches", function() { return elementMatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableCursor", function() { return enableCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventTupleToStore", function() { return eventTupleToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterEventStoreDefs", function() { return filterEventStoreDefs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterHash", function() { return filterHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findChildren", function() { return findChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findElements", function() { return findElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flexibleCompare", function() { return flexibleCompare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceClassName", function() { return forceClassName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatIsoTimeString", function() { return formatIsoTimeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatRange", function() { return formatRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllDayHtml", function() { return getAllDayHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClippingParents", function() { return getClippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDayClasses", function() { return getDayClasses; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElSeg", function() { return getElSeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRectCenter", function() { return getRectCenter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelevantEvents", function() { return getRelevantEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "globalDefaults", function() { return globalDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "greatestDurationDenominator", function() { return greatestDurationDenominator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasBgRendering", function() { return hasBgRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlEscape", function() { return htmlEscape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "htmlToElement", function() { return htmlToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAfterElement", function() { return insertAfterElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsStore", function() { return interactionSettingsStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interactionSettingsToStore", function() { return interactionSettingsToStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRanges", function() { return intersectRanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectRects", function() { return intersectRects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArraysEqual", function() { return isArraysEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDateSpansEqual", function() { return isDateSpansEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInt", function() { return isInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteractionValid", function() { return isInteractionValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMultiDayRange", function() { return isMultiDayRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsEqual", function() { return isPropsEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPropsValid", function() { return isPropsValid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSingleDay", function() { return isSingleDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidDate", function() { return isValidDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listenBySelector", function() { return listenBySelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapHash", function() { return mapHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchCellWidths", function() { return matchCellWidths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return memoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeOutput", function() { return memoizeOutput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeRendering", function() { return memoizeRendering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeEventStores", function() { return mergeEventStores; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyDuration", function() { return multiplyDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padStart", function() { return padStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBusinessHours", function() { return parseBusinessHours; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDragMeta", function() { return parseDragMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseEventDef", function() { return parseEventDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseFieldSpecs", function() { return parseFieldSpecs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseMarker", function() { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointInsideRect", function() { return pointInsideRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToElement", function() { return prependToElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventContextMenu", function() { return preventContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventDefault", function() { return preventDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventSelection", function() { return preventSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processScopedUiProps", function() { return processScopedUiProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsMarker", function() { return rangeContainsMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeContainsRange", function() { return rangeContainsRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesEqual", function() { return rangesEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangesIntersect", function() { return rangesIntersect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refineProps", function() { return refineProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeElement", function() { return removeElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeExact", function() { return removeExact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDateCell", function() { return renderDateCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestJson", function() { return requestJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceEventStore", function() { return sliceEventStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startOfDay", function() { return startOfDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtractInnerElHeight", function() { return subtractInnerElHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateRect", function() { return translateRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncompensateScroll", function() { return uncompensateScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undistributeHeight", function() { return undistributeHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unpromisify", function() { return unpromisify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenTransitionDone", function() { return whenTransitionDone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wholeDivideDurations", function() { return wholeDivideDurations; });
/*!
FullCalendar Core Package v4.3.1
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/
// Creating
// ----------------------------------------------------------------------------------------------------------------
var elementPropHash = {
  className: true,
  colSpan: true,
  rowSpan: true
};
var containerTagHash = {
  '<tr': 'tbody',
  '<td': 'tr'
};

function createElement(tagName, attrs, content) {
  var el = document.createElement(tagName);

  if (attrs) {
    for (var attrName in attrs) {
      if (attrName === 'style') {
        applyStyle(el, attrs[attrName]);
      } else if (elementPropHash[attrName]) {
        el[attrName] = attrs[attrName];
      } else {
        el.setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  if (typeof content === 'string') {
    el.innerHTML = content; // shortcut. no need to process HTML in any way
  } else if (content != null) {
    appendToElement(el, content);
  }

  return el;
}

function htmlToElement(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.firstChild;
}

function htmlToElements(html) {
  return Array.prototype.slice.call(htmlToNodeList(html));
}

function htmlToNodeList(html) {
  html = html.trim();
  var container = document.createElement(computeContainerTag(html));
  container.innerHTML = html;
  return container.childNodes;
} // assumes html already trimmed and tag names are lowercase


function computeContainerTag(html) {
  return containerTagHash[html.substr(0, 3) // faster than using regex
  ] || 'div';
}

function appendToElement(el, content) {
  var childNodes = normalizeContent(content);

  for (var i = 0; i < childNodes.length; i++) {
    el.appendChild(childNodes[i]);
  }
}

function prependToElement(parent, content) {
  var newEls = normalizeContent(content);
  var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children

  for (var i = 0; i < newEls.length; i++) {
    parent.insertBefore(newEls[i], afterEl);
  }
}

function insertAfterElement(refEl, content) {
  var newEls = normalizeContent(content);
  var afterEl = refEl.nextSibling || null;

  for (var i = 0; i < newEls.length; i++) {
    refEl.parentNode.insertBefore(newEls[i], afterEl);
  }
}

function normalizeContent(content) {
  var els;

  if (typeof content === 'string') {
    els = htmlToElements(content);
  } else if (content instanceof Node) {
    els = [content];
  } else {
    // Node[] or NodeList
    els = Array.prototype.slice.call(content);
  }

  return els;
}

function removeElement(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
} // Querying
// ----------------------------------------------------------------------------------------------------------------
// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


var matchesMethod = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.msMatchesSelector;

var closestMethod = Element.prototype.closest || function (selector) {
  // polyfill
  var el = this;

  if (!document.documentElement.contains(el)) {
    return null;
  }

  do {
    if (elementMatches(el, selector)) {
      return el;
    }

    el = el.parentElement || el.parentNode;
  } while (el !== null && el.nodeType === 1);

  return null;
};

function elementClosest(el, selector) {
  return closestMethod.call(el, selector);
}

function elementMatches(el, selector) {
  return matchesMethod.call(el, selector);
} // accepts multiple subject els
// returns a real array. good for methods like forEach


function findElements(container, selector) {
  var containers = container instanceof HTMLElement ? [container] : container;
  var allMatches = [];

  for (var i = 0; i < containers.length; i++) {
    var matches = containers[i].querySelectorAll(selector);

    for (var j = 0; j < matches.length; j++) {
      allMatches.push(matches[j]);
    }
  }

  return allMatches;
} // accepts multiple subject els
// only queries direct child elements


function findChildren(parent, selector) {
  var parents = parent instanceof HTMLElement ? [parent] : parent;
  var allMatches = [];

  for (var i = 0; i < parents.length; i++) {
    var childNodes = parents[i].children; // only ever elements

    for (var j = 0; j < childNodes.length; j++) {
      var childNode = childNodes[j];

      if (!selector || elementMatches(childNode, selector)) {
        allMatches.push(childNode);
      }
    }
  }

  return allMatches;
} // Attributes
// ----------------------------------------------------------------------------------------------------------------


function forceClassName(el, className, bool) {
  if (bool) {
    el.classList.add(className);
  } else {
    el.classList.remove(className);
  }
} // Style
// ----------------------------------------------------------------------------------------------------------------


var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;

function applyStyle(el, props) {
  for (var propName in props) {
    applyStyleProp(el, propName, props[propName]);
  }
}

function applyStyleProp(el, name, val) {
  if (val == null) {
    el.style[name] = '';
  } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {
    el.style[name] = val + 'px';
  } else {
    el.style[name] = val;
  }
}

function pointInsideRect(point, rect) {
  return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
} // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false


function intersectRects(rect1, rect2) {
  var res = {
    left: Math.max(rect1.left, rect2.left),
    right: Math.min(rect1.right, rect2.right),
    top: Math.max(rect1.top, rect2.top),
    bottom: Math.min(rect1.bottom, rect2.bottom)
  };

  if (res.left < res.right && res.top < res.bottom) {
    return res;
  }

  return false;
}

function translateRect(rect, deltaX, deltaY) {
  return {
    left: rect.left + deltaX,
    right: rect.right + deltaX,
    top: rect.top + deltaY,
    bottom: rect.bottom + deltaY
  };
} // Returns a new point that will have been moved to reside within the given rectangle


function constrainPoint(point, rect) {
  return {
    left: Math.min(Math.max(point.left, rect.left), rect.right),
    top: Math.min(Math.max(point.top, rect.top), rect.bottom)
  };
} // Returns a point that is the center of the given rectangle


function getRectCenter(rect) {
  return {
    left: (rect.left + rect.right) / 2,
    top: (rect.top + rect.bottom) / 2
  };
} // Subtracts point2's coordinates from point1's coordinates, returning a delta


function diffPoints(point1, point2) {
  return {
    left: point1.left - point2.left,
    top: point1.top - point2.top
  };
} // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side


var isRtlScrollbarOnLeft = null;

function getIsRtlScrollbarOnLeft() {
  if (isRtlScrollbarOnLeft === null) {
    isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
  }

  return isRtlScrollbarOnLeft;
}

function computeIsRtlScrollbarOnLeft() {
  var outerEl = createElement('div', {
    style: {
      position: 'absolute',
      top: -1000,
      left: 0,
      border: 0,
      padding: 0,
      overflow: 'scroll',
      direction: 'rtl'
    }
  }, '<div></div>');
  document.body.appendChild(outerEl);
  var innerEl = outerEl.firstChild;
  var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
  removeElement(outerEl);
  return res;
} // The scrollbar width computations in computeEdges are sometimes flawed when it comes to
// retina displays, rounding, and IE11. Massage them into a usable value.


function sanitizeScrollbarWidth(width) {
  width = Math.max(0, width); // no negatives

  width = Math.round(width);
  return width;
}

function computeEdges(el, getPadding) {
  if (getPadding === void 0) {
    getPadding = false;
  }

  var computedStyle = window.getComputedStyle(el);
  var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
  var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
  var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
  var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0; // must use offset(Width|Height) because compatible with client(Width|Height)

  var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);
  var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);
  var res = {
    borderLeft: borderLeft,
    borderRight: borderRight,
    borderTop: borderTop,
    borderBottom: borderBottom,
    scrollbarBottom: scrollbarBottom,
    scrollbarLeft: 0,
    scrollbarRight: 0
  };

  if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {
    // is the scrollbar on the left side?
    res.scrollbarLeft = scrollbarLeftRight;
  } else {
    res.scrollbarRight = scrollbarLeftRight;
  }

  if (getPadding) {
    res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
    res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
    res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
    res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
  }

  return res;
}

function computeInnerRect(el, goWithinPadding) {
  if (goWithinPadding === void 0) {
    goWithinPadding = false;
  }

  var outerRect = computeRect(el);
  var edges = computeEdges(el, goWithinPadding);
  var res = {
    left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
    right: outerRect.right - edges.borderRight - edges.scrollbarRight,
    top: outerRect.top + edges.borderTop,
    bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
  };

  if (goWithinPadding) {
    res.left += edges.paddingLeft;
    res.right -= edges.paddingRight;
    res.top += edges.paddingTop;
    res.bottom -= edges.paddingBottom;
  }

  return res;
}

function computeRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + window.pageXOffset,
    top: rect.top + window.pageYOffset,
    right: rect.right + window.pageXOffset,
    bottom: rect.bottom + window.pageYOffset
  };
}

function computeViewportRect() {
  return {
    left: window.pageXOffset,
    right: window.pageXOffset + document.documentElement.clientWidth,
    top: window.pageYOffset,
    bottom: window.pageYOffset + document.documentElement.clientHeight
  };
}

function computeHeightAndMargins(el) {
  return el.getBoundingClientRect().height + computeVMargins(el);
}

function computeVMargins(el) {
  var computed = window.getComputedStyle(el);
  return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);
} // does not return window


function getClippingParents(el) {
  var parents = [];

  while (el instanceof HTMLElement) {
    // will stop when gets to document or null
    var computedStyle = window.getComputedStyle(el);

    if (computedStyle.position === 'fixed') {
      break;
    }

    if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {
      parents.push(el);
    }

    el = el.parentNode;
  }

  return parents;
}

function computeClippingRect(el) {
  return getClippingParents(el).map(function (el) {
    return computeInnerRect(el);
  }).concat(computeViewportRect()).reduce(function (rect0, rect1) {
    return intersectRects(rect0, rect1) || rect1; // should always intersect
  });
} // Stops a mouse/touch event from doing it's native browser action


function preventDefault(ev) {
  ev.preventDefault();
} // Event Delegation
// ----------------------------------------------------------------------------------------------------------------


function listenBySelector(container, eventType, selector, handler) {
  function realHandler(ev) {
    var matchedChild = elementClosest(ev.target, selector);

    if (matchedChild) {
      handler.call(matchedChild, ev, matchedChild);
    }
  }

  container.addEventListener(eventType, realHandler);
  return function () {
    container.removeEventListener(eventType, realHandler);
  };
}

function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
  var currentMatchedChild;
  return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {
    if (matchedChild !== currentMatchedChild) {
      currentMatchedChild = matchedChild;
      onMouseEnter(ev, matchedChild);

      var realOnMouseLeave_1 = function (ev) {
        currentMatchedChild = null;
        onMouseLeave(ev, matchedChild);
        matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);
      }; // listen to the next mouseleave, and then unattach


      matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);
    }
  });
} // Animation
// ----------------------------------------------------------------------------------------------------------------


var transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend']; // triggered only when the next single subsequent transition finishes

function whenTransitionDone(el, callback) {
  var realCallback = function (ev) {
    callback(ev);
    transitionEventNames.forEach(function (eventName) {
      el.removeEventListener(eventName, realCallback);
    });
  };

  transitionEventNames.forEach(function (eventName) {
    el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
  });
}

var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']; // Adding

function addWeeks(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n * 7;
  return arrayToUtcDate(a);
}

function addDays(m, n) {
  var a = dateToUtcArray(m);
  a[2] += n;
  return arrayToUtcDate(a);
}

function addMs(m, n) {
  var a = dateToUtcArray(m);
  a[6] += n;
  return arrayToUtcDate(a);
} // Diffing (all return floats)


function diffWeeks(m0, m1) {
  return diffDays(m0, m1) / 7;
}

function diffDays(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);
}

function diffHours(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);
}

function diffMinutes(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / (1000 * 60);
}

function diffSeconds(m0, m1) {
  return (m1.valueOf() - m0.valueOf()) / 1000;
}

function diffDayAndTime(m0, m1) {
  var m0day = startOfDay(m0);
  var m1day = startOfDay(m1);
  return {
    years: 0,
    months: 0,
    days: Math.round(diffDays(m0day, m1day)),
    milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
  };
} // Diffing Whole Units


function diffWholeWeeks(m0, m1) {
  var d = diffWholeDays(m0, m1);

  if (d !== null && d % 7 === 0) {
    return d / 7;
  }

  return null;
}

function diffWholeDays(m0, m1) {
  if (timeAsMs(m0) === timeAsMs(m1)) {
    return Math.round(diffDays(m0, m1));
  }

  return null;
} // Start-Of


function startOfDay(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);
}

function startOfHour(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);
}

function startOfMinute(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);
}

function startOfSecond(m) {
  return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);
} // Week Computation


function weekOfYear(marker, dow, doy) {
  var y = marker.getUTCFullYear();
  var w = weekOfGivenYear(marker, y, dow, doy);

  if (w < 1) {
    return weekOfGivenYear(marker, y - 1, dow, doy);
  }

  var nextW = weekOfGivenYear(marker, y + 1, dow, doy);

  if (nextW >= 1) {
    return Math.min(w, nextW);
  }

  return w;
}

function weekOfGivenYear(marker, year, dow, doy) {
  var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);
  var dayStart = startOfDay(marker);
  var days = Math.round(diffDays(firstWeekStart, dayStart));
  return Math.floor(days / 7) + 1; // zero-indexed
} // start-of-first-week - start-of-year


function firstWeekOffset(year, dow, doy) {
  // first-week day -- which january is always in the first week (4 for iso, 1 for other)
  var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd

  var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
} // Array Conversion


function dateToLocalArray(date) {
  return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];
}

function arrayToLocalDate(a) {
  return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month
  a[3] || 0, a[4] || 0, a[5] || 0);
}

function dateToUtcArray(date) {
  return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];
}

function arrayToUtcDate(a) {
  // according to web standards (and Safari), a month index is required.
  // massage if only given a year.
  if (a.length === 1) {
    a = a.concat([0]);
  }

  return new Date(Date.UTC.apply(Date, a));
} // Other Utils


function isValidDate(m) {
  return !isNaN(m.valueOf());
}

function timeAsMs(m) {
  return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
}

var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];
var PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/; // Parsing and Creation

function createDuration(input, unit) {
  var _a;

  if (typeof input === 'string') {
    return parseString(input);
  } else if (typeof input === 'object' && input) {
    // non-null object
    return normalizeObject(input);
  } else if (typeof input === 'number') {
    return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));
  } else {
    return null;
  }
}

function parseString(s) {
  var m = PARSE_RE.exec(s);

  if (m) {
    var sign = m[1] ? -1 : 1;
    return {
      years: 0,
      months: 0,
      days: sign * (m[2] ? parseInt(m[2], 10) : 0),
      milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours
      (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes
      (m[5] ? parseInt(m[5], 10) : 0) * 1000 + ( // seconds
      m[6] ? parseInt(m[6], 10) : 0) // ms
      )
    };
  }

  return null;
}

function normalizeObject(obj) {
  return {
    years: obj.years || obj.year || 0,
    months: obj.months || obj.month || 0,
    days: (obj.days || obj.day || 0) + getWeeksFromInput(obj) * 7,
    milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours
    (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes
    (obj.seconds || obj.second || 0) * 1000 + ( // seconds
    obj.milliseconds || obj.millisecond || obj.ms || 0) // ms

  };
}

function getWeeksFromInput(obj) {
  return obj.weeks || obj.week || 0;
} // Equality


function durationsEqual(d0, d1) {
  return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
}

function isSingleDay(dur) {
  return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;
} // Simple Math


function addDurations(d0, d1) {
  return {
    years: d0.years + d1.years,
    months: d0.months + d1.months,
    days: d0.days + d1.days,
    milliseconds: d0.milliseconds + d1.milliseconds
  };
}

function subtractDurations(d1, d0) {
  return {
    years: d1.years - d0.years,
    months: d1.months - d0.months,
    days: d1.days - d0.days,
    milliseconds: d1.milliseconds - d0.milliseconds
  };
}

function multiplyDuration(d, n) {
  return {
    years: d.years * n,
    months: d.months * n,
    days: d.days * n,
    milliseconds: d.milliseconds * n
  };
} // Conversions
// "Rough" because they are based on average-case Gregorian months/years


function asRoughYears(dur) {
  return asRoughDays(dur) / 365;
}

function asRoughMonths(dur) {
  return asRoughDays(dur) / 30;
}

function asRoughDays(dur) {
  return asRoughMs(dur) / 864e5;
}

function asRoughMinutes(dur) {
  return asRoughMs(dur) / (1000 * 60);
}

function asRoughSeconds(dur) {
  return asRoughMs(dur) / 1000;
}

function asRoughMs(dur) {
  return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
} // Advanced Math


function wholeDivideDurations(numerator, denominator) {
  var res = null;

  for (var i = 0; i < INTERNAL_UNITS.length; i++) {
    var unit = INTERNAL_UNITS[i];

    if (denominator[unit]) {
      var localRes = numerator[unit] / denominator[unit];

      if (!isInt(localRes) || res !== null && res !== localRes) {
        return null;
      }

      res = localRes;
    } else if (numerator[unit]) {
      // needs to divide by something but can't!
      return null;
    }
  }

  return res;
}

function greatestDurationDenominator(dur, dontReturnWeeks) {
  var ms = dur.milliseconds;

  if (ms) {
    if (ms % 1000 !== 0) {
      return {
        unit: 'millisecond',
        value: ms
      };
    }

    if (ms % (1000 * 60) !== 0) {
      return {
        unit: 'second',
        value: ms / 1000
      };
    }

    if (ms % (1000 * 60 * 60) !== 0) {
      return {
        unit: 'minute',
        value: ms / (1000 * 60)
      };
    }

    if (ms) {
      return {
        unit: 'hour',
        value: ms / (1000 * 60 * 60)
      };
    }
  }

  if (dur.days) {
    if (!dontReturnWeeks && dur.days % 7 === 0) {
      return {
        unit: 'week',
        value: dur.days / 7
      };
    }

    return {
      unit: 'day',
      value: dur.days
    };
  }

  if (dur.months) {
    return {
      unit: 'month',
      value: dur.months
    };
  }

  if (dur.years) {
    return {
      unit: 'year',
      value: dur.years
    };
  }

  return {
    unit: 'millisecond',
    value: 0
  };
}
/* FullCalendar-specific DOM Utilities
----------------------------------------------------------------------------------------------------------------------*/
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.


function compensateScroll(rowEl, scrollbarWidths) {
  if (scrollbarWidths.left) {
    applyStyle(rowEl, {
      borderLeftWidth: 1,
      marginLeft: scrollbarWidths.left - 1
    });
  }

  if (scrollbarWidths.right) {
    applyStyle(rowEl, {
      borderRightWidth: 1,
      marginRight: scrollbarWidths.right - 1
    });
  }
} // Undoes compensateScroll and restores all borders/margins


function uncompensateScroll(rowEl) {
  applyStyle(rowEl, {
    marginLeft: '',
    marginRight: '',
    borderLeftWidth: '',
    borderRightWidth: ''
  });
} // Make the mouse cursor express that an event is not allowed in the current area


function disableCursor() {
  document.body.classList.add('fc-not-allowed');
} // Returns the mouse cursor to its original look


function enableCursor() {
  document.body.classList.remove('fc-not-allowed');
} // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
// reduces the available height.


function distributeHeight(els, availableHeight, shouldRedistribute) {
  // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
  // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
  var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element

  var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*

  var flexEls = []; // elements that are allowed to expand. array of DOM nodes

  var flexOffsets = []; // amount of vertical space it takes up

  var flexHeights = []; // actual css height

  var usedHeight = 0;
  undistributeHeight(els); // give all elements their natural height
  // find elements that are below the recommended height (expandable).
  // important to query for heights in a single first pass (to avoid reflow oscillation).

  els.forEach(function (el, i) {
    var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
    var naturalHeight = el.getBoundingClientRect().height;
    var naturalOffset = naturalHeight + computeVMargins(el);

    if (naturalOffset < minOffset) {
      flexEls.push(el);
      flexOffsets.push(naturalOffset);
      flexHeights.push(naturalHeight);
    } else {
      // this element stretches past recommended height (non-expandable). mark the space as occupied.
      usedHeight += naturalOffset;
    }
  }); // readjust the recommended height to only consider the height available to non-maxed-out rows.

  if (shouldRedistribute) {
    availableHeight -= usedHeight;
    minOffset1 = Math.floor(availableHeight / flexEls.length);
    minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
  } // assign heights to all expandable elements


  flexEls.forEach(function (el, i) {
    var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
    var naturalOffset = flexOffsets[i];
    var naturalHeight = flexHeights[i];
    var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding

    if (naturalOffset < minOffset) {
      // we check this again because redistribution might have changed things
      el.style.height = newHeight + 'px';
    }
  });
} // Undoes distrubuteHeight, restoring all els to their natural height


function undistributeHeight(els) {
  els.forEach(function (el) {
    el.style.height = '';
  });
} // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline


function matchCellWidths(els) {
  var maxInnerWidth = 0;
  els.forEach(function (el) {
    var innerEl = el.firstChild; // hopefully an element

    if (innerEl instanceof HTMLElement) {
      var innerWidth_1 = innerEl.getBoundingClientRect().width;

      if (innerWidth_1 > maxInnerWidth) {
        maxInnerWidth = innerWidth_1;
      }
    }
  });
  maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance

  els.forEach(function (el) {
    el.style.width = maxInnerWidth + 'px';
  });
  return maxInnerWidth;
} // Given one element that resides inside another,
// Subtracts the height of the inner element from the outer element.


function subtractInnerElHeight(outerEl, innerEl) {
  // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
  var reflowStyleProps = {
    position: 'relative',
    left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll

  };
  applyStyle(outerEl, reflowStyleProps);
  applyStyle(innerEl, reflowStyleProps);
  var diff = // grab the dimensions
  outerEl.getBoundingClientRect().height - innerEl.getBoundingClientRect().height; // undo hack

  var resetStyleProps = {
    position: '',
    left: ''
  };
  applyStyle(outerEl, resetStyleProps);
  applyStyle(innerEl, resetStyleProps);
  return diff;
}
/* Selection
----------------------------------------------------------------------------------------------------------------------*/


function preventSelection(el) {
  el.classList.add('fc-unselectable');
  el.addEventListener('selectstart', preventDefault);
}

function allowSelection(el) {
  el.classList.remove('fc-unselectable');
  el.removeEventListener('selectstart', preventDefault);
}
/* Context Menu
----------------------------------------------------------------------------------------------------------------------*/


function preventContextMenu(el) {
  el.addEventListener('contextmenu', preventDefault);
}

function allowContextMenu(el) {
  el.removeEventListener('contextmenu', preventDefault);
}
/* Object Ordering by Field
----------------------------------------------------------------------------------------------------------------------*/


function parseFieldSpecs(input) {
  var specs = [];
  var tokens = [];
  var i;
  var token;

  if (typeof input === 'string') {
    tokens = input.split(/\s*,\s*/);
  } else if (typeof input === 'function') {
    tokens = [input];
  } else if (Array.isArray(input)) {
    tokens = input;
  }

  for (i = 0; i < tokens.length; i++) {
    token = tokens[i];

    if (typeof token === 'string') {
      specs.push(token.charAt(0) === '-' ? {
        field: token.substring(1),
        order: -1
      } : {
        field: token,
        order: 1
      });
    } else if (typeof token === 'function') {
      specs.push({
        func: token
      });
    }
  }

  return specs;
}

function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
  var i;
  var cmp;

  for (i = 0; i < fieldSpecs.length; i++) {
    cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);

    if (cmp) {
      return cmp;
    }
  }

  return 0;
}

function compareByFieldSpec(obj0, obj1, fieldSpec) {
  if (fieldSpec.func) {
    return fieldSpec.func(obj0, obj1);
  }

  return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
}

function flexibleCompare(a, b) {
  if (!a && !b) {
    return 0;
  }

  if (b == null) {
    return -1;
  }

  if (a == null) {
    return 1;
  }

  if (typeof a === 'string' || typeof b === 'string') {
    return String(a).localeCompare(String(b));
  }

  return a - b;
}
/* String Utilities
----------------------------------------------------------------------------------------------------------------------*/


function capitaliseFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function padStart(val, len) {
  var s = String(val);
  return '000'.substr(0, len - s.length) + s;
}
/* Number Utilities
----------------------------------------------------------------------------------------------------------------------*/


function compareNumbers(a, b) {
  return a - b;
}

function isInt(n) {
  return n % 1 === 0;
}
/* Weird Utilities
----------------------------------------------------------------------------------------------------------------------*/


function applyAll(functions, thisObj, args) {
  if (typeof functions === 'function') {
    // supplied a single function
    functions = [functions];
  }

  if (functions) {
    var i = void 0;
    var ret = void 0;

    for (i = 0; i < functions.length; i++) {
      ret = functions[i].apply(thisObj, args) || ret;
    }

    return ret;
  }
}

function firstDefined() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  for (var i = 0; i < args.length; i++) {
    if (args[i] !== undefined) {
      return args[i];
    }
  }
} // Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714


function debounce(func, wait) {
  var timeout;
  var args;
  var context;
  var timestamp;
  var result;

  var later = function () {
    var last = new Date().valueOf() - timestamp;

    if (last < wait) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    }
  };

  return function () {
    context = this;
    args = arguments;
    timestamp = new Date().valueOf();

    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    return result;
  };
} // Number and Boolean are only types that defaults or not computed for
// TODO: write more comments


function refineProps(rawProps, processors, defaults, leftoverProps) {
  if (defaults === void 0) {
    defaults = {};
  }

  var refined = {};

  for (var key in processors) {
    var processor = processors[key];

    if (rawProps[key] !== undefined) {
      // found
      if (processor === Function) {
        refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;
      } else if (processor) {
        // a refining function?
        refined[key] = processor(rawProps[key]);
      } else {
        refined[key] = rawProps[key];
      }
    } else if (defaults[key] !== undefined) {
      // there's an explicit default
      refined[key] = defaults[key];
    } else {
      // must compute a default
      if (processor === String) {
        refined[key] = ''; // empty string is default for String
      } else if (!processor || processor === Number || processor === Boolean || processor === Function) {
        refined[key] = null; // assign null for other non-custom processor funcs
      } else {
        refined[key] = processor(null); // run the custom processor func
      }
    }
  }

  if (leftoverProps) {
    for (var key in rawProps) {
      if (processors[key] === undefined) {
        leftoverProps[key] = rawProps[key];
      }
    }
  }

  return refined;
}
/* Date stuff that doesn't belong in datelib core
----------------------------------------------------------------------------------------------------------------------*/
// given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.


function computeAlignedDayRange(timedRange) {
  var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
  var start = startOfDay(timedRange.start);
  var end = addDays(start, dayCnt);
  return {
    start: start,
    end: end
  };
} // given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg


function computeVisibleDayRange(timedRange, nextDayThreshold) {
  if (nextDayThreshold === void 0) {
    nextDayThreshold = createDuration(0);
  }

  var startDay = null;
  var endDay = null;

  if (timedRange.end) {
    endDay = startOfDay(timedRange.end);
    var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
    // If the end time is actually inclusively part of the next day and is equal to or
    // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
    // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.

    if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {
      endDay = addDays(endDay, 1);
    }
  }

  if (timedRange.start) {
    startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
    // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.

    if (endDay && endDay <= startDay) {
      endDay = addDays(startDay, 1);
    }
  }

  return {
    start: startDay,
    end: endDay
  };
} // spans from one day into another?


function isMultiDayRange(range) {
  var visibleRange = computeVisibleDayRange(range);
  return diffDays(visibleRange.start, visibleRange.end) > 1;
}

function diffDates(date0, date1, dateEnv, largeUnit) {
  if (largeUnit === 'year') {
    return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
  } else if (largeUnit === 'month') {
    return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
  } else {
    return diffDayAndTime(date0, date1); // returns a duration
  }
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */


var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {
  for (var i = 0; i < recurringTypes.length; i++) {
    var localLeftovers = {};
    var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);

    if (parsed) {
      var allDay = localLeftovers.allDay;
      delete localLeftovers.allDay; // remove from leftovers

      if (allDay == null) {
        allDay = allDayDefault;

        if (allDay == null) {
          allDay = parsed.allDayGuess;

          if (allDay == null) {
            allDay = false;
          }
        }
      }

      __assign(leftovers, localLeftovers);

      return {
        allDay: allDay,
        duration: parsed.duration,
        typeData: parsed.typeData,
        typeId: i
      };
    }
  }

  return null;
}
/*
Event MUST have a recurringDef
*/


function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
  var typeDef = recurringTypes[eventDef.recurringDef.typeId];
  var markers = typeDef.expand(eventDef.recurringDef.typeData, {
    start: dateEnv.subtract(framingRange.start, duration),
    end: framingRange.end
  }, dateEnv); // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to

  if (eventDef.allDay) {
    markers = markers.map(startOfDay);
  }

  return markers;
}

var hasOwnProperty = Object.prototype.hasOwnProperty; // Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.

function mergeProps(propObjs, complexProps) {
  var dest = {};
  var i;
  var name;
  var complexObjs;
  var j;
  var val;
  var props;

  if (complexProps) {
    for (i = 0; i < complexProps.length; i++) {
      name = complexProps[i];
      complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered

      for (j = propObjs.length - 1; j >= 0; j--) {
        val = propObjs[j][name];

        if (typeof val === 'object' && val) {
          // non-null object
          complexObjs.unshift(val);
        } else if (val !== undefined) {
          dest[name] = val; // if there were no objects, this value will be used

          break;
        }
      } // if the trailing values were objects, use the merged value


      if (complexObjs.length) {
        dest[name] = mergeProps(complexObjs);
      }
    }
  } // copy values into the destination, going from last to first


  for (i = propObjs.length - 1; i >= 0; i--) {
    props = propObjs[i];

    for (name in props) {
      if (!(name in dest)) {
        // if already assigned by previous props or complex props, don't reassign
        dest[name] = props[name];
      }
    }
  }

  return dest;
}

function filterHash(hash, func) {
  var filtered = {};

  for (var key in hash) {
    if (func(hash[key], key)) {
      filtered[key] = hash[key];
    }
  }

  return filtered;
}

function mapHash(hash, func) {
  var newHash = {};

  for (var key in hash) {
    newHash[key] = func(hash[key], key);
  }

  return newHash;
}

function arrayToHash(a) {
  var hash = {};

  for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
    var item = a_1[_i];
    hash[item] = true;
  }

  return hash;
}

function hashValuesToArray(obj) {
  var a = [];

  for (var key in obj) {
    a.push(obj[key]);
  }

  return a;
}

function isPropsEqual(obj0, obj1) {
  for (var key in obj0) {
    if (hasOwnProperty.call(obj0, key)) {
      if (!(key in obj1)) {
        return false;
      }
    }
  }

  for (var key in obj1) {
    if (hasOwnProperty.call(obj1, key)) {
      if (obj0[key] !== obj1[key]) {
        return false;
      }
    }
  }

  return true;
}

function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {
  var eventStore = createEmptyEventStore();

  for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {
    var rawEvent = rawEvents_1[_i];
    var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);

    if (tuple) {
      eventTupleToStore(tuple, eventStore);
    }
  }

  return eventStore;
}

function eventTupleToStore(tuple, eventStore) {
  if (eventStore === void 0) {
    eventStore = createEmptyEventStore();
  }

  eventStore.defs[tuple.def.defId] = tuple.def;

  if (tuple.instance) {
    eventStore.instances[tuple.instance.instanceId] = tuple.instance;
  }

  return eventStore;
}

function expandRecurring(eventStore, framingRange, calendar) {
  var dateEnv = calendar.dateEnv;
  var defs = eventStore.defs,
      instances = eventStore.instances; // remove existing recurring instances

  instances = filterHash(instances, function (instance) {
    return !defs[instance.defId].recurringDef;
  });

  for (var defId in defs) {
    var def = defs[defId];

    if (def.recurringDef) {
      var duration = def.recurringDef.duration;

      if (!duration) {
        duration = def.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration;
      }

      var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);

      for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {
        var start = starts_1[_i];
        var instance = createEventInstance(defId, {
          start: start,
          end: dateEnv.add(start, duration)
        });
        instances[instance.instanceId] = instance;
      }
    }
  }

  return {
    defs: defs,
    instances: instances
  };
} // retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?


function getRelevantEvents(eventStore, instanceId) {
  var instance = eventStore.instances[instanceId];

  if (instance) {
    var def_1 = eventStore.defs[instance.defId]; // get events/instances with same group

    var newStore = filterEventStoreDefs(eventStore, function (lookDef) {
      return isEventDefsGrouped(def_1, lookDef);
    }); // add the original
    // TODO: wish we could use eventTupleToStore or something like it

    newStore.defs[def_1.defId] = def_1;
    newStore.instances[instance.instanceId] = instance;
    return newStore;
  }

  return createEmptyEventStore();
}

function isEventDefsGrouped(def0, def1) {
  return Boolean(def0.groupId && def0.groupId === def1.groupId);
}

function transformRawEvents(rawEvents, eventSource, calendar) {
  var calEachTransform = calendar.opt('eventDataTransform');
  var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;

  if (sourceEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
  }

  if (calEachTransform) {
    rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
  }

  return rawEvents;
}

function transformEachRawEvent(rawEvents, func) {
  var refinedEvents;

  if (!func) {
    refinedEvents = rawEvents;
  } else {
    refinedEvents = [];

    for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {
      var rawEvent = rawEvents_2[_i];
      var refinedEvent = func(rawEvent);

      if (refinedEvent) {
        refinedEvents.push(refinedEvent);
      } else if (refinedEvent == null) {
        refinedEvents.push(rawEvent);
      } // if a different falsy value, do nothing

    }
  }

  return refinedEvents;
}

function createEmptyEventStore() {
  return {
    defs: {},
    instances: {}
  };
}

function mergeEventStores(store0, store1) {
  return {
    defs: __assign({}, store0.defs, store1.defs),
    instances: __assign({}, store0.instances, store1.instances)
  };
}

function filterEventStoreDefs(eventStore, filterFunc) {
  var defs = filterHash(eventStore.defs, filterFunc);
  var instances = filterHash(eventStore.instances, function (instance) {
    return defs[instance.defId]; // still exists?
  });
  return {
    defs: defs,
    instances: instances
  };
}

function parseRange(input, dateEnv) {
  var start = null;
  var end = null;

  if (input.start) {
    start = dateEnv.createMarker(input.start);
  }

  if (input.end) {
    end = dateEnv.createMarker(input.end);
  }

  if (!start && !end) {
    return null;
  }

  if (start && end && end < start) {
    return null;
  }

  return {
    start: start,
    end: end
  };
} // SIDE-EFFECT: will mutate ranges.
// Will return a new array result.


function invertRanges(ranges, constraintRange) {
  var invertedRanges = [];
  var start = constraintRange.start; // the end of the previous range. the start of the new range

  var i;
  var dateRange; // ranges need to be in order. required for our date-walking algorithm

  ranges.sort(compareRanges);

  for (i = 0; i < ranges.length; i++) {
    dateRange = ranges[i]; // add the span of time before the event (if there is any)

    if (dateRange.start > start) {
      // compare millisecond time (skip any ambig logic)
      invertedRanges.push({
        start: start,
        end: dateRange.start
      });
    }

    if (dateRange.end > start) {
      start = dateRange.end;
    }
  } // add the span of time after the last event (if there is any)


  if (start < constraintRange.end) {
    // compare millisecond time (skip any ambig logic)
    invertedRanges.push({
      start: start,
      end: constraintRange.end
    });
  }

  return invertedRanges;
}

function compareRanges(range0, range1) {
  return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
}

function intersectRanges(range0, range1) {
  var start = range0.start;
  var end = range0.end;
  var newRange = null;

  if (range1.start !== null) {
    if (start === null) {
      start = range1.start;
    } else {
      start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
    }
  }

  if (range1.end != null) {
    if (end === null) {
      end = range1.end;
    } else {
      end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
    }
  }

  if (start === null || end === null || start < end) {
    newRange = {
      start: start,
      end: end
    };
  }

  return newRange;
}

function rangesEqual(range0, range1) {
  return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
}

function rangesIntersect(range0, range1) {
  return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
}

function rangeContainsRange(outerRange, innerRange) {
  return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
}

function rangeContainsMarker(range, date) {
  return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
} // If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).


function constrainMarkerToRange(date, range) {
  if (range.start != null && date < range.start) {
    return range.start;
  }

  if (range.end != null && date >= range.end) {
    return new Date(range.end.valueOf() - 1);
  }

  return date;
}

function removeExact(array, exactVal) {
  var removeCnt = 0;
  var i = 0;

  while (i < array.length) {
    if (array[i] === exactVal) {
      array.splice(i, 1);
      removeCnt++;
    } else {
      i++;
    }
  }

  return removeCnt;
}

function isArraysEqual(a0, a1) {
  var len = a0.length;
  var i;

  if (len !== a1.length) {
    // not array? or not same length?
    return false;
  }

  for (i = 0; i < len; i++) {
    if (a0[i] !== a1[i]) {
      return false;
    }
  }

  return true;
}

function memoize(workerFunc) {
  var args;
  var res;
  return function () {
    if (!args || !isArraysEqual(args, arguments)) {
      args = arguments;
      res = workerFunc.apply(this, arguments);
    }

    return res;
  };
}
/*
always executes the workerFunc, but if the result is equal to the previous result,
return the previous result instead.
*/


function memoizeOutput(workerFunc, equalityFunc) {
  var cachedRes = null;
  return function () {
    var newRes = workerFunc.apply(this, arguments);

    if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {
      cachedRes = newRes;
    }

    return cachedRes;
  };
}

var EXTENDED_SETTINGS_AND_SEVERITIES = {
  week: 3,
  separator: 0,
  omitZeroMinute: 0,
  meridiem: 0,
  omitCommas: 0
};
var STANDARD_DATE_PROP_SEVERITIES = {
  timeZoneName: 7,
  era: 6,
  year: 5,
  month: 4,
  day: 2,
  weekday: 2,
  hour: 1,
  minute: 1,
  second: 1
};
var MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too

var COMMA_RE = /,/g; // we need re for globalness

var MULTI_SPACE_RE = /\s+/g;
var LTR_RE = /\u200e/g; // control character

var UTC_RE = /UTC|GMT/;

var NativeFormatter =
/** @class */
function () {
  function NativeFormatter(formatSettings) {
    var standardDateProps = {};
    var extendedSettings = {};
    var severity = 0;

    for (var name_1 in formatSettings) {
      if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {
        extendedSettings[name_1] = formatSettings[name_1];
        severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);
      } else {
        standardDateProps[name_1] = formatSettings[name_1];

        if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {
          severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);
        }
      }
    }

    this.standardDateProps = standardDateProps;
    this.extendedSettings = extendedSettings;
    this.severity = severity;
    this.buildFormattingFunc = memoize(buildFormattingFunc);
  }

  NativeFormatter.prototype.format = function (date, context) {
    return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
  };

  NativeFormatter.prototype.formatRange = function (start, end, context) {
    var _a = this,
        standardDateProps = _a.standardDateProps,
        extendedSettings = _a.extendedSettings;

    var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);

    if (!diffSeverity) {
      return this.format(start, context);
    }

    var biggestUnitForPartial = diffSeverity;

    if (biggestUnitForPartial > 1 && ( // the two dates are different in a way that's larger scale than time
    standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {
      biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
    }

    var full0 = this.format(start, context);
    var full1 = this.format(end, context);

    if (full0 === full1) {
      return full0;
    }

    var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
    var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
    var partial0 = partialFormattingFunc(start);
    var partial1 = partialFormattingFunc(end);
    var insertion = findCommonInsertion(full0, partial0, full1, partial1);
    var separator = extendedSettings.separator || '';

    if (insertion) {
      return insertion.before + partial0 + separator + partial1 + insertion.after;
    }

    return full0 + separator + full1;
  };

  NativeFormatter.prototype.getLargestUnit = function () {
    switch (this.severity) {
      case 7:
      case 6:
      case 5:
        return 'year';

      case 4:
        return 'month';

      case 3:
        return 'week';

      default:
        return 'day';
    }
  };

  return NativeFormatter;
}();

function buildFormattingFunc(standardDateProps, extendedSettings, context) {
  var standardDatePropCnt = Object.keys(standardDateProps).length;

  if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {
    return function (date) {
      return formatTimeZoneOffset(date.timeZoneOffset);
    };
  }

  if (standardDatePropCnt === 0 && extendedSettings.week) {
    return function (date) {
      return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);
    };
  }

  return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
}

function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
  standardDateProps = __assign({}, standardDateProps); // copy

  extendedSettings = __assign({}, extendedSettings); // copy

  sanitizeSettings(standardDateProps, extendedSettings);
  standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers

  var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
  var zeroFormat; // needed?

  if (extendedSettings.omitZeroMinute) {
    var zeroProps = __assign({}, standardDateProps);

    delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings

    zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
  }

  return function (date) {
    var marker = date.marker;
    var format;

    if (zeroFormat && !marker.getUTCMinutes()) {
      format = zeroFormat;
    } else {
      format = normalFormat;
    }

    var s = format.format(marker);
    return postProcess(s, date, standardDateProps, extendedSettings, context);
  };
}

function sanitizeSettings(standardDateProps, extendedSettings) {
  // deal with a browser inconsistency where formatting the timezone
  // requires that the hour/minute be present.
  if (standardDateProps.timeZoneName) {
    if (!standardDateProps.hour) {
      standardDateProps.hour = '2-digit';
    }

    if (!standardDateProps.minute) {
      standardDateProps.minute = '2-digit';
    }
  } // only support short timezone names


  if (standardDateProps.timeZoneName === 'long') {
    standardDateProps.timeZoneName = 'short';
  } // if requesting to display seconds, MUST display minutes


  if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {
    delete extendedSettings.omitZeroMinute;
  }
}

function postProcess(s, date, standardDateProps, extendedSettings, context) {
  s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes

  if (standardDateProps.timeZoneName === 'short') {
    s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : // important to normalize for IE, which does "GMT"
    formatTimeZoneOffset(date.timeZoneOffset));
  }

  if (extendedSettings.omitCommas) {
    s = s.replace(COMMA_RE, '').trim();
  }

  if (extendedSettings.omitZeroMinute) {
    s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
  } // ^ do anything that might create adjacent spaces before this point,
  // because MERIDIEM_RE likes to eat up loading spaces


  if (extendedSettings.meridiem === false) {
    s = s.replace(MERIDIEM_RE, '').trim();
  } else if (extendedSettings.meridiem === 'narrow') {
    // a/p
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase();
    });
  } else if (extendedSettings.meridiem === 'short') {
    // am/pm
    s = s.replace(MERIDIEM_RE, function (m0, m1) {
      return m1.toLocaleLowerCase() + 'm';
    });
  } else if (extendedSettings.meridiem === 'lowercase') {
    // other meridiem transformers already converted to lowercase
    s = s.replace(MERIDIEM_RE, function (m0) {
      return m0.toLocaleLowerCase();
    });
  }

  s = s.replace(MULTI_SPACE_RE, ' ');
  s = s.trim();
  return s;
}

function injectTzoStr(s, tzoStr) {
  var replaced = false;
  s = s.replace(UTC_RE, function () {
    replaced = true;
    return tzoStr;
  }); // IE11 doesn't include UTC/GMT in the original string, so append to end

  if (!replaced) {
    s += ' ' + tzoStr;
  }

  return s;
}

function formatWeekNumber(num, weekLabel, locale, display) {
  var parts = [];

  if (display === 'narrow') {
    parts.push(weekLabel);
  } else if (display === 'short') {
    parts.push(weekLabel, ' ');
  } // otherwise, considered 'numeric'


  parts.push(locale.simpleNumberFormat.format(num));

  if (locale.options.isRtl) {
    // TODO: use control characters instead?
    parts.reverse();
  }

  return parts.join('');
} // Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger


function computeMarkerDiffSeverity(d0, d1, ca) {
  if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {
    return 5;
  }

  if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {
    return 4;
  }

  if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {
    return 2;
  }

  if (timeAsMs(d0) !== timeAsMs(d1)) {
    return 1;
  }

  return 0;
}

function computePartialFormattingOptions(options, biggestUnit) {
  var partialOptions = {};

  for (var name_2 in options) {
    if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
    STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {
      partialOptions[name_2] = options[name_2];
    }
  }

  return partialOptions;
}

function findCommonInsertion(full0, partial0, full1, partial1) {
  var i0 = 0;

  while (i0 < full0.length) {
    var found0 = full0.indexOf(partial0, i0);

    if (found0 === -1) {
      break;
    }

    var before0 = full0.substr(0, found0);
    i0 = found0 + partial0.length;
    var after0 = full0.substr(i0);
    var i1 = 0;

    while (i1 < full1.length) {
      var found1 = full1.indexOf(partial1, i1);

      if (found1 === -1) {
        break;
      }

      var before1 = full1.substr(0, found1);
      i1 = found1 + partial1.length;
      var after1 = full1.substr(i1);

      if (before0 === before1 && after0 === after1) {
        return {
          before: before0,
          after: after0
        };
      }
    }
  }

  return null;
}
/*
TODO: fix the terminology of "formatter" vs "formatting func"
*/

/*
At the time of instantiation, this object does not know which cmd-formatting system it will use.
It receives this at the time of formatting, as a setting.
*/


var CmdFormatter =
/** @class */
function () {
  function CmdFormatter(cmdStr, separator) {
    this.cmdStr = cmdStr;
    this.separator = separator;
  }

  CmdFormatter.prototype.format = function (date, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));
  };

  CmdFormatter.prototype.formatRange = function (start, end, context) {
    return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));
  };

  return CmdFormatter;
}();

var FuncFormatter =
/** @class */
function () {
  function FuncFormatter(func) {
    this.func = func;
  }

  FuncFormatter.prototype.format = function (date, context) {
    return this.func(createVerboseFormattingArg(date, null, context));
  };

  FuncFormatter.prototype.formatRange = function (start, end, context) {
    return this.func(createVerboseFormattingArg(start, end, context));
  };

  return FuncFormatter;
}(); // Formatter Object Creation


function createFormatter(input, defaultSeparator) {
  if (typeof input === 'object' && input) {
    // non-null object
    if (typeof defaultSeparator === 'string') {
      input = __assign({
        separator: defaultSeparator
      }, input);
    }

    return new NativeFormatter(input);
  } else if (typeof input === 'string') {
    return new CmdFormatter(input, defaultSeparator);
  } else if (typeof input === 'function') {
    return new FuncFormatter(input);
  }
} // String Utils
// timeZoneOffset is in minutes


function buildIsoString(marker, timeZoneOffset, stripZeroTime) {
  if (stripZeroTime === void 0) {
    stripZeroTime = false;
  }

  var s = marker.toISOString();
  s = s.replace('.000', '');

  if (stripZeroTime) {
    s = s.replace('T00:00:00Z', '');
  }

  if (s.length > 10) {
    // time part wasn't stripped, can add timezone info
    if (timeZoneOffset == null) {
      s = s.replace('Z', '');
    } else if (timeZoneOffset !== 0) {
      s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
    } // otherwise, its UTC-0 and we want to keep the Z

  }

  return s;
}

function formatIsoTimeString(marker) {
  return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
}

function formatTimeZoneOffset(minutes, doIso) {
  if (doIso === void 0) {
    doIso = false;
  }

  var sign = minutes < 0 ? '-' : '+';
  var abs = Math.abs(minutes);
  var hours = Math.floor(abs / 60);
  var mins = Math.round(abs % 60);

  if (doIso) {
    return sign + padStart(hours, 2) + ':' + padStart(mins, 2);
  } else {
    return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');
  }
} // Arg Utils


function createVerboseFormattingArg(start, end, context, separator) {
  var startInfo = expandZonedMarker(start, context.calendarSystem);
  var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
  return {
    date: startInfo,
    start: startInfo,
    end: endInfo,
    timeZone: context.timeZone,
    localeCodes: context.locale.codes,
    separator: separator
  };
}

function expandZonedMarker(dateInfo, calendarSystem) {
  var a = calendarSystem.markerToArray(dateInfo.marker);
  return {
    marker: dateInfo.marker,
    timeZoneOffset: dateInfo.timeZoneOffset,
    array: a,
    year: a[0],
    month: a[1],
    day: a[2],
    hour: a[3],
    minute: a[4],
    second: a[5],
    millisecond: a[6]
  };
}

var EventSourceApi =
/** @class */
function () {
  function EventSourceApi(calendar, internalEventSource) {
    this.calendar = calendar;
    this.internalEventSource = internalEventSource;
  }

  EventSourceApi.prototype.remove = function () {
    this.calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: this.internalEventSource.sourceId
    });
  };

  EventSourceApi.prototype.refetch = function () {
    this.calendar.dispatch({
      type: 'FETCH_EVENT_SOURCES',
      sourceIds: [this.internalEventSource.sourceId]
    });
  };

  Object.defineProperty(EventSourceApi.prototype, "id", {
    get: function () {
      return this.internalEventSource.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventSourceApi.prototype, "url", {
    // only relevant to json-feed event sources
    get: function () {
      return this.internalEventSource.meta.url;
    },
    enumerable: true,
    configurable: true
  });
  return EventSourceApi;
}();

var EventApi =
/** @class */
function () {
  function EventApi(calendar, def, instance) {
    this._calendar = calendar;
    this._def = def;
    this._instance = instance || null;
  }
  /*
  TODO: make event struct more responsible for this
  */


  EventApi.prototype.setProp = function (name, val) {
    var _a, _b;

    if (name in DATE_PROPS) ;else if (name in NON_DATE_PROPS) {
      if (typeof NON_DATE_PROPS[name] === 'function') {
        val = NON_DATE_PROPS[name](val);
      }

      this.mutate({
        standardProps: (_a = {}, _a[name] = val, _a)
      });
    } else if (name in UNSCOPED_EVENT_UI_PROPS) {
      var ui = void 0;

      if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {
        val = UNSCOPED_EVENT_UI_PROPS[name](val);
      }

      if (name === 'color') {
        ui = {
          backgroundColor: val,
          borderColor: val
        };
      } else if (name === 'editable') {
        ui = {
          startEditable: val,
          durationEditable: val
        };
      } else {
        ui = (_b = {}, _b[name] = val, _b);
      }

      this.mutate({
        standardProps: {
          ui: ui
        }
      });
    }
  };

  EventApi.prototype.setExtendedProp = function (name, val) {
    var _a;

    this.mutate({
      extendedProps: (_a = {}, _a[name] = val, _a)
    });
  };

  EventApi.prototype.setStart = function (startInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var start = dateEnv.createMarker(startInput);

    if (start && this._instance) {
      // TODO: warning if parsed bad
      var instanceRange = this._instance.range;
      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?

      if (options.maintainDuration) {
        this.mutate({
          datesDelta: startDelta
        });
      } else {
        this.mutate({
          startDelta: startDelta
        });
      }
    }
  };

  EventApi.prototype.setEnd = function (endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var end;

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        return; // TODO: warning if parsed bad
      }
    }

    if (this._instance) {
      if (end) {
        var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
        this.mutate({
          endDelta: endDelta
        });
      } else {
        this.mutate({
          standardProps: {
            hasEnd: false
          }
        });
      }
    }
  };

  EventApi.prototype.setDates = function (startInput, endInput, options) {
    if (options === void 0) {
      options = {};
    }

    var dateEnv = this._calendar.dateEnv;
    var standardProps = {
      allDay: options.allDay
    };
    var start = dateEnv.createMarker(startInput);
    var end;

    if (!start) {
      return; // TODO: warning if parsed bad
    }

    if (endInput != null) {
      end = dateEnv.createMarker(endInput);

      if (!end) {
        // TODO: warning if parsed bad
        return;
      }
    }

    if (this._instance) {
      var instanceRange = this._instance.range; // when computing the diff for an event being converted to all-day,
      // compute diff off of the all-day values the way event-mutation does.

      if (options.allDay === true) {
        instanceRange = computeAlignedDayRange(instanceRange);
      }

      var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);

      if (end) {
        var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);

        if (durationsEqual(startDelta, endDelta)) {
          this.mutate({
            datesDelta: startDelta,
            standardProps: standardProps
          });
        } else {
          this.mutate({
            startDelta: startDelta,
            endDelta: endDelta,
            standardProps: standardProps
          });
        }
      } else {
        // means "clear the end"
        standardProps.hasEnd = false;
        this.mutate({
          datesDelta: startDelta,
          standardProps: standardProps
        });
      }
    }
  };

  EventApi.prototype.moveStart = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        startDelta: delta
      });
    }
  };

  EventApi.prototype.moveEnd = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        endDelta: delta
      });
    }
  };

  EventApi.prototype.moveDates = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // TODO: warning if parsed bad
      this.mutate({
        datesDelta: delta
      });
    }
  };

  EventApi.prototype.setAllDay = function (allDay, options) {
    if (options === void 0) {
      options = {};
    }

    var standardProps = {
      allDay: allDay
    };
    var maintainDuration = options.maintainDuration;

    if (maintainDuration == null) {
      maintainDuration = this._calendar.opt('allDayMaintainDuration');
    }

    if (this._def.allDay !== allDay) {
      standardProps.hasEnd = maintainDuration;
    }

    this.mutate({
      standardProps: standardProps
    });
  };

  EventApi.prototype.formatRange = function (formatInput) {
    var dateEnv = this._calendar.dateEnv;
    var instance = this._instance;
    var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));

    if (this._def.hasEnd) {
      return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
        forcedStartTzo: instance.forcedStartTzo,
        forcedEndTzo: instance.forcedEndTzo
      });
    } else {
      return dateEnv.format(instance.range.start, formatter, {
        forcedTzo: instance.forcedStartTzo
      });
    }
  };

  EventApi.prototype.mutate = function (mutation) {
    var def = this._def;
    var instance = this._instance;

    if (instance) {
      this._calendar.dispatch({
        type: 'MUTATE_EVENTS',
        instanceId: instance.instanceId,
        mutation: mutation,
        fromApi: true
      });

      var eventStore = this._calendar.state.eventStore;
      this._def = eventStore.defs[def.defId];
      this._instance = eventStore.instances[instance.instanceId];
    }
  };

  EventApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_EVENT_DEF',
      defId: this._def.defId
    });
  };

  Object.defineProperty(EventApi.prototype, "source", {
    get: function () {
      var sourceId = this._def.sourceId;

      if (sourceId) {
        return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "start", {
    get: function () {
      return this._instance ? this._calendar.dateEnv.toDate(this._instance.range.start) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "end", {
    get: function () {
      return this._instance && this._def.hasEnd ? this._calendar.dateEnv.toDate(this._instance.range.end) : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "id", {
    // computable props that all access the def
    // TODO: find a TypeScript-compatible way to do this at scale
    get: function () {
      return this._def.publicId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "groupId", {
    get: function () {
      return this._def.groupId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allDay", {
    get: function () {
      return this._def.allDay;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "title", {
    get: function () {
      return this._def.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "url", {
    get: function () {
      return this._def.url;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "rendering", {
    get: function () {
      return this._def.rendering;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "startEditable", {
    get: function () {
      return this._def.ui.startEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "durationEditable", {
    get: function () {
      return this._def.ui.durationEditable;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "constraint", {
    get: function () {
      return this._def.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "overlap", {
    get: function () {
      return this._def.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "allow", {
    get: function () {
      return this._def.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "backgroundColor", {
    get: function () {
      return this._def.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "borderColor", {
    get: function () {
      return this._def.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "textColor", {
    get: function () {
      return this._def.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "classNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._def.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(EventApi.prototype, "extendedProps", {
    get: function () {
      return this._def.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return EventApi;
}();
/*
Specifying nextDayThreshold signals that all-day ranges should be sliced.
*/


function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
  var inverseBgByGroupId = {};
  var inverseBgByDefId = {};
  var defByGroupId = {};
  var bgRanges = [];
  var fgRanges = [];
  var eventUis = compileEventUis(eventStore.defs, eventUiBases);

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];

    if (def.rendering === 'inverse-background') {
      if (def.groupId) {
        inverseBgByGroupId[def.groupId] = [];

        if (!defByGroupId[def.groupId]) {
          defByGroupId[def.groupId] = def;
        }
      } else {
        inverseBgByDefId[defId] = [];
      }
    }
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = eventStore.defs[instance.defId];
    var ui = eventUis[def.defId];
    var origRange = instance.range;
    var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
    var slicedRange = intersectRanges(normalRange, framingRange);

    if (slicedRange) {
      if (def.rendering === 'inverse-background') {
        if (def.groupId) {
          inverseBgByGroupId[def.groupId].push(slicedRange);
        } else {
          inverseBgByDefId[instance.defId].push(slicedRange);
        }
      } else {
        (def.rendering === 'background' ? bgRanges : fgRanges).push({
          def: def,
          ui: ui,
          instance: instance,
          range: slicedRange,
          isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
          isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
        });
      }
    }
  }

  for (var groupId in inverseBgByGroupId) {
    // BY GROUP
    var ranges = inverseBgByGroupId[groupId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {
      var invertedRange = invertedRanges_1[_i];
      var def = defByGroupId[groupId];
      var ui = eventUis[def.defId];
      bgRanges.push({
        def: def,
        ui: ui,
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  for (var defId in inverseBgByDefId) {
    var ranges = inverseBgByDefId[defId];
    var invertedRanges = invertRanges(ranges, framingRange);

    for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {
      var invertedRange = invertedRanges_2[_a];
      bgRanges.push({
        def: eventStore.defs[defId],
        ui: eventUis[defId],
        instance: null,
        range: invertedRange,
        isStart: false,
        isEnd: false
      });
    }
  }

  return {
    bg: bgRanges,
    fg: fgRanges
  };
}

function hasBgRendering(def) {
  return def.rendering === 'background' || def.rendering === 'inverse-background';
}

function filterSegsViaEls(view, segs, isMirror) {
  if (view.hasPublicHandlers('eventRender')) {
    segs = segs.filter(function (seg) {
      var custom = view.publiclyTrigger('eventRender', [{
        event: new EventApi(view.calendar, seg.eventRange.def, seg.eventRange.instance),
        isMirror: isMirror,
        isStart: seg.isStart,
        isEnd: seg.isEnd,
        // TODO: include seg.range once all components consistently generate it
        el: seg.el,
        view: view
      }]);

      if (custom === false) {
        // means don't render at all
        return false;
      } else if (custom && custom !== true) {
        seg.el = custom;
      }

      return true;
    });
  }

  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
    var seg = segs_1[_i];
    setElSeg(seg.el, seg);
  }

  return segs;
}

function setElSeg(el, seg) {
  el.fcSeg = seg;
}

function getElSeg(el) {
  return el.fcSeg || null;
} // event ui computation


function compileEventUis(eventDefs, eventUiBases) {
  return mapHash(eventDefs, function (eventDef) {
    return compileEventUi(eventDef, eventUiBases);
  });
}

function compileEventUi(eventDef, eventUiBases) {
  var uis = [];

  if (eventUiBases['']) {
    uis.push(eventUiBases['']);
  }

  if (eventUiBases[eventDef.defId]) {
    uis.push(eventUiBases[eventDef.defId]);
  }

  uis.push(eventDef.ui);
  return combineEventUis(uis);
} // applies the mutation to ALL defs/instances within the event store


function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {
  var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
  var dest = createEmptyEventStore();

  for (var defId in eventStore.defs) {
    var def = eventStore.defs[defId];
    dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);
  }

  for (var instanceId in eventStore.instances) {
    var instance = eventStore.instances[instanceId];
    var def = dest.defs[instance.defId]; // important to grab the newly modified def

    dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);
  }

  return dest;
}

function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {
  var standardProps = mutation.standardProps || {}; // if hasEnd has not been specified, guess a good value based on deltas.
  // if duration will change, there's no way the default duration will persist,
  // and thus, we need to mark the event as having a real end

  if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {
    standardProps.hasEnd = true; // TODO: is this mutation okay?
  }

  var copy = __assign({}, eventDef, standardProps, {
    ui: __assign({}, eventDef.ui, standardProps.ui)
  });

  if (mutation.extendedProps) {
    copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);
  }

  for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {
    var applier = appliers_1[_i];
    applier(copy, mutation, calendar);
  }

  if (!copy.hasEnd && calendar.opt('forceEventDuration')) {
    copy.hasEnd = true;
  }

  return copy;
}

function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef
eventConfig, mutation, calendar) {
  var dateEnv = calendar.dateEnv;
  var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
  var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;

  var copy = __assign({}, eventInstance);

  if (forceAllDay) {
    copy.range = computeAlignedDayRange(copy.range);
  }

  if (mutation.datesDelta && eventConfig.startEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.datesDelta),
      end: dateEnv.add(copy.range.end, mutation.datesDelta)
    };
  }

  if (mutation.startDelta && eventConfig.durationEditable) {
    copy.range = {
      start: dateEnv.add(copy.range.start, mutation.startDelta),
      end: copy.range.end
    };
  }

  if (mutation.endDelta && eventConfig.durationEditable) {
    copy.range = {
      start: copy.range.start,
      end: dateEnv.add(copy.range.end, mutation.endDelta)
    };
  }

  if (clearEnd) {
    copy.range = {
      start: copy.range.start,
      end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)
    };
  } // in case event was all-day but the supplied deltas were not
  // better util for this?


  if (eventDef.allDay) {
    copy.range = {
      start: startOfDay(copy.range.start),
      end: startOfDay(copy.range.end)
    };
  } // handle invalid durations


  if (copy.range.end < copy.range.start) {
    copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);
  }

  return copy;
}

function reduceEventStore(eventStore, action, eventSources, dateProfile, calendar) {
  switch (action.type) {
    case 'RECEIVE_EVENTS':
      // raw
      return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);

    case 'ADD_EVENTS':
      // already parsed, but not expanded
      return addEvent(eventStore, action.eventStore, // new ones
      dateProfile ? dateProfile.activeRange : null, calendar);

    case 'MERGE_EVENTS':
      // already parsed and expanded
      return mergeEventStores(eventStore, action.eventStore);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return expandRecurring(eventStore, dateProfile.activeRange, calendar);
      } else {
        return eventStore;
      }

    case 'CHANGE_TIMEZONE':
      return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);

    case 'MUTATE_EVENTS':
      return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);

    case 'REMOVE_EVENT_INSTANCES':
      return excludeInstances(eventStore, action.instances);

    case 'REMOVE_EVENT_DEF':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return eventDef.defId !== action.defId;
      });

    case 'REMOVE_EVENT_SOURCE':
      return excludeEventsBySourceId(eventStore, action.sourceId);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return filterEventStoreDefs(eventStore, function (eventDef) {
        return !eventDef.sourceId; // only keep events with no source id
      });

    case 'REMOVE_ALL_EVENTS':
      return createEmptyEventStore();

    case 'RESET_EVENTS':
      return {
        defs: eventStore.defs,
        instances: eventStore.instances
      };

    default:
      return eventStore;
  }
}

function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {
  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
  ) {
      var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);

      if (fetchRange) {
        subset = expandRecurring(subset, fetchRange, calendar);
      }

      return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
    }

  return eventStore;
}

function addEvent(eventStore, subset, expandRange, calendar) {
  if (expandRange) {
    subset = expandRecurring(subset, expandRange, calendar);
  }

  return mergeEventStores(eventStore, subset);
}

function rezoneDates(eventStore, oldDateEnv, newDateEnv) {
  var defs = eventStore.defs;
  var instances = mapHash(eventStore.instances, function (instance) {
    var def = defs[instance.defId];

    if (def.allDay || def.recurringDef) {
      return instance; // isn't dependent on timezone
    } else {
      return __assign({}, instance, {
        range: {
          start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
          end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
        },
        forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
        forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
      });
    }
  });
  return {
    defs: defs,
    instances: instances
  };
}

function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {
  var relevant = getRelevantEvents(eventStore, instanceId);
  var eventConfigBase = fromApi ? {
    '': {
      startEditable: true,
      durationEditable: true,
      constraints: [],
      overlap: null,
      allows: [],
      backgroundColor: '',
      borderColor: '',
      textColor: '',
      classNames: []
    }
  } : calendar.eventUiBases;
  relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);
  return mergeEventStores(eventStore, relevant);
}

function excludeEventsBySourceId(eventStore, sourceId) {
  return filterEventStoreDefs(eventStore, function (eventDef) {
    return eventDef.sourceId !== sourceId;
  });
} // QUESTION: why not just return instances? do a general object-property-exclusion util


function excludeInstances(eventStore, removals) {
  return {
    defs: eventStore.defs,
    instances: filterHash(eventStore.instances, function (instance) {
      return !removals[instance.instanceId];
    })
  };
} // high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionValid(interaction, calendar) {
  return isNewPropsValid({
    eventDrag: interaction
  }, calendar); // HACK: the eventDrag props is used for ALL interactions
}

function isDateSelectionValid(dateSelection, calendar) {
  return isNewPropsValid({
    dateSelection: dateSelection
  }, calendar);
}

function isNewPropsValid(newProps, calendar) {
  var view = calendar.view;

  var props = __assign({
    businessHours: view ? view.props.businessHours : createEmptyEventStore(),
    dateSelection: '',
    eventStore: calendar.state.eventStore,
    eventUiBases: calendar.eventUiBases,
    eventSelection: '',
    eventDrag: null,
    eventResize: null
  }, newProps);

  return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);
}

function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  if (dateSpanMeta === void 0) {
    dateSpanMeta = {};
  }

  if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
    return false;
  }

  return true;
} // Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------


function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions

  var subjectEventStore = interaction.mutatedEvents;
  var subjectDefs = subjectEventStore.defs;
  var subjectInstances = subjectEventStore.instances;
  var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
    '': calendar.selectionConfig
  } // if not a real event, validate as a selection
  );

  if (filterConfig) {
    subjectConfigs = mapHash(subjectConfigs, filterConfig);
  }

  var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?

  var otherDefs = otherEventStore.defs;
  var otherInstances = otherEventStore.instances;
  var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);

  for (var subjectInstanceId in subjectInstances) {
    var subjectInstance = subjectInstances[subjectInstanceId];
    var subjectRange = subjectInstance.range;
    var subjectConfig = subjectConfigs[subjectInstance.defId];
    var subjectDef = subjectDefs[subjectInstance.defId]; // constraint

    if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {
      return false;
    } // overlap


    var overlapFunc = calendar.opt('eventOverlap');

    if (typeof overlapFunc !== 'function') {
      overlapFunc = null;
    }

    for (var otherInstanceId in otherInstances) {
      var otherInstance = otherInstances[otherInstanceId]; // intersect! evaluate

      if (rangesIntersect(subjectRange, otherInstance.range)) {
        var otherOverlap = otherConfigs[otherInstance.defId].overlap; // consider the other event's overlap. only do this if the subject event is a "real" event

        if (otherOverlap === false && interaction.isEvent) {
          return false;
        }

        if (subjectConfig.overlap === false) {
          return false;
        }

        if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event
        new EventApi(calendar, subjectDef, subjectInstance) // moving event
        )) {
          return false;
        }
      }
    } // allow (a function)


    var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state

    for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {
      var subjectAllow = _a[_i];

      var subjectDateSpan = __assign({}, dateSpanMeta, {
        range: subjectInstance.range,
        allDay: subjectDef.allDay
      });

      var origDef = calendarEventStore.defs[subjectDef.defId];
      var origInstance = calendarEventStore.instances[subjectInstanceId];
      var eventApi = void 0;

      if (origDef) {
        // was previously in the calendar
        eventApi = new EventApi(calendar, origDef, origInstance);
      } else {
        // was an external event
        eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates
      }

      if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {
        return false;
      }
    }
  }

  return true;
} // Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------


function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
  var relevantEventStore = state.eventStore;
  var relevantDefs = relevantEventStore.defs;
  var relevantInstances = relevantEventStore.instances;
  var selection = state.dateSelection;
  var selectionRange = selection.range;
  var selectionConfig = calendar.selectionConfig;

  if (filterConfig) {
    selectionConfig = filterConfig(selectionConfig);
  } // constraint


  if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {
    return false;
  } // overlap


  var overlapFunc = calendar.opt('selectOverlap');

  if (typeof overlapFunc !== 'function') {
    overlapFunc = null;
  }

  for (var relevantInstanceId in relevantInstances) {
    var relevantInstance = relevantInstances[relevantInstanceId]; // intersect! evaluate

    if (rangesIntersect(selectionRange, relevantInstance.range)) {
      if (selectionConfig.overlap === false) {
        return false;
      }

      if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {
        return false;
      }
    }
  } // allow (a function)


  for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {
    var selectionAllow = _a[_i];

    var fullDateSpan = __assign({}, dateSpanMeta, selection);

    if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {
      return false;
    }
  }

  return true;
} // Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------


function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {
  for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
    var constraint = constraints_1[_i];

    if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {
      return false;
    }
  }

  return true;
}

function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours
otherEventStore, // for if constraint is an even group ID
businessHoursUnexpanded, // for if constraint is 'businessHours'
calendar // for expanding businesshours
) {
  if (constraint === 'businessHours') {
    return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));
  } else if (typeof constraint === 'string') {
    // an group ID
    return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {
      return eventDef.groupId === constraint;
    }));
  } else if (typeof constraint === 'object' && constraint) {
    // non-null object
    return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));
  }

  return []; // if it's false
} // TODO: move to event-store file?


function eventStoreToRanges(eventStore) {
  var instances = eventStore.instances;
  var ranges = [];

  for (var instanceId in instances) {
    ranges.push(instances[instanceId].range);
  }

  return ranges;
} // TODO: move to geom file?


function anyRangesContainRange(outerRanges, innerRange) {
  for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {
    var outerRange = outerRanges_1[_i];

    if (rangeContainsRange(outerRange, innerRange)) {
      return true;
    }
  }

  return false;
} // Parsing
// ------------------------------------------------------------------------------------------------------------------------


function normalizeConstraint(input, calendar) {
  if (Array.isArray(input)) {
    return parseEvents(input, '', calendar, true); // allowOpenRange=true
  } else if (typeof input === 'object' && input) {
    // non-null object
    return parseEvents([input], '', calendar, true); // allowOpenRange=true
  } else if (input != null) {
    return String(input);
  } else {
    return null;
  }
}

function htmlEscape(s) {
  return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/\n/g, '<br />');
} // Given a hash of CSS properties, returns a string of CSS.
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.


function cssToStr(cssProps) {
  var statements = [];

  for (var name_1 in cssProps) {
    var val = cssProps[name_1];

    if (val != null && val !== '') {
      statements.push(name_1 + ':' + val);
    }
  }

  return statements.join(';');
} // Given an object hash of HTML attribute names to values,
// generates a string that can be injected between < > in HTML


function attrsToStr(attrs) {
  var parts = [];

  for (var name_2 in attrs) {
    var val = attrs[name_2];

    if (val != null) {
      parts.push(name_2 + '="' + htmlEscape(val) + '"');
    }
  }

  return parts.join(' ');
}

function parseClassName(raw) {
  if (Array.isArray(raw)) {
    return raw;
  } else if (typeof raw === 'string') {
    return raw.split(/\s+/);
  } else {
    return [];
  }
}

var UNSCOPED_EVENT_UI_PROPS = {
  editable: Boolean,
  startEditable: Boolean,
  durationEditable: Boolean,
  constraint: null,
  overlap: null,
  allow: null,
  className: parseClassName,
  classNames: parseClassName,
  color: String,
  backgroundColor: String,
  borderColor: String,
  textColor: String
};

function processUnscopedUiProps(rawProps, calendar, leftovers) {
  var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);
  var constraint = normalizeConstraint(props.constraint, calendar);
  return {
    startEditable: props.startEditable != null ? props.startEditable : props.editable,
    durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,
    constraints: constraint != null ? [constraint] : [],
    overlap: props.overlap,
    allows: props.allow != null ? [props.allow] : [],
    backgroundColor: props.backgroundColor || props.color,
    borderColor: props.borderColor || props.color,
    textColor: props.textColor,
    classNames: props.classNames.concat(props.className)
  };
}

function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {
  var rawUnscoped = {};
  var wasFound = {};

  for (var key in UNSCOPED_EVENT_UI_PROPS) {
    var scopedKey = prefix + capitaliseFirstLetter(key);
    rawUnscoped[key] = rawScoped[scopedKey];
    wasFound[scopedKey] = true;
  }

  if (prefix === 'event') {
    rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'
  }

  if (leftovers) {
    for (var key in rawScoped) {
      if (!wasFound[key]) {
        leftovers[key] = rawScoped[key];
      }
    }
  }

  return processUnscopedUiProps(rawUnscoped, calendar);
}

var EMPTY_EVENT_UI = {
  startEditable: null,
  durationEditable: null,
  constraints: [],
  overlap: null,
  allows: [],
  backgroundColor: '',
  borderColor: '',
  textColor: '',
  classNames: []
}; // prevent against problems with <2 args!

function combineEventUis(uis) {
  return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
}

function combineTwoEventUis(item0, item1) {
  return {
    startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
    durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
    constraints: item0.constraints.concat(item1.constraints),
    overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
    allows: item0.allows.concat(item1.allows),
    backgroundColor: item1.backgroundColor || item0.backgroundColor,
    borderColor: item1.borderColor || item0.borderColor,
    textColor: item1.textColor || item0.textColor,
    classNames: item0.classNames.concat(item1.classNames)
  };
}

var NON_DATE_PROPS = {
  id: String,
  groupId: String,
  title: String,
  url: String,
  rendering: String,
  extendedProps: null
};
var DATE_PROPS = {
  start: null,
  date: null,
  end: null,
  allDay: null
};
var uid = 0;

function parseEvent(raw, sourceId, calendar, allowOpenRange) {
  var allDayDefault = computeIsAllDayDefault(sourceId, calendar);
  var leftovers0 = {};
  var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out
  allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props
  );

  if (recurringRes) {
    var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);
    def.recurringDef = {
      typeId: recurringRes.typeId,
      typeData: recurringRes.typeData,
      duration: recurringRes.duration
    };
    return {
      def: def,
      instance: null
    };
  } else {
    var leftovers1 = {};
    var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);

    if (singleRes) {
      var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);
      var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
      return {
        def: def,
        instance: instance
      };
    }
  }

  return null;
}
/*
Will NOT populate extendedProps with the leftover properties.
Will NOT populate date-related props.
The EventNonDateInput has been normalized (id => publicId, etc).
*/


function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {
  var leftovers = {};
  var def = pluckNonDateProps(raw, calendar, leftovers);
  def.defId = String(uid++);
  def.sourceId = sourceId;
  def.allDay = allDay;
  def.hasEnd = hasEnd;

  for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {
    var eventDefParser = _a[_i];
    var newLeftovers = {};
    eventDefParser(def, leftovers, newLeftovers);
    leftovers = newLeftovers;
  }

  def.extendedProps = __assign(leftovers, def.extendedProps || {}); // help out EventApi from having user modify props

  Object.freeze(def.ui.classNames);
  Object.freeze(def.extendedProps);
  return def;
}

function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
  return {
    instanceId: String(uid++),
    defId: defId,
    range: range,
    forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
    forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
  };
}

function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {
  var props = pluckDateProps(raw, leftovers);
  var allDay = props.allDay;
  var startMeta;
  var startMarker = null;
  var hasEnd = false;
  var endMeta;
  var endMarker = null;
  startMeta = calendar.dateEnv.createMarkerMeta(props.start);

  if (startMeta) {
    startMarker = startMeta.marker;
  } else if (!allowOpenRange) {
    return null;
  }

  if (props.end != null) {
    endMeta = calendar.dateEnv.createMarkerMeta(props.end);
  }

  if (allDay == null) {
    if (allDayDefault != null) {
      allDay = allDayDefault;
    } else {
      // fall back to the date props LAST
      allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
    }
  }

  if (allDay && startMarker) {
    startMarker = startOfDay(startMarker);
  }

  if (endMeta) {
    endMarker = endMeta.marker;

    if (allDay) {
      endMarker = startOfDay(endMarker);
    }

    if (startMarker && endMarker <= startMarker) {
      endMarker = null;
    }
  }

  if (endMarker) {
    hasEnd = true;
  } else if (!allowOpenRange) {
    hasEnd = calendar.opt('forceEventDuration') || false;
    endMarker = calendar.dateEnv.add(startMarker, allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);
  }

  return {
    allDay: allDay,
    hasEnd: hasEnd,
    range: {
      start: startMarker,
      end: endMarker
    },
    forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
    forcedEndTzo: endMeta ? endMeta.forcedTzo : null
  };
}

function pluckDateProps(raw, leftovers) {
  var props = refineProps(raw, DATE_PROPS, {}, leftovers);
  props.start = props.start !== null ? props.start : props.date;
  delete props.date;
  return props;
}

function pluckNonDateProps(raw, calendar, leftovers) {
  var preLeftovers = {};
  var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);
  var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);
  props.publicId = props.id;
  delete props.id;
  props.ui = ui;
  return props;
}

function computeIsAllDayDefault(sourceId, calendar) {
  var res = null;

  if (sourceId) {
    var source = calendar.state.eventSources[sourceId];
    res = source.allDayDefault;
  }

  if (res == null) {
    res = calendar.opt('allDayDefault');
  }

  return res;
}

var DEF_DEFAULTS = {
  startTime: '09:00',
  endTime: '17:00',
  daysOfWeek: [1, 2, 3, 4, 5],
  rendering: 'inverse-background',
  classNames: 'fc-nonbusiness',
  groupId: '_businessHours' // so multiple defs get grouped

};
/*
TODO: pass around as EventDefHash!!!
*/

function parseBusinessHours(input, calendar) {
  return parseEvents(refineInputs(input), '', calendar);
}

function refineInputs(input) {
  var rawDefs;

  if (input === true) {
    rawDefs = [{}]; // will get DEF_DEFAULTS verbatim
  } else if (Array.isArray(input)) {
    // if specifying an array, every sub-definition NEEDS a day-of-week
    rawDefs = input.filter(function (rawDef) {
      return rawDef.daysOfWeek;
    });
  } else if (typeof input === 'object' && input) {
    // non-null object
    rawDefs = [input];
  } else {
    // is probably false
    rawDefs = [];
  }

  rawDefs = rawDefs.map(function (rawDef) {
    return __assign({}, DEF_DEFAULTS, rawDef);
  });
  return rawDefs;
}

function memoizeRendering(renderFunc, unrenderFunc, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }

  var dependents = [];
  var thisContext;
  var prevArgs;

  function unrender() {
    if (prevArgs) {
      for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {
        var dependent = dependents_1[_i];
        dependent.unrender();
      }

      if (unrenderFunc) {
        unrenderFunc.apply(thisContext, prevArgs);
      }

      prevArgs = null;
    }
  }

  function res() {
    if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {
      unrender();
      thisContext = this;
      prevArgs = arguments;
      renderFunc.apply(this, arguments);
    }
  }

  res.dependents = dependents;
  res.unrender = unrender;

  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
    var dependency = dependencies_1[_i];
    dependency.dependents.push(res);
  }

  return res;
}

var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere

var Splitter =
/** @class */
function () {
  function Splitter() {
    this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
    this.splitDateSelection = memoize(this._splitDateSpan);
    this.splitEventStore = memoize(this._splitEventStore);
    this.splitIndividualUi = memoize(this._splitIndividualUi);
    this.splitEventDrag = memoize(this._splitInteraction);
    this.splitEventResize = memoize(this._splitInteraction);
    this.eventUiBuilders = {}; // TODO: typescript protection
  }

  Splitter.prototype.splitProps = function (props) {
    var _this = this;

    var keyInfos = this.getKeyInfo(props);
    var defKeys = this.getKeysForEventDefs(props.eventStore);
    var dateSelections = this.splitDateSelection(props.dateSelection);
    var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*

    var eventStores = this.splitEventStore(props.eventStore, defKeys);
    var eventDrags = this.splitEventDrag(props.eventDrag);
    var eventResizes = this.splitEventResize(props.eventResize);
    var splitProps = {};
    this.eventUiBuilders = mapHash(keyInfos, function (info, key) {
      return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);
    });

    for (var key in keyInfos) {
      var keyInfo = keyInfos[key];
      var eventStore = eventStores[key] || EMPTY_EVENT_STORE;
      var buildEventUi = this.eventUiBuilders[key];
      splitProps[key] = {
        businessHours: keyInfo.businessHours || props.businessHours,
        dateSelection: dateSelections[key] || null,
        eventStore: eventStore,
        eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
        eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
        eventDrag: eventDrags[key] || null,
        eventResize: eventResizes[key] || null
      };
    }

    return splitProps;
  };

  Splitter.prototype._splitDateSpan = function (dateSpan) {
    var dateSpans = {};

    if (dateSpan) {
      var keys = this.getKeysForDateSpan(dateSpan);

      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        dateSpans[key] = dateSpan;
      }
    }

    return dateSpans;
  };

  Splitter.prototype._getKeysForEventDefs = function (eventStore) {
    var _this = this;

    return mapHash(eventStore.defs, function (eventDef) {
      return _this.getKeysForEventDef(eventDef);
    });
  };

  Splitter.prototype._splitEventStore = function (eventStore, defKeys) {
    var defs = eventStore.defs,
        instances = eventStore.instances;
    var splitStores = {};

    for (var defId in defs) {
      for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
        var key = _a[_i];

        if (!splitStores[key]) {
          splitStores[key] = createEmptyEventStore();
        }

        splitStores[key].defs[defId] = defs[defId];
      }
    }

    for (var instanceId in instances) {
      var instance = instances[instanceId];

      for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {
        var key = _c[_b];

        if (splitStores[key]) {
          // must have already been created
          splitStores[key].instances[instanceId] = instance;
        }
      }
    }

    return splitStores;
  };

  Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {
    var splitHashes = {};

    for (var defId in eventUiBases) {
      if (defId) {
        // not the '' key
        for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
          var key = _a[_i];

          if (!splitHashes[key]) {
            splitHashes[key] = {};
          }

          splitHashes[key][defId] = eventUiBases[defId];
        }
      }
    }

    return splitHashes;
  };

  Splitter.prototype._splitInteraction = function (interaction) {
    var splitStates = {};

    if (interaction) {
      var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar
      ); // can't rely on defKeys because event data is mutated


      var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);

      var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);

      var populate = function (key) {
        if (!splitStates[key]) {
          splitStates[key] = {
            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,
            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,
            isEvent: interaction.isEvent,
            origSeg: interaction.origSeg
          };
        }
      };

      for (var key in affectedStores_1) {
        populate(key);
      }

      for (var key in mutatedStores_1) {
        populate(key);
      }
    }

    return splitStates;
  };

  return Splitter;
}();

function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
  var baseParts = [];

  if (allUi) {
    baseParts.push(allUi);
  }

  if (eventUiForKey) {
    baseParts.push(eventUiForKey);
  }

  var stuff = {
    '': combineEventUis(baseParts)
  };

  if (individualUi) {
    __assign(stuff, individualUi);
  }

  return stuff;
} // Generates HTML for an anchor to another view into the calendar.
// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
// `gotoOptions` can either be a DateMarker, or an object with the form:
// { date, type, forceOff }
// `type` is a view-type like "day" or "week". default value is "day".
// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.


function buildGotoAnchorHtml(component, gotoOptions, attrs, innerHtml) {
  var dateEnv = component.dateEnv;
  var date;
  var type;
  var forceOff;
  var finalOptions;

  if (gotoOptions instanceof Date) {
    date = gotoOptions; // a single date-like input
  } else {
    date = gotoOptions.date;
    type = gotoOptions.type;
    forceOff = gotoOptions.forceOff;
  }

  finalOptions = {
    date: dateEnv.formatIso(date, {
      omitTime: true
    }),
    type: type || 'day'
  };

  if (typeof attrs === 'string') {
    innerHtml = attrs;
    attrs = null;
  }

  attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space

  innerHtml = innerHtml || '';

  if (!forceOff && component.opt('navLinks')) {
    return '<a' + attrs + ' data-goto="' + htmlEscape(JSON.stringify(finalOptions)) + '">' + innerHtml + '</a>';
  } else {
    return '<span' + attrs + '>' + innerHtml + '</span>';
  }
}

function getAllDayHtml(component) {
  return component.opt('allDayHtml') || htmlEscape(component.opt('allDayText'));
} // Computes HTML classNames for a single-day element


function getDayClasses(date, dateProfile, context, noThemeHighlight) {
  var calendar = context.calendar,
      view = context.view,
      theme = context.theme,
      dateEnv = context.dateEnv;
  var classes = [];
  var todayStart;
  var todayEnd;

  if (!rangeContainsMarker(dateProfile.activeRange, date)) {
    classes.push('fc-disabled-day');
  } else {
    classes.push('fc-' + DAY_IDS[date.getUTCDay()]);

    if (view.opt('monthMode') && dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {
      classes.push('fc-other-month');
    }

    todayStart = startOfDay(calendar.getNow());
    todayEnd = addDays(todayStart, 1);

    if (date < todayStart) {
      classes.push('fc-past');
    } else if (date >= todayEnd) {
      classes.push('fc-future');
    } else {
      classes.push('fc-today');

      if (noThemeHighlight !== true) {
        classes.push(theme.getClass('today'));
      }
    }
  }

  return classes;
} // given a function that resolves a result asynchronously.
// the function can either call passed-in success and failure callbacks,
// or it can return a promise.
// if you need to pass additional params to func, bind them first.


function unpromisify(func, success, failure) {
  // guard against success/failure callbacks being called more than once
  // and guard against a promise AND callback being used together.
  var isResolved = false;

  var wrappedSuccess = function () {
    if (!isResolved) {
      isResolved = true;
      success.apply(this, arguments);
    }
  };

  var wrappedFailure = function () {
    if (!isResolved) {
      isResolved = true;

      if (failure) {
        failure.apply(this, arguments);
      }
    }
  };

  var res = func(wrappedSuccess, wrappedFailure);

  if (res && typeof res.then === 'function') {
    res.then(wrappedSuccess, wrappedFailure);
  }
}

var Mixin =
/** @class */
function () {
  function Mixin() {} // mix into a CLASS


  Mixin.mixInto = function (destClass) {
    this.mixIntoObj(destClass.prototype);
  }; // mix into ANY object


  Mixin.mixIntoObj = function (destObj) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      if (!destObj[name]) {
        // if destination doesn't already define it
        destObj[name] = _this.prototype[name];
      }
    });
  };
  /*
  will override existing methods
  TODO: remove! not used anymore
  */


  Mixin.mixOver = function (destClass) {
    var _this = this;

    Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
      destClass.prototype[name] = _this.prototype[name];
    });
  };

  return Mixin;
}();
/*
USAGE:
  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
in class:
  on: EmitterInterface['on']
  one: EmitterInterface['one']
  off: EmitterInterface['off']
  trigger: EmitterInterface['trigger']
  triggerWith: EmitterInterface['triggerWith']
  hasHandlers: EmitterInterface['hasHandlers']
after class:
  EmitterMixin.mixInto(TheClass)
*/


var EmitterMixin =
/** @class */
function (_super) {
  __extends(EmitterMixin, _super);

  function EmitterMixin() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EmitterMixin.prototype.on = function (type, handler) {
    addToHash(this._handlers || (this._handlers = {}), type, handler);
    return this; // for chaining
  }; // todo: add comments


  EmitterMixin.prototype.one = function (type, handler) {
    addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);
    return this; // for chaining
  };

  EmitterMixin.prototype.off = function (type, handler) {
    if (this._handlers) {
      removeFromHash(this._handlers, type, handler);
    }

    if (this._oneHandlers) {
      removeFromHash(this._oneHandlers, type, handler);
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.trigger = function (type) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    this.triggerWith(type, this, args);
    return this; // for chaining
  };

  EmitterMixin.prototype.triggerWith = function (type, context, args) {
    if (this._handlers) {
      applyAll(this._handlers[type], context, args);
    }

    if (this._oneHandlers) {
      applyAll(this._oneHandlers[type], context, args);
      delete this._oneHandlers[type]; // will never fire again
    }

    return this; // for chaining
  };

  EmitterMixin.prototype.hasHandlers = function (type) {
    return this._handlers && this._handlers[type] && this._handlers[type].length || this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length;
  };

  return EmitterMixin;
}(Mixin);

function addToHash(hash, type, handler) {
  (hash[type] || (hash[type] = [])).push(handler);
}

function removeFromHash(hash, type, handler) {
  if (handler) {
    if (hash[type]) {
      hash[type] = hash[type].filter(function (func) {
        return func !== handler;
      });
    }
  } else {
    delete hash[type]; // remove all handler funcs for this type
  }
}
/*
Records offset information for a set of elements, relative to an origin element.
Can record the left/right OR the top/bottom OR both.
Provides methods for querying the cache by position.
*/


var PositionCache =
/** @class */
function () {
  function PositionCache(originEl, els, isHorizontal, isVertical) {
    this.originEl = originEl;
    this.els = els;
    this.isHorizontal = isHorizontal;
    this.isVertical = isVertical;
  } // Queries the els for coordinates and stores them.
  // Call this method before using and of the get* methods below.


  PositionCache.prototype.build = function () {
    var originEl = this.originEl;
    var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left

    if (this.isHorizontal) {
      this.buildElHorizontals(originClientRect.left);
    }

    if (this.isVertical) {
      this.buildElVerticals(originClientRect.top);
    }
  }; // Populates the left/right internal coordinate arrays


  PositionCache.prototype.buildElHorizontals = function (originClientLeft) {
    var lefts = [];
    var rights = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      lefts.push(rect.left - originClientLeft);
      rights.push(rect.right - originClientLeft);
    }

    this.lefts = lefts;
    this.rights = rights;
  }; // Populates the top/bottom internal coordinate arrays


  PositionCache.prototype.buildElVerticals = function (originClientTop) {
    var tops = [];
    var bottoms = [];

    for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
      var el = _a[_i];
      var rect = el.getBoundingClientRect();
      tops.push(rect.top - originClientTop);
      bottoms.push(rect.bottom - originClientTop);
    }

    this.tops = tops;
    this.bottoms = bottoms;
  }; // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.leftToIndex = function (leftPosition) {
    var lefts = this.lefts;
    var rights = this.rights;
    var len = lefts.length;
    var i;

    for (i = 0; i < len; i++) {
      if (leftPosition >= lefts[i] && leftPosition < rights[i]) {
        return i;
      }
    }
  }; // Given a top offset (from document top), returns the index of the el that it vertically intersects.
  // If no intersection is made, returns undefined.


  PositionCache.prototype.topToIndex = function (topPosition) {
    var tops = this.tops;
    var bottoms = this.bottoms;
    var len = tops.length;
    var i;

    for (i = 0; i < len; i++) {
      if (topPosition >= tops[i] && topPosition < bottoms[i]) {
        return i;
      }
    }
  }; // Gets the width of the element at the given index


  PositionCache.prototype.getWidth = function (leftIndex) {
    return this.rights[leftIndex] - this.lefts[leftIndex];
  }; // Gets the height of the element at the given index


  PositionCache.prototype.getHeight = function (topIndex) {
    return this.bottoms[topIndex] - this.tops[topIndex];
  };

  return PositionCache;
}();
/*
An object for getting/setting scroll-related information for an element.
Internally, this is done very differently for window versus DOM element,
so this object serves as a common interface.
*/


var ScrollController =
/** @class */
function () {
  function ScrollController() {}

  ScrollController.prototype.getMaxScrollTop = function () {
    return this.getScrollHeight() - this.getClientHeight();
  };

  ScrollController.prototype.getMaxScrollLeft = function () {
    return this.getScrollWidth() - this.getClientWidth();
  };

  ScrollController.prototype.canScrollVertically = function () {
    return this.getMaxScrollTop() > 0;
  };

  ScrollController.prototype.canScrollHorizontally = function () {
    return this.getMaxScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollUp = function () {
    return this.getScrollTop() > 0;
  };

  ScrollController.prototype.canScrollDown = function () {
    return this.getScrollTop() < this.getMaxScrollTop();
  };

  ScrollController.prototype.canScrollLeft = function () {
    return this.getScrollLeft() > 0;
  };

  ScrollController.prototype.canScrollRight = function () {
    return this.getScrollLeft() < this.getMaxScrollLeft();
  };

  return ScrollController;
}();

var ElementScrollController =
/** @class */
function (_super) {
  __extends(ElementScrollController, _super);

  function ElementScrollController(el) {
    var _this = _super.call(this) || this;

    _this.el = el;
    return _this;
  }

  ElementScrollController.prototype.getScrollTop = function () {
    return this.el.scrollTop;
  };

  ElementScrollController.prototype.getScrollLeft = function () {
    return this.el.scrollLeft;
  };

  ElementScrollController.prototype.setScrollTop = function (top) {
    this.el.scrollTop = top;
  };

  ElementScrollController.prototype.setScrollLeft = function (left) {
    this.el.scrollLeft = left;
  };

  ElementScrollController.prototype.getScrollWidth = function () {
    return this.el.scrollWidth;
  };

  ElementScrollController.prototype.getScrollHeight = function () {
    return this.el.scrollHeight;
  };

  ElementScrollController.prototype.getClientHeight = function () {
    return this.el.clientHeight;
  };

  ElementScrollController.prototype.getClientWidth = function () {
    return this.el.clientWidth;
  };

  return ElementScrollController;
}(ScrollController);

var WindowScrollController =
/** @class */
function (_super) {
  __extends(WindowScrollController, _super);

  function WindowScrollController() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WindowScrollController.prototype.getScrollTop = function () {
    return window.pageYOffset;
  };

  WindowScrollController.prototype.getScrollLeft = function () {
    return window.pageXOffset;
  };

  WindowScrollController.prototype.setScrollTop = function (n) {
    window.scroll(window.pageXOffset, n);
  };

  WindowScrollController.prototype.setScrollLeft = function (n) {
    window.scroll(n, window.pageYOffset);
  };

  WindowScrollController.prototype.getScrollWidth = function () {
    return document.documentElement.scrollWidth;
  };

  WindowScrollController.prototype.getScrollHeight = function () {
    return document.documentElement.scrollHeight;
  };

  WindowScrollController.prototype.getClientHeight = function () {
    return document.documentElement.clientHeight;
  };

  WindowScrollController.prototype.getClientWidth = function () {
    return document.documentElement.clientWidth;
  };

  return WindowScrollController;
}(ScrollController);
/*
Embodies a div that has potential scrollbars
*/


var ScrollComponent =
/** @class */
function (_super) {
  __extends(ScrollComponent, _super);

  function ScrollComponent(overflowX, overflowY) {
    var _this = _super.call(this, createElement('div', {
      className: 'fc-scroller'
    })) || this;

    _this.overflowX = overflowX;
    _this.overflowY = overflowY;

    _this.applyOverflow();

    return _this;
  } // sets to natural height, unlocks overflow


  ScrollComponent.prototype.clear = function () {
    this.setHeight('auto');
    this.applyOverflow();
  };

  ScrollComponent.prototype.destroy = function () {
    removeElement(this.el);
  }; // Overflow
  // -----------------------------------------------------------------------------------------------------------------


  ScrollComponent.prototype.applyOverflow = function () {
    applyStyle(this.el, {
      overflowX: this.overflowX,
      overflowY: this.overflowY
    });
  }; // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
  // Useful for preserving scrollbar widths regardless of future resizes.
  // Can pass in scrollbarWidths for optimization.


  ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {
    var overflowX = this.overflowX;
    var overflowY = this.overflowY;
    scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();

    if (overflowX === 'auto') {
      overflowX = scrollbarWidths.bottom || // horizontal scrollbars?
      this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    if (overflowY === 'auto') {
      overflowY = scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?
      this.canScrollVertically() // OR scrolling pane with massless scrollbars?
      ? 'scroll' : 'hidden';
    }

    applyStyle(this.el, {
      overflowX: overflowX,
      overflowY: overflowY
    });
  };

  ScrollComponent.prototype.setHeight = function (height) {
    applyStyleProp(this.el, 'height', height);
  };

  ScrollComponent.prototype.getScrollbarWidths = function () {
    var edges = computeEdges(this.el);
    return {
      left: edges.scrollbarLeft,
      right: edges.scrollbarRight,
      bottom: edges.scrollbarBottom
    };
  };

  return ScrollComponent;
}(ElementScrollController);

var Theme =
/** @class */
function () {
  function Theme(calendarOptions) {
    this.calendarOptions = calendarOptions;
    this.processIconOverride();
  }

  Theme.prototype.processIconOverride = function () {
    if (this.iconOverrideOption) {
      this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);
    }
  };

  Theme.prototype.setIconOverride = function (iconOverrideHash) {
    var iconClassesCopy;
    var buttonName;

    if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
      // non-null object
      iconClassesCopy = __assign({}, this.iconClasses);

      for (buttonName in iconOverrideHash) {
        iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
      }

      this.iconClasses = iconClassesCopy;
    } else if (iconOverrideHash === false) {
      this.iconClasses = {};
    }
  };

  Theme.prototype.applyIconOverridePrefix = function (className) {
    var prefix = this.iconOverridePrefix;

    if (prefix && className.indexOf(prefix) !== 0) {
      // if not already present
      className = prefix + className;
    }

    return className;
  };

  Theme.prototype.getClass = function (key) {
    return this.classes[key] || '';
  };

  Theme.prototype.getIconClass = function (buttonName) {
    var className = this.iconClasses[buttonName];

    if (className) {
      return this.baseIconClass + ' ' + className;
    }

    return '';
  };

  Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
    var className;

    if (this.iconOverrideCustomButtonOption) {
      className = customButtonProps[this.iconOverrideCustomButtonOption];

      if (className) {
        return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
      }
    }

    return '';
  };

  return Theme;
}();

Theme.prototype.classes = {};
Theme.prototype.iconClasses = {};
Theme.prototype.baseIconClass = '';
Theme.prototype.iconOverridePrefix = '';
var guid = 0;

var Component =
/** @class */
function () {
  function Component(context, isView) {
    // HACK to populate view at top of component instantiation call chain
    if (isView) {
      context.view = this;
    }

    this.uid = String(guid++);
    this.context = context;
    this.dateEnv = context.dateEnv;
    this.theme = context.theme;
    this.view = context.view;
    this.calendar = context.calendar;
    this.isRtl = this.opt('dir') === 'rtl';
  }

  Component.addEqualityFuncs = function (newFuncs) {
    this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);
  };

  Component.prototype.opt = function (name) {
    return this.context.options[name];
  };

  Component.prototype.receiveProps = function (props) {
    var _a = recycleProps(this.props || {}, props, this.equalityFuncs),
        anyChanges = _a.anyChanges,
        comboProps = _a.comboProps;

    this.props = comboProps;

    if (anyChanges) {
      this.render(comboProps);
    }
  };

  Component.prototype.render = function (props) {}; // after destroy is called, this component won't ever be used again


  Component.prototype.destroy = function () {};

  return Component;
}();

Component.prototype.equalityFuncs = {};
/*
Reuses old values when equal. If anything is unequal, returns newProps as-is.
Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.
*/

function recycleProps(oldProps, newProps, equalityFuncs) {
  var comboProps = {}; // some old, some new

  var anyChanges = false;

  for (var key in newProps) {
    if (key in oldProps && (oldProps[key] === newProps[key] || equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key]))) {
      // equal to old? use old prop
      comboProps[key] = oldProps[key];
    } else {
      comboProps[key] = newProps[key];
      anyChanges = true;
    }
  }

  for (var key in oldProps) {
    if (!(key in newProps)) {
      anyChanges = true;
      break;
    }
  }

  return {
    anyChanges: anyChanges,
    comboProps: comboProps
  };
}
/*
PURPOSES:
- hook up to fg, fill, and mirror renderers
- interface for dragging and hits
*/


var DateComponent =
/** @class */
function (_super) {
  __extends(DateComponent, _super);

  function DateComponent(context, el, isView) {
    var _this = _super.call(this, context, isView) || this;

    _this.el = el;
    return _this;
  }

  DateComponent.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    removeElement(this.el);
  }; // TODO: WHAT ABOUT (sourceSeg && sourceSeg.component.doesDragMirror)
  //
  // Event Drag-n-Drop Rendering (for both events and external elements)
  // ---------------------------------------------------------------------------------------------------------------

  /*
  renderEventDragSegs(state: EventSegUiInteractionState) {
    if (state) {
      let { isEvent, segs, sourceSeg } = state
         if (this.eventRenderer) {
        this.eventRenderer.hideByHash(state.affectedInstances)
      }
         // if the user is dragging something that is considered an event with real event data,
      // and this component likes to do drag mirrors OR the component where the seg came from
      // likes to do drag mirrors, then render a drag mirror.
      if (isEvent && (this.doesDragMirror || sourceSeg && sourceSeg.component.doesDragMirror)) {
        if (this.mirrorRenderer) {
          this.mirrorRenderer.renderSegs(segs, { isDragging: true, sourceSeg })
        }
      }
         // if it would be impossible to render a drag mirror OR this component likes to render
      // highlights, then render a highlight.
      if (!isEvent || this.doesDragHighlight) {
        if (this.fillRenderer) {
          this.fillRenderer.renderSegs('highlight', segs)
        }
      }
    }
  }
  */
  // Hit System
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.buildPositionCaches = function () {};

  DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    return null; // this should be abstract
  }; // Validation
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isInteractionValid = function (interaction) {
    var calendar = this.calendar;
    var dateProfile = this.props.dateProfile; // HACK

    var instances = interaction.mutatedEvents.instances;

    if (dateProfile) {
      // HACK for DayTile
      for (var instanceId in instances) {
        if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {
          return false;
        }
      }
    }

    return isInteractionValid(interaction, calendar);
  };

  DateComponent.prototype.isDateSelectionValid = function (selection) {
    var dateProfile = this.props.dateProfile; // HACK

    if (dateProfile && // HACK for DayTile
    !rangeContainsRange(dateProfile.validRange, selection.range)) {
      return false;
    }

    return isDateSelectionValid(selection, this.calendar);
  }; // Triggering
  // -----------------------------------------------------------------------------------------------------------------
  // TODO: move to Calendar


  DateComponent.prototype.publiclyTrigger = function (name, args) {
    var calendar = this.calendar;
    return calendar.publiclyTrigger(name, args);
  };

  DateComponent.prototype.publiclyTriggerAfterSizing = function (name, args) {
    var calendar = this.calendar;
    return calendar.publiclyTriggerAfterSizing(name, args);
  };

  DateComponent.prototype.hasPublicHandlers = function (name) {
    var calendar = this.calendar;
    return calendar.hasPublicHandlers(name);
  };

  DateComponent.prototype.triggerRenderedSegs = function (segs, isMirrors) {
    var calendar = this.calendar;

    if (this.hasPublicHandlers('eventPositioned')) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        this.publiclyTriggerAfterSizing('eventPositioned', [{
          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
          isMirror: isMirrors,
          isStart: seg.isStart,
          isEnd: seg.isEnd,
          el: seg.el,
          view: this // safe to cast because this method is only called on context.view

        }]);
      }
    }

    if (!calendar.state.loadingLevel) {
      // avoid initial empty state while pending
      calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once
    }
  };

  DateComponent.prototype.triggerWillRemoveSegs = function (segs, isMirrors) {
    var calendar = this.calendar;

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      calendar.trigger('eventElRemove', seg.el);
    }

    if (this.hasPublicHandlers('eventDestroy')) {
      for (var _a = 0, segs_3 = segs; _a < segs_3.length; _a++) {
        var seg = segs_3[_a];
        this.publiclyTrigger('eventDestroy', [{
          event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
          isMirror: isMirrors,
          el: seg.el,
          view: this // safe to cast because this method is only called on context.view

        }]);
      }
    }
  }; // Pointer Interaction Utils
  // -----------------------------------------------------------------------------------------------------------------


  DateComponent.prototype.isValidSegDownEl = function (el) {
    return !this.props.eventDrag && // HACK
    !this.props.eventResize && // HACK
    !elementClosest(el, '.fc-mirror') && (this.isPopover() || !this.isInPopover(el)); // ^above line ensures we don't detect a seg interaction within a nested component.
    // it's a HACK because it only supports a popover as the nested component.
  };

  DateComponent.prototype.isValidDateDownEl = function (el) {
    var segEl = elementClosest(el, this.fgSegSelector);
    return (!segEl || segEl.classList.contains('fc-mirror')) && !elementClosest(el, '.fc-more') && // a "more.." link
    !elementClosest(el, 'a[data-goto]') && // a clickable nav link
    !this.isInPopover(el);
  };

  DateComponent.prototype.isPopover = function () {
    return this.el.classList.contains('fc-popover');
  };

  DateComponent.prototype.isInPopover = function (el) {
    return Boolean(elementClosest(el, '.fc-popover'));
  };

  return DateComponent;
}(Component);

DateComponent.prototype.fgSegSelector = '.fc-event-container > *';
DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';
var uid$1 = 0;

function createPlugin(input) {
  return {
    id: String(uid$1++),
    deps: input.deps || [],
    reducers: input.reducers || [],
    eventDefParsers: input.eventDefParsers || [],
    isDraggableTransformers: input.isDraggableTransformers || [],
    eventDragMutationMassagers: input.eventDragMutationMassagers || [],
    eventDefMutationAppliers: input.eventDefMutationAppliers || [],
    dateSelectionTransformers: input.dateSelectionTransformers || [],
    datePointTransforms: input.datePointTransforms || [],
    dateSpanTransforms: input.dateSpanTransforms || [],
    views: input.views || {},
    viewPropsTransformers: input.viewPropsTransformers || [],
    isPropsValid: input.isPropsValid || null,
    externalDefTransforms: input.externalDefTransforms || [],
    eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],
    viewContainerModifiers: input.viewContainerModifiers || [],
    eventDropTransformers: input.eventDropTransformers || [],
    componentInteractions: input.componentInteractions || [],
    calendarInteractions: input.calendarInteractions || [],
    themeClasses: input.themeClasses || {},
    eventSourceDefs: input.eventSourceDefs || [],
    cmdFormatter: input.cmdFormatter,
    recurringTypes: input.recurringTypes || [],
    namedTimeZonedImpl: input.namedTimeZonedImpl,
    defaultView: input.defaultView || '',
    elementDraggingImpl: input.elementDraggingImpl,
    optionChangeHandlers: input.optionChangeHandlers || {}
  };
}

var PluginSystem =
/** @class */
function () {
  function PluginSystem() {
    this.hooks = {
      reducers: [],
      eventDefParsers: [],
      isDraggableTransformers: [],
      eventDragMutationMassagers: [],
      eventDefMutationAppliers: [],
      dateSelectionTransformers: [],
      datePointTransforms: [],
      dateSpanTransforms: [],
      views: {},
      viewPropsTransformers: [],
      isPropsValid: null,
      externalDefTransforms: [],
      eventResizeJoinTransforms: [],
      viewContainerModifiers: [],
      eventDropTransformers: [],
      componentInteractions: [],
      calendarInteractions: [],
      themeClasses: {},
      eventSourceDefs: [],
      cmdFormatter: null,
      recurringTypes: [],
      namedTimeZonedImpl: null,
      defaultView: '',
      elementDraggingImpl: null,
      optionChangeHandlers: {}
    };
    this.addedHash = {};
  }

  PluginSystem.prototype.add = function (plugin) {
    if (!this.addedHash[plugin.id]) {
      this.addedHash[plugin.id] = true;

      for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {
        var dep = _a[_i];
        this.add(dep);
      }

      this.hooks = combineHooks(this.hooks, plugin);
    }
  };

  return PluginSystem;
}();

function combineHooks(hooks0, hooks1) {
  return {
    reducers: hooks0.reducers.concat(hooks1.reducers),
    eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),
    isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
    eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
    eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
    dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
    datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
    dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
    views: __assign({}, hooks0.views, hooks1.views),
    viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
    isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
    externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
    eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),
    viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),
    eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
    calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
    componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
    themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),
    eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
    cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
    recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
    namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
    defaultView: hooks0.defaultView || hooks1.defaultView,
    elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
    optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)
  };
}

var eventSourceDef = {
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      // short form
      return raw;
    } else if (Array.isArray(raw.events)) {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success) {
    success({
      rawEvents: arg.eventSource.meta
    });
  }
};
var ArrayEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef]
});
var eventSourceDef$1 = {
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      // short form
      return raw;
    } else if (typeof raw.events === 'function') {
      return raw.events;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.eventSource.meta;
    unpromisify(func.bind(null, {
      start: dateEnv.toDate(arg.range.start),
      end: dateEnv.toDate(arg.range.end),
      startStr: dateEnv.formatIso(arg.range.start),
      endStr: dateEnv.formatIso(arg.range.end),
      timeZone: dateEnv.timeZone
    }), function (rawEvents) {
      success({
        rawEvents: rawEvents
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
};
var FuncEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$1]
});

function requestJson(method, url, params, successCallback, failureCallback) {
  method = method.toUpperCase();
  var body = null;

  if (method === 'GET') {
    url = injectQueryStringParams(url, params);
  } else {
    body = encodeParams(params);
  }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true);

  if (method !== 'GET') {
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  }

  xhr.onload = function () {
    if (xhr.status >= 200 && xhr.status < 400) {
      try {
        var res = JSON.parse(xhr.responseText);
        successCallback(res, xhr);
      } catch (err) {
        failureCallback('Failure parsing JSON', xhr);
      }
    } else {
      failureCallback('Request failed', xhr);
    }
  };

  xhr.onerror = function () {
    failureCallback('Request failed', xhr);
  };

  xhr.send(body);
}

function injectQueryStringParams(url, params) {
  return url + (url.indexOf('?') === -1 ? '?' : '&') + encodeParams(params);
}

function encodeParams(params) {
  var parts = [];

  for (var key in params) {
    parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
  }

  return parts.join('&');
}

var eventSourceDef$2 = {
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      // short form
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams,
      startParam: raw.startParam,
      endParam: raw.endParam,
      timeZoneParam: raw.timeZoneParam
    };
  },
  fetch: function (arg, success, failure) {
    var meta = arg.eventSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {
      success({
        rawEvents: rawEvents,
        xhr: xhr
      });
    }, function (errorMessage, xhr) {
      failure({
        message: errorMessage,
        xhr: xhr
      });
    });
  }
};
var JsonFeedEventSourcePlugin = createPlugin({
  eventSourceDefs: [eventSourceDef$2]
});

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};
  startParam = meta.startParam;

  if (startParam == null) {
    startParam = calendar.opt('startParam');
  }

  endParam = meta.endParam;

  if (endParam == null) {
    endParam = calendar.opt('endParam');
  }

  timeZoneParam = meta.timeZoneParam;

  if (timeZoneParam == null) {
    timeZoneParam = calendar.opt('timeZoneParam');
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  params[startParam] = dateEnv.formatIso(range.start);
  params[endParam] = dateEnv.formatIso(range.end);

  if (dateEnv.timeZone !== 'local') {
    params[timeZoneParam] = dateEnv.timeZone;
  }

  return params;
}

var recurring = {
  parse: function (rawEvent, leftoverProps, dateEnv) {
    var createMarker = dateEnv.createMarker.bind(dateEnv);
    var processors = {
      daysOfWeek: null,
      startTime: createDuration,
      endTime: createDuration,
      startRecur: createMarker,
      endRecur: createMarker
    };
    var props = refineProps(rawEvent, processors, {}, leftoverProps);
    var anyValid = false;

    for (var propName in props) {
      if (props[propName] != null) {
        anyValid = true;
        break;
      }
    }

    if (anyValid) {
      var duration = null;

      if ('duration' in leftoverProps) {
        duration = createDuration(leftoverProps.duration);
        delete leftoverProps.duration;
      }

      if (!duration && props.startTime && props.endTime) {
        duration = subtractDurations(props.endTime, props.startTime);
      }

      return {
        allDayGuess: Boolean(!props.startTime && !props.endTime),
        duration: duration,
        typeData: props // doesn't need endTime anymore but oh well

      };
    }

    return null;
  },
  expand: function (typeData, framingRange, dateEnv) {
    var clippedFramingRange = intersectRanges(framingRange, {
      start: typeData.startRecur,
      end: typeData.endRecur
    });

    if (clippedFramingRange) {
      return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);
    } else {
      return [];
    }
  }
};
var SimpleRecurrencePlugin = createPlugin({
  recurringTypes: [recurring]
});

function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {
  var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;
  var dayMarker = startOfDay(framingRange.start);
  var endMarker = framingRange.end;
  var instanceStarts = [];

  while (dayMarker < endMarker) {
    var instanceStart // if everyday, or this particular day-of-week
    = void 0; // if everyday, or this particular day-of-week

    if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
      if (startTime) {
        instanceStart = dateEnv.add(dayMarker, startTime);
      } else {
        instanceStart = dayMarker;
      }

      instanceStarts.push(instanceStart);
    }

    dayMarker = addDays(dayMarker, 1);
  }

  return instanceStarts;
}

var DefaultOptionChangeHandlers = createPlugin({
  optionChangeHandlers: {
    events: function (events, calendar, deepEqual) {
      handleEventSources([events], calendar, deepEqual);
    },
    eventSources: handleEventSources,
    plugins: handlePlugins
  }
});

function handleEventSources(inputs, calendar, deepEqual) {
  var unfoundSources = hashValuesToArray(calendar.state.eventSources);
  var newInputs = [];

  for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
    var input = inputs_1[_i];
    var inputFound = false;

    for (var i = 0; i < unfoundSources.length; i++) {
      if (deepEqual(unfoundSources[i]._raw, input)) {
        unfoundSources.splice(i, 1); // delete

        inputFound = true;
        break;
      }
    }

    if (!inputFound) {
      newInputs.push(input);
    }
  }

  for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {
    var unfoundSource = unfoundSources_1[_a];
    calendar.dispatch({
      type: 'REMOVE_EVENT_SOURCE',
      sourceId: unfoundSource.sourceId
    });
  }

  for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {
    var newInput = newInputs_1[_b];
    calendar.addEventSource(newInput);
  }
} // shortcoming: won't remove plugins


function handlePlugins(inputs, calendar) {
  calendar.addPluginInputs(inputs); // will gracefully handle duplicates
}

var config = {}; // TODO: make these options

var globalDefaults = {
  defaultRangeSeparator: ' - ',
  titleRangeSeparator: ' \u2013 ',
  defaultTimedEventDuration: '01:00:00',
  defaultAllDayEventDuration: {
    day: 1
  },
  forceEventDuration: false,
  nextDayThreshold: '00:00:00',
  // display
  columnHeader: true,
  defaultView: '',
  aspectRatio: 1.35,
  header: {
    left: 'title',
    center: '',
    right: 'today prev,next'
  },
  weekends: true,
  weekNumbers: false,
  weekNumberCalculation: 'local',
  editable: false,
  // nowIndicator: false,
  scrollTime: '06:00:00',
  minTime: '00:00:00',
  maxTime: '24:00:00',
  showNonCurrentDates: true,
  // event ajax
  lazyFetching: true,
  startParam: 'start',
  endParam: 'end',
  timeZoneParam: 'timeZone',
  timeZone: 'local',
  // allDayDefault: undefined,
  // locale
  locales: [],
  locale: '',
  // dir: will get this from the default locale
  // buttonIcons: null,
  // allows setting a min-height to the event segment to prevent short events overlapping each other
  timeGridEventMinHeight: 0,
  themeSystem: 'standard',
  // eventResizableFromStart: false,
  dragRevertDuration: 500,
  dragScroll: true,
  allDayMaintainDuration: false,
  // selectable: false,
  unselectAuto: true,
  // selectMinDistance: 0,
  dropAccept: '*',
  eventOrder: 'start,-duration,allDay,title',
  // ^ if start tie, longer events go before shorter. final tie-breaker is title text
  // rerenderDelay: null,
  eventLimit: false,
  eventLimitClick: 'popover',
  dayPopoverFormat: {
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  },
  handleWindowResize: true,
  windowResizeDelay: 100,
  longPressDelay: 1000,
  eventDragMinDistance: 5 // only applies to mouse

};
var rtlDefaults = {
  header: {
    left: 'next,prev today',
    center: '',
    right: 'title'
  },
  buttonIcons: {
    // TODO: make RTL support the responibility of the theme
    prev: 'fc-icon-chevron-right',
    next: 'fc-icon-chevron-left',
    prevYear: 'fc-icon-chevrons-right',
    nextYear: 'fc-icon-chevrons-left'
  }
};
var complexOptions = ['header', 'footer', 'buttonText', 'buttonIcons']; // Merges an array of option objects into a single object

function mergeOptions(optionObjs) {
  return mergeProps(optionObjs, complexOptions);
} // TODO: move this stuff to a "plugin"-related file...


var INTERNAL_PLUGINS = [ArrayEventSourcePlugin, FuncEventSourcePlugin, JsonFeedEventSourcePlugin, SimpleRecurrencePlugin, DefaultOptionChangeHandlers];

function refinePluginDefs(pluginInputs) {
  var plugins = [];

  for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {
    var pluginInput = pluginInputs_1[_i];

    if (typeof pluginInput === 'string') {
      var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);

      if (!window[globalName]) {
        console.warn('Plugin file not loaded for ' + pluginInput);
      } else {
        plugins.push(window[globalName].default); // is an ES6 module
      }
    } else {
      plugins.push(pluginInput);
    }
  }

  return INTERNAL_PLUGINS.concat(plugins);
}

var RAW_EN_LOCALE = {
  code: 'en',
  week: {
    dow: 0,
    doy: 4 // 4 days need to be within the year to be considered the first week

  },
  dir: 'ltr',
  buttonText: {
    prev: 'prev',
    next: 'next',
    prevYear: 'prev year',
    nextYear: 'next year',
    year: 'year',
    today: 'today',
    month: 'month',
    week: 'week',
    day: 'day',
    list: 'list'
  },
  weekLabel: 'W',
  allDayText: 'all-day',
  eventLimitText: 'more',
  noEventsMessage: 'No events to display'
};

function parseRawLocales(explicitRawLocales) {
  var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
  var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js

  var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless

  var allRawLocales = globalArray.concat( // globalArray is low prio
  hashValuesToArray(globalObject), // medium prio
  explicitRawLocales // highest prio
  );
  var rawLocaleMap = {
    en: RAW_EN_LOCALE // necessary?

  };

  for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {
    var rawLocale = allRawLocales_1[_i];
    rawLocaleMap[rawLocale.code] = rawLocale;
  }

  return {
    map: rawLocaleMap,
    defaultCode: defaultCode
  };
}

function buildLocale(inputSingular, available) {
  if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {
    return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);
  } else {
    return queryLocale(inputSingular, available);
  }
}

function queryLocale(codeArg, available) {
  var codes = [].concat(codeArg || []); // will convert to array

  var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
  return parseLocale(codeArg, codes, raw);
}

function queryRawLocale(codes, available) {
  for (var i = 0; i < codes.length; i++) {
    var parts = codes[i].toLocaleLowerCase().split('-');

    for (var j = parts.length; j > 0; j--) {
      var simpleId = parts.slice(0, j).join('-');

      if (available[simpleId]) {
        return available[simpleId];
      }
    }
  }

  return null;
}

function parseLocale(codeArg, codes, raw) {
  var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);
  delete merged.code; // don't want this part of the options

  var week = merged.week;
  delete merged.week;
  return {
    codeArg: codeArg,
    codes: codes,
    week: week,
    simpleNumberFormat: new Intl.NumberFormat(codeArg),
    options: merged
  };
}

var OptionsManager =
/** @class */
function () {
  function OptionsManager(overrides) {
    this.overrides = __assign({}, overrides); // make a copy

    this.dynamicOverrides = {};
    this.compute();
  }

  OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {
    var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;

    __assign(overrideHash, updates);

    for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
      var propName = removals_1[_i];
      delete overrideHash[propName];
    }

    this.compute();
  }; // Computes the flattened options hash for the calendar and assigns to `this.options`.
  // Assumes this.overrides and this.dynamicOverrides have already been initialized.


  OptionsManager.prototype.compute = function () {
    // TODO: not a very efficient system
    var locales = firstDefined( // explicit locale option given?
    this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);
    var locale = firstDefined( // explicit locales option given?
    this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);
    var available = parseRawLocales(locales);
    var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;
    var dir = firstDefined( // based on options computed so far, is direction RTL?
    this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);
    var dirDefaults = dir === 'rtl' ? rtlDefaults : {};
    this.dirDefaults = dirDefaults;
    this.localeDefaults = localeDefaults;
    this.computed = mergeOptions([globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);
  };

  return OptionsManager;
}();

var calendarSystemClassMap = {};

function registerCalendarSystem(name, theClass) {
  calendarSystemClassMap[name] = theClass;
}

function createCalendarSystem(name) {
  return new calendarSystemClassMap[name]();
}

var GregorianCalendarSystem =
/** @class */
function () {
  function GregorianCalendarSystem() {}

  GregorianCalendarSystem.prototype.getMarkerYear = function (d) {
    return d.getUTCFullYear();
  };

  GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {
    return d.getUTCMonth();
  };

  GregorianCalendarSystem.prototype.getMarkerDay = function (d) {
    return d.getUTCDate();
  };

  GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {
    return arrayToUtcDate(arr);
  };

  GregorianCalendarSystem.prototype.markerToArray = function (marker) {
    return dateToUtcArray(marker);
  };

  return GregorianCalendarSystem;
}();

registerCalendarSystem('gregory', GregorianCalendarSystem);
var ISO_RE = /^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;

function parse(str) {
  var m = ISO_RE.exec(str);

  if (m) {
    var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));

    if (isValidDate(marker)) {
      var timeZoneOffset = null;

      if (m[13]) {
        timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
      }

      return {
        marker: marker,
        isTimeUnspecified: !m[6],
        timeZoneOffset: timeZoneOffset
      };
    }
  }

  return null;
}

var DateEnv =
/** @class */
function () {
  function DateEnv(settings) {
    var timeZone = this.timeZone = settings.timeZone;
    var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';

    if (settings.namedTimeZoneImpl && isNamedTimeZone) {
      this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
    }

    this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
    this.calendarSystem = createCalendarSystem(settings.calendarSystem);
    this.locale = settings.locale;
    this.weekDow = settings.locale.week.dow;
    this.weekDoy = settings.locale.week.doy;

    if (settings.weekNumberCalculation === 'ISO') {
      this.weekDow = 1;
      this.weekDoy = 4;
    }

    if (typeof settings.firstDay === 'number') {
      this.weekDow = settings.firstDay;
    }

    if (typeof settings.weekNumberCalculation === 'function') {
      this.weekNumberFunc = settings.weekNumberCalculation;
    }

    this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;
    this.cmdFormatter = settings.cmdFormatter;
  } // Creating / Parsing


  DateEnv.prototype.createMarker = function (input) {
    var meta = this.createMarkerMeta(input);

    if (meta === null) {
      return null;
    }

    return meta.marker;
  };

  DateEnv.prototype.createNowMarker = function () {
    if (this.canComputeOffset) {
      return this.timestampToMarker(new Date().valueOf());
    } else {
      // if we can't compute the current date val for a timezone,
      // better to give the current local date vals than UTC
      return arrayToUtcDate(dateToLocalArray(new Date()));
    }
  };

  DateEnv.prototype.createMarkerMeta = function (input) {
    if (typeof input === 'string') {
      return this.parse(input);
    }

    var marker = null;

    if (typeof input === 'number') {
      marker = this.timestampToMarker(input);
    } else if (input instanceof Date) {
      input = input.valueOf();

      if (!isNaN(input)) {
        marker = this.timestampToMarker(input);
      }
    } else if (Array.isArray(input)) {
      marker = arrayToUtcDate(input);
    }

    if (marker === null || !isValidDate(marker)) {
      return null;
    }

    return {
      marker: marker,
      isTimeUnspecified: false,
      forcedTzo: null
    };
  };

  DateEnv.prototype.parse = function (s) {
    var parts = parse(s);

    if (parts === null) {
      return null;
    }

    var marker = parts.marker;
    var forcedTzo = null;

    if (parts.timeZoneOffset !== null) {
      if (this.canComputeOffset) {
        marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);
      } else {
        forcedTzo = parts.timeZoneOffset;
      }
    }

    return {
      marker: marker,
      isTimeUnspecified: parts.isTimeUnspecified,
      forcedTzo: forcedTzo
    };
  }; // Accessors


  DateEnv.prototype.getYear = function (marker) {
    return this.calendarSystem.getMarkerYear(marker);
  };

  DateEnv.prototype.getMonth = function (marker) {
    return this.calendarSystem.getMarkerMonth(marker);
  }; // Adding / Subtracting


  DateEnv.prototype.add = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += dur.years;
    a[1] += dur.months;
    a[2] += dur.days;
    a[6] += dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.subtract = function (marker, dur) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] -= dur.years;
    a[1] -= dur.months;
    a[2] -= dur.days;
    a[6] -= dur.milliseconds;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addYears = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[0] += n;
    return this.calendarSystem.arrayToMarker(a);
  };

  DateEnv.prototype.addMonths = function (marker, n) {
    var a = this.calendarSystem.markerToArray(marker);
    a[1] += n;
    return this.calendarSystem.arrayToMarker(a);
  }; // Diffing Whole Units


  DateEnv.prototype.diffWholeYears = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {
      return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
    }

    return null;
  };

  DateEnv.prototype.diffWholeMonths = function (m0, m1) {
    var calendarSystem = this.calendarSystem;

    if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {
      return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
    }

    return null;
  }; // Range / Duration


  DateEnv.prototype.greatestWholeUnit = function (m0, m1) {
    var n = this.diffWholeYears(m0, m1);

    if (n !== null) {
      return {
        unit: 'year',
        value: n
      };
    }

    n = this.diffWholeMonths(m0, m1);

    if (n !== null) {
      return {
        unit: 'month',
        value: n
      };
    }

    n = diffWholeWeeks(m0, m1);

    if (n !== null) {
      return {
        unit: 'week',
        value: n
      };
    }

    n = diffWholeDays(m0, m1);

    if (n !== null) {
      return {
        unit: 'day',
        value: n
      };
    }

    n = diffHours(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'hour',
        value: n
      };
    }

    n = diffMinutes(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'minute',
        value: n
      };
    }

    n = diffSeconds(m0, m1);

    if (isInt(n)) {
      return {
        unit: 'second',
        value: n
      };
    }

    return {
      unit: 'millisecond',
      value: m1.valueOf() - m0.valueOf()
    };
  };

  DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {
    // TODO: can use greatestWholeUnit
    var diff;

    if (d.years) {
      diff = this.diffWholeYears(m0, m1);

      if (diff !== null) {
        return diff / asRoughYears(d);
      }
    }

    if (d.months) {
      diff = this.diffWholeMonths(m0, m1);

      if (diff !== null) {
        return diff / asRoughMonths(d);
      }
    }

    if (d.days) {
      diff = diffWholeDays(m0, m1);

      if (diff !== null) {
        return diff / asRoughDays(d);
      }
    }

    return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
  }; // Start-Of


  DateEnv.prototype.startOf = function (m, unit) {
    if (unit === 'year') {
      return this.startOfYear(m);
    } else if (unit === 'month') {
      return this.startOfMonth(m);
    } else if (unit === 'week') {
      return this.startOfWeek(m);
    } else if (unit === 'day') {
      return startOfDay(m);
    } else if (unit === 'hour') {
      return startOfHour(m);
    } else if (unit === 'minute') {
      return startOfMinute(m);
    } else if (unit === 'second') {
      return startOfSecond(m);
    }
  };

  DateEnv.prototype.startOfYear = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);
  };

  DateEnv.prototype.startOfMonth = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);
  };

  DateEnv.prototype.startOfWeek = function (m) {
    return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);
  }; // Week Number


  DateEnv.prototype.computeWeekNumber = function (marker) {
    if (this.weekNumberFunc) {
      return this.weekNumberFunc(this.toDate(marker));
    } else {
      return weekOfYear(marker, this.weekDow, this.weekDoy);
    }
  }; // TODO: choke on timeZoneName: long


  DateEnv.prototype.format = function (marker, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    return formatter.format({
      marker: marker,
      timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
    }, this);
  };

  DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {
    if (dateOptions === void 0) {
      dateOptions = {};
    }

    if (dateOptions.isEndExclusive) {
      end = addMs(end, -1);
    }

    return formatter.formatRange({
      marker: start,
      timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
    }, {
      marker: end,
      timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
    }, this);
  };

  DateEnv.prototype.formatIso = function (marker, extraOptions) {
    if (extraOptions === void 0) {
      extraOptions = {};
    }

    var timeZoneOffset = null;

    if (!extraOptions.omitTimeZoneOffset) {
      if (extraOptions.forcedTzo != null) {
        timeZoneOffset = extraOptions.forcedTzo;
      } else {
        timeZoneOffset = this.offsetForMarker(marker);
      }
    }

    return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
  }; // TimeZone


  DateEnv.prototype.timestampToMarker = function (ms) {
    if (this.timeZone === 'local') {
      return arrayToUtcDate(dateToLocalArray(new Date(ms)));
    } else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {
      return new Date(ms);
    } else {
      return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
    }
  };

  DateEnv.prototype.offsetForMarker = function (m) {
    if (this.timeZone === 'local') {
      return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
    } else if (this.timeZone === 'UTC') {
      return 0;
    } else if (this.namedTimeZoneImpl) {
      return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
    }

    return null;
  }; // Conversion


  DateEnv.prototype.toDate = function (m, forcedTzo) {
    if (this.timeZone === 'local') {
      return arrayToLocalDate(dateToUtcArray(m));
    } else if (this.timeZone === 'UTC') {
      return new Date(m.valueOf()); // make sure it's a copy
    } else if (!this.namedTimeZoneImpl) {
      return new Date(m.valueOf() - (forcedTzo || 0));
    } else {
      return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms
      );
    }
  };

  return DateEnv;
}();

var SIMPLE_SOURCE_PROPS = {
  id: String,
  allDayDefault: Boolean,
  eventDataTransform: Function,
  success: Function,
  failure: Function
};
var uid$2 = 0;

function doesSourceNeedRange(eventSource, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;
  return !defs[eventSource.sourceDefId].ignoreRange;
}

function parseEventSource(raw, calendar) {
  var defs = calendar.pluginSystem.hooks.eventSourceDefs;

  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(raw);

    if (meta) {
      var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);
      res._raw = raw;
      return res;
    }
  }

  return null;
}

function parseEventSourceProps(raw, meta, sourceDefId, calendar) {
  var leftovers0 = {};
  var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  props.publicId = String(raw.id || '');
  props.sourceId = String(uid$2++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.ui = ui;
  props.extendedProps = leftovers1;
  return props;
}

function reduceEventSources(eventSources, action, dateProfile, calendar) {
  switch (action.type) {
    case 'ADD_EVENT_SOURCES':
      // already parsed
      return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);

    case 'REMOVE_EVENT_SOURCE':
      return removeSource(eventSources, action.sourceId);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      if (dateProfile) {
        return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);
      } else {
        return eventSources;
      }

    case 'FETCH_EVENT_SOURCES':
    case 'CHANGE_TIMEZONE':
      return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);

    case 'RECEIVE_EVENTS':
    case 'RECEIVE_EVENT_ERROR':
      return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);

    case 'REMOVE_ALL_EVENT_SOURCES':
      return {};

    default:
      return eventSources;
  }
}

var uid$3 = 0;

function addSources(eventSourceHash, sources, fetchRange, calendar) {
  var hash = {};

  for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
    var source = sources_1[_i];
    hash[source.sourceId] = source;
  }

  if (fetchRange) {
    hash = fetchDirtySources(hash, fetchRange, calendar);
  }

  return __assign({}, eventSourceHash, hash);
}

function removeSource(eventSourceHash, sourceId) {
  return filterHash(eventSourceHash, function (eventSource) {
    return eventSource.sourceId !== sourceId;
  });
}

function fetchDirtySources(sourceHash, fetchRange, calendar) {
  return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {
    return isSourceDirty(eventSource, fetchRange, calendar);
  }), fetchRange, calendar);
}

function isSourceDirty(eventSource, fetchRange, calendar) {
  if (!doesSourceNeedRange(eventSource, calendar)) {
    return !eventSource.latestFetchId;
  } else {
    return !calendar.opt('lazyFetching') || !eventSource.fetchRange || fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
  }
}

function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {
  var nextSources = {};

  for (var sourceId in prevSources) {
    var source = prevSources[sourceId];

    if (sourceIdHash[sourceId]) {
      nextSources[sourceId] = fetchSource(source, fetchRange, calendar);
    } else {
      nextSources[sourceId] = source;
    }
  }

  return nextSources;
}

function fetchSource(eventSource, fetchRange, calendar) {
  var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];
  var fetchId = String(uid$3++);
  sourceDef.fetch({
    eventSource: eventSource,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    var rawEvents = res.rawEvents;
    var calSuccess = calendar.opt('eventSourceSuccess');
    var calSuccessRes;
    var sourceSuccessRes;

    if (eventSource.success) {
      sourceSuccessRes = eventSource.success(rawEvents, res.xhr);
    }

    if (calSuccess) {
      calSuccessRes = calSuccess(rawEvents, res.xhr);
    }

    rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;
    calendar.dispatch({
      type: 'RECEIVE_EVENTS',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawEvents: rawEvents
    });
  }, function (error) {
    var callFailure = calendar.opt('eventSourceFailure');
    console.warn(error.message, error);

    if (eventSource.failure) {
      eventSource.failure(error);
    }

    if (callFailure) {
      callFailure(error);
    }

    calendar.dispatch({
      type: 'RECEIVE_EVENT_ERROR',
      sourceId: eventSource.sourceId,
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, eventSource, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
  var _a;

  var eventSource = sourceHash[sourceId];

  if (eventSource && // not already removed
  fetchId === eventSource.latestFetchId) {
    return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, {
      isFetching: false,
      fetchRange: fetchRange
    }), _a));
  }

  return sourceHash;
}

function excludeStaticSources(eventSources, calendar) {
  return filterHash(eventSources, function (eventSource) {
    return doesSourceNeedRange(eventSource, calendar);
  });
}

var DateProfileGenerator =
/** @class */
function () {
  function DateProfileGenerator(viewSpec, calendar) {
    this.viewSpec = viewSpec;
    this.options = viewSpec.options;
    this.dateEnv = calendar.dateEnv;
    this.calendar = calendar;
    this.initHiddenDays();
  }
  /* Date Range Computation
  ------------------------------------------------------------------------------------------------------------------*/
  // Builds a structure with info about what the dates/ranges will be for the "prev" view.


  DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(prevDate, -1);
  }; // Builds a structure with info about what the dates/ranges will be for the "next" view.


  DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {
    var dateEnv = this.dateEnv;
    var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
    currentDateProfile.dateIncrement);
    return this.build(nextDate, 1);
  }; // Builds a structure holding dates/ranges for rendering around the given date.
  // Optional direction param indicates whether the date is being incremented/decremented
  // from its previous value. decremented = -1, incremented = 1 (default).


  DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {
    if (forceToValid === void 0) {
      forceToValid = false;
    }

    var validRange;
    var minTime = null;
    var maxTime = null;
    var currentInfo;
    var isRangeAllDay;
    var renderRange;
    var activeRange;
    var isValid;
    validRange = this.buildValidRange();
    validRange = this.trimHiddenDays(validRange);

    if (forceToValid) {
      currentDate = constrainMarkerToRange(currentDate, validRange);
    }

    currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
    isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
    renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
    renderRange = this.trimHiddenDays(renderRange);
    activeRange = renderRange;

    if (!this.options.showNonCurrentDates) {
      activeRange = intersectRanges(activeRange, currentInfo.range);
    }

    minTime = createDuration(this.options.minTime);
    maxTime = createDuration(this.options.maxTime);
    activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);
    activeRange = intersectRanges(activeRange, validRange); // might return null
    // it's invalid if the originally requested date is not contained,
    // or if the range is completely outside of the valid range.

    isValid = rangesIntersect(currentInfo.range, validRange);
    return {
      // constraint for where prev/next operations can go and where events can be dragged/resized to.
      // an object with optional start and end properties.
      validRange: validRange,
      // range the view is formally responsible for.
      // for example, a month view might have 1st-31st, excluding padded dates
      currentRange: currentInfo.range,
      // name of largest unit being displayed, like "month" or "week"
      currentRangeUnit: currentInfo.unit,
      isRangeAllDay: isRangeAllDay,
      // dates that display events and accept drag-n-drop
      // will be `null` if no dates accept events
      activeRange: activeRange,
      // date range with a rendered skeleton
      // includes not-active days that need some sort of DOM
      renderRange: renderRange,
      // Duration object that denotes the first visible time of any given day
      minTime: minTime,
      // Duration object that denotes the exclusive visible end time of any given day
      maxTime: maxTime,
      isValid: isValid,
      // how far the current date will move for a prev/next operation
      dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^

    };
  }; // Builds an object with optional start/end properties.
  // Indicates the minimum/maximum dates to display.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildValidRange = function () {
    return this.getRangeOption('validRange', this.calendar.getNow()) || {
      start: null,
      end: null
    }; // completely open-ended
  }; // Builds a structure with info about the "current" range, the range that is
  // highlighted as being the current month for example.
  // See build() for a description of `direction`.
  // Guaranteed to have `range` and `unit` properties. `duration` is optional.


  DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
    var _a = this,
        viewSpec = _a.viewSpec,
        dateEnv = _a.dateEnv;

    var duration = null;
    var unit = null;
    var range = null;
    var dayCount;

    if (viewSpec.duration) {
      duration = viewSpec.duration;
      unit = viewSpec.durationUnit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    } else if (dayCount = this.options.dayCount) {
      unit = 'day';
      range = this.buildRangeFromDayCount(date, direction, dayCount);
    } else if (range = this.buildCustomVisibleRange(date)) {
      unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;
    } else {
      duration = this.getFallbackDuration();
      unit = greatestDurationDenominator(duration).unit;
      range = this.buildRangeFromDuration(date, direction, duration, unit);
    }

    return {
      duration: duration,
      unit: unit,
      range: range
    };
  };

  DateProfileGenerator.prototype.getFallbackDuration = function () {
    return createDuration({
      day: 1
    });
  }; // Returns a new activeRange to have time values (un-ambiguate)
  // minTime or maxTime causes the range to expand.


  DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {
    var dateEnv = this.dateEnv;
    var start = range.start;
    var end = range.end;

    if (this.viewSpec.class.prototype.usesMinMaxTime) {
      // expand active range if minTime is negative (why not when positive?)
      if (asRoughDays(minTime) < 0) {
        start = startOfDay(start); // necessary?

        start = dateEnv.add(start, minTime);
      } // expand active range if maxTime is beyond one day (why not when positive?)


      if (asRoughDays(maxTime) > 1) {
        end = startOfDay(end); // necessary?

        end = addDays(end, -1);
        end = dateEnv.add(end, maxTime);
      }
    }

    return {
      start: start,
      end: end
    };
  }; // Builds the "current" range when it is specified as an explicit duration.
  // `unit` is the already-computed greatestDurationDenominator unit of duration.


  DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
    var dateEnv = this.dateEnv;
    var alignment = this.options.dateAlignment;
    var dateIncrementInput;
    var dateIncrementDuration;
    var start;
    var end;
    var res; // compute what the alignment should be

    if (!alignment) {
      dateIncrementInput = this.options.dateIncrement;

      if (dateIncrementInput) {
        dateIncrementDuration = createDuration(dateIncrementInput); // use the smaller of the two units

        if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {
          alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;
        } else {
          alignment = unit;
        }
      } else {
        alignment = unit;
      }
    } // if the view displays a single day or smaller


    if (asRoughDays(duration) <= 1) {
      if (this.isHiddenDay(start)) {
        start = this.skipHiddenDays(start, direction);
        start = startOfDay(start);
      }
    }

    function computeRes() {
      start = dateEnv.startOf(date, alignment);
      end = dateEnv.add(start, duration);
      res = {
        start: start,
        end: end
      };
    }

    computeRes(); // if range is completely enveloped by hidden days, go past the hidden days

    if (!this.trimHiddenDays(res)) {
      date = this.skipHiddenDays(date, direction);
      computeRes();
    }

    return res;
  }; // Builds the "current" range when a dayCount is specified.


  DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
    var dateEnv = this.dateEnv;
    var customAlignment = this.options.dateAlignment;
    var runningCount = 0;
    var start = date;
    var end;

    if (customAlignment) {
      start = dateEnv.startOf(start, customAlignment);
    }

    start = startOfDay(start);
    start = this.skipHiddenDays(start, direction);
    end = start;

    do {
      end = addDays(end, 1);

      if (!this.isHiddenDay(end)) {
        runningCount++;
      }
    } while (runningCount < dayCount);

    return {
      start: start,
      end: end
    };
  }; // Builds a normalized range object for the "visible" range,
  // which is a way to define the currentRange and activeRange at the same time.


  DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
    var dateEnv = this.dateEnv;
    var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));

    if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {
      return null;
    }

    return visibleRange;
  }; // Computes the range that will represent the element/cells for *rendering*,
  // but which may have voided days/times.
  // not responsible for trimming hidden days.


  DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
    return currentRange;
  }; // Compute the duration value that should be added/substracted to the current date
  // when a prev/next operation happens.


  DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
    var dateIncrementInput = this.options.dateIncrement;
    var customAlignment;

    if (dateIncrementInput) {
      return createDuration(dateIncrementInput);
    } else if (customAlignment = this.options.dateAlignment) {
      return createDuration(1, customAlignment);
    } else if (fallback) {
      return fallback;
    } else {
      return createDuration({
        days: 1
      });
    }
  }; // Arguments after name will be forwarded to a hypothetical function value
  // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
  // Always clone your objects if you fear mutation.


  DateProfileGenerator.prototype.getRangeOption = function (name) {
    var otherArgs = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      otherArgs[_i - 1] = arguments[_i];
    }

    var val = this.options[name];

    if (typeof val === 'function') {
      val = val.apply(null, otherArgs);
    }

    if (val) {
      val = parseRange(val, this.dateEnv);
    }

    if (val) {
      val = computeVisibleDayRange(val);
    }

    return val;
  };
  /* Hidden Days
  ------------------------------------------------------------------------------------------------------------------*/
  // Initializes internal variables related to calculating hidden days-of-week


  DateProfileGenerator.prototype.initHiddenDays = function () {
    var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden

    var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)

    var dayCnt = 0;
    var i;

    if (this.options.weekends === false) {
      hiddenDays.push(0, 6); // 0=sunday, 6=saturday
    }

    for (i = 0; i < 7; i++) {
      if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {
        dayCnt++;
      }
    }

    if (!dayCnt) {
      throw new Error('invalid hiddenDays'); // all days were hidden? bad.
    }

    this.isHiddenDayHash = isHiddenDayHash;
  }; // Remove days from the beginning and end of the range that are computed as hidden.
  // If the whole range is trimmed off, returns null


  DateProfileGenerator.prototype.trimHiddenDays = function (range) {
    var start = range.start;
    var end = range.end;

    if (start) {
      start = this.skipHiddenDays(start);
    }

    if (end) {
      end = this.skipHiddenDays(end, -1, true);
    }

    if (start == null || end == null || start < end) {
      return {
        start: start,
        end: end
      };
    }

    return null;
  }; // Is the current day hidden?
  // `day` is a day-of-week index (0-6), or a Date (used for UTC)


  DateProfileGenerator.prototype.isHiddenDay = function (day) {
    if (day instanceof Date) {
      day = day.getUTCDay();
    }

    return this.isHiddenDayHash[day];
  }; // Incrementing the current day until it is no longer a hidden day, returning a copy.
  // DOES NOT CONSIDER validRange!
  // If the initial value of `date` is not a hidden day, don't do anything.
  // Pass `isExclusive` as `true` if you are dealing with an end date.
  // `inc` defaults to `1` (increment one day forward each time)


  DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {
    if (inc === void 0) {
      inc = 1;
    }

    if (isExclusive === void 0) {
      isExclusive = false;
    }

    while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {
      date = addDays(date, inc);
    }

    return date;
  };

  return DateProfileGenerator;
}(); // TODO: find a way to avoid comparing DateProfiles. it's tedious


function isDateProfilesEqual(p0, p1) {
  return rangesEqual(p0.validRange, p1.validRange) && rangesEqual(p0.activeRange, p1.activeRange) && rangesEqual(p0.renderRange, p1.renderRange) && durationsEqual(p0.minTime, p1.minTime) && durationsEqual(p0.maxTime, p1.maxTime);
  /*
  TODO: compare more?
    currentRange: DateRange
    currentRangeUnit: string
    isRangeAllDay: boolean
    isValid: boolean
    dateIncrement: Duration
  */
}

function reduce(state, action, calendar) {
  var viewType = reduceViewType(state.viewType, action);
  var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);
  var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);

  var nextState = __assign({}, state, {
    viewType: viewType,
    dateProfile: dateProfile,
    currentDate: reduceCurrentDate(state.currentDate, action, dateProfile),
    eventSources: eventSources,
    eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar),
    dateSelection: reduceDateSelection(state.dateSelection, action, calendar),
    eventSelection: reduceSelectedEvent(state.eventSelection, action),
    eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar),
    eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar),
    eventSourceLoadingLevel: computeLoadingLevel(eventSources),
    loadingLevel: computeLoadingLevel(eventSources)
  });

  for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {
    var reducerFunc = _a[_i];
    nextState = reducerFunc(nextState, action, calendar);
  } // console.log(action.type, nextState)


  return nextState;
}

function reduceViewType(currentViewType, action) {
  switch (action.type) {
    case 'SET_VIEW_TYPE':
      return action.viewType;

    default:
      return currentViewType;
  }
}

function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {
  var newDateProfile;

  switch (action.type) {
    case 'PREV':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);
      break;

    case 'NEXT':
      newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);
      break;

    case 'SET_DATE':
      if (!currentDateProfile.activeRange || !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {
        newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid
        );
      }

      break;

    case 'SET_VIEW_TYPE':
      var generator = calendar.dateProfileGenerators[viewType];

      if (!generator) {
        throw new Error(viewType ? 'The FullCalendar view "' + viewType + '" does not exist. Make sure your plugins are loaded correctly.' : 'No available FullCalendar view plugins.');
      }

      newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid
      );
      break;
  }

  if (newDateProfile && newDateProfile.isValid && !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {
    return newDateProfile;
  } else {
    return currentDateProfile;
  }
}

function reduceCurrentDate(currentDate, action, dateProfile) {
  switch (action.type) {
    case 'PREV':
    case 'NEXT':
      if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {
        return dateProfile.currentRange.start;
      } else {
        return currentDate;
      }

    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      var newDate = action.dateMarker || currentDate;

      if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {
        return dateProfile.currentRange.start;
      } else {
        return newDate;
      }

    default:
      return currentDate;
  }
}

function reduceDateSelection(currentSelection, action, calendar) {
  switch (action.type) {
    case 'SELECT_DATES':
      return action.selection;

    case 'UNSELECT_DATES':
      return null;

    default:
      return currentSelection;
  }
}

function reduceSelectedEvent(currentInstanceId, action) {
  switch (action.type) {
    case 'SELECT_EVENT':
      return action.eventInstanceId;

    case 'UNSELECT_EVENT':
      return '';

    default:
      return currentInstanceId;
  }
}

function reduceEventDrag(currentDrag, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_DRAG':
      var newDrag = action.state;
      return {
        affectedEvents: newDrag.affectedEvents,
        mutatedEvents: newDrag.mutatedEvents,
        isEvent: newDrag.isEvent,
        origSeg: newDrag.origSeg
      };

    case 'UNSET_EVENT_DRAG':
      return null;

    default:
      return currentDrag;
  }
}

function reduceEventResize(currentResize, action, sources, calendar) {
  switch (action.type) {
    case 'SET_EVENT_RESIZE':
      var newResize = action.state;
      return {
        affectedEvents: newResize.affectedEvents,
        mutatedEvents: newResize.mutatedEvents,
        isEvent: newResize.isEvent,
        origSeg: newResize.origSeg
      };

    case 'UNSET_EVENT_RESIZE':
      return null;

    default:
      return currentResize;
  }
}

function computeLoadingLevel(eventSources) {
  var cnt = 0;

  for (var sourceId in eventSources) {
    if (eventSources[sourceId].isFetching) {
      cnt++;
    }
  }

  return cnt;
}

var STANDARD_PROPS = {
  start: null,
  end: null,
  allDay: Boolean
};

function parseDateSpan(raw, dateEnv, defaultDuration) {
  var span = parseOpenDateSpan(raw, dateEnv);
  var range = span.range;

  if (!range.start) {
    return null;
  }

  if (!range.end) {
    if (defaultDuration == null) {
      return null;
    } else {
      range.end = dateEnv.add(range.start, defaultDuration);
    }
  }

  return span;
}
/*
TODO: somehow combine with parseRange?
Will return null if the start/end props were present but parsed invalidly.
*/


function parseOpenDateSpan(raw, dateEnv) {
  var leftovers = {};
  var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);
  var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
  var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
  var allDay = standardProps.allDay;

  if (allDay == null) {
    allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
  } // use this leftover object as the selection object


  leftovers.range = {
    start: startMeta ? startMeta.marker : null,
    end: endMeta ? endMeta.marker : null
  };
  leftovers.allDay = allDay;
  return leftovers;
}

function isDateSpansEqual(span0, span1) {
  return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
} // the NON-DATE-RELATED props


function isSpanPropsEqual(span0, span1) {
  for (var propName in span1) {
    if (propName !== 'range' && propName !== 'allDay') {
      if (span0[propName] !== span1[propName]) {
        return false;
      }
    }
  } // are there any props that span0 has that span1 DOESN'T have?
  // both have range/allDay, so no need to special-case.


  for (var propName in span0) {
    if (!(propName in span1)) {
      return false;
    }
  }

  return true;
}

function buildDateSpanApi(span, dateEnv) {
  return {
    start: dateEnv.toDate(span.range.start),
    end: dateEnv.toDate(span.range.end),
    startStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    endStr: dateEnv.formatIso(span.range.end, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function buildDatePointApi(span, dateEnv) {
  return {
    date: dateEnv.toDate(span.range.start),
    dateStr: dateEnv.formatIso(span.range.start, {
      omitTime: span.allDay
    }),
    allDay: span.allDay
  };
}

function fabricateEventRange(dateSpan, eventUiBases, calendar) {
  var def = parseEventDef({
    editable: false
  }, '', // sourceId
  dateSpan.allDay, true, // hasEnd
  calendar);
  return {
    def: def,
    ui: compileEventUi(def, eventUiBases),
    instance: createEventInstance(def.defId, dateSpan.range),
    range: dateSpan.range,
    isStart: true,
    isEnd: true
  };
}

function compileViewDefs(defaultConfigs, overrideConfigs) {
  var hash = {};
  var viewType;

  for (viewType in defaultConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  for (viewType in overrideConfigs) {
    ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
  }

  return hash;
}

function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  if (hash[viewType]) {
    return hash[viewType];
  }

  var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);

  if (viewDef) {
    hash[viewType] = viewDef;
  }

  return viewDef;
}

function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
  var defaultConfig = defaultConfigs[viewType];
  var overrideConfig = overrideConfigs[viewType];

  var queryProp = function (name) {
    return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
  };

  var theClass = queryProp('class');
  var superType = queryProp('superType');

  if (!superType && theClass) {
    superType = findViewNameBySubclass(theClass, overrideConfigs) || findViewNameBySubclass(theClass, defaultConfigs);
  }

  var superDef = null;

  if (superType) {
    if (superType === viewType) {
      throw new Error('Can\'t have a custom view type that references itself');
    }

    superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
  }

  if (!theClass && superDef) {
    theClass = superDef.class;
  }

  if (!theClass) {
    return null; // don't throw a warning, might be settings for a single-unit view
  }

  return {
    type: viewType,
    class: theClass,
    defaults: __assign({}, superDef ? superDef.defaults : {}, defaultConfig ? defaultConfig.options : {}),
    overrides: __assign({}, superDef ? superDef.overrides : {}, overrideConfig ? overrideConfig.options : {})
  };
}

function findViewNameBySubclass(viewSubclass, configs) {
  var superProto = Object.getPrototypeOf(viewSubclass.prototype);

  for (var viewType in configs) {
    var parsed = configs[viewType]; // need DIRECT subclass, so instanceof won't do it

    if (parsed.class && parsed.class.prototype === superProto) {
      return viewType;
    }
  }

  return '';
}

function parseViewConfigs(inputs) {
  return mapHash(inputs, parseViewConfig);
}

var VIEW_DEF_PROPS = {
  type: String,
  class: null
};

function parseViewConfig(input) {
  if (typeof input === 'function') {
    input = {
      class: input
    };
  }

  var options = {};
  var props = refineProps(input, VIEW_DEF_PROPS, {}, options);
  return {
    superType: props.type,
    class: props.class,
    options: options
  };
}

function buildViewSpecs(defaultInputs, optionsManager) {
  var defaultConfigs = parseViewConfigs(defaultInputs);
  var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);
  var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
  return mapHash(viewDefs, function (viewDef) {
    return buildViewSpec(viewDef, overrideConfigs, optionsManager);
  });
}

function buildViewSpec(viewDef, overrideConfigs, optionsManager) {
  var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || optionsManager.dynamicOverrides.duration || optionsManager.overrides.duration;
  var duration = null;
  var durationUnit = '';
  var singleUnit = '';
  var singleUnitOverrides = {};

  if (durationInput) {
    duration = createDuration(durationInput);

    if (duration) {
      // valid?
      var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));
      durationUnit = denom.unit;

      if (denom.value === 1) {
        singleUnit = durationUnit;
        singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};
      }
    }
  }

  var queryButtonText = function (options) {
    var buttonTextMap = options.buttonText || {};
    var buttonTextKey = viewDef.defaults.buttonTextKey;

    if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {
      return buttonTextMap[buttonTextKey];
    }

    if (buttonTextMap[viewDef.type] != null) {
      return buttonTextMap[viewDef.type];
    }

    if (buttonTextMap[singleUnit] != null) {
      return buttonTextMap[singleUnit];
    }
  };

  return {
    type: viewDef.type,
    class: viewDef.class,
    duration: duration,
    durationUnit: durationUnit,
    singleUnit: singleUnit,
    options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),
    buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
    viewDef.overrides.buttonText,
    buttonTextDefault: queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || viewDef.defaults.buttonText || queryButtonText(globalDefaults) || viewDef.type // fall back to given view name

  };
}

var Toolbar =
/** @class */
function (_super) {
  __extends(Toolbar, _super);

  function Toolbar(context, extraClassName) {
    var _this = _super.call(this, context) || this;

    _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);
    _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);
    _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);
    _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);
    _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);
    _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);
    _this.el = createElement('div', {
      className: 'fc-toolbar ' + extraClassName
    });
    return _this;
  }

  Toolbar.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderLayout.unrender(); // should unrender everything else


    removeElement(this.el);
  };

  Toolbar.prototype.render = function (props) {
    this._renderLayout(props.layout);

    this._updateTitle(props.title);

    this._updateActiveButton(props.activeButton);

    this._updateToday(props.isTodayEnabled);

    this._updatePrev(props.isPrevEnabled);

    this._updateNext(props.isNextEnabled);
  };

  Toolbar.prototype.renderLayout = function (layout) {
    var el = this.el;
    this.viewsWithButtons = [];
    appendToElement(el, this.renderSection('left', layout.left));
    appendToElement(el, this.renderSection('center', layout.center));
    appendToElement(el, this.renderSection('right', layout.right));
  };

  Toolbar.prototype.unrenderLayout = function () {
    this.el.innerHTML = '';
  };

  Toolbar.prototype.renderSection = function (position, buttonStr) {
    var _this = this;

    var _a = this,
        theme = _a.theme,
        calendar = _a.calendar;

    var optionsManager = calendar.optionsManager;
    var viewSpecs = calendar.viewSpecs;
    var sectionEl = createElement('div', {
      className: 'fc-' + position
    });
    var calendarCustomButtons = optionsManager.computed.customButtons || {};
    var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
    var calendarButtonText = optionsManager.computed.buttonText || {};

    if (buttonStr) {
      buttonStr.split(' ').forEach(function (buttonGroupStr, i) {
        var groupChildren = [];
        var isOnlyButtons = true;
        var groupEl;
        buttonGroupStr.split(',').forEach(function (buttonName, j) {
          var customButtonProps;
          var viewSpec;
          var buttonClick;
          var buttonIcon; // only one of these will be set

          var buttonText; // "

          var buttonInnerHtml;
          var buttonClasses;
          var buttonEl;
          var buttonAriaAttr;

          if (buttonName === 'title') {
            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height

            isOnlyButtons = false;
          } else {
            if (customButtonProps = calendarCustomButtons[buttonName]) {
              buttonClick = function (ev) {
                if (customButtonProps.click) {
                  customButtonProps.click.call(buttonEl, ev);
                }
              };

              (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);
            } else if (viewSpec = viewSpecs[buttonName]) {
              _this.viewsWithButtons.push(buttonName);

              buttonClick = function () {
                calendar.changeView(buttonName);
              };

              (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);
            } else if (calendar[buttonName]) {
              // a calendar method
              buttonClick = function () {
                calendar[buttonName]();
              };

              (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]); //            ^ everything else is considered default
            }

            if (buttonClick) {
              buttonClasses = ['fc-' + buttonName + '-button', theme.getClass('button')];

              if (buttonText) {
                buttonInnerHtml = htmlEscape(buttonText);
                buttonAriaAttr = '';
              } else if (buttonIcon) {
                buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                buttonAriaAttr = ' aria-label="' + buttonName + '"';
              }

              buttonEl = htmlToElement( // type="button" so that it doesn't submit a form
              '<button type="button" class="' + buttonClasses.join(' ') + '"' + buttonAriaAttr + '>' + buttonInnerHtml + '</button>');
              buttonEl.addEventListener('click', buttonClick);
              groupChildren.push(buttonEl);
            }
          }
        });

        if (groupChildren.length > 1) {
          groupEl = document.createElement('div');
          var buttonGroupClassName = theme.getClass('buttonGroup');

          if (isOnlyButtons && buttonGroupClassName) {
            groupEl.classList.add(buttonGroupClassName);
          }

          appendToElement(groupEl, groupChildren);
          sectionEl.appendChild(groupEl);
        } else {
          appendToElement(sectionEl, groupChildren); // 1 or 0 children
        }
      });
    }

    return sectionEl;
  };

  Toolbar.prototype.updateToday = function (isTodayEnabled) {
    this.toggleButtonEnabled('today', isTodayEnabled);
  };

  Toolbar.prototype.updatePrev = function (isPrevEnabled) {
    this.toggleButtonEnabled('prev', isPrevEnabled);
  };

  Toolbar.prototype.updateNext = function (isNextEnabled) {
    this.toggleButtonEnabled('next', isNextEnabled);
  };

  Toolbar.prototype.updateTitle = function (text) {
    findElements(this.el, 'h2').forEach(function (titleEl) {
      titleEl.innerText = text;
    });
  };

  Toolbar.prototype.updateActiveButton = function (buttonName) {
    var className = this.theme.getClass('buttonActive');
    findElements(this.el, 'button').forEach(function (buttonEl) {
      if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {
        buttonEl.classList.add(className);
      } else {
        buttonEl.classList.remove(className);
      }
    });
  };

  Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {
    findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {
      buttonEl.disabled = !bool;
    });
  };

  return Toolbar;
}(Component);

var CalendarComponent =
/** @class */
function (_super) {
  __extends(CalendarComponent, _super);

  function CalendarComponent(context, el) {
    var _this = _super.call(this, context) || this;

    _this._renderToolbars = memoizeRendering(_this.renderToolbars);
    _this.buildViewPropTransformers = memoize(buildViewPropTransformers);
    _this.el = el;
    prependToElement(el, _this.contentEl = createElement('div', {
      className: 'fc-view-container'
    }));
    var calendar = _this.calendar;

    for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {
      var modifyViewContainer = _a[_i];
      modifyViewContainer(_this.contentEl, calendar);
    }

    _this.toggleElClassNames(true);

    _this.computeTitle = memoize(computeTitle);
    _this.parseBusinessHours = memoize(function (input) {
      return parseBusinessHours(input, _this.calendar);
    });
    return _this;
  }

  CalendarComponent.prototype.destroy = function () {
    if (this.header) {
      this.header.destroy();
    }

    if (this.footer) {
      this.footer.destroy();
    }

    if (this.view) {
      this.view.destroy();
    }

    removeElement(this.contentEl);
    this.toggleElClassNames(false);

    _super.prototype.destroy.call(this);
  };

  CalendarComponent.prototype.toggleElClassNames = function (bool) {
    var classList = this.el.classList;
    var dirClassName = 'fc-' + this.opt('dir');
    var themeClassName = this.theme.getClass('widget');

    if (bool) {
      classList.add('fc');
      classList.add(dirClassName);
      classList.add(themeClassName);
    } else {
      classList.remove('fc');
      classList.remove(dirClassName);
      classList.remove(themeClassName);
    }
  };

  CalendarComponent.prototype.render = function (props) {
    this.freezeHeight();
    var title = this.computeTitle(props.dateProfile, props.viewSpec.options);

    this._renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, props.dateProfileGenerator, title);

    this.renderView(props, title);
    this.updateSize();
    this.thawHeight();
  };

  CalendarComponent.prototype.renderToolbars = function (viewSpec, dateProfile, currentDate, dateProfileGenerator, title) {
    var headerLayout = this.opt('header');
    var footerLayout = this.opt('footer');
    var now = this.calendar.getNow();
    var todayInfo = dateProfileGenerator.build(now);
    var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);
    var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);
    var toolbarProps = {
      title: title,
      activeButton: viewSpec.type,
      isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),
      isPrevEnabled: prevInfo.isValid,
      isNextEnabled: nextInfo.isValid
    };

    if (headerLayout) {
      if (!this.header) {
        this.header = new Toolbar(this.context, 'fc-header-toolbar');
        prependToElement(this.el, this.header.el);
      }

      this.header.receiveProps(__assign({
        layout: headerLayout
      }, toolbarProps));
    } else if (this.header) {
      this.header.destroy();
      this.header = null;
    }

    if (footerLayout) {
      if (!this.footer) {
        this.footer = new Toolbar(this.context, 'fc-footer-toolbar');
        appendToElement(this.el, this.footer.el);
      }

      this.footer.receiveProps(__assign({
        layout: footerLayout
      }, toolbarProps));
    } else if (this.footer) {
      this.footer.destroy();
      this.footer = null;
    }
  };

  CalendarComponent.prototype.renderView = function (props, title) {
    var view = this.view;
    var viewSpec = props.viewSpec,
        dateProfileGenerator = props.dateProfileGenerator;

    if (!view || view.viewSpec !== viewSpec) {
      if (view) {
        view.destroy();
      }

      view = this.view = new viewSpec['class']({
        calendar: this.calendar,
        view: null,
        dateEnv: this.dateEnv,
        theme: this.theme,
        options: viewSpec.options
      }, viewSpec, dateProfileGenerator, this.contentEl);
    } else {
      view.addScroll(view.queryScroll());
    }

    view.title = title; // for the API

    var viewProps = {
      dateProfile: props.dateProfile,
      businessHours: this.parseBusinessHours(viewSpec.options.businessHours),
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    };
    var transformers = this.buildViewPropTransformers(this.calendar.pluginSystem.hooks.viewPropsTransformers);

    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
      var transformer = transformers_1[_i];

      __assign(viewProps, transformer.transform(viewProps, viewSpec, props, view));
    }

    view.receiveProps(viewProps);
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.updateSize = function (isResize) {
    if (isResize === void 0) {
      isResize = false;
    }

    var view = this.view;

    if (isResize) {
      view.addScroll(view.queryScroll());
    }

    if (isResize || this.isHeightAuto == null) {
      this.computeHeightVars();
    }

    view.updateSize(isResize, this.viewHeight, this.isHeightAuto);
    view.updateNowIndicator(); // we need to guarantee this will run after updateSize

    view.popScroll(isResize);
  };

  CalendarComponent.prototype.computeHeightVars = function () {
    var calendar = this.calendar; // yuck. need to handle dynamic options

    var heightInput = calendar.opt('height');
    var contentHeightInput = calendar.opt('contentHeight');
    this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';

    if (typeof contentHeightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = contentHeightInput;
    } else if (typeof contentHeightInput === 'function') {
      // exists and is a function
      this.viewHeight = contentHeightInput();
    } else if (typeof heightInput === 'number') {
      // exists and not 'auto'
      this.viewHeight = heightInput - this.queryToolbarsHeight();
    } else if (typeof heightInput === 'function') {
      // exists and is a function
      this.viewHeight = heightInput() - this.queryToolbarsHeight();
    } else if (heightInput === 'parent') {
      // set to height of parent element
      var parentEl = this.el.parentNode;
      this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();
    } else {
      this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width / Math.max(calendar.opt('aspectRatio'), .5));
    }
  };

  CalendarComponent.prototype.queryToolbarsHeight = function () {
    var height = 0;

    if (this.header) {
      height += computeHeightAndMargins(this.header.el);
    }

    if (this.footer) {
      height += computeHeightAndMargins(this.footer.el);
    }

    return height;
  }; // Height "Freezing"
  // -----------------------------------------------------------------------------------------------------------------


  CalendarComponent.prototype.freezeHeight = function () {
    applyStyle(this.el, {
      height: this.el.getBoundingClientRect().height,
      overflow: 'hidden'
    });
  };

  CalendarComponent.prototype.thawHeight = function () {
    applyStyle(this.el, {
      height: '',
      overflow: ''
    });
  };

  return CalendarComponent;
}(Component); // Title and Date Formatting
// -----------------------------------------------------------------------------------------------------------------
// Computes what the title at the top of the calendar should be for this view


function computeTitle(dateProfile, viewOptions) {
  var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after

  if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
    range = dateProfile.currentRange;
  } else {
    // for day units or smaller, use the actual day range
    range = dateProfile.activeRange;
  }

  return this.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), {
    isEndExclusive: dateProfile.isRangeAllDay
  });
} // Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.


function computeTitleFormat(dateProfile) {
  var currentRangeUnit = dateProfile.currentRangeUnit;

  if (currentRangeUnit === 'year') {
    return {
      year: 'numeric'
    };
  } else if (currentRangeUnit === 'month') {
    return {
      year: 'numeric',
      month: 'long'
    }; // like "September 2014"
  } else {
    var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);

    if (days !== null && days > 1) {
      // multi-day range. shorter, like "Sep 9 - 10 2014"
      return {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      };
    } else {
      // one day. longer, like "September 9 2014"
      return {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      };
    }
  }
} // Plugin
// -----------------------------------------------------------------------------------------------------------------


function buildViewPropTransformers(theClasses) {
  return theClasses.map(function (theClass) {
    return new theClass();
  });
}

var Interaction =
/** @class */
function () {
  function Interaction(settings) {
    this.component = settings.component;
  }

  Interaction.prototype.destroy = function () {};

  return Interaction;
}();

function parseInteractionSettings(component, input) {
  return {
    component: component,
    el: input.el,
    useEventCenter: input.useEventCenter != null ? input.useEventCenter : true
  };
}

function interactionSettingsToStore(settings) {
  var _a;

  return _a = {}, _a[settings.component.uid] = settings, _a;
} // global state


var interactionSettingsStore = {};
/*
Detects when the user clicks on an event within a DateComponent
*/

var EventClicking =
/** @class */
function (_super) {
  __extends(EventClicking, _super);

  function EventClicking(settings) {
    var _this = _super.call(this, settings) || this;

    _this.handleSegClick = function (ev, segEl) {
      var component = _this.component;
      var seg = getElSeg(segEl);

      if (seg && // might be the <div> surrounding the more link
      component.isValidSegDownEl(ev.target)) {
        // our way to simulate a link click for elements that can't be <a> tags
        // grab before trigger fired in case trigger trashes DOM thru rerendering
        var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');
        var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
        component.publiclyTrigger('eventClick', [{
          el: segEl,
          event: new EventApi(component.calendar, seg.eventRange.def, seg.eventRange.instance),
          jsEvent: ev,
          view: component.view
        }]);

        if (url && !ev.defaultPrevented) {
          window.location.href = url;
        }
      }
    };

    var component = settings.component;
    _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);
    return _this;
  }

  return EventClicking;
}(Interaction);
/*
Triggers events and adds/removes core classNames when the user's pointer
enters/leaves event-elements of a component.
*/


var EventHovering =
/** @class */
function (_super) {
  __extends(EventHovering, _super);

  function EventHovering(settings) {
    var _this = _super.call(this, settings) || this; // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it


    _this.handleEventElRemove = function (el) {
      if (el === _this.currentSegEl) {
        _this.handleSegLeave(null, _this.currentSegEl);
      }
    };

    _this.handleSegEnter = function (ev, segEl) {
      if (getElSeg(segEl)) {
        // TODO: better way to make sure not hovering over more+ link or its wrapper
        segEl.classList.add('fc-allow-mouse-resize');
        _this.currentSegEl = segEl;

        _this.triggerEvent('eventMouseEnter', ev, segEl);
      }
    };

    _this.handleSegLeave = function (ev, segEl) {
      if (_this.currentSegEl) {
        segEl.classList.remove('fc-allow-mouse-resize');
        _this.currentSegEl = null;

        _this.triggerEvent('eventMouseLeave', ev, segEl);
      }
    };

    var component = settings.component;
    _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);
    component.calendar.on('eventElRemove', _this.handleEventElRemove);
    return _this;
  }

  EventHovering.prototype.destroy = function () {
    this.removeHoverListeners();
    this.component.calendar.off('eventElRemove', this.handleEventElRemove);
  };

  EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {
    var component = this.component;
    var seg = getElSeg(segEl);

    if (!ev || component.isValidSegDownEl(ev.target)) {
      component.publiclyTrigger(publicEvName, [{
        el: segEl,
        event: new EventApi(this.component.calendar, seg.eventRange.def, seg.eventRange.instance),
        jsEvent: ev,
        view: component.view
      }]);
    }
  };

  return EventHovering;
}(Interaction);

var StandardTheme =
/** @class */
function (_super) {
  __extends(StandardTheme, _super);

  function StandardTheme() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return StandardTheme;
}(Theme);

StandardTheme.prototype.classes = {
  widget: 'fc-unthemed',
  widgetHeader: 'fc-widget-header',
  widgetContent: 'fc-widget-content',
  buttonGroup: 'fc-button-group',
  button: 'fc-button fc-button-primary',
  buttonActive: 'fc-button-active',
  popoverHeader: 'fc-widget-header',
  popoverContent: 'fc-widget-content',
  // day grid
  headerRow: 'fc-widget-header',
  dayRow: 'fc-widget-content',
  // list view
  listView: 'fc-widget-content'
};
StandardTheme.prototype.baseIconClass = 'fc-icon';
StandardTheme.prototype.iconClasses = {
  close: 'fc-icon-x',
  prev: 'fc-icon-chevron-left',
  next: 'fc-icon-chevron-right',
  prevYear: 'fc-icon-chevrons-left',
  nextYear: 'fc-icon-chevrons-right'
};
StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';

var Calendar =
/** @class */
function () {
  function Calendar(el, overrides) {
    var _this = this;

    this.parseRawLocales = memoize(parseRawLocales);
    this.buildLocale = memoize(buildLocale);
    this.buildDateEnv = memoize(buildDateEnv);
    this.buildTheme = memoize(buildTheme);
    this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);
    this.buildSelectionConfig = memoize(this._buildSelectionConfig);
    this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);
    this.buildEventUiBases = memoize(buildEventUiBases);
    this.interactionsStore = {};
    this.actionQueue = [];
    this.isReducing = false; // isDisplaying: boolean = false // installed in DOM? accepting renders?

    this.needsRerender = false; // needs a render?

    this.needsFullRerender = false;
    this.isRendering = false; // currently in the executeRender function?

    this.renderingPauseDepth = 0;
    this.buildDelayedRerender = memoize(buildDelayedRerender);
    this.afterSizingTriggers = {};
    this.isViewUpdated = false;
    this.isDatesUpdated = false;
    this.isEventsUpdated = false;
    this.el = el;
    this.optionsManager = new OptionsManager(overrides || {});
    this.pluginSystem = new PluginSystem(); // only do once. don't do in handleOptions. because can't remove plugins

    this.addPluginInputs(this.optionsManager.computed.plugins || []);
    this.handleOptions(this.optionsManager.computed);
    this.publiclyTrigger('_init'); // for tests

    this.hydrate();
    this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions.map(function (calendarInteractionClass) {
      return new calendarInteractionClass(_this);
    });
  }

  Calendar.prototype.addPluginInputs = function (pluginInputs) {
    var pluginDefs = refinePluginDefs(pluginInputs);

    for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {
      var pluginDef = pluginDefs_1[_i];
      this.pluginSystem.add(pluginDef);
    }
  };

  Object.defineProperty(Calendar.prototype, "view", {
    // public API
    get: function () {
      return this.component ? this.component.view : null;
    },
    enumerable: true,
    configurable: true
  }); // Public API for rendering
  // -----------------------------------------------------------------------------------------------------------------

  Calendar.prototype.render = function () {
    if (!this.component) {
      this.renderableEventStore = createEmptyEventStore();
      this.bindHandlers();
      this.executeRender();
    } else {
      this.requestRerender(true);
    }
  };

  Calendar.prototype.destroy = function () {
    if (this.component) {
      this.unbindHandlers();
      this.component.destroy(); // don't null-out. in case API needs access

      this.component = null; // umm ???

      for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {
        var interaction = _a[_i];
        interaction.destroy();
      }

      this.publiclyTrigger('_destroyed');
    }
  }; // Handlers
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.bindHandlers = function () {
    var _this = this; // event delegation for nav links


    this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {
      var gotoOptions = anchorEl.getAttribute('data-goto');
      gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};
      var dateEnv = _this.dateEnv;
      var dateMarker = dateEnv.createMarker(gotoOptions.date);
      var viewType = gotoOptions.type; // property like "navLinkDayClick". might be a string or a function

      var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');

      if (typeof customAction === 'function') {
        customAction(dateEnv.toDate(dateMarker), ev);
      } else {
        if (typeof customAction === 'string') {
          viewType = customAction;
        }

        _this.zoomTo(dateMarker, viewType);
      }
    });

    if (this.opt('handleWindowResize')) {
      window.addEventListener('resize', this.windowResizeProxy = debounce( // prevents rapid calls
      this.windowResize.bind(this), this.opt('windowResizeDelay')));
    }
  };

  Calendar.prototype.unbindHandlers = function () {
    this.removeNavLinkListener();

    if (this.windowResizeProxy) {
      window.removeEventListener('resize', this.windowResizeProxy);
      this.windowResizeProxy = null;
    }
  }; // Dispatcher
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hydrate = function () {
    var _this = this;

    this.state = this.buildInitialState();
    var rawSources = this.opt('eventSources') || [];
    var singleRawSource = this.opt('events');
    var sources = []; // parsed

    if (singleRawSource) {
      rawSources.unshift(singleRawSource);
    }

    for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {
      var rawSource = rawSources_1[_i];
      var source = parseEventSource(rawSource, this);

      if (source) {
        sources.push(source);
      }
    }

    this.batchRendering(function () {
      _this.dispatch({
        type: 'INIT'
      }); // pass in sources here?


      _this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: sources
      });

      _this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView
      });
    });
  };

  Calendar.prototype.buildInitialState = function () {
    return {
      viewType: null,
      loadingLevel: 0,
      eventSourceLoadingLevel: 0,
      currentDate: this.getInitialDate(),
      dateProfile: null,
      eventSources: {},
      eventStore: createEmptyEventStore(),
      dateSelection: null,
      eventSelection: '',
      eventDrag: null,
      eventResize: null
    };
  };

  Calendar.prototype.dispatch = function (action) {
    this.actionQueue.push(action);

    if (!this.isReducing) {
      this.isReducing = true;
      var oldState = this.state;

      while (this.actionQueue.length) {
        this.state = this.reduce(this.state, this.actionQueue.shift(), this);
      }

      var newState = this.state;
      this.isReducing = false;

      if (!oldState.loadingLevel && newState.loadingLevel) {
        this.publiclyTrigger('loading', [true]);
      } else if (oldState.loadingLevel && !newState.loadingLevel) {
        this.publiclyTrigger('loading', [false]);
      }

      var view = this.component && this.component.view;

      if (oldState.eventStore !== newState.eventStore || this.needsFullRerender) {
        if (oldState.eventStore) {
          this.isEventsUpdated = true;
        }
      }

      if (oldState.dateProfile !== newState.dateProfile || this.needsFullRerender) {
        if (oldState.dateProfile && view) {
          // why would view be null!?
          this.publiclyTrigger('datesDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isDatesUpdated = true;
      }

      if (oldState.viewType !== newState.viewType || this.needsFullRerender) {
        if (oldState.viewType && view) {
          // why would view be null!?
          this.publiclyTrigger('viewSkeletonDestroy', [{
            view: view,
            el: view.el
          }]);
        }

        this.isViewUpdated = true;
      }

      this.requestRerender();
    }
  };

  Calendar.prototype.reduce = function (state, action, calendar) {
    return reduce(state, action, calendar);
  }; // Render Queue
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.requestRerender = function (needsFull) {
    if (needsFull === void 0) {
      needsFull = false;
    }

    this.needsRerender = true;
    this.needsFullRerender = this.needsFullRerender || needsFull;
    this.delayedRerender(); // will call a debounced-version of tryRerender
  };

  Calendar.prototype.tryRerender = function () {
    if (this.component && // must be accepting renders
    this.needsRerender && // indicates that a rerender was requested
    !this.renderingPauseDepth && // not paused
    !this.isRendering // not currently in the render loop
    ) {
        this.executeRender();
      }
  };

  Calendar.prototype.batchRendering = function (func) {
    this.renderingPauseDepth++;
    func();
    this.renderingPauseDepth--;

    if (this.needsRerender) {
      this.requestRerender();
    }
  }; // Rendering
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.executeRender = function () {
    var needsFullRerender = this.needsFullRerender; // save before clearing
    // clear these BEFORE the render so that new values will accumulate during render

    this.needsRerender = false;
    this.needsFullRerender = false;
    this.isRendering = true;
    this.renderComponent(needsFullRerender);
    this.isRendering = false; // received a rerender request while rendering

    if (this.needsRerender) {
      this.delayedRerender();
    }
  };
  /*
  don't call this directly. use executeRender instead
  */


  Calendar.prototype.renderComponent = function (needsFull) {
    var _a = this,
        state = _a.state,
        component = _a.component;

    var viewType = state.viewType;
    var viewSpec = this.viewSpecs[viewType];
    var savedScroll = needsFull && component ? component.view.queryScroll() : null;

    if (!viewSpec) {
      throw new Error("View type \"" + viewType + "\" is not valid");
    } // if event sources are still loading and progressive rendering hasn't been enabled,
    // keep rendering the last fully loaded set of events


    var renderableEventStore = this.renderableEventStore = state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering') ? this.renderableEventStore : state.eventStore;
    var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);
    var eventUiBySource = this.buildEventUiBySource(state.eventSources);
    var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);

    if (needsFull || !component) {
      if (component) {
        component.freezeHeight(); // next component will unfreeze it

        component.destroy();
      }

      component = this.component = new CalendarComponent({
        calendar: this,
        view: null,
        dateEnv: this.dateEnv,
        theme: this.theme,
        options: this.optionsManager.computed
      }, this.el);
      this.isViewUpdated = true;
      this.isDatesUpdated = true;
      this.isEventsUpdated = true;
    }

    component.receiveProps(__assign({}, state, {
      viewSpec: viewSpec,
      dateProfile: state.dateProfile,
      dateProfileGenerator: this.dateProfileGenerators[viewType],
      eventStore: renderableEventStore,
      eventUiBases: eventUiBases,
      dateSelection: state.dateSelection,
      eventSelection: state.eventSelection,
      eventDrag: state.eventDrag,
      eventResize: state.eventResize
    }));

    if (savedScroll) {
      component.view.applyScroll(savedScroll, false);
    }

    if (this.isViewUpdated) {
      this.isViewUpdated = false;
      this.publiclyTrigger('viewSkeletonRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isDatesUpdated) {
      this.isDatesUpdated = false;
      this.publiclyTrigger('datesRender', [{
        view: component.view,
        el: component.view.el
      }]);
    }

    if (this.isEventsUpdated) {
      this.isEventsUpdated = false;
    }

    this.releaseAfterSizingTriggers();
  }; // Options
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.setOption = function (name, val) {
    var _a;

    this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);
  };

  Calendar.prototype.getOption = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.opt = function (name) {
    return this.optionsManager.computed[name];
  };

  Calendar.prototype.viewOpt = function (name) {
    return this.viewOpts()[name];
  };

  Calendar.prototype.viewOpts = function () {
    return this.viewSpecs[this.state.viewType].options;
  };
  /*
  handles option changes (like a diff)
  */


  Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {
    var _this = this;

    var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;
    var normalUpdates = {};
    var specialUpdates = {};
    var oldDateEnv = this.dateEnv; // do this before handleOptions

    var isTimeZoneDirty = false;
    var isSizeDirty = false;
    var anyDifficultOptions = Boolean(removals.length);

    for (var name_1 in updates) {
      if (changeHandlers[name_1]) {
        specialUpdates[name_1] = updates[name_1];
      } else {
        normalUpdates[name_1] = updates[name_1];
      }
    }

    for (var name_2 in normalUpdates) {
      if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {
        isSizeDirty = true;
      } else if (/^(defaultDate|defaultView)$/.test(name_2)) ;else {
        anyDifficultOptions = true;

        if (name_2 === 'timeZone') {
          isTimeZoneDirty = true;
        }
      }
    }

    this.optionsManager.mutate(normalUpdates, removals, isDynamic);

    if (anyDifficultOptions) {
      this.handleOptions(this.optionsManager.computed);
      this.needsFullRerender = true;
    }

    this.batchRendering(function () {
      if (anyDifficultOptions) {
        if (isTimeZoneDirty) {
          _this.dispatch({
            type: 'CHANGE_TIMEZONE',
            oldDateEnv: oldDateEnv
          });
        }
        /* HACK
        has the same effect as calling this.requestRerender(true)
        but recomputes the state's dateProfile
        */


        _this.dispatch({
          type: 'SET_VIEW_TYPE',
          viewType: _this.state.viewType
        });
      } else if (isSizeDirty) {
        _this.updateSize();
      } // special updates


      if (deepEqual) {
        for (var name_3 in specialUpdates) {
          changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);
        }
      }
    });
  };
  /*
  rebuilds things based off of a complete set of refined options
  */


  Calendar.prototype.handleOptions = function (options) {
    var _this = this;

    var pluginHooks = this.pluginSystem.hooks;
    this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);
    this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);
    this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);
    this.theme = this.buildTheme(options);
    var available = this.parseRawLocales(options.locales);
    this.availableRawLocales = available.map;
    var locale = this.buildLocale(options.locale || available.defaultCode, available.map);
    this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);
    this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(
    // ineffecient to do every time?

    this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager); // ineffecient to do every time?

    this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {
      return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);
    });
  };

  Calendar.prototype.getAvailableLocaleCodes = function () {
    return Object.keys(this.availableRawLocales);
  };

  Calendar.prototype._buildSelectionConfig = function (rawOpts) {
    return processScopedUiProps('select', rawOpts, this);
  };

  Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {
    if (rawOpts.editable) {
      // so 'editable' affected events
      rawOpts = __assign({}, rawOpts, {
        eventEditable: true
      });
    }

    return processScopedUiProps('event', rawOpts, this);
  }; // Trigger
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.hasPublicHandlers = function (name) {
    return this.hasHandlers(name) || this.opt(name); // handler specified in options
  };

  Calendar.prototype.publiclyTrigger = function (name, args) {
    var optHandler = this.opt(name);
    this.triggerWith(name, this, args);

    if (optHandler) {
      return optHandler.apply(this, args);
    }
  };

  Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {
    var afterSizingTriggers = this.afterSizingTriggers;
    (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);
  };

  Calendar.prototype.releaseAfterSizingTriggers = function () {
    var afterSizingTriggers = this.afterSizingTriggers;

    for (var name_4 in afterSizingTriggers) {
      for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {
        var args = _a[_i];
        this.publiclyTrigger(name_4, args);
      }
    }

    this.afterSizingTriggers = {};
  }; // View
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a boolean about whether the view is okay to instantiate at some point


  Calendar.prototype.isValidViewType = function (viewType) {
    return Boolean(this.viewSpecs[viewType]);
  };

  Calendar.prototype.changeView = function (viewType, dateOrRange) {
    var dateMarker = null;

    if (dateOrRange) {
      if (dateOrRange.start && dateOrRange.end) {
        // a range
        this.optionsManager.mutate({
          visibleRange: dateOrRange
        }, []); // will not rerender

        this.handleOptions(this.optionsManager.computed); // ...but yuck
      } else {
        // a date
        dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate
      }
    }

    this.unselect();
    this.dispatch({
      type: 'SET_VIEW_TYPE',
      viewType: viewType,
      dateMarker: dateMarker
    });
  }; // Forces navigation to a view for the given date.
  // `viewType` can be a specific view name or a generic one like "week" or "day".
  // needs to change


  Calendar.prototype.zoomTo = function (dateMarker, viewType) {
    var spec;
    viewType = viewType || 'day'; // day is default zoom

    spec = this.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
    this.unselect();

    if (spec) {
      this.dispatch({
        type: 'SET_VIEW_TYPE',
        viewType: spec.type,
        dateMarker: dateMarker
      });
    } else {
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: dateMarker
      });
    }
  }; // Given a duration singular unit, like "week" or "day", finds a matching view spec.
  // Preference is given to views that have corresponding buttons.


  Calendar.prototype.getUnitViewSpec = function (unit) {
    var component = this.component;
    var viewTypes = [];
    var i;
    var spec; // put views that have buttons first. there will be duplicates, but oh

    if (component.header) {
      viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);
    }

    if (component.footer) {
      viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);
    }

    for (var viewType in this.viewSpecs) {
      viewTypes.push(viewType);
    }

    for (i = 0; i < viewTypes.length; i++) {
      spec = this.viewSpecs[viewTypes[i]];

      if (spec) {
        if (spec.singleUnit === unit) {
          return spec;
        }
      }
    }
  }; // Current Date
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getInitialDate = function () {
    var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date

    if (defaultDateInput != null) {
      return this.dateEnv.createMarker(defaultDateInput);
    } else {
      return this.getNow(); // getNow already returns unzoned
    }
  };

  Calendar.prototype.prev = function () {
    this.unselect();
    this.dispatch({
      type: 'PREV'
    });
  };

  Calendar.prototype.next = function () {
    this.unselect();
    this.dispatch({
      type: 'NEXT'
    });
  };

  Calendar.prototype.prevYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)
    });
  };

  Calendar.prototype.nextYear = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)
    });
  };

  Calendar.prototype.today = function () {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.getNow()
    });
  };

  Calendar.prototype.gotoDate = function (zonedDateInput) {
    this.unselect();
    this.dispatch({
      type: 'SET_DATE',
      dateMarker: this.dateEnv.createMarker(zonedDateInput)
    });
  };

  Calendar.prototype.incrementDate = function (deltaInput) {
    var delta = createDuration(deltaInput);

    if (delta) {
      // else, warn about invalid input?
      this.unselect();
      this.dispatch({
        type: 'SET_DATE',
        dateMarker: this.dateEnv.add(this.state.currentDate, delta)
      });
    }
  }; // for external API


  Calendar.prototype.getDate = function () {
    return this.dateEnv.toDate(this.state.currentDate);
  }; // Date Formatting Utils
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.formatDate = function (d, formatter) {
    var dateEnv = this.dateEnv;
    return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
  }; // `settings` is for formatter AND isEndExclusive


  Calendar.prototype.formatRange = function (d0, d1, settings) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);
  };

  Calendar.prototype.formatIso = function (d, omitTime) {
    var dateEnv = this.dateEnv;
    return dateEnv.formatIso(dateEnv.createMarker(d), {
      omitTime: omitTime
    });
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.windowResize = function (ev) {
    if (!this.isHandlingWindowResize && this.component && // why?
    ev.target === window // not a jqui resize event
    ) {
        this.isHandlingWindowResize = true;
        this.updateSize();
        this.publiclyTrigger('windowResize', [this.view]);
        this.isHandlingWindowResize = false;
      }
  };

  Calendar.prototype.updateSize = function () {
    if (this.component) {
      // when?
      this.component.updateSize(true);
    }
  }; // Component Registration
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {
    var settings = parseInteractionSettings(component, settingsInput);
    var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];
    var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);
    var interactions = interactionClasses.map(function (interactionClass) {
      return new interactionClass(settings);
    });
    this.interactionsStore[component.uid] = interactions;
    interactionSettingsStore[component.uid] = settings;
  };

  Calendar.prototype.unregisterInteractiveComponent = function (component) {
    for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {
      var listener = _a[_i];
      listener.destroy();
    }

    delete this.interactionsStore[component.uid];
    delete interactionSettingsStore[component.uid];
  }; // Date Selection / Event Selection / DayClick
  // -----------------------------------------------------------------------------------------------------------------
  // this public method receives start/end dates in any format, with any timezone
  // NOTE: args were changed from v3


  Calendar.prototype.select = function (dateOrObj, endDate) {
    var selectionInput;

    if (endDate == null) {
      if (dateOrObj.start != null) {
        selectionInput = dateOrObj;
      } else {
        selectionInput = {
          start: dateOrObj,
          end: null
        };
      }
    } else {
      selectionInput = {
        start: dateOrObj,
        end: endDate
      };
    }

    var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({
      days: 1
    }) // TODO: cache this?
    );

    if (selection) {
      // throw parse error otherwise?
      this.dispatch({
        type: 'SELECT_DATES',
        selection: selection
      });
      this.triggerDateSelect(selection);
    }
  }; // public method


  Calendar.prototype.unselect = function (pev) {
    if (this.state.dateSelection) {
      this.dispatch({
        type: 'UNSELECT_DATES'
      });
      this.triggerDateUnselect(pev);
    }
  };

  Calendar.prototype.triggerDateSelect = function (selection, pev) {
    var arg = __assign({}, this.buildDateSpanApi(selection), {
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    });

    this.publiclyTrigger('select', [arg]);
  };

  Calendar.prototype.triggerDateUnselect = function (pev) {
    this.publiclyTrigger('unselect', [{
      jsEvent: pev ? pev.origEvent : null,
      view: this.view
    }]);
  }; // TODO: receive pev?


  Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {
    var arg = __assign({}, this.buildDatePointApi(dateSpan), {
      dayEl: dayEl,
      jsEvent: ev,
      // Is this always a mouse event? See #4655
      view: view
    });

    this.publiclyTrigger('dateClick', [arg]);
  };

  Calendar.prototype.buildDatePointApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDatePointApi(dateSpan, this.dateEnv));

    return props;
  };

  Calendar.prototype.buildDateSpanApi = function (dateSpan) {
    var props = {};

    for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {
      var transform = _a[_i];

      __assign(props, transform(dateSpan, this));
    }

    __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));

    return props;
  }; // Date Utils
  // -----------------------------------------------------------------------------------------------------------------
  // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option


  Calendar.prototype.getNow = function () {
    var now = this.opt('now');

    if (typeof now === 'function') {
      now = now();
    }

    if (now == null) {
      return this.dateEnv.createNowMarker();
    }

    return this.dateEnv.createMarker(now);
  }; // Event-Date Utilities
  // -----------------------------------------------------------------------------------------------------------------
  // Given an event's allDay status and start date, return what its fallback end date should be.
  // TODO: rename to computeDefaultEventEnd


  Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {
    var end = marker;

    if (allDay) {
      end = startOfDay(end);
      end = this.dateEnv.add(end, this.defaultAllDayEventDuration);
    } else {
      end = this.dateEnv.add(end, this.defaultTimedEventDuration);
    }

    return end;
  }; // Public Events API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.addEvent = function (eventInput, sourceInput) {
    if (eventInput instanceof EventApi) {
      var def = eventInput._def;
      var instance = eventInput._instance; // not already present? don't want to add an old snapshot

      if (!this.state.eventStore.defs[def.defId]) {
        this.dispatch({
          type: 'ADD_EVENTS',
          eventStore: eventTupleToStore({
            def: def,
            instance: instance
          }) // TODO: better util for two args?

        });
      }

      return eventInput;
    }

    var sourceId;

    if (sourceInput instanceof EventSourceApi) {
      sourceId = sourceInput.internalEventSource.sourceId;
    } else if (sourceInput != null) {
      var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function

      if (!sourceApi) {
        console.warn('Could not find an event source with ID "' + sourceInput + '"'); // TODO: test

        return null;
      } else {
        sourceId = sourceApi.internalEventSource.sourceId;
      }
    }

    var tuple = parseEvent(eventInput, sourceId, this);

    if (tuple) {
      this.dispatch({
        type: 'ADD_EVENTS',
        eventStore: eventTupleToStore(tuple)
      });
      return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
    }

    return null;
  }; // TODO: optimize


  Calendar.prototype.getEventById = function (id) {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    id = String(id);

    for (var defId in defs) {
      var def = defs[defId];

      if (def.publicId === id) {
        if (def.recurringDef) {
          return new EventApi(this, def, null);
        } else {
          for (var instanceId in instances) {
            var instance = instances[instanceId];

            if (instance.defId === def.defId) {
              return new EventApi(this, def, instance);
            }
          }
        }
      }
    }

    return null;
  };

  Calendar.prototype.getEvents = function () {
    var _a = this.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var id in instances) {
      var instance = instances[id];
      var def = defs[instance.defId];
      eventApis.push(new EventApi(this, def, instance));
    }

    return eventApis;
  };

  Calendar.prototype.removeAllEvents = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENTS'
    });
  };

  Calendar.prototype.rerenderEvents = function () {
    this.dispatch({
      type: 'RESET_EVENTS'
    });
  }; // Public Event Sources API
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.getEventSources = function () {
    var sourceHash = this.state.eventSources;
    var sourceApis = [];

    for (var internalId in sourceHash) {
      sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));
    }

    return sourceApis;
  };

  Calendar.prototype.getEventSourceById = function (id) {
    var sourceHash = this.state.eventSources;
    id = String(id);

    for (var sourceId in sourceHash) {
      if (sourceHash[sourceId].publicId === id) {
        return new EventSourceApi(this, sourceHash[sourceId]);
      }
    }

    return null;
  };

  Calendar.prototype.addEventSource = function (sourceInput) {
    if (sourceInput instanceof EventSourceApi) {
      // not already present? don't want to add an old snapshot
      if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {
        this.dispatch({
          type: 'ADD_EVENT_SOURCES',
          sources: [sourceInput.internalEventSource]
        });
      }

      return sourceInput;
    }

    var eventSource = parseEventSource(sourceInput, this);

    if (eventSource) {
      // TODO: error otherwise?
      this.dispatch({
        type: 'ADD_EVENT_SOURCES',
        sources: [eventSource]
      });
      return new EventSourceApi(this, eventSource);
    }

    return null;
  };

  Calendar.prototype.removeAllEventSources = function () {
    this.dispatch({
      type: 'REMOVE_ALL_EVENT_SOURCES'
    });
  };

  Calendar.prototype.refetchEvents = function () {
    this.dispatch({
      type: 'FETCH_EVENT_SOURCES'
    });
  }; // Scroll
  // -----------------------------------------------------------------------------------------------------------------


  Calendar.prototype.scrollToTime = function (timeInput) {
    var duration = createDuration(timeInput);

    if (duration) {
      this.component.view.scrollToDuration(duration);
    }
  };

  return Calendar;
}();

EmitterMixin.mixInto(Calendar); // for memoizers
// -----------------------------------------------------------------------------------------------------------------

function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {
  return new DateEnv({
    calendarSystem: 'gregory',
    timeZone: timeZone,
    namedTimeZoneImpl: namedTimeZoneImpl,
    locale: locale,
    weekNumberCalculation: weekNumberCalculation,
    firstDay: firstDay,
    weekLabel: weekLabel,
    cmdFormatter: cmdFormatter
  });
}

function buildTheme(calendarOptions) {
  var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;
  return new themeClass(calendarOptions);
}

function buildDelayedRerender(wait) {
  var func = this.tryRerender.bind(this);

  if (wait != null) {
    func = debounce(func, wait);
  }

  return func;
}

function buildEventUiBySource(eventSources) {
  return mapHash(eventSources, function (eventSource) {
    return eventSource.ui;
  });
}

function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
  var eventUiBases = {
    '': eventUiSingleBase
  };

  for (var defId in eventDefs) {
    var def = eventDefs[defId];

    if (def.sourceId && eventUiBySource[def.sourceId]) {
      eventUiBases[defId] = eventUiBySource[def.sourceId];
    }
  }

  return eventUiBases;
}

var View =
/** @class */
function (_super) {
  __extends(View, _super);

  function View(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, createElement('div', {
      className: 'fc-view fc-' + viewSpec.type + '-view'
    }), true // isView (HACK)
    ) || this;

    _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);
    _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);
    _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);
    _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);
    _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);
    _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);
    _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);
    _this.viewSpec = viewSpec;
    _this.dateProfileGenerator = dateProfileGenerator;
    _this.type = viewSpec.type;
    _this.eventOrderSpecs = parseFieldSpecs(_this.opt('eventOrder'));
    _this.nextDayThreshold = createDuration(_this.opt('nextDayThreshold'));
    parentEl.appendChild(_this.el);

    _this.initialize();

    return _this;
  }

  View.prototype.initialize = function () {};

  Object.defineProperty(View.prototype, "activeStart", {
    // Date Setting/Unsetting
    // -----------------------------------------------------------------------------------------------------------------
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.activeRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "activeEnd", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.activeRange.end);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentStart", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.currentRange.start);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "currentEnd", {
    get: function () {
      return this.dateEnv.toDate(this.props.dateProfile.currentRange.end);
    },
    enumerable: true,
    configurable: true
  }); // General Rendering
  // -----------------------------------------------------------------------------------------------------------------

  View.prototype.render = function (props) {
    this.renderDatesMem(props.dateProfile);
    this.renderBusinessHoursMem(props.businessHours);
    this.renderDateSelectionMem(props.dateSelection);
    this.renderEventsMem(props.eventStore);
    this.renderEventSelectionMem(props.eventSelection);
    this.renderEventDragMem(props.eventDrag);
    this.renderEventResizeMem(props.eventResize);
  };

  View.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderDatesMem.unrender(); // should unrender everything else
  }; // Sizing
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    var calendar = this.calendar;

    if (isResize || // HACKS...
    calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      // sort of the catch-all sizing
      // anything that might cause dimension changes
      this.updateBaseSize(isResize, viewHeight, isAuto);
    }
  };

  View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {}; // Date Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDatesWrap = function (dateProfile) {
    this.renderDates(dateProfile);
    this.addScroll({
      duration: createDuration(this.opt('scrollTime'))
    });
    this.startNowIndicator(dateProfile); // shouldn't render yet because updateSize will be called soon
  };

  View.prototype.unrenderDatesWrap = function () {
    this.stopNowIndicator();
    this.unrenderDates();
  };

  View.prototype.renderDates = function (dateProfile) {};

  View.prototype.unrenderDates = function () {}; // Business Hours
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderBusinessHours = function (businessHours) {};

  View.prototype.unrenderBusinessHours = function () {}; // Date Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderDateSelectionWrap = function (selection) {
    if (selection) {
      this.renderDateSelection(selection);
    }
  };

  View.prototype.unrenderDateSelectionWrap = function (selection) {
    if (selection) {
      this.unrenderDateSelection(selection);
    }
  };

  View.prototype.renderDateSelection = function (selection) {};

  View.prototype.unrenderDateSelection = function (selection) {}; // Event Rendering
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEvents = function (eventStore) {};

  View.prototype.unrenderEvents = function () {}; // util for subclasses


  View.prototype.sliceEvents = function (eventStore, allDay) {
    var props = this.props;
    return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.nextDayThreshold : null).fg;
  };

  View.prototype.computeEventDraggable = function (eventDef, eventUi) {
    var transformers = this.calendar.pluginSystem.hooks.isDraggableTransformers;
    var val = eventUi.startEditable;

    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
      var transformer = transformers_1[_i];
      val = transformer(val, eventDef, eventUi, this);
    }

    return val;
  };

  View.prototype.computeEventStartResizable = function (eventDef, eventUi) {
    return eventUi.durationEditable && this.opt('eventResizableFromStart');
  };

  View.prototype.computeEventEndResizable = function (eventDef, eventUi) {
    return eventUi.durationEditable;
  }; // Event Selection
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.renderEventSelection(instanceId);
    }
  };

  View.prototype.unrenderEventSelectionWrap = function (instanceId) {
    if (instanceId) {
      this.unrenderEventSelection(instanceId);
    }
  };

  View.prototype.renderEventSelection = function (instanceId) {};

  View.prototype.unrenderEventSelection = function (instanceId) {}; // Event Drag
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventDragWrap = function (state) {
    if (state) {
      this.renderEventDrag(state);
    }
  };

  View.prototype.unrenderEventDragWrap = function (state) {
    if (state) {
      this.unrenderEventDrag(state);
    }
  };

  View.prototype.renderEventDrag = function (state) {};

  View.prototype.unrenderEventDrag = function (state) {}; // Event Resize
  // -----------------------------------------------------------------------------------------------------------------


  View.prototype.renderEventResizeWrap = function (state) {
    if (state) {
      this.renderEventResize(state);
    }
  };

  View.prototype.unrenderEventResizeWrap = function (state) {
    if (state) {
      this.unrenderEventResize(state);
    }
  };

  View.prototype.renderEventResize = function (state) {};

  View.prototype.unrenderEventResize = function (state) {};
  /* Now Indicator
  ------------------------------------------------------------------------------------------------------------------*/
  // Immediately render the current time indicator and begins re-rendering it at an interval,
  // which is defined by this.getNowIndicatorUnit().
  // TODO: somehow do this for the current whole day's background too


  View.prototype.startNowIndicator = function (dateProfile) {
    var _this = this;

    var dateEnv = this.dateEnv;
    var unit;
    var update;
    var delay; // ms wait value

    if (this.opt('nowIndicator')) {
      unit = this.getNowIndicatorUnit(dateProfile);

      if (unit) {
        update = this.updateNowIndicator.bind(this);
        this.initialNowDate = this.calendar.getNow();
        this.initialNowQueriedMs = new Date().valueOf(); // wait until the beginning of the next interval

        delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf(); // TODO: maybe always use setTimeout, waiting until start of next unit

        this.nowIndicatorTimeoutID = setTimeout(function () {
          _this.nowIndicatorTimeoutID = null;
          update();

          if (unit === 'second') {
            delay = 1000; // every second
          } else {
            delay = 1000 * 60; // otherwise, every minute
          }

          _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
        }, delay);
      } // rendering will be initiated in updateSize

    }
  }; // rerenders the now indicator, computing the new current time from the amount of time that has passed
  // since the initial getNow call.


  View.prototype.updateNowIndicator = function () {
    if (this.props.dateProfile && // a way to determine if dates were rendered yet
    this.initialNowDate // activated before?
    ) {
        this.unrenderNowIndicator(); // won't unrender if unnecessary

        this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));
        this.isNowIndicatorRendered = true;
      }
  }; // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
  // Won't cause side effects if indicator isn't rendered.


  View.prototype.stopNowIndicator = function () {
    if (this.isNowIndicatorRendered) {
      if (this.nowIndicatorTimeoutID) {
        clearTimeout(this.nowIndicatorTimeoutID);
        this.nowIndicatorTimeoutID = null;
      }

      if (this.nowIndicatorIntervalID) {
        clearInterval(this.nowIndicatorIntervalID);
        this.nowIndicatorIntervalID = null;
      }

      this.unrenderNowIndicator();
      this.isNowIndicatorRendered = false;
    }
  };

  View.prototype.getNowIndicatorUnit = function (dateProfile) {// subclasses should implement
  }; // Renders a current time indicator at the given datetime


  View.prototype.renderNowIndicator = function (date) {// SUBCLASSES MUST PASS TO CHILDREN!
  }; // Undoes the rendering actions from renderNowIndicator


  View.prototype.unrenderNowIndicator = function () {// SUBCLASSES MUST PASS TO CHILDREN!
  };
  /* Scroller
  ------------------------------------------------------------------------------------------------------------------*/


  View.prototype.addScroll = function (scroll) {
    var queuedScroll = this.queuedScroll || (this.queuedScroll = {});

    __assign(queuedScroll, scroll);
  };

  View.prototype.popScroll = function (isResize) {
    this.applyQueuedScroll(isResize);
    this.queuedScroll = null;
  };

  View.prototype.applyQueuedScroll = function (isResize) {
    this.applyScroll(this.queuedScroll || {}, isResize);
  };

  View.prototype.queryScroll = function () {
    var scroll = {};

    if (this.props.dateProfile) {
      // dates rendered yet?
      __assign(scroll, this.queryDateScroll());
    }

    return scroll;
  };

  View.prototype.applyScroll = function (scroll, isResize) {
    var duration = scroll.duration;

    if (duration != null) {
      delete scroll.duration;

      if (this.props.dateProfile) {
        // dates rendered yet?
        __assign(scroll, this.computeDateScroll(duration));
      }
    }

    if (this.props.dateProfile) {
      // dates rendered yet?
      this.applyDateScroll(scroll);
    }
  };

  View.prototype.computeDateScroll = function (duration) {
    return {}; // subclasses must implement
  };

  View.prototype.queryDateScroll = function () {
    return {}; // subclasses must implement
  };

  View.prototype.applyDateScroll = function (scroll) {// subclasses must implement
  }; // for API


  View.prototype.scrollToDuration = function (duration) {
    this.applyScroll({
      duration: duration
    }, false);
  };

  return View;
}(DateComponent);

EmitterMixin.mixInto(View);
View.prototype.usesMinMaxTime = false;
View.prototype.dateProfileGeneratorClass = DateProfileGenerator;

var FgEventRenderer =
/** @class */
function () {
  function FgEventRenderer(context) {
    this.segs = [];
    this.isSizeDirty = false;
    this.context = context;
  }

  FgEventRenderer.prototype.renderSegs = function (segs, mirrorInfo) {
    this.rangeUpdated(); // called too frequently :(
    // render an `.el` on each seg
    // returns a subset of the segs. segs that were actually rendered

    segs = this.renderSegEls(segs, mirrorInfo);
    this.segs = segs;
    this.attachSegs(segs, mirrorInfo);
    this.isSizeDirty = true;
    this.context.view.triggerRenderedSegs(this.segs, Boolean(mirrorInfo));
  };

  FgEventRenderer.prototype.unrender = function (_segs, mirrorInfo) {
    this.context.view.triggerWillRemoveSegs(this.segs, Boolean(mirrorInfo));
    this.detachSegs(this.segs);
    this.segs = [];
  }; // Updates values that rely on options and also relate to range


  FgEventRenderer.prototype.rangeUpdated = function () {
    var options = this.context.options;
    var displayEventTime;
    var displayEventEnd;
    this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);
    displayEventTime = options.displayEventTime;

    if (displayEventTime == null) {
      displayEventTime = this.computeDisplayEventTime(); // might be based off of range
    }

    displayEventEnd = options.displayEventEnd;

    if (displayEventEnd == null) {
      displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
    }

    this.displayEventTime = displayEventTime;
    this.displayEventEnd = displayEventEnd;
  }; // Renders and assigns an `el` property for each foreground event segment.
  // Only returns segments that successfully rendered.


  FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {
    var html = '';
    var i;

    if (segs.length) {
      // don't build an empty html string
      // build a large concatenation of event segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(segs[i], mirrorInfo);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });
      segs = filterSegsViaEls(this.context.view, segs, Boolean(mirrorInfo));
    }

    return segs;
  }; // Generic utility for generating the HTML classNames for an event segment's element


  FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {
    var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(seg.eventRange.ui.classNames);

    if (isDraggable) {
      classes.push('fc-draggable');
    }

    if (isResizable) {
      classes.push('fc-resizable');
    }

    if (mirrorInfo) {
      classes.push('fc-mirror');

      if (mirrorInfo.isDragging) {
        classes.push('fc-dragging');
      }

      if (mirrorInfo.isResizing) {
        classes.push('fc-resizing');
      }
    }

    return classes;
  }; // Compute the text that should be displayed on an event's element.
  // `range` can be the Event object itself, or something range-like, with at least a `start`.
  // If event times are disabled, or the event has no time, will return a blank string.
  // If not specified, formatter will default to the eventTimeFormat setting,
  // and displayEnd will default to the displayEventEnd setting.


  FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {
    var def = eventRange.def,
        instance = eventRange.instance;
    return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);
  };

  FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {
    var dateEnv = this.context.dateEnv;

    if (formatter == null) {
      formatter = this.eventTimeFormat;
    }

    if (displayEnd == null) {
      displayEnd = this.displayEventEnd;
    }

    if (this.displayEventTime && !allDay) {
      if (displayEnd && end) {
        return dateEnv.formatRange(start, end, formatter, {
          forcedStartTzo: forcedStartTzo,
          forcedEndTzo: forcedEndTzo
        });
      } else {
        return dateEnv.format(start, formatter, {
          forcedTzo: forcedStartTzo
        });
      }
    }

    return '';
  };

  FgEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true
    };
  };

  FgEventRenderer.prototype.computeDisplayEventTime = function () {
    return true;
  };

  FgEventRenderer.prototype.computeDisplayEventEnd = function () {
    return true;
  }; // Utility for generating event skin-related CSS properties


  FgEventRenderer.prototype.getSkinCss = function (ui) {
    return {
      'background-color': ui.backgroundColor,
      'border-color': ui.borderColor,
      color: ui.textColor
    };
  };

  FgEventRenderer.prototype.sortEventSegs = function (segs) {
    var specs = this.context.view.eventOrderSpecs;
    var objs = segs.map(buildSegCompareObj);
    objs.sort(function (obj0, obj1) {
      return compareByFieldSpecs(obj0, obj1, specs);
    });
    return objs.map(function (c) {
      return c._seg;
    });
  };

  FgEventRenderer.prototype.computeSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.computeSegSizes(this.segs);
    }
  };

  FgEventRenderer.prototype.assignSizes = function (force) {
    if (force || this.isSizeDirty) {
      this.assignSegSizes(this.segs);
      this.isSizeDirty = false;
    }
  };

  FgEventRenderer.prototype.computeSegSizes = function (segs) {};

  FgEventRenderer.prototype.assignSegSizes = function (segs) {}; // Manipulation on rendered segs


  FgEventRenderer.prototype.hideByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = 'hidden';
        }
      }
    }
  };

  FgEventRenderer.prototype.showByHash = function (hash) {
    if (hash) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (hash[seg.eventRange.instance.instanceId]) {
          seg.el.style.visibility = '';
        }
      }
    }
  };

  FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];
        var eventInstance = seg.eventRange.instance;

        if (eventInstance && eventInstance.instanceId === instanceId && seg.el // necessary?
        ) {
            seg.el.classList.add('fc-selected');
          }
      }
    }
  };

  FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {
    if (instanceId) {
      for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
        var seg = _a[_i];

        if (seg.el) {
          // necessary?
          seg.el.classList.remove('fc-selected');
        }
      }
    }
  };

  return FgEventRenderer;
}(); // returns a object with all primitive props that can be compared


function buildSegCompareObj(seg) {
  var eventDef = seg.eventRange.def;
  var range = seg.eventRange.instance.range;
  var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events

  var end = range.end ? range.end.valueOf() : 0; // "

  return __assign({}, eventDef.extendedProps, eventDef, {
    id: eventDef.publicId,
    start: start,
    end: end,
    duration: end - start,
    allDay: Number(eventDef.allDay),
    _seg: seg // for later retrieval

  });
}

var FillRenderer =
/** @class */
function () {
  function FillRenderer(context) {
    this.fillSegTag = 'div';
    this.dirtySizeFlags = {};
    this.context = context;
    this.containerElsByType = {};
    this.segsByType = {};
  }

  FillRenderer.prototype.getSegsByType = function (type) {
    return this.segsByType[type] || [];
  };

  FillRenderer.prototype.renderSegs = function (type, segs) {
    var _a;

    var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs

    var containerEls = this.attachSegs(type, renderedSegs);

    if (containerEls) {
      (_a = this.containerElsByType[type] || (this.containerElsByType[type] = [])).push.apply(_a, containerEls);
    }

    this.segsByType[type] = renderedSegs;

    if (type === 'bgEvent') {
      this.context.view.triggerRenderedSegs(renderedSegs, false); // isMirror=false
    }

    this.dirtySizeFlags[type] = true;
  }; // Unrenders a specific type of fill that is currently rendered on the grid


  FillRenderer.prototype.unrender = function (type) {
    var segs = this.segsByType[type];

    if (segs) {
      if (type === 'bgEvent') {
        this.context.view.triggerWillRemoveSegs(segs, false); // isMirror=false
      }

      this.detachSegs(type, segs);
    }
  }; // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
  // Only returns segments that successfully rendered.


  FillRenderer.prototype.renderSegEls = function (type, segs) {
    var _this = this;

    var html = '';
    var i;

    if (segs.length) {
      // build a large concatenation of segment HTML
      for (i = 0; i < segs.length; i++) {
        html += this.renderSegHtml(type, segs[i]);
      } // Grab individual elements from the combined HTML string. Use each as the default rendering.
      // Then, compute the 'el' for each segment.


      htmlToElements(html).forEach(function (el, i) {
        var seg = segs[i];

        if (el) {
          seg.el = el;
        }
      });

      if (type === 'bgEvent') {
        segs = filterSegsViaEls(this.context.view, segs, false // isMirror. background events can never be mirror elements
        );
      } // correct element type? (would be bad if a non-TD were inserted into a table for example)


      segs = segs.filter(function (seg) {
        return elementMatches(seg.el, _this.fillSegTag);
      });
    }

    return segs;
  }; // Builds the HTML needed for one fill segment. Generic enough to work with different types.


  FillRenderer.prototype.renderSegHtml = function (type, seg) {
    var css = null;
    var classNames = [];

    if (type !== 'highlight' && type !== 'businessHours') {
      css = {
        'background-color': seg.eventRange.ui.backgroundColor
      };
    }

    if (type !== 'highlight') {
      classNames = classNames.concat(seg.eventRange.ui.classNames);
    }

    if (type === 'businessHours') {
      classNames.push('fc-bgevent');
    } else {
      classNames.push('fc-' + type.toLowerCase());
    }

    return '<' + this.fillSegTag + (classNames.length ? ' class="' + classNames.join(' ') + '"' : '') + (css ? ' style="' + cssToStr(css) + '"' : '') + '></' + this.fillSegTag + '>';
  };

  FillRenderer.prototype.detachSegs = function (type, segs) {
    var containerEls = this.containerElsByType[type];

    if (containerEls) {
      containerEls.forEach(removeElement);
      delete this.containerElsByType[type];
    }
  };

  FillRenderer.prototype.computeSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.computeSegSizes(this.segsByType[type]);
      }
    }
  };

  FillRenderer.prototype.assignSizes = function (force) {
    for (var type in this.segsByType) {
      if (force || this.dirtySizeFlags[type]) {
        this.assignSegSizes(this.segsByType[type]);
      }
    }

    this.dirtySizeFlags = {};
  };

  FillRenderer.prototype.computeSegSizes = function (segs) {};

  FillRenderer.prototype.assignSegSizes = function (segs) {};

  return FillRenderer;
}();

var NamedTimeZoneImpl =
/** @class */
function () {
  function NamedTimeZoneImpl(timeZoneName) {
    this.timeZoneName = timeZoneName;
  }

  return NamedTimeZoneImpl;
}();
/*
An abstraction for a dragging interaction originating on an event.
Does higher-level things than PointerDragger, such as possibly:
- a "mirror" that moves with the pointer
- a minimum number of pixels or other criteria for a true drag to begin

subclasses must emit:
- pointerdown
- dragstart
- dragmove
- pointerup
- dragend
*/


var ElementDragging =
/** @class */
function () {
  function ElementDragging(el) {
    this.emitter = new EmitterMixin();
  }

  ElementDragging.prototype.destroy = function () {};

  ElementDragging.prototype.setMirrorIsVisible = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {// optional if subclass doesn't want to support a mirror
  };

  ElementDragging.prototype.setAutoScrollEnabled = function (bool) {// optional
  };

  return ElementDragging;
}();

function formatDate(dateInput, settings) {
  if (settings === void 0) {
    settings = {};
  }

  var dateEnv = buildDateEnv$1(settings);
  var formatter = createFormatter(settings);
  var dateMeta = dateEnv.createMarkerMeta(dateInput);

  if (!dateMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.format(dateMeta.marker, formatter, {
    forcedTzo: dateMeta.forcedTzo
  });
}

function formatRange(startInput, endInput, settings // mixture of env and formatter settings
) {
  var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object

  var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);
  var startMeta = dateEnv.createMarkerMeta(startInput);
  var endMeta = dateEnv.createMarkerMeta(endInput);

  if (!startMeta || !endMeta) {
    // TODO: warning?
    return '';
  }

  return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
    forcedStartTzo: startMeta.forcedTzo,
    forcedEndTzo: endMeta.forcedTzo,
    isEndExclusive: settings.isEndExclusive
  });
} // TODO: more DRY and optimized


function buildDateEnv$1(settings) {
  var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
  // ensure required settings

  settings = __assign({
    timeZone: globalDefaults.timeZone,
    calendarSystem: 'gregory'
  }, settings, {
    locale: locale
  });
  return new DateEnv(settings);
}

var DRAG_META_PROPS = {
  startTime: createDuration,
  duration: createDuration,
  create: Boolean,
  sourceId: String
};
var DRAG_META_DEFAULTS = {
  create: true
};

function parseDragMeta(raw) {
  var leftoverProps = {};
  var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);
  refined.leftoverProps = leftoverProps;
  return refined;
} // Computes a default column header formatting string if `colFormat` is not explicitly defined


function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
  // if more than one week row, or if there are a lot of columns with not much space,
  // put just the day numbers will be in each cell
  if (!datesRepDistinctDays || dayCnt > 10) {
    return {
      weekday: 'short'
    }; // "Sat"
  } else if (dayCnt > 1) {
    return {
      weekday: 'short',
      month: 'numeric',
      day: 'numeric',
      omitCommas: true
    }; // "Sat 11/12"
  } else {
    return {
      weekday: 'long'
    }; // "Saturday"
  }
}

function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {
  var view = context.view,
      dateEnv = context.dateEnv,
      theme = context.theme,
      options = context.options;
  var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.

  var classNames = ['fc-day-header', theme.getClass('widgetHeader')];
  var innerHtml;

  if (typeof options.columnHeaderHtml === 'function') {
    innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));
  } else if (typeof options.columnHeaderText === 'function') {
    innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));
  } else {
    innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));
  } // if only one row of days, the classNames on the header can represent the specific days beneath


  if (datesRepDistinctDays) {
    classNames = classNames.concat( // includes the day-of-week class
    // noThemeHighlight=true (don't highlight the header)
    getDayClasses(dateMarker, dateProfile, context, true));
  } else {
    classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class
  }

  return '' + '<th class="' + classNames.join(' ') + '"' + (isDateValid && datesRepDistinctDays ? ' data-date="' + dateEnv.formatIso(dateMarker, {
    omitTime: true
  }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
  buildGotoAnchorHtml(view, {
    date: dateMarker,
    forceOff: !datesRepDistinctDays || colCnt === 1
  }, innerHtml) : // if not valid, display text, but no link
  innerHtml) + '</th>';
}

var DayHeader =
/** @class */
function (_super) {
  __extends(DayHeader, _super);

  function DayHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.innerHTML = ''; // because might be nbsp

    parentEl.appendChild(_this.el = htmlToElement('<div class="fc-row ' + _this.theme.getClass('headerRow') + '">' + '<table class="' + _this.theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    _this.thead = _this.el.querySelector('thead');
    return _this;
  }

  DayHeader.prototype.destroy = function () {
    removeElement(this.el);
  };

  DayHeader.prototype.render = function (props) {
    var dates = props.dates,
        datesRepDistinctDays = props.datesRepDistinctDays;
    var parts = [];

    if (props.renderIntroHtml) {
      parts.push(props.renderIntroHtml());
    }

    var colHeadFormat = createFormatter(this.opt('columnHeaderFormat') || computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, this.context));
    }

    if (this.isRtl) {
      parts.reverse();
    }

    this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';
  };

  return DayHeader;
}(Component);

var DaySeries =
/** @class */
function () {
  function DaySeries(range, dateProfileGenerator) {
    var date = range.start;
    var end = range.end;
    var indices = [];
    var dates = [];
    var dayIndex = -1;

    while (date < end) {
      // loop each day from start to end
      if (dateProfileGenerator.isHiddenDay(date)) {
        indices.push(dayIndex + 0.5); // mark that it's between indices
      } else {
        dayIndex++;
        indices.push(dayIndex);
        dates.push(date);
      }

      date = addDays(date, 1);
    }

    this.dates = dates;
    this.indices = indices;
    this.cnt = dates.length;
  }

  DaySeries.prototype.sliceRange = function (range) {
    var firstIndex = this.getDateDayIndex(range.start); // inclusive first index

    var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index

    var clippedFirstIndex = Math.max(0, firstIndex);
    var clippedLastIndex = Math.min(this.cnt - 1, lastIndex); // deal with in-between indices

    clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell

    clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell

    if (clippedFirstIndex <= clippedLastIndex) {
      return {
        firstIndex: clippedFirstIndex,
        lastIndex: clippedLastIndex,
        isStart: firstIndex === clippedFirstIndex,
        isEnd: lastIndex === clippedLastIndex
      };
    } else {
      return null;
    }
  }; // Given a date, returns its chronolocial cell-index from the first cell of the grid.
  // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
  // If before the first offset, returns a negative number.
  // If after the last offset, returns an offset past the last cell offset.
  // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.


  DaySeries.prototype.getDateDayIndex = function (date) {
    var indices = this.indices;
    var dayOffset = Math.floor(diffDays(this.dates[0], date));

    if (dayOffset < 0) {
      return indices[0] - 1;
    } else if (dayOffset >= indices.length) {
      return indices[indices.length - 1] + 1;
    } else {
      return indices[dayOffset];
    }
  };

  return DaySeries;
}();

var DayTable =
/** @class */
function () {
  function DayTable(daySeries, breakOnWeeks) {
    var dates = daySeries.dates;
    var daysPerRow;
    var firstDay;
    var rowCnt;

    if (breakOnWeeks) {
      // count columns until the day-of-week repeats
      firstDay = dates[0].getUTCDay();

      for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {
        if (dates[daysPerRow].getUTCDay() === firstDay) {
          break;
        }
      }

      rowCnt = Math.ceil(dates.length / daysPerRow);
    } else {
      rowCnt = 1;
      daysPerRow = dates.length;
    }

    this.rowCnt = rowCnt;
    this.colCnt = daysPerRow;
    this.daySeries = daySeries;
    this.cells = this.buildCells();
    this.headerDates = this.buildHeaderDates();
  }

  DayTable.prototype.buildCells = function () {
    var rows = [];

    for (var row = 0; row < this.rowCnt; row++) {
      var cells = [];

      for (var col = 0; col < this.colCnt; col++) {
        cells.push(this.buildCell(row, col));
      }

      rows.push(cells);
    }

    return rows;
  };

  DayTable.prototype.buildCell = function (row, col) {
    return {
      date: this.daySeries.dates[row * this.colCnt + col]
    };
  };

  DayTable.prototype.buildHeaderDates = function () {
    var dates = [];

    for (var col = 0; col < this.colCnt; col++) {
      dates.push(this.cells[0][col].date);
    }

    return dates;
  };

  DayTable.prototype.sliceRange = function (range) {
    var colCnt = this.colCnt;
    var seriesSeg = this.daySeries.sliceRange(range);
    var segs = [];

    if (seriesSeg) {
      var firstIndex = seriesSeg.firstIndex,
          lastIndex = seriesSeg.lastIndex;
      var index = firstIndex;

      while (index <= lastIndex) {
        var row = Math.floor(index / colCnt);
        var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
        segs.push({
          row: row,
          firstCol: index % colCnt,
          lastCol: (nextIndex - 1) % colCnt,
          isStart: seriesSeg.isStart && index === firstIndex,
          isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
        });
        index = nextIndex;
      }
    }

    return segs;
  };

  return DayTable;
}();

var Slicer =
/** @class */
function () {
  function Slicer() {
    this.sliceBusinessHours = memoize(this._sliceBusinessHours);
    this.sliceDateSelection = memoize(this._sliceDateSpan);
    this.sliceEventStore = memoize(this._sliceEventStore);
    this.sliceEventDrag = memoize(this._sliceInteraction);
    this.sliceEventResize = memoize(this._sliceInteraction);
  }

  Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 4; _i < arguments.length; _i++) {
      extraArgs[_i - 4] = arguments[_i];
    }

    var eventUiBases = props.eventUiBases;
    var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));
    return {
      dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),
      businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      fgEventSegs: eventSegs.fg,
      bgEventSegs: eventSegs.bg,
      eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
      eventSelection: props.eventSelection
    }; // TODO: give interactionSegs?
  };

  Slicer.prototype.sliceNowDate = function ( // does not memoize
  date, component) {
    var extraArgs = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      extraArgs[_i - 2] = arguments[_i];
    }

    return this._sliceDateSpan.apply(this, [{
      range: {
        start: date,
        end: addMs(date, 1)
      },
      allDay: false
    }, {}, component].concat(extraArgs));
  };

  Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 4; _i < arguments.length; _i++) {
      extraArgs[_i - 4] = arguments[_i];
    }

    if (!businessHours) {
      return [];
    }

    return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), component.calendar), {}, dateProfile, nextDayThreshold, component].concat(extraArgs)).bg;
  };

  Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (eventStore) {
      var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
      return {
        bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),
        fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)
      };
    } else {
      return {
        bg: [],
        fg: []
      };
    }
  };

  Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {
    var extraArgs = [];

    for (var _i = 5; _i < arguments.length; _i++) {
      extraArgs[_i - 5] = arguments[_i];
    }

    if (!interaction) {
      return null;
    }

    var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
    return {
      segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),
      affectedInstances: interaction.affectedEvents.instances,
      isEvent: interaction.isEvent,
      sourceSeg: interaction.origSeg
    };
  };

  Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {
    var extraArgs = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      extraArgs[_i - 3] = arguments[_i];
    }

    if (!dateSpan) {
      return [];
    }

    var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.calendar);
    var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));

    for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {
      var seg = segs_1[_a];
      seg.component = component;
      seg.eventRange = eventRange;
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill
  extraArgs) {
    var segs = [];

    for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
      var eventRange = eventRanges_1[_i];
      segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));
    }

    return segs;
  };
  /*
  "complete" seg means it has component and eventRange
  */


  Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill
  extraArgs) {
    var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      seg.component = component;
      seg.eventRange = eventRange;
      seg.isStart = eventRange.isStart && seg.isStart;
      seg.isEnd = eventRange.isEnd && seg.isEnd;
    }

    return segs;
  };

  return Slicer;
}();
/*
for incorporating minTime/maxTime if appropriate
TODO: should be part of DateProfile!
TimelineDateProfile already does this btw
*/


function computeActiveRange(dateProfile, isComponentAllDay) {
  var range = dateProfile.activeRange;

  if (isComponentAllDay) {
    return range;
  }

  return {
    start: addMs(range.start, dateProfile.minTime.milliseconds),
    end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day

  };
} // exports
// --------------------------------------------------------------------------------------------------


var version = '4.3.1';


/***/ }),

/***/ "./node_modules/@fullcalendar/interaction/main.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/main.esm.js ***!
  \************************************************************/
/*! exports provided: default, Draggable, FeaturefulElementDragging, PointerDragging, ThirdPartyDraggable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Draggable", function() { return ExternalDraggable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeaturefulElementDragging", function() { return FeaturefulElementDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointerDragging", function() { return PointerDragging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThirdPartyDraggable", function() { return ThirdPartyDraggable; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Interaction Plugin v4.3.0
Docs & License: https://fullcalendar.io/
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait = 500;
var ignoreMouseDepth = 0;
var listenerCnt = 0;
var isWindowTouchMoveCancelled = false;
/*
Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
Tracks when the pointer "drags" on a certain element, meaning down+move+up.

Also, tracks if there was touch-scrolling.
Also, can prevent touch-scrolling from happening.
Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.

emits:
- pointerdown
- pointermove
- pointerup
*/

var PointerDragging =
/** @class */
function () {
  function PointerDragging(containerEl) {
    var _this = this;

    this.subjectEl = null;
    this.downEl = null; // options that can be directly assigned by caller

    this.selector = ''; // will cause subjectEl in all emitted events to be this element

    this.handleSelector = '';
    this.shouldIgnoreMove = false;
    this.shouldWatchScroll = true; // for simulating pointermove on scroll
    // internal states

    this.isDragging = false;
    this.isTouchDragging = false;
    this.wasTouchScroll = false; // Mouse
    // ----------------------------------------------------------------------------------------------------

    this.handleMouseDown = function (ev) {
      if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {
        var pev = _this.createEventFromMouse(ev, true);

        _this.emitter.trigger('pointerdown', pev);

        _this.initScrollWatch(pev);

        if (!_this.shouldIgnoreMove) {
          document.addEventListener('mousemove', _this.handleMouseMove);
        }

        document.addEventListener('mouseup', _this.handleMouseUp);
      }
    };

    this.handleMouseMove = function (ev) {
      var pev = _this.createEventFromMouse(ev);

      _this.recordCoords(pev);

      _this.emitter.trigger('pointermove', pev);
    };

    this.handleMouseUp = function (ev) {
      document.removeEventListener('mousemove', _this.handleMouseMove);
      document.removeEventListener('mouseup', _this.handleMouseUp);

      _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));

      _this.cleanup(); // call last so that pointerup has access to props

    }; // Touch
    // ----------------------------------------------------------------------------------------------------


    this.handleTouchStart = function (ev) {
      if (_this.tryStart(ev)) {
        _this.isTouchDragging = true;

        var pev = _this.createEventFromTouch(ev, true);

        _this.emitter.trigger('pointerdown', pev);

        _this.initScrollWatch(pev); // unlike mouse, need to attach to target, not document
        // https://stackoverflow.com/a/45760014


        var target = ev.target;

        if (!_this.shouldIgnoreMove) {
          target.addEventListener('touchmove', _this.handleTouchMove);
        }

        target.addEventListener('touchend', _this.handleTouchEnd);
        target.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end
        // attach a handler to get called when ANY scroll action happens on the page.
        // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
        // http://stackoverflow.com/a/32954565/96342

        window.addEventListener('scroll', _this.handleTouchScroll, true // useCapture
        );
      }
    };

    this.handleTouchMove = function (ev) {
      var pev = _this.createEventFromTouch(ev);

      _this.recordCoords(pev);

      _this.emitter.trigger('pointermove', pev);
    };

    this.handleTouchEnd = function (ev) {
      if (_this.isDragging) {
        // done to guard against touchend followed by touchcancel
        var target = ev.target;
        target.removeEventListener('touchmove', _this.handleTouchMove);
        target.removeEventListener('touchend', _this.handleTouchEnd);
        target.removeEventListener('touchcancel', _this.handleTouchEnd);
        window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true

        _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));

        _this.cleanup(); // call last so that pointerup has access to props


        _this.isTouchDragging = false;
        startIgnoringMouse();
      }
    };

    this.handleTouchScroll = function () {
      _this.wasTouchScroll = true;
    };

    this.handleScroll = function (ev) {
      if (!_this.shouldIgnoreMove) {
        var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;
        var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;

        _this.emitter.trigger('pointermove', {
          origEvent: ev,
          isTouch: _this.isTouchDragging,
          subjectEl: _this.subjectEl,
          pageX: pageX,
          pageY: pageY,
          deltaX: pageX - _this.origPageX,
          deltaY: pageY - _this.origPageY
        });
      }
    };

    this.containerEl = containerEl;
    this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
    containerEl.addEventListener('mousedown', this.handleMouseDown);
    containerEl.addEventListener('touchstart', this.handleTouchStart, {
      passive: true
    });
    listenerCreated();
  }

  PointerDragging.prototype.destroy = function () {
    this.containerEl.removeEventListener('mousedown', this.handleMouseDown);
    this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {
      passive: true
    });
    listenerDestroyed();
  };

  PointerDragging.prototype.tryStart = function (ev) {
    var subjectEl = this.querySubjectEl(ev);
    var downEl = ev.target;

    if (subjectEl && (!this.handleSelector || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(downEl, this.handleSelector))) {
      this.subjectEl = subjectEl;
      this.downEl = downEl;
      this.isDragging = true; // do this first so cancelTouchScroll will work

      this.wasTouchScroll = false;
      return true;
    }

    return false;
  };

  PointerDragging.prototype.cleanup = function () {
    isWindowTouchMoveCancelled = false;
    this.isDragging = false;
    this.subjectEl = null;
    this.downEl = null; // keep wasTouchScroll around for later access

    this.destroyScrollWatch();
  };

  PointerDragging.prototype.querySubjectEl = function (ev) {
    if (this.selector) {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.target, this.selector);
    } else {
      return this.containerEl;
    }
  };

  PointerDragging.prototype.shouldIgnoreMouse = function () {
    return ignoreMouseDepth || this.isTouchDragging;
  }; // can be called by user of this class, to cancel touch-based scrolling for the current drag


  PointerDragging.prototype.cancelTouchScroll = function () {
    if (this.isDragging) {
      isWindowTouchMoveCancelled = true;
    }
  }; // Scrolling that simulates pointermoves
  // ----------------------------------------------------------------------------------------------------


  PointerDragging.prototype.initScrollWatch = function (ev) {
    if (this.shouldWatchScroll) {
      this.recordCoords(ev);
      window.addEventListener('scroll', this.handleScroll, true); // useCapture=true
    }
  };

  PointerDragging.prototype.recordCoords = function (ev) {
    if (this.shouldWatchScroll) {
      this.prevPageX = ev.pageX;
      this.prevPageY = ev.pageY;
      this.prevScrollX = window.pageXOffset;
      this.prevScrollY = window.pageYOffset;
    }
  };

  PointerDragging.prototype.destroyScrollWatch = function () {
    if (this.shouldWatchScroll) {
      window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true
    }
  }; // Event Normalization
  // ----------------------------------------------------------------------------------------------------


  PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {
    var deltaX = 0;
    var deltaY = 0; // TODO: repeat code

    if (isFirst) {
      this.origPageX = ev.pageX;
      this.origPageY = ev.pageY;
    } else {
      deltaX = ev.pageX - this.origPageX;
      deltaY = ev.pageY - this.origPageY;
    }

    return {
      origEvent: ev,
      isTouch: false,
      subjectEl: this.subjectEl,
      pageX: ev.pageX,
      pageY: ev.pageY,
      deltaX: deltaX,
      deltaY: deltaY
    };
  };

  PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {
    var touches = ev.touches;
    var pageX;
    var pageY;
    var deltaX = 0;
    var deltaY = 0; // if touch coords available, prefer,
    // because FF would give bad ev.pageX ev.pageY

    if (touches && touches.length) {
      pageX = touches[0].pageX;
      pageY = touches[0].pageY;
    } else {
      pageX = ev.pageX;
      pageY = ev.pageY;
    } // TODO: repeat code


    if (isFirst) {
      this.origPageX = pageX;
      this.origPageY = pageY;
    } else {
      deltaX = pageX - this.origPageX;
      deltaY = pageY - this.origPageY;
    }

    return {
      origEvent: ev,
      isTouch: true,
      subjectEl: this.subjectEl,
      pageX: pageX,
      pageY: pageY,
      deltaX: deltaX,
      deltaY: deltaY
    };
  };

  return PointerDragging;
}(); // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)


function isPrimaryMouseButton(ev) {
  return ev.button === 0 && !ev.ctrlKey;
} // Ignoring fake mouse events generated by touch
// ----------------------------------------------------------------------------------------------------


function startIgnoringMouse() {
  ignoreMouseDepth++;
  setTimeout(function () {
    ignoreMouseDepth--;
  }, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait);
} // We want to attach touchmove as early as possible for Safari
// ----------------------------------------------------------------------------------------------------


function listenerCreated() {
  if (!listenerCnt++) {
    window.addEventListener('touchmove', onWindowTouchMove, {
      passive: false
    });
  }
}

function listenerDestroyed() {
  if (! --listenerCnt) {
    window.removeEventListener('touchmove', onWindowTouchMove, {
      passive: false
    });
  }
}

function onWindowTouchMove(ev) {
  if (isWindowTouchMoveCancelled) {
    ev.preventDefault();
  }
}
/*
An effect in which an element follows the movement of a pointer across the screen.
The moving element is a clone of some other element.
Must call start + handleMove + stop.
*/


var ElementMirror =
/** @class */
function () {
  function ElementMirror() {
    this.isVisible = false; // must be explicitly enabled

    this.sourceEl = null;
    this.mirrorEl = null;
    this.sourceElRect = null; // screen coords relative to viewport
    // options that can be set directly by caller

    this.parentNode = document.body;
    this.zIndex = 9999;
    this.revertDuration = 0;
  }

  ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {
    this.sourceEl = sourceEl;
    this.sourceElRect = this.sourceEl.getBoundingClientRect();
    this.origScreenX = pageX - window.pageXOffset;
    this.origScreenY = pageY - window.pageYOffset;
    this.deltaX = 0;
    this.deltaY = 0;
    this.updateElPosition();
  };

  ElementMirror.prototype.handleMove = function (pageX, pageY) {
    this.deltaX = pageX - window.pageXOffset - this.origScreenX;
    this.deltaY = pageY - window.pageYOffset - this.origScreenY;
    this.updateElPosition();
  }; // can be called before start


  ElementMirror.prototype.setIsVisible = function (bool) {
    if (bool) {
      if (!this.isVisible) {
        if (this.mirrorEl) {
          this.mirrorEl.style.display = '';
        }

        this.isVisible = bool; // needs to happen before updateElPosition

        this.updateElPosition(); // because was not updating the position while invisible
      }
    } else {
      if (this.isVisible) {
        if (this.mirrorEl) {
          this.mirrorEl.style.display = 'none';
        }

        this.isVisible = bool;
      }
    }
  }; // always async


  ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {
    var _this = this;

    var done = function () {
      _this.cleanup();

      callback();
    };

    if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && ( // if 0, transition won't work
    this.deltaX || this.deltaY) // if same coords, transition won't work
    ) {
        this.doRevertAnimation(done, this.revertDuration);
      } else {
      setTimeout(done, 0);
    }
  };

  ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {
    var mirrorEl = this.mirrorEl;
    var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened

    mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
      left: finalSourceElRect.left,
      top: finalSourceElRect.top
    });
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["whenTransitionDone"])(mirrorEl, function () {
      mirrorEl.style.transition = '';
      callback();
    });
  };

  ElementMirror.prototype.cleanup = function () {
    if (this.mirrorEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.mirrorEl);
      this.mirrorEl = null;
    }

    this.sourceEl = null;
  };

  ElementMirror.prototype.updateElPosition = function () {
    if (this.sourceEl && this.isVisible) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.getMirrorEl(), {
        left: this.sourceElRect.left + this.deltaX,
        top: this.sourceElRect.top + this.deltaY
      });
    }
  };

  ElementMirror.prototype.getMirrorEl = function () {
    var sourceElRect = this.sourceElRect;
    var mirrorEl = this.mirrorEl;

    if (!mirrorEl) {
      mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true
      // we don't want long taps or any mouse interaction causing selection/menus.
      // would use preventSelection(), but that prevents selectstart, causing problems.

      mirrorEl.classList.add('fc-unselectable');
      mirrorEl.classList.add('fc-dragging');
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
        position: 'fixed',
        zIndex: this.zIndex,
        visibility: '',
        boxSizing: 'border-box',
        width: sourceElRect.right - sourceElRect.left,
        height: sourceElRect.bottom - sourceElRect.top,
        right: 'auto',
        bottom: 'auto',
        margin: 0
      });
      this.parentNode.appendChild(mirrorEl);
    }

    return mirrorEl;
  };

  return ElementMirror;
}();
/*
Is a cache for a given element's scroll information (all the info that ScrollController stores)
in addition the "client rectangle" of the element.. the area within the scrollbars.

The cache can be in one of two modes:
- doesListening:false - ignores when the container is scrolled by someone else
- doesListening:true - watch for scrolling and update the cache
*/


var ScrollGeomCache =
/** @class */
function (_super) {
  __extends(ScrollGeomCache, _super);

  function ScrollGeomCache(scrollController, doesListening) {
    var _this = _super.call(this) || this;

    _this.handleScroll = function () {
      _this.scrollTop = _this.scrollController.getScrollTop();
      _this.scrollLeft = _this.scrollController.getScrollLeft();

      _this.handleScrollChange();
    };

    _this.scrollController = scrollController;
    _this.doesListening = doesListening;
    _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();
    _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();
    _this.scrollWidth = scrollController.getScrollWidth();
    _this.scrollHeight = scrollController.getScrollHeight();
    _this.clientWidth = scrollController.getClientWidth();
    _this.clientHeight = scrollController.getClientHeight();
    _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values

    if (_this.doesListening) {
      _this.getEventTarget().addEventListener('scroll', _this.handleScroll);
    }

    return _this;
  }

  ScrollGeomCache.prototype.destroy = function () {
    if (this.doesListening) {
      this.getEventTarget().removeEventListener('scroll', this.handleScroll);
    }
  };

  ScrollGeomCache.prototype.getScrollTop = function () {
    return this.scrollTop;
  };

  ScrollGeomCache.prototype.getScrollLeft = function () {
    return this.scrollLeft;
  };

  ScrollGeomCache.prototype.setScrollTop = function (top) {
    this.scrollController.setScrollTop(top);

    if (!this.doesListening) {
      // we are not relying on the element to normalize out-of-bounds scroll values
      // so we need to sanitize ourselves
      this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);
      this.handleScrollChange();
    }
  };

  ScrollGeomCache.prototype.setScrollLeft = function (top) {
    this.scrollController.setScrollLeft(top);

    if (!this.doesListening) {
      // we are not relying on the element to normalize out-of-bounds scroll values
      // so we need to sanitize ourselves
      this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);
      this.handleScrollChange();
    }
  };

  ScrollGeomCache.prototype.getClientWidth = function () {
    return this.clientWidth;
  };

  ScrollGeomCache.prototype.getClientHeight = function () {
    return this.clientHeight;
  };

  ScrollGeomCache.prototype.getScrollWidth = function () {
    return this.scrollWidth;
  };

  ScrollGeomCache.prototype.getScrollHeight = function () {
    return this.scrollHeight;
  };

  ScrollGeomCache.prototype.handleScrollChange = function () {};

  return ScrollGeomCache;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollController"]);

var ElementScrollGeomCache =
/** @class */
function (_super) {
  __extends(ElementScrollGeomCache, _super);

  function ElementScrollGeomCache(el, doesListening) {
    return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementScrollController"](el), doesListening) || this;
  }

  ElementScrollGeomCache.prototype.getEventTarget = function () {
    return this.scrollController.el;
  };

  ElementScrollGeomCache.prototype.computeClientRect = function () {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeInnerRect"])(this.scrollController.el);
  };

  return ElementScrollGeomCache;
}(ScrollGeomCache);

var WindowScrollGeomCache =
/** @class */
function (_super) {
  __extends(WindowScrollGeomCache, _super);

  function WindowScrollGeomCache(doesListening) {
    return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["WindowScrollController"](), doesListening) || this;
  }

  WindowScrollGeomCache.prototype.getEventTarget = function () {
    return window;
  };

  WindowScrollGeomCache.prototype.computeClientRect = function () {
    return {
      left: this.scrollLeft,
      right: this.scrollLeft + this.clientWidth,
      top: this.scrollTop,
      bottom: this.scrollTop + this.clientHeight
    };
  }; // the window is the only scroll object that changes it's rectangle relative
  // to the document's topleft as it scrolls


  WindowScrollGeomCache.prototype.handleScrollChange = function () {
    this.clientRect = this.computeClientRect();
  };

  return WindowScrollGeomCache;
}(ScrollGeomCache); // If available we are using native "performance" API instead of "Date"
// Read more about it on MDN:
// https://developer.mozilla.org/en-US/docs/Web/API/Performance


var getTime = typeof performance === 'function' ? performance.now : Date.now;
/*
For a pointer interaction, automatically scrolls certain scroll containers when the pointer
approaches the edge.

The caller must call start + handleMove + stop.
*/

var AutoScroller =
/** @class */
function () {
  function AutoScroller() {
    var _this = this; // options that can be set by caller


    this.isEnabled = true;
    this.scrollQuery = [window, '.fc-scroller'];
    this.edgeThreshold = 50; // pixels

    this.maxVelocity = 300; // pixels per second
    // internal state

    this.pointerScreenX = null;
    this.pointerScreenY = null;
    this.isAnimating = false;
    this.scrollCaches = null; // protect against the initial pointerdown being too close to an edge and starting the scroll

    this.everMovedUp = false;
    this.everMovedDown = false;
    this.everMovedLeft = false;
    this.everMovedRight = false;

    this.animate = function () {
      if (_this.isAnimating) {
        // wasn't cancelled between animation calls
        var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);

        if (edge) {
          var now = getTime();

          _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);

          _this.requestAnimation(now);
        } else {
          _this.isAnimating = false; // will stop animation
        }
      }
    };
  }

  AutoScroller.prototype.start = function (pageX, pageY) {
    if (this.isEnabled) {
      this.scrollCaches = this.buildCaches();
      this.pointerScreenX = null;
      this.pointerScreenY = null;
      this.everMovedUp = false;
      this.everMovedDown = false;
      this.everMovedLeft = false;
      this.everMovedRight = false;
      this.handleMove(pageX, pageY);
    }
  };

  AutoScroller.prototype.handleMove = function (pageX, pageY) {
    if (this.isEnabled) {
      var pointerScreenX = pageX - window.pageXOffset;
      var pointerScreenY = pageY - window.pageYOffset;
      var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;
      var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;

      if (yDelta < 0) {
        this.everMovedUp = true;
      } else if (yDelta > 0) {
        this.everMovedDown = true;
      }

      if (xDelta < 0) {
        this.everMovedLeft = true;
      } else if (xDelta > 0) {
        this.everMovedRight = true;
      }

      this.pointerScreenX = pointerScreenX;
      this.pointerScreenY = pointerScreenY;

      if (!this.isAnimating) {
        this.isAnimating = true;
        this.requestAnimation(getTime());
      }
    }
  };

  AutoScroller.prototype.stop = function () {
    if (this.isEnabled) {
      this.isAnimating = false; // will stop animation

      for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
        var scrollCache = _a[_i];
        scrollCache.destroy();
      }

      this.scrollCaches = null;
    }
  };

  AutoScroller.prototype.requestAnimation = function (now) {
    this.msSinceRequest = now;
    requestAnimationFrame(this.animate);
  };

  AutoScroller.prototype.handleSide = function (edge, seconds) {
    var scrollCache = edge.scrollCache;
    var edgeThreshold = this.edgeThreshold;
    var invDistance = edgeThreshold - edge.distance;
    var velocity = // the closer to the edge, the faster we scroll
    invDistance * invDistance / (edgeThreshold * edgeThreshold) * // quadratic
    this.maxVelocity * seconds;
    var sign = 1;

    switch (edge.name) {
      case 'left':
        sign = -1;
      // falls through

      case 'right':
        scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);
        break;

      case 'top':
        sign = -1;
      // falls through

      case 'bottom':
        scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);
        break;
    }
  }; // left/top are relative to document topleft


  AutoScroller.prototype.computeBestEdge = function (left, top) {
    var edgeThreshold = this.edgeThreshold;
    var bestSide = null;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      var rect = scrollCache.clientRect;
      var leftDist = left - rect.left;
      var rightDist = rect.right - left;
      var topDist = top - rect.top;
      var bottomDist = rect.bottom - top; // completely within the rect?

      if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {
        if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'top',
            distance: topDist
          };
        }

        if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'bottom',
            distance: bottomDist
          };
        }

        if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'left',
            distance: leftDist
          };
        }

        if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {
          bestSide = {
            scrollCache: scrollCache,
            name: 'right',
            distance: rightDist
          };
        }
      }
    }

    return bestSide;
  };

  AutoScroller.prototype.buildCaches = function () {
    return this.queryScrollEls().map(function (el) {
      if (el === window) {
        return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls
      } else {
        return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls
      }
    });
  };

  AutoScroller.prototype.queryScrollEls = function () {
    var els = [];

    for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {
      var query = _a[_i];

      if (typeof query === 'object') {
        els.push(query);
      } else {
        els.push.apply(els, Array.prototype.slice.call(document.querySelectorAll(query)));
      }
    }

    return els;
  };

  return AutoScroller;
}();
/*
Monitors dragging on an element. Has a number of high-level features:
- minimum distance required before dragging
- minimum wait time ("delay") before dragging
- a mirror element that follows the pointer
*/


var FeaturefulElementDragging =
/** @class */
function (_super) {
  __extends(FeaturefulElementDragging, _super);

  function FeaturefulElementDragging(containerEl) {
    var _this = _super.call(this, containerEl) || this; // options that can be directly set by caller
    // the caller can also set the PointerDragging's options as well


    _this.delay = null;
    _this.minDistance = 0;
    _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag

    _this.mirrorNeedsRevert = false;
    _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup

    _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation

    _this.isDelayEnded = false;
    _this.isDistanceSurpassed = false;
    _this.delayTimeoutId = null;

    _this.onPointerDown = function (ev) {
      if (!_this.isDragging) {
        // so new drag doesn't happen while revert animation is going
        _this.isInteracting = true;
        _this.isDelayEnded = false;
        _this.isDistanceSurpassed = false;
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventSelection"])(document.body);
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventContextMenu"])(document.body); // prevent links from being visited if there's an eventual drag.
        // also prevents selection in older browsers (maybe?).
        // not necessary for touch, besides, browser would complain about passiveness.

        if (!ev.isTouch) {
          ev.origEvent.preventDefault();
        }

        _this.emitter.trigger('pointerdown', ev);

        if (!_this.pointer.shouldIgnoreMove) {
          // actions related to initiating dragstart+dragmove+dragend...
          _this.mirror.setIsVisible(false); // reset. caller must set-visible


          _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down


          _this.startDelay(ev);

          if (!_this.minDistance) {
            _this.handleDistanceSurpassed(ev);
          }
        }
      }
    };

    _this.onPointerMove = function (ev) {
      if (_this.isInteracting) {
        // if false, still waiting for previous drag's revert
        _this.emitter.trigger('pointermove', ev);

        if (!_this.isDistanceSurpassed) {
          var minDistance = _this.minDistance;
          var distanceSq = void 0; // current distance from the origin, squared

          var deltaX = ev.deltaX,
              deltaY = ev.deltaY;
          distanceSq = deltaX * deltaX + deltaY * deltaY;

          if (distanceSq >= minDistance * minDistance) {
            // use pythagorean theorem
            _this.handleDistanceSurpassed(ev);
          }
        }

        if (_this.isDragging) {
          // a real pointer move? (not one simulated by scrolling)
          if (ev.origEvent.type !== 'scroll') {
            _this.mirror.handleMove(ev.pageX, ev.pageY);

            _this.autoScroller.handleMove(ev.pageX, ev.pageY);
          }

          _this.emitter.trigger('dragmove', ev);
        }
      }
    };

    _this.onPointerUp = function (ev) {
      if (_this.isInteracting) {
        // if false, still waiting for previous drag's revert
        _this.isInteracting = false;
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowSelection"])(document.body);
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowContextMenu"])(document.body);

        _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert


        if (_this.isDragging) {
          _this.autoScroller.stop();

          _this.tryStopDrag(ev); // which will stop the mirror

        }

        if (_this.delayTimeoutId) {
          clearTimeout(_this.delayTimeoutId);
          _this.delayTimeoutId = null;
        }
      }
    };

    var pointer = _this.pointer = new PointerDragging(containerEl);
    pointer.emitter.on('pointerdown', _this.onPointerDown);
    pointer.emitter.on('pointermove', _this.onPointerMove);
    pointer.emitter.on('pointerup', _this.onPointerUp);
    _this.mirror = new ElementMirror();
    _this.autoScroller = new AutoScroller();
    return _this;
  }

  FeaturefulElementDragging.prototype.destroy = function () {
    this.pointer.destroy();
  };

  FeaturefulElementDragging.prototype.startDelay = function (ev) {
    var _this = this;

    if (typeof this.delay === 'number') {
      this.delayTimeoutId = setTimeout(function () {
        _this.delayTimeoutId = null;

        _this.handleDelayEnd(ev);
      }, this.delay); // not assignable to number!
    } else {
      this.handleDelayEnd(ev);
    }
  };

  FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {
    this.isDelayEnded = true;
    this.tryStartDrag(ev);
  };

  FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {
    this.isDistanceSurpassed = true;
    this.tryStartDrag(ev);
  };

  FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {
    if (this.isDelayEnded && this.isDistanceSurpassed) {
      if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {
        this.isDragging = true;
        this.mirrorNeedsRevert = false;
        this.autoScroller.start(ev.pageX, ev.pageY);
        this.emitter.trigger('dragstart', ev);

        if (this.touchScrollAllowed === false) {
          this.pointer.cancelTouchScroll();
        }
      }
    }
  };

  FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {
    // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
    // that come from the document to fire beforehand. much more convenient this way.
    this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev) // bound with args
    );
  };

  FeaturefulElementDragging.prototype.stopDrag = function (ev) {
    this.isDragging = false;
    this.emitter.trigger('dragend', ev);
  }; // fill in the implementations...


  FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {
    this.pointer.shouldIgnoreMove = bool;
  };

  FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {
    this.mirror.setIsVisible(bool);
  };

  FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {
    this.mirrorNeedsRevert = bool;
  };

  FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {
    this.autoScroller.isEnabled = bool;
  };

  return FeaturefulElementDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
/*
When this class is instantiated, it records the offset of an element (relative to the document topleft),
and continues to monitor scrolling, updating the cached coordinates if it needs to.
Does not access the DOM after instantiation, so highly performant.

Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
and an determine if a given point is inside the combined clipping rectangle.
*/


var OffsetTracker =
/** @class */
function () {
  function OffsetTracker(el) {
    this.origRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(el); // will work fine for divs that have overflow:hidden

    this.scrollCaches = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getClippingParents"])(el).map(function (el) {
      return new ElementScrollGeomCache(el, true); // listen=true
    });
  }

  OffsetTracker.prototype.destroy = function () {
    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      scrollCache.destroy();
    }
  };

  OffsetTracker.prototype.computeLeft = function () {
    var left = this.origRect.left;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();
    }

    return left;
  };

  OffsetTracker.prototype.computeTop = function () {
    var top = this.origRect.top;

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];
      top += scrollCache.origScrollTop - scrollCache.getScrollTop();
    }

    return top;
  };

  OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {
    var point = {
      left: pageX,
      top: pageY
    };

    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
      var scrollCache = _a[_i];

      if (!isIgnoredClipping(scrollCache.getEventTarget()) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["pointInsideRect"])(point, scrollCache.clientRect)) {
        return false;
      }
    }

    return true;
  };

  return OffsetTracker;
}(); // certain clipping containers should never constrain interactions, like <html> and <body>
// https://github.com/fullcalendar/fullcalendar/issues/3615


function isIgnoredClipping(node) {
  var tagName = node.tagName;
  return tagName === 'HTML' || tagName === 'BODY';
}
/*
Tracks movement over multiple droppable areas (aka "hits")
that exist in one or more DateComponents.
Relies on an existing draggable.

emits:
- pointerdown
- dragstart
- hitchange - fires initially, even if not over a hit
- pointerup
- (hitchange - again, to null, if ended over a hit)
- dragend
*/


var HitDragging =
/** @class */
function () {
  function HitDragging(dragging, droppableStore) {
    var _this = this; // options that can be set by caller


    this.useSubjectCenter = false;
    this.requireInitial = true; // if doesn't start out on a hit, won't emit any events

    this.initialHit = null;
    this.movingHit = null;
    this.finalHit = null; // won't ever be populated if shouldIgnoreMove

    this.handlePointerDown = function (ev) {
      var dragging = _this.dragging;
      _this.initialHit = null;
      _this.movingHit = null;
      _this.finalHit = null;

      _this.prepareHits();

      _this.processFirstCoord(ev);

      if (_this.initialHit || !_this.requireInitial) {
        dragging.setIgnoreMove(false);

        _this.emitter.trigger('pointerdown', ev); // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(

      } else {
        dragging.setIgnoreMove(true);
      }
    };

    this.handleDragStart = function (ev) {
      _this.emitter.trigger('dragstart', ev);

      _this.handleMove(ev, true); // force = fire even if initially null

    };

    this.handleDragMove = function (ev) {
      _this.emitter.trigger('dragmove', ev);

      _this.handleMove(ev);
    };

    this.handlePointerUp = function (ev) {
      _this.releaseHits();

      _this.emitter.trigger('pointerup', ev);
    };

    this.handleDragEnd = function (ev) {
      if (_this.movingHit) {
        _this.emitter.trigger('hitupdate', null, true, ev);
      }

      _this.finalHit = _this.movingHit;
      _this.movingHit = null;

      _this.emitter.trigger('dragend', ev);
    };

    this.droppableStore = droppableStore;
    dragging.emitter.on('pointerdown', this.handlePointerDown);
    dragging.emitter.on('dragstart', this.handleDragStart);
    dragging.emitter.on('dragmove', this.handleDragMove);
    dragging.emitter.on('pointerup', this.handlePointerUp);
    dragging.emitter.on('dragend', this.handleDragEnd);
    this.dragging = dragging;
    this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
  } // sets initialHit
  // sets coordAdjust


  HitDragging.prototype.processFirstCoord = function (ev) {
    var origPoint = {
      left: ev.pageX,
      top: ev.pageY
    };
    var adjustedPoint = origPoint;
    var subjectEl = ev.subjectEl;
    var subjectRect;

    if (subjectEl !== document) {
      subjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(subjectEl);
      adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["constrainPoint"])(adjustedPoint, subjectRect);
    }

    var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);

    if (initialHit) {
      if (this.useSubjectCenter && subjectRect) {
        var slicedSubjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRects"])(subjectRect, initialHit.rect);

        if (slicedSubjectRect) {
          adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRectCenter"])(slicedSubjectRect);
        }
      }

      this.coordAdjust = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffPoints"])(adjustedPoint, origPoint);
    } else {
      this.coordAdjust = {
        left: 0,
        top: 0
      };
    }
  };

  HitDragging.prototype.handleMove = function (ev, forceHandle) {
    var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);

    if (forceHandle || !isHitsEqual(this.movingHit, hit)) {
      this.movingHit = hit;
      this.emitter.trigger('hitupdate', hit, false, ev);
    }
  };

  HitDragging.prototype.prepareHits = function () {
    this.offsetTrackers = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(this.droppableStore, function (interactionSettings) {
      interactionSettings.component.buildPositionCaches();
      return new OffsetTracker(interactionSettings.el);
    });
  };

  HitDragging.prototype.releaseHits = function () {
    var offsetTrackers = this.offsetTrackers;

    for (var id in offsetTrackers) {
      offsetTrackers[id].destroy();
    }

    this.offsetTrackers = {};
  };

  HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {
    var _a = this,
        droppableStore = _a.droppableStore,
        offsetTrackers = _a.offsetTrackers;

    var bestHit = null;

    for (var id in droppableStore) {
      var component = droppableStore[id].component;
      var offsetTracker = offsetTrackers[id];

      if (offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {
        var originLeft = offsetTracker.computeLeft();
        var originTop = offsetTracker.computeTop();
        var positionLeft = offsetLeft - originLeft;
        var positionTop = offsetTop - originTop;
        var origRect = offsetTracker.origRect;
        var width = origRect.right - origRect.left;
        var height = origRect.bottom - origRect.top;

        if ( // must be within the element's bounds
        positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {
          var hit = component.queryHit(positionLeft, positionTop, width, height);

          if (hit && ( // make sure the hit is within activeRange, meaning it's not a deal cell
          !component.props.dateProfile || // hack for DayTile
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsRange"])(component.props.dateProfile.activeRange, hit.dateSpan.range)) && (!bestHit || hit.layer > bestHit.layer)) {
            // TODO: better way to re-orient rectangle
            hit.rect.left += originLeft;
            hit.rect.right += originLeft;
            hit.rect.top += originTop;
            hit.rect.bottom += originTop;
            bestHit = hit;
          }
        }
      }
    }

    return bestHit;
  };

  return HitDragging;
}();

function isHitsEqual(hit0, hit1) {
  if (!hit0 && !hit1) {
    return true;
  }

  if (Boolean(hit0) !== Boolean(hit1)) {
    return false;
  }

  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isDateSpansEqual"])(hit0.dateSpan, hit1.dateSpan);
}
/*
Monitors when the user clicks on a specific date/time of a component.
A pointerdown+pointerup on the same "hit" constitutes a click.
*/


var DateClicking =
/** @class */
function (_super) {
  __extends(DateClicking, _super);

  function DateClicking(settings) {
    var _this = _super.call(this, settings) || this;

    _this.handlePointerDown = function (ev) {
      var dragging = _this.dragging; // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired

      dragging.setIgnoreMove(!_this.component.isValidDateDownEl(dragging.pointer.downEl));
    }; // won't even fire if moving was ignored


    _this.handleDragEnd = function (ev) {
      var component = _this.component;
      var pointer = _this.dragging.pointer;

      if (!pointer.wasTouchScroll) {
        var _a = _this.hitDragging,
            initialHit = _a.initialHit,
            finalHit = _a.finalHit;

        if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {
          component.calendar.triggerDateClick(initialHit.dateSpan, initialHit.dayEl, component.view, ev.origEvent);
        }
      }
    };

    var component = settings.component; // we DO want to watch pointer moves because otherwise finalHit won't get populated

    _this.dragging = new FeaturefulElementDragging(component.el);
    _this.dragging.autoScroller.isEnabled = false;
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  DateClicking.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return DateClicking;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);
/*
Tracks when the user selects a portion of time of a component,
constituted by a drag over date cells, with a possible delay at the beginning of the drag.
*/


var DateSelecting =
/** @class */
function (_super) {
  __extends(DateSelecting, _super);

  function DateSelecting(settings) {
    var _this = _super.call(this, settings) || this;

    _this.dragSelection = null;

    _this.handlePointerDown = function (ev) {
      var _a = _this,
          component = _a.component,
          dragging = _a.dragging;
      var canSelect = component.opt('selectable') && component.isValidDateDownEl(ev.origEvent.target); // don't bother to watch expensive moves if component won't do selection

      dragging.setIgnoreMove(!canSelect); // if touch, require user to hold down

      dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null;
    };

    _this.handleDragStart = function (ev) {
      _this.component.calendar.unselect(ev); // unselect previous selections

    };

    _this.handleHitUpdate = function (hit, isFinal) {
      var calendar = _this.component.calendar;
      var dragSelection = null;
      var isInvalid = false;

      if (hit) {
        dragSelection = joinHitsIntoSelection(_this.hitDragging.initialHit, hit, calendar.pluginSystem.hooks.dateSelectionTransformers);

        if (!dragSelection || !_this.component.isDateSelectionValid(dragSelection)) {
          isInvalid = true;
          dragSelection = null;
        }
      }

      if (dragSelection) {
        calendar.dispatch({
          type: 'SELECT_DATES',
          selection: dragSelection
        });
      } else if (!isFinal) {
        // only unselect if moved away while dragging
        calendar.dispatch({
          type: 'UNSELECT_DATES'
        });
      }

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging
      }
    };

    _this.handlePointerUp = function (pev) {
      if (_this.dragSelection) {
        // selection is already rendered, so just need to report selection
        _this.component.calendar.triggerDateSelect(_this.dragSelection, pev);

        _this.dragSelection = null;
      }
    };

    var component = settings.component;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.touchScrollAllowed = false;
    dragging.minDistance = component.opt('selectMinDistance') || 0;
    dragging.autoScroller.isEnabled = component.opt('dragScroll');
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('pointerup', _this.handlePointerUp);
    return _this;
  }

  DateSelecting.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return DateSelecting;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function getComponentTouchDelay(component) {
  var delay = component.opt('selectLongPressDelay');

  if (delay == null) {
    delay = component.opt('longPressDelay');
  }

  return delay;
}

function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {
  var dateSpan0 = hit0.dateSpan;
  var dateSpan1 = hit1.dateSpan;
  var ms = [dateSpan0.range.start, dateSpan0.range.end, dateSpan1.range.start, dateSpan1.range.end];
  ms.sort(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareNumbers"]);
  var props = {};

  for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {
    var transformer = dateSelectionTransformers_1[_i];
    var res = transformer(hit0, hit1);

    if (res === false) {
      return null;
    } else if (res) {
      __assign(props, res);
    }
  }

  props.range = {
    start: ms[0],
    end: ms[3]
  };
  props.allDay = dateSpan0.allDay;
  return props;
}

var EventDragging =
/** @class */
function (_super) {
  __extends(EventDragging, _super);

  function EventDragging(settings) {
    var _this = _super.call(this, settings) || this; // internal state


    _this.subjectSeg = null; // the seg being selected/dragged

    _this.isDragging = false;
    _this.eventRange = null;
    _this.relevantEvents = null; // the events being dragged

    _this.receivingCalendar = null;
    _this.validMutation = null;
    _this.mutatedRelevantEvents = null;

    _this.handlePointerDown = function (ev) {
      var origTarget = ev.origEvent.target;
      var _a = _this,
          component = _a.component,
          dragging = _a.dragging;
      var mirror = dragging.mirror;
      var initialCalendar = component.calendar;
      var subjectSeg = _this.subjectSeg = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(ev.subjectEl);
      var eventRange = _this.eventRange = subjectSeg.eventRange;
      var eventInstanceId = eventRange.instance.instanceId;
      _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(initialCalendar.state.eventStore, eventInstanceId);
      dragging.minDistance = ev.isTouch ? 0 : component.opt('eventDragMinDistance');
      dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet
      ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay$1(component) : null;
      mirror.parentNode = initialCalendar.el;
      mirror.revertDuration = component.opt('dragRevertDuration');
      var isValid = component.isValidSegDownEl(origTarget) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(origTarget, '.fc-resizer'); // NOT on a resizer

      dragging.setIgnoreMove(!isValid); // disable dragging for elements that are resizable (ie, selectable)
      // but are not draggable

      _this.isDragging = isValid && ev.subjectEl.classList.contains('fc-draggable');
    };

    _this.handleDragStart = function (ev) {
      var initialCalendar = _this.component.calendar;
      var eventRange = _this.eventRange;
      var eventInstanceId = eventRange.instance.instanceId;

      if (ev.isTouch) {
        // need to select a different event?
        if (eventInstanceId !== _this.component.props.eventSelection) {
          initialCalendar.dispatch({
            type: 'SELECT_EVENT',
            eventInstanceId: eventInstanceId
          });
        }
      } else {
        // if now using mouse, but was previous touch interaction, clear selected event
        initialCalendar.dispatch({
          type: 'UNSELECT_EVENT'
        });
      }

      if (_this.isDragging) {
        initialCalendar.unselect(ev); // unselect *date* selection

        initialCalendar.publiclyTrigger('eventDragStart', [{
          el: _this.subjectSeg.el,
          event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar, eventRange.def, eventRange.instance),
          jsEvent: ev.origEvent,
          view: _this.component.view
        }]);
      }
    };

    _this.handleHitUpdate = function (hit, isFinal) {
      if (!_this.isDragging) {
        return;
      }

      var relevantEvents = _this.relevantEvents;
      var initialHit = _this.hitDragging.initialHit;
      var initialCalendar = _this.component.calendar; // states based on new hit

      var receivingCalendar = null;
      var mutation = null;
      var mutatedRelevantEvents = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: relevantEvents,
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: true,
        origSeg: _this.subjectSeg
      };

      if (hit) {
        var receivingComponent = hit.component;
        receivingCalendar = receivingComponent.calendar;

        if (initialCalendar === receivingCalendar || receivingComponent.opt('editable') && receivingComponent.opt('droppable')) {
          mutation = computeEventMutation(initialHit, hit, receivingCalendar.pluginSystem.hooks.eventDragMutationMassagers);

          if (mutation) {
            mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, receivingCalendar.eventUiBases, mutation, receivingCalendar);
            interaction.mutatedEvents = mutatedRelevantEvents;

            if (!receivingComponent.isInteractionValid(interaction)) {
              isInvalid = true;
              mutation = null;
              mutatedRelevantEvents = null;
              interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
            }
          }
        } else {
          receivingCalendar = null;
        }
      }

      _this.displayDrag(receivingCalendar, interaction);

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        if (initialCalendar === receivingCalendar && // TODO: write test for this
        isHitsEqual(initialHit, hit)) {
          mutation = null;
        }

        _this.dragging.setMirrorNeedsRevert(!mutation); // render the mirror if no already-rendered mirror
        // TODO: wish we could somehow wait for dispatch to guarantee render


        _this.dragging.setMirrorIsVisible(!hit || !document.querySelector('.fc-mirror')); // assign states based on new hit


        _this.receivingCalendar = receivingCalendar;
        _this.validMutation = mutation;
        _this.mutatedRelevantEvents = mutatedRelevantEvents;
      }
    };

    _this.handlePointerUp = function () {
      if (!_this.isDragging) {
        _this.cleanup(); // because handleDragEnd won't fire

      }
    };

    _this.handleDragEnd = function (ev) {
      if (_this.isDragging) {
        var initialCalendar_1 = _this.component.calendar;
        var initialView = _this.component.view;
        var _a = _this,
            receivingCalendar = _a.receivingCalendar,
            validMutation = _a.validMutation;
        var eventDef = _this.eventRange.def;
        var eventInstance = _this.eventRange.instance;
        var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar_1, eventDef, eventInstance);
        var relevantEvents_1 = _this.relevantEvents;
        var mutatedRelevantEvents = _this.mutatedRelevantEvents;
        var finalHit = _this.hitDragging.finalHit;

        _this.clearDrag(); // must happen after revert animation


        initialCalendar_1.publiclyTrigger('eventDragStop', [{
          el: _this.subjectSeg.el,
          event: eventApi,
          jsEvent: ev.origEvent,
          view: initialView
        }]);

        if (validMutation) {
          // dropped within same calendar
          if (receivingCalendar === initialCalendar_1) {
            initialCalendar_1.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: mutatedRelevantEvents
            });
            var transformed = {};

            for (var _i = 0, _b = initialCalendar_1.pluginSystem.hooks.eventDropTransformers; _i < _b.length; _i++) {
              var transformer = _b[_i];

              __assign(transformed, transformer(validMutation, initialCalendar_1));
            }

            var eventDropArg = __assign({}, transformed, {
              el: ev.subjectEl,
              delta: validMutation.datesDelta,
              oldEvent: eventApi,
              event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
              initialCalendar_1, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
              revert: function () {
                initialCalendar_1.dispatch({
                  type: 'MERGE_EVENTS',
                  eventStore: relevantEvents_1
                });
              },
              jsEvent: ev.origEvent,
              view: initialView
            });

            initialCalendar_1.publiclyTrigger('eventDrop', [eventDropArg]); // dropped in different calendar
          } else if (receivingCalendar) {
            initialCalendar_1.publiclyTrigger('eventLeave', [{
              draggedEl: ev.subjectEl,
              event: eventApi,
              view: initialView
            }]);
            initialCalendar_1.dispatch({
              type: 'REMOVE_EVENT_INSTANCES',
              instances: _this.mutatedRelevantEvents.instances
            });
            receivingCalendar.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: _this.mutatedRelevantEvents
            });

            if (ev.isTouch) {
              receivingCalendar.dispatch({
                type: 'SELECT_EVENT',
                eventInstanceId: eventInstance.instanceId
              });
            }

            var dropArg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
              draggedEl: ev.subjectEl,
              jsEvent: ev.origEvent,
              view: finalHit.component // should this be finalHit.component.view? See #4644

            });

            receivingCalendar.publiclyTrigger('drop', [dropArg]);
            receivingCalendar.publiclyTrigger('eventReceive', [{
              draggedEl: ev.subjectEl,
              event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
              receivingCalendar, mutatedRelevantEvents.defs[eventDef.defId], mutatedRelevantEvents.instances[eventInstance.instanceId]),
              view: finalHit.component // should this be finalHit.component.view? See #4644

            }]);
          }
        } else {
          initialCalendar_1.publiclyTrigger('_noEventDrop');
        }
      }

      _this.cleanup();
    };

    var component = _this.component;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.pointer.selector = EventDragging.SELECTOR;
    dragging.touchScrollAllowed = false;
    dragging.autoScroller.isEnabled = component.opt('dragScroll');
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
    hitDragging.useSubjectCenter = settings.useEventCenter;
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('pointerup', _this.handlePointerUp);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  EventDragging.prototype.destroy = function () {
    this.dragging.destroy();
  }; // render a drag state on the next receivingCalendar


  EventDragging.prototype.displayDrag = function (nextCalendar, state) {
    var initialCalendar = this.component.calendar;
    var prevCalendar = this.receivingCalendar; // does the previous calendar need to be cleared?

    if (prevCalendar && prevCalendar !== nextCalendar) {
      // does the initial calendar need to be cleared?
      // if so, don't clear all the way. we still need to to hide the affectedEvents
      if (prevCalendar === initialCalendar) {
        prevCalendar.dispatch({
          type: 'SET_EVENT_DRAG',
          state: {
            affectedEvents: state.affectedEvents,
            mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
            isEvent: true,
            origSeg: state.origSeg
          }
        }); // completely clear the old calendar if it wasn't the initial
      } else {
        prevCalendar.dispatch({
          type: 'UNSET_EVENT_DRAG'
        });
      }
    }

    if (nextCalendar) {
      nextCalendar.dispatch({
        type: 'SET_EVENT_DRAG',
        state: state
      });
    }
  };

  EventDragging.prototype.clearDrag = function () {
    var initialCalendar = this.component.calendar;
    var receivingCalendar = this.receivingCalendar;

    if (receivingCalendar) {
      receivingCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    } // the initial calendar might have an dummy drag state from displayDrag


    if (initialCalendar !== receivingCalendar) {
      initialCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }
  };

  EventDragging.prototype.cleanup = function () {
    this.subjectSeg = null;
    this.isDragging = false;
    this.eventRange = null;
    this.relevantEvents = null;
    this.receivingCalendar = null;
    this.validMutation = null;
    this.mutatedRelevantEvents = null;
  };

  EventDragging.SELECTOR = '.fc-draggable, .fc-resizable'; // TODO: test this in IE11

  return EventDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function computeEventMutation(hit0, hit1, massagers) {
  var dateSpan0 = hit0.dateSpan;
  var dateSpan1 = hit1.dateSpan;
  var date0 = dateSpan0.range.start;
  var date1 = dateSpan1.range.start;
  var standardProps = {};

  if (dateSpan0.allDay !== dateSpan1.allDay) {
    standardProps.allDay = dateSpan1.allDay;
    standardProps.hasEnd = hit1.component.opt('allDayMaintainDuration');

    if (dateSpan1.allDay) {
      // means date1 is already start-of-day,
      // but date0 needs to be converted
      date0 = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date0);
    }
  }

  var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, hit0.component.dateEnv, hit0.component === hit1.component ? hit0.component.largeUnit : null);

  if (delta.milliseconds) {
    // has hours/minutes/seconds
    standardProps.allDay = false;
  }

  var mutation = {
    datesDelta: delta,
    standardProps: standardProps
  };

  for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {
    var massager = massagers_1[_i];
    massager(mutation, hit0, hit1);
  }

  return mutation;
}

function getComponentTouchDelay$1(component) {
  var delay = component.opt('eventLongPressDelay');

  if (delay == null) {
    delay = component.opt('longPressDelay');
  }

  return delay;
}

var EventDragging$1 =
/** @class */
function (_super) {
  __extends(EventDragging, _super);

  function EventDragging(settings) {
    var _this = _super.call(this, settings) || this; // internal state


    _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?

    _this.eventRange = null;
    _this.relevantEvents = null;
    _this.validMutation = null;
    _this.mutatedRelevantEvents = null;

    _this.handlePointerDown = function (ev) {
      var component = _this.component;

      var seg = _this.querySeg(ev);

      var eventRange = _this.eventRange = seg.eventRange;
      _this.dragging.minDistance = component.opt('eventDragMinDistance'); // if touch, need to be working with a selected event

      _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);
    };

    _this.handleDragStart = function (ev) {
      var calendar = _this.component.calendar;
      var eventRange = _this.eventRange;
      _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(calendar.state.eventStore, _this.eventRange.instance.instanceId);
      _this.draggingSeg = _this.querySeg(ev);
      calendar.unselect();
      calendar.publiclyTrigger('eventResizeStart', [{
        el: _this.draggingSeg.el,
        event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventRange.def, eventRange.instance),
        jsEvent: ev.origEvent,
        view: _this.component.view
      }]);
    };

    _this.handleHitUpdate = function (hit, isFinal, ev) {
      var calendar = _this.component.calendar;
      var relevantEvents = _this.relevantEvents;
      var initialHit = _this.hitDragging.initialHit;
      var eventInstance = _this.eventRange.instance;
      var mutation = null;
      var mutatedRelevantEvents = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: relevantEvents,
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: true,
        origSeg: _this.draggingSeg
      };

      if (hit) {
        mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-start-resizer'), eventInstance.range, calendar.pluginSystem.hooks.eventResizeJoinTransforms);
      }

      if (mutation) {
        mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, calendar.eventUiBases, mutation, calendar);
        interaction.mutatedEvents = mutatedRelevantEvents;

        if (!_this.component.isInteractionValid(interaction)) {
          isInvalid = true;
          mutation = null;
          mutatedRelevantEvents = null;
          interaction.mutatedEvents = null;
        }
      }

      if (mutatedRelevantEvents) {
        calendar.dispatch({
          type: 'SET_EVENT_RESIZE',
          state: interaction
        });
      } else {
        calendar.dispatch({
          type: 'UNSET_EVENT_RESIZE'
        });
      }

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        if (mutation && isHitsEqual(initialHit, hit)) {
          mutation = null;
        }

        _this.validMutation = mutation;
        _this.mutatedRelevantEvents = mutatedRelevantEvents;
      }
    };

    _this.handleDragEnd = function (ev) {
      var calendar = _this.component.calendar;
      var view = _this.component.view;
      var eventDef = _this.eventRange.def;
      var eventInstance = _this.eventRange.instance;
      var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventDef, eventInstance);
      var relevantEvents = _this.relevantEvents;
      var mutatedRelevantEvents = _this.mutatedRelevantEvents;
      calendar.publiclyTrigger('eventResizeStop', [{
        el: _this.draggingSeg.el,
        event: eventApi,
        jsEvent: ev.origEvent,
        view: view
      }]);

      if (_this.validMutation) {
        calendar.dispatch({
          type: 'MERGE_EVENTS',
          eventStore: mutatedRelevantEvents
        });
        calendar.publiclyTrigger('eventResize', [{
          el: _this.draggingSeg.el,
          startDelta: _this.validMutation.startDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
          endDelta: _this.validMutation.endDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
          prevEvent: eventApi,
          event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
          calendar, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
          revert: function () {
            calendar.dispatch({
              type: 'MERGE_EVENTS',
              eventStore: relevantEvents
            });
          },
          jsEvent: ev.origEvent,
          view: view
        }]);
      } else {
        calendar.publiclyTrigger('_noEventResize');
      } // reset all internal state


      _this.draggingSeg = null;
      _this.relevantEvents = null;
      _this.validMutation = null; // okay to keep eventInstance around. useful to set it in handlePointerDown
    };

    var component = settings.component;
    var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
    dragging.pointer.selector = '.fc-resizer';
    dragging.touchScrollAllowed = false;
    dragging.autoScroller.isEnabled = component.opt('dragScroll');
    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
    hitDragging.emitter.on('dragstart', _this.handleDragStart);
    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
    hitDragging.emitter.on('dragend', _this.handleDragEnd);
    return _this;
  }

  EventDragging.prototype.destroy = function () {
    this.dragging.destroy();
  };

  EventDragging.prototype.querySeg = function (ev) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.subjectEl, this.component.fgSegSelector));
  };

  return EventDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

function computeMutation(hit0, hit1, isFromStart, instanceRange, transforms) {
  var dateEnv = hit0.component.dateEnv;
  var date0 = hit0.dateSpan.range.start;
  var date1 = hit1.dateSpan.range.start;
  var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, dateEnv, hit0.component.largeUnit);
  var props = {};

  for (var _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {
    var transform = transforms_1[_i];
    var res = transform(hit0, hit1);

    if (res === false) {
      return null;
    } else if (res) {
      __assign(props, res);
    }
  }

  if (isFromStart) {
    if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {
      props.startDelta = delta;
      return props;
    }
  } else {
    if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {
      props.endDelta = delta;
      return props;
    }
  }

  return null;
}

var UnselectAuto =
/** @class */
function () {
  function UnselectAuto(calendar) {
    var _this = this;

    this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system

    this.onSelect = function (selectInfo) {
      if (selectInfo.jsEvent) {
        _this.isRecentPointerDateSelect = true;
      }
    };

    this.onDocumentPointerUp = function (pev) {
      var _a = _this,
          calendar = _a.calendar,
          documentPointer = _a.documentPointer;
      var state = calendar.state; // touch-scrolling should never unfocus any type of selection

      if (!documentPointer.wasTouchScroll) {
        if (state.dateSelection && // an existing date selection?
        !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?
        ) {
            var unselectAuto = calendar.viewOpt('unselectAuto');
            var unselectCancel = calendar.viewOpt('unselectCancel');

            if (unselectAuto && (!unselectAuto || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, unselectCancel))) {
              calendar.unselect(pev);
            }
          }

        if (state.eventSelection && // an existing event selected?
        !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, EventDragging.SELECTOR) // interaction DIDN'T start on an event
        ) {
            calendar.dispatch({
              type: 'UNSELECT_EVENT'
            });
          }
      }

      _this.isRecentPointerDateSelect = false;
    };

    this.calendar = calendar;
    var documentPointer = this.documentPointer = new PointerDragging(document);
    documentPointer.shouldIgnoreMove = true;
    documentPointer.shouldWatchScroll = false;
    documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);
    /*
    TODO: better way to know about whether there was a selection with the pointer
    */

    calendar.on('select', this.onSelect);
  }

  UnselectAuto.prototype.destroy = function () {
    this.calendar.off('select', this.onSelect);
    this.documentPointer.destroy();
  };

  return UnselectAuto;
}();
/*
Given an already instantiated draggable object for one-or-more elements,
Interprets any dragging as an attempt to drag an events that lives outside
of a calendar onto a calendar.
*/


var ExternalElementDragging =
/** @class */
function () {
  function ExternalElementDragging(dragging, suppliedDragMeta) {
    var _this = this;

    this.receivingCalendar = null;
    this.droppableEvent = null; // will exist for all drags, even if create:false

    this.suppliedDragMeta = null;
    this.dragMeta = null;

    this.handleDragStart = function (ev) {
      _this.dragMeta = _this.buildDragMeta(ev.subjectEl);
    };

    this.handleHitUpdate = function (hit, isFinal, ev) {
      var dragging = _this.hitDragging.dragging;
      var receivingCalendar = null;
      var droppableEvent = null;
      var isInvalid = false;
      var interaction = {
        affectedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
        isEvent: _this.dragMeta.create,
        origSeg: null
      };

      if (hit) {
        receivingCalendar = hit.component.calendar;

        if (_this.canDropElOnCalendar(ev.subjectEl, receivingCalendar)) {
          droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingCalendar);
          interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent);
          isInvalid = !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInteractionValid"])(interaction, receivingCalendar);

          if (isInvalid) {
            interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
            droppableEvent = null;
          }
        }
      }

      _this.displayDrag(receivingCalendar, interaction); // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)
      // TODO: wish we could somehow wait for dispatch to guarantee render


      dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-mirror'));

      if (!isInvalid) {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
      } else {
        Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
      }

      if (!isFinal) {
        dragging.setMirrorNeedsRevert(!droppableEvent);
        _this.receivingCalendar = receivingCalendar;
        _this.droppableEvent = droppableEvent;
      }
    };

    this.handleDragEnd = function (pev) {
      var _a = _this,
          receivingCalendar = _a.receivingCalendar,
          droppableEvent = _a.droppableEvent;

      _this.clearDrag();

      if (receivingCalendar && droppableEvent) {
        var finalHit = _this.hitDragging.finalHit;
        var finalView = finalHit.component.view;
        var dragMeta = _this.dragMeta;

        var arg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
          draggedEl: pev.subjectEl,
          jsEvent: pev.origEvent,
          view: finalView
        });

        receivingCalendar.publiclyTrigger('drop', [arg]);

        if (dragMeta.create) {
          receivingCalendar.dispatch({
            type: 'MERGE_EVENTS',
            eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent)
          });

          if (pev.isTouch) {
            receivingCalendar.dispatch({
              type: 'SELECT_EVENT',
              eventInstanceId: droppableEvent.instance.instanceId
            });
          } // signal that an external event landed


          receivingCalendar.publiclyTrigger('eventReceive', [{
            draggedEl: pev.subjectEl,
            event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](receivingCalendar, droppableEvent.def, droppableEvent.instance),
            view: finalView
          }]);
        }
      }

      _this.receivingCalendar = null;
      _this.droppableEvent = null;
    };

    var hitDragging = this.hitDragging = new HitDragging(dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
    hitDragging.requireInitial = false; // will start outside of a component

    hitDragging.emitter.on('dragstart', this.handleDragStart);
    hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
    hitDragging.emitter.on('dragend', this.handleDragEnd);
    this.suppliedDragMeta = suppliedDragMeta;
  }

  ExternalElementDragging.prototype.buildDragMeta = function (subjectEl) {
    if (typeof this.suppliedDragMeta === 'object') {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta);
    } else if (typeof this.suppliedDragMeta === 'function') {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta(subjectEl));
    } else {
      return getDragMetaFromEl(subjectEl);
    }
  };

  ExternalElementDragging.prototype.displayDrag = function (nextCalendar, state) {
    var prevCalendar = this.receivingCalendar;

    if (prevCalendar && prevCalendar !== nextCalendar) {
      prevCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }

    if (nextCalendar) {
      nextCalendar.dispatch({
        type: 'SET_EVENT_DRAG',
        state: state
      });
    }
  };

  ExternalElementDragging.prototype.clearDrag = function () {
    if (this.receivingCalendar) {
      this.receivingCalendar.dispatch({
        type: 'UNSET_EVENT_DRAG'
      });
    }
  };

  ExternalElementDragging.prototype.canDropElOnCalendar = function (el, receivingCalendar) {
    var dropAccept = receivingCalendar.opt('dropAccept');

    if (typeof dropAccept === 'function') {
      return dropAccept(el);
    } else if (typeof dropAccept === 'string' && dropAccept) {
      return Boolean(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementMatches"])(el, dropAccept));
    }

    return true;
  };

  return ExternalElementDragging;
}(); // Utils for computing event store from the DragMeta
// ----------------------------------------------------------------------------------------------------


function computeEventForDateSpan(dateSpan, dragMeta, calendar) {
  var defProps = __assign({}, dragMeta.leftoverProps);

  for (var _i = 0, _a = calendar.pluginSystem.hooks.externalDefTransforms; _i < _a.length; _i++) {
    var transform = _a[_i];

    __assign(defProps, transform(dateSpan, dragMeta));
  }

  var def = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseEventDef"])(defProps, dragMeta.sourceId, dateSpan.allDay, calendar.opt('forceEventDuration') || Boolean(dragMeta.duration), // hasEnd
  calendar);
  var start = dateSpan.range.start; // only rely on time info if drop zone is all-day,
  // otherwise, we already know the time

  if (dateSpan.allDay && dragMeta.startTime) {
    start = calendar.dateEnv.add(start, dragMeta.startTime);
  }

  var end = dragMeta.duration ? calendar.dateEnv.add(start, dragMeta.duration) : calendar.getDefaultEventEnd(dateSpan.allDay, start);
  var instance = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEventInstance"])(def.defId, {
    start: start,
    end: end
  });
  return {
    def: def,
    instance: instance
  };
} // Utils for extracting data from element
// ----------------------------------------------------------------------------------------------------


function getDragMetaFromEl(el) {
  var str = getEmbeddedElData(el, 'event');
  var obj = str ? JSON.parse(str) : {
    create: false
  }; // if no embedded data, assume no event creation

  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(obj);
}

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix = '';

function getEmbeddedElData(el, name) {
  var prefix = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix;
  var prefixedName = (prefix ? prefix + '-' : '') + name;
  return el.getAttribute('data-' + prefixedName) || '';
}
/*
Makes an element (that is *external* to any calendar) draggable.
Can pass in data that determines how an event will be created when dropped onto a calendar.
Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.
*/


var ExternalDraggable =
/** @class */
function () {
  function ExternalDraggable(el, settings) {
    var _this = this;

    if (settings === void 0) {
      settings = {};
    }

    this.handlePointerDown = function (ev) {
      var dragging = _this.dragging;
      var _a = _this.settings,
          minDistance = _a.minDistance,
          longPressDelay = _a.longPressDelay;
      dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].eventDragMinDistance;
      dragging.delay = ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv
      longPressDelay != null ? longPressDelay : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].longPressDelay : 0;
    };

    this.handleDragStart = function (ev) {
      if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains('fc-event')) {
        _this.dragging.mirror.getMirrorEl().classList.add('fc-selected');
      }
    };

    this.settings = settings;
    var dragging = this.dragging = new FeaturefulElementDragging(el);
    dragging.touchScrollAllowed = false;

    if (settings.itemSelector != null) {
      dragging.pointer.selector = settings.itemSelector;
    }

    if (settings.appendTo != null) {
      dragging.mirror.parentNode = settings.appendTo; // TODO: write tests
    }

    dragging.emitter.on('pointerdown', this.handlePointerDown);
    dragging.emitter.on('dragstart', this.handleDragStart);
    new ExternalElementDragging(dragging, settings.eventData);
  }

  ExternalDraggable.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return ExternalDraggable;
}();
/*
Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
The third-party system is responsible for drawing the visuals effects of the drag.
This class simply monitors for pointer movements and fires events.
It also has the ability to hide the moving element (the "mirror") during the drag.
*/


var InferredElementDragging =
/** @class */
function (_super) {
  __extends(InferredElementDragging, _super);

  function InferredElementDragging(containerEl) {
    var _this = _super.call(this, containerEl) || this;

    _this.shouldIgnoreMove = false;
    _this.mirrorSelector = '';
    _this.currentMirrorEl = null;

    _this.handlePointerDown = function (ev) {
      _this.emitter.trigger('pointerdown', ev);

      if (!_this.shouldIgnoreMove) {
        // fire dragstart right away. does not support delay or min-distance
        _this.emitter.trigger('dragstart', ev);
      }
    };

    _this.handlePointerMove = function (ev) {
      if (!_this.shouldIgnoreMove) {
        _this.emitter.trigger('dragmove', ev);
      }
    };

    _this.handlePointerUp = function (ev) {
      _this.emitter.trigger('pointerup', ev);

      if (!_this.shouldIgnoreMove) {
        // fire dragend right away. does not support a revert animation
        _this.emitter.trigger('dragend', ev);
      }
    };

    var pointer = _this.pointer = new PointerDragging(containerEl);
    pointer.emitter.on('pointerdown', _this.handlePointerDown);
    pointer.emitter.on('pointermove', _this.handlePointerMove);
    pointer.emitter.on('pointerup', _this.handlePointerUp);
    return _this;
  }

  InferredElementDragging.prototype.destroy = function () {
    this.pointer.destroy();
  };

  InferredElementDragging.prototype.setIgnoreMove = function (bool) {
    this.shouldIgnoreMove = bool;
  };

  InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {
    if (bool) {
      // restore a previously hidden element.
      // use the reference in case the selector class has already been removed.
      if (this.currentMirrorEl) {
        this.currentMirrorEl.style.visibility = '';
        this.currentMirrorEl = null;
      }
    } else {
      var mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;

      if (mirrorEl) {
        this.currentMirrorEl = mirrorEl;
        mirrorEl.style.visibility = 'hidden';
      }
    }
  };

  return InferredElementDragging;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
/*
Bridges third-party drag-n-drop systems with FullCalendar.
Must be instantiated and destroyed by caller.
*/


var ThirdPartyDraggable =
/** @class */
function () {
  function ThirdPartyDraggable(containerOrSettings, settings) {
    var containerEl = document;

    if ( // wish we could just test instanceof EventTarget, but doesn't work in IE11
    containerOrSettings === document || containerOrSettings instanceof Element) {
      containerEl = containerOrSettings;
      settings = settings || {};
    } else {
      settings = containerOrSettings || {};
    }

    var dragging = this.dragging = new InferredElementDragging(containerEl);

    if (typeof settings.itemSelector === 'string') {
      dragging.pointer.selector = settings.itemSelector;
    } else if (containerEl === document) {
      dragging.pointer.selector = '[data-event]';
    }

    if (typeof settings.mirrorSelector === 'string') {
      dragging.mirrorSelector = settings.mirrorSelector;
    }

    new ExternalElementDragging(dragging, settings.eventData);
  }

  ThirdPartyDraggable.prototype.destroy = function () {
    this.dragging.destroy();
  };

  return ThirdPartyDraggable;
}();

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  componentInteractions: [DateClicking, DateSelecting, EventDragging, EventDragging$1],
  calendarInteractions: [UnselectAuto],
  elementDraggingImpl: FeaturefulElementDragging
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-common/main.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-common/main.esm.js ***!
  \****************************************************************/
/*! exports provided: default, AbstractResourceDayTable, DayResourceTable, ResourceApi, ResourceDayHeader, ResourceDayTable, ResourceSplitter, VResourceJoiner, VResourceSplitter, buildResourceFields, buildResourceTextFunc, buildRowNodes, flattenResources, isGroupsEqual */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractResourceDayTable", function() { return AbstractResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayResourceTable", function() { return DayResourceTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceApi", function() { return ResourceApi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayHeader", function() { return ResourceDayHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDayTable", function() { return ResourceDayTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceSplitter", function() { return ResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceJoiner", function() { return VResourceJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VResourceSplitter", function() { return VResourceSplitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceFields", function() { return buildResourceFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildResourceTextFunc", function() { return buildResourceTextFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildRowNodes", function() { return buildRowNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenResources", function() { return flattenResources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isGroupsEqual", function() { return isGroupsEqual; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Resources Common Plugin v4.3.1
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function massageEventDragMutation(eventMutation, hit0, hit1) {
  var resource0 = hit0.dateSpan.resourceId;
  var resource1 = hit1.dateSpan.resourceId;

  if (resource0 && resource1 && resource0 !== resource1) {
    eventMutation.resourceMutation = {
      matchResourceId: resource0,
      setResourceId: resource1
    };
  }
}
/*
TODO: all this would be much easier if we were using a hash!
*/


function applyEventDefMutation(eventDef, mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation && computeResourceEditable(eventDef, calendar)) {
    var index = eventDef.resourceIds.indexOf(resourceMutation.matchResourceId);

    if (index !== -1) {
      var resourceIds = eventDef.resourceIds.slice(); // copy

      resourceIds.splice(index, 1); // remove

      if (resourceIds.indexOf(resourceMutation.setResourceId) === -1) {
        // not already in there
        resourceIds.push(resourceMutation.setResourceId); // add
      }

      eventDef.resourceIds = resourceIds;
    }
  }
}
/*
HACK
TODO: use EventUi system instead of this
*/


function computeResourceEditable(eventDef, calendar) {
  var resourceEditable = eventDef.resourceEditable;

  if (resourceEditable == null) {
    var source = eventDef.sourceId && calendar.state.eventSources[eventDef.sourceId];

    if (source) {
      resourceEditable = source.extendedProps.resourceEditable; // used the Source::extendedProps hack
    }

    if (resourceEditable == null) {
      resourceEditable = calendar.opt('eventResourceEditable');

      if (resourceEditable == null) {
        resourceEditable = calendar.opt('editable'); // TODO: use defaults system instead
      }
    }
  }

  return resourceEditable;
}

function transformEventDrop(mutation, calendar) {
  var resourceMutation = mutation.resourceMutation;

  if (resourceMutation) {
    return {
      oldResource: calendar.getResourceById(resourceMutation.matchResourceId),
      newResource: calendar.getResourceById(resourceMutation.setResourceId)
    };
  } else {
    return {
      oldResource: null,
      newResource: null
    };
  }
}

var ResourceDataAdder =
/** @class */
function () {
  function ResourceDataAdder() {
    this.filterResources = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(filterResources);
  }

  ResourceDataAdder.prototype.transform = function (viewProps, viewSpec, calendarProps, view) {
    if (viewSpec.class.needsResourceData) {
      return {
        resourceStore: this.filterResources(calendarProps.resourceStore, view.opt('filterResourcesWithEvents'), calendarProps.eventStore, calendarProps.dateProfile.activeRange),
        resourceEntityExpansions: calendarProps.resourceEntityExpansions
      };
    }
  };

  return ResourceDataAdder;
}();

function filterResources(resourceStore, doFilterResourcesWithEvents, eventStore, activeRange) {
  if (doFilterResourcesWithEvents) {
    var instancesInRange = filterEventInstancesInRange(eventStore.instances, activeRange);
    var hasEvents_1 = computeHasEvents(instancesInRange, eventStore.defs);

    __assign(hasEvents_1, computeAncestorHasEvents(hasEvents_1, resourceStore));

    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(resourceStore, function (resource, resourceId) {
      return hasEvents_1[resourceId];
    });
  } else {
    return resourceStore;
  }
}

function filterEventInstancesInRange(eventInstances, activeRange) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["filterHash"])(eventInstances, function (eventInstance) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesIntersect"])(eventInstance.range, activeRange);
  });
}

function computeHasEvents(eventInstances, eventDefs) {
  var hasEvents = {};

  for (var instanceId in eventInstances) {
    var instance = eventInstances[instanceId];

    for (var _i = 0, _a = eventDefs[instance.defId].resourceIds; _i < _a.length; _i++) {
      var resourceId = _a[_i];
      hasEvents[resourceId] = true;
    }
  }

  return hasEvents;
}
/*
mark resources as having events if any of their ancestors have them
NOTE: resourceStore might not have all the resources that hasEvents{} has keyed
*/


function computeAncestorHasEvents(hasEvents, resourceStore) {
  var res = {};

  for (var resourceId in hasEvents) {
    var resource = void 0;

    while (resource = resourceStore[resourceId]) {
      resourceId = resource.parentId; // now functioning as the parentId

      if (resourceId) {
        res[resourceId] = true;
      } else {
        break;
      }
    }
  }

  return res;
} // for when non-resource view should be given EventUi info (for event coloring/constraints based off of resource data)


var ResourceEventConfigAdder =
/** @class */
function () {
  function ResourceEventConfigAdder() {
    this.buildResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeOutput"])(buildResourceEventUis, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsEqual"]);
    this.injectResourceEventUis = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(injectResourceEventUis);
  }

  ResourceEventConfigAdder.prototype.transform = function (viewProps, viewSpec, calendarProps) {
    if (!viewSpec.class.needsResourceData) {
      // is a non-resource view?
      return {
        eventUiBases: this.injectResourceEventUis(viewProps.eventUiBases, viewProps.eventStore.defs, this.buildResourceEventUis(calendarProps.resourceStore))
      };
    }
  };

  return ResourceEventConfigAdder;
}();

function buildResourceEventUis(resourceStore) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceStore, function (resource) {
    return resource.ui;
  });
}

function injectResourceEventUis(eventUiBases, eventDefs, resourceEventUis) {
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(eventUiBases, function (eventUi, defId) {
    if (defId) {
      // not the '' key
      return injectResourceEventUi(eventUi, eventDefs[defId], resourceEventUis);
    } else {
      return eventUi;
    }
  });
}

function injectResourceEventUi(origEventUi, eventDef, resourceEventUis) {
  var parts = []; // first resource takes precedence, which fights with the ordering of combineEventUis, thus the unshifts

  for (var _i = 0, _a = eventDef.resourceIds; _i < _a.length; _i++) {
    var resourceId = _a[_i];

    if (resourceEventUis[resourceId]) {
      parts.unshift(resourceEventUis[resourceId]);
    }
  }

  parts.unshift(origEventUi);
  return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["combineEventUis"])(parts);
} // for making sure events that have editable resources are always draggable in resource views


function transformIsDraggable(val, eventDef, eventUi, view) {
  if (!val) {
    if (view.viewSpec.class.needsResourceData) {
      if (computeResourceEditable(eventDef, view.calendar)) {
        return true;
      }
    }
  }

  return val;
}

var RESOURCE_SOURCE_PROPS = {
  id: String
};
var defs = [];
var uid = 0;

function registerResourceSourceDef(def) {
  defs.push(def);
}

function getResourceSourceDef(id) {
  return defs[id];
}

function doesSourceIgnoreRange(source) {
  return Boolean(defs[source.sourceDefId].ignoreRange);
}

function parseResourceSource(input) {
  for (var i = defs.length - 1; i >= 0; i--) {
    // later-added plugins take precedence
    var def = defs[i];
    var meta = def.parseMeta(input);

    if (meta) {
      var res = parseResourceSourceProps(typeof input === 'object' && input ? input : {}, meta, i);
      res._raw = input;
      return res;
    }
  }

  return null;
}

function parseResourceSourceProps(input, meta, sourceDefId) {
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_SOURCE_PROPS);
  props.sourceId = String(uid++);
  props.sourceDefId = sourceDefId;
  props.meta = meta;
  props.publicId = props.id;
  props.isFetching = false;
  props.latestFetchId = '';
  props.fetchRange = null;
  delete props.id;
  return props;
}

function reduceResourceSource(source, action, dateProfile, calendar) {
  switch (action.type) {
    case 'INIT':
      return createSource(calendar.opt('resources'), calendar);

    case 'RESET_RESOURCE_SOURCE':
      return createSource(action.resourceSourceInput, calendar, true);

    case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

    case 'NEXT':
    case 'SET_DATE':
    case 'SET_VIEW_TYPE':
      return handleRange(source, dateProfile.activeRange, calendar);

    case 'RECEIVE_RESOURCES':
    case 'RECEIVE_RESOURCE_ERROR':
      return receiveResponse(source, action.fetchId, action.fetchRange);

    case 'REFETCH_RESOURCES':
      return fetchSource(source, dateProfile.activeRange, calendar);

    default:
      return source;
  }
}

var uid$1 = 0;

function createSource(input, calendar, forceFetch) {
  if (input) {
    var source = parseResourceSource(input);

    if (forceFetch || !calendar.opt('refetchResourcesOnNavigate')) {
      // because assumes handleRange will do it later
      source = fetchSource(source, null, calendar);
    }

    return source;
  }

  return null;
}

function handleRange(source, activeRange, calendar) {
  if (calendar.opt('refetchResourcesOnNavigate') && !doesSourceIgnoreRange(source) && (!source.fetchRange || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangesEqual"])(source.fetchRange, activeRange))) {
    return fetchSource(source, activeRange, calendar);
  } else {
    return source;
  }
}

function fetchSource(source, fetchRange, calendar) {
  var sourceDef = getResourceSourceDef(source.sourceDefId);
  var fetchId = String(uid$1++);
  sourceDef.fetch({
    resourceSource: source,
    calendar: calendar,
    range: fetchRange
  }, function (res) {
    // HACK
    // do before calling dispatch in case dispatch renders synchronously
    calendar.afterSizingTriggers._resourcesRendered = [null]; // fire once

    calendar.dispatch({
      type: 'RECEIVE_RESOURCES',
      fetchId: fetchId,
      fetchRange: fetchRange,
      rawResources: res.rawResources
    });
  }, function (error) {
    calendar.dispatch({
      type: 'RECEIVE_RESOURCE_ERROR',
      fetchId: fetchId,
      fetchRange: fetchRange,
      error: error
    });
  });
  return __assign({}, source, {
    isFetching: true,
    latestFetchId: fetchId
  });
}

function receiveResponse(source, fetchId, fetchRange) {
  if (fetchId === source.latestFetchId) {
    return __assign({}, source, {
      isFetching: false,
      fetchRange: fetchRange
    });
  }

  return source;
}

var RESOURCE_PROPS = {
  id: String,
  title: String,
  parentId: String,
  businessHours: null,
  children: null,
  extendedProps: null
};
var PRIVATE_ID_PREFIX = '_fc:';
var uid$2 = 0;
/*
needs a full store so that it can populate children too
*/

function parseResource(input, parentId, store, calendar) {
  if (parentId === void 0) {
    parentId = '';
  }

  var leftovers0 = {};
  var props = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(input, RESOURCE_PROPS, {}, leftovers0);
  var leftovers1 = {};
  var ui = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["processScopedUiProps"])('event', leftovers0, calendar, leftovers1);

  if (!props.id) {
    props.id = PRIVATE_ID_PREFIX + uid$2++;
  }

  if (!props.parentId) {
    // give precedence to the parentId property
    props.parentId = parentId;
  }

  props.businessHours = props.businessHours ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseBusinessHours"])(props.businessHours, calendar) : null;
  props.ui = ui;
  props.extendedProps = __assign({}, leftovers1, props.extendedProps); // help out ResourceApi from having user modify props

  Object.freeze(ui.classNames);
  Object.freeze(props.extendedProps);
  if (store[props.id]) ;else {
    store[props.id] = props;

    if (props.children) {
      for (var _i = 0, _a = props.children; _i < _a.length; _i++) {
        var childInput = _a[_i];
        parseResource(childInput, props.id, store, calendar);
      }

      delete props.children;
    }
  }
  return props;
}
/*
TODO: use this in more places
*/


function getPublicId(id) {
  if (id.indexOf(PRIVATE_ID_PREFIX) === 0) {
    return '';
  }

  return id;
}

function reduceResourceStore(store, action, source, calendar) {
  switch (action.type) {
    case 'INIT':
      return {};

    case 'RECEIVE_RESOURCES':
      return receiveRawResources(store, action.rawResources, action.fetchId, source, calendar);

    case 'ADD_RESOURCE':
      return addResource(store, action.resourceHash);

    case 'REMOVE_RESOURCE':
      return removeResource(store, action.resourceId);

    case 'SET_RESOURCE_PROP':
      return setResourceProp(store, action.resourceId, action.propName, action.propValue);

    case 'RESET_RESOURCES':
      // must make the calendar think each resource is a new object :/
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(store, function (resource) {
        return __assign({}, resource);
      });

    default:
      return store;
  }
}

function receiveRawResources(existingStore, inputs, fetchId, source, calendar) {
  if (source.latestFetchId === fetchId) {
    var nextStore = {};

    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
      var input = inputs_1[_i];
      parseResource(input, '', nextStore, calendar);
    }

    return nextStore;
  } else {
    return existingStore;
  }
}

function addResource(existingStore, additions) {
  // TODO: warn about duplicate IDs
  return __assign({}, existingStore, additions);
}

function removeResource(existingStore, resourceId) {
  var newStore = __assign({}, existingStore);

  delete newStore[resourceId]; // promote children

  for (var childResourceId in newStore) {
    // a child, *maybe* but probably not
    if (newStore[childResourceId].parentId === resourceId) {
      newStore[childResourceId] = __assign({}, newStore[childResourceId], {
        parentId: ''
      });
    }
  }

  return newStore;
}

function setResourceProp(existingStore, resourceId, name, value) {
  var _a, _b;

  var existingResource = existingStore[resourceId]; // TODO: sanitization

  if (existingResource) {
    return __assign({}, existingStore, (_a = {}, _a[resourceId] = __assign({}, existingResource, (_b = {}, _b[name] = value, _b)), _a));
  } else {
    return existingStore;
  }
}

function reduceResourceEntityExpansions(expansions, action) {
  var _a;

  switch (action.type) {
    case 'INIT':
      return {};

    case 'SET_RESOURCE_ENTITY_EXPANDED':
      return __assign({}, expansions, (_a = {}, _a[action.id] = action.isExpanded, _a));

    default:
      return expansions;
  }
}

function resourcesReducers(state, action, calendar) {
  var resourceSource = reduceResourceSource(state.resourceSource, action, state.dateProfile, calendar);
  var resourceStore = reduceResourceStore(state.resourceStore, action, resourceSource, calendar);
  var resourceEntityExpansions = reduceResourceEntityExpansions(state.resourceEntityExpansions, action);
  return __assign({}, state, {
    resourceSource: resourceSource,
    resourceStore: resourceStore,
    resourceEntityExpansions: resourceEntityExpansions
  });
}

var RESOURCE_RELATED_PROPS = {
  resourceId: String,
  resourceIds: function (items) {
    return (items || []).map(function (item) {
      return String(item);
    });
  },
  resourceEditable: Boolean
};

function parseEventDef(def, props, leftovers) {
  var resourceRelatedProps = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["refineProps"])(props, RESOURCE_RELATED_PROPS, {}, leftovers);
  var resourceIds = resourceRelatedProps.resourceIds;

  if (resourceRelatedProps.resourceId) {
    resourceIds.push(resourceRelatedProps.resourceId);
  }

  def.resourceIds = resourceIds;
  def.resourceEditable = resourceRelatedProps.resourceEditable;
}

function transformDateSelectionJoin(hit0, hit1) {
  var resourceId0 = hit0.dateSpan.resourceId;
  var resourceId1 = hit1.dateSpan.resourceId;

  if (resourceId0 && resourceId1) {
    if (hit0.component.allowAcrossResources === false && resourceId0 !== resourceId1) {
      return false;
    } else {
      return {
        resourceId: resourceId0
      };
    }
  }
}

var ResourceApi =
/** @class */
function () {
  function ResourceApi(calendar, rawResource) {
    this._calendar = calendar;
    this._resource = rawResource;
  }

  ResourceApi.prototype.setProp = function (name, value) {
    this._calendar.dispatch({
      type: 'SET_RESOURCE_PROP',
      resourceId: this._resource.id,
      propName: name,
      propValue: value
    });
  };

  ResourceApi.prototype.remove = function () {
    this._calendar.dispatch({
      type: 'REMOVE_RESOURCE',
      resourceId: this._resource.id
    });
  };

  ResourceApi.prototype.getParent = function () {
    var calendar = this._calendar;
    var parentId = this._resource.parentId;

    if (parentId) {
      return new ResourceApi(calendar, calendar.state.resourceSource[parentId]);
    } else {
      return null;
    }
  };

  ResourceApi.prototype.getChildren = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var resourceStore = calendar.state.resourceStore;
    var childApis = [];

    for (var resourceId in resourceStore) {
      if (resourceStore[resourceId].parentId === thisResourceId) {
        childApis.push(new ResourceApi(calendar, resourceStore[resourceId]));
      }
    }

    return childApis;
  };
  /*
  this is really inefficient!
  TODO: make EventApi::resourceIds a hash or keep an index in the Calendar's state
  */


  ResourceApi.prototype.getEvents = function () {
    var thisResourceId = this._resource.id;
    var calendar = this._calendar;
    var _a = calendar.state.eventStore,
        defs = _a.defs,
        instances = _a.instances;
    var eventApis = [];

    for (var instanceId in instances) {
      var instance = instances[instanceId];
      var def = defs[instance.defId];

      if (def.resourceIds.indexOf(thisResourceId) !== -1) {
        // inefficient!!!
        eventApis.push(new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, def, instance));
      }
    }

    return eventApis;
  };

  Object.defineProperty(ResourceApi.prototype, "id", {
    get: function () {
      return this._resource.id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "title", {
    get: function () {
      return this._resource.title;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventConstraint", {
    get: function () {
      return this._resource.ui.constraints[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventOverlap", {
    get: function () {
      return this._resource.ui.overlap;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventAllow", {
    get: function () {
      return this._resource.ui.allows[0] || null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBackgroundColor", {
    get: function () {
      return this._resource.ui.backgroundColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventBorderColor", {
    get: function () {
      return this._resource.ui.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventTextColor", {
    get: function () {
      return this._resource.ui.textColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "eventClassNames", {
    // NOTE: user can't modify these because Object.freeze was called in event-def parsing
    get: function () {
      return this._resource.ui.classNames;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ResourceApi.prototype, "extendedProps", {
    get: function () {
      return this._resource.extendedProps;
    },
    enumerable: true,
    configurable: true
  });
  return ResourceApi;
}();

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.addResource = function (input, scrollTo) {
  var _a;

  if (scrollTo === void 0) {
    scrollTo = true;
  }

  var resourceHash;
  var resource;

  if (input instanceof ResourceApi) {
    resource = input._resource;
    resourceHash = (_a = {}, _a[resource.id] = resource, _a);
  } else {
    resourceHash = {};
    resource = parseResource(input, '', resourceHash, this);
  } // HACK


  if (scrollTo) {
    this.component.view.addScroll({
      forcedRowId: resource.id
    });
  }

  this.dispatch({
    type: 'ADD_RESOURCE',
    resourceHash: resourceHash
  });
  return new ResourceApi(this, resource);
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResourceById = function (id) {
  id = String(id);

  if (this.state.resourceStore) {
    // guard against calendar with no resource functionality
    var rawResource = this.state.resourceStore[id];

    if (rawResource) {
      return new ResourceApi(this, rawResource);
    }
  }

  return null;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.getTopLevelResources = function () {
  var resourceStore = this.state.resourceStore;
  var resourceApis = [];

  if (resourceStore) {
    // guard against calendar with no resource functionality
    for (var resourceId in resourceStore) {
      if (!resourceStore[resourceId].parentId) {
        resourceApis.push(new ResourceApi(this, resourceStore[resourceId]));
      }
    }
  }

  return resourceApis;
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.rerenderResources = function () {
  this.dispatch({
    type: 'RESET_RESOURCES'
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Calendar"].prototype.refetchResources = function () {
  this.dispatch({
    type: 'REFETCH_RESOURCES'
  });
};

function transformDatePoint(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}

function transformDateSpan(dateSpan, calendar) {
  return dateSpan.resourceId ? {
    resource: calendar.getResourceById(dateSpan.resourceId)
  } : {};
}
/*
splits things BASED OFF OF which resources they are associated with.
creates a '' entry which is when something has NO resource.
*/


var ResourceSplitter =
/** @class */
function (_super) {
  __extends(ResourceSplitter, _super);

  function ResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceSplitter.prototype.getKeyInfo = function (props) {
    return __assign({
      '': {}
    }, props.resourceStore // already has `ui` and `businessHours` keys!
    );
  };

  ResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  ResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return ResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]);

function isPropsValidWithResources(props, calendar) {
  var splitter = new ResourceSplitter();
  var sets = splitter.splitProps(__assign({}, props, {
    resourceStore: calendar.state.resourceStore
  }));

  for (var resourceId in sets) {
    var props_1 = sets[resourceId]; // merge in event data from the non-resource segment

    if (resourceId && sets['']) {
      // current segment is not the non-resource one, and there IS a non-resource one
      props_1 = __assign({}, props_1, {
        eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mergeEventStores"])(sets[''].eventStore, props_1.eventStore),
        eventUiBases: __assign({}, sets[''].eventUiBases, props_1.eventUiBases)
      });
    }

    if (!Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isPropsValid"])(props_1, calendar, {
      resourceId: resourceId
    }, filterConfig.bind(null, resourceId))) {
      return false;
    }
  }

  return true;
}

function filterConfig(resourceId, config) {
  return __assign({}, config, {
    constraints: filterConstraints(resourceId, config.constraints)
  });
}

function filterConstraints(resourceId, constraints) {
  return constraints.map(function (constraint) {
    var defs = constraint.defs;

    if (defs) {
      // we are dealing with an EventStore
      // if any of the events define constraints to resources that are NOT this resource,
      // then this resource is unconditionally prohibited, which is what a `false` value does.
      for (var defId in defs) {
        var resourceIds = defs[defId].resourceIds;

        if (resourceIds.length && resourceIds.indexOf(resourceId) === -1) {
          // TODO: use a hash?!!! (for other reasons too)
          return false;
        }
      }
    }

    return constraint;
  });
}

function transformExternalDef(dateSpan) {
  return dateSpan.resourceId ? {
    resourceId: dateSpan.resourceId
  } : {};
}

function transformEventResizeJoin(hit0, hit1) {
  var component = hit0.component;

  if (component.allowAcrossResources === false && hit0.dateSpan.resourceId !== hit1.dateSpan.resourceId) {
    return false;
  }
}

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.getResources = function () {
  var calendar = this._calendar;
  return this._def.resourceIds.map(function (resourceId) {
    return calendar.getResourceById(resourceId);
  });
};

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"].prototype.setResources = function (resources) {
  var resourceIds = []; // massage resources -> resourceIds

  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
    var resource = resources_1[_i];
    var resourceId = null;

    if (typeof resource === 'string') {
      resourceId = resource;
    } else if (typeof resource === 'number') {
      resourceId = String(resource);
    } else if (resource instanceof ResourceApi) {
      resourceId = resource.id; // guaranteed to always have an ID. hmmm
    } else {
      console.warn('unknown resource type: ' + resource);
    }

    if (resourceId) {
      resourceIds.push(resourceId);
    }
  }

  this.mutate({
    standardProps: {
      resourceIds: resourceIds
    }
  });
};

var RELEASE_DATE = '2019-08-10'; // for Scheduler

var UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too

var LICENSE_INFO_URL = 'http://fullcalendar.io/scheduler/license/';
var PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];
var CSS = {
  position: 'absolute',
  'z-index': 99999,
  bottom: '1px',
  left: '1px',
  background: '#eee',
  'border-color': '#ddd',
  'border-style': 'solid',
  'border-width': '1px 1px 0 0',
  padding: '2px 4px',
  'font-size': '12px',
  'border-top-right-radius': '3px'
};

function injectLicenseWarning(containerEl, calendar) {
  var key = calendar.opt('schedulerLicenseKey');

  if (!isImmuneUrl(window.location.href) && !isValidKey(key)) {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(containerEl, '<div class="fc-license-message" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(CSS)) + '">' + 'Please use a valid license key. <a href="' + LICENSE_INFO_URL + '">More Info</a>' + '</div>');
  }
}
/*
This decryption is not meant to be bulletproof. Just a way to remind about an upgrade.
*/


function isValidKey(key) {
  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {
    return true;
  }

  var parts = (key || '').match(/^(\d+)\-fcs\-(\d+)$/);

  if (parts && parts[1].length === 10) {
    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);
    var releaseDate = new Date(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].mockSchedulerReleaseDate || RELEASE_DATE);

    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isValidDate"])(releaseDate)) {
      // token won't be replaced in dev mode
      var minPurchaseDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(releaseDate, -UPGRADE_WINDOW);

      if (minPurchaseDate < purchaseDate) {
        return true;
      }
    }
  }

  return false;
}

function isImmuneUrl(url) {
  return /\w+\:\/\/fullcalendar\.io\/|\/examples\/[\w-]+\.html$/.test(url);
}

var optionChangeHandlers = {
  resources: handleResources
};

function handleResources(newSourceInput, calendar, deepEqual) {
  var oldSourceInput = calendar.state.resourceSource._raw;

  if (!deepEqual(oldSourceInput, newSourceInput)) {
    calendar.dispatch({
      type: 'RESET_RESOURCE_SOURCE',
      resourceSourceInput: newSourceInput
    });
  }
}

registerResourceSourceDef({
  ignoreRange: true,
  parseMeta: function (raw) {
    if (Array.isArray(raw)) {
      return raw;
    } else if (Array.isArray(raw.resources)) {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, successCallback) {
    successCallback({
      rawResources: arg.resourceSource.meta
    });
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'function') {
      return raw;
    } else if (typeof raw.resources === 'function') {
      return raw.resources;
    }

    return null;
  },
  fetch: function (arg, success, failure) {
    var dateEnv = arg.calendar.dateEnv;
    var func = arg.resourceSource.meta;
    var publicArg = {};

    if (arg.range) {
      publicArg = {
        start: dateEnv.toDate(arg.range.start),
        end: dateEnv.toDate(arg.range.end),
        startStr: dateEnv.formatIso(arg.range.start),
        endStr: dateEnv.formatIso(arg.range.end),
        timeZone: dateEnv.timeZone
      };
    } // TODO: make more dry with EventSourceFunc
    // TODO: accept a response?


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["unpromisify"])(func.bind(null, publicArg), function (rawResources) {
      success({
        rawResources: rawResources
      }); // needs an object response
    }, failure // send errorObj directly to failure callback
    );
  }
});
registerResourceSourceDef({
  parseMeta: function (raw) {
    if (typeof raw === 'string') {
      raw = {
        url: raw
      };
    } else if (!raw || typeof raw !== 'object' || !raw.url) {
      return null;
    }

    return {
      url: raw.url,
      method: (raw.method || 'GET').toUpperCase(),
      extraParams: raw.extraParams
    };
  },
  fetch: function (arg, successCallback, failureCallback) {
    var meta = arg.resourceSource.meta;
    var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["requestJson"])(meta.method, meta.url, requestParams, function (rawResources, xhr) {
      successCallback({
        rawResources: rawResources,
        xhr: xhr
      });
    }, function (message, xhr) {
      failureCallback({
        message: message,
        xhr: xhr
      });
    });
  }
}); // TODO: somehow consolidate with event json feed

function buildRequestParams(meta, range, calendar) {
  var dateEnv = calendar.dateEnv;
  var startParam;
  var endParam;
  var timeZoneParam;
  var customRequestParams;
  var params = {};

  if (range) {
    // startParam = meta.startParam
    // if (startParam == null) {
    startParam = calendar.opt('startParam'); // }
    // endParam = meta.endParam
    // if (endParam == null) {

    endParam = calendar.opt('endParam'); // }
    // timeZoneParam = meta.timeZoneParam
    // if (timeZoneParam == null) {

    timeZoneParam = calendar.opt('timeZoneParam'); // }

    params[startParam] = dateEnv.formatIso(range.start);
    params[endParam] = dateEnv.formatIso(range.end);

    if (dateEnv.timeZone !== 'local') {
      params[timeZoneParam] = dateEnv.timeZone;
    }
  } // retrieve any outbound GET/POST data from the options


  if (typeof meta.extraParams === 'function') {
    // supplied as a function that returns a key/value object
    customRequestParams = meta.extraParams();
  } else {
    // probably supplied as a straight key/value object
    customRequestParams = meta.extraParams || {};
  }

  __assign(params, customRequestParams);

  return params;
}

function buildResourceTextFunc(resourceTextSetting, calendar) {
  if (typeof resourceTextSetting === 'function') {
    return function (resource) {
      return resourceTextSetting(new ResourceApi(calendar, resource));
    };
  } else {
    return function (resource) {
      return resource.title || getPublicId(resource.id);
    };
  }
}

var ResourceDayHeader =
/** @class */
function (_super) {
  __extends(ResourceDayHeader, _super);

  function ResourceDayHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    _this.datesAboveResources = _this.opt('datesAboveResources');
    _this.resourceTextFunc = buildResourceTextFunc(_this.opt('resourceText'), _this.calendar);
    parentEl.innerHTML = ''; // because might be nbsp

    parentEl.appendChild(_this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-row ' + _this.theme.getClass('headerRow') + '">' + '<table class="' + _this.theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
    _this.thead = _this.el.querySelector('thead');
    return _this;
  }

  ResourceDayHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ResourceDayHeader.prototype.render = function (props) {
    var html;
    this.dateFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(this.opt('columnHeaderFormat') || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeFallbackHeaderFormat"])(props.datesRepDistinctDays, props.dates.length));

    if (props.dates.length === 1) {
      html = this.renderResourceRow(props.resources);
    } else {
      if (this.datesAboveResources) {
        html = this.renderDayAndResourceRows(props.dates, props.resources);
      } else {
        html = this.renderResourceAndDayRows(props.resources, props.dates);
      }
    }

    this.thead.innerHTML = html;
    this.processResourceEls(props.resources);
  };

  ResourceDayHeader.prototype.renderResourceRow = function (resources) {
    var _this = this;

    var cellHtmls = resources.map(function (resource) {
      return _this.renderResourceCell(resource, 1);
    });
    return this.buildTr(cellHtmls);
  };

  ResourceDayHeader.prototype.renderDayAndResourceRows = function (dates, resources) {
    var dateHtmls = [];
    var resourceHtmls = [];

    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
      var date = dates_1[_i];
      dateHtmls.push(this.renderDateCell(date, resources.length));

      for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {
        var resource = resources_1[_a];
        resourceHtmls.push(this.renderResourceCell(resource, 1, date));
      }
    }

    return this.buildTr(dateHtmls) + this.buildTr(resourceHtmls);
  };

  ResourceDayHeader.prototype.renderResourceAndDayRows = function (resources, dates) {
    var resourceHtmls = [];
    var dateHtmls = [];

    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {
      var resource = resources_2[_i];
      resourceHtmls.push(this.renderResourceCell(resource, dates.length));

      for (var _a = 0, dates_2 = dates; _a < dates_2.length; _a++) {
        var date = dates_2[_a];
        dateHtmls.push(this.renderDateCell(date, 1, resource));
      }
    }

    return this.buildTr(resourceHtmls) + this.buildTr(dateHtmls);
  }; // Cell Rendering Utils
  // ----------------------------------------------------------------------------------------------
  // a cell with the resource name. might be associated with a specific day


  ResourceDayHeader.prototype.renderResourceCell = function (resource, colspan, date) {
    var dateEnv = this.dateEnv;
    return '<th class="fc-resource-cell"' + ' data-resource-id="' + resource.id + '"' + (date ? ' data-date="' + dateEnv.formatIso(date, {
      omitTime: true
    }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this.resourceTextFunc(resource)) + '</th>';
  }; // a cell with date text. might have a resource associated with it


  ResourceDayHeader.prototype.renderDateCell = function (date, colspan, resource) {
    var props = this.props;
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["renderDateCell"])(date, props.dateProfile, props.datesRepDistinctDays, props.dates.length * props.resources.length, this.dateFormat, this.context, colspan, resource ? 'data-resource-id="' + resource.id + '"' : '');
  };

  ResourceDayHeader.prototype.buildTr = function (cellHtmls) {
    if (!cellHtmls.length) {
      cellHtmls = ['<td>&nbsp;</td>'];
    }

    if (this.props.renderIntroHtml) {
      cellHtmls = [this.props.renderIntroHtml()].concat(cellHtmls);
    }

    if (this.isRtl) {
      cellHtmls.reverse();
    }

    return '<tr>' + cellHtmls.join('') + '</tr>';
  }; // Post-rendering
  // ----------------------------------------------------------------------------------------------
  // given a container with already rendered resource cells


  ResourceDayHeader.prototype.processResourceEls = function (resources) {
    var _this = this;

    var view = this.view;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.thead, '.fc-resource-cell').forEach(function (node, col) {
      col = col % resources.length;

      if (_this.isRtl) {
        col = resources.length - 1 - col;
      }

      var resource = resources[col];
      view.publiclyTrigger('resourceRender', [{
        resource: new ResourceApi(_this.calendar, resource),
        el: node,
        view: view
      }]);
    });
  };

  return ResourceDayHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var AbstractResourceDayTable =
/** @class */
function () {
  function AbstractResourceDayTable(dayTable, resources) {
    this.dayTable = dayTable;
    this.resources = resources;
    this.resourceIndex = new ResourceIndex(resources);
    this.rowCnt = dayTable.rowCnt;
    this.colCnt = dayTable.colCnt * resources.length;
    this.cells = this.buildCells();
  }

  AbstractResourceDayTable.prototype.buildCells = function () {
    var _a = this,
        rowCnt = _a.rowCnt,
        dayTable = _a.dayTable,
        resources = _a.resources;

    var rows = [];

    for (var row = 0; row < rowCnt; row++) {
      var rowCells = [];

      for (var dateCol = 0; dateCol < dayTable.colCnt; dateCol++) {
        for (var resourceCol = 0; resourceCol < resources.length; resourceCol++) {
          var resource = resources[resourceCol];
          var htmlAttrs = 'data-resource-id="' + resource.id + '"';
          rowCells[this.computeCol(dateCol, resourceCol)] = {
            date: dayTable.cells[row][dateCol].date,
            resource: resource,
            htmlAttrs: htmlAttrs
          };
        }
      }

      rows.push(rowCells);
    }

    return rows;
  };

  return AbstractResourceDayTable;
}();
/*
resources over dates
*/


var ResourceDayTable =
/** @class */
function (_super) {
  __extends(ResourceDayTable, _super);

  function ResourceDayTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourceDayTable.prototype.computeCol = function (dateI, resourceI) {
    return resourceI * this.dayTable.colCnt + dateI;
  };
  /*
  all date ranges are intact
  */


  ResourceDayTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    return [{
      firstCol: this.computeCol(dateStartI, resourceI),
      lastCol: this.computeCol(dateEndI, resourceI),
      isStart: true,
      isEnd: true
    }];
  };

  return ResourceDayTable;
}(AbstractResourceDayTable);
/*
dates over resources
*/


var DayResourceTable =
/** @class */
function (_super) {
  __extends(DayResourceTable, _super);

  function DayResourceTable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DayResourceTable.prototype.computeCol = function (dateI, resourceI) {
    return dateI * this.resources.length + resourceI;
  };
  /*
  every single day is broken up
  */


  DayResourceTable.prototype.computeColRanges = function (dateStartI, dateEndI, resourceI) {
    var segs = [];

    for (var i = dateStartI; i <= dateEndI; i++) {
      var col = this.computeCol(i, resourceI);
      segs.push({
        firstCol: col,
        lastCol: col,
        isStart: i === dateStartI,
        isEnd: i === dateEndI
      });
    }

    return segs;
  };

  return DayResourceTable;
}(AbstractResourceDayTable);

var ResourceIndex =
/** @class */
function () {
  function ResourceIndex(resources) {
    var indicesById = {};
    var ids = [];

    for (var i = 0; i < resources.length; i++) {
      var id = resources[i].id;
      ids.push(id);
      indicesById[id] = i;
    }

    this.ids = ids;
    this.indicesById = indicesById;
    this.length = resources.length;
  }

  return ResourceIndex;
}();
/*
TODO: just use ResourceHash somehow? could then use the generic ResourceSplitter
*/


var VResourceSplitter =
/** @class */
function (_super) {
  __extends(VResourceSplitter, _super);

  function VResourceSplitter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  VResourceSplitter.prototype.getKeyInfo = function (props) {
    var resourceDayTable = props.resourceDayTable;
    var hash = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(resourceDayTable.resourceIndex.indicesById, function (i) {
      return resourceDayTable.resources[i]; // has `ui` AND `businessHours` keys!
    }); // :(

    hash[''] = {};
    return hash;
  };

  VResourceSplitter.prototype.getKeysForDateSpan = function (dateSpan) {
    return [dateSpan.resourceId || ''];
  };

  VResourceSplitter.prototype.getKeysForEventDef = function (eventDef) {
    var resourceIds = eventDef.resourceIds;

    if (!resourceIds.length) {
      return [''];
    }

    return resourceIds;
  };

  return VResourceSplitter;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]); // joiner


var NO_SEGS = []; // for memoizing

var VResourceJoiner =
/** @class */
function () {
  function VResourceJoiner() {
    this.joinDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinSegs);
    this.joinEventDrags = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
    this.joinEventResizes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(this.joinInteractions);
  }
  /*
  propSets also has a '' key for things with no resource
  */


  VResourceJoiner.prototype.joinProps = function (propSets, resourceDayTable) {
    var dateSelectionSets = [];
    var businessHoursSets = [];
    var fgEventSets = [];
    var bgEventSets = [];
    var eventDrags = [];
    var eventResizes = [];
    var eventSelection = '';
    var keys = resourceDayTable.resourceIndex.ids.concat(['']); // add in the all-resource key

    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      var props = propSets[key];
      dateSelectionSets.push(props.dateSelectionSegs);
      businessHoursSets.push(key ? props.businessHourSegs : NO_SEGS); // don't include redundant all-resource businesshours

      fgEventSets.push(key ? props.fgEventSegs : NO_SEGS); // don't include fg all-resource segs

      bgEventSets.push(props.bgEventSegs);
      eventDrags.push(props.eventDrag);
      eventResizes.push(props.eventResize);
      eventSelection = eventSelection || props.eventSelection;
    }

    return {
      dateSelectionSegs: this.joinDateSelection.apply(this, [resourceDayTable].concat(dateSelectionSets)),
      businessHourSegs: this.joinBusinessHours.apply(this, [resourceDayTable].concat(businessHoursSets)),
      fgEventSegs: this.joinFgEvents.apply(this, [resourceDayTable].concat(fgEventSets)),
      bgEventSegs: this.joinBgEvents.apply(this, [resourceDayTable].concat(bgEventSets)),
      eventDrag: this.joinEventDrags.apply(this, [resourceDayTable].concat(eventDrags)),
      eventResize: this.joinEventResizes.apply(this, [resourceDayTable].concat(eventResizes)),
      eventSelection: eventSelection
    };
  };

  VResourceJoiner.prototype.joinSegs = function (resourceDayTable) {
    var segGroups = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      segGroups[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _a = 0, _b = segGroups[i]; _a < _b.length; _a++) {
        var seg = _b[_a];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }

      for (var _c = 0, _d = segGroups[resourceCnt]; _c < _d.length; _c++) {
        // one beyond. the all-resource
        var seg = _d[_c];
        transformedSegs.push.apply( // one beyond. the all-resource
        transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };
  /*
  for expanding non-resource segs to all resources.
  only for public use.
  no memoizing.
  */


  VResourceJoiner.prototype.expandSegs = function (resourceDayTable, segs) {
    var resourceCnt = resourceDayTable.resources.length;
    var transformedSegs = [];

    for (var i = 0; i < resourceCnt; i++) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i));
      }
    }

    return transformedSegs;
  };

  VResourceJoiner.prototype.joinInteractions = function (resourceDayTable) {
    var interactions = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      interactions[_i - 1] = arguments[_i];
    }

    var resourceCnt = resourceDayTable.resources.length;
    var affectedInstances = {};
    var transformedSegs = [];
    var isEvent = false;
    var sourceSeg = null;

    for (var i = 0; i < resourceCnt; i++) {
      var interaction = interactions[i];

      if (interaction) {
        for (var _a = 0, _b = interaction.segs; _a < _b.length; _a++) {
          var seg = _b[_a];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }

        __assign(affectedInstances, interaction.affectedInstances);

        isEvent = isEvent || interaction.isEvent;
        sourceSeg = sourceSeg || interaction.sourceSeg;
      }

      if (interactions[resourceCnt]) {
        // one beyond. the all-resource
        for (var _c = 0, _d = interactions[resourceCnt].segs; _c < _d.length; _c++) {
          var seg = _d[_c];
          transformedSegs.push.apply(transformedSegs, this.transformSeg(seg, resourceDayTable, i) // TODO: templateify Interaction::segs
          );
        }
      }
    }

    return {
      affectedInstances: affectedInstances,
      segs: transformedSegs,
      isEvent: isEvent,
      sourceSeg: sourceSeg
    };
  };

  return VResourceJoiner;
}();
/*
doesn't accept grouping
*/


function flattenResources(resourceStore, orderSpecs) {
  return buildRowNodes(resourceStore, [], orderSpecs, false, {}, true).map(function (node) {
    return node.resource;
  });
}

function buildRowNodes(resourceStore, groupSpecs, orderSpecs, isVGrouping, expansions, expansionDefault) {
  var complexNodes = buildHierarchy(resourceStore, isVGrouping ? -1 : 1, groupSpecs, orderSpecs);
  var flatNodes = [];
  flattenNodes(complexNodes, flatNodes, isVGrouping, [], 0, expansions, expansionDefault);
  return flatNodes;
}

function flattenNodes(complexNodes, res, isVGrouping, rowSpans, depth, expansions, expansionDefault) {
  for (var i = 0; i < complexNodes.length; i++) {
    var complexNode = complexNodes[i];
    var group = complexNode.group;

    if (group) {
      if (isVGrouping) {
        var firstRowIndex = res.length;
        var rowSpanIndex = rowSpans.length;
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans.concat(0), depth, expansions, expansionDefault);

        if (firstRowIndex < res.length) {
          var firstRow = res[firstRowIndex];
          var firstRowSpans = firstRow.rowSpans = firstRow.rowSpans.slice();
          firstRowSpans[rowSpanIndex] = res.length - firstRowIndex;
        }
      } else {
        var id = group.spec.field + ':' + group.value;
        var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
        res.push({
          id: id,
          group: group,
          isExpanded: isExpanded
        });

        if (isExpanded) {
          flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
        }
      }
    } else if (complexNode.resource) {
      var id = complexNode.resource.id;
      var isExpanded = expansions[id] != null ? expansions[id] : expansionDefault;
      res.push({
        id: id,
        rowSpans: rowSpans,
        depth: depth,
        isExpanded: isExpanded,
        hasChildren: Boolean(complexNode.children.length),
        resource: complexNode.resource,
        resourceFields: complexNode.resourceFields
      });

      if (isExpanded) {
        flattenNodes(complexNode.children, res, isVGrouping, rowSpans, depth + 1, expansions, expansionDefault);
      }
    }
  }
}

function buildHierarchy(resourceStore, maxDepth, groupSpecs, orderSpecs) {
  var resourceNodes = buildResourceNodes(resourceStore, orderSpecs);
  var builtNodes = [];

  for (var resourceId in resourceNodes) {
    var resourceNode = resourceNodes[resourceId];

    if (!resourceNode.resource.parentId) {
      insertResourceNode(resourceNode, builtNodes, groupSpecs, 0, maxDepth, orderSpecs);
    }
  }

  return builtNodes;
}

function buildResourceNodes(resourceStore, orderSpecs) {
  var nodeHash = {};

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];
    nodeHash[resourceId] = {
      resource: resource,
      resourceFields: buildResourceFields(resource),
      children: []
    };
  }

  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.parentId) {
      var parentNode = nodeHash[resource.parentId];

      if (parentNode) {
        insertResourceNodeInSiblings(nodeHash[resourceId], parentNode.children, orderSpecs);
      }
    }
  }

  return nodeHash;
}

function insertResourceNode(resourceNode, nodes, groupSpecs, depth, maxDepth, orderSpecs) {
  if (groupSpecs.length && (maxDepth === -1 || depth <= maxDepth)) {
    var groupNode = ensureGroupNodes(resourceNode, nodes, groupSpecs[0]);
    insertResourceNode(resourceNode, groupNode.children, groupSpecs.slice(1), depth + 1, maxDepth, orderSpecs);
  } else {
    insertResourceNodeInSiblings(resourceNode, nodes, orderSpecs);
  }
}

function ensureGroupNodes(resourceNode, nodes, groupSpec) {
  var groupValue = resourceNode.resourceFields[groupSpec.field];
  var groupNode;
  var newGroupIndex; // find an existing group that matches, or determine the position for a new group

  if (groupSpec.order) {
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group) {
        var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["flexibleCompare"])(groupValue, node.group.value) * groupSpec.order;

        if (cmp === 0) {
          groupNode = node;
          break;
        } else if (cmp < 0) {
          break;
        }
      }
    }
  } else {
    // the groups are unordered
    for (newGroupIndex = 0; newGroupIndex < nodes.length; newGroupIndex++) {
      var node = nodes[newGroupIndex];

      if (node.group && groupValue === node.group.value) {
        groupNode = node;
        break;
      }
    }
  }

  if (!groupNode) {
    groupNode = {
      group: {
        value: groupValue,
        spec: groupSpec
      },
      children: []
    };
    nodes.splice(newGroupIndex, 0, groupNode);
  }

  return groupNode;
}

function insertResourceNodeInSiblings(resourceNode, siblings, orderSpecs) {
  var i;

  for (i = 0; i < siblings.length; i++) {
    var cmp = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareByFieldSpecs"])(siblings[i].resourceFields, resourceNode.resourceFields, orderSpecs);

    if (cmp > 0) {
      // went 1 past. insert at i
      break;
    }
  }

  siblings.splice(i, 0, resourceNode);
}

function buildResourceFields(resource) {
  var obj = __assign({}, resource.extendedProps, resource.ui, resource);

  delete obj.ui;
  delete obj.extendedProps;
  return obj;
}

function isGroupsEqual(group0, group1) {
  return group0.spec === group1.spec && group0.value === group1.value;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  reducers: [resourcesReducers],
  eventDefParsers: [parseEventDef],
  isDraggableTransformers: [transformIsDraggable],
  eventDragMutationMassagers: [massageEventDragMutation],
  eventDefMutationAppliers: [applyEventDefMutation],
  dateSelectionTransformers: [transformDateSelectionJoin],
  datePointTransforms: [transformDatePoint],
  dateSpanTransforms: [transformDateSpan],
  viewPropsTransformers: [ResourceDataAdder, ResourceEventConfigAdder],
  isPropsValid: isPropsValidWithResources,
  externalDefTransforms: [transformExternalDef],
  eventResizeJoinTransforms: [transformEventResizeJoin],
  viewContainerModifiers: [injectLicenseWarning],
  eventDropTransformers: [transformEventDrop],
  optionChangeHandlers: optionChangeHandlers
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/resource-timeline/main.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fullcalendar/resource-timeline/main.esm.js ***!
  \******************************************************************/
/*! exports provided: default, ResourceTimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceTimelineView", function() { return ResourceTimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/* harmony import */ var _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fullcalendar/timeline */ "./node_modules/@fullcalendar/timeline/main.esm.js");
/* harmony import */ var _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @fullcalendar/resource-common */ "./node_modules/@fullcalendar/resource-common/main.esm.js");
/*!
FullCalendar Resource Timeline Plugin v4.3.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var Row =
/** @class */
function (_super) {
  __extends(Row, _super);

  function Row(context, spreadsheetParent, spreadsheetNextSibling, timeAxisParent, timeAxisNextSibling) {
    var _this = _super.call(this, context) || this;

    _this.isSizeDirty = false;
    spreadsheetParent.insertBefore(_this.spreadsheetTr = document.createElement('tr'), spreadsheetNextSibling);
    timeAxisParent.insertBefore(_this.timeAxisTr = document.createElement('tr'), timeAxisNextSibling);
    return _this;
  }

  Row.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.spreadsheetTr);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.timeAxisTr);

    _super.prototype.destroy.call(this);
  };

  Row.prototype.updateSize = function (isResize) {
    this.isSizeDirty = false;
  };

  return Row;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

function updateExpanderIcon(el, isExpanded) {
  var classList = el.classList;

  if (isExpanded) {
    classList.remove('fc-icon-plus-square');
    classList.add('fc-icon-minus-square');
  } else {
    classList.remove('fc-icon-minus-square');
    classList.add('fc-icon-plus-square');
  }
}

function clearExpanderIcon(el) {
  var classList = el.classList;
  classList.remove('fc-icon-minus-square');
  classList.remove('fc-icon-plus-square');
}

function updateTrResourceId(tr, resourceId) {
  tr.setAttribute('data-resource-id', resourceId);
}

var GroupRow =
/** @class */
function (_super) {
  __extends(GroupRow, _super);

  function GroupRow() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderCells, _this.unrenderCells);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderCells]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    return _this;
  }

  GroupRow.prototype.render = function (props) {
    this._renderCells(props.group, props.spreadsheetColCnt);

    this._updateExpanderIcon(props.isExpanded);

    this.isSizeDirty = true;
  };

  GroupRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderCells.unrender(); // should unrender everything else

  };

  GroupRow.prototype.renderCells = function (group, spreadsheetColCnt) {
    var spreadsheetContentEl = this.renderSpreadsheetContent(group);
    this.spreadsheetTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider',
      colSpan: spreadsheetColCnt // span across all columns

    }, this.spreadsheetHeightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, spreadsheetContentEl)) // needed by setTrInnerHeight
    );
    this.expanderIconEl = spreadsheetContentEl.querySelector('.fc-icon');
    this.expanderIconEl.parentElement.addEventListener('click', this.onExpanderClick); // insert a single cell, with a single empty <div>.
    // there will be no content

    this.timeAxisTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: 'fc-divider'
    }, this.timeAxisHeightEl = document.createElement('div')));
  };

  GroupRow.prototype.unrenderCells = function () {
    this.spreadsheetTr.innerHTML = '';
    this.timeAxisTr.innerHTML = '';
  };
  /*
  Renders the content wrapper element that will be inserted into this row's TD cell.
  */


  GroupRow.prototype.renderSpreadsheetContent = function (group) {
    var text = this.renderCellText(group);
    var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + '<span class="fc-expander">' + '<span class="fc-icon"></span>' + '</span>' + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');
    var filter = group.spec.render;

    if (typeof filter === 'function') {
      contentEl = filter(contentEl, group.value) || contentEl;
    }

    return contentEl;
  };

  GroupRow.prototype.renderCellText = function (group) {
    var text = group.value || ''; // might be null/undefined if an ad-hoc grouping

    var filter = group.spec.text;

    if (typeof filter === 'function') {
      text = filter(text) || text;
    }

    return text;
  };

  GroupRow.prototype.getHeightEls = function () {
    return [this.spreadsheetHeightEl, this.timeAxisHeightEl];
  };

  GroupRow.prototype.updateExpanderIcon = function (isExpanded) {
    updateExpanderIcon(this.expanderIconEl, isExpanded);
  };

  return GroupRow;
}(Row);

GroupRow.addEqualityFuncs({
  group: _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["isGroupsEqual"] // HACK for ResourceTimelineView::renderRows

});

var SpreadsheetRow =
/** @class */
function (_super) {
  __extends(SpreadsheetRow, _super);

  function SpreadsheetRow(context, tr) {
    var _this = _super.call(this, context) || this;

    _this._renderRow = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderRow, _this.unrenderRow);
    _this._updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId, null, [_this._renderRow]);
    _this._updateExpanderIcon = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateExpanderIcon, null, [_this._renderRow]);

    _this.onExpanderClick = function (ev) {
      var props = _this.props;

      _this.calendar.dispatch({
        type: 'SET_RESOURCE_ENTITY_EXPANDED',
        id: props.id,
        isExpanded: !props.isExpanded
      });
    };

    _this.tr = tr;
    return _this;
  }

  SpreadsheetRow.prototype.render = function (props) {
    this._renderRow(props.resource, props.rowSpans, props.depth, props.colSpecs);

    this._updateTrResourceId(this.tr, props.resource.id); // TODO: only use public ID?


    this._updateExpanderIcon(props.hasChildren, props.isExpanded);
  };

  SpreadsheetRow.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this._renderRow.unrender(); // should unrender everything else

  };

  SpreadsheetRow.prototype.renderRow = function (resource, rowSpans, depth, colSpecs) {
    var _a = this,
        tr = _a.tr,
        theme = _a.theme,
        calendar = _a.calendar,
        view = _a.view;

    var resourceFields = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceFields"])(resource); // slightly inefficient. already done up the call stack

    var mainTd;

    for (var i = 0; i < colSpecs.length; i++) {
      var colSpec = colSpecs[i];
      var rowSpan = rowSpans[i];

      if (rowSpan === 0) {
        // not responsible for group-based rows. VRowGroup is
        continue;
      } else if (rowSpan == null) {
        rowSpan = 1;
      }

      var text = void 0;

      if (colSpec.field) {
        text = resourceFields[colSpec.field];
      } else {
        text = Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(colSpec.text, calendar)(resource);
      }

      var contentEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-cell-content">' + (colSpec.isMain ? renderIconHtml(depth) : '') + '<span class="fc-cell-text">' + (text ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text) : '&nbsp;') + '</span>' + '</div>');

      if (typeof colSpec.render === 'function') {
        // a filter function for the element
        contentEl = colSpec.render(new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource), contentEl) || contentEl;
      }

      if (rowSpan > 1) {
        contentEl.classList.add('fc-sticky');
      }

      var td = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
        className: theme.getClass('widgetContent'),
        rowspan: rowSpan
      }, contentEl); // the first cell of the row needs to have an inner div for setTrInnerHeight

      if (colSpec.isMain) {
        td.appendChild(this.heightEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, td.childNodes) // inner wrap
        );
        mainTd = td;
      }

      tr.appendChild(td);
    }

    this.expanderIconEl = tr.querySelector('.fc-expander-space .fc-icon'); // wait until very end

    view.publiclyTrigger('resourceRender', [{
      resource: new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceApi"](calendar, resource),
      el: mainTd,
      view: view
    }]);
  };

  SpreadsheetRow.prototype.unrenderRow = function () {
    this.tr.innerHTML = '';
  };

  SpreadsheetRow.prototype.updateExpanderIcon = function (hasChildren, isExpanded) {
    var expanderIconEl = this.expanderIconEl;
    var expanderEl = expanderIconEl.parentElement;

    if (expanderIconEl && expanderEl // why would this be null?? was the case in IE11
    ) {
        if (hasChildren) {
          expanderEl.addEventListener('click', this.onExpanderClick);
          expanderEl.classList.add('fc-expander');
          updateExpanderIcon(expanderIconEl, isExpanded);
        } else {
          expanderEl.removeEventListener('click', this.onExpanderClick);
          expanderEl.classList.remove('fc-expander');
          clearExpanderIcon(expanderIconEl);
        }
      }
  };

  return SpreadsheetRow;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);
/*
Renders the HTML responsible for the subrow expander area,
as well as the space before it (used to align expanders of similar depths)
*/


function renderIconHtml(depth) {
  var html = '';

  for (var i = 0; i < depth; i++) {
    html += '<span class="fc-icon"></span>';
  }

  html += '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>';
  return html;
}

var ResourceRow =
/** @class */
function (_super) {
  __extends(ResourceRow, _super);

  function ResourceRow(context, a, b, c, d, timeAxis) {
    var _this = _super.call(this, context, a, b, c, d) || this;

    _this._updateTrResourceId = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(updateTrResourceId);
    _this.spreadsheetRow = new SpreadsheetRow(context, _this.spreadsheetTr);

    _this.timeAxisTr.appendChild(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
      className: _this.theme.getClass('widgetContent')
    }, _this.innerContainerEl = document.createElement('div')));

    _this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](context, _this.innerContainerEl, _this.innerContainerEl, timeAxis);
    return _this;
  }

  ResourceRow.prototype.destroy = function () {
    this.spreadsheetRow.destroy();
    this.lane.destroy();

    _super.prototype.destroy.call(this);
  };

  ResourceRow.prototype.render = function (props) {
    // spreadsheetRow handles calling updateTrResourceId for spreadsheetTr
    this.spreadsheetRow.receiveProps({
      colSpecs: props.colSpecs,
      id: props.id,
      rowSpans: props.rowSpans,
      depth: props.depth,
      isExpanded: props.isExpanded,
      hasChildren: props.hasChildren,
      resource: props.resource
    });

    this._updateTrResourceId(this.timeAxisTr, props.resource.id);

    this.lane.receiveProps({
      dateProfile: props.dateProfile,
      nextDayThreshold: props.nextDayThreshold,
      businessHours: props.businessHours,
      eventStore: props.eventStore,
      eventUiBases: props.eventUiBases,
      dateSelection: props.dateSelection,
      eventSelection: props.eventSelection,
      eventDrag: props.eventDrag,
      eventResize: props.eventResize
    });
    this.isSizeDirty = true;
  };

  ResourceRow.prototype.updateSize = function (isResize) {
    _super.prototype.updateSize.call(this, isResize);

    this.lane.updateSize(isResize);
  };

  ResourceRow.prototype.getHeightEls = function () {
    return [this.spreadsheetRow.heightEl, this.innerContainerEl];
  };

  return ResourceRow;
}(Row);

ResourceRow.addEqualityFuncs({
  rowSpans: _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isArraysEqual"] // HACK for isSizeDirty, ResourceTimelineView::renderRows

});
var COL_MIN_WIDTH = 30;

var SpreadsheetHeader =
/** @class */
function (_super) {
  __extends(SpreadsheetHeader, _super);

  function SpreadsheetHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    _this.resizables = [];
    _this.colWidths = [];
    _this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
    parentEl.appendChild(_this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: _this.theme.getClass('tableGrid')
    }));
    return _this;
  }

  SpreadsheetHeader.prototype.destroy = function () {
    for (var _i = 0, _a = this.resizables; _i < _a.length; _i++) {
      var resizable = _a[_i];
      resizable.destroy();
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);

    _super.prototype.destroy.call(this);
  };

  SpreadsheetHeader.prototype.render = function (props) {
    var theme = this.theme;
    var colSpecs = props.colSpecs;
    var html = '<colgroup>' + props.colTags + '</colgroup>' + '<tbody>';

    if (props.superHeaderText) {
      html += '<tr class="fc-super">' + '<th class="' + theme.getClass('widgetHeader') + '" colspan="' + colSpecs.length + '">' + '<div class="fc-cell-content">' + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(props.superHeaderText) + '</span>' + '</div>' + '</th>' + '</tr>';
    }

    html += '<tr>';

    for (var i = 0; i < colSpecs.length; i++) {
      var o = colSpecs[i];
      var isLast = i === colSpecs.length - 1;
      html += "<th class=\"" + theme.getClass('widgetHeader') + "\">" + '<div>' + '<div class="fc-cell-content">' + (o.isMain ? '<span class="fc-expander-space">' + '<span class="fc-icon"></span>' + '</span>' : '') + '<span class="fc-cell-text">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(o.labelText || '') + // what about normalizing this value ahead of time?
      '</span>' + '</div>' + (!isLast ? '<div class="fc-col-resizer"></div>' : '') + '</div>' + '</th>';
    }

    html += '</tr>';
    html += '</tbody>';
    this.tableEl.innerHTML = html;
    this.thEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('th'));
    this.colEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('col'));
    this.resizerEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('.fc-col-resizer'));
    this.initColResizing();
  };

  SpreadsheetHeader.prototype.initColResizing = function () {
    var _this = this;

    var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resizables = this.resizerEls.map(function (handleEl, colIndex) {
        var dragging = new ElementDraggingImpl(handleEl);
        var startWidth;
        dragging.emitter.on('dragstart', function () {
          startWidth = _this.colWidths[colIndex];

          if (typeof startWidth !== 'number') {
            startWidth = _this.thEls[colIndex].getBoundingClientRect().width;
          }
        });
        dragging.emitter.on('dragmove', function (pev) {
          _this.colWidths[colIndex] = Math.max(startWidth + pev.deltaX * (_this.isRtl ? -1 : 1), COL_MIN_WIDTH);

          _this.emitter.trigger('colwidthchange', _this.colWidths);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  return SpreadsheetHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var Spreadsheet =
/** @class */
function (_super) {
  __extends(Spreadsheet, _super);

  function Spreadsheet(context, headParentEl, bodyParentEl) {
    var _this = _super.call(this, context) || this;

    _this._renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.renderCells, _this.unrenderCells);
    _this.layout = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["HeaderBodyLayout"](headParentEl, bodyParentEl, 'clipped-scroll');
    var headerEnhancedScroller = _this.layout.headerScroller.enhancedScroll;
    var bodyEnhancedScroller = _this.layout.bodyScroller.enhancedScroll;
    _this.header = new SpreadsheetHeader(context, headerEnhancedScroller.canvas.contentEl);

    _this.header.emitter.on('colwidthchange', function (colWidths) {
      _this.applyColWidths(colWidths);
    });

    bodyEnhancedScroller.canvas.contentEl.appendChild(_this.bodyContainerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table>' + '<colgroup />' + '<tbody />' + '</table>'));
    _this.bodyColGroup = _this.bodyContainerEl.querySelector('colgroup');
    _this.bodyTbody = _this.bodyContainerEl.querySelector('tbody');
    return _this;
  }

  Spreadsheet.prototype.destroy = function () {
    this.header.destroy();
    this.layout.destroy();

    this._renderCells.unrender();

    _super.prototype.destroy.call(this);
  };

  Spreadsheet.prototype.render = function (props) {
    this._renderCells(props.superHeaderText, props.colSpecs);
  };

  Spreadsheet.prototype.renderCells = function (superHeaderText, colSpecs) {
    var colTags = this.renderColTags(colSpecs);
    this.header.receiveProps({
      superHeaderText: superHeaderText,
      colSpecs: colSpecs,
      colTags: colTags
    });
    this.bodyColGroup.innerHTML = colTags;
    this.bodyColEls = Array.prototype.slice.call(this.bodyColGroup.querySelectorAll('col'));
    this.applyColWidths(colSpecs.map(function (colSpec) {
      return colSpec.width;
    }));
  };

  Spreadsheet.prototype.unrenderCells = function () {
    this.bodyColGroup.innerHTML = '';
  };

  Spreadsheet.prototype.renderColTags = function (colSpecs) {
    var html = '';

    for (var _i = 0, colSpecs_1 = colSpecs; _i < colSpecs_1.length; _i++) {
      var o = colSpecs_1[_i];

      if (o.isMain) {
        html += '<col class="fc-main-col"/>';
      } else {
        html += '<col/>';
      }
    }

    return html;
  };

  Spreadsheet.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.layout.setHeight(totalHeight, isAuto);
  };

  Spreadsheet.prototype.applyColWidths = function (colWidths) {
    var _this = this;

    colWidths.forEach(function (colWidth, colIndex) {
      var headEl = _this.header.colEls[colIndex]; // bad to access child

      var bodyEl = _this.bodyColEls[colIndex];
      var styleVal;

      if (typeof colWidth === 'number') {
        styleVal = colWidth + 'px';
      } else if (typeof colWidth == null) {
        styleVal = '';
      }

      headEl.style.width = bodyEl.style.width = styleVal;
    });
  };

  return Spreadsheet;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars

var ResourceTimelineView =
/** @class */
function (_super) {
  __extends(ResourceTimelineView, _super);

  function ResourceTimelineView(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;

    _this.isStickyScrollDirty = false;
    _this.rowNodes = [];
    _this.rowComponents = [];
    _this.rowComponentsById = {};
    _this.resourceAreaWidthDraggings = [];
    _this.splitter = new _fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["ResourceSplitter"](); // doesn't let it do businessHours tho

    _this.hasResourceBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasResourceBusinessHours);
    _this.buildRowNodes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildRowNodes"]);
    _this.hasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(hasNesting);
    _this._updateHasNesting = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this.updateHasNesting);
    var allColSpecs = _this.opt('resourceColumns') || [];

    var labelText = _this.opt('resourceLabelText'); // TODO: view.override


    var defaultLabelText = 'Resources'; // TODO: view.defaults

    var superHeaderText = null;

    if (!allColSpecs.length) {
      allColSpecs.push({
        labelText: labelText || defaultLabelText,
        text: Object(_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["buildResourceTextFunc"])(_this.opt('resourceText'), _this.calendar)
      });
    } else {
      superHeaderText = labelText;
    }

    var plainColSpecs = [];
    var groupColSpecs = [];
    var groupSpecs = [];
    var isVGrouping = false;
    var isHGrouping = false;

    for (var _i = 0, allColSpecs_1 = allColSpecs; _i < allColSpecs_1.length; _i++) {
      var colSpec = allColSpecs_1[_i];

      if (colSpec.group) {
        groupColSpecs.push(colSpec);
      } else {
        plainColSpecs.push(colSpec);
      }
    }

    plainColSpecs[0].isMain = true;

    if (groupColSpecs.length) {
      groupSpecs = groupColSpecs;
      isVGrouping = true;
    } else {
      var hGroupField = _this.opt('resourceGroupField');

      if (hGroupField) {
        isHGrouping = true;
        groupSpecs.push({
          field: hGroupField,
          text: _this.opt('resourceGroupText'),
          render: _this.opt('resourceGroupRender')
        });
      }
    }

    var allOrderSpecs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseFieldSpecs"])(_this.opt('resourceOrder'));
    var plainOrderSpecs = [];

    for (var _a = 0, allOrderSpecs_1 = allOrderSpecs; _a < allOrderSpecs_1.length; _a++) {
      var orderSpec = allOrderSpecs_1[_a];
      var isGroup = false;

      for (var _b = 0, groupSpecs_1 = groupSpecs; _b < groupSpecs_1.length; _b++) {
        var groupSpec = groupSpecs_1[_b];

        if (groupSpec.field === orderSpec.field) {
          groupSpec.order = orderSpec.order; // -1, 0, 1

          isGroup = true;
          break;
        }
      }

      if (!isGroup) {
        plainOrderSpecs.push(orderSpec);
      }
    }

    _this.superHeaderText = superHeaderText;
    _this.isVGrouping = isVGrouping;
    _this.isHGrouping = isHGrouping;
    _this.groupSpecs = groupSpecs;
    _this.colSpecs = groupColSpecs.concat(plainColSpecs);
    _this.orderSpecs = plainOrderSpecs; // START RENDERING...

    _this.el.classList.add('fc-timeline');

    if (_this.opt('eventOverlap') === false) {
      _this.el.classList.add('fc-no-overlap');
    }

    _this.el.innerHTML = _this.renderSkeletonHtml();
    _this.resourceAreaHeadEl = _this.el.querySelector('thead .fc-resource-area');

    _this.setResourceAreaWidth(_this.opt('resourceAreaWidth'));

    _this.initResourceAreaWidthDragging();

    _this.miscHeight = _this.el.getBoundingClientRect().height;
    _this.spreadsheet = new Spreadsheet(_this.context, _this.resourceAreaHeadEl, _this.el.querySelector('tbody .fc-resource-area'));
    _this.timeAxis = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimeAxis"](_this.context, _this.el.querySelector('thead .fc-time-area'), _this.el.querySelector('tbody .fc-time-area'));
    var timeAxisRowContainer = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-rows'
    }, '<table><tbody /></table>');

    _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl.appendChild(timeAxisRowContainer);

    _this.timeAxisTbody = timeAxisRowContainer.querySelector('tbody');
    _this.lane = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["TimelineLane"](_this.context, null, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, _this.timeAxis);
    _this.bodyScrollJoiner = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["ScrollJoiner"]('vertical', [_this.spreadsheet.layout.bodyScroller, _this.timeAxis.layout.bodyScroller]); // after scrolljoiner

    _this.spreadsheetBodyStickyScroller = new _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["StickyScroller"](_this.spreadsheet.layout.bodyScroller.enhancedScroll, _this.isRtl, true // isVertical
    );

    _this.spreadsheet.receiveProps({
      superHeaderText: _this.superHeaderText,
      colSpecs: _this.colSpecs
    }); // Component...


    context.calendar.registerInteractiveComponent(_this, {
      el: _this.timeAxis.slats.el
    });
    return _this;
  }

  ResourceTimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-resource-area " + theme.getClass('widgetContent') + "\"></td> <td class=\"fc-divider fc-col-resizer " + theme.getClass('widgetHeader') + "\"></td> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  ResourceTimelineView.prototype.render = function (props) {
    _super.prototype.render.call(this, props);

    var splitProps = this.splitter.splitProps(props);
    var hasResourceBusinessHours = this.hasResourceBusinessHours(props.resourceStore);
    this.timeAxis.receiveProps({
      dateProfile: props.dateProfile
    }); // for all-resource bg events / selections / business-hours

    this.lane.receiveProps(__assign({}, splitProps[''], {
      dateProfile: props.dateProfile,
      nextDayThreshold: this.nextDayThreshold,
      businessHours: hasResourceBusinessHours ? null : props.businessHours
    }));
    var newRowNodes = this.buildRowNodes(props.resourceStore, this.groupSpecs, this.orderSpecs, this.isVGrouping, props.resourceEntityExpansions, this.opt('resourcesInitiallyExpanded'));

    this._updateHasNesting(this.hasNesting(newRowNodes));

    this.diffRows(newRowNodes);
    this.renderRows(props.dateProfile, hasResourceBusinessHours ? props.businessHours : null, // CONFUSING, comment
    splitProps);
  };

  ResourceTimelineView.prototype.updateHasNesting = function (isNesting) {
    var classList = this.el.classList;

    if (isNesting) {
      classList.remove('fc-flat');
    } else {
      classList.add('fc-flat');
    }
  };

  ResourceTimelineView.prototype.diffRows = function (newNodes) {
    var oldNodes = this.rowNodes;
    var oldLen = oldNodes.length;
    var oldIndexHash = {}; // id -> index

    var oldI = 0;
    var newI = 0;

    for (oldI = 0; oldI < oldLen; oldI++) {
      oldIndexHash[oldNodes[oldI].id] = oldI;
    } // iterate new nodes


    for (oldI = 0, newI = 0; newI < newNodes.length; newI++) {
      var newNode = newNodes[newI];
      var oldIFound = oldIndexHash[newNode.id];

      if (oldIFound != null && oldIFound >= oldI) {
        this.removeRows(newI, oldIFound - oldI, oldNodes); // won't do anything if same index

        oldI = oldIFound + 1;
      } else {
        this.addRow(newI, newNode);
      }
    } // old rows that weren't found need to be removed


    this.removeRows(newI, oldLen - oldI, oldNodes); // won't do anything if same index

    this.rowNodes = newNodes;
  };
  /*
  rowComponents is the in-progress result
  */


  ResourceTimelineView.prototype.addRow = function (index, rowNode) {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowComponentsById = _a.rowComponentsById;

    var nextComponent = rowComponents[index];
    var newComponent = this.buildChildComponent(rowNode, this.spreadsheet.bodyTbody, nextComponent ? nextComponent.spreadsheetTr : null, this.timeAxisTbody, nextComponent ? nextComponent.timeAxisTr : null);
    rowComponents.splice(index, 0, newComponent);
    rowComponentsById[rowNode.id] = newComponent;
  };

  ResourceTimelineView.prototype.removeRows = function (startIndex, len, oldRowNodes) {
    if (len) {
      var _a = this,
          rowComponents = _a.rowComponents,
          rowComponentsById = _a.rowComponentsById;

      for (var i = 0; i < len; i++) {
        var rowComponent = rowComponents[startIndex + i];
        rowComponent.destroy();
        delete rowComponentsById[oldRowNodes[i].id];
      }

      rowComponents.splice(startIndex, len);
    }
  };

  ResourceTimelineView.prototype.buildChildComponent = function (node, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext) {
    if (node.group) {
      return new GroupRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext);
    } else if (node.resource) {
      return new ResourceRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext, this.timeAxis);
    }
  };

  ResourceTimelineView.prototype.renderRows = function (dateProfile, fallbackBusinessHours, splitProps) {
    var _a = this,
        rowNodes = _a.rowNodes,
        rowComponents = _a.rowComponents;

    for (var i = 0; i < rowNodes.length; i++) {
      var rowNode = rowNodes[i];
      var rowComponent = rowComponents[i];

      if (rowNode.group) {
        rowComponent.receiveProps({
          spreadsheetColCnt: this.colSpecs.length,
          id: rowNode.id,
          isExpanded: rowNode.isExpanded,
          group: rowNode.group
        });
      } else {
        var resource = rowNode.resource;
        rowComponent.receiveProps(__assign({}, splitProps[resource.id], {
          dateProfile: dateProfile,
          nextDayThreshold: this.nextDayThreshold,
          businessHours: resource.businessHours || fallbackBusinessHours,
          colSpecs: this.colSpecs,
          id: rowNode.id,
          rowSpans: rowNode.rowSpans,
          depth: rowNode.depth,
          isExpanded: rowNode.isExpanded,
          hasChildren: rowNode.hasChildren,
          resource: rowNode.resource
        }));
      }
    }
  };

  ResourceTimelineView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
    // FYI: this ordering is really important
    var calendar = this.calendar;
    var isBaseSizing = isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated;

    if (isBaseSizing) {
      this.syncHeadHeights();
      this.timeAxis.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
      this.spreadsheet.updateSize(isResize, viewHeight - this.miscHeight, isAuto);
    }

    var rowSizingCnt = this.updateRowSizes(isResize);
    this.lane.updateSize(isResize); // is efficient. uses flags

    if (isBaseSizing || rowSizingCnt) {
      this.bodyScrollJoiner.update();
      this.timeAxis.layout.scrollJoiner.update(); // hack

      this.rowPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.timeAxis.slats.el, this.rowComponents.map(function (rowComponent) {
        return rowComponent.timeAxisTr;
      }), false, // isHorizontal
      true // isVertical
      );
      this.rowPositions.build();
      this.isStickyScrollDirty = true;
    }
  };

  ResourceTimelineView.prototype.syncHeadHeights = function () {
    var spreadsheetHeadEl = this.spreadsheet.header.tableEl;
    var timeAxisHeadEl = this.timeAxis.header.tableEl;
    spreadsheetHeadEl.style.height = '';
    timeAxisHeadEl.style.height = '';
    var max = Math.max(spreadsheetHeadEl.getBoundingClientRect().height, timeAxisHeadEl.getBoundingClientRect().height);
    spreadsheetHeadEl.style.height = timeAxisHeadEl.style.height = max + 'px';
  };

  ResourceTimelineView.prototype.updateRowSizes = function (isResize) {
    var dirtyRowComponents = this.rowComponents;

    if (!isResize) {
      dirtyRowComponents = dirtyRowComponents.filter(function (rowComponent) {
        return rowComponent.isSizeDirty;
      });
    }

    var elArrays = dirtyRowComponents.map(function (rowComponent) {
      return rowComponent.getHeightEls();
    }); // reset to natural heights

    for (var _i = 0, elArrays_1 = elArrays; _i < elArrays_1.length; _i++) {
      var elArray = elArrays_1[_i];

      for (var _a = 0, elArray_1 = elArray; _a < elArray_1.length; _a++) {
        var el = elArray_1[_a];
        el.style.height = '';
      }
    } // let rows update their contents' heights


    for (var _b = 0, dirtyRowComponents_1 = dirtyRowComponents; _b < dirtyRowComponents_1.length; _b++) {
      var rowComponent = dirtyRowComponents_1[_b];
      rowComponent.updateSize(isResize); // will reset isSizeDirty
    }

    var maxHeights = elArrays.map(function (elArray) {
      var maxHeight = null;

      for (var _i = 0, elArray_2 = elArray; _i < elArray_2.length; _i++) {
        var el = elArray_2[_i];
        var height = el.getBoundingClientRect().height;

        if (maxHeight === null || height > maxHeight) {
          maxHeight = height;
        }
      }

      return maxHeight;
    });

    for (var i = 0; i < elArrays.length; i++) {
      for (var _c = 0, _d = elArrays[i]; _c < _d.length; _c++) {
        var el = _d[_c];
        el.style.height = maxHeights[i] + 'px';
      }
    }

    return dirtyRowComponents.length;
  };

  ResourceTimelineView.prototype.destroy = function () {
    for (var _i = 0, _a = this.rowComponents; _i < _a.length; _i++) {
      var rowComponent = _a[_i];
      rowComponent.destroy();
    }

    this.rowNodes = [];
    this.rowComponents = [];
    this.spreadsheet.destroy();
    this.timeAxis.destroy();

    for (var _b = 0, _c = this.resourceAreaWidthDraggings; _b < _c.length; _b++) {
      var resourceAreaWidthDragging = _c[_b];
      resourceAreaWidthDragging.destroy();
    }

    this.spreadsheetBodyStickyScroller.destroy();

    _super.prototype.destroy.call(this);

    this.calendar.unregisterInteractiveComponent(this);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.getNowIndicatorUnit = function (dateProfile) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile);
  };

  ResourceTimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  ResourceTimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scrolling
  // ------------------------------------------------------------------------------------------------------------------
  // this is useful for scrolling prev/next dates while resource is scrolled down


  ResourceTimelineView.prototype.queryScroll = function () {
    var scroll = _super.prototype.queryScroll.call(this);

    if (this.props.resourceStore) {
      __assign(scroll, this.queryResourceScroll());
    }

    return scroll;
  };

  ResourceTimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize);

    if (this.props.resourceStore) {
      this.applyResourceScroll(scroll);
    } // avoid updating stickyscroll too often


    if (isResize || this.isStickyScrollDirty) {
      this.isStickyScrollDirty = false;
      this.spreadsheetBodyStickyScroller.updateSize();
      this.timeAxis.updateStickyScrollers();
    }
  };

  ResourceTimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  ResourceTimelineView.prototype.queryDateScroll = function () {
    return this.timeAxis.queryDateScroll();
  };

  ResourceTimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  ResourceTimelineView.prototype.queryResourceScroll = function () {
    var _a = this,
        rowComponents = _a.rowComponents,
        rowNodes = _a.rowNodes;

    var scroll = {};
    var scrollerTop = this.timeAxis.layout.bodyScroller.el.getBoundingClientRect().top; // fixed position

    for (var i = 0; i < rowComponents.length; i++) {
      var rowComponent = rowComponents[i];
      var rowNode = rowNodes[i];
      var el = rowComponent.timeAxisTr;
      var elBottom = el.getBoundingClientRect().bottom; // fixed position

      if (elBottom > scrollerTop) {
        scroll.rowId = rowNode.id;
        scroll.bottom = elBottom - scrollerTop;
        break;
      }
    } // TODO: what about left scroll state for spreadsheet area?


    return scroll;
  };

  ResourceTimelineView.prototype.applyResourceScroll = function (scroll) {
    var rowId = scroll.forcedRowId || scroll.rowId;

    if (rowId) {
      var rowComponent = this.rowComponentsById[rowId];

      if (rowComponent) {
        var el = rowComponent.timeAxisTr;

        if (el) {
          var innerTop = this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.el.getBoundingClientRect().top;
          var rowRect = el.getBoundingClientRect();
          var scrollTop = (scroll.forcedRowId ? rowRect.top : // just use top edge
          rowRect.bottom - scroll.bottom) - // pixels from bottom edge
          innerTop;
          this.timeAxis.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
          this.spreadsheet.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);
        }
      }
    }
  }; // TODO: scrollToResource
  // Hit System
  // ------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
    this.rowPositions.build();
  };

  ResourceTimelineView.prototype.queryHit = function (positionLeft, positionTop) {
    var rowPositions = this.rowPositions;
    var slats = this.timeAxis.slats;
    var rowIndex = rowPositions.topToIndex(positionTop);

    if (rowIndex != null) {
      var resource = this.rowNodes[rowIndex].resource;

      if (resource) {
        // not a group
        var slatHit = slats.positionToHit(positionLeft);

        if (slatHit) {
          return {
            component: this,
            dateSpan: {
              range: slatHit.dateSpan.range,
              allDay: slatHit.dateSpan.allDay,
              resourceId: resource.id
            },
            rect: {
              left: slatHit.left,
              right: slatHit.right,
              top: rowPositions.tops[rowIndex],
              bottom: rowPositions.bottoms[rowIndex]
            },
            dayEl: slatHit.dayEl,
            layer: 0
          };
        }
      }
    }
  }; // Resource Area
  // ------------------------------------------------------------------------------------------------------------------


  ResourceTimelineView.prototype.setResourceAreaWidth = function (widthVal) {
    this.resourceAreaWidth = widthVal;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.resourceAreaHeadEl, 'width', widthVal || '');
  };

  ResourceTimelineView.prototype.initResourceAreaWidthDragging = function () {
    var _this = this;

    var resourceAreaDividerEls = Array.prototype.slice.call(this.el.querySelectorAll('.fc-col-resizer'));
    var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;

    if (ElementDraggingImpl) {
      this.resourceAreaWidthDraggings = resourceAreaDividerEls.map(function (el) {
        var dragging = new ElementDraggingImpl(el);
        var dragStartWidth;
        var viewWidth;
        dragging.emitter.on('dragstart', function () {
          dragStartWidth = _this.resourceAreaWidth;

          if (typeof dragStartWidth !== 'number') {
            dragStartWidth = _this.resourceAreaHeadEl.getBoundingClientRect().width;
          }

          viewWidth = _this.el.getBoundingClientRect().width;
        });
        dragging.emitter.on('dragmove', function (pev) {
          var newWidth = dragStartWidth + pev.deltaX * (_this.isRtl ? -1 : 1);
          newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);
          newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);

          _this.setResourceAreaWidth(newWidth);
        });
        dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area

        return dragging;
      });
    }
  };

  ResourceTimelineView.needsResourceData = true; // for ResourceViewProps

  return ResourceTimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

function hasResourceBusinessHours(resourceStore) {
  for (var resourceId in resourceStore) {
    var resource = resourceStore[resourceId];

    if (resource.businessHours) {
      return true;
    }
  }

  return false;
}

function hasNesting(nodes) {
  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var node = nodes_1[_i];

    if (node.group) {
      return true;
    } else if (node.resource) {
      if (node.hasChildren) {
        return true;
      }
    }
  }

  return false;
}

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  deps: [_fullcalendar_resource_common__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_timeline__WEBPACK_IMPORTED_MODULE_1__["default"]],
  defaultView: 'resourceTimelineDay',
  views: {
    resourceTimeline: {
      class: ResourceTimelineView,
      resourceAreaWidth: '30%',
      resourcesInitiallyExpanded: true,
      eventResizableFromStart: true // TODO: not DRY with this same setting in the main timeline config

    },
    resourceTimelineDay: {
      type: 'resourceTimeline',
      duration: {
        days: 1
      }
    },
    resourceTimelineWeek: {
      type: 'resourceTimeline',
      duration: {
        weeks: 1
      }
    },
    resourceTimelineMonth: {
      type: 'resourceTimeline',
      duration: {
        months: 1
      }
    },
    resourceTimelineYear: {
      type: 'resourceTimeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "./node_modules/@fullcalendar/timeline/main.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@fullcalendar/timeline/main.esm.js ***!
  \*********************************************************/
/*! exports provided: default, HeaderBodyLayout, ScrollJoiner, StickyScroller, TimeAxis, TimelineLane, TimelineView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderBodyLayout", function() { return HeaderBodyLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollJoiner", function() { return ScrollJoiner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StickyScroller", function() { return StickyScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeAxis", function() { return TimeAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineLane", function() { return TimelineLane; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimelineView", function() { return TimelineView; });
/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ "./node_modules/@fullcalendar/core/main.esm.js");
/*!
FullCalendar Timeline Plugin v4.3.0
Docs & License: https://fullcalendar.io/scheduler
(c) 2019 Adam Shaw
*/

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
/*
A rectangular area of content that lives within a Scroller.
Can have "gutters", areas of dead spacing around the perimeter.
Also very useful for forcing a width, which a Scroller cannot do alone.
Has a content area that lives above a background area.
*/


var ScrollerCanvas =
/** @class */
function () {
  function ScrollerCanvas() {
    this.gutters = {};
    this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div class=\"fc-scroller-canvas\"> <div class=\"fc-content\"></div> <div class=\"fc-bg\"></div> </div>");
    this.contentEl = this.el.querySelector('.fc-content');
    this.bgEl = this.el.querySelector('.fc-bg');
  }
  /*
  If falsy, resets all the gutters to 0
  */


  ScrollerCanvas.prototype.setGutters = function (gutters) {
    if (!gutters) {
      this.gutters = {};
    } else {
      __assign(this.gutters, gutters);
    }

    this.updateSize();
  };

  ScrollerCanvas.prototype.setWidth = function (width) {
    this.width = width;
    this.updateSize();
  };

  ScrollerCanvas.prototype.setMinWidth = function (minWidth) {
    this.minWidth = minWidth;
    this.updateSize();
  };

  ScrollerCanvas.prototype.clearWidth = function () {
    this.width = null;
    this.minWidth = null;
    this.updateSize();
  };

  ScrollerCanvas.prototype.updateSize = function () {
    var _a = this,
        gutters = _a.gutters,
        el = _a.el; // is border-box (width includes padding)


    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-left', gutters.left);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-right', gutters.right);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-top', gutters.top);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["forceClassName"])(el, 'fc-gutter-bottom', gutters.bottom);
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      paddingLeft: gutters.left || '',
      paddingRight: gutters.right || '',
      paddingTop: gutters.top || '',
      paddingBottom: gutters.bottom || '',
      width: this.width != null ? this.width + (gutters.left || 0) + (gutters.right || 0) : '',
      minWidth: this.minWidth != null ? this.minWidth + (gutters.left || 0) + (gutters.right || 0) : ''
    });
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.bgEl, {
      left: gutters.left || '',
      right: gutters.right || '',
      top: gutters.top || '',
      bottom: gutters.bottom || ''
    });
  };

  return ScrollerCanvas;
}();

var EnhancedScroller =
/** @class */
function (_super) {
  __extends(EnhancedScroller, _super);

  function EnhancedScroller(overflowX, overflowY) {
    var _this = _super.call(this, overflowX, overflowY) || this; // Scroll Events
    // ----------------------------------------------------------------------------------------------


    _this.reportScroll = function () {
      if (!_this.isScrolling) {
        _this.reportScrollStart();
      }

      _this.trigger('scroll');

      _this.isMoving = true;

      _this.requestMovingEnd();
    };

    _this.reportScrollStart = function () {
      if (!_this.isScrolling) {
        _this.isScrolling = true;

        _this.trigger('scrollStart', _this.isTouching); // created in constructor

      }
    }; // Touch Events
    // ----------------------------------------------------------------------------------------------
    // will fire *before* the scroll event is fired


    _this.reportTouchStart = function () {
      _this.isTouching = true;
    };

    _this.reportTouchEnd = function () {
      if (_this.isTouching) {
        _this.isTouching = false; // if touch scrolling was re-enabled during a recent touch scroll
        // then unbind the handlers that are preventing it from happening.

        if (_this.isTouchScrollEnabled) {
          _this.unbindPreventTouchScroll(); // won't do anything if not bound

        } // if the user ended their touch, and the scroll area wasn't moving,
        // we consider this to be the end of the scroll.


        if (!_this.isMoving) {
          _this.reportScrollEnd(); // won't fire if already ended

        }
      }
    };

    _this.isScrolling = false;
    _this.isTouching = false;
    _this.isMoving = false;
    _this.isTouchScrollEnabled = true;
    _this.requestMovingEnd = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["debounce"])(_this.reportMovingEnd, 500);
    _this.canvas = new ScrollerCanvas();

    _this.el.appendChild(_this.canvas.el);

    _this.applyOverflow();

    _this.bindHandlers();

    return _this;
  }

  EnhancedScroller.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.unbindHandlers();
  }; // Touch scroll prevention
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.disableTouchScroll = function () {
    this.isTouchScrollEnabled = false;
    this.bindPreventTouchScroll(); // will be unbound in enableTouchScroll or reportTouchEnd
  };

  EnhancedScroller.prototype.enableTouchScroll = function () {
    this.isTouchScrollEnabled = true; // only immediately unbind if a touch event is NOT in progress.
    // otherwise, it will be handled by reportTouchEnd.

    if (!this.isTouching) {
      this.unbindPreventTouchScroll();
    }
  };

  EnhancedScroller.prototype.bindPreventTouchScroll = function () {
    if (!this.preventTouchScrollHandler) {
      this.el.addEventListener('touchmove', this.preventTouchScrollHandler = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventDefault"]);
    }
  };

  EnhancedScroller.prototype.unbindPreventTouchScroll = function () {
    if (this.preventTouchScrollHandler) {
      this.el.removeEventListener('touchmove', this.preventTouchScrollHandler);
      this.preventTouchScrollHandler = null;
    }
  }; // Handlers
  // ----------------------------------------------------------------------------------------------


  EnhancedScroller.prototype.bindHandlers = function () {
    this.el.addEventListener('scroll', this.reportScroll);
    this.el.addEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.addEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.unbindHandlers = function () {
    this.el.removeEventListener('scroll', this.reportScroll);
    this.el.removeEventListener('touchstart', this.reportTouchStart, {
      passive: true
    });
    this.el.removeEventListener('touchend', this.reportTouchEnd);
  };

  EnhancedScroller.prototype.reportMovingEnd = function () {
    this.isMoving = false; // only end the scroll if not currently touching.
    // if touching, the scrolling will end later, on touchend.

    if (!this.isTouching) {
      this.reportScrollEnd();
    }
  };

  EnhancedScroller.prototype.reportScrollEnd = function () {
    if (this.isScrolling) {
      this.trigger('scrollEnd');
      this.isScrolling = false;
    }
  }; // Horizontal Scroll Normalization
  // ----------------------------------------------------------------------------------------------
  // http://stackoverflow.com/questions/24276619/better-way-to-get-the-viewport-of-a-scrollable-div-in-rtl-mode/24394376#24394376
  // TODO: move all this to util functions

  /*
  If RTL, and scrolled to the left, returns NEGATIVE value (like Firefox)
  */


  EnhancedScroller.prototype.getScrollLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val + el.clientWidth - el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    return val;
  };
  /*
  Accepts a NEGATIVE value for when scrolled in RTL
  */


  EnhancedScroller.prototype.setScrollLeft = function (val) {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'positive':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val;
          break;
      }
    }

    el.scrollLeft = val;
  };
  /*
  Always returns the number of pixels scrolled from the leftmost position (even if RTL).
  Always positive.
  */


  EnhancedScroller.prototype.getScrollFromLeft = function () {
    var el = this.el;
    var direction = window.getComputedStyle(el).direction;
    var val = el.scrollLeft;

    if (direction === 'rtl') {
      switch (getRtlScrollSystem()) {
        case 'negative':
          val = val - el.clientWidth + el.scrollWidth;
          break;

        case 'reverse':
          val = -val - el.clientWidth + el.scrollWidth;
          break;
      }
    }

    return val;
  };

  return EnhancedScroller;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]);

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"].mixInto(EnhancedScroller); // Horizontal Scroll System Detection
// ----------------------------------------------------------------------------------------------

var _rtlScrollSystem;

function getRtlScrollSystem() {
  return _rtlScrollSystem || (_rtlScrollSystem = detectRtlScrollSystem());
}

function detectRtlScrollSystem() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])("<div style=\" position: absolute; top: -1000px; width: 1px; height: 1px; overflow: scroll; direction: rtl; font-size: 100px; \">A</div>");
  document.body.appendChild(el);
  var system;

  if (el.scrollLeft > 0) {
    system = 'positive';
  } else {
    el.scrollLeft = 1;

    if (el.scrollLeft > 0) {
      system = 'reverse';
    } else {
      system = 'negative';
    }
  }

  Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(el);
  return system;
}
/*
A Scroller, but with a wrapping div that allows "clipping" away of native scrollbars,
giving the appearance that there are no scrollbars.
*/


var ClippedScroller =
/** @class */
function () {
  /*
  Received overflows can be set to 'clipped', meaning scrollbars shouldn't be visible
  to the user, but the area should still scroll.
  */
  function ClippedScroller(overflowX, overflowY, parentEl) {
    this.isHScrollbarsClipped = false;
    this.isVScrollbarsClipped = false;

    if (overflowX === 'clipped-scroll') {
      overflowX = 'scroll';
      this.isHScrollbarsClipped = true;
    }

    if (overflowY === 'clipped-scroll') {
      overflowY = 'scroll';
      this.isVScrollbarsClipped = true;
    }

    this.enhancedScroll = new EnhancedScroller(overflowX, overflowY);
    parentEl.appendChild(this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-scroller-clip'
    }));
    this.el.appendChild(this.enhancedScroll.el);
  }

  ClippedScroller.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
  };

  ClippedScroller.prototype.updateSize = function () {
    var enhancedScroll = this.enhancedScroll;
    var scrollEl = enhancedScroll.el;
    var edges = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEdges"])(scrollEl);
    var cssProps = {
      marginLeft: 0,
      marginRight: 0,
      marginTop: 0,
      marginBottom: 0
    }; // give the inner scrolling div negative margins so that its scrollbars
    // are nudged outside of the bounding box of the wrapper, which is overflow:hidden

    if (this.isVScrollbarsClipped) {
      cssProps.marginLeft = -edges.scrollbarLeft;
      cssProps.marginRight = -edges.scrollbarRight;
    }

    if (this.isHScrollbarsClipped) {
      cssProps.marginBottom = -edges.scrollbarBottom;
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(scrollEl, cssProps); // if we are attempting to hide the scrollbars offscreen, OSX/iOS will still
    // display the floating scrollbars. attach a className to force-hide them.

    if ((this.isHScrollbarsClipped || enhancedScroll.overflowX === 'hidden') && ( // should never show?
    this.isVScrollbarsClipped || enhancedScroll.overflowY === 'hidden') && // should never show?
    !( // doesn't have any scrollbar mass
    edges.scrollbarLeft || edges.scrollbarRight || edges.scrollbarBottom)) {
      scrollEl.classList.add('fc-no-scrollbars');
    } else {
      scrollEl.classList.remove('fc-no-scrollbars');
    }
  };

  ClippedScroller.prototype.setHeight = function (height) {
    this.enhancedScroll.setHeight(height);
  };
  /*
  Accounts for 'clipped' scrollbars
  */


  ClippedScroller.prototype.getScrollbarWidths = function () {
    var widths = this.enhancedScroll.getScrollbarWidths();

    if (this.isVScrollbarsClipped) {
      widths.left = 0;
      widths.right = 0;
    }

    if (this.isHScrollbarsClipped) {
      widths.bottom = 0;
    }

    return widths;
  };

  return ClippedScroller;
}();

var ScrollJoiner =
/** @class */
function () {
  function ScrollJoiner(axis, scrollers) {
    this.axis = axis;
    this.scrollers = scrollers;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var scroller = _a[_i];
      this.initScroller(scroller);
    }
  }

  ScrollJoiner.prototype.initScroller = function (scroller) {
    var _this = this;

    var enhancedScroll = scroller.enhancedScroll; // when the user scrolls via mousewheel, we know for sure the target
    // scroller should be the master. capture the various x-browser events that fire.

    var onScroll = function () {
      _this.assignMasterScroller(scroller);
    };

    'wheel mousewheel DomMouseScroll MozMousePixelScroll'.split(' ').forEach(function (evName) {
      enhancedScroll.el.addEventListener(evName, onScroll);
    });
    enhancedScroll.on('scrollStart', function () {
      if (!_this.masterScroller) {
        _this.assignMasterScroller(scroller);
      }
    }).on('scroll', function () {
      if (scroller === _this.masterScroller) {
        for (var _i = 0, _a = _this.scrollers; _i < _a.length; _i++) {
          var otherScroller = _a[_i];

          if (otherScroller !== scroller) {
            switch (_this.axis) {
              case 'horizontal':
                otherScroller.enhancedScroll.el.scrollLeft = enhancedScroll.el.scrollLeft;
                break;

              case 'vertical':
                otherScroller.enhancedScroll.setScrollTop(enhancedScroll.getScrollTop());
                break;
            }
          }
        }
      }
    }).on('scrollEnd', function () {
      if (scroller === _this.masterScroller) {
        _this.unassignMasterScroller();
      }
    });
  };

  ScrollJoiner.prototype.assignMasterScroller = function (scroller) {
    this.unassignMasterScroller();
    this.masterScroller = scroller;

    for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
      var otherScroller = _a[_i];

      if (otherScroller !== scroller) {
        otherScroller.enhancedScroll.disableTouchScroll();
      }
    }
  };

  ScrollJoiner.prototype.unassignMasterScroller = function () {
    if (this.masterScroller) {
      for (var _i = 0, _a = this.scrollers; _i < _a.length; _i++) {
        var otherScroller = _a[_i];
        otherScroller.enhancedScroll.enableTouchScroll();
      }

      this.masterScroller = null;
    }
  };

  ScrollJoiner.prototype.update = function () {
    var allWidths = this.scrollers.map(function (scroller) {
      return scroller.getScrollbarWidths();
    });
    var maxLeft = 0;
    var maxRight = 0;
    var maxTop = 0;
    var maxBottom = 0;
    var widths;
    var i;

    for (var _i = 0, allWidths_1 = allWidths; _i < allWidths_1.length; _i++) {
      widths = allWidths_1[_i];
      maxLeft = Math.max(maxLeft, widths.left);
      maxRight = Math.max(maxRight, widths.right);
      maxTop = Math.max(maxTop, widths.top);
      maxBottom = Math.max(maxBottom, widths.bottom);
    }

    for (i = 0; i < this.scrollers.length; i++) {
      var scroller = this.scrollers[i];
      widths = allWidths[i];
      scroller.enhancedScroll.canvas.setGutters(this.axis === 'horizontal' ? {
        left: maxLeft - widths.left,
        right: maxRight - widths.right
      } : {
        top: maxTop - widths.top,
        bottom: maxBottom - widths.bottom
      });
    }
  };

  return ScrollJoiner;
}();

var HeaderBodyLayout =
/** @class */
function () {
  /*
  verticalScroll = 'auto' | 'clipped-scroll'
  */
  function HeaderBodyLayout(headerContainerEl, bodyContainerEl, verticalScroll) {
    this.headerScroller = new ClippedScroller('clipped-scroll', 'hidden', headerContainerEl);
    this.bodyScroller = new ClippedScroller('auto', verticalScroll, bodyContainerEl);
    this.scrollJoiner = new ScrollJoiner('horizontal', [this.headerScroller, this.bodyScroller]);
  }

  HeaderBodyLayout.prototype.destroy = function () {
    this.headerScroller.destroy();
    this.bodyScroller.destroy();
  };

  HeaderBodyLayout.prototype.setHeight = function (totalHeight, isAuto) {
    var bodyHeight;

    if (isAuto) {
      bodyHeight = 'auto';
    } else {
      bodyHeight = totalHeight - this.queryHeadHeight();
    }

    this.bodyScroller.setHeight(bodyHeight);
    this.headerScroller.updateSize(); // adjusts gutters and classNames

    this.bodyScroller.updateSize(); // adjusts gutters and classNames

    this.scrollJoiner.update();
  };

  HeaderBodyLayout.prototype.queryHeadHeight = function () {
    return this.headerScroller.enhancedScroll.canvas.contentEl.getBoundingClientRect().height;
  };

  return HeaderBodyLayout;
}();

var TimelineHeader =
/** @class */
function (_super) {
  __extends(TimelineHeader, _super);

  function TimelineHeader(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.appendChild(_this.tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('table', {
      className: _this.theme.getClass('tableGrid')
    }));
    return _this;
  }

  TimelineHeader.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.tableEl);

    _super.prototype.destroy.call(this);
  };

  TimelineHeader.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineHeader.prototype.renderDates = function (tDateProfile) {
    var _a = this,
        dateEnv = _a.dateEnv,
        theme = _a.theme;

    var cellRows = tDateProfile.cellRows;
    var lastRow = cellRows[cellRows.length - 1];
    var isChrono = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.labelInterval) > Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(tDateProfile.slotDuration);
    var oneDay = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration);
    var html = '<colgroup>'; // needs to be a col for each body slat. header cells will have colspans

    for (var i = tDateProfile.slotCnt - 1; i >= 0; i--) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody>';

    for (var _i = 0, cellRows_1 = cellRows; _i < cellRows_1.length; _i++) {
      var rowCells = cellRows_1[_i];
      var isLast = rowCells === lastRow;
      html += '<tr' + (isChrono && isLast ? ' class="fc-chrono"' : '') + '>';

      for (var _b = 0, rowCells_1 = rowCells; _b < rowCells_1.length; _b++) {
        var cell = rowCells_1[_b];
        var headerCellClassNames = [theme.getClass('widgetHeader')];

        if (cell.isWeekStart) {
          headerCellClassNames.push('fc-em-cell');
        }

        if (oneDay) {
          headerCellClassNames = headerCellClassNames.concat(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(cell.date, this.props.dateProfile, this.context, true) // adds "today" class and other day-based classes
          );
        }

        html += '<th class="' + headerCellClassNames.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(cell.date, {
          omitTime: !tDateProfile.isTimeScale,
          omitTimeZoneOffset: true
        }) + '"' + (cell.colspan > 1 ? ' colspan="' + cell.colspan + '"' : '') + '>' + '<div class="fc-cell-content">' + cell.spanHtml + '</div>' + '</th>';
      }

      html += '</tr>';
    }

    html += '</tbody>';
    this.tableEl.innerHTML = html; // TODO: does this work cross-browser?

    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl, 'col');
    this.innerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelector('tr:last-child'), // compound selector won't work because of query-root problem
    'th .fc-cell-text');
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.tableEl.querySelectorAll('tr:not(:last-child)'), // compound selector won't work because of query-root problem
    'th .fc-cell-text').forEach(function (innerEl) {
      innerEl.classList.add('fc-sticky');
    });
  };

  return TimelineHeader;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineSlats =
/** @class */
function (_super) {
  __extends(TimelineSlats, _super);

  function TimelineSlats(context, parentEl) {
    var _this = _super.call(this, context) || this;

    parentEl.appendChild(_this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-slats'
    }));
    return _this;
  }

  TimelineSlats.prototype.destroy = function () {
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);

    _super.prototype.destroy.call(this);
  };

  TimelineSlats.prototype.render = function (props) {
    this.renderDates(props.tDateProfile);
  };

  TimelineSlats.prototype.renderDates = function (tDateProfile) {
    var _a = this,
        theme = _a.theme,
        view = _a.view,
        dateEnv = _a.dateEnv;

    var slotDates = tDateProfile.slotDates,
        isWeekStarts = tDateProfile.isWeekStarts;
    var html = '<table class="' + theme.getClass('tableGrid') + '">' + '<colgroup>';

    for (var i = 0; i < slotDates.length; i++) {
      html += '<col/>';
    }

    html += '</colgroup>';
    html += '<tbody><tr>';

    for (var i = 0; i < slotDates.length; i++) {
      html += this.slatCellHtml(slotDates[i], isWeekStarts[i], tDateProfile);
    }

    html += '</tr></tbody></table>';
    this.el.innerHTML = html;
    this.slatColEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'col');
    this.slatEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, 'td');

    for (var i = 0; i < slotDates.length; i++) {
      view.publiclyTrigger('dayRender', [{
        date: dateEnv.toDate(slotDates[i]),
        el: this.slatEls[i],
        view: view
      }]);
    }

    this.outerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.slatEls, true, // isHorizontal
    false // isVertical
    ); // for the inner divs within the slats
    // used for event rendering and scrollTime, to disregard slat border

    this.innerCoordCache = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findChildren"])(this.slatEls, 'div'), true, // isHorizontal
    false // isVertical
    );
  };

  TimelineSlats.prototype.slatCellHtml = function (date, isEm, tDateProfile) {
    var _a = this,
        theme = _a.theme,
        dateEnv = _a.dateEnv;

    var classes;

    if (tDateProfile.isTimeScale) {
      classes = [];
      classes.push(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval)) ? 'fc-major' : 'fc-minor');
    } else {
      classes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(date, this.props.dateProfile, this.context);
      classes.push('fc-day');
    }

    classes.unshift(theme.getClass('widgetContent'));

    if (isEm) {
      classes.push('fc-em-cell');
    }

    return '<td class="' + classes.join(' ') + '"' + ' data-date="' + dateEnv.formatIso(date, {
      omitTime: !tDateProfile.isTimeScale,
      omitTimeZoneOffset: true
    }) + '"' + '><div></div></td>';
  };

  TimelineSlats.prototype.updateSize = function () {
    this.outerCoordCache.build();
    this.innerCoordCache.build();
  };

  TimelineSlats.prototype.positionToHit = function (leftPosition) {
    var outerCoordCache = this.outerCoordCache;
    var tDateProfile = this.props.tDateProfile;
    var slatIndex = outerCoordCache.leftToIndex(leftPosition);

    if (slatIndex != null) {
      // somewhat similar to what TimeGrid does. consolidate?
      var slatWidth = outerCoordCache.getWidth(slatIndex);
      var partial = this.isRtl ? (outerCoordCache.rights[slatIndex] - leftPosition) / slatWidth : (leftPosition - outerCoordCache.lefts[slatIndex]) / slatWidth;
      var localSnapIndex = Math.floor(partial * tDateProfile.snapsPerSlot);
      var start = this.dateEnv.add(tDateProfile.slotDates[slatIndex], Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["multiplyDuration"])(tDateProfile.snapDuration, localSnapIndex));
      var end = this.dateEnv.add(start, tDateProfile.snapDuration);
      return {
        dateSpan: {
          range: {
            start: start,
            end: end
          },
          allDay: !this.props.tDateProfile.isTimeScale
        },
        dayEl: this.slatColEls[slatIndex],
        left: outerCoordCache.lefts[slatIndex],
        right: outerCoordCache.rights[slatIndex]
      };
    }

    return null;
  };

  return TimelineSlats;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var MIN_AUTO_LABELS = 18; // more than `12` months but less that `24` hours

var MAX_AUTO_SLOTS_PER_LABEL = 6; // allows 6 10-min slots in an hour

var MAX_AUTO_CELLS = 200; // allows 4-days to have a :30 slot duration

_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS = 1000; // potential nice values for slot-duration and interval-duration

var STOCK_SUB_DURATIONS = [{
  years: 1
}, {
  months: 1
}, {
  days: 1
}, {
  hours: 1
}, {
  minutes: 30
}, {
  minutes: 15
}, {
  minutes: 10
}, {
  minutes: 5
}, {
  minutes: 1
}, {
  seconds: 30
}, {
  seconds: 15
}, {
  seconds: 10
}, {
  seconds: 5
}, {
  seconds: 1
}, {
  milliseconds: 500
}, {
  milliseconds: 100
}, {
  milliseconds: 10
}, {
  milliseconds: 1
}];

function buildTimelineDateProfile(dateProfile, view) {
  var dateEnv = view.dateEnv;
  var tDateProfile = {
    labelInterval: queryDurationOption(view, 'slotLabelInterval'),
    slotDuration: queryDurationOption(view, 'slotDuration')
  };
  validateLabelAndSlot(tDateProfile, dateProfile, dateEnv); // validate after computed grid duration

  ensureLabelInterval(tDateProfile, dateProfile, dateEnv);
  ensureSlotDuration(tDateProfile, dateProfile, dateEnv);
  var input = view.opt('slotLabelFormat');
  var rawFormats = Array.isArray(input) ? input : input != null ? [input] : computeHeaderFormats(tDateProfile, dateProfile, dateEnv, view);
  tDateProfile.headerFormats = rawFormats.map(function (rawFormat) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(rawFormat);
  });
  tDateProfile.isTimeScale = Boolean(tDateProfile.slotDuration.milliseconds);
  var largeUnit = null;

  if (!tDateProfile.isTimeScale) {
    var slotUnit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;

    if (/year|month|week/.test(slotUnit)) {
      largeUnit = slotUnit;
    }
  }

  tDateProfile.largeUnit = largeUnit;
  tDateProfile.emphasizeWeeks = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isSingleDay"])(tDateProfile.slotDuration) && currentRangeAs('weeks', dateProfile, dateEnv) >= 2 && !view.opt('businessHours');
  /*
  console.log('label interval =', timelineView.labelInterval.humanize())
  console.log('slot duration =', timelineView.slotDuration.humanize())
  console.log('header formats =', timelineView.headerFormats)
  console.log('isTimeScale', timelineView.isTimeScale)
  console.log('largeUnit', timelineView.largeUnit)
  */

  var rawSnapDuration = view.opt('snapDuration');
  var snapDuration;
  var snapsPerSlot;

  if (rawSnapDuration) {
    snapDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(rawSnapDuration);
    snapsPerSlot = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.slotDuration, snapDuration); // ^ TODO: warning if not whole?
  }

  if (snapsPerSlot == null) {
    snapDuration = tDateProfile.slotDuration;
    snapsPerSlot = 1;
  }

  tDateProfile.snapDuration = snapDuration;
  tDateProfile.snapsPerSlot = snapsPerSlot; // more...

  var timeWindowMs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.maxTime) - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // TODO: why not use normalizeRange!?

  var normalizedStart = normalizeDate(dateProfile.renderRange.start, tDateProfile, dateEnv);
  var normalizedEnd = normalizeDate(dateProfile.renderRange.end, tDateProfile, dateEnv); // apply minTime/maxTime
  // TODO: View should be responsible.

  if (tDateProfile.isTimeScale) {
    normalizedStart = dateEnv.add(normalizedStart, dateProfile.minTime);
    normalizedEnd = dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(normalizedEnd, -1), dateProfile.maxTime);
  }

  tDateProfile.timeWindowMs = timeWindowMs;
  tDateProfile.normalizedRange = {
    start: normalizedStart,
    end: normalizedEnd
  };
  var slotDates = [];
  var date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, view)) {
      slotDates.push(date);
    }

    date = dateEnv.add(date, tDateProfile.slotDuration);
  }

  tDateProfile.slotDates = slotDates; // more...

  var snapIndex = -1;
  var snapDiff = 0; // index of the diff :(

  var snapDiffToIndex = [];
  var snapIndexToDiff = [];
  date = normalizedStart;

  while (date < normalizedEnd) {
    if (isValidDate(date, tDateProfile, dateProfile, view)) {
      snapIndex++;
      snapDiffToIndex.push(snapIndex);
      snapIndexToDiff.push(snapDiff);
    } else {
      snapDiffToIndex.push(snapIndex + 0.5);
    }

    date = dateEnv.add(date, tDateProfile.snapDuration);
    snapDiff++;
  }

  tDateProfile.snapDiffToIndex = snapDiffToIndex;
  tDateProfile.snapIndexToDiff = snapIndexToDiff;
  tDateProfile.snapCnt = snapIndex + 1; // is always one behind

  tDateProfile.slotCnt = tDateProfile.snapCnt / tDateProfile.snapsPerSlot; // more...

  tDateProfile.isWeekStarts = buildIsWeekStarts(tDateProfile, dateEnv);
  tDateProfile.cellRows = buildCellRows(tDateProfile, dateEnv, view);
  return tDateProfile;
}
/*
snaps to appropriate unit
*/


function normalizeDate(date, tDateProfile, dateEnv) {
  var normalDate = date;

  if (!tDateProfile.isTimeScale) {
    normalDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(normalDate);

    if (tDateProfile.largeUnit) {
      normalDate = dateEnv.startOf(normalDate, tDateProfile.largeUnit);
    }
  }

  return normalDate;
}
/*
snaps to appropriate unit
*/


function normalizeRange(range, tDateProfile, dateEnv) {
  if (!tDateProfile.isTimeScale) {
    range = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeVisibleDayRange"])(range);

    if (tDateProfile.largeUnit) {
      var dayRange = range; // preserve original result

      range = {
        start: dateEnv.startOf(range.start, tDateProfile.largeUnit),
        end: dateEnv.startOf(range.end, tDateProfile.largeUnit)
      }; // if date is partially through the interval, or is in the same interval as the start,
      // make the exclusive end be the *next* interval

      if (range.end.valueOf() !== dayRange.end.valueOf() || range.end <= range.start) {
        range = {
          start: range.start,
          end: dateEnv.add(range.end, tDateProfile.slotDuration)
        };
      }
    }
  }

  return range;
}

function isValidDate(date, tDateProfile, dateProfile, view) {
  if (view.dateProfileGenerator.isHiddenDay(date)) {
    return false;
  } else if (tDateProfile.isTimeScale) {
    // determine if the time is within minTime/maxTime, which may have wacky values
    var day = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date);
    var timeMs = date.valueOf() - day.valueOf();
    var ms = timeMs - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime); // milliseconds since minTime

    ms = (ms % 86400000 + 86400000) % 86400000; // make negative values wrap to 24hr clock

    return ms < tDateProfile.timeWindowMs; // before the maxTime?
  } else {
    return true;
  }
}

function queryDurationOption(view, name) {
  var input = view.opt(name);

  if (input != null) {
    return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
  }
}

function validateLabelAndSlot(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange; // make sure labelInterval doesn't exceed the max number of cells

  if (tDateProfile.labelInterval) {
    var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.labelInterval);

    if (labelCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotLabelInterval results in too many cells');
      tDateProfile.labelInterval = null;
    }
  } // make sure slotDuration doesn't exceed the maximum number of cells


  if (tDateProfile.slotDuration) {
    var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.slotDuration);

    if (slotCnt > _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].MAX_TIMELINE_SLOTS) {
      console.warn('slotDuration results in too many cells');
      tDateProfile.slotDuration = null;
    }
  } // make sure labelInterval is a multiple of slotDuration


  if (tDateProfile.labelInterval && tDateProfile.slotDuration) {
    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);

    if (slotsPerLabel === null || slotsPerLabel < 1) {
      console.warn('slotLabelInterval must be a multiple of slotDuration');
      tDateProfile.slotDuration = null;
    }
  }
}

function ensureLabelInterval(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var labelInterval = tDateProfile.labelInterval;

  if (!labelInterval) {
    // compute based off the slot duration
    // find the largest label interval with an acceptable slots-per-label
    var input = void 0;

    if (tDateProfile.slotDuration) {
      for (var _i = 0, STOCK_SUB_DURATIONS_1 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_1.length; _i++) {
        input = STOCK_SUB_DURATIONS_1[_i];
        var tryLabelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tryLabelInterval, tDateProfile.slotDuration);

        if (slotsPerLabel !== null && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
          labelInterval = tryLabelInterval;
          break;
        }
      } // use the slot duration as a last resort


      if (!labelInterval) {
        labelInterval = tDateProfile.slotDuration;
      } // compute based off the view's duration
      // find the largest label interval that yields the minimum number of labels

    } else {
      for (var _a = 0, STOCK_SUB_DURATIONS_2 = STOCK_SUB_DURATIONS; _a < STOCK_SUB_DURATIONS_2.length; _a++) {
        input = STOCK_SUB_DURATIONS_2[_a];
        labelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
        var labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, labelInterval);

        if (labelCnt >= MIN_AUTO_LABELS) {
          break;
        }
      }
    }

    tDateProfile.labelInterval = labelInterval;
  }

  return labelInterval;
}

function ensureSlotDuration(tDateProfile, dateProfile, dateEnv) {
  var currentRange = dateProfile.currentRange;
  var slotDuration = tDateProfile.slotDuration;

  if (!slotDuration) {
    var labelInterval = ensureLabelInterval(tDateProfile, dateProfile, dateEnv); // will compute if necessary
    // compute based off the label interval
    // find the largest slot duration that is different from labelInterval, but still acceptable

    for (var _i = 0, STOCK_SUB_DURATIONS_3 = STOCK_SUB_DURATIONS; _i < STOCK_SUB_DURATIONS_3.length; _i++) {
      var input = STOCK_SUB_DURATIONS_3[_i];
      var trySlotDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input);
      var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(labelInterval, trySlotDuration);

      if (slotsPerLabel !== null && slotsPerLabel > 1 && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {
        slotDuration = trySlotDuration;
        break;
      }
    } // only allow the value if it won't exceed the view's # of slots limit


    if (slotDuration) {
      var slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, slotDuration);

      if (slotCnt > MAX_AUTO_CELLS) {
        slotDuration = null;
      }
    } // use the label interval as a last resort


    if (!slotDuration) {
      slotDuration = labelInterval;
    }

    tDateProfile.slotDuration = slotDuration;
  }

  return slotDuration;
}

function computeHeaderFormats(tDateProfile, dateProfile, dateEnv, view) {
  var format1;
  var format2;
  var labelInterval = tDateProfile.labelInterval;
  var unit = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(labelInterval).unit;
  var weekNumbersVisible = view.opt('weekNumbers');
  var format0 = format1 = format2 = null; // NOTE: weekNumber computation function wont work

  if (unit === 'week' && !weekNumbersVisible) {
    unit = 'day';
  }

  switch (unit) {
    case 'year':
      format0 = {
        year: 'numeric'
      }; // '2015'

      break;

    case 'month':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        month: 'short'
      }; // 'Jan'

      break;

    case 'week':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric'
        }; // '2015'
      }

      format1 = {
        week: 'narrow'
      }; // 'Wk4'

      break;

    case 'day':
      if (currentRangeAs('years', dateProfile, dateEnv) > 1) {
        format0 = {
          year: 'numeric',
          month: 'long'
        }; // 'January 2014'
      } else if (currentRangeAs('months', dateProfile, dateEnv) > 1) {
        format0 = {
          month: 'long'
        }; // 'January'
      }

      if (weekNumbersVisible) {
        format1 = {
          week: 'short'
        }; // 'Wk 4'
      }

      format2 = {
        weekday: 'narrow',
        day: 'numeric'
      }; // 'Su 9'

      break;

    case 'hour':
      if (weekNumbersVisible) {
        format0 = {
          week: 'short'
        }; // 'Wk 4'
      }

      if (currentRangeAs('days', dateProfile, dateEnv) > 1) {
        format1 = {
          weekday: 'short',
          day: 'numeric',
          month: 'numeric',
          omitCommas: true
        }; // Sat 4/7
      }

      format2 = {
        hour: 'numeric',
        minute: '2-digit',
        omitZeroMinute: true,
        meridiem: 'short'
      };
      break;

    case 'minute':
      // sufficiently large number of different minute cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMinutes"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          meridiem: 'short'
        };

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.minute, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: 'numeric',
          meridiem: 'short'
        };
      }

      break;

    case 'second':
      // sufficiently large number of different second cells?
      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughSeconds"])(labelInterval) / 60 >= MAX_AUTO_SLOTS_PER_LABEL) {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30 PM'

        format1 = function (params) {
          return ':' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.date.second, 2); // ':30'
        };
      } else {
        format0 = {
          hour: 'numeric',
          minute: '2-digit',
          second: '2-digit',
          meridiem: 'lowercase'
        }; // '8:30:45 PM'
      }

      break;

    case 'millisecond':
      format0 = {
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit',
        meridiem: 'lowercase'
      }; // '8:30:45 PM'

      format1 = function (params) {
        return '.' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["padStart"])(params.millisecond, 3);
      };

      break;
  }

  return [].concat(format0 || [], format1 || [], format2 || []);
} // Compute the number of the give units in the "current" range.
// Won't go more precise than days.
// Will return `0` if there's not a clean whole interval.


function currentRangeAs(unit, dateProfile, dateEnv) {
  var range = dateProfile.currentRange;
  var res = null;

  if (unit === 'years') {
    res = dateEnv.diffWholeYears(range.start, range.end);
  } else if (unit === 'months') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'weeks') {
    res = dateEnv.diffWholeMonths(range.start, range.end);
  } else if (unit === 'days') {
    res = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffWholeDays"])(range.start, range.end);
  }

  return res || 0;
}

function buildIsWeekStarts(tDateProfile, dateEnv) {
  var slotDates = tDateProfile.slotDates,
      emphasizeWeeks = tDateProfile.emphasizeWeeks;
  var prevWeekNumber = null;
  var isWeekStarts = [];

  for (var _i = 0, slotDates_1 = slotDates; _i < slotDates_1.length; _i++) {
    var slotDate = slotDates_1[_i];
    var weekNumber = dateEnv.computeWeekNumber(slotDate);
    var isWeekStart = emphasizeWeeks && prevWeekNumber !== null && prevWeekNumber !== weekNumber;
    prevWeekNumber = weekNumber;
    isWeekStarts.push(isWeekStart);
  }

  return isWeekStarts;
}

function buildCellRows(tDateProfile, dateEnv, view) {
  var slotDates = tDateProfile.slotDates;
  var formats = tDateProfile.headerFormats;
  var cellRows = formats.map(function (format) {
    return [];
  }); // indexed by row,col
  // specifically for navclicks

  var rowUnits = formats.map(function (format) {
    return format.getLargestUnit ? format.getLargestUnit() : null;
  }); // builds cellRows and slotCells

  for (var i = 0; i < slotDates.length; i++) {
    var date = slotDates[i];
    var isWeekStart = tDateProfile.isWeekStarts[i];

    for (var row = 0; row < formats.length; row++) {
      var format = formats[row];
      var rowCells = cellRows[row];
      var leadingCell = rowCells[rowCells.length - 1];
      var isSuperRow = formats.length > 1 && row < formats.length - 1; // more than one row and not the last

      var newCell = null;

      if (isSuperRow) {
        var text = dateEnv.format(date, format);

        if (!leadingCell || leadingCell.text !== text) {
          newCell = buildCellObject(date, text, rowUnits[row], view);
        } else {
          leadingCell.colspan += 1;
        }
      } else {
        if (!leadingCell || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval))) {
          var text = dateEnv.format(date, format);
          newCell = buildCellObject(date, text, rowUnits[row], view);
        } else {
          leadingCell.colspan += 1;
        }
      }

      if (newCell) {
        newCell.weekStart = isWeekStart;
        rowCells.push(newCell);
      }
    }
  }

  return cellRows;
}

function buildCellObject(date, text, rowUnit, view) {
  var spanHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(view, {
    date: date,
    type: rowUnit,
    forceOff: !rowUnit
  }, {
    'class': 'fc-cell-text'
  }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(text));
  return {
    text: text,
    spanHtml: spanHtml,
    date: date,
    colspan: 1,
    isWeekStart: false
  };
}

var TimelineNowIndicator =
/** @class */
function () {
  function TimelineNowIndicator(headParent, bodyParent) {
    this.headParent = headParent;
    this.bodyParent = bodyParent;
  }

  TimelineNowIndicator.prototype.render = function (coord, isRtl) {
    var styleProps = isRtl ? {
      right: -coord
    } : {
      left: coord
    };
    this.headParent.appendChild(this.arrowEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-arrow',
      style: styleProps
    }));
    this.bodyParent.appendChild(this.lineEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
      className: 'fc-now-indicator fc-now-indicator-line',
      style: styleProps
    }));
  };

  TimelineNowIndicator.prototype.unrender = function () {
    if (this.arrowEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.arrowEl);
    }

    if (this.lineEl) {
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.lineEl);
    }
  };

  return TimelineNowIndicator;
}();

var STICKY_PROP_VAL = computeStickyPropVal(); // if null, means not supported at all

var IS_MS_EDGE = /Edge/.test(navigator.userAgent);
var IS_SAFARI = STICKY_PROP_VAL === '-webkit-sticky'; // good b/c doesn't confuse chrome

var STICKY_CLASSNAME = 'fc-sticky';
/*
useful beyond the native position:sticky for these reasons:
- support in IE11
- nice centering support
*/

var StickyScroller =
/** @class */
function () {
  function StickyScroller(scroller, isRtl, isVertical) {
    var _this = this;

    this.usingRelative = null;
    /*
    known bug: called twice on init. problem when mixing with ScrollJoiner
    */

    this.updateSize = function () {
      var els = Array.prototype.slice.call(_this.scroller.canvas.el.querySelectorAll('.' + STICKY_CLASSNAME));

      var elGeoms = _this.queryElGeoms(els);

      var viewportWidth = _this.scroller.el.clientWidth;

      if (_this.usingRelative) {
        var elDestinations = _this.computeElDestinations(elGeoms, viewportWidth); // read before prepPositioning


        assignRelativePositions(els, elGeoms, elDestinations);
      } else {
        assignStickyPositions(els, elGeoms, viewportWidth);
      }
    };

    this.scroller = scroller;
    this.usingRelative = !STICKY_PROP_VAL || // IE11
    IS_MS_EDGE && isRtl || // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/18883305/
    (IS_MS_EDGE || IS_SAFARI) && isVertical; // because doesn't work with rowspan in tables, our only vertial use

    if (this.usingRelative) {
      scroller.on('scrollEnd', this.updateSize);
    }
  }

  StickyScroller.prototype.destroy = function () {
    this.scroller.off('scrollEnd', this.updateSize);
  };

  StickyScroller.prototype.queryElGeoms = function (els) {
    var canvasOrigin = this.scroller.canvas.el.getBoundingClientRect();
    var elGeoms = [];

    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el = els_1[_i];
      var parentBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(el.parentNode.getBoundingClientRect(), -canvasOrigin.left, -canvasOrigin.top);
      var elRect = el.getBoundingClientRect();
      var computedStyles = window.getComputedStyle(el);
      var computedTextAlign = window.getComputedStyle(el.parentNode).textAlign; // ask the parent

      var intendedTextAlign = computedTextAlign;
      var naturalBound = null;

      if (computedStyles.position !== 'sticky') {
        naturalBound = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["translateRect"])(elRect, -canvasOrigin.left - (parseFloat(computedStyles.left) || 0), // could be 'auto'
        -canvasOrigin.top - (parseFloat(computedStyles.top) || 0));
      }

      if (el.hasAttribute('data-sticky-center')) {
        intendedTextAlign = 'center';
      }

      elGeoms.push({
        parentBound: parentBound,
        naturalBound: naturalBound,
        elWidth: elRect.width,
        elHeight: elRect.height,
        computedTextAlign: computedTextAlign,
        intendedTextAlign: intendedTextAlign
      });
    }

    return elGeoms;
  };

  StickyScroller.prototype.computeElDestinations = function (elGeoms, viewportWidth) {
    var viewportLeft = this.scroller.getScrollFromLeft();
    var viewportTop = this.scroller.getScrollTop();
    var viewportRight = viewportLeft + viewportWidth;
    return elGeoms.map(function (elGeom) {
      var elWidth = elGeom.elWidth,
          elHeight = elGeom.elHeight,
          parentBound = elGeom.parentBound,
          naturalBound = elGeom.naturalBound;
      var destLeft; // relative to canvas topleft

      var destTop; // "

      switch (elGeom.intendedTextAlign) {
        case 'left':
          destLeft = viewportLeft;
          break;

        case 'right':
          destLeft = viewportRight - elWidth;
          break;

        case 'center':
          destLeft = (viewportLeft + viewportRight) / 2 - elWidth / 2;
          break;
      }

      destLeft = Math.min(destLeft, parentBound.right - elWidth);
      destLeft = Math.max(destLeft, parentBound.left);
      destTop = viewportTop;
      destTop = Math.min(destTop, parentBound.bottom - elHeight);
      destTop = Math.max(destTop, naturalBound.top); // better to use natural top for upper bound

      return {
        left: destLeft,
        top: destTop
      };
    });
  };

  return StickyScroller;
}();

function assignRelativePositions(els, elGeoms, elDestinations) {
  els.forEach(function (el, i) {
    var naturalBound = elGeoms[i].naturalBound;
    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: 'relative',
      left: elDestinations[i].left - naturalBound.left,
      top: elDestinations[i].top - naturalBound.top
    });
  });
}

function assignStickyPositions(els, elGeoms, viewportWidth) {
  els.forEach(function (el, i) {
    var stickyLeft = 0;

    if (elGeoms[i].intendedTextAlign === 'center') {
      stickyLeft = (viewportWidth - elGeoms[i].elWidth) / 2; // needs to be forced to left?

      if (elGeoms[i].computedTextAlign === 'center') {
        el.setAttribute('data-sticky-center', '') // remember for next queryElGeoms
        ;
        el.parentNode.style.textAlign = 'left';
      }
    }

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
      position: STICKY_PROP_VAL,
      left: stickyLeft,
      right: 0,
      top: 0
    });
  });
}

function computeStickyPropVal() {
  var el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div style="position:-webkit-sticky;position:sticky"></div>');
  var val = el.style.position;

  if (val.indexOf('sticky') !== -1) {
    return val;
  } else {
    return null;
  }
}

var TimeAxis =
/** @class */
function (_super) {
  __extends(TimeAxis, _super);

  function TimeAxis(context, headerContainerEl, bodyContainerEl) {
    var _this = _super.call(this, context) || this;

    var layout = _this.layout = new HeaderBodyLayout(headerContainerEl, bodyContainerEl, 'auto');
    var headerEnhancedScroller = layout.headerScroller.enhancedScroll;
    var bodyEnhancedScroller = layout.bodyScroller.enhancedScroll; // needs to go after layout, which has ScrollJoiner

    _this.headStickyScroller = new StickyScroller(headerEnhancedScroller, _this.isRtl, false); // isVertical=false

    _this.bodyStickyScroller = new StickyScroller(bodyEnhancedScroller, _this.isRtl, false); // isVertical=false

    _this.header = new TimelineHeader(context, headerEnhancedScroller.canvas.contentEl);
    _this.slats = new TimelineSlats(context, bodyEnhancedScroller.canvas.bgEl);
    _this.nowIndicator = new TimelineNowIndicator(headerEnhancedScroller.canvas.el, bodyEnhancedScroller.canvas.el);
    return _this;
  }

  TimeAxis.prototype.destroy = function () {
    this.layout.destroy();
    this.header.destroy();
    this.slats.destroy();
    this.nowIndicator.unrender();
    this.headStickyScroller.destroy();
    this.bodyStickyScroller.destroy();

    _super.prototype.destroy.call(this);
  };

  TimeAxis.prototype.render = function (props) {
    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(props.dateProfile, this.view); // TODO: cache

    this.header.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    });
    this.slats.receiveProps({
      dateProfile: props.dateProfile,
      tDateProfile: tDateProfile
    });
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.getNowIndicatorUnit = function (dateProfile) {
    // yuck
    var tDateProfile = this.tDateProfile = buildTimelineDateProfile(dateProfile, this.view); // TODO: cache

    if (tDateProfile.isTimeScale) {
      return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["greatestDurationDenominator"])(tDateProfile.slotDuration).unit;
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.renderNowIndicator = function (date) {
    if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsMarker"])(this.tDateProfile.normalizedRange, date)) {
      this.nowIndicator.render(this.dateToCoord(date), this.isRtl);
    }
  }; // will only execute if isTimeScale


  TimeAxis.prototype.unrenderNowIndicator = function () {
    this.nowIndicator.unrender();
  }; // Sizing
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.applySlotWidth(this.computeSlotWidth()); // adjusts gutters. do after slot widths set

    this.layout.setHeight(totalHeight, isAuto); // pretty much just queries coords. do last

    this.slats.updateSize();
  };

  TimeAxis.prototype.updateStickyScrollers = function () {
    this.headStickyScroller.updateSize();
    this.bodyStickyScroller.updateSize();
  };

  TimeAxis.prototype.computeSlotWidth = function () {
    var slotWidth = this.opt('slotWidth') || '';

    if (slotWidth === '') {
      slotWidth = this.computeDefaultSlotWidth(this.tDateProfile);
    }

    return slotWidth;
  };

  TimeAxis.prototype.computeDefaultSlotWidth = function (tDateProfile) {
    var maxInnerWidth = 0; // TODO: harness core's `matchCellWidths` for this

    this.header.innerEls.forEach(function (innerEl, i) {
      maxInnerWidth = Math.max(maxInnerWidth, innerEl.getBoundingClientRect().width);
    });
    var headingCellWidth = Math.ceil(maxInnerWidth) + 1; // assume no padding, and one pixel border
    // in TimelineView.defaults we ensured that labelInterval is an interval of slotDuration
    // TODO: rename labelDuration?

    var slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(tDateProfile.labelInterval, tDateProfile.slotDuration);
    var slotWidth = Math.ceil(headingCellWidth / slotsPerLabel);
    var minWidth = window.getComputedStyle(this.header.slatColEls[0]).minWidth;

    if (minWidth) {
      minWidth = parseInt(minWidth, 10);

      if (minWidth) {
        slotWidth = Math.max(slotWidth, minWidth);
      }
    }

    return slotWidth;
  };

  TimeAxis.prototype.applySlotWidth = function (slotWidth) {
    var _a = this,
        layout = _a.layout,
        tDateProfile = _a.tDateProfile;

    var containerWidth = '';
    var containerMinWidth = '';
    var nonLastSlotWidth = '';

    if (slotWidth !== '') {
      slotWidth = Math.round(slotWidth);
      containerWidth = slotWidth * tDateProfile.slotDates.length;
      containerMinWidth = '';
      nonLastSlotWidth = slotWidth;
      var availableWidth = layout.bodyScroller.enhancedScroll.getClientWidth();

      if (availableWidth > containerWidth) {
        containerMinWidth = availableWidth;
        containerWidth = '';
        nonLastSlotWidth = Math.floor(availableWidth / tDateProfile.slotDates.length);
      }
    }

    layout.headerScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.headerScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);
    layout.bodyScroller.enhancedScroll.canvas.setWidth(containerWidth);
    layout.bodyScroller.enhancedScroll.canvas.setMinWidth(containerMinWidth);

    if (nonLastSlotWidth !== '') {
      this.header.slatColEls.slice(0, -1).concat(this.slats.slatColEls.slice(0, -1)).forEach(function (el) {
        el.style.width = nonLastSlotWidth + 'px';
      });
    }
  }; // returned value is between 0 and the number of snaps


  TimeAxis.prototype.computeDateSnapCoverage = function (date) {
    var _a = this,
        dateEnv = _a.dateEnv,
        tDateProfile = _a.tDateProfile;

    var snapDiff = dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.snapDuration);

    if (snapDiff < 0) {
      return 0;
    } else if (snapDiff >= tDateProfile.snapDiffToIndex.length) {
      return tDateProfile.snapCnt;
    } else {
      var snapDiffInt = Math.floor(snapDiff);
      var snapCoverage = tDateProfile.snapDiffToIndex[snapDiffInt];

      if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInt"])(snapCoverage)) {
        // not an in-between value
        snapCoverage += snapDiff - snapDiffInt; // add the remainder
      } else {
        // a fractional value, meaning the date is not visible
        // always round up in this case. works for start AND end dates in a range.
        snapCoverage = Math.ceil(snapCoverage);
      }

      return snapCoverage;
    }
  }; // for LTR, results range from 0 to width of area
  // for RTL, results range from negative width of area to 0


  TimeAxis.prototype.dateToCoord = function (date) {
    var tDateProfile = this.tDateProfile;
    var snapCoverage = this.computeDateSnapCoverage(date);
    var slotCoverage = snapCoverage / tDateProfile.snapsPerSlot;
    var slotIndex = Math.floor(slotCoverage);
    slotIndex = Math.min(slotIndex, tDateProfile.slotCnt - 1);
    var partial = slotCoverage - slotIndex;
    var _a = this.slats,
        innerCoordCache = _a.innerCoordCache,
        outerCoordCache = _a.outerCoordCache;

    if (this.isRtl) {
      return outerCoordCache.rights[slotIndex] - innerCoordCache.getWidth(slotIndex) * partial - outerCoordCache.originClientRect.width;
    } else {
      return outerCoordCache.lefts[slotIndex] + innerCoordCache.getWidth(slotIndex) * partial;
    }
  };

  TimeAxis.prototype.rangeToCoords = function (range) {
    if (this.isRtl) {
      return {
        right: this.dateToCoord(range.start),
        left: this.dateToCoord(range.end)
      };
    } else {
      return {
        left: this.dateToCoord(range.start),
        right: this.dateToCoord(range.end)
      };
    }
  }; // Scrolling
  // ------------------------------------------------------------------------------------------


  TimeAxis.prototype.computeDateScroll = function (duration) {
    var dateEnv = this.dateEnv;
    var dateProfile = this.props.dateProfile;
    var left = 0;

    if (dateProfile) {
      left = this.dateToCoord(dateEnv.add(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(dateProfile.activeRange.start), // startOfDay needed?
      duration)); // hack to overcome the left borders of non-first slat

      if (!this.isRtl && left) {
        left += 1;
      }
    }

    return {
      left: left
    };
  };

  TimeAxis.prototype.queryDateScroll = function () {
    var enhancedScroll = this.layout.bodyScroller.enhancedScroll;
    return {
      left: enhancedScroll.getScrollLeft()
    };
  };

  TimeAxis.prototype.applyDateScroll = function (scroll) {
    // TODO: lame we have to update both. use the scrolljoiner instead maybe
    this.layout.bodyScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
    this.layout.headerScroller.enhancedScroll.setScrollLeft(scroll.left || 0);
  };

  return TimeAxis;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Component"]);

var TimelineLaneEventRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneEventRenderer, _super);

  function TimelineLaneEventRenderer(context, masterContainerEl, timeAxis) {
    var _this = _super.call(this, context) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
    var view = this.context.view;
    var eventRange = seg.eventRange;
    var eventDef = eventRange.def;
    var eventUi = eventRange.ui;
    var isDraggable = view.computeEventDraggable(eventDef, eventUi);
    var isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi);
    var isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);
    var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
    classes.unshift('fc-timeline-event', 'fc-h-event');
    var timeText = this.getTimeText(eventRange);
    return '<a class="' + classes.join(' ') + '" style="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(this.getSkinCss(eventUi)) + '"' + (eventDef.url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.url) + '"' : '') + '>' + (timeText ? '<span class="fc-time-wrap">' + '<span class="fc-time">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(timeText) + '</span>' + '</span>' : '') + '<span class="fc-title-wrap">' + '<span class="fc-title fc-sticky">' + (eventDef.title ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title) : '&nbsp;') + '</span>' + '</span>' + (isResizableFromStart ? '<div class="fc-resizer fc-start-resizer"></div>' : '') + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer"></div>' : '') + '</a>';
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventTime = function () {
    return !this.timeAxis.tDateProfile.isTimeScale; // because times should be obvious via axis
  };

  TimelineLaneEventRenderer.prototype.computeDisplayEventEnd = function () {
    return false;
  }; // Computes a default event time formatting string if `timeFormat` is not explicitly defined


  TimelineLaneEventRenderer.prototype.computeEventTimeFormat = function () {
    return {
      hour: 'numeric',
      minute: '2-digit',
      omitZeroMinute: true,
      meridiem: 'narrow'
    };
  };

  TimelineLaneEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
    if (!this.el && this.masterContainerEl) {
      this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-event-container'
      });

      if (mirrorInfo) {
        this.el.classList.add('fc-mirror-container');
      }

      this.masterContainerEl.appendChild(this.el);
    }

    if (this.el) {
      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        this.el.appendChild(seg.el);
      }
    }
  };

  TimelineLaneEventRenderer.prototype.detachSegs = function (segs) {
    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(seg.el);
    }
  }; // computes AND assigns (assigns the left/right at least). bad


  TimelineLaneEventRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      var coords = timeAxis.rangeToCoords(seg); // works because Seg has start/end

      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left = coords.left,
        right: -(seg.right = coords.right)
      });
    }
  };

  TimelineLaneEventRenderer.prototype.assignSegSizes = function (segs) {
    if (!this.el) {
      return;
    } // compute seg verticals


    for (var _i = 0, segs_4 = segs; _i < segs_4.length; _i++) {
      var seg = segs_4[_i];
      seg.height = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeHeightAndMargins"])(seg.el);
    }

    this.buildSegLevels(segs); // populates above/below props for computeOffsetForSegs

    var totalHeight = computeOffsetForSegs(segs); // also assigns seg.top

    Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(this.el, 'height', totalHeight); // assign seg verticals

    for (var _a = 0, segs_5 = segs; _a < segs_5.length; _a++) {
      var seg = segs_5[_a];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyleProp"])(seg.el, 'top', seg.top);
    }
  };

  TimelineLaneEventRenderer.prototype.buildSegLevels = function (segs) {
    var segLevels = [];
    segs = this.sortEventSegs(segs);

    for (var _i = 0, segs_6 = segs; _i < segs_6.length; _i++) {
      var unplacedSeg = segs_6[_i];
      unplacedSeg.above = []; // determine the first level with no collisions

      var level = 0; // level index

      while (level < segLevels.length) {
        var isLevelCollision = false; // determine collisions

        for (var _a = 0, _b = segLevels[level]; _a < _b.length; _a++) {
          var placedSeg = _b[_a];

          if (timeRowSegsCollide(unplacedSeg, placedSeg)) {
            unplacedSeg.above.push(placedSeg);
            isLevelCollision = true;
          }
        }

        if (isLevelCollision) {
          level += 1;
        } else {
          break;
        }
      } // insert into the first non-colliding level. create if necessary


      (segLevels[level] || (segLevels[level] = [])).push(unplacedSeg); // record possible colliding segments below (TODO: automated test for this)

      level += 1;

      while (level < segLevels.length) {
        for (var _c = 0, _d = segLevels[level]; _c < _d.length; _c++) {
          var belowSeg = _d[_c];

          if (timeRowSegsCollide(unplacedSeg, belowSeg)) {
            belowSeg.above.push(unplacedSeg);
          }
        }

        level += 1;
      }
    }

    return segLevels;
  };

  return TimelineLaneEventRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]);

function computeOffsetForSegs(segs) {
  var max = 0;

  for (var _i = 0, segs_7 = segs; _i < segs_7.length; _i++) {
    var seg = segs_7[_i];
    max = Math.max(max, computeOffsetForSeg(seg));
  }

  return max;
}

function computeOffsetForSeg(seg) {
  if (seg.top == null) {
    seg.top = computeOffsetForSegs(seg.above);
  }

  return seg.top + seg.height;
}

function timeRowSegsCollide(seg0, seg1) {
  return seg0.left < seg1.right && seg0.right > seg1.left;
}

var TimelineLaneFillRenderer =
/** @class */
function (_super) {
  __extends(TimelineLaneFillRenderer, _super);

  function TimelineLaneFillRenderer(context, masterContainerEl, timeAxis) {
    var _this = _super.call(this, context) || this;

    _this.masterContainerEl = masterContainerEl;
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLaneFillRenderer.prototype.attachSegs = function (type, segs) {
    if (segs.length) {
      var className = void 0;

      if (type === 'businessHours') {
        className = 'bgevent';
      } else {
        className = type.toLowerCase();
      } // making a new container each time is OKAY
      // all types of segs (background or business hours or whatever) are rendered in one pass


      var containerEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
        className: 'fc-' + className + '-container'
      });
      this.masterContainerEl.appendChild(containerEl);

      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
        var seg = segs_1[_i];
        containerEl.appendChild(seg.el);
      }

      return [containerEl]; // return value
    }
  };

  TimelineLaneFillRenderer.prototype.computeSegSizes = function (segs) {
    var timeAxis = this.timeAxis;

    for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
      var seg = segs_2[_i];
      var coords = timeAxis.rangeToCoords(seg);
      seg.left = coords.left;
      seg.right = coords.right;
    }
  };

  TimelineLaneFillRenderer.prototype.assignSegSizes = function (segs) {
    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
      var seg = segs_3[_i];
      Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, {
        left: seg.left,
        right: -seg.right
      });
    }
  };

  return TimelineLaneFillRenderer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FillRenderer"]);

var TimelineLane =
/** @class */
function (_super) {
  __extends(TimelineLane, _super);

  function TimelineLane(context, fgContainerEl, bgContainerEl, timeAxis) {
    var _this = _super.call(this, context, bgContainerEl) // should el be bgContainerEl???
    || this;

    _this.slicer = new TimelineLaneSlicer();
    _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventDrag, _this._unrenderEventDrag);
    _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventResize, _this._unrenderEventResize);
    var fillRenderer = _this.fillRenderer = new TimelineLaneFillRenderer(context, bgContainerEl, timeAxis);
    var eventRenderer = _this.eventRenderer = new TimelineLaneEventRenderer(context, fgContainerEl, timeAxis);
    _this.mirrorRenderer = new TimelineLaneEventRenderer(context, fgContainerEl, timeAxis);
    _this.renderBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'));
    _this.renderDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'));
    _this.renderBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'));
    _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer));
    _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
    _this.timeAxis = timeAxis;
    return _this;
  }

  TimelineLane.prototype.render = function (props) {
    var slicedProps = this.slicer.sliceProps(props, props.dateProfile, this.timeAxis.tDateProfile.isTimeScale ? null : props.nextDayThreshold, this, this.timeAxis);
    this.renderBusinessHours(slicedProps.businessHourSegs);
    this.renderDateSelection(slicedProps.dateSelectionSegs);
    this.renderBgEvents(slicedProps.bgEventSegs);
    this.renderFgEvents(slicedProps.fgEventSegs);
    this.renderEventSelection(slicedProps.eventSelection);
    this.renderEventDrag(slicedProps.eventDrag);
    this.renderEventResize(slicedProps.eventResize);
  };

  TimelineLane.prototype.destroy = function () {
    _super.prototype.destroy.call(this);

    this.renderBusinessHours.unrender();
    this.renderDateSelection.unrender();
    this.renderBgEvents.unrender();
    this.renderFgEvents.unrender();
    this.renderEventSelection.unrender();
    this.renderEventDrag.unrender();
    this.renderEventResize.unrender();
  };

  TimelineLane.prototype._renderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.mirrorRenderer.renderSegs(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventDrag = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.mirrorRenderer.unrender(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._renderEventResize = function (state) {
    if (state) {
      // HACK. eventRenderer and fillRenderer both use these segs. would compete over seg.el
      var segsForHighlight = state.segs.map(function (seg) {
        return __assign({}, seg);
      });
      this.eventRenderer.hideByHash(state.affectedInstances);
      this.fillRenderer.renderSegs('highlight', segsForHighlight);
      this.mirrorRenderer.renderSegs(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype._unrenderEventResize = function (state) {
    if (state) {
      this.eventRenderer.showByHash(state.affectedInstances);
      this.fillRenderer.unrender('highlight');
      this.mirrorRenderer.unrender(state.segs, {
        isDragging: true,
        sourceSeg: state.sourceSeg
      });
    }
  };

  TimelineLane.prototype.updateSize = function (isResize) {
    var _a = this,
        fillRenderer = _a.fillRenderer,
        eventRenderer = _a.eventRenderer,
        mirrorRenderer = _a.mirrorRenderer;

    fillRenderer.computeSizes(isResize);
    eventRenderer.computeSizes(isResize);
    mirrorRenderer.computeSizes(isResize);
    fillRenderer.assignSizes(isResize);
    eventRenderer.assignSizes(isResize);
    mirrorRenderer.assignSizes(isResize);
  };

  return TimelineLane;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

var TimelineLaneSlicer =
/** @class */
function (_super) {
  __extends(TimelineLaneSlicer, _super);

  function TimelineLaneSlicer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimelineLaneSlicer.prototype.sliceRange = function (origRange, timeAxis) {
    var tDateProfile = timeAxis.tDateProfile;
    var dateProfile = timeAxis.props.dateProfile;
    var normalRange = normalizeRange(origRange, tDateProfile, timeAxis.dateEnv);
    var segs = []; // protect against when the span is entirely in an invalid date region

    if (timeAxis.computeDateSnapCoverage(normalRange.start) < timeAxis.computeDateSnapCoverage(normalRange.end)) {
      // intersect the footprint's range with the grid's range
      var slicedRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(normalRange, tDateProfile.normalizedRange);

      if (slicedRange) {
        segs.push({
          start: slicedRange.start,
          end: slicedRange.end,
          isStart: slicedRange.start.valueOf() === normalRange.start.valueOf() && isValidDate(slicedRange.start, tDateProfile, dateProfile, timeAxis.view),
          isEnd: slicedRange.end.valueOf() === normalRange.end.valueOf() && isValidDate(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addMs"])(slicedRange.end, -1), tDateProfile, dateProfile, timeAxis.view)
        });
      }
    }

    return segs;
  };

  return TimelineLaneSlicer;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Slicer"]);

var TimelineView =
/** @class */
function (_super) {
  __extends(TimelineView, _super);

  function TimelineView(context, viewSpec, dateProfileGenerator, parentEl) {
    var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;

    _this.el.classList.add('fc-timeline');

    if (_this.opt('eventOverlap') === false) {
      _this.el.classList.add('fc-no-overlap');
    }

    _this.el.innerHTML = _this.renderSkeletonHtml();
    _this.timeAxis = new TimeAxis(_this.context, _this.el.querySelector('thead .fc-time-area'), _this.el.querySelector('tbody .fc-time-area'));
    _this.lane = new TimelineLane(_this.context, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, _this.timeAxis);
    context.calendar.registerInteractiveComponent(_this, {
      el: _this.timeAxis.slats.el
    });
    return _this;
  }

  TimelineView.prototype.destroy = function () {
    this.timeAxis.destroy();
    this.lane.destroy();

    _super.prototype.destroy.call(this);

    this.calendar.unregisterInteractiveComponent(this);
  };

  TimelineView.prototype.renderSkeletonHtml = function () {
    var theme = this.theme;
    return "<table class=\"" + theme.getClass('tableGrid') + "\"> <thead class=\"fc-head\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetHeader') + "\"></td> </tr> </thead> <tbody class=\"fc-body\"> <tr> <td class=\"fc-time-area " + theme.getClass('widgetContent') + "\"></td> </tr> </tbody> </table>";
  };

  TimelineView.prototype.render = function (props) {
    _super.prototype.render.call(this, props); // flags for updateSize, addScroll


    this.timeAxis.receiveProps({
      dateProfile: props.dateProfile
    });
    this.lane.receiveProps(__assign({}, props, {
      nextDayThreshold: this.nextDayThreshold
    }));
  };

  TimelineView.prototype.updateSize = function (isResize, totalHeight, isAuto) {
    this.timeAxis.updateSize(isResize, totalHeight, isAuto);
    this.lane.updateSize(isResize);
  }; // Now Indicator
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.getNowIndicatorUnit = function (dateProfile) {
    return this.timeAxis.getNowIndicatorUnit(dateProfile);
  };

  TimelineView.prototype.renderNowIndicator = function (date) {
    this.timeAxis.renderNowIndicator(date);
  };

  TimelineView.prototype.unrenderNowIndicator = function () {
    this.timeAxis.unrenderNowIndicator();
  }; // Scroll System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.computeDateScroll = function (duration) {
    return this.timeAxis.computeDateScroll(duration);
  };

  TimelineView.prototype.applyScroll = function (scroll, isResize) {
    _super.prototype.applyScroll.call(this, scroll, isResize); // will call applyDateScroll
    // avoid updating stickyscroll too often
    // TODO: repeat code as ResourceTimelineView::updateSize


    var calendar = this.calendar;

    if (isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
      this.timeAxis.updateStickyScrollers();
    }
  };

  TimelineView.prototype.applyDateScroll = function (scroll) {
    this.timeAxis.applyDateScroll(scroll);
  };

  TimelineView.prototype.queryScroll = function () {
    var enhancedScroll = this.timeAxis.layout.bodyScroller.enhancedScroll;
    return {
      top: enhancedScroll.getScrollTop(),
      left: enhancedScroll.getScrollLeft()
    };
  }; // Hit System
  // ------------------------------------------------------------------------------------------


  TimelineView.prototype.buildPositionCaches = function () {
    this.timeAxis.slats.updateSize();
  };

  TimelineView.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
    var slatHit = this.timeAxis.slats.positionToHit(positionLeft);

    if (slatHit) {
      return {
        component: this,
        dateSpan: slatHit.dateSpan,
        rect: {
          left: slatHit.left,
          right: slatHit.right,
          top: 0,
          bottom: elHeight
        },
        dayEl: slatHit.dayEl,
        layer: 0
      };
    }
  };

  return TimelineView;
}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
  defaultView: 'timelineDay',
  views: {
    timeline: {
      class: TimelineView,
      eventResizableFromStart: true // how is this consumed for TimelineView tho?

    },
    timelineDay: {
      type: 'timeline',
      duration: {
        days: 1
      }
    },
    timelineWeek: {
      type: 'timeline',
      duration: {
        weeks: 1
      }
    },
    timelineMonth: {
      type: 'timeline',
      duration: {
        months: 1
      }
    },
    timelineYear: {
      type: 'timeline',
      duration: {
        years: 1
      }
    }
  }
});
/* harmony default export */ __webpack_exports__["default"] = (main);


/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGV2ZWxvcG1lbnQvYWRtaW4vanMvY29tcG9uZW50cy9Sb29tLmpzIiwid2VicGFjazovLy8uL2RldmVsb3BtZW50L2FkbWluL2pzL2NvbXBvbmVudHMvdGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9kZXZlbG9wbWVudC9hZG1pbi9qcy9zY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvY29yZS9tYWluLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbi9tYWluLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9yZXNvdXJjZS1jb21tb24vbWFpbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvcmVzb3VyY2UtdGltZWxpbmUvbWFpbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmdWxsY2FsZW5kYXIvdGltZWxpbmUvbWFpbi5lc20uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwialF1ZXJ5XCIiXSwibmFtZXMiOlsiUm9vbSIsImNhbmNlbEJ0biIsIiQiLCJyb29tRm9ybSIsInJvb21CZ01vZGFsIiwiY2xpY2siLCJldiIsInByZXZlbnREZWZhdWx0IiwidHJpZ2dlciIsImNzcyIsImxvY2F0aW9uIiwicmVsb2FkIiwiY29uc29sZSIsImxvZyIsIndwIiwiaTE4biIsIl9fIiwiX3giLCJfbiIsIl9ueCIsImpRdWVyeSIsImRvY3VtZW50IiwicmVhZHkiLCJST09NRk9STSIsIlJPT01JRCIsIlJPT01OVU1CRVIiLCJGTE9PUk5VTUJFUiIsIlJPT01BRFVMVFMiLCJST09NS0lEUyIsIlJPT01QUklDRSIsIlJPT01ERVNDIiwiUk9PTUFDVElWRSIsIlJPT01TVUJNSVRCVE4iLCJST09NU1VCTUlUTU9ESUZZIiwiUk9PTURFTEVURUJUTiIsIlJPT01DQU5DRUxCVE4iLCJSRVNDQU5DRUxCVE4iLCJSRVNCR01PREFMIiwiUkVTUk9PTUlEIiwiUkVTQVJSSVZBTCIsIlJFU0RFUEFSVFVSRSIsIlJFU1BFUlNPTlMiLCJSRVNFTUFJTCIsIlJFU0ZJUlNUTkFNRSIsIlJFU0xBU1ROQU1FIiwiUkVTTkFUSU9OQUxJVFkiLCJSRVNHRU5ERVIiLCJSRVNCSVJUSERBWSIsIlJFU1NUUkVFVCIsIlJFU1pJUCIsIlJFU0NJVFkiLCJSRVNDT1VOVFJZIiwiUkVTU1VCTUlUIiwiY2FuY2VsIiwiY29tZXNmcm9tIiwiZW1haWxJc1ZhbGlkIiwiZW1haWwiLCJ0ZXN0IiwiY2hlY2tSZXNlcnZhdGlvbkZvcm1JbnB1dHMiLCJmb3Jtb3V0IiwiYXJyaXZhbCIsInZhbCIsImRlcGFydHVyZSIsInBlcnNvbnMiLCJmaXJzdE5hbWUiLCJ0cmltIiwibGFzdE5hbWUiLCJuYXRpb25hbGl0eSIsImdlbmRlciIsImJpcnRoZGF5Iiwic3RyZWV0IiwiemlwIiwiY2l0eSIsImNvdW50cnkiLCJzZXRFcnJvckZvciIsInNldFN1Y2Nlc3NGb3IiLCJib29rZWRfZnJvbSIsImJvb2tlZF90byIsImlzTmFOIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImNoZWNrUm9vbUZvcm1JbnB1dHMiLCJyb29tbnVtYmVyVmFsdWUiLCJmbG9vcm51bWJlclZhbHVlIiwicm9vbUFkdWx0c1ZhbHVlIiwicm9vbUtpZHNWYWx1ZSIsInJvb21wcmljZVZhbHVlIiwicmVwbGFjZSIsInJvb21EZXNjcmlwdGlvbiIsInRvU3RyaW5nIiwibnVtYmVyIiwiZmxvb3IiLCJhZHVsdHMiLCJwYXJzZUludCIsImtpZHMiLCJwcmljZSIsInBhcnNlRmxvYXQiLCJkZXNjcmlwdGlvbiIsImlzIiwiYWN0aXZlIiwiaW5wdXQiLCJtZXNzYWdlIiwiZm9ybUNvbnRyb2wiLCJwYXJlbnQiLCJzbWFsbCIsImZpbmQiLCJhZGRDbGFzcyIsInRleHQiLCJzZXRMb2NhbGUiLCJjYWxlbmRhckVsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjYWxlbmRhciIsIkNhbGVuZGFyIiwic2NoZWR1bGVyTGljZW5zZUtleSIsInBsdWdpbnMiLCJjYWxlbmRhckludGVyYWN0aW9uIiwicmVzb3VyY2VUaW1lbGluZVBsdWdpbiIsImFzcGVjdFJhdGlvIiwicmVzb3VyY2VBcmVhV2lkdGgiLCJzbG90RHVyYXRpb24iLCJzY3JvbGxUaW1lIiwibG9jYWxlIiwiaGVhZGVyIiwibGVmdCIsImNlbnRlciIsInJpZ2h0IiwiY3VzdG9tQnV0dG9ucyIsImFkZFJvb20iLCJhZGRSZXNlcnZhdGlvbiIsImRlZmF1bHRWaWV3Iiwic2VsZWN0YWJsZSIsInNlbGVjdEhlbHBlciIsImVkaXRhYmxlIiwicmVzb3VyY2VDb2x1bW5zIiwibGFiZWxUZXh0IiwiZmllbGQiLCJ3aWR0aCIsInJlc291cmNlT3JkZXIiLCJyZXNvdXJjZXMiLCJ1cmwiLCJqb2VlZVJlc3QiLCJyZXN0VVJMIiwibWV0aG9kIiwicmVzb3VyY2VSZW5kZXIiLCJyZW5kZXJJbmZvIiwiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwiYWpheCIsInR5cGUiLCJkYXRhVHlwZSIsImNvbnRlbnRUeXBlIiwicmVzb3VyY2UiLCJpZCIsInN1Y2Nlc3MiLCJkYXRhIiwicHJvcCIsImVycm9yIiwiYWxlcnQiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0UmVxdWVzdEhlYWRlciIsInJlc3ROb25jZSIsInRpbWVab25lIiwiZXZlbnRzIiwicmVzb3VyY2VJZCIsInRpdGxlIiwic3RhcnQiLCJlbmQiLCJjb2xvciIsImV2ZW50Q2xpY2siLCJpbmZvIiwiZXZlbnQiLCJzZWxlY3QiLCJhcmciLCJ0b0lTT1N0cmluZyIsInN1YnN0ciIsInN0YXJ0U3RyIiwiZW5kU3RyIiwiZGF0ZUNsaWNrIiwiZGF0ZSIsInJlbmRlciIsImNoZWNrZWQiLCJzZXRUaW1lb3V0IiwiZXJyIiwicmVzcG9uc2VKU09OIiwic3VibWl0RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlybSIsImkiLCJhcHBlbmQiLCJvbiIsImJ1dHRvbl9pZCIsImF0dHIiLCJyZW1vdmUiLCJlbGVtZW50UHJvcEhhc2giLCJjbGFzc05hbWUiLCJjb2xTcGFuIiwicm93U3BhbiIsImNvbnRhaW5lclRhZ0hhc2giLCJjcmVhdGVFbGVtZW50IiwidGFnTmFtZSIsImF0dHJzIiwiY29udGVudCIsImF0dHJOYW1lIiwiYXBwbHlTdHlsZSIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImFwcGVuZFRvRWxlbWVudCIsImh0bWxUb0VsZW1lbnQiLCJodG1sIiwiY29udGFpbmVyIiwiY29tcHV0ZUNvbnRhaW5lclRhZyIsImZpcnN0Q2hpbGQiLCJodG1sVG9FbGVtZW50cyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiaHRtbFRvTm9kZUxpc3QiLCJjaGlsZE5vZGVzIiwibm9ybWFsaXplQ29udGVudCIsImxlbmd0aCIsImFwcGVuZENoaWxkIiwicHJlcGVuZFRvRWxlbWVudCIsIm5ld0VscyIsImFmdGVyRWwiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRBZnRlckVsZW1lbnQiLCJyZWZFbCIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImVscyIsIk5vZGUiLCJyZW1vdmVFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJtYXRjaGVzTWV0aG9kIiwiRWxlbWVudCIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNsb3Nlc3RNZXRob2QiLCJjbG9zZXN0Iiwic2VsZWN0b3IiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250YWlucyIsImVsZW1lbnRNYXRjaGVzIiwicGFyZW50RWxlbWVudCIsIm5vZGVUeXBlIiwiZWxlbWVudENsb3Nlc3QiLCJmaW5kRWxlbWVudHMiLCJjb250YWluZXJzIiwiSFRNTEVsZW1lbnQiLCJhbGxNYXRjaGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImoiLCJwdXNoIiwiZmluZENoaWxkcmVuIiwicGFyZW50cyIsImNoaWxkcmVuIiwiY2hpbGROb2RlIiwiZm9yY2VDbGFzc05hbWUiLCJib29sIiwiY2xhc3NMaXN0IiwiYWRkIiwiUElYRUxfUFJPUF9SRSIsInByb3BzIiwicHJvcE5hbWUiLCJhcHBseVN0eWxlUHJvcCIsIm5hbWUiLCJzdHlsZSIsInBvaW50SW5zaWRlUmVjdCIsInBvaW50IiwicmVjdCIsInRvcCIsImJvdHRvbSIsImludGVyc2VjdFJlY3RzIiwicmVjdDEiLCJyZWN0MiIsInJlcyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJ0cmFuc2xhdGVSZWN0IiwiZGVsdGFYIiwiZGVsdGFZIiwiY29uc3RyYWluUG9pbnQiLCJnZXRSZWN0Q2VudGVyIiwiZGlmZlBvaW50cyIsInBvaW50MSIsInBvaW50MiIsImlzUnRsU2Nyb2xsYmFyT25MZWZ0IiwiZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQiLCJjb21wdXRlSXNSdGxTY3JvbGxiYXJPbkxlZnQiLCJvdXRlckVsIiwicG9zaXRpb24iLCJib3JkZXIiLCJwYWRkaW5nIiwib3ZlcmZsb3ciLCJkaXJlY3Rpb24iLCJib2R5IiwiaW5uZXJFbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNhbml0aXplU2Nyb2xsYmFyV2lkdGgiLCJyb3VuZCIsImNvbXB1dGVFZGdlcyIsImdldFBhZGRpbmciLCJjb21wdXRlZFN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImJvcmRlckxlZnQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbSIsImJvcmRlckJvdHRvbVdpZHRoIiwic2Nyb2xsYmFyTGVmdFJpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInNjcm9sbGJhckJvdHRvbSIsIm9mZnNldEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbGJhckxlZnQiLCJzY3JvbGxiYXJSaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJjb21wdXRlSW5uZXJSZWN0IiwiZ29XaXRoaW5QYWRkaW5nIiwib3V0ZXJSZWN0IiwiY29tcHV0ZVJlY3QiLCJlZGdlcyIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJjb21wdXRlVmlld3BvcnRSZWN0IiwiY29tcHV0ZUhlaWdodEFuZE1hcmdpbnMiLCJoZWlnaHQiLCJjb21wdXRlVk1hcmdpbnMiLCJjb21wdXRlZCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImdldENsaXBwaW5nUGFyZW50cyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImNvbXB1dGVDbGlwcGluZ1JlY3QiLCJtYXAiLCJjb25jYXQiLCJyZWR1Y2UiLCJyZWN0MCIsImxpc3RlbkJ5U2VsZWN0b3IiLCJldmVudFR5cGUiLCJoYW5kbGVyIiwicmVhbEhhbmRsZXIiLCJtYXRjaGVkQ2hpbGQiLCJ0YXJnZXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJjdXJyZW50TWF0Y2hlZENoaWxkIiwicmVhbE9uTW91c2VMZWF2ZV8xIiwidHJhbnNpdGlvbkV2ZW50TmFtZXMiLCJ3aGVuVHJhbnNpdGlvbkRvbmUiLCJjYWxsYmFjayIsInJlYWxDYWxsYmFjayIsImZvckVhY2giLCJldmVudE5hbWUiLCJEQVlfSURTIiwiYWRkV2Vla3MiLCJtIiwibiIsImEiLCJkYXRlVG9VdGNBcnJheSIsImFycmF5VG9VdGNEYXRlIiwiYWRkRGF5cyIsImFkZE1zIiwiZGlmZldlZWtzIiwibTAiLCJtMSIsImRpZmZEYXlzIiwidmFsdWVPZiIsImRpZmZIb3VycyIsImRpZmZNaW51dGVzIiwiZGlmZlNlY29uZHMiLCJkaWZmRGF5QW5kVGltZSIsIm0wZGF5Iiwic3RhcnRPZkRheSIsIm0xZGF5IiwieWVhcnMiLCJtb250aHMiLCJkYXlzIiwibWlsbGlzZWNvbmRzIiwiZGlmZldob2xlV2Vla3MiLCJkIiwiZGlmZldob2xlRGF5cyIsInRpbWVBc01zIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJzdGFydE9mSG91ciIsImdldFVUQ0hvdXJzIiwic3RhcnRPZk1pbnV0ZSIsImdldFVUQ01pbnV0ZXMiLCJzdGFydE9mU2Vjb25kIiwiZ2V0VVRDU2Vjb25kcyIsIndlZWtPZlllYXIiLCJtYXJrZXIiLCJkb3ciLCJkb3kiLCJ5IiwidyIsIndlZWtPZkdpdmVuWWVhciIsIm5leHRXIiwieWVhciIsImZpcnN0V2Vla1N0YXJ0IiwiZmlyc3RXZWVrT2Zmc2V0IiwiZGF5U3RhcnQiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRhdGVUb0xvY2FsQXJyYXkiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJhcnJheVRvTG9jYWxEYXRlIiwiRGF0ZSIsImdldFVUQ01pbGxpc2Vjb25kcyIsIlVUQyIsImFwcGx5IiwiaXNWYWxpZERhdGUiLCJJTlRFUk5BTF9VTklUUyIsIlBBUlNFX1JFIiwiY3JlYXRlRHVyYXRpb24iLCJ1bml0IiwiX2EiLCJwYXJzZVN0cmluZyIsIm5vcm1hbGl6ZU9iamVjdCIsInMiLCJleGVjIiwic2lnbiIsIm9iaiIsIm1vbnRoIiwiZGF5IiwiZ2V0V2Vla3NGcm9tSW5wdXQiLCJob3VycyIsImhvdXIiLCJtaW51dGVzIiwibWludXRlIiwic2Vjb25kcyIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwibXMiLCJ3ZWVrcyIsIndlZWsiLCJkdXJhdGlvbnNFcXVhbCIsImQwIiwiZDEiLCJpc1NpbmdsZURheSIsImR1ciIsImFkZER1cmF0aW9ucyIsInN1YnRyYWN0RHVyYXRpb25zIiwibXVsdGlwbHlEdXJhdGlvbiIsImFzUm91Z2hZZWFycyIsImFzUm91Z2hEYXlzIiwiYXNSb3VnaE1vbnRocyIsImFzUm91Z2hNcyIsImFzUm91Z2hNaW51dGVzIiwiYXNSb3VnaFNlY29uZHMiLCJ3aG9sZURpdmlkZUR1cmF0aW9ucyIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwibG9jYWxSZXMiLCJpc0ludCIsImdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvciIsImRvbnRSZXR1cm5XZWVrcyIsInZhbHVlIiwiY29tcGVuc2F0ZVNjcm9sbCIsInJvd0VsIiwic2Nyb2xsYmFyV2lkdGhzIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwidW5jb21wZW5zYXRlU2Nyb2xsIiwiZGlzYWJsZUN1cnNvciIsImVuYWJsZUN1cnNvciIsImRpc3RyaWJ1dGVIZWlnaHQiLCJhdmFpbGFibGVIZWlnaHQiLCJzaG91bGRSZWRpc3RyaWJ1dGUiLCJtaW5PZmZzZXQxIiwibWluT2Zmc2V0MiIsImZsZXhFbHMiLCJmbGV4T2Zmc2V0cyIsImZsZXhIZWlnaHRzIiwidXNlZEhlaWdodCIsInVuZGlzdHJpYnV0ZUhlaWdodCIsIm1pbk9mZnNldCIsIm5hdHVyYWxIZWlnaHQiLCJuYXR1cmFsT2Zmc2V0IiwibmV3SGVpZ2h0IiwibWF0Y2hDZWxsV2lkdGhzIiwibWF4SW5uZXJXaWR0aCIsImlubmVyV2lkdGhfMSIsInN1YnRyYWN0SW5uZXJFbEhlaWdodCIsInJlZmxvd1N0eWxlUHJvcHMiLCJkaWZmIiwicmVzZXRTdHlsZVByb3BzIiwicHJldmVudFNlbGVjdGlvbiIsImFsbG93U2VsZWN0aW9uIiwicHJldmVudENvbnRleHRNZW51IiwiYWxsb3dDb250ZXh0TWVudSIsInBhcnNlRmllbGRTcGVjcyIsInNwZWNzIiwidG9rZW5zIiwidG9rZW4iLCJzcGxpdCIsImlzQXJyYXkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJvcmRlciIsImZ1bmMiLCJjb21wYXJlQnlGaWVsZFNwZWNzIiwib2JqMCIsIm9iajEiLCJmaWVsZFNwZWNzIiwiY21wIiwiY29tcGFyZUJ5RmllbGRTcGVjIiwiZmllbGRTcGVjIiwiZmxleGlibGVDb21wYXJlIiwiYiIsIlN0cmluZyIsImxvY2FsZUNvbXBhcmUiLCJjYXBpdGFsaXNlRmlyc3RMZXR0ZXIiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsInBhZFN0YXJ0IiwibGVuIiwiY29tcGFyZU51bWJlcnMiLCJhcHBseUFsbCIsImZ1bmN0aW9ucyIsInRoaXNPYmoiLCJhcmdzIiwicmV0IiwiZmlyc3REZWZpbmVkIiwiX2kiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJkZWJvdW5jZSIsIndhaXQiLCJ0aW1lb3V0IiwiY29udGV4dCIsInRpbWVzdGFtcCIsInJlc3VsdCIsImxhdGVyIiwibGFzdCIsInJlZmluZVByb3BzIiwicmF3UHJvcHMiLCJwcm9jZXNzb3JzIiwiZGVmYXVsdHMiLCJsZWZ0b3ZlclByb3BzIiwicmVmaW5lZCIsImtleSIsInByb2Nlc3NvciIsIkZ1bmN0aW9uIiwiTnVtYmVyIiwiQm9vbGVhbiIsImNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UiLCJ0aW1lZFJhbmdlIiwiZGF5Q250IiwiY29tcHV0ZVZpc2libGVEYXlSYW5nZSIsIm5leHREYXlUaHJlc2hvbGQiLCJzdGFydERheSIsImVuZERheSIsImVuZFRpbWVNUyIsImlzTXVsdGlEYXlSYW5nZSIsInJhbmdlIiwidmlzaWJsZVJhbmdlIiwiZGlmZkRhdGVzIiwiZGF0ZTAiLCJkYXRlMSIsImRhdGVFbnYiLCJsYXJnZVVuaXQiLCJkaWZmV2hvbGVZZWFycyIsImRpZmZXaG9sZU1vbnRocyIsImV4dGVuZFN0YXRpY3MiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZXh0ZW5kcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwicGFyc2VSZWN1cnJpbmciLCJldmVudElucHV0IiwiYWxsRGF5RGVmYXVsdCIsInJlY3VycmluZ1R5cGVzIiwibGVmdG92ZXJzIiwibG9jYWxMZWZ0b3ZlcnMiLCJwYXJzZWQiLCJwYXJzZSIsImFsbERheSIsImFsbERheUd1ZXNzIiwiZHVyYXRpb24iLCJ0eXBlRGF0YSIsInR5cGVJZCIsImV4cGFuZFJlY3VycmluZ1JhbmdlcyIsImV2ZW50RGVmIiwiZnJhbWluZ1JhbmdlIiwidHlwZURlZiIsInJlY3VycmluZ0RlZiIsIm1hcmtlcnMiLCJleHBhbmQiLCJzdWJ0cmFjdCIsIm1lcmdlUHJvcHMiLCJwcm9wT2JqcyIsImNvbXBsZXhQcm9wcyIsImRlc3QiLCJjb21wbGV4T2JqcyIsInVuc2hpZnQiLCJmaWx0ZXJIYXNoIiwiaGFzaCIsImZpbHRlcmVkIiwibWFwSGFzaCIsIm5ld0hhc2giLCJhcnJheVRvSGFzaCIsImFfMSIsIml0ZW0iLCJoYXNoVmFsdWVzVG9BcnJheSIsImlzUHJvcHNFcXVhbCIsInBhcnNlRXZlbnRzIiwicmF3RXZlbnRzIiwic291cmNlSWQiLCJhbGxvd09wZW5SYW5nZSIsImV2ZW50U3RvcmUiLCJjcmVhdGVFbXB0eUV2ZW50U3RvcmUiLCJyYXdFdmVudHNfMSIsInJhd0V2ZW50IiwidHVwbGUiLCJwYXJzZUV2ZW50IiwiZXZlbnRUdXBsZVRvU3RvcmUiLCJkZWZzIiwiZGVmIiwiZGVmSWQiLCJpbnN0YW5jZSIsImluc3RhbmNlcyIsImluc3RhbmNlSWQiLCJleHBhbmRSZWN1cnJpbmciLCJkZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiIsImRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb24iLCJzdGFydHMiLCJwbHVnaW5TeXN0ZW0iLCJob29rcyIsInN0YXJ0c18xIiwiY3JlYXRlRXZlbnRJbnN0YW5jZSIsImdldFJlbGV2YW50RXZlbnRzIiwiZGVmXzEiLCJuZXdTdG9yZSIsImZpbHRlckV2ZW50U3RvcmVEZWZzIiwibG9va0RlZiIsImlzRXZlbnREZWZzR3JvdXBlZCIsImRlZjAiLCJkZWYxIiwiZ3JvdXBJZCIsInRyYW5zZm9ybVJhd0V2ZW50cyIsImV2ZW50U291cmNlIiwiY2FsRWFjaFRyYW5zZm9ybSIsIm9wdCIsInNvdXJjZUVhY2hUcmFuc2Zvcm0iLCJldmVudERhdGFUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1FYWNoUmF3RXZlbnQiLCJyZWZpbmVkRXZlbnRzIiwicmF3RXZlbnRzXzIiLCJyZWZpbmVkRXZlbnQiLCJtZXJnZUV2ZW50U3RvcmVzIiwic3RvcmUwIiwic3RvcmUxIiwiZmlsdGVyRnVuYyIsInBhcnNlUmFuZ2UiLCJjcmVhdGVNYXJrZXIiLCJpbnZlcnRSYW5nZXMiLCJyYW5nZXMiLCJjb25zdHJhaW50UmFuZ2UiLCJpbnZlcnRlZFJhbmdlcyIsImRhdGVSYW5nZSIsInNvcnQiLCJjb21wYXJlUmFuZ2VzIiwicmFuZ2UwIiwicmFuZ2UxIiwiaW50ZXJzZWN0UmFuZ2VzIiwibmV3UmFuZ2UiLCJyYW5nZXNFcXVhbCIsInJhbmdlc0ludGVyc2VjdCIsInJhbmdlQ29udGFpbnNSYW5nZSIsIm91dGVyUmFuZ2UiLCJpbm5lclJhbmdlIiwicmFuZ2VDb250YWluc01hcmtlciIsImNvbnN0cmFpbk1hcmtlclRvUmFuZ2UiLCJyZW1vdmVFeGFjdCIsImFycmF5IiwiZXhhY3RWYWwiLCJyZW1vdmVDbnQiLCJzcGxpY2UiLCJpc0FycmF5c0VxdWFsIiwiYTAiLCJhMSIsIm1lbW9pemUiLCJ3b3JrZXJGdW5jIiwibWVtb2l6ZU91dHB1dCIsImVxdWFsaXR5RnVuYyIsImNhY2hlZFJlcyIsIm5ld1JlcyIsIkVYVEVOREVEX1NFVFRJTkdTX0FORF9TRVZFUklUSUVTIiwic2VwYXJhdG9yIiwib21pdFplcm9NaW51dGUiLCJtZXJpZGllbSIsIm9taXRDb21tYXMiLCJTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFUyIsInRpbWVab25lTmFtZSIsImVyYSIsIndlZWtkYXkiLCJNRVJJRElFTV9SRSIsIkNPTU1BX1JFIiwiTVVMVElfU1BBQ0VfUkUiLCJMVFJfUkUiLCJVVENfUkUiLCJOYXRpdmVGb3JtYXR0ZXIiLCJmb3JtYXRTZXR0aW5ncyIsInN0YW5kYXJkRGF0ZVByb3BzIiwiZXh0ZW5kZWRTZXR0aW5ncyIsInNldmVyaXR5IiwibmFtZV8xIiwiYnVpbGRGb3JtYXR0aW5nRnVuYyIsImZvcm1hdCIsImZvcm1hdFJhbmdlIiwiZGlmZlNldmVyaXR5IiwiY29tcHV0ZU1hcmtlckRpZmZTZXZlcml0eSIsImNhbGVuZGFyU3lzdGVtIiwiYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsIiwiZnVsbDAiLCJmdWxsMSIsInBhcnRpYWxEYXRlUHJvcHMiLCJjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zIiwicGFydGlhbEZvcm1hdHRpbmdGdW5jIiwicGFydGlhbDAiLCJwYXJ0aWFsMSIsImluc2VydGlvbiIsImZpbmRDb21tb25JbnNlcnRpb24iLCJiZWZvcmUiLCJhZnRlciIsImdldExhcmdlc3RVbml0Iiwic3RhbmRhcmREYXRlUHJvcENudCIsImtleXMiLCJmb3JtYXRUaW1lWm9uZU9mZnNldCIsInRpbWVab25lT2Zmc2V0IiwiZm9ybWF0V2Vla051bWJlciIsImNvbXB1dGVXZWVrTnVtYmVyIiwid2Vla0xhYmVsIiwiYnVpbGROYXRpdmVGb3JtYXR0aW5nRnVuYyIsInNhbml0aXplU2V0dGluZ3MiLCJub3JtYWxGb3JtYXQiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJjb2RlcyIsInplcm9Gb3JtYXQiLCJ6ZXJvUHJvcHMiLCJwb3N0UHJvY2VzcyIsImluamVjdFR6b1N0ciIsInRvTG9jYWxlTG93ZXJDYXNlIiwidHpvU3RyIiwicmVwbGFjZWQiLCJudW0iLCJkaXNwbGF5IiwicGFydHMiLCJzaW1wbGVOdW1iZXJGb3JtYXQiLCJvcHRpb25zIiwiaXNSdGwiLCJyZXZlcnNlIiwiam9pbiIsImNhIiwiZ2V0TWFya2VyWWVhciIsImdldE1hcmtlck1vbnRoIiwiZ2V0TWFya2VyRGF5IiwiYmlnZ2VzdFVuaXQiLCJwYXJ0aWFsT3B0aW9ucyIsIm5hbWVfMiIsImkwIiwiZm91bmQwIiwiaW5kZXhPZiIsImJlZm9yZTAiLCJhZnRlcjAiLCJpMSIsImZvdW5kMSIsImJlZm9yZTEiLCJhZnRlcjEiLCJDbWRGb3JtYXR0ZXIiLCJjbWRTdHIiLCJjbWRGb3JtYXR0ZXIiLCJjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyIsIkZ1bmNGb3JtYXR0ZXIiLCJjcmVhdGVGb3JtYXR0ZXIiLCJkZWZhdWx0U2VwYXJhdG9yIiwiYnVpbGRJc29TdHJpbmciLCJzdHJpcFplcm9UaW1lIiwiZm9ybWF0SXNvVGltZVN0cmluZyIsImRvSXNvIiwiYWJzIiwibWlucyIsInN0YXJ0SW5mbyIsImV4cGFuZFpvbmVkTWFya2VyIiwiZW5kSW5mbyIsImxvY2FsZUNvZGVzIiwiZGF0ZUluZm8iLCJtYXJrZXJUb0FycmF5IiwiRXZlbnRTb3VyY2VBcGkiLCJpbnRlcm5hbEV2ZW50U291cmNlIiwiZGlzcGF0Y2giLCJyZWZldGNoIiwic291cmNlSWRzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJwdWJsaWNJZCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJtZXRhIiwiRXZlbnRBcGkiLCJfY2FsZW5kYXIiLCJfZGVmIiwiX2luc3RhbmNlIiwic2V0UHJvcCIsIl9iIiwiREFURV9QUk9QUyIsIk5PTl9EQVRFX1BST1BTIiwibXV0YXRlIiwic3RhbmRhcmRQcm9wcyIsIlVOU0NPUEVEX0VWRU5UX1VJX1BST1BTIiwidWkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsInN0YXJ0RWRpdGFibGUiLCJkdXJhdGlvbkVkaXRhYmxlIiwic2V0RXh0ZW5kZWRQcm9wIiwiZXh0ZW5kZWRQcm9wcyIsInNldFN0YXJ0Iiwic3RhcnRJbnB1dCIsImluc3RhbmNlUmFuZ2UiLCJzdGFydERlbHRhIiwiZ3JhbnVsYXJpdHkiLCJtYWludGFpbkR1cmF0aW9uIiwiZGF0ZXNEZWx0YSIsInNldEVuZCIsImVuZElucHV0IiwiZW5kRGVsdGEiLCJoYXNFbmQiLCJzZXREYXRlcyIsIm1vdmVTdGFydCIsImRlbHRhSW5wdXQiLCJkZWx0YSIsIm1vdmVFbmQiLCJtb3ZlRGF0ZXMiLCJzZXRBbGxEYXkiLCJmb3JtYXRJbnB1dCIsImZvcm1hdHRlciIsImZvcmNlZFN0YXJ0VHpvIiwiZm9yY2VkRW5kVHpvIiwiZm9yY2VkVHpvIiwibXV0YXRpb24iLCJmcm9tQXBpIiwic3RhdGUiLCJldmVudFNvdXJjZXMiLCJ0b0RhdGUiLCJyZW5kZXJpbmciLCJjb25zdHJhaW50cyIsIm92ZXJsYXAiLCJhbGxvd3MiLCJ0ZXh0Q29sb3IiLCJjbGFzc05hbWVzIiwic2xpY2VFdmVudFN0b3JlIiwiZXZlbnRVaUJhc2VzIiwiaW52ZXJzZUJnQnlHcm91cElkIiwiaW52ZXJzZUJnQnlEZWZJZCIsImRlZkJ5R3JvdXBJZCIsImJnUmFuZ2VzIiwiZmdSYW5nZXMiLCJldmVudFVpcyIsImNvbXBpbGVFdmVudFVpcyIsIm9yaWdSYW5nZSIsIm5vcm1hbFJhbmdlIiwic2xpY2VkUmFuZ2UiLCJpc1N0YXJ0IiwiaXNFbmQiLCJpbnZlcnRlZFJhbmdlc18xIiwiaW52ZXJ0ZWRSYW5nZSIsImludmVydGVkUmFuZ2VzXzIiLCJiZyIsImZnIiwiaGFzQmdSZW5kZXJpbmciLCJmaWx0ZXJTZWdzVmlhRWxzIiwidmlldyIsInNlZ3MiLCJpc01pcnJvciIsImhhc1B1YmxpY0hhbmRsZXJzIiwiZmlsdGVyIiwic2VnIiwiY3VzdG9tIiwicHVibGljbHlUcmlnZ2VyIiwiZXZlbnRSYW5nZSIsInNlZ3NfMSIsInNldEVsU2VnIiwiZmNTZWciLCJnZXRFbFNlZyIsImV2ZW50RGVmcyIsImNvbXBpbGVFdmVudFVpIiwidWlzIiwiY29tYmluZUV2ZW50VWlzIiwiYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZSIsImV2ZW50Q29uZmlnQmFzZSIsImV2ZW50Q29uZmlncyIsImFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmIiwiZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzIiwiYXBwbHlNdXRhdGlvblRvRXZlbnRJbnN0YW5jZSIsImV2ZW50Q29uZmlnIiwiYXBwbGllcnMiLCJjb3B5IiwiYXBwbGllcnNfMSIsImFwcGxpZXIiLCJldmVudEluc3RhbmNlIiwiZm9yY2VBbGxEYXkiLCJjbGVhckVuZCIsImdldERlZmF1bHRFdmVudEVuZCIsInJlZHVjZUV2ZW50U3RvcmUiLCJhY3Rpb24iLCJkYXRlUHJvZmlsZSIsInJlY2VpdmVSYXdFdmVudHMiLCJmZXRjaElkIiwiZmV0Y2hSYW5nZSIsImFkZEV2ZW50IiwiYWN0aXZlUmFuZ2UiLCJyZXpvbmVEYXRlcyIsIm9sZERhdGVFbnYiLCJhcHBseU11dGF0aW9uVG9SZWxhdGVkIiwiZXhjbHVkZUluc3RhbmNlcyIsImV4Y2x1ZGVFdmVudHNCeVNvdXJjZUlkIiwibGF0ZXN0RmV0Y2hJZCIsInN1YnNldCIsImV4cGFuZFJhbmdlIiwibmV3RGF0ZUVudiIsImNhbkNvbXB1dGVPZmZzZXQiLCJyZWxldmFudCIsInJlbW92YWxzIiwiaXNJbnRlcmFjdGlvblZhbGlkIiwiaW50ZXJhY3Rpb24iLCJpc05ld1Byb3BzVmFsaWQiLCJldmVudERyYWciLCJpc0RhdGVTZWxlY3Rpb25WYWxpZCIsImRhdGVTZWxlY3Rpb24iLCJuZXdQcm9wcyIsImJ1c2luZXNzSG91cnMiLCJldmVudFNlbGVjdGlvbiIsImV2ZW50UmVzaXplIiwiaXNQcm9wc1ZhbGlkIiwiZGF0ZVNwYW5NZXRhIiwiZmlsdGVyQ29uZmlnIiwiaXNJbnRlcmFjdGlvblByb3BzVmFsaWQiLCJpc0RhdGVTZWxlY3Rpb25Qcm9wc1ZhbGlkIiwic3ViamVjdEV2ZW50U3RvcmUiLCJtdXRhdGVkRXZlbnRzIiwic3ViamVjdERlZnMiLCJzdWJqZWN0SW5zdGFuY2VzIiwic3ViamVjdENvbmZpZ3MiLCJpc0V2ZW50Iiwic2VsZWN0aW9uQ29uZmlnIiwib3RoZXJFdmVudFN0b3JlIiwiYWZmZWN0ZWRFdmVudHMiLCJvdGhlckRlZnMiLCJvdGhlckluc3RhbmNlcyIsIm90aGVyQ29uZmlncyIsInN1YmplY3RJbnN0YW5jZUlkIiwic3ViamVjdEluc3RhbmNlIiwic3ViamVjdFJhbmdlIiwic3ViamVjdENvbmZpZyIsInN1YmplY3REZWYiLCJhbGxDb25zdHJhaW50c1Bhc3MiLCJvdmVybGFwRnVuYyIsIm90aGVySW5zdGFuY2VJZCIsIm90aGVySW5zdGFuY2UiLCJvdGhlck92ZXJsYXAiLCJjYWxlbmRhckV2ZW50U3RvcmUiLCJzdWJqZWN0QWxsb3ciLCJzdWJqZWN0RGF0ZVNwYW4iLCJvcmlnRGVmIiwib3JpZ0luc3RhbmNlIiwiZXZlbnRBcGkiLCJidWlsZERhdGVTcGFuQXBpIiwicmVsZXZhbnRFdmVudFN0b3JlIiwicmVsZXZhbnREZWZzIiwicmVsZXZhbnRJbnN0YW5jZXMiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25SYW5nZSIsInJlbGV2YW50SW5zdGFuY2VJZCIsInJlbGV2YW50SW5zdGFuY2UiLCJzZWxlY3Rpb25BbGxvdyIsImZ1bGxEYXRlU3BhbiIsImJ1c2luZXNzSG91cnNVbmV4cGFuZGVkIiwiY29uc3RyYWludHNfMSIsImNvbnN0cmFpbnQiLCJhbnlSYW5nZXNDb250YWluUmFuZ2UiLCJjb25zdHJhaW50VG9SYW5nZXMiLCJldmVudFN0b3JlVG9SYW5nZXMiLCJvdXRlclJhbmdlcyIsIm91dGVyUmFuZ2VzXzEiLCJub3JtYWxpemVDb25zdHJhaW50IiwiaHRtbEVzY2FwZSIsImNzc1RvU3RyIiwiY3NzUHJvcHMiLCJzdGF0ZW1lbnRzIiwiYXR0cnNUb1N0ciIsInBhcnNlQ2xhc3NOYW1lIiwicmF3IiwiYWxsb3ciLCJwcm9jZXNzVW5zY29wZWRVaVByb3BzIiwicHJvY2Vzc1Njb3BlZFVpUHJvcHMiLCJwcmVmaXgiLCJyYXdTY29wZWQiLCJyYXdVbnNjb3BlZCIsIndhc0ZvdW5kIiwic2NvcGVkS2V5IiwiRU1QVFlfRVZFTlRfVUkiLCJjb21iaW5lVHdvRXZlbnRVaXMiLCJpdGVtMCIsIml0ZW0xIiwidWlkIiwiY29tcHV0ZUlzQWxsRGF5RGVmYXVsdCIsImxlZnRvdmVyczAiLCJyZWN1cnJpbmdSZXMiLCJwYXJzZUV2ZW50RGVmIiwibGVmdG92ZXJzMSIsInNpbmdsZVJlcyIsInBhcnNlU2luZ2xlIiwicGx1Y2tOb25EYXRlUHJvcHMiLCJldmVudERlZlBhcnNlcnMiLCJldmVudERlZlBhcnNlciIsIm5ld0xlZnRvdmVycyIsImZyZWV6ZSIsInBsdWNrRGF0ZVByb3BzIiwic3RhcnRNZXRhIiwic3RhcnRNYXJrZXIiLCJlbmRNZXRhIiwiZW5kTWFya2VyIiwiY3JlYXRlTWFya2VyTWV0YSIsImlzVGltZVVuc3BlY2lmaWVkIiwicHJlTGVmdG92ZXJzIiwic291cmNlIiwiREVGX0RFRkFVTFRTIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImRheXNPZldlZWsiLCJwYXJzZUJ1c2luZXNzSG91cnMiLCJyZWZpbmVJbnB1dHMiLCJyYXdEZWZzIiwicmF3RGVmIiwibWVtb2l6ZVJlbmRlcmluZyIsInJlbmRlckZ1bmMiLCJ1bnJlbmRlckZ1bmMiLCJkZXBlbmRlbmNpZXMiLCJkZXBlbmRlbnRzIiwidGhpc0NvbnRleHQiLCJwcmV2QXJncyIsInVucmVuZGVyIiwiZGVwZW5kZW50c18xIiwiZGVwZW5kZW50IiwiZGVwZW5kZW5jaWVzXzEiLCJkZXBlbmRlbmN5IiwiRU1QVFlfRVZFTlRfU1RPUkUiLCJTcGxpdHRlciIsImdldEtleXNGb3JFdmVudERlZnMiLCJfZ2V0S2V5c0ZvckV2ZW50RGVmcyIsInNwbGl0RGF0ZVNlbGVjdGlvbiIsIl9zcGxpdERhdGVTcGFuIiwic3BsaXRFdmVudFN0b3JlIiwiX3NwbGl0RXZlbnRTdG9yZSIsInNwbGl0SW5kaXZpZHVhbFVpIiwiX3NwbGl0SW5kaXZpZHVhbFVpIiwic3BsaXRFdmVudERyYWciLCJfc3BsaXRJbnRlcmFjdGlvbiIsInNwbGl0RXZlbnRSZXNpemUiLCJldmVudFVpQnVpbGRlcnMiLCJzcGxpdFByb3BzIiwiX3RoaXMiLCJrZXlJbmZvcyIsImdldEtleUluZm8iLCJkZWZLZXlzIiwiZGF0ZVNlbGVjdGlvbnMiLCJpbmRpdmlkdWFsVWkiLCJldmVudFN0b3JlcyIsImV2ZW50RHJhZ3MiLCJldmVudFJlc2l6ZXMiLCJidWlsZEV2ZW50VWlGb3JLZXkiLCJrZXlJbmZvIiwiYnVpbGRFdmVudFVpIiwiZGF0ZVNwYW4iLCJkYXRlU3BhbnMiLCJnZXRLZXlzRm9yRGF0ZVNwYW4iLCJrZXlzXzEiLCJnZXRLZXlzRm9yRXZlbnREZWYiLCJzcGxpdFN0b3JlcyIsIl9jIiwic3BsaXRIYXNoZXMiLCJzcGxpdFN0YXRlcyIsImFmZmVjdGVkU3RvcmVzXzEiLCJtdXRhdGVkS2V5c0J5RGVmSWQiLCJtdXRhdGVkU3RvcmVzXzEiLCJwb3B1bGF0ZSIsIm9yaWdTZWciLCJhbGxVaSIsImV2ZW50VWlGb3JLZXkiLCJiYXNlUGFydHMiLCJzdHVmZiIsImJ1aWxkR290b0FuY2hvckh0bWwiLCJjb21wb25lbnQiLCJnb3RvT3B0aW9ucyIsImlubmVySHRtbCIsImZvcmNlT2ZmIiwiZmluYWxPcHRpb25zIiwiZm9ybWF0SXNvIiwib21pdFRpbWUiLCJnZXRBbGxEYXlIdG1sIiwiZ2V0RGF5Q2xhc3NlcyIsIm5vVGhlbWVIaWdobGlnaHQiLCJ0aGVtZSIsImNsYXNzZXMiLCJ0b2RheVN0YXJ0IiwidG9kYXlFbmQiLCJjdXJyZW50UmFuZ2UiLCJnZXROb3ciLCJnZXRDbGFzcyIsInVucHJvbWlzaWZ5IiwiZmFpbHVyZSIsImlzUmVzb2x2ZWQiLCJ3cmFwcGVkU3VjY2VzcyIsIndyYXBwZWRGYWlsdXJlIiwidGhlbiIsIk1peGluIiwibWl4SW50byIsImRlc3RDbGFzcyIsIm1peEludG9PYmoiLCJkZXN0T2JqIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm1peE92ZXIiLCJFbWl0dGVyTWl4aW4iLCJfc3VwZXIiLCJhZGRUb0hhc2giLCJfaGFuZGxlcnMiLCJvbmUiLCJfb25lSGFuZGxlcnMiLCJvZmYiLCJyZW1vdmVGcm9tSGFzaCIsInRyaWdnZXJXaXRoIiwiaGFzSGFuZGxlcnMiLCJQb3NpdGlvbkNhY2hlIiwib3JpZ2luRWwiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwiYnVpbGQiLCJvcmlnaW5DbGllbnRSZWN0IiwiYnVpbGRFbEhvcml6b250YWxzIiwiYnVpbGRFbFZlcnRpY2FscyIsIm9yaWdpbkNsaWVudExlZnQiLCJsZWZ0cyIsInJpZ2h0cyIsIm9yaWdpbkNsaWVudFRvcCIsInRvcHMiLCJib3R0b21zIiwibGVmdFRvSW5kZXgiLCJsZWZ0UG9zaXRpb24iLCJ0b3BUb0luZGV4IiwidG9wUG9zaXRpb24iLCJnZXRXaWR0aCIsImxlZnRJbmRleCIsImdldEhlaWdodCIsInRvcEluZGV4IiwiU2Nyb2xsQ29udHJvbGxlciIsImdldE1heFNjcm9sbFRvcCIsImdldFNjcm9sbEhlaWdodCIsImdldENsaWVudEhlaWdodCIsImdldE1heFNjcm9sbExlZnQiLCJnZXRTY3JvbGxXaWR0aCIsImdldENsaWVudFdpZHRoIiwiY2FuU2Nyb2xsVmVydGljYWxseSIsImNhblNjcm9sbEhvcml6b250YWxseSIsImNhblNjcm9sbFVwIiwiZ2V0U2Nyb2xsVG9wIiwiY2FuU2Nyb2xsRG93biIsImNhblNjcm9sbExlZnQiLCJnZXRTY3JvbGxMZWZ0IiwiY2FuU2Nyb2xsUmlnaHQiLCJFbGVtZW50U2Nyb2xsQ29udHJvbGxlciIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJzZXRTY3JvbGxUb3AiLCJzZXRTY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJXaW5kb3dTY3JvbGxDb250cm9sbGVyIiwic2Nyb2xsIiwiU2Nyb2xsQ29tcG9uZW50IiwiYXBwbHlPdmVyZmxvdyIsImNsZWFyIiwic2V0SGVpZ2h0IiwiZGVzdHJveSIsImxvY2tPdmVyZmxvdyIsImdldFNjcm9sbGJhcldpZHRocyIsIlRoZW1lIiwiY2FsZW5kYXJPcHRpb25zIiwicHJvY2Vzc0ljb25PdmVycmlkZSIsImljb25PdmVycmlkZU9wdGlvbiIsInNldEljb25PdmVycmlkZSIsImljb25PdmVycmlkZUhhc2giLCJpY29uQ2xhc3Nlc0NvcHkiLCJidXR0b25OYW1lIiwiaWNvbkNsYXNzZXMiLCJhcHBseUljb25PdmVycmlkZVByZWZpeCIsImljb25PdmVycmlkZVByZWZpeCIsImdldEljb25DbGFzcyIsImJhc2VJY29uQ2xhc3MiLCJnZXRDdXN0b21CdXR0b25JY29uQ2xhc3MiLCJjdXN0b21CdXR0b25Qcm9wcyIsImljb25PdmVycmlkZUN1c3RvbUJ1dHRvbk9wdGlvbiIsImd1aWQiLCJDb21wb25lbnQiLCJpc1ZpZXciLCJhZGRFcXVhbGl0eUZ1bmNzIiwibmV3RnVuY3MiLCJlcXVhbGl0eUZ1bmNzIiwicmVjZWl2ZVByb3BzIiwicmVjeWNsZVByb3BzIiwiYW55Q2hhbmdlcyIsImNvbWJvUHJvcHMiLCJvbGRQcm9wcyIsIkRhdGVDb21wb25lbnQiLCJidWlsZFBvc2l0aW9uQ2FjaGVzIiwicXVlcnlIaXQiLCJwb3NpdGlvbkxlZnQiLCJwb3NpdGlvblRvcCIsImVsV2lkdGgiLCJlbEhlaWdodCIsInZhbGlkUmFuZ2UiLCJwdWJsaWNseVRyaWdnZXJBZnRlclNpemluZyIsInRyaWdnZXJSZW5kZXJlZFNlZ3MiLCJpc01pcnJvcnMiLCJsb2FkaW5nTGV2ZWwiLCJhZnRlclNpemluZ1RyaWdnZXJzIiwiX2V2ZW50c1Bvc2l0aW9uZWQiLCJ0cmlnZ2VyV2lsbFJlbW92ZVNlZ3MiLCJzZWdzXzIiLCJzZWdzXzMiLCJpc1ZhbGlkU2VnRG93bkVsIiwiaXNQb3BvdmVyIiwiaXNJblBvcG92ZXIiLCJpc1ZhbGlkRGF0ZURvd25FbCIsInNlZ0VsIiwiZmdTZWdTZWxlY3RvciIsImJnU2VnU2VsZWN0b3IiLCJ1aWQkMSIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJyZWR1Y2VycyIsImlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzIiwiZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMiLCJkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzIiwiZGF0ZVBvaW50VHJhbnNmb3JtcyIsImRhdGVTcGFuVHJhbnNmb3JtcyIsInZpZXdzIiwidmlld1Byb3BzVHJhbnNmb3JtZXJzIiwiZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zIiwiZXZlbnRSZXNpemVKb2luVHJhbnNmb3JtcyIsInZpZXdDb250YWluZXJNb2RpZmllcnMiLCJldmVudERyb3BUcmFuc2Zvcm1lcnMiLCJjb21wb25lbnRJbnRlcmFjdGlvbnMiLCJjYWxlbmRhckludGVyYWN0aW9ucyIsInRoZW1lQ2xhc3NlcyIsImV2ZW50U291cmNlRGVmcyIsIm5hbWVkVGltZVpvbmVkSW1wbCIsImVsZW1lbnREcmFnZ2luZ0ltcGwiLCJvcHRpb25DaGFuZ2VIYW5kbGVycyIsIlBsdWdpblN5c3RlbSIsImFkZGVkSGFzaCIsInBsdWdpbiIsImRlcCIsImNvbWJpbmVIb29rcyIsImhvb2tzMCIsImhvb2tzMSIsImV2ZW50U291cmNlRGVmIiwiaWdub3JlUmFuZ2UiLCJwYXJzZU1ldGEiLCJmZXRjaCIsIkFycmF5RXZlbnRTb3VyY2VQbHVnaW4iLCJldmVudFNvdXJjZURlZiQxIiwiYmluZCIsIkZ1bmNFdmVudFNvdXJjZVBsdWdpbiIsInJlcXVlc3RKc29uIiwicGFyYW1zIiwic3VjY2Vzc0NhbGxiYWNrIiwiZmFpbHVyZUNhbGxiYWNrIiwiaW5qZWN0UXVlcnlTdHJpbmdQYXJhbXMiLCJlbmNvZGVQYXJhbXMiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbmxvYWQiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwic2VuZCIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2ZW50U291cmNlRGVmJDIiLCJleHRyYVBhcmFtcyIsInN0YXJ0UGFyYW0iLCJlbmRQYXJhbSIsInRpbWVab25lUGFyYW0iLCJyZXF1ZXN0UGFyYW1zIiwiYnVpbGRSZXF1ZXN0UGFyYW1zIiwiZXJyb3JNZXNzYWdlIiwiSnNvbkZlZWRFdmVudFNvdXJjZVBsdWdpbiIsImN1c3RvbVJlcXVlc3RQYXJhbXMiLCJyZWN1cnJpbmciLCJzdGFydFJlY3VyIiwiZW5kUmVjdXIiLCJhbnlWYWxpZCIsImNsaXBwZWRGcmFtaW5nUmFuZ2UiLCJleHBhbmRSYW5nZXMiLCJTaW1wbGVSZWN1cnJlbmNlUGx1Z2luIiwiZG93SGFzaCIsImRheU1hcmtlciIsImluc3RhbmNlU3RhcnRzIiwiaW5zdGFuY2VTdGFydCIsIkRlZmF1bHRPcHRpb25DaGFuZ2VIYW5kbGVycyIsImRlZXBFcXVhbCIsImhhbmRsZUV2ZW50U291cmNlcyIsImhhbmRsZVBsdWdpbnMiLCJpbnB1dHMiLCJ1bmZvdW5kU291cmNlcyIsIm5ld0lucHV0cyIsImlucHV0c18xIiwiaW5wdXRGb3VuZCIsIl9yYXciLCJ1bmZvdW5kU291cmNlc18xIiwidW5mb3VuZFNvdXJjZSIsIm5ld0lucHV0c18xIiwibmV3SW5wdXQiLCJhZGRFdmVudFNvdXJjZSIsImFkZFBsdWdpbklucHV0cyIsImNvbmZpZyIsImdsb2JhbERlZmF1bHRzIiwiZGVmYXVsdFJhbmdlU2VwYXJhdG9yIiwidGl0bGVSYW5nZVNlcGFyYXRvciIsImZvcmNlRXZlbnREdXJhdGlvbiIsImNvbHVtbkhlYWRlciIsIndlZWtlbmRzIiwid2Vla051bWJlcnMiLCJ3ZWVrTnVtYmVyQ2FsY3VsYXRpb24iLCJtaW5UaW1lIiwibWF4VGltZSIsInNob3dOb25DdXJyZW50RGF0ZXMiLCJsYXp5RmV0Y2hpbmciLCJsb2NhbGVzIiwidGltZUdyaWRFdmVudE1pbkhlaWdodCIsInRoZW1lU3lzdGVtIiwiZHJhZ1JldmVydER1cmF0aW9uIiwiZHJhZ1Njcm9sbCIsImFsbERheU1haW50YWluRHVyYXRpb24iLCJ1bnNlbGVjdEF1dG8iLCJkcm9wQWNjZXB0IiwiZXZlbnRPcmRlciIsImV2ZW50TGltaXQiLCJldmVudExpbWl0Q2xpY2siLCJkYXlQb3BvdmVyRm9ybWF0IiwiaGFuZGxlV2luZG93UmVzaXplIiwid2luZG93UmVzaXplRGVsYXkiLCJsb25nUHJlc3NEZWxheSIsImV2ZW50RHJhZ01pbkRpc3RhbmNlIiwicnRsRGVmYXVsdHMiLCJidXR0b25JY29ucyIsInByZXYiLCJuZXh0IiwicHJldlllYXIiLCJuZXh0WWVhciIsImNvbXBsZXhPcHRpb25zIiwibWVyZ2VPcHRpb25zIiwib3B0aW9uT2JqcyIsIklOVEVSTkFMX1BMVUdJTlMiLCJyZWZpbmVQbHVnaW5EZWZzIiwicGx1Z2luSW5wdXRzIiwicGx1Z2luSW5wdXRzXzEiLCJwbHVnaW5JbnB1dCIsImdsb2JhbE5hbWUiLCJ3YXJuIiwiZGVmYXVsdCIsIlJBV19FTl9MT0NBTEUiLCJjb2RlIiwiZGlyIiwiYnV0dG9uVGV4dCIsInRvZGF5IiwibGlzdCIsImFsbERheVRleHQiLCJldmVudExpbWl0VGV4dCIsIm5vRXZlbnRzTWVzc2FnZSIsInBhcnNlUmF3TG9jYWxlcyIsImV4cGxpY2l0UmF3TG9jYWxlcyIsImRlZmF1bHRDb2RlIiwiZ2xvYmFsQXJyYXkiLCJnbG9iYWxPYmplY3QiLCJhbGxSYXdMb2NhbGVzIiwicmF3TG9jYWxlTWFwIiwiZW4iLCJhbGxSYXdMb2NhbGVzXzEiLCJyYXdMb2NhbGUiLCJidWlsZExvY2FsZSIsImlucHV0U2luZ3VsYXIiLCJhdmFpbGFibGUiLCJwYXJzZUxvY2FsZSIsInF1ZXJ5TG9jYWxlIiwiY29kZUFyZyIsInF1ZXJ5UmF3TG9jYWxlIiwic2ltcGxlSWQiLCJtZXJnZWQiLCJOdW1iZXJGb3JtYXQiLCJPcHRpb25zTWFuYWdlciIsIm92ZXJyaWRlcyIsImR5bmFtaWNPdmVycmlkZXMiLCJjb21wdXRlIiwidXBkYXRlcyIsImlzRHluYW1pYyIsIm92ZXJyaWRlSGFzaCIsInJlbW92YWxzXzEiLCJsb2NhbGVEZWZhdWx0cyIsImRpckRlZmF1bHRzIiwiY2FsZW5kYXJTeXN0ZW1DbGFzc01hcCIsInJlZ2lzdGVyQ2FsZW5kYXJTeXN0ZW0iLCJ0aGVDbGFzcyIsImNyZWF0ZUNhbGVuZGFyU3lzdGVtIiwiR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0iLCJhcnJheVRvTWFya2VyIiwiYXJyIiwiSVNPX1JFIiwiRGF0ZUVudiIsInNldHRpbmdzIiwiaXNOYW1lZFRpbWVab25lIiwibmFtZWRUaW1lWm9uZUltcGwiLCJ3ZWVrRG93Iiwid2Vla0RveSIsImZpcnN0RGF5Iiwid2Vla051bWJlckZ1bmMiLCJjcmVhdGVOb3dNYXJrZXIiLCJ0aW1lc3RhbXBUb01hcmtlciIsImdldFllYXIiLCJhZGRZZWFycyIsImFkZE1vbnRocyIsImdyZWF0ZXN0V2hvbGVVbml0IiwiY291bnREdXJhdGlvbnNCZXR3ZWVuIiwic3RhcnRPZiIsInN0YXJ0T2ZZZWFyIiwic3RhcnRPZk1vbnRoIiwic3RhcnRPZldlZWsiLCJkYXRlT3B0aW9ucyIsIm9mZnNldEZvck1hcmtlciIsImlzRW5kRXhjbHVzaXZlIiwiZXh0cmFPcHRpb25zIiwib21pdFRpbWVab25lT2Zmc2V0IiwidGltZXN0YW1wVG9BcnJheSIsImdldFRpbWV6b25lT2Zmc2V0Iiwib2Zmc2V0Rm9yQXJyYXkiLCJTSU1QTEVfU09VUkNFX1BST1BTIiwidWlkJDIiLCJkb2VzU291cmNlTmVlZFJhbmdlIiwic291cmNlRGVmSWQiLCJwYXJzZUV2ZW50U291cmNlIiwicGFyc2VFdmVudFNvdXJjZVByb3BzIiwiaXNGZXRjaGluZyIsInJlZHVjZUV2ZW50U291cmNlcyIsImFkZFNvdXJjZXMiLCJzb3VyY2VzIiwicmVtb3ZlU291cmNlIiwiZmV0Y2hEaXJ0eVNvdXJjZXMiLCJmZXRjaFNvdXJjZXNCeUlkcyIsImV4Y2x1ZGVTdGF0aWNTb3VyY2VzIiwicmVjZWl2ZVJlc3BvbnNlIiwidWlkJDMiLCJldmVudFNvdXJjZUhhc2giLCJzb3VyY2VzXzEiLCJzb3VyY2VIYXNoIiwiaXNTb3VyY2VEaXJ0eSIsInByZXZTb3VyY2VzIiwic291cmNlSWRIYXNoIiwibmV4dFNvdXJjZXMiLCJmZXRjaFNvdXJjZSIsInNvdXJjZURlZiIsImNhbFN1Y2Nlc3MiLCJjYWxTdWNjZXNzUmVzIiwic291cmNlU3VjY2Vzc1JlcyIsImNhbGxGYWlsdXJlIiwiRGF0ZVByb2ZpbGVHZW5lcmF0b3IiLCJ2aWV3U3BlYyIsImluaXRIaWRkZW5EYXlzIiwiYnVpbGRQcmV2IiwiY3VycmVudERhdGVQcm9maWxlIiwiY3VycmVudERhdGUiLCJwcmV2RGF0ZSIsImN1cnJlbnRSYW5nZVVuaXQiLCJkYXRlSW5jcmVtZW50IiwiYnVpbGROZXh0IiwibmV4dERhdGUiLCJmb3JjZVRvVmFsaWQiLCJjdXJyZW50SW5mbyIsImlzUmFuZ2VBbGxEYXkiLCJyZW5kZXJSYW5nZSIsImlzVmFsaWQiLCJidWlsZFZhbGlkUmFuZ2UiLCJ0cmltSGlkZGVuRGF5cyIsImJ1aWxkQ3VycmVudFJhbmdlSW5mbyIsImJ1aWxkUmVuZGVyUmFuZ2UiLCJhZGp1c3RBY3RpdmVSYW5nZSIsImJ1aWxkRGF0ZUluY3JlbWVudCIsImdldFJhbmdlT3B0aW9uIiwiZGF5Q291bnQiLCJkdXJhdGlvblVuaXQiLCJidWlsZFJhbmdlRnJvbUR1cmF0aW9uIiwiYnVpbGRSYW5nZUZyb21EYXlDb3VudCIsImJ1aWxkQ3VzdG9tVmlzaWJsZVJhbmdlIiwiZ2V0RmFsbGJhY2tEdXJhdGlvbiIsImNsYXNzIiwidXNlc01pbk1heFRpbWUiLCJhbGlnbm1lbnQiLCJkYXRlQWxpZ25tZW50IiwiZGF0ZUluY3JlbWVudElucHV0IiwiZGF0ZUluY3JlbWVudER1cmF0aW9uIiwiaXNIaWRkZW5EYXkiLCJza2lwSGlkZGVuRGF5cyIsImNvbXB1dGVSZXMiLCJjdXN0b21BbGlnbm1lbnQiLCJydW5uaW5nQ291bnQiLCJmYWxsYmFjayIsIm90aGVyQXJncyIsImhpZGRlbkRheXMiLCJpc0hpZGRlbkRheUhhc2giLCJFcnJvciIsImluYyIsImlzRXhjbHVzaXZlIiwiaXNEYXRlUHJvZmlsZXNFcXVhbCIsInAwIiwicDEiLCJ2aWV3VHlwZSIsInJlZHVjZVZpZXdUeXBlIiwicmVkdWNlRGF0ZVByb2ZpbGUiLCJuZXh0U3RhdGUiLCJyZWR1Y2VDdXJyZW50RGF0ZSIsInJlZHVjZURhdGVTZWxlY3Rpb24iLCJyZWR1Y2VTZWxlY3RlZEV2ZW50IiwicmVkdWNlRXZlbnREcmFnIiwicmVkdWNlRXZlbnRSZXNpemUiLCJldmVudFNvdXJjZUxvYWRpbmdMZXZlbCIsImNvbXB1dGVMb2FkaW5nTGV2ZWwiLCJyZWR1Y2VyRnVuYyIsImN1cnJlbnRWaWV3VHlwZSIsIm5ld0RhdGVQcm9maWxlIiwiZGF0ZVByb2ZpbGVHZW5lcmF0b3JzIiwiZGF0ZU1hcmtlciIsImdlbmVyYXRvciIsIm5ld0RhdGUiLCJjdXJyZW50U2VsZWN0aW9uIiwiY3VycmVudEluc3RhbmNlSWQiLCJldmVudEluc3RhbmNlSWQiLCJjdXJyZW50RHJhZyIsIm5ld0RyYWciLCJjdXJyZW50UmVzaXplIiwibmV3UmVzaXplIiwiY250IiwiU1RBTkRBUkRfUFJPUFMiLCJwYXJzZURhdGVTcGFuIiwiZGVmYXVsdER1cmF0aW9uIiwic3BhbiIsInBhcnNlT3BlbkRhdGVTcGFuIiwiaXNEYXRlU3BhbnNFcXVhbCIsInNwYW4wIiwic3BhbjEiLCJpc1NwYW5Qcm9wc0VxdWFsIiwiYnVpbGREYXRlUG9pbnRBcGkiLCJkYXRlU3RyIiwiZmFicmljYXRlRXZlbnRSYW5nZSIsImNvbXBpbGVWaWV3RGVmcyIsImRlZmF1bHRDb25maWdzIiwib3ZlcnJpZGVDb25maWdzIiwiZW5zdXJlVmlld0RlZiIsInZpZXdEZWYiLCJidWlsZFZpZXdEZWYiLCJkZWZhdWx0Q29uZmlnIiwib3ZlcnJpZGVDb25maWciLCJxdWVyeVByb3AiLCJzdXBlclR5cGUiLCJmaW5kVmlld05hbWVCeVN1YmNsYXNzIiwic3VwZXJEZWYiLCJ2aWV3U3ViY2xhc3MiLCJjb25maWdzIiwic3VwZXJQcm90byIsImdldFByb3RvdHlwZU9mIiwicGFyc2VWaWV3Q29uZmlncyIsInBhcnNlVmlld0NvbmZpZyIsIlZJRVdfREVGX1BST1BTIiwiYnVpbGRWaWV3U3BlY3MiLCJkZWZhdWx0SW5wdXRzIiwib3B0aW9uc01hbmFnZXIiLCJ2aWV3RGVmcyIsImJ1aWxkVmlld1NwZWMiLCJkdXJhdGlvbklucHV0Iiwic2luZ2xlVW5pdCIsInNpbmdsZVVuaXRPdmVycmlkZXMiLCJkZW5vbSIsInF1ZXJ5QnV0dG9uVGV4dCIsImJ1dHRvblRleHRNYXAiLCJidXR0b25UZXh0S2V5IiwiYnV0dG9uVGV4dE92ZXJyaWRlIiwiYnV0dG9uVGV4dERlZmF1bHQiLCJUb29sYmFyIiwiZXh0cmFDbGFzc05hbWUiLCJfcmVuZGVyTGF5b3V0IiwicmVuZGVyTGF5b3V0IiwidW5yZW5kZXJMYXlvdXQiLCJfdXBkYXRlVGl0bGUiLCJ1cGRhdGVUaXRsZSIsIl91cGRhdGVBY3RpdmVCdXR0b24iLCJ1cGRhdGVBY3RpdmVCdXR0b24iLCJfdXBkYXRlVG9kYXkiLCJ1cGRhdGVUb2RheSIsIl91cGRhdGVQcmV2IiwidXBkYXRlUHJldiIsIl91cGRhdGVOZXh0IiwidXBkYXRlTmV4dCIsImxheW91dCIsImFjdGl2ZUJ1dHRvbiIsImlzVG9kYXlFbmFibGVkIiwiaXNQcmV2RW5hYmxlZCIsImlzTmV4dEVuYWJsZWQiLCJ2aWV3c1dpdGhCdXR0b25zIiwicmVuZGVyU2VjdGlvbiIsImJ1dHRvblN0ciIsInZpZXdTcGVjcyIsInNlY3Rpb25FbCIsImNhbGVuZGFyQ3VzdG9tQnV0dG9ucyIsImNhbGVuZGFyQnV0dG9uVGV4dE92ZXJyaWRlcyIsImNhbGVuZGFyQnV0dG9uVGV4dCIsImJ1dHRvbkdyb3VwU3RyIiwiZ3JvdXBDaGlsZHJlbiIsImlzT25seUJ1dHRvbnMiLCJncm91cEVsIiwiYnV0dG9uQ2xpY2siLCJidXR0b25JY29uIiwiYnV0dG9uSW5uZXJIdG1sIiwiYnV0dG9uQ2xhc3NlcyIsImJ1dHRvbkVsIiwiYnV0dG9uQXJpYUF0dHIiLCJjaGFuZ2VWaWV3IiwiYnV0dG9uR3JvdXBDbGFzc05hbWUiLCJ0b2dnbGVCdXR0b25FbmFibGVkIiwidGl0bGVFbCIsImlubmVyVGV4dCIsImRpc2FibGVkIiwiQ2FsZW5kYXJDb21wb25lbnQiLCJfcmVuZGVyVG9vbGJhcnMiLCJyZW5kZXJUb29sYmFycyIsImJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMiLCJjb250ZW50RWwiLCJtb2RpZnlWaWV3Q29udGFpbmVyIiwidG9nZ2xlRWxDbGFzc05hbWVzIiwiY29tcHV0ZVRpdGxlIiwiZm9vdGVyIiwiZGlyQ2xhc3NOYW1lIiwidGhlbWVDbGFzc05hbWUiLCJmcmVlemVIZWlnaHQiLCJkYXRlUHJvZmlsZUdlbmVyYXRvciIsInJlbmRlclZpZXciLCJ1cGRhdGVTaXplIiwidGhhd0hlaWdodCIsImhlYWRlckxheW91dCIsImZvb3RlckxheW91dCIsIm5vdyIsInRvZGF5SW5mbyIsInByZXZJbmZvIiwibmV4dEluZm8iLCJ0b29sYmFyUHJvcHMiLCJhZGRTY3JvbGwiLCJxdWVyeVNjcm9sbCIsInZpZXdQcm9wcyIsInRyYW5zZm9ybWVycyIsInRyYW5zZm9ybWVyc18xIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm0iLCJpc1Jlc2l6ZSIsImlzSGVpZ2h0QXV0byIsImNvbXB1dGVIZWlnaHRWYXJzIiwidmlld0hlaWdodCIsInVwZGF0ZU5vd0luZGljYXRvciIsInBvcFNjcm9sbCIsImhlaWdodElucHV0IiwiY29udGVudEhlaWdodElucHV0IiwicXVlcnlUb29sYmFyc0hlaWdodCIsInBhcmVudEVsIiwidmlld09wdGlvbnMiLCJ0aXRsZUZvcm1hdCIsImNvbXB1dGVUaXRsZUZvcm1hdCIsInRoZUNsYXNzZXMiLCJJbnRlcmFjdGlvbiIsInBhcnNlSW50ZXJhY3Rpb25TZXR0aW5ncyIsInVzZUV2ZW50Q2VudGVyIiwiaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUiLCJpbnRlcmFjdGlvblNldHRpbmdzU3RvcmUiLCJFdmVudENsaWNraW5nIiwiaGFuZGxlU2VnQ2xpY2siLCJoYXNVcmxDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiaHJlZiIsImpzRXZlbnQiLCJkZWZhdWx0UHJldmVudGVkIiwiRXZlbnRIb3ZlcmluZyIsImhhbmRsZUV2ZW50RWxSZW1vdmUiLCJjdXJyZW50U2VnRWwiLCJoYW5kbGVTZWdMZWF2ZSIsImhhbmRsZVNlZ0VudGVyIiwidHJpZ2dlckV2ZW50IiwicmVtb3ZlSG92ZXJMaXN0ZW5lcnMiLCJwdWJsaWNFdk5hbWUiLCJTdGFuZGFyZFRoZW1lIiwid2lkZ2V0Iiwid2lkZ2V0SGVhZGVyIiwid2lkZ2V0Q29udGVudCIsImJ1dHRvbkdyb3VwIiwiYnV0dG9uIiwiYnV0dG9uQWN0aXZlIiwicG9wb3ZlckhlYWRlciIsInBvcG92ZXJDb250ZW50IiwiaGVhZGVyUm93IiwiZGF5Um93IiwibGlzdFZpZXciLCJjbG9zZSIsImJ1aWxkRGF0ZUVudiIsImJ1aWxkVGhlbWUiLCJidWlsZEV2ZW50VWlTaW5nbGVCYXNlIiwiX2J1aWxkRXZlbnRVaVNpbmdsZUJhc2UiLCJidWlsZFNlbGVjdGlvbkNvbmZpZyIsIl9idWlsZFNlbGVjdGlvbkNvbmZpZyIsImJ1aWxkRXZlbnRVaUJ5U291cmNlIiwiYnVpbGRFdmVudFVpQmFzZXMiLCJpbnRlcmFjdGlvbnNTdG9yZSIsImFjdGlvblF1ZXVlIiwiaXNSZWR1Y2luZyIsIm5lZWRzUmVyZW5kZXIiLCJuZWVkc0Z1bGxSZXJlbmRlciIsImlzUmVuZGVyaW5nIiwicmVuZGVyaW5nUGF1c2VEZXB0aCIsImJ1aWxkRGVsYXllZFJlcmVuZGVyIiwiaXNWaWV3VXBkYXRlZCIsImlzRGF0ZXNVcGRhdGVkIiwiaXNFdmVudHNVcGRhdGVkIiwiaGFuZGxlT3B0aW9ucyIsImh5ZHJhdGUiLCJjYWxlbmRhckludGVyYWN0aW9uQ2xhc3MiLCJwbHVnaW5EZWZzIiwicGx1Z2luRGVmc18xIiwicGx1Z2luRGVmIiwicmVuZGVyYWJsZUV2ZW50U3RvcmUiLCJiaW5kSGFuZGxlcnMiLCJleGVjdXRlUmVuZGVyIiwicmVxdWVzdFJlcmVuZGVyIiwidW5iaW5kSGFuZGxlcnMiLCJyZW1vdmVOYXZMaW5rTGlzdGVuZXIiLCJhbmNob3JFbCIsImdldEF0dHJpYnV0ZSIsImN1c3RvbUFjdGlvbiIsInZpZXdPcHQiLCJ6b29tVG8iLCJ3aW5kb3dSZXNpemVQcm94eSIsIndpbmRvd1Jlc2l6ZSIsImJ1aWxkSW5pdGlhbFN0YXRlIiwicmF3U291cmNlcyIsInNpbmdsZVJhd1NvdXJjZSIsInJhd1NvdXJjZXNfMSIsInJhd1NvdXJjZSIsImJhdGNoUmVuZGVyaW5nIiwiZ2V0SW5pdGlhbERhdGUiLCJvbGRTdGF0ZSIsInNoaWZ0IiwibmV3U3RhdGUiLCJuZWVkc0Z1bGwiLCJkZWxheWVkUmVyZW5kZXIiLCJ0cnlSZXJlbmRlciIsInJlbmRlckNvbXBvbmVudCIsInNhdmVkU2Nyb2xsIiwiZXZlbnRVaVNpbmdsZUJhc2UiLCJldmVudFVpQnlTb3VyY2UiLCJhcHBseVNjcm9sbCIsInJlbGVhc2VBZnRlclNpemluZ1RyaWdnZXJzIiwic2V0T3B0aW9uIiwibXV0YXRlT3B0aW9ucyIsImdldE9wdGlvbiIsInZpZXdPcHRzIiwiY2hhbmdlSGFuZGxlcnMiLCJub3JtYWxVcGRhdGVzIiwic3BlY2lhbFVwZGF0ZXMiLCJpc1RpbWVab25lRGlydHkiLCJpc1NpemVEaXJ0eSIsImFueURpZmZpY3VsdE9wdGlvbnMiLCJuYW1lXzMiLCJwbHVnaW5Ib29rcyIsInJlcmVuZGVyRGVsYXkiLCJhdmFpbGFibGVSYXdMb2NhbGVzIiwiZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzcyIsImdldEF2YWlsYWJsZUxvY2FsZUNvZGVzIiwicmF3T3B0cyIsImV2ZW50RWRpdGFibGUiLCJvcHRIYW5kbGVyIiwibmFtZV80IiwiaXNWYWxpZFZpZXdUeXBlIiwiZGF0ZU9yUmFuZ2UiLCJ1bnNlbGVjdCIsInNwZWMiLCJnZXRVbml0Vmlld1NwZWMiLCJ2aWV3VHlwZXMiLCJkZWZhdWx0RGF0ZUlucHV0IiwiZ290b0RhdGUiLCJ6b25lZERhdGVJbnB1dCIsImluY3JlbWVudERhdGUiLCJmb3JtYXREYXRlIiwiaXNIYW5kbGluZ1dpbmRvd1Jlc2l6ZSIsInJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQiLCJzZXR0aW5nc0lucHV0IiwiREVGQVVMVF9JTlRFUkFDVElPTlMiLCJpbnRlcmFjdGlvbkNsYXNzZXMiLCJpbnRlcmFjdGlvbnMiLCJpbnRlcmFjdGlvbkNsYXNzIiwidW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50IiwibGlzdGVuZXIiLCJkYXRlT3JPYmoiLCJlbmREYXRlIiwic2VsZWN0aW9uSW5wdXQiLCJ0cmlnZ2VyRGF0ZVNlbGVjdCIsInBldiIsInRyaWdnZXJEYXRlVW5zZWxlY3QiLCJvcmlnRXZlbnQiLCJ0cmlnZ2VyRGF0ZUNsaWNrIiwiZGF5RWwiLCJzb3VyY2VJbnB1dCIsInNvdXJjZUFwaSIsImdldEV2ZW50U291cmNlQnlJZCIsImdldEV2ZW50QnlJZCIsImdldEV2ZW50cyIsImV2ZW50QXBpcyIsInJlbW92ZUFsbEV2ZW50cyIsInJlcmVuZGVyRXZlbnRzIiwiZ2V0RXZlbnRTb3VyY2VzIiwic291cmNlQXBpcyIsImludGVybmFsSWQiLCJyZW1vdmVBbGxFdmVudFNvdXJjZXMiLCJyZWZldGNoRXZlbnRzIiwic2Nyb2xsVG9UaW1lIiwidGltZUlucHV0Iiwic2Nyb2xsVG9EdXJhdGlvbiIsInRoZW1lQ2xhc3MiLCJWaWV3IiwicmVuZGVyRGF0ZXNNZW0iLCJyZW5kZXJEYXRlc1dyYXAiLCJ1bnJlbmRlckRhdGVzV3JhcCIsInJlbmRlckJ1c2luZXNzSG91cnNNZW0iLCJyZW5kZXJCdXNpbmVzc0hvdXJzIiwidW5yZW5kZXJCdXNpbmVzc0hvdXJzIiwicmVuZGVyRGF0ZVNlbGVjdGlvbk1lbSIsInJlbmRlckRhdGVTZWxlY3Rpb25XcmFwIiwidW5yZW5kZXJEYXRlU2VsZWN0aW9uV3JhcCIsInJlbmRlckV2ZW50c01lbSIsInJlbmRlckV2ZW50cyIsInVucmVuZGVyRXZlbnRzIiwicmVuZGVyRXZlbnRTZWxlY3Rpb25NZW0iLCJyZW5kZXJFdmVudFNlbGVjdGlvbldyYXAiLCJ1bnJlbmRlckV2ZW50U2VsZWN0aW9uV3JhcCIsInJlbmRlckV2ZW50RHJhZ01lbSIsInJlbmRlckV2ZW50RHJhZ1dyYXAiLCJ1bnJlbmRlckV2ZW50RHJhZ1dyYXAiLCJyZW5kZXJFdmVudFJlc2l6ZU1lbSIsInJlbmRlckV2ZW50UmVzaXplV3JhcCIsInVucmVuZGVyRXZlbnRSZXNpemVXcmFwIiwiZXZlbnRPcmRlclNwZWNzIiwiaW5pdGlhbGl6ZSIsImlzQXV0byIsInVwZGF0ZUJhc2VTaXplIiwicmVuZGVyRGF0ZXMiLCJzdGFydE5vd0luZGljYXRvciIsInN0b3BOb3dJbmRpY2F0b3IiLCJ1bnJlbmRlckRhdGVzIiwicmVuZGVyRGF0ZVNlbGVjdGlvbiIsInVucmVuZGVyRGF0ZVNlbGVjdGlvbiIsInNsaWNlRXZlbnRzIiwiY29tcHV0ZUV2ZW50RHJhZ2dhYmxlIiwiZXZlbnRVaSIsImNvbXB1dGVFdmVudFN0YXJ0UmVzaXphYmxlIiwiY29tcHV0ZUV2ZW50RW5kUmVzaXphYmxlIiwicmVuZGVyRXZlbnRTZWxlY3Rpb24iLCJ1bnJlbmRlckV2ZW50U2VsZWN0aW9uIiwicmVuZGVyRXZlbnREcmFnIiwidW5yZW5kZXJFdmVudERyYWciLCJyZW5kZXJFdmVudFJlc2l6ZSIsInVucmVuZGVyRXZlbnRSZXNpemUiLCJ1cGRhdGUiLCJkZWxheSIsImdldE5vd0luZGljYXRvclVuaXQiLCJpbml0aWFsTm93RGF0ZSIsImluaXRpYWxOb3dRdWVyaWVkTXMiLCJub3dJbmRpY2F0b3JUaW1lb3V0SUQiLCJub3dJbmRpY2F0b3JJbnRlcnZhbElEIiwic2V0SW50ZXJ2YWwiLCJ1bnJlbmRlck5vd0luZGljYXRvciIsInJlbmRlck5vd0luZGljYXRvciIsImlzTm93SW5kaWNhdG9yUmVuZGVyZWQiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwicXVldWVkU2Nyb2xsIiwiYXBwbHlRdWV1ZWRTY3JvbGwiLCJxdWVyeURhdGVTY3JvbGwiLCJjb21wdXRlRGF0ZVNjcm9sbCIsImFwcGx5RGF0ZVNjcm9sbCIsIkZnRXZlbnRSZW5kZXJlciIsInJlbmRlclNlZ3MiLCJtaXJyb3JJbmZvIiwicmFuZ2VVcGRhdGVkIiwicmVuZGVyU2VnRWxzIiwiYXR0YWNoU2VncyIsIl9zZWdzIiwiZGV0YWNoU2VncyIsImRpc3BsYXlFdmVudFRpbWUiLCJkaXNwbGF5RXZlbnRFbmQiLCJldmVudFRpbWVGb3JtYXQiLCJjb21wdXRlRXZlbnRUaW1lRm9ybWF0IiwiY29tcHV0ZURpc3BsYXlFdmVudFRpbWUiLCJjb21wdXRlRGlzcGxheUV2ZW50RW5kIiwicmVuZGVyU2VnSHRtbCIsImdldFNlZ0NsYXNzZXMiLCJpc0RyYWdnYWJsZSIsImlzUmVzaXphYmxlIiwiaXNEcmFnZ2luZyIsImlzUmVzaXppbmciLCJnZXRUaW1lVGV4dCIsImRpc3BsYXlFbmQiLCJfZ2V0VGltZVRleHQiLCJnZXRTa2luQ3NzIiwic29ydEV2ZW50U2VncyIsIm9ianMiLCJidWlsZFNlZ0NvbXBhcmVPYmoiLCJjIiwiX3NlZyIsImNvbXB1dGVTaXplcyIsImZvcmNlIiwiY29tcHV0ZVNlZ1NpemVzIiwiYXNzaWduU2l6ZXMiLCJhc3NpZ25TZWdTaXplcyIsImhpZGVCeUhhc2giLCJ2aXNpYmlsaXR5Iiwic2hvd0J5SGFzaCIsInNlbGVjdEJ5SW5zdGFuY2VJZCIsInVuc2VsZWN0QnlJbnN0YW5jZUlkIiwiRmlsbFJlbmRlcmVyIiwiZmlsbFNlZ1RhZyIsImRpcnR5U2l6ZUZsYWdzIiwiY29udGFpbmVyRWxzQnlUeXBlIiwic2Vnc0J5VHlwZSIsImdldFNlZ3NCeVR5cGUiLCJyZW5kZXJlZFNlZ3MiLCJjb250YWluZXJFbHMiLCJ0b0xvd2VyQ2FzZSIsIk5hbWVkVGltZVpvbmVJbXBsIiwiRWxlbWVudERyYWdnaW5nIiwiZW1pdHRlciIsInNldE1pcnJvcklzVmlzaWJsZSIsInNldE1pcnJvck5lZWRzUmV2ZXJ0Iiwic2V0QXV0b1Njcm9sbEVuYWJsZWQiLCJkYXRlSW5wdXQiLCJidWlsZERhdGVFbnYkMSIsImRhdGVNZXRhIiwiRFJBR19NRVRBX1BST1BTIiwiRFJBR19NRVRBX0RFRkFVTFRTIiwicGFyc2VEcmFnTWV0YSIsImNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdCIsImRhdGVzUmVwRGlzdGluY3REYXlzIiwicmVuZGVyRGF0ZUNlbGwiLCJjb2xDbnQiLCJjb2xIZWFkRm9ybWF0IiwiY29sc3BhbiIsIm90aGVyQXR0cnMiLCJpc0RhdGVWYWxpZCIsImNvbHVtbkhlYWRlckh0bWwiLCJjb2x1bW5IZWFkZXJUZXh0IiwiRGF5SGVhZGVyIiwidGhlYWQiLCJkYXRlcyIsInJlbmRlckludHJvSHRtbCIsImRhdGVzXzEiLCJEYXlTZXJpZXMiLCJpbmRpY2VzIiwiZGF5SW5kZXgiLCJzbGljZVJhbmdlIiwiZmlyc3RJbmRleCIsImdldERhdGVEYXlJbmRleCIsImxhc3RJbmRleCIsImNsaXBwZWRGaXJzdEluZGV4IiwiY2xpcHBlZExhc3RJbmRleCIsImNlaWwiLCJkYXlPZmZzZXQiLCJEYXlUYWJsZSIsImRheVNlcmllcyIsImJyZWFrT25XZWVrcyIsImRheXNQZXJSb3ciLCJyb3dDbnQiLCJjZWxscyIsImJ1aWxkQ2VsbHMiLCJoZWFkZXJEYXRlcyIsImJ1aWxkSGVhZGVyRGF0ZXMiLCJyb3dzIiwicm93IiwiY29sIiwiYnVpbGRDZWxsIiwic2VyaWVzU2VnIiwiaW5kZXgiLCJuZXh0SW5kZXgiLCJmaXJzdENvbCIsImxhc3RDb2wiLCJTbGljZXIiLCJzbGljZUJ1c2luZXNzSG91cnMiLCJfc2xpY2VCdXNpbmVzc0hvdXJzIiwic2xpY2VEYXRlU2VsZWN0aW9uIiwiX3NsaWNlRGF0ZVNwYW4iLCJfc2xpY2VFdmVudFN0b3JlIiwic2xpY2VFdmVudERyYWciLCJfc2xpY2VJbnRlcmFjdGlvbiIsInNsaWNlRXZlbnRSZXNpemUiLCJzbGljZVByb3BzIiwiZXh0cmFBcmdzIiwiZXZlbnRTZWdzIiwiZGF0ZVNlbGVjdGlvblNlZ3MiLCJidXNpbmVzc0hvdXJTZWdzIiwiZmdFdmVudFNlZ3MiLCJiZ0V2ZW50U2VncyIsInNsaWNlTm93RGF0ZSIsImNvbXB1dGVBY3RpdmVSYW5nZSIsInJhbmdlUmVzIiwic2xpY2VFdmVudFJhbmdlcyIsImFmZmVjdGVkSW5zdGFuY2VzIiwic291cmNlU2VnIiwiZXZlbnRSYW5nZXMiLCJldmVudFJhbmdlc18xIiwic2xpY2VFdmVudFJhbmdlIiwiaXNDb21wb25lbnRBbGxEYXkiLCJ2ZXJzaW9uIiwidG91Y2hNb3VzZUlnbm9yZVdhaXQiLCJpZ25vcmVNb3VzZURlcHRoIiwibGlzdGVuZXJDbnQiLCJpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCIsIlBvaW50ZXJEcmFnZ2luZyIsImNvbnRhaW5lckVsIiwic3ViamVjdEVsIiwiZG93bkVsIiwiaGFuZGxlU2VsZWN0b3IiLCJzaG91bGRJZ25vcmVNb3ZlIiwic2hvdWxkV2F0Y2hTY3JvbGwiLCJpc1RvdWNoRHJhZ2dpbmciLCJ3YXNUb3VjaFNjcm9sbCIsImhhbmRsZU1vdXNlRG93biIsInNob3VsZElnbm9yZU1vdXNlIiwiaXNQcmltYXJ5TW91c2VCdXR0b24iLCJ0cnlTdGFydCIsImNyZWF0ZUV2ZW50RnJvbU1vdXNlIiwiaW5pdFNjcm9sbFdhdGNoIiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsInJlY29yZENvb3JkcyIsImNsZWFudXAiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiY3JlYXRlRXZlbnRGcm9tVG91Y2giLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoU2Nyb2xsIiwic3RhcnRJZ25vcmluZ01vdXNlIiwiaGFuZGxlU2Nyb2xsIiwicGFnZVgiLCJwcmV2U2Nyb2xsWCIsInByZXZQYWdlWCIsInBhZ2VZIiwicHJldlNjcm9sbFkiLCJwcmV2UGFnZVkiLCJpc1RvdWNoIiwib3JpZ1BhZ2VYIiwib3JpZ1BhZ2VZIiwicGFzc2l2ZSIsImxpc3RlbmVyQ3JlYXRlZCIsImxpc3RlbmVyRGVzdHJveWVkIiwicXVlcnlTdWJqZWN0RWwiLCJkZXN0cm95U2Nyb2xsV2F0Y2giLCJjYW5jZWxUb3VjaFNjcm9sbCIsImlzRmlyc3QiLCJ0b3VjaGVzIiwiY3RybEtleSIsIm9uV2luZG93VG91Y2hNb3ZlIiwiRWxlbWVudE1pcnJvciIsImlzVmlzaWJsZSIsInNvdXJjZUVsIiwibWlycm9yRWwiLCJzb3VyY2VFbFJlY3QiLCJ6SW5kZXgiLCJyZXZlcnREdXJhdGlvbiIsIm9yaWdTY3JlZW5YIiwib3JpZ1NjcmVlblkiLCJ1cGRhdGVFbFBvc2l0aW9uIiwiaGFuZGxlTW92ZSIsInNldElzVmlzaWJsZSIsInN0b3AiLCJuZWVkc1JldmVydEFuaW1hdGlvbiIsImRvbmUiLCJkb1JldmVydEFuaW1hdGlvbiIsImZpbmFsU291cmNlRWxSZWN0IiwidHJhbnNpdGlvbiIsImdldE1pcnJvckVsIiwiY2xvbmVOb2RlIiwiYm94U2l6aW5nIiwibWFyZ2luIiwiU2Nyb2xsR2VvbUNhY2hlIiwic2Nyb2xsQ29udHJvbGxlciIsImRvZXNMaXN0ZW5pbmciLCJoYW5kbGVTY3JvbGxDaGFuZ2UiLCJvcmlnU2Nyb2xsVG9wIiwib3JpZ1Njcm9sbExlZnQiLCJjbGllbnRSZWN0IiwiY29tcHV0ZUNsaWVudFJlY3QiLCJnZXRFdmVudFRhcmdldCIsIkVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUiLCJXaW5kb3dTY3JvbGxHZW9tQ2FjaGUiLCJnZXRUaW1lIiwicGVyZm9ybWFuY2UiLCJBdXRvU2Nyb2xsZXIiLCJpc0VuYWJsZWQiLCJzY3JvbGxRdWVyeSIsImVkZ2VUaHJlc2hvbGQiLCJtYXhWZWxvY2l0eSIsInBvaW50ZXJTY3JlZW5YIiwicG9pbnRlclNjcmVlblkiLCJpc0FuaW1hdGluZyIsInNjcm9sbENhY2hlcyIsImV2ZXJNb3ZlZFVwIiwiZXZlck1vdmVkRG93biIsImV2ZXJNb3ZlZExlZnQiLCJldmVyTW92ZWRSaWdodCIsImFuaW1hdGUiLCJlZGdlIiwiY29tcHV0ZUJlc3RFZGdlIiwiaGFuZGxlU2lkZSIsIm1zU2luY2VSZXF1ZXN0IiwicmVxdWVzdEFuaW1hdGlvbiIsImJ1aWxkQ2FjaGVzIiwieURlbHRhIiwieERlbHRhIiwic2Nyb2xsQ2FjaGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnZEaXN0YW5jZSIsImRpc3RhbmNlIiwidmVsb2NpdHkiLCJiZXN0U2lkZSIsImxlZnREaXN0IiwicmlnaHREaXN0IiwidG9wRGlzdCIsImJvdHRvbURpc3QiLCJxdWVyeVNjcm9sbEVscyIsInF1ZXJ5IiwiRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyIsIm1pbkRpc3RhbmNlIiwidG91Y2hTY3JvbGxBbGxvd2VkIiwibWlycm9yTmVlZHNSZXZlcnQiLCJpc0ludGVyYWN0aW5nIiwiaXNEZWxheUVuZGVkIiwiaXNEaXN0YW5jZVN1cnBhc3NlZCIsImRlbGF5VGltZW91dElkIiwib25Qb2ludGVyRG93biIsInBvaW50ZXIiLCJtaXJyb3IiLCJzdGFydERlbGF5IiwiaGFuZGxlRGlzdGFuY2VTdXJwYXNzZWQiLCJvblBvaW50ZXJNb3ZlIiwiZGlzdGFuY2VTcSIsImF1dG9TY3JvbGxlciIsIm9uUG9pbnRlclVwIiwidHJ5U3RvcERyYWciLCJoYW5kbGVEZWxheUVuZCIsInRyeVN0YXJ0RHJhZyIsInN0b3BEcmFnIiwic2V0SWdub3JlTW92ZSIsIk9mZnNldFRyYWNrZXIiLCJvcmlnUmVjdCIsImNvbXB1dGVMZWZ0IiwiY29tcHV0ZVRvcCIsImlzV2l0aGluQ2xpcHBpbmciLCJpc0lnbm9yZWRDbGlwcGluZyIsIm5vZGUiLCJIaXREcmFnZ2luZyIsImRyYWdnaW5nIiwiZHJvcHBhYmxlU3RvcmUiLCJ1c2VTdWJqZWN0Q2VudGVyIiwicmVxdWlyZUluaXRpYWwiLCJpbml0aWFsSGl0IiwibW92aW5nSGl0IiwiZmluYWxIaXQiLCJoYW5kbGVQb2ludGVyRG93biIsInByZXBhcmVIaXRzIiwicHJvY2Vzc0ZpcnN0Q29vcmQiLCJoYW5kbGVEcmFnU3RhcnQiLCJoYW5kbGVEcmFnTW92ZSIsImhhbmRsZVBvaW50ZXJVcCIsInJlbGVhc2VIaXRzIiwiaGFuZGxlRHJhZ0VuZCIsIm9yaWdQb2ludCIsImFkanVzdGVkUG9pbnQiLCJzdWJqZWN0UmVjdCIsInF1ZXJ5SGl0Rm9yT2Zmc2V0Iiwic2xpY2VkU3ViamVjdFJlY3QiLCJjb29yZEFkanVzdCIsImZvcmNlSGFuZGxlIiwiaGl0IiwiaXNIaXRzRXF1YWwiLCJvZmZzZXRUcmFja2VycyIsImludGVyYWN0aW9uU2V0dGluZ3MiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiYmVzdEhpdCIsIm9mZnNldFRyYWNrZXIiLCJvcmlnaW5MZWZ0Iiwib3JpZ2luVG9wIiwibGF5ZXIiLCJoaXQwIiwiaGl0MSIsIkRhdGVDbGlja2luZyIsImhpdERyYWdnaW5nIiwiRGF0ZVNlbGVjdGluZyIsImRyYWdTZWxlY3Rpb24iLCJjYW5TZWxlY3QiLCJnZXRDb21wb25lbnRUb3VjaERlbGF5IiwiaGFuZGxlSGl0VXBkYXRlIiwiaXNGaW5hbCIsImlzSW52YWxpZCIsImpvaW5IaXRzSW50b1NlbGVjdGlvbiIsImRhdGVTcGFuMCIsImRhdGVTcGFuMSIsImRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMSIsIkV2ZW50RHJhZ2dpbmciLCJzdWJqZWN0U2VnIiwicmVsZXZhbnRFdmVudHMiLCJyZWNlaXZpbmdDYWxlbmRhciIsInZhbGlkTXV0YXRpb24iLCJtdXRhdGVkUmVsZXZhbnRFdmVudHMiLCJvcmlnVGFyZ2V0IiwiaW5pdGlhbENhbGVuZGFyIiwiZ2V0Q29tcG9uZW50VG91Y2hEZWxheSQxIiwicmVjZWl2aW5nQ29tcG9uZW50IiwiY29tcHV0ZUV2ZW50TXV0YXRpb24iLCJkaXNwbGF5RHJhZyIsImluaXRpYWxDYWxlbmRhcl8xIiwiaW5pdGlhbFZpZXciLCJyZWxldmFudEV2ZW50c18xIiwiY2xlYXJEcmFnIiwidHJhbnNmb3JtZWQiLCJldmVudERyb3BBcmciLCJvbGRFdmVudCIsInJldmVydCIsImRyYWdnZWRFbCIsImRyb3BBcmciLCJTRUxFQ1RPUiIsIm5leHRDYWxlbmRhciIsInByZXZDYWxlbmRhciIsIm1hc3NhZ2VycyIsIm1hc3NhZ2Vyc18xIiwibWFzc2FnZXIiLCJFdmVudERyYWdnaW5nJDEiLCJkcmFnZ2luZ1NlZyIsInF1ZXJ5U2VnIiwiY29tcHV0ZU11dGF0aW9uIiwicHJldkV2ZW50IiwiaXNGcm9tU3RhcnQiLCJ0cmFuc2Zvcm1zIiwidHJhbnNmb3Jtc18xIiwiVW5zZWxlY3RBdXRvIiwiaXNSZWNlbnRQb2ludGVyRGF0ZVNlbGVjdCIsIm9uU2VsZWN0Iiwic2VsZWN0SW5mbyIsIm9uRG9jdW1lbnRQb2ludGVyVXAiLCJkb2N1bWVudFBvaW50ZXIiLCJ1bnNlbGVjdENhbmNlbCIsIkV4dGVybmFsRWxlbWVudERyYWdnaW5nIiwic3VwcGxpZWREcmFnTWV0YSIsImRyb3BwYWJsZUV2ZW50IiwiZHJhZ01ldGEiLCJidWlsZERyYWdNZXRhIiwiY2FuRHJvcEVsT25DYWxlbmRhciIsImNvbXB1dGVFdmVudEZvckRhdGVTcGFuIiwiZmluYWxWaWV3IiwiZ2V0RHJhZ01ldGFGcm9tRWwiLCJkZWZQcm9wcyIsImdldEVtYmVkZGVkRWxEYXRhIiwiZGF0YUF0dHJQcmVmaXgiLCJwcmVmaXhlZE5hbWUiLCJFeHRlcm5hbERyYWdnYWJsZSIsIml0ZW1TZWxlY3RvciIsImFwcGVuZFRvIiwiZXZlbnREYXRhIiwiSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmciLCJtaXJyb3JTZWxlY3RvciIsImN1cnJlbnRNaXJyb3JFbCIsImhhbmRsZVBvaW50ZXJNb3ZlIiwiVGhpcmRQYXJ0eURyYWdnYWJsZSIsImNvbnRhaW5lck9yU2V0dGluZ3MiLCJtYWluIiwibWFzc2FnZUV2ZW50RHJhZ011dGF0aW9uIiwiZXZlbnRNdXRhdGlvbiIsInJlc291cmNlMCIsInJlc291cmNlMSIsInJlc291cmNlTXV0YXRpb24iLCJtYXRjaFJlc291cmNlSWQiLCJzZXRSZXNvdXJjZUlkIiwiYXBwbHlFdmVudERlZk11dGF0aW9uIiwiY29tcHV0ZVJlc291cmNlRWRpdGFibGUiLCJyZXNvdXJjZUlkcyIsInJlc291cmNlRWRpdGFibGUiLCJ0cmFuc2Zvcm1FdmVudERyb3AiLCJvbGRSZXNvdXJjZSIsImdldFJlc291cmNlQnlJZCIsIm5ld1Jlc291cmNlIiwiUmVzb3VyY2VEYXRhQWRkZXIiLCJmaWx0ZXJSZXNvdXJjZXMiLCJjYWxlbmRhclByb3BzIiwibmVlZHNSZXNvdXJjZURhdGEiLCJyZXNvdXJjZVN0b3JlIiwicmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zIiwiZG9GaWx0ZXJSZXNvdXJjZXNXaXRoRXZlbnRzIiwiaW5zdGFuY2VzSW5SYW5nZSIsImZpbHRlckV2ZW50SW5zdGFuY2VzSW5SYW5nZSIsImhhc0V2ZW50c18xIiwiY29tcHV0ZUhhc0V2ZW50cyIsImNvbXB1dGVBbmNlc3Rvckhhc0V2ZW50cyIsImV2ZW50SW5zdGFuY2VzIiwiaGFzRXZlbnRzIiwicGFyZW50SWQiLCJSZXNvdXJjZUV2ZW50Q29uZmlnQWRkZXIiLCJidWlsZFJlc291cmNlRXZlbnRVaXMiLCJpbmplY3RSZXNvdXJjZUV2ZW50VWlzIiwicmVzb3VyY2VFdmVudFVpcyIsImluamVjdFJlc291cmNlRXZlbnRVaSIsIm9yaWdFdmVudFVpIiwidHJhbnNmb3JtSXNEcmFnZ2FibGUiLCJSRVNPVVJDRV9TT1VSQ0VfUFJPUFMiLCJyZWdpc3RlclJlc291cmNlU291cmNlRGVmIiwiZ2V0UmVzb3VyY2VTb3VyY2VEZWYiLCJkb2VzU291cmNlSWdub3JlUmFuZ2UiLCJwYXJzZVJlc291cmNlU291cmNlIiwicGFyc2VSZXNvdXJjZVNvdXJjZVByb3BzIiwicmVkdWNlUmVzb3VyY2VTb3VyY2UiLCJjcmVhdGVTb3VyY2UiLCJyZXNvdXJjZVNvdXJjZUlucHV0IiwiaGFuZGxlUmFuZ2UiLCJmb3JjZUZldGNoIiwicmVzb3VyY2VTb3VyY2UiLCJfcmVzb3VyY2VzUmVuZGVyZWQiLCJyYXdSZXNvdXJjZXMiLCJSRVNPVVJDRV9QUk9QUyIsIlBSSVZBVEVfSURfUFJFRklYIiwicGFyc2VSZXNvdXJjZSIsInN0b3JlIiwiY2hpbGRJbnB1dCIsImdldFB1YmxpY0lkIiwicmVkdWNlUmVzb3VyY2VTdG9yZSIsInJlY2VpdmVSYXdSZXNvdXJjZXMiLCJhZGRSZXNvdXJjZSIsInJlc291cmNlSGFzaCIsInJlbW92ZVJlc291cmNlIiwic2V0UmVzb3VyY2VQcm9wIiwicHJvcFZhbHVlIiwiZXhpc3RpbmdTdG9yZSIsIm5leHRTdG9yZSIsImFkZGl0aW9ucyIsImNoaWxkUmVzb3VyY2VJZCIsImV4aXN0aW5nUmVzb3VyY2UiLCJyZWR1Y2VSZXNvdXJjZUVudGl0eUV4cGFuc2lvbnMiLCJleHBhbnNpb25zIiwiaXNFeHBhbmRlZCIsInJlc291cmNlc1JlZHVjZXJzIiwiUkVTT1VSQ0VfUkVMQVRFRF9QUk9QUyIsIml0ZW1zIiwicmVzb3VyY2VSZWxhdGVkUHJvcHMiLCJ0cmFuc2Zvcm1EYXRlU2VsZWN0aW9uSm9pbiIsInJlc291cmNlSWQwIiwicmVzb3VyY2VJZDEiLCJhbGxvd0Fjcm9zc1Jlc291cmNlcyIsIlJlc291cmNlQXBpIiwicmF3UmVzb3VyY2UiLCJfcmVzb3VyY2UiLCJnZXRQYXJlbnQiLCJnZXRDaGlsZHJlbiIsInRoaXNSZXNvdXJjZUlkIiwiY2hpbGRBcGlzIiwic2Nyb2xsVG8iLCJmb3JjZWRSb3dJZCIsImdldFJlc291cmNlcyIsInJlc291cmNlQXBpcyIsImdldFRvcExldmVsUmVzb3VyY2VzIiwicmVyZW5kZXJSZXNvdXJjZXMiLCJyZWZldGNoUmVzb3VyY2VzIiwidHJhbnNmb3JtRGF0ZVBvaW50IiwidHJhbnNmb3JtRGF0ZVNwYW4iLCJSZXNvdXJjZVNwbGl0dGVyIiwiaXNQcm9wc1ZhbGlkV2l0aFJlc291cmNlcyIsInNwbGl0dGVyIiwic2V0cyIsInByb3BzXzEiLCJmaWx0ZXJDb25zdHJhaW50cyIsInRyYW5zZm9ybUV4dGVybmFsRGVmIiwidHJhbnNmb3JtRXZlbnRSZXNpemVKb2luIiwic2V0UmVzb3VyY2VzIiwicmVzb3VyY2VzXzEiLCJSRUxFQVNFX0RBVEUiLCJVUEdSQURFX1dJTkRPVyIsIkxJQ0VOU0VfSU5GT19VUkwiLCJQUkVTRVRfTElDRU5TRV9LRVlTIiwiQ1NTIiwiYmFja2dyb3VuZCIsImluamVjdExpY2Vuc2VXYXJuaW5nIiwiaXNJbW11bmVVcmwiLCJpc1ZhbGlkS2V5IiwibWF0Y2giLCJwdXJjaGFzZURhdGUiLCJyZWxlYXNlRGF0ZSIsIm1vY2tTY2hlZHVsZXJSZWxlYXNlRGF0ZSIsIm1pblB1cmNoYXNlRGF0ZSIsImhhbmRsZVJlc291cmNlcyIsIm5ld1NvdXJjZUlucHV0Iiwib2xkU291cmNlSW5wdXQiLCJwdWJsaWNBcmciLCJidWlsZFJlc291cmNlVGV4dEZ1bmMiLCJyZXNvdXJjZVRleHRTZXR0aW5nIiwiUmVzb3VyY2VEYXlIZWFkZXIiLCJkYXRlc0Fib3ZlUmVzb3VyY2VzIiwicmVzb3VyY2VUZXh0RnVuYyIsImRhdGVGb3JtYXQiLCJyZW5kZXJSZXNvdXJjZVJvdyIsInJlbmRlckRheUFuZFJlc291cmNlUm93cyIsInJlbmRlclJlc291cmNlQW5kRGF5Um93cyIsInByb2Nlc3NSZXNvdXJjZUVscyIsImNlbGxIdG1scyIsInJlbmRlclJlc291cmNlQ2VsbCIsImJ1aWxkVHIiLCJkYXRlSHRtbHMiLCJyZXNvdXJjZUh0bWxzIiwicmVzb3VyY2VzXzIiLCJkYXRlc18yIiwiQWJzdHJhY3RSZXNvdXJjZURheVRhYmxlIiwiZGF5VGFibGUiLCJyZXNvdXJjZUluZGV4IiwiUmVzb3VyY2VJbmRleCIsInJvd0NlbGxzIiwiZGF0ZUNvbCIsInJlc291cmNlQ29sIiwiaHRtbEF0dHJzIiwiY29tcHV0ZUNvbCIsIlJlc291cmNlRGF5VGFibGUiLCJkYXRlSSIsInJlc291cmNlSSIsImNvbXB1dGVDb2xSYW5nZXMiLCJkYXRlU3RhcnRJIiwiZGF0ZUVuZEkiLCJEYXlSZXNvdXJjZVRhYmxlIiwiaW5kaWNlc0J5SWQiLCJpZHMiLCJWUmVzb3VyY2VTcGxpdHRlciIsInJlc291cmNlRGF5VGFibGUiLCJOT19TRUdTIiwiVlJlc291cmNlSm9pbmVyIiwiam9pbkRhdGVTZWxlY3Rpb24iLCJqb2luU2VncyIsImpvaW5CdXNpbmVzc0hvdXJzIiwiam9pbkZnRXZlbnRzIiwiam9pbkJnRXZlbnRzIiwiam9pbkV2ZW50RHJhZ3MiLCJqb2luSW50ZXJhY3Rpb25zIiwiam9pbkV2ZW50UmVzaXplcyIsImpvaW5Qcm9wcyIsInByb3BTZXRzIiwiZGF0ZVNlbGVjdGlvblNldHMiLCJidXNpbmVzc0hvdXJzU2V0cyIsImZnRXZlbnRTZXRzIiwiYmdFdmVudFNldHMiLCJzZWdHcm91cHMiLCJyZXNvdXJjZUNudCIsInRyYW5zZm9ybWVkU2VncyIsInRyYW5zZm9ybVNlZyIsIl9kIiwiZXhwYW5kU2VncyIsImZsYXR0ZW5SZXNvdXJjZXMiLCJvcmRlclNwZWNzIiwiYnVpbGRSb3dOb2RlcyIsImdyb3VwU3BlY3MiLCJpc1ZHcm91cGluZyIsImV4cGFuc2lvbkRlZmF1bHQiLCJjb21wbGV4Tm9kZXMiLCJidWlsZEhpZXJhcmNoeSIsImZsYXROb2RlcyIsImZsYXR0ZW5Ob2RlcyIsInJvd1NwYW5zIiwiZGVwdGgiLCJjb21wbGV4Tm9kZSIsImdyb3VwIiwiZmlyc3RSb3dJbmRleCIsInJvd1NwYW5JbmRleCIsImZpcnN0Um93IiwiZmlyc3RSb3dTcGFucyIsImhhc0NoaWxkcmVuIiwicmVzb3VyY2VGaWVsZHMiLCJtYXhEZXB0aCIsInJlc291cmNlTm9kZXMiLCJidWlsZFJlc291cmNlTm9kZXMiLCJidWlsdE5vZGVzIiwicmVzb3VyY2VOb2RlIiwiaW5zZXJ0UmVzb3VyY2VOb2RlIiwibm9kZUhhc2giLCJidWlsZFJlc291cmNlRmllbGRzIiwiaW5zZXJ0UmVzb3VyY2VOb2RlSW5TaWJsaW5ncyIsIm5vZGVzIiwiZ3JvdXBOb2RlIiwiZW5zdXJlR3JvdXBOb2RlcyIsImdyb3VwU3BlYyIsImdyb3VwVmFsdWUiLCJuZXdHcm91cEluZGV4Iiwic2libGluZ3MiLCJpc0dyb3Vwc0VxdWFsIiwiZ3JvdXAwIiwiZ3JvdXAxIiwiUm93Iiwic3ByZWFkc2hlZXRQYXJlbnQiLCJzcHJlYWRzaGVldE5leHRTaWJsaW5nIiwidGltZUF4aXNQYXJlbnQiLCJ0aW1lQXhpc05leHRTaWJsaW5nIiwic3ByZWFkc2hlZXRUciIsInRpbWVBeGlzVHIiLCJ1cGRhdGVFeHBhbmRlckljb24iLCJjbGVhckV4cGFuZGVySWNvbiIsInVwZGF0ZVRyUmVzb3VyY2VJZCIsInRyIiwiR3JvdXBSb3ciLCJfcmVuZGVyQ2VsbHMiLCJyZW5kZXJDZWxscyIsInVucmVuZGVyQ2VsbHMiLCJfdXBkYXRlRXhwYW5kZXJJY29uIiwib25FeHBhbmRlckNsaWNrIiwic3ByZWFkc2hlZXRDb2xDbnQiLCJzcHJlYWRzaGVldENvbnRlbnRFbCIsInJlbmRlclNwcmVhZHNoZWV0Q29udGVudCIsInNwcmVhZHNoZWV0SGVpZ2h0RWwiLCJleHBhbmRlckljb25FbCIsInRpbWVBeGlzSGVpZ2h0RWwiLCJyZW5kZXJDZWxsVGV4dCIsImdldEhlaWdodEVscyIsIlNwcmVhZHNoZWV0Um93IiwiX3JlbmRlclJvdyIsInJlbmRlclJvdyIsInVucmVuZGVyUm93IiwiX3VwZGF0ZVRyUmVzb3VyY2VJZCIsImNvbFNwZWNzIiwibWFpblRkIiwiY29sU3BlYyIsImlzTWFpbiIsInJlbmRlckljb25IdG1sIiwidGQiLCJyb3dzcGFuIiwiaGVpZ2h0RWwiLCJleHBhbmRlckVsIiwiUmVzb3VyY2VSb3ciLCJ0aW1lQXhpcyIsInNwcmVhZHNoZWV0Um93IiwiaW5uZXJDb250YWluZXJFbCIsImxhbmUiLCJUaW1lbGluZUxhbmUiLCJDT0xfTUlOX1dJRFRIIiwiU3ByZWFkc2hlZXRIZWFkZXIiLCJyZXNpemFibGVzIiwiY29sV2lkdGhzIiwidGFibGVFbCIsInJlc2l6YWJsZSIsImNvbFRhZ3MiLCJzdXBlckhlYWRlclRleHQiLCJvIiwiaXNMYXN0IiwidGhFbHMiLCJjb2xFbHMiLCJyZXNpemVyRWxzIiwiaW5pdENvbFJlc2l6aW5nIiwiRWxlbWVudERyYWdnaW5nSW1wbCIsImhhbmRsZUVsIiwiY29sSW5kZXgiLCJzdGFydFdpZHRoIiwiU3ByZWFkc2hlZXQiLCJoZWFkUGFyZW50RWwiLCJib2R5UGFyZW50RWwiLCJIZWFkZXJCb2R5TGF5b3V0IiwiaGVhZGVyRW5oYW5jZWRTY3JvbGxlciIsImhlYWRlclNjcm9sbGVyIiwiZW5oYW5jZWRTY3JvbGwiLCJib2R5RW5oYW5jZWRTY3JvbGxlciIsImJvZHlTY3JvbGxlciIsImNhbnZhcyIsImFwcGx5Q29sV2lkdGhzIiwiYm9keUNvbnRhaW5lckVsIiwiYm9keUNvbEdyb3VwIiwiYm9keVRib2R5IiwicmVuZGVyQ29sVGFncyIsImJvZHlDb2xFbHMiLCJjb2xTcGVjc18xIiwidG90YWxIZWlnaHQiLCJjb2xXaWR0aCIsImhlYWRFbCIsImJvZHlFbCIsInN0eWxlVmFsIiwiTUlOX1JFU09VUkNFX0FSRUFfV0lEVEgiLCJSZXNvdXJjZVRpbWVsaW5lVmlldyIsImlzU3RpY2t5U2Nyb2xsRGlydHkiLCJyb3dOb2RlcyIsInJvd0NvbXBvbmVudHMiLCJyb3dDb21wb25lbnRzQnlJZCIsInJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmdzIiwiaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzIiwiaGFzTmVzdGluZyIsIl91cGRhdGVIYXNOZXN0aW5nIiwidXBkYXRlSGFzTmVzdGluZyIsImFsbENvbFNwZWNzIiwiZGVmYXVsdExhYmVsVGV4dCIsInBsYWluQ29sU3BlY3MiLCJncm91cENvbFNwZWNzIiwiaXNIR3JvdXBpbmciLCJhbGxDb2xTcGVjc18xIiwiaEdyb3VwRmllbGQiLCJhbGxPcmRlclNwZWNzIiwicGxhaW5PcmRlclNwZWNzIiwiYWxsT3JkZXJTcGVjc18xIiwib3JkZXJTcGVjIiwiaXNHcm91cCIsImdyb3VwU3BlY3NfMSIsInJlbmRlclNrZWxldG9uSHRtbCIsInJlc291cmNlQXJlYUhlYWRFbCIsInNldFJlc291cmNlQXJlYVdpZHRoIiwiaW5pdFJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmciLCJtaXNjSGVpZ2h0Iiwic3ByZWFkc2hlZXQiLCJUaW1lQXhpcyIsInRpbWVBeGlzUm93Q29udGFpbmVyIiwidGltZUF4aXNUYm9keSIsImJnRWwiLCJib2R5U2Nyb2xsSm9pbmVyIiwiU2Nyb2xsSm9pbmVyIiwic3ByZWFkc2hlZXRCb2R5U3RpY2t5U2Nyb2xsZXIiLCJTdGlja3lTY3JvbGxlciIsInNsYXRzIiwibmV3Um93Tm9kZXMiLCJkaWZmUm93cyIsInJlbmRlclJvd3MiLCJpc05lc3RpbmciLCJuZXdOb2RlcyIsIm9sZE5vZGVzIiwib2xkTGVuIiwib2xkSW5kZXhIYXNoIiwib2xkSSIsIm5ld0kiLCJuZXdOb2RlIiwib2xkSUZvdW5kIiwicmVtb3ZlUm93cyIsImFkZFJvdyIsInJvd05vZGUiLCJuZXh0Q29tcG9uZW50IiwibmV3Q29tcG9uZW50IiwiYnVpbGRDaGlsZENvbXBvbmVudCIsInN0YXJ0SW5kZXgiLCJvbGRSb3dOb2RlcyIsInJvd0NvbXBvbmVudCIsInNwcmVhZHNoZWV0VGJvZHkiLCJzcHJlYWRzaGVldE5leHQiLCJ0aW1lQXhpc05leHQiLCJmYWxsYmFja0J1c2luZXNzSG91cnMiLCJpc0Jhc2VTaXppbmciLCJzeW5jSGVhZEhlaWdodHMiLCJyb3dTaXppbmdDbnQiLCJ1cGRhdGVSb3dTaXplcyIsInNjcm9sbEpvaW5lciIsInJvd1Bvc2l0aW9ucyIsInNwcmVhZHNoZWV0SGVhZEVsIiwidGltZUF4aXNIZWFkRWwiLCJkaXJ0eVJvd0NvbXBvbmVudHMiLCJlbEFycmF5cyIsImVsQXJyYXlzXzEiLCJlbEFycmF5IiwiZWxBcnJheV8xIiwiZGlydHlSb3dDb21wb25lbnRzXzEiLCJtYXhIZWlnaHRzIiwibWF4SGVpZ2h0IiwiZWxBcnJheV8yIiwicmVzb3VyY2VBcmVhV2lkdGhEcmFnZ2luZyIsInF1ZXJ5UmVzb3VyY2VTY3JvbGwiLCJhcHBseVJlc291cmNlU2Nyb2xsIiwidXBkYXRlU3RpY2t5U2Nyb2xsZXJzIiwic2Nyb2xsZXJUb3AiLCJlbEJvdHRvbSIsInJvd0lkIiwiaW5uZXJUb3AiLCJyb3dSZWN0Iiwicm93SW5kZXgiLCJzbGF0SGl0IiwicG9zaXRpb25Ub0hpdCIsIndpZHRoVmFsIiwicmVzb3VyY2VBcmVhRGl2aWRlckVscyIsImRyYWdTdGFydFdpZHRoIiwidmlld1dpZHRoIiwibmV3V2lkdGgiLCJub2Rlc18xIiwiUmVzb3VyY2VDb21tb25QbHVnaW4iLCJUaW1lbGluZVBsdWdpbiIsInJlc291cmNlVGltZWxpbmUiLCJyZXNvdXJjZXNJbml0aWFsbHlFeHBhbmRlZCIsImV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0IiwicmVzb3VyY2VUaW1lbGluZURheSIsInJlc291cmNlVGltZWxpbmVXZWVrIiwicmVzb3VyY2VUaW1lbGluZU1vbnRoIiwicmVzb3VyY2VUaW1lbGluZVllYXIiLCJTY3JvbGxlckNhbnZhcyIsImd1dHRlcnMiLCJzZXRHdXR0ZXJzIiwic2V0V2lkdGgiLCJzZXRNaW5XaWR0aCIsIm1pbldpZHRoIiwiY2xlYXJXaWR0aCIsIkVuaGFuY2VkU2Nyb2xsZXIiLCJyZXBvcnRTY3JvbGwiLCJpc1Njcm9sbGluZyIsInJlcG9ydFNjcm9sbFN0YXJ0IiwiaXNNb3ZpbmciLCJyZXF1ZXN0TW92aW5nRW5kIiwiaXNUb3VjaGluZyIsInJlcG9ydFRvdWNoU3RhcnQiLCJyZXBvcnRUb3VjaEVuZCIsImlzVG91Y2hTY3JvbGxFbmFibGVkIiwidW5iaW5kUHJldmVudFRvdWNoU2Nyb2xsIiwicmVwb3J0U2Nyb2xsRW5kIiwicmVwb3J0TW92aW5nRW5kIiwiZGlzYWJsZVRvdWNoU2Nyb2xsIiwiYmluZFByZXZlbnRUb3VjaFNjcm9sbCIsImVuYWJsZVRvdWNoU2Nyb2xsIiwicHJldmVudFRvdWNoU2Nyb2xsSGFuZGxlciIsImdldFJ0bFNjcm9sbFN5c3RlbSIsImdldFNjcm9sbEZyb21MZWZ0IiwiX3J0bFNjcm9sbFN5c3RlbSIsImRldGVjdFJ0bFNjcm9sbFN5c3RlbSIsInN5c3RlbSIsIkNsaXBwZWRTY3JvbGxlciIsImlzSFNjcm9sbGJhcnNDbGlwcGVkIiwiaXNWU2Nyb2xsYmFyc0NsaXBwZWQiLCJzY3JvbGxFbCIsIndpZHRocyIsImF4aXMiLCJzY3JvbGxlcnMiLCJzY3JvbGxlciIsImluaXRTY3JvbGxlciIsIm9uU2Nyb2xsIiwiYXNzaWduTWFzdGVyU2Nyb2xsZXIiLCJldk5hbWUiLCJtYXN0ZXJTY3JvbGxlciIsIm90aGVyU2Nyb2xsZXIiLCJ1bmFzc2lnbk1hc3RlclNjcm9sbGVyIiwiYWxsV2lkdGhzIiwibWF4TGVmdCIsIm1heFJpZ2h0IiwibWF4VG9wIiwibWF4Qm90dG9tIiwiYWxsV2lkdGhzXzEiLCJoZWFkZXJDb250YWluZXJFbCIsInZlcnRpY2FsU2Nyb2xsIiwiYm9keUhlaWdodCIsInF1ZXJ5SGVhZEhlaWdodCIsIlRpbWVsaW5lSGVhZGVyIiwidERhdGVQcm9maWxlIiwiY2VsbFJvd3MiLCJsYXN0Um93IiwiaXNDaHJvbm8iLCJsYWJlbEludGVydmFsIiwib25lRGF5Iiwic2xvdENudCIsImNlbGxSb3dzXzEiLCJyb3dDZWxsc18xIiwiY2VsbCIsImhlYWRlckNlbGxDbGFzc05hbWVzIiwiaXNXZWVrU3RhcnQiLCJpc1RpbWVTY2FsZSIsInNwYW5IdG1sIiwic2xhdENvbEVscyIsImlubmVyRWxzIiwiVGltZWxpbmVTbGF0cyIsInNsb3REYXRlcyIsImlzV2Vla1N0YXJ0cyIsInNsYXRDZWxsSHRtbCIsInNsYXRFbHMiLCJvdXRlckNvb3JkQ2FjaGUiLCJpbm5lckNvb3JkQ2FjaGUiLCJpc0VtIiwibm9ybWFsaXplZFJhbmdlIiwic2xhdEluZGV4Iiwic2xhdFdpZHRoIiwicGFydGlhbCIsImxvY2FsU25hcEluZGV4Iiwic25hcHNQZXJTbG90Iiwic25hcER1cmF0aW9uIiwiTUlOX0FVVE9fTEFCRUxTIiwiTUFYX0FVVE9fU0xPVFNfUEVSX0xBQkVMIiwiTUFYX0FVVE9fQ0VMTFMiLCJNQVhfVElNRUxJTkVfU0xPVFMiLCJTVE9DS19TVUJfRFVSQVRJT05TIiwiYnVpbGRUaW1lbGluZURhdGVQcm9maWxlIiwicXVlcnlEdXJhdGlvbk9wdGlvbiIsInZhbGlkYXRlTGFiZWxBbmRTbG90IiwiZW5zdXJlTGFiZWxJbnRlcnZhbCIsImVuc3VyZVNsb3REdXJhdGlvbiIsInJhd0Zvcm1hdHMiLCJjb21wdXRlSGVhZGVyRm9ybWF0cyIsImhlYWRlckZvcm1hdHMiLCJyYXdGb3JtYXQiLCJzbG90VW5pdCIsImVtcGhhc2l6ZVdlZWtzIiwiY3VycmVudFJhbmdlQXMiLCJyYXdTbmFwRHVyYXRpb24iLCJ0aW1lV2luZG93TXMiLCJub3JtYWxpemVkU3RhcnQiLCJub3JtYWxpemVEYXRlIiwibm9ybWFsaXplZEVuZCIsInNuYXBJbmRleCIsInNuYXBEaWZmIiwic25hcERpZmZUb0luZGV4Iiwic25hcEluZGV4VG9EaWZmIiwic25hcENudCIsImJ1aWxkSXNXZWVrU3RhcnRzIiwiYnVpbGRDZWxsUm93cyIsIm5vcm1hbERhdGUiLCJub3JtYWxpemVSYW5nZSIsImRheVJhbmdlIiwidGltZU1zIiwibGFiZWxDbnQiLCJzbG90c1BlckxhYmVsIiwiU1RPQ0tfU1VCX0RVUkFUSU9OU18xIiwidHJ5TGFiZWxJbnRlcnZhbCIsIlNUT0NLX1NVQl9EVVJBVElPTlNfMiIsIlNUT0NLX1NVQl9EVVJBVElPTlNfMyIsInRyeVNsb3REdXJhdGlvbiIsImZvcm1hdDEiLCJmb3JtYXQyIiwid2Vla051bWJlcnNWaXNpYmxlIiwiZm9ybWF0MCIsInByZXZXZWVrTnVtYmVyIiwic2xvdERhdGVzXzEiLCJzbG90RGF0ZSIsIndlZWtOdW1iZXIiLCJmb3JtYXRzIiwicm93VW5pdHMiLCJsZWFkaW5nQ2VsbCIsImlzU3VwZXJSb3ciLCJuZXdDZWxsIiwiYnVpbGRDZWxsT2JqZWN0Iiwid2Vla1N0YXJ0Iiwicm93VW5pdCIsIlRpbWVsaW5lTm93SW5kaWNhdG9yIiwiaGVhZFBhcmVudCIsImJvZHlQYXJlbnQiLCJjb29yZCIsInN0eWxlUHJvcHMiLCJhcnJvd0VsIiwibGluZUVsIiwiU1RJQ0tZX1BST1BfVkFMIiwiY29tcHV0ZVN0aWNreVByb3BWYWwiLCJJU19NU19FREdFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiSVNfU0FGQVJJIiwiU1RJQ0tZX0NMQVNTTkFNRSIsInVzaW5nUmVsYXRpdmUiLCJlbEdlb21zIiwicXVlcnlFbEdlb21zIiwidmlld3BvcnRXaWR0aCIsImVsRGVzdGluYXRpb25zIiwiY29tcHV0ZUVsRGVzdGluYXRpb25zIiwiYXNzaWduUmVsYXRpdmVQb3NpdGlvbnMiLCJhc3NpZ25TdGlja3lQb3NpdGlvbnMiLCJjYW52YXNPcmlnaW4iLCJlbHNfMSIsInBhcmVudEJvdW5kIiwiZWxSZWN0IiwiY29tcHV0ZWRTdHlsZXMiLCJjb21wdXRlZFRleHRBbGlnbiIsInRleHRBbGlnbiIsImludGVuZGVkVGV4dEFsaWduIiwibmF0dXJhbEJvdW5kIiwiaGFzQXR0cmlidXRlIiwidmlld3BvcnRMZWZ0Iiwidmlld3BvcnRUb3AiLCJ2aWV3cG9ydFJpZ2h0IiwiZWxHZW9tIiwiZGVzdExlZnQiLCJkZXN0VG9wIiwic3RpY2t5TGVmdCIsImhlYWRTdGlja3lTY3JvbGxlciIsImJvZHlTdGlja3lTY3JvbGxlciIsIm5vd0luZGljYXRvciIsImRhdGVUb0Nvb3JkIiwiYXBwbHlTbG90V2lkdGgiLCJjb21wdXRlU2xvdFdpZHRoIiwic2xvdFdpZHRoIiwiY29tcHV0ZURlZmF1bHRTbG90V2lkdGgiLCJoZWFkaW5nQ2VsbFdpZHRoIiwiY29udGFpbmVyV2lkdGgiLCJjb250YWluZXJNaW5XaWR0aCIsIm5vbkxhc3RTbG90V2lkdGgiLCJhdmFpbGFibGVXaWR0aCIsImNvbXB1dGVEYXRlU25hcENvdmVyYWdlIiwic25hcERpZmZJbnQiLCJzbmFwQ292ZXJhZ2UiLCJzbG90Q292ZXJhZ2UiLCJzbG90SW5kZXgiLCJyYW5nZVRvQ29vcmRzIiwiVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlciIsIm1hc3RlckNvbnRhaW5lckVsIiwiaXNSZXNpemFibGVGcm9tU3RhcnQiLCJpc1Jlc2l6YWJsZUZyb21FbmQiLCJ0aW1lVGV4dCIsImNvb3JkcyIsInNlZ3NfNCIsImJ1aWxkU2VnTGV2ZWxzIiwiY29tcHV0ZU9mZnNldEZvclNlZ3MiLCJzZWdzXzUiLCJzZWdMZXZlbHMiLCJzZWdzXzYiLCJ1bnBsYWNlZFNlZyIsImFib3ZlIiwibGV2ZWwiLCJpc0xldmVsQ29sbGlzaW9uIiwicGxhY2VkU2VnIiwidGltZVJvd1NlZ3NDb2xsaWRlIiwiYmVsb3dTZWciLCJzZWdzXzciLCJjb21wdXRlT2Zmc2V0Rm9yU2VnIiwic2VnMCIsInNlZzEiLCJUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIiLCJmZ0NvbnRhaW5lckVsIiwiYmdDb250YWluZXJFbCIsInNsaWNlciIsIlRpbWVsaW5lTGFuZVNsaWNlciIsIl9yZW5kZXJFdmVudERyYWciLCJfdW5yZW5kZXJFdmVudERyYWciLCJfcmVuZGVyRXZlbnRSZXNpemUiLCJfdW5yZW5kZXJFdmVudFJlc2l6ZSIsImZpbGxSZW5kZXJlciIsImV2ZW50UmVuZGVyZXIiLCJtaXJyb3JSZW5kZXJlciIsInJlbmRlckJnRXZlbnRzIiwicmVuZGVyRmdFdmVudHMiLCJzbGljZWRQcm9wcyIsInNlZ3NGb3JIaWdobGlnaHQiLCJUaW1lbGluZVZpZXciLCJ0aW1lbGluZSIsInRpbWVsaW5lRGF5IiwidGltZWxpbmVXZWVrIiwidGltZWxpbmVNb250aCIsInRpbWVsaW5lWWVhciJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDbEZNQSxJOzs7QUFDRixrQkFBYztBQUFBOztBQUNWLFNBQUtDLFNBQUwsR0FBaUJDLENBQUMsQ0FBQyxnQ0FBRCxDQUFsQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JELENBQUMsQ0FBQyw4QkFBRCxDQUFqQjtBQUNBLFNBQUtFLFdBQUwsR0FBbUJGLENBQUMsQ0FBQyw4QkFBRCxDQUFwQjtBQUNIOzs7OzZCQUVRO0FBQ1IsV0FBS0QsU0FBTCxDQUFlSSxLQUFmLENBQXFCLFVBQVNDLEVBQVQsRUFBYTtBQUMzQkEsVUFBRSxDQUFDQyxjQUFIO0FBQ0EsYUFBS0osUUFBTCxDQUFjSyxPQUFkLENBQXNCLE9BQXRCO0FBQ0EsYUFBS0osV0FBTCxDQUFpQkssR0FBakIsQ0FBcUIsU0FBckIsRUFBZ0MsTUFBaEM7QUFDQUMsZ0JBQVEsQ0FBQ0MsTUFBVDtBQUdILE9BUEo7QUFRQTs7Ozs7Ozs7Ozs7Ozs7O0FDaEJMO0FBQ0FDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVosRTs7Ozs7Ozs7Ozs7O0FDREM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkQ7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Q0FFQTs7ZUFDNEJDLEVBQUUsQ0FBQ0MsSTtJQUF2QkMsRSxZQUFBQSxFO0lBQUlDLEUsWUFBQUEsRTtJQUFJQyxFLFlBQUFBLEU7SUFBSUMsRyxZQUFBQSxHO0FBSXBCQyxNQUFNLENBQUNDLFFBQUQsQ0FBTixDQUFpQkMsS0FBakIsQ0FBdUIsWUFBVztBQUNqQyxNQUFNQyxRQUFRLEdBQUdyQiw2Q0FBQyxDQUFDLDhCQUFELENBQWxCO0FBQ0EsTUFBTXNCLE1BQU0sR0FBR3RCLDZDQUFDLENBQUMsd0JBQUQsQ0FBaEI7QUFDQSxNQUFNdUIsVUFBVSxHQUFHdkIsNkNBQUMsQ0FBQyxnQ0FBRCxDQUFwQjtBQUNBLE1BQU13QixXQUFXLEdBQUd4Qiw2Q0FBQyxDQUFDLGlDQUFELENBQXJCO0FBQ0EsTUFBTXlCLFVBQVUsR0FBR3pCLDZDQUFDLENBQUMsNEJBQUQsQ0FBcEI7QUFDQSxNQUFNMEIsUUFBUSxHQUFHMUIsNkNBQUMsQ0FBQywwQkFBRCxDQUFsQjtBQUNBLE1BQU0yQixTQUFTLEdBQUczQiw2Q0FBQyxDQUFDLDJCQUFELENBQW5CO0FBQ0EsTUFBTTRCLFFBQVEsR0FBRzVCLDZDQUFDLENBQUMsMEJBQUQsQ0FBbEI7QUFDQSxNQUFNNkIsVUFBVSxHQUFHN0IsNkNBQUMsQ0FBQyw0QkFBRCxDQUFwQjtBQUNBLE1BQU04QixhQUFhLEdBQUc5Qiw2Q0FBQyxDQUFDLDRCQUFELENBQXZCO0FBQ0EsTUFBTStCLGdCQUFnQixHQUFHL0IsNkNBQUMsQ0FBQyx3Q0FBRCxDQUExQjtBQUNBLE1BQU1nQyxhQUFhLEdBQUdoQyw2Q0FBQyxDQUFDLGdDQUFELENBQXZCO0FBQ0EsTUFBTWlDLGFBQWEsR0FBR2pDLDZDQUFDLENBQUMsZ0NBQUQsQ0FBdkI7QUFFQSxNQUFNa0MsWUFBWSxHQUFHbEMsNkNBQUMsQ0FBQyx1Q0FBRCxDQUF0QjtBQUNBLE1BQU1tQyxVQUFVLEdBQUduQyw2Q0FBQyxDQUFDLHFDQUFELENBQXBCO0FBQ0EsTUFBTW9DLFNBQVMsR0FBR3BDLDZDQUFDLENBQUMsbUNBQUQsQ0FBbkI7QUFDQSxNQUFNcUMsVUFBVSxHQUFHckMsNkNBQUMsQ0FBQyxvQ0FBRCxDQUFwQjtBQUNBLE1BQU1zQyxZQUFZLEdBQUd0Qyw2Q0FBQyxDQUFDLHNDQUFELENBQXRCO0FBQ0EsTUFBTXVDLFVBQVUsR0FBR3ZDLDZDQUFDLENBQUMsb0NBQUQsQ0FBcEI7QUFDQSxNQUFNd0MsUUFBUSxHQUFHeEMsNkNBQUMsQ0FBQyxrQ0FBRCxDQUFsQjtBQUNBLE1BQU15QyxZQUFZLEdBQUd6Qyw2Q0FBQyxDQUFDLHNDQUFELENBQXRCO0FBQ0EsTUFBTTBDLFdBQVcsR0FBRzFDLDZDQUFDLENBQUMscUNBQUQsQ0FBckI7QUFDQSxNQUFNMkMsY0FBYyxHQUFHM0MsNkNBQUMsQ0FBQyxtQ0FBRCxDQUF4QjtBQUNBLE1BQU00QyxTQUFTLEdBQUc1Qyw2Q0FBQyxDQUFDLG1DQUFELENBQW5CO0FBQ0EsTUFBTTZDLFdBQVcsR0FBRzdDLDZDQUFDLENBQUMscUNBQUQsQ0FBckI7QUFDQSxNQUFNOEMsU0FBUyxHQUFHOUMsNkNBQUMsQ0FBQyxtQ0FBRCxDQUFuQjtBQUNBLE1BQU0rQyxNQUFNLEdBQUcvQyw2Q0FBQyxDQUFDLGdDQUFELENBQWhCO0FBQ0EsTUFBTWdELE9BQU8sR0FBR2hELDZDQUFDLENBQUMsaUNBQUQsQ0FBakI7QUFDQSxNQUFNaUQsVUFBVSxHQUFHakQsNkNBQUMsQ0FBQywrQkFBRCxDQUFwQjtBQUNBLE1BQU1rRCxTQUFTLEdBQUdsRCw2Q0FBQyxDQUFDLG1DQUFELENBQW5COztBQVFBLFdBQVNtRCxNQUFULENBQWdCL0MsRUFBaEIsRUFBb0JnRCxTQUFwQixFQUErQjtBQUM5QmhELE1BQUUsQ0FBQ0MsY0FBSDs7QUFDQSxRQUFJK0MsU0FBUyxLQUFLLE1BQWxCLEVBQTJCO0FBQzFCcEQsbURBQUMsQ0FBQyw4QkFBRCxDQUFELENBQWtDTSxPQUFsQyxDQUEwQyxPQUExQztBQUNBTixtREFBQyxDQUFDLDhCQUFELENBQUQsQ0FBa0NPLEdBQWxDLENBQXNDLFNBQXRDLEVBQWlELE1BQWpEO0FBQ0E7O0FBQ0QsUUFBSTZDLFNBQVMsS0FBSyxhQUFsQixFQUFrQztBQUNqQ3BELG1EQUFDLENBQUMsaUNBQUQsQ0FBRCxDQUFxQ00sT0FBckMsQ0FBNkMsT0FBN0M7QUFDQU4sbURBQUMsQ0FBQyxxQ0FBRCxDQUFELENBQXlDTyxHQUF6QyxDQUE2QyxTQUE3QyxFQUF3RCxNQUF4RDtBQUNBOztBQUNEQyxZQUFRLENBQUNDLE1BQVQ7QUFDQTs7QUFHRCxXQUFTNEMsWUFBVCxDQUF1QkMsS0FBdkIsRUFBOEI7QUFDN0IsV0FBTyw2QkFBNkJDLElBQTdCLENBQWtDRCxLQUFsQyxDQUFQO0FBQ0E7O0FBRUQsV0FBU0UsMEJBQVQsQ0FBc0NKLFNBQXRDLEVBQWtEO0FBQ2pELFFBQUlLLE9BQU8sR0FBRyxFQUFkO0FBRUEsUUFBSUMsT0FBTyxHQUFHckIsVUFBVSxDQUFDc0IsR0FBWCxFQUFkO0FBQ0EsUUFBSUMsU0FBUyxHQUFHdEIsWUFBWSxDQUFDcUIsR0FBYixFQUFoQjtBQUNBLFFBQUlFLE9BQU8sR0FBR3RCLFVBQVUsQ0FBQ29CLEdBQVgsRUFBZDtBQUNBLFFBQUlMLEtBQUssR0FBR2QsUUFBUSxDQUFDbUIsR0FBVCxFQUFaO0FBQ0EsUUFBSUcsU0FBUyxHQUFHckIsWUFBWSxDQUFDa0IsR0FBYixHQUFtQkksSUFBbkIsRUFBaEI7QUFDQSxRQUFJQyxRQUFRLEdBQUd0QixXQUFXLENBQUNpQixHQUFaLEdBQWtCSSxJQUFsQixFQUFmO0FBQ0EsUUFBSUUsV0FBVyxHQUFHdEIsY0FBYyxDQUFDZ0IsR0FBZixFQUFsQjtBQUNBLFFBQUlPLE1BQU0sR0FBR3RCLFNBQVMsQ0FBQ2UsR0FBVixFQUFiO0FBQ0EsUUFBSVEsUUFBUSxHQUFHdEIsV0FBVyxDQUFDYyxHQUFaLEVBQWY7QUFDQSxRQUFJUyxNQUFNLEdBQUd0QixTQUFTLENBQUNhLEdBQVYsR0FBZ0JJLElBQWhCLEVBQWI7QUFDQSxRQUFJTSxHQUFHLEdBQUd0QixNQUFNLENBQUNZLEdBQVAsR0FBYUksSUFBYixFQUFWO0FBQ0EsUUFBSU8sSUFBSSxHQUFHdEIsT0FBTyxDQUFDVyxHQUFSLEdBQWNJLElBQWQsRUFBWDtBQUNBLFFBQUlRLE9BQU8sR0FBR3RCLFVBQVUsQ0FBQ1UsR0FBWCxFQUFkOztBQUVBLFFBQUlELE9BQU8sS0FBSyxFQUFoQixFQUFxQjtBQUNwQmMsaUJBQVcsQ0FBRW5DLFVBQUYsRUFBY3ZCLEVBQUUsQ0FBRSwrQkFBRixFQUFtQyxlQUFuQyxDQUFoQixDQUFYO0FBQ0EsYUFBTyxLQUFQO0FBQ0EsS0FIRCxNQUlLO0FBQ0oyRCxtQkFBYSxDQUFFcEMsVUFBRixDQUFiO0FBQ0FvQixhQUFPLENBQUNpQixXQUFSLEdBQXNCckMsVUFBdEI7QUFDQTs7QUFFRCxRQUFJdUIsU0FBUyxLQUFLLEVBQWxCLEVBQXVCO0FBQ3RCWSxpQkFBVyxDQUFFbEMsWUFBRixFQUFnQnhCLEVBQUUsQ0FBRSxpQ0FBRixFQUFxQyxlQUFyQyxDQUFsQixDQUFYO0FBQ0EsYUFBTyxLQUFQO0FBQ0EsS0FIRCxNQUlLO0FBQ0oyRCxtQkFBYSxDQUFFbkMsWUFBRixDQUFiO0FBQ0FtQixhQUFPLENBQUNrQixTQUFSLEdBQW9CckMsWUFBcEI7QUFDQTs7QUFHRCxRQUFJc0MsS0FBSyxDQUFFZixPQUFGLENBQUwsSUFBb0JBLE9BQU8sS0FBSyxFQUFwQyxFQUF5QztBQUN4Q1csaUJBQVcsQ0FBQ2pDLFVBQUQsRUFBYXpCLEVBQUUsQ0FBRSxnQ0FBRixFQUFvQyxlQUFwQyxDQUFmLENBQVg7QUFDQSxhQUFPLEtBQVA7QUFDQSxLQUhELE1BSUs7QUFDSjJELG1CQUFhLENBQUVsQyxVQUFGLENBQWI7QUFDQWtCLGFBQU8sQ0FBQ0ksT0FBUixHQUFrQkEsT0FBbEI7QUFDQTs7QUFFRCxRQUFJUCxLQUFLLEtBQUssRUFBVixJQUFnQkQsWUFBWSxDQUFFQyxLQUFGLENBQWhDLEVBQTRDO0FBQzNDRyxhQUFPLENBQUNILEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0FtQixtQkFBYSxDQUFFakMsUUFBRixDQUFiO0FBQ0EsS0FIRCxNQUlLO0FBQ0pnQyxpQkFBVyxDQUFDaEMsUUFBRCxFQUFXMUIsRUFBRSxDQUFFLGdDQUFGLEVBQW9DLGVBQXBDLENBQWIsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBOztBQUVELFFBQUksT0FBT2dELFNBQVAsS0FBcUIsUUFBekIsRUFBb0M7QUFDbkNXLG1CQUFhLENBQUVoQyxZQUFGLENBQWI7O0FBQ0EsVUFBSXFCLFNBQVMsS0FBSyxFQUFsQixFQUF1QjtBQUN0QkwsZUFBTyxDQUFDb0IsVUFBUixHQUFxQmYsU0FBckI7QUFDQTtBQUNELEtBTEQsTUFNSztBQUNKVSxpQkFBVyxDQUFFL0IsWUFBRixFQUFnQjNCLEVBQUUsQ0FBQyw2Q0FBRCxFQUFnRCxlQUFoRCxDQUFsQixDQUFYO0FBQ0EsYUFBTyxLQUFQO0FBQ0E7O0FBRUQsUUFBS2tELFFBQVEsS0FBSyxFQUFiLElBQW1CLE9BQU9BLFFBQVAsS0FBb0IsUUFBNUMsRUFBdUQ7QUFDdERRLGlCQUFXLENBQUU5QixXQUFGLEVBQWU1QixFQUFFLENBQUMsMERBQUQsRUFBNkQsZUFBN0QsQ0FBakIsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBLEtBSEQsTUFJSztBQUNKMkQsbUJBQWEsQ0FBRS9CLFdBQUYsQ0FBYjtBQUNBZSxhQUFPLENBQUNxQixTQUFSLEdBQW9CZCxRQUFwQjtBQUNBOztBQUVEUCxXQUFPLENBQUNRLFdBQVIsR0FBc0JBLFdBQXRCO0FBRUFSLFdBQU8sQ0FBQ1MsTUFBUixHQUFpQkEsTUFBakI7O0FBRUEsUUFBSUMsUUFBUSxLQUFLLEVBQWpCLEVBQXNCO0FBQ3JCTSxtQkFBYSxDQUFFNUIsV0FBRixDQUFiO0FBQ0FZLGFBQU8sQ0FBQ1UsUUFBUixHQUFtQkEsUUFBbkI7QUFDQTs7QUFFRCxRQUFJLE9BQU9DLE1BQVAsS0FBa0IsUUFBdEIsRUFBaUM7QUFDaENLLG1CQUFhLENBQUUzQixTQUFGLENBQWI7QUFDQVcsYUFBTyxDQUFDVyxNQUFSLEdBQWlCQSxNQUFqQjtBQUNBLEtBSEQsTUFJSztBQUNKSSxpQkFBVyxDQUFFMUIsU0FBRixFQUFhaEMsRUFBRSxDQUFDLCtCQUFELEVBQWtDLGVBQWxDLENBQWYsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBOztBQUVELFFBQUksT0FBT3VELEdBQVAsS0FBZSxRQUFmLElBQTJCLE9BQU9BLEdBQVAsS0FBZSxRQUE5QyxFQUF5RDtBQUN4REksbUJBQWEsQ0FBRTFCLE1BQUYsQ0FBYjtBQUNBVSxhQUFPLENBQUNZLEdBQVIsR0FBY0EsR0FBZDtBQUNBLEtBSEQsTUFJSztBQUNKRyxpQkFBVyxDQUFFekIsTUFBRixFQUFVakMsRUFBRSxDQUFDLHdDQUFELEVBQTJDLGVBQTNDLENBQVosQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBOztBQUVELFFBQUksT0FBT3dELElBQVAsS0FBZ0IsUUFBcEIsRUFBK0I7QUFDOUJHLG1CQUFhLENBQUV6QixPQUFGLENBQWI7QUFDQVMsYUFBTyxDQUFDYSxJQUFSLEdBQWVBLElBQWY7QUFDQSxLQUhELE1BSUs7QUFDSkUsaUJBQVcsQ0FBRXhCLE9BQUYsRUFBV2xDLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxlQUFqQyxDQUFiLENBQVg7QUFDQSxhQUFPLEtBQVA7QUFDQTs7QUFFRDJDLFdBQU8sQ0FBQ2MsT0FBUixHQUFrQkEsT0FBbEI7QUFDQSxXQUFPZCxPQUFQO0FBRUE7O0FBRUQsV0FBU3NCLG1CQUFULENBQThCM0IsU0FBOUIsRUFBMEM7QUFDekMsUUFBSUssT0FBTyxHQUFHLEVBQWQ7QUFFQSxRQUFJdUIsZUFBZSxHQUFHekQsVUFBVSxDQUFDb0MsR0FBWCxHQUFpQkksSUFBakIsRUFBdEI7QUFDQSxRQUFJa0IsZ0JBQWdCLEdBQUd6RCxXQUFXLENBQUNtQyxHQUFaLEdBQWtCSSxJQUFsQixFQUF2QjtBQUNBLFFBQUltQixlQUFlLEdBQUd6RCxVQUFVLENBQUNrQyxHQUFYLEdBQWlCSSxJQUFqQixFQUF0QjtBQUNBLFFBQUlvQixhQUFhLEdBQUd6RCxRQUFRLENBQUNpQyxHQUFULEdBQWVJLElBQWYsRUFBcEI7QUFDQSxRQUFJcUIsY0FBYyxHQUFHekQsU0FBUyxDQUFDZ0MsR0FBVixHQUFnQkksSUFBaEIsR0FBdUJzQixPQUF2QixDQUErQixHQUEvQixFQUFvQyxHQUFwQyxDQUFyQjtBQUNBLFFBQUlDLGVBQWUsR0FBRzFELFFBQVEsQ0FBQytCLEdBQVQsR0FBZUksSUFBZixFQUF0Qjs7QUFFQSxRQUFLYSxLQUFLLENBQUVJLGVBQWUsQ0FBQ08sUUFBaEIsRUFBRixDQUFMLElBQXVDUCxlQUFlLEtBQUssRUFBaEUsRUFBb0U7QUFDbkVSLGlCQUFXLENBQUNqRCxVQUFELEVBQWFULEVBQUUsQ0FBQyx3Q0FBRCxFQUEyQyxlQUEzQyxDQUFmLENBQVg7QUFDQSxhQUFPLEtBQVA7QUFDQSxLQUhELE1BSUs7QUFDSjJELG1CQUFhLENBQUNsRCxVQUFELENBQWI7QUFDQWtDLGFBQU8sQ0FBQytCLE1BQVIsR0FBaUJSLGVBQWUsQ0FBQ08sUUFBaEIsRUFBakI7QUFDQTs7QUFFRCxRQUFLWCxLQUFLLENBQUVLLGdCQUFGLENBQUwsSUFBNkJBLGdCQUFnQixLQUFLLEVBQXZELEVBQTJEO0FBQzFEVCxpQkFBVyxDQUFDaEQsV0FBRCxFQUFjVixFQUFFLENBQUMsc0NBQUQsRUFBeUMsZUFBekMsQ0FBaEIsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBLEtBSEQsTUFJSztBQUNKMkQsbUJBQWEsQ0FBQ2pELFdBQUQsQ0FBYjtBQUNBaUMsYUFBTyxDQUFDZ0MsS0FBUixHQUFnQlIsZ0JBQWhCO0FBQ0E7O0FBRUQsUUFBS0wsS0FBSyxDQUFFTSxlQUFGLENBQUwsSUFBNEJBLGVBQWUsS0FBSyxFQUFyRCxFQUF5RDtBQUN4RFYsaUJBQVcsQ0FBQy9DLFVBQUQsRUFBYVgsRUFBRSxDQUFDLGdDQUFELEVBQW1DLGVBQW5DLENBQWYsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBLEtBSEQsTUFJSztBQUNKMkQsbUJBQWEsQ0FBQ2hELFVBQUQsQ0FBYjtBQUNBZ0MsYUFBTyxDQUFDaUMsTUFBUixHQUFpQkMsUUFBUSxDQUFDVCxlQUFELENBQXpCO0FBQ0E7O0FBQ0QsUUFBS04sS0FBSyxDQUFFTyxhQUFGLENBQUwsSUFBMEJBLGFBQWEsS0FBSyxFQUFqRCxFQUFxRDtBQUNwRFgsaUJBQVcsQ0FBQzlDLFFBQUQsRUFBV1osRUFBRSxDQUFDLDhCQUFELEVBQWlDLGVBQWpDLENBQWIsQ0FBWDtBQUNBLGFBQU8sS0FBUDtBQUNBLEtBSEQsTUFJSztBQUNKMkQsbUJBQWEsQ0FBQy9DLFFBQUQsQ0FBYjtBQUNBK0IsYUFBTyxDQUFDbUMsSUFBUixHQUFlRCxRQUFRLENBQUNULGVBQUQsQ0FBdkI7QUFDQTs7QUFDRCxRQUFLTixLQUFLLENBQUVRLGNBQUYsQ0FBTCxJQUEyQkEsY0FBYyxLQUFLLEVBQW5ELEVBQXVEO0FBQ3REWixpQkFBVyxDQUFDN0MsU0FBRCxFQUFZYixFQUFFLENBQUMsbUNBQUQsRUFBc0MsZUFBdEMsQ0FBZCxDQUFYO0FBQ0EsYUFBTyxLQUFQO0FBQ0EsS0FIRCxNQUlLO0FBQ0oyRCxtQkFBYSxDQUFDOUMsU0FBRCxDQUFiO0FBQ0E4QixhQUFPLENBQUNvQyxLQUFSLEdBQWdCQyxVQUFVLENBQUNWLGNBQUQsQ0FBMUI7QUFDQTs7QUFDRCxRQUFLLE9BQU9FLGVBQVAsS0FBMkIsUUFBaEMsRUFBMkM7QUFDMUM3QixhQUFPLENBQUNzQyxXQUFSLEdBQXNCVCxlQUF0QjtBQUNBOztBQUNELFFBQUt6RCxVQUFVLENBQUNtRSxFQUFYLENBQWUsVUFBZixDQUFMLEVBQW1DO0FBQ2xDdkMsYUFBTyxDQUFDd0MsTUFBUixHQUFpQixJQUFqQjtBQUNBLEtBRkQsTUFHSztBQUNKeEMsYUFBTyxDQUFDd0MsTUFBUixHQUFpQixLQUFqQjtBQUNBOztBQUNELFdBQU94QyxPQUFQO0FBRUE7O0FBRUQsV0FBU2UsV0FBVCxDQUFxQjBCLEtBQXJCLEVBQTRCQyxPQUE1QixFQUFxQztBQUNwQyxRQUFNQyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csTUFBTixFQUFwQjtBQUNBLFFBQU1DLEtBQUssR0FBR0YsV0FBVyxDQUFDRyxJQUFaLENBQWlCLE9BQWpCLENBQWQ7QUFDQUgsZUFBVyxDQUFDSSxRQUFaLENBQXFCLE9BQXJCO0FBQ0FGLFNBQUssQ0FBQ0csSUFBTixDQUFXTixPQUFYO0FBQ0E7O0FBRUQsV0FBUzFCLGFBQVQsQ0FBdUJ5QixLQUF2QixFQUE4QjtBQUM3QixRQUFNRSxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csTUFBTixFQUFwQjtBQUNBRCxlQUFXLENBQUNJLFFBQVosQ0FBcUIsU0FBckI7QUFDQTs7QUFHRCxNQUFJRSxTQUFTLEdBQUcsSUFBaEI7QUFDQSxNQUFJQyxVQUFVLEdBQUd4RixRQUFRLENBQUN5RixjQUFULENBQXdCLHNCQUF4QixDQUFqQjtBQUNBLE1BQUlDLFFBQVEsR0FBRyxJQUFJQywyREFBSixDQUFhSCxVQUFiLEVBQXlCO0FBQ3ZDSSx1QkFBbUIsRUFBRSwrQkFEa0I7QUFFdkNDLFdBQU8sRUFBRSxDQUFFQyxpRUFBRixFQUF1QkMsdUVBQXZCLENBRjhCO0FBR3ZDQyxlQUFXLEVBQUUsR0FIMEI7QUFJdkNDLHFCQUFpQixFQUFFLEtBSm9CO0FBS3ZDQyxnQkFBWSxFQUFFLE9BTHlCO0FBTXZDQyxjQUFVLEVBQUUsT0FOMkI7QUFNbEI7QUFDckJDLFVBQU0sRUFBRWIsU0FQK0I7QUFRdkNjLFVBQU0sRUFBRTtBQUNQQyxVQUFJLEVBQUUsNENBREM7QUFFUEMsWUFBTSxFQUFFLE9BRkQ7QUFHUEMsV0FBSyxFQUFFO0FBSEEsS0FSK0I7QUFhdkNDLGlCQUFhLEVBQUU7QUFDZEMsYUFBTyxFQUFFO0FBQ1JwQixZQUFJLEVBQUUzRixFQUFFLENBQUMsVUFBRCxFQUFhLGVBQWIsQ0FEQTtBQUVSWCxhQUFLLEVBQUUsaUJBQVc7QUFDakJILHVEQUFDLENBQUMsOEJBQUQsQ0FBRCxDQUFrQ08sR0FBbEMsQ0FBc0MsU0FBdEMsRUFBaUQsTUFBakQ7QUFDQTtBQUpPLE9BREs7QUFRZHVILG9CQUFjLEVBQUU7QUFDZnJCLFlBQUksRUFBRTNGLEVBQUUsQ0FBQyxpQkFBRCxFQUFvQixlQUFwQixDQURPO0FBRWZYLGFBQUssRUFBRSxpQkFBVztBQUNqQmdDLG9CQUFVLENBQUM1QixHQUFYLENBQWUsU0FBZixFQUEwQixNQUExQjtBQUNBO0FBSmM7QUFSRixLQWJ3QjtBQTRCdkN3SCxlQUFXLEVBQUUsdUJBNUIwQjtBQTZCdkNDLGNBQVUsRUFBRSxJQTdCMkI7QUE4QnZDQyxnQkFBWSxFQUFFLElBOUJ5QjtBQStCdkNDLFlBQVEsRUFBRSxJQS9CNkI7QUErQnZCO0FBQ2hCQyxtQkFBZSxFQUFFLENBQ2hCO0FBQ0NDLGVBQVMsRUFBRXRILEVBQUUsQ0FBRSxNQUFGLEVBQVUsZUFBVixDQURkO0FBRUN1SCxXQUFLLEVBQUUsT0FGUjtBQUdDQyxXQUFLLEVBQUU7QUFIUixLQURnQixFQU1oQjtBQUNDRixlQUFTLEVBQUV0SCxFQUFFLENBQUUsTUFBRixFQUFVLGVBQVYsQ0FEZDtBQUVDdUgsV0FBSyxFQUFFO0FBRlIsS0FOZ0IsQ0FoQ3NCO0FBMkN2Q0UsaUJBQWEsRUFBRSxPQTNDd0I7QUE0Q3ZDQyxhQUFTLEVBQUU7QUFDVkMsU0FBRyxFQUFFQyxTQUFTLENBQUNDLE9BQVYsR0FBb0IsdUJBRGY7QUFFVkMsWUFBTSxFQUFFO0FBRkUsS0E1QzRCO0FBZ0R2Q0Msa0JBQWMsRUFBRSx3QkFBVUMsVUFBVixFQUF1QjtBQUN0Q0EsZ0JBQVUsQ0FBQ0MsRUFBWCxDQUFjQyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxZQUFVO0FBRWpEaEoscURBQUMsQ0FBQ2lKLElBQUYsQ0FBTztBQUNOQyxjQUFJLEVBQUUsS0FEQTtBQUVOQyxrQkFBUSxFQUFFLE1BRko7QUFHTkMscUJBQVcsRUFBRSxrQkFIUDtBQUlOWCxhQUFHLEVBQUVDLFNBQVMsQ0FBQ0MsT0FBVixHQUFvQix3QkFBcEIsR0FBK0NHLFVBQVUsQ0FBQ08sUUFBWCxDQUFvQkMsRUFKbEU7QUFLTkMsaUJBQU8sRUFBRSxpQkFBVUMsSUFBVixFQUFnQjtBQUN4QmxJLGtCQUFNLENBQUNxQyxHQUFQLENBQVc2RixJQUFJLENBQUNGLEVBQWhCO0FBQ0EvSCxzQkFBVSxDQUFDb0MsR0FBWCxDQUFlNkYsSUFBSSxDQUFDaEUsTUFBcEI7QUFDQS9ELHNCQUFVLENBQUNrQyxHQUFYLENBQWU2RixJQUFJLENBQUM5RCxNQUFwQjtBQUNBaEUsb0JBQVEsQ0FBQ2lDLEdBQVQsQ0FBYTZGLElBQUksQ0FBQzVELElBQWxCO0FBQ0FwRSx1QkFBVyxDQUFDbUMsR0FBWixDQUFnQjZGLElBQUksQ0FBQy9ELEtBQXJCO0FBQ0E5RCxxQkFBUyxDQUFDZ0MsR0FBVixDQUFjNkYsSUFBSSxDQUFDM0QsS0FBbkI7QUFDQWpFLG9CQUFRLENBQUMrQixHQUFULENBQWE2RixJQUFJLENBQUN6RCxXQUFsQjs7QUFDQSxnQkFBSXlELElBQUksQ0FBQ3ZELE1BQUwsSUFBZSxDQUFuQixFQUFzQjtBQUNyQnBFLHdCQUFVLENBQUM0SCxJQUFYLENBQWdCLFNBQWhCLEVBQTJCLElBQTNCO0FBQ0EsYUFGRCxNQUdLO0FBQ0o1SCx3QkFBVSxDQUFDNEgsSUFBWCxDQUFnQixTQUFoQixFQUEyQixLQUEzQjtBQUNBOztBQUVEekoseURBQUMsQ0FBQyw4QkFBRCxDQUFELENBQWtDTyxHQUFsQyxDQUFzQyxTQUF0QyxFQUFpRCxNQUFqRDtBQUNBdUIseUJBQWEsQ0FBQzBFLFFBQWQsQ0FBdUIsT0FBdkI7QUFDQXpFLDRCQUFnQixDQUFDeUUsUUFBakIsQ0FBMEIsTUFBMUI7QUFDQXhFLHlCQUFhLENBQUN3RSxRQUFkLENBQXVCLE1BQXZCO0FBRUEsV0F6Qks7QUEwQk5rRCxlQUFLLEVBQUUsZUFBVUYsSUFBVixFQUFnQjtBQUN0QkcsaUJBQUssQ0FBQzdJLEVBQUUsQ0FBQywwQ0FBRCxFQUE2QyxlQUE3QyxDQUFILENBQUw7QUFDQSxXQTVCSztBQTZCTjhJLG9CQUFVLEVBQUUsb0JBQVVDLEdBQVYsRUFBZTtBQUMxQkEsZUFBRyxDQUFDQyxnQkFBSixDQUFxQixZQUFyQixFQUFtQ3BCLFNBQVMsQ0FBQ3FCLFNBQTdDO0FBQ0EsV0EvQks7QUFnQ05QLGNBQUksRUFBRTtBQWhDQSxTQUFQO0FBbUNBLE9BckNEO0FBc0NBLEtBdkZzQztBQXdGdkNRLFlBQVEsRUFBRSxLQXhGNkI7QUF5RnZDQyxVQUFNLEVBQUUsQ0FDUDtBQUFDWCxRQUFFLEVBQUUsR0FBTDtBQUFVWSxnQkFBVSxFQUFFLElBQXRCO0FBQTRCQyxXQUFLLEVBQUUsV0FBbkM7QUFBZ0RDLFdBQUssRUFBRSxxQkFBdkQ7QUFBOEVDLFNBQUcsRUFBRSxxQkFBbkY7QUFBMEdDLFdBQUssRUFBRTtBQUFqSCxLQURPLEVBRVA7QUFBQ2hCLFFBQUUsRUFBRSxHQUFMO0FBQVVZLGdCQUFVLEVBQUUsSUFBdEI7QUFBNEJDLFdBQUssRUFBRSxZQUFuQztBQUFpREMsV0FBSyxFQUFFLHFCQUF4RDtBQUErRUMsU0FBRyxFQUFFO0FBQXBGLEtBRk8sQ0F6RitCO0FBNkZ2Q0UsY0FBVSxFQUFFLG9CQUFTQyxJQUFULEVBQWU7QUFFMUI5SixhQUFPLENBQUNDLEdBQVIsQ0FBWSxZQUFZNkosSUFBSSxDQUFDQyxLQUFMLENBQVdOLEtBQW5DO0FBQ0EsS0FoR3NDO0FBaUd2Q08sVUFBTSxFQUFFLGdCQUFTQyxHQUFULEVBQWM7QUFDckIsVUFBSWpILE9BQU8sR0FBR2lILEdBQUcsQ0FBQ1AsS0FBSixDQUFVUSxXQUFWLEdBQXdCQyxNQUF4QixDQUErQixDQUEvQixFQUFrQyxFQUFsQyxDQUFkO0FBQ0EsVUFBSWpILFNBQVMsR0FBRytHLEdBQUcsQ0FBQ04sR0FBSixDQUFRTyxXQUFSLEdBQXNCQyxNQUF0QixDQUE2QixDQUE3QixFQUFnQyxFQUFoQyxDQUFoQjtBQUVBMUksZ0JBQVUsQ0FBQzVCLEdBQVgsQ0FBZSxTQUFmLEVBQTBCLE1BQTFCO0FBQ0E2QixlQUFTLENBQUN1QixHQUFWLENBQWVnSCxHQUFHLENBQUN0QixRQUFKLENBQWFDLEVBQTVCO0FBQ0FqSCxnQkFBVSxDQUFDc0IsR0FBWCxDQUFnQkQsT0FBaEI7QUFDQXBCLGtCQUFZLENBQUNxQixHQUFiLENBQWtCQyxTQUFsQjtBQUVBbEQsYUFBTyxDQUFDQyxHQUFSLENBQ0MsaUJBREQsRUFFQ2dLLEdBQUcsQ0FBQ0csUUFGTCxFQUdDSCxHQUFHLENBQUNJLE1BSEwsRUFJQ0osR0FBRyxDQUFDdEIsUUFBSixHQUFlc0IsR0FBRyxDQUFDdEIsUUFBSixDQUFhQyxFQUE1QixHQUFpQyxlQUpsQztBQU1BLEtBaEhzQztBQWlIdkMwQixhQUFTLEVBQUUsbUJBQVNMLEdBQVQsRUFBYztBQUN4QnhJLGdCQUFVLENBQUM1QixHQUFYLENBQWUsU0FBZixFQUEwQixNQUExQjtBQUNBLFVBQUkwSyxJQUFJLEdBQUdOLEdBQUcsQ0FBQ00sSUFBSixDQUFTTCxXQUFULEdBQXVCQyxNQUF2QixDQUE4QixDQUE5QixFQUFpQyxFQUFqQyxDQUFYO0FBQ0F6SSxlQUFTLENBQUN1QixHQUFWLENBQWVnSCxHQUFHLENBQUN0QixRQUFKLENBQWFDLEVBQTVCO0FBQ0FqSCxnQkFBVSxDQUFDc0IsR0FBWCxDQUFnQnNILElBQWhCO0FBQ0F2SyxhQUFPLENBQUNDLEdBQVIsQ0FDQyxXQURELEVBRUNnSyxHQUFHLENBQUNNLElBRkwsRUFHQ04sR0FBRyxDQUFDdEIsUUFBSixHQUFlc0IsR0FBRyxDQUFDdEIsUUFBSixDQUFhQyxFQUE1QixHQUFpQyxlQUhsQyxFQUlDcUIsR0FBRyxDQUFDTSxJQUFKLENBQVNMLFdBQVQsRUFKRCxFQUtDRCxHQUFHLENBQUNNLElBQUosQ0FBUzFGLFFBQVQsRUFMRDtBQU9BO0FBN0hzQyxHQUF6QixDQUFmO0FBK0hBc0IsVUFBUSxDQUFDcUUsTUFBVDtBQUVBbEwsK0NBQUMsQ0FBQywyQkFBRCxDQUFELENBQStCRyxLQUEvQixDQUFxQyxZQUFXO0FBQy9DOEIsaUJBQWEsQ0FBQzNCLE9BQWQsQ0FBc0IsT0FBdEI7QUFDQSxHQUZEO0FBSUFOLCtDQUFDLENBQUMsa0NBQUQsQ0FBRCxDQUFzQ0csS0FBdEMsQ0FBNEMsWUFBVztBQUN0RCtCLGdCQUFZLENBQUM1QixPQUFiLENBQXFCLE9BQXJCO0FBQ0EsR0FGRDtBQUlBTiwrQ0FBQyxDQUFDLDRCQUFELENBQUQsQ0FBZ0NHLEtBQWhDLENBQXNDLFVBQVNDLEVBQVQsRUFBYTtBQUNsREEsTUFBRSxDQUFDQyxjQUFIO0FBSUMsUUFBSThLLE9BQU8sR0FBR3BHLG1CQUFtQixDQUFFLFFBQUYsQ0FBakM7O0FBQ0EsUUFBR29HLE9BQUgsRUFBWTtBQUVWbkwsbURBQUMsQ0FBQ2lKLElBQUYsQ0FBTztBQUNSQyxZQUFJLEVBQUUsTUFERTtBQUVSQyxnQkFBUSxFQUFFLE1BRkY7QUFHUkMsbUJBQVcsRUFBRSxrQkFITDtBQUlSWCxXQUFHLEVBQUVDLFNBQVMsQ0FBQ0MsT0FBVixHQUFvQix1QkFKakI7QUFLUlksZUFBTyxFQUFFLGlCQUFVQyxJQUFWLEVBQWdCO0FBQ3hCLGNBQUlELE9BQU8sR0FBR3ZKLDZDQUFDLENBQUMsNkJBQUQsQ0FBZjtBQUNBdUosaUJBQU8sQ0FBQy9DLFFBQVIsQ0FBaUIsU0FBakI7QUFDQStDLGlCQUFPLENBQUM5QyxJQUFSLENBQWMzRixFQUFFLENBQUMsNkJBQUQsRUFBZ0MsZUFBaEMsQ0FBaEI7QUFDQXNLLG9CQUFVLENBQUMsWUFBVztBQUNyQm5KLHlCQUFhLENBQUMzQixPQUFkLENBQXNCLE9BQXRCO0FBQ0FFLG9CQUFRLENBQUNDLE1BQVQ7QUFDQSxXQUhTLEVBR1AsSUFITyxDQUFWO0FBTUEsU0FmTztBQWdCUmlKLGFBQUssRUFBRSxlQUFVRixJQUFWLEVBQWdCO0FBQ3RCLGNBQUk2QixHQUFHLEdBQUc3QixJQUFJLENBQUM4QixZQUFMLENBQWtCbkYsT0FBNUI7QUFDQSxjQUFJb0YsV0FBVyxHQUFHdkwsNkNBQUMsQ0FBQywyQkFBRCxDQUFuQjtBQUNBdUwscUJBQVcsQ0FBQy9FLFFBQVosQ0FBcUIsT0FBckI7QUFDQStFLHFCQUFXLENBQUM5RSxJQUFaLENBQWlCNEUsR0FBakI7QUFDQSxTQXJCTztBQXNCUnpCLGtCQUFVLEVBQUUsb0JBQVVDLEdBQVYsRUFBZTtBQUMxQkEsYUFBRyxDQUFDQyxnQkFBSixDQUFxQixZQUFyQixFQUFtQ3BCLFNBQVMsQ0FBQ3FCLFNBQTdDO0FBQ0EsU0F4Qk87QUF5QlJQLFlBQUksRUFBRWdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTixPQUFmO0FBekJFLE9BQVA7QUEyQkY7QUFFRCxHQXJDRDtBQXVDQWxKLGVBQWEsQ0FBQzlCLEtBQWQsQ0FBb0IsVUFBU0MsRUFBVCxFQUFhO0FBQUMrQyxVQUFNLENBQUMvQyxFQUFELEVBQUssTUFBTCxDQUFOO0FBQW9CLEdBQXREO0FBQ0E4QixjQUFZLENBQUMvQixLQUFiLENBQW1CLFVBQVNDLEVBQVQsRUFBYTtBQUFDK0MsVUFBTSxDQUFDL0MsRUFBRCxFQUFLLGFBQUwsQ0FBTjtBQUEyQixHQUE1RDtBQUdBSiwrQ0FBQyxDQUFDLHdDQUFELENBQUQsQ0FBNENHLEtBQTVDLENBQWtELFVBQVNDLEVBQVQsRUFBYTtBQUM5REEsTUFBRSxDQUFDQyxjQUFIO0FBSUMsUUFBSThLLE9BQU8sR0FBR3BHLG1CQUFtQixDQUFFLFFBQUYsQ0FBakM7O0FBQ0EsUUFBR29HLE9BQUgsRUFBWTtBQUVibkwsbURBQUMsQ0FBQ2lKLElBQUYsQ0FBTztBQUNOQyxZQUFJLEVBQUUsS0FEQTtBQUVOQyxnQkFBUSxFQUFFLE1BRko7QUFHTkMsbUJBQVcsRUFBRSxrQkFIUDtBQUlOWCxXQUFHLEVBQUVDLFNBQVMsQ0FBQ0MsT0FBVixHQUFvQix3QkFBcEIsR0FBK0NySCxNQUFNLENBQUNxQyxHQUFQLEVBSjlDO0FBS040RixlQUFPLEVBQUUsaUJBQVVDLElBQVYsRUFBZ0I7QUFDeEIsY0FBSUQsT0FBTyxHQUFHdkosNkNBQUMsQ0FBQyw2QkFBRCxDQUFmO0FBQ0F1SixpQkFBTyxDQUFDL0MsUUFBUixDQUFpQixTQUFqQjtBQUNBK0MsaUJBQU8sQ0FBQzlDLElBQVIsQ0FBYzNGLEVBQUUsQ0FBRSw2QkFBRixFQUFpQyxlQUFqQyxDQUFoQjtBQUNBc0ssb0JBQVUsQ0FBQyxZQUFXO0FBQ3JCbkoseUJBQWEsQ0FBQzNCLE9BQWQsQ0FBc0IsT0FBdEI7QUFDQSxXQUZTLEVBRVAsSUFGTyxDQUFWO0FBS0EsU0FkSztBQWVOb0osYUFBSyxFQUFFLGVBQVVGLElBQVYsRUFBZ0I7QUFDdEIsY0FBSTZCLEdBQUcsR0FBRzdCLElBQUksQ0FBQzhCLFlBQUwsQ0FBa0JuRixPQUE1QjtBQUNBLGNBQUlvRixXQUFXLEdBQUd2TCw2Q0FBQyxDQUFDLDJCQUFELENBQW5CO0FBQ0F1TCxxQkFBVyxDQUFDL0UsUUFBWixDQUFxQixPQUFyQjtBQUNBK0UscUJBQVcsQ0FBQzlFLElBQVosQ0FBaUI0RSxHQUFqQjtBQUNBLFNBcEJLO0FBcUJOekIsa0JBQVUsRUFBRSxvQkFBVUMsR0FBVixFQUFlO0FBQzFCQSxhQUFHLENBQUNDLGdCQUFKLENBQXFCLFlBQXJCLEVBQW1DcEIsU0FBUyxDQUFDcUIsU0FBN0M7QUFDQSxTQXZCSztBQXdCTlAsWUFBSSxFQUFFZ0MsSUFBSSxDQUFDQyxTQUFMLENBQWVOLE9BQWY7QUF4QkEsT0FBUDtBQTBCQTtBQUVBLEdBcENEO0FBc0NBbkosZUFBYSxDQUFDN0IsS0FBZCxDQUFxQixVQUFTQyxFQUFULEVBQWE7QUFDakNBLE1BQUUsQ0FBQ0MsY0FBSDs7QUFFQSxRQUFJcUwsT0FBTyxDQUFFNUssRUFBRSxDQUFDLGdHQUFELEVBQW1HLGVBQW5HLENBQUosQ0FBWCxFQUF1STtBQUV0SWQsbURBQUMsQ0FBQ2lKLElBQUYsQ0FBTztBQUNOQyxZQUFJLEVBQUUsUUFEQTtBQUVOQyxnQkFBUSxFQUFFLE1BRko7QUFHTkMsbUJBQVcsRUFBRSxrQkFIUDtBQUlOWCxXQUFHLEVBQUVDLFNBQVMsQ0FBQ0MsT0FBVixHQUFvQix3QkFBcEIsR0FBK0NySCxNQUFNLENBQUNxQyxHQUFQLEVBSjlDO0FBS040RixlQUFPLEVBQUUsaUJBQVVDLElBQVYsRUFBZ0I7QUFDeEIsY0FBSUQsT0FBTyxHQUFHdkosNkNBQUMsQ0FBQyw2QkFBRCxDQUFmO0FBQ0F1SixpQkFBTyxDQUFDL0MsUUFBUixDQUFpQixTQUFqQjtBQUNBK0MsaUJBQU8sQ0FBQzlDLElBQVIsQ0FBYzNGLEVBQUUsQ0FBRSw2QkFBRixFQUFpQyxlQUFqQyxDQUFoQjtBQUNBc0ssb0JBQVUsQ0FBQyxZQUFXO0FBQ3JCcEwseURBQUMsQ0FBQyxnQ0FBRCxDQUFELENBQW9DTSxPQUFwQyxDQUE0QyxPQUE1QztBQUNBLFdBRlMsRUFFUCxJQUZPLENBQVY7QUFLQSxTQWRLO0FBZU5vSixhQUFLLEVBQUUsZUFBVUYsSUFBVixFQUFnQjtBQUN0QixjQUFJNkIsR0FBRyxHQUFHN0IsSUFBSSxDQUFDOEIsWUFBTCxDQUFrQm5GLE9BQTVCO0FBQ0EsY0FBSW9GLFdBQVcsR0FBR3ZMLDZDQUFDLENBQUMsMkJBQUQsQ0FBbkI7QUFFQXVMLHFCQUFXLENBQUMvRSxRQUFaLENBQXFCLE9BQXJCO0FBQ0ErRSxxQkFBVyxDQUFDOUUsSUFBWixDQUFpQjRFLEdBQWpCO0FBQ0EsU0FyQks7QUFzQk56QixrQkFBVSxFQUFFLG9CQUFVQyxHQUFWLEVBQWU7QUFDMUJBLGFBQUcsQ0FBQ0MsZ0JBQUosQ0FBcUIsWUFBckIsRUFBbUNwQixTQUFTLENBQUNxQixTQUE3QztBQUNBLFNBeEJLO0FBeUJOUCxZQUFJLEVBQUU7QUF6QkEsT0FBUDtBQTJCQSxLQTdCRCxNQThCSztBQUNKdkgsbUJBQWEsQ0FBQzNCLE9BQWQsQ0FBc0IsT0FBdEI7QUFFQTtBQUVELEdBdENEO0FBd0NBNEMsV0FBUyxDQUFDL0MsS0FBVixDQUFpQixVQUFTQyxFQUFULEVBQWE7QUFDN0JBLE1BQUUsQ0FBQ0MsY0FBSDtBQUVBLFFBQUk4SyxPQUFPLEdBQUczSCwwQkFBMEIsRUFBeEM7QUFLQSxHQVJEO0FBVUEsTUFBSW1JLENBQUMsR0FBRyxDQUFSO0FBRUEzTCwrQ0FBQyxDQUFDLDJCQUFELENBQUQsQ0FBK0JHLEtBQS9CLENBQXNDLFlBQVc7QUFDaER3TCxLQUFDO0FBQ0QzTCxpREFBQyxDQUFDLHFDQUFELENBQUQsQ0FBeUM0TCxNQUF6QyxDQUFnRCxnQkFBY0QsQ0FBZCxHQUFnQixtUUFBaEIsR0FBb1JBLENBQXBSLEdBQXNSLDBEQUF0VTtBQUNBLEdBSEQ7QUFLQTNMLCtDQUFDLENBQUNtQixRQUFELENBQUQsQ0FBWTBLLEVBQVosQ0FBZSxPQUFmLEVBQXdCLGFBQXhCLEVBQXVDLFlBQVc7QUFDakQsUUFBSUMsU0FBUyxHQUFHOUwsNkNBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUStMLElBQVIsQ0FBYSxJQUFiLENBQWhCO0FBQ0FyTCxXQUFPLENBQUNDLEdBQVIsQ0FBWW1MLFNBQVo7QUFDQTlMLGlEQUFDLENBQUMsU0FBTzhMLFNBQVIsQ0FBRCxDQUFvQkUsTUFBcEI7QUFDQSxHQUpEO0FBUUEsQ0F2aEJELEU7Ozs7Ozs7Ozs7OztBQ3pDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBQ0E7QUFDQSxJQUFJQyxlQUFlLEdBQUc7QUFDbEJDLFdBQVMsRUFBRSxJQURPO0FBRWxCQyxTQUFPLEVBQUUsSUFGUztBQUdsQkMsU0FBTyxFQUFFO0FBSFMsQ0FBdEI7QUFLQSxJQUFJQyxnQkFBZ0IsR0FBRztBQUNuQixTQUFPLE9BRFk7QUFFbkIsU0FBTztBQUZZLENBQXZCOztBQUlBLFNBQVNDLGFBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDQyxLQUFoQyxFQUF1Q0MsT0FBdkMsRUFBZ0Q7QUFDNUMsTUFBSTFELEVBQUUsR0FBRzVILFFBQVEsQ0FBQ21MLGFBQVQsQ0FBdUJDLE9BQXZCLENBQVQ7O0FBQ0EsTUFBSUMsS0FBSixFQUFXO0FBQ1AsU0FBSyxJQUFJRSxRQUFULElBQXFCRixLQUFyQixFQUE0QjtBQUN4QixVQUFJRSxRQUFRLEtBQUssT0FBakIsRUFBMEI7QUFDdEJDLGtCQUFVLENBQUM1RCxFQUFELEVBQUt5RCxLQUFLLENBQUNFLFFBQUQsQ0FBVixDQUFWO0FBQ0gsT0FGRCxNQUdLLElBQUlULGVBQWUsQ0FBQ1MsUUFBRCxDQUFuQixFQUErQjtBQUNoQzNELFVBQUUsQ0FBQzJELFFBQUQsQ0FBRixHQUFlRixLQUFLLENBQUNFLFFBQUQsQ0FBcEI7QUFDSCxPQUZJLE1BR0E7QUFDRDNELFVBQUUsQ0FBQzZELFlBQUgsQ0FBZ0JGLFFBQWhCLEVBQTBCRixLQUFLLENBQUNFLFFBQUQsQ0FBL0I7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsTUFBSSxPQUFPRCxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQzdCMUQsTUFBRSxDQUFDOEQsU0FBSCxHQUFlSixPQUFmLENBRDZCLENBQ0w7QUFDM0IsR0FGRCxNQUdLLElBQUlBLE9BQU8sSUFBSSxJQUFmLEVBQXFCO0FBQ3RCSyxtQkFBZSxDQUFDL0QsRUFBRCxFQUFLMEQsT0FBTCxDQUFmO0FBQ0g7O0FBQ0QsU0FBTzFELEVBQVA7QUFDSDs7QUFDRCxTQUFTZ0UsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkI7QUFDekJBLE1BQUksR0FBR0EsSUFBSSxDQUFDakosSUFBTCxFQUFQO0FBQ0EsTUFBSWtKLFNBQVMsR0FBRzlMLFFBQVEsQ0FBQ21MLGFBQVQsQ0FBdUJZLG1CQUFtQixDQUFDRixJQUFELENBQTFDLENBQWhCO0FBQ0FDLFdBQVMsQ0FBQ0osU0FBVixHQUFzQkcsSUFBdEI7QUFDQSxTQUFPQyxTQUFTLENBQUNFLFVBQWpCO0FBQ0g7O0FBQ0QsU0FBU0MsY0FBVCxDQUF3QkosSUFBeEIsRUFBOEI7QUFDMUIsU0FBT0ssS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLGNBQWMsQ0FBQ1QsSUFBRCxDQUF6QyxDQUFQO0FBQ0g7O0FBQ0QsU0FBU1MsY0FBVCxDQUF3QlQsSUFBeEIsRUFBOEI7QUFDMUJBLE1BQUksR0FBR0EsSUFBSSxDQUFDakosSUFBTCxFQUFQO0FBQ0EsTUFBSWtKLFNBQVMsR0FBRzlMLFFBQVEsQ0FBQ21MLGFBQVQsQ0FBdUJZLG1CQUFtQixDQUFDRixJQUFELENBQTFDLENBQWhCO0FBQ0FDLFdBQVMsQ0FBQ0osU0FBVixHQUFzQkcsSUFBdEI7QUFDQSxTQUFPQyxTQUFTLENBQUNTLFVBQWpCO0FBQ0gsQyxDQUNEOzs7QUFDQSxTQUFTUixtQkFBVCxDQUE2QkYsSUFBN0IsRUFBbUM7QUFDL0IsU0FBT1gsZ0JBQWdCLENBQUNXLElBQUksQ0FBQ25DLE1BQUwsQ0FBWSxDQUFaLEVBQWUsQ0FBZixDQUFELENBQW1CO0FBQW5CLEdBQWhCLElBQ0YsS0FETDtBQUVIOztBQUNELFNBQVNpQyxlQUFULENBQXlCL0QsRUFBekIsRUFBNkIwRCxPQUE3QixFQUFzQztBQUNsQyxNQUFJaUIsVUFBVSxHQUFHQyxnQkFBZ0IsQ0FBQ2xCLE9BQUQsQ0FBakM7O0FBQ0EsT0FBSyxJQUFJZCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHK0IsVUFBVSxDQUFDRSxNQUEvQixFQUF1Q2pDLENBQUMsRUFBeEMsRUFBNEM7QUFDeEM1QyxNQUFFLENBQUM4RSxXQUFILENBQWVILFVBQVUsQ0FBQy9CLENBQUQsQ0FBekI7QUFDSDtBQUNKOztBQUNELFNBQVNtQyxnQkFBVCxDQUEwQnpILE1BQTFCLEVBQWtDb0csT0FBbEMsRUFBMkM7QUFDdkMsTUFBSXNCLE1BQU0sR0FBR0osZ0JBQWdCLENBQUNsQixPQUFELENBQTdCO0FBQ0EsTUFBSXVCLE9BQU8sR0FBRzNILE1BQU0sQ0FBQzhHLFVBQVAsSUFBcUIsSUFBbkMsQ0FGdUMsQ0FFRTs7QUFDekMsT0FBSyxJQUFJeEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR29DLE1BQU0sQ0FBQ0gsTUFBM0IsRUFBbUNqQyxDQUFDLEVBQXBDLEVBQXdDO0FBQ3BDdEYsVUFBTSxDQUFDNEgsWUFBUCxDQUFvQkYsTUFBTSxDQUFDcEMsQ0FBRCxDQUExQixFQUErQnFDLE9BQS9CO0FBQ0g7QUFDSjs7QUFDRCxTQUFTRSxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBbUMxQixPQUFuQyxFQUE0QztBQUN4QyxNQUFJc0IsTUFBTSxHQUFHSixnQkFBZ0IsQ0FBQ2xCLE9BQUQsQ0FBN0I7QUFDQSxNQUFJdUIsT0FBTyxHQUFHRyxLQUFLLENBQUNDLFdBQU4sSUFBcUIsSUFBbkM7O0FBQ0EsT0FBSyxJQUFJekMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR29DLE1BQU0sQ0FBQ0gsTUFBM0IsRUFBbUNqQyxDQUFDLEVBQXBDLEVBQXdDO0FBQ3BDd0MsU0FBSyxDQUFDRSxVQUFOLENBQWlCSixZQUFqQixDQUE4QkYsTUFBTSxDQUFDcEMsQ0FBRCxDQUFwQyxFQUF5Q3FDLE9BQXpDO0FBQ0g7QUFDSjs7QUFDRCxTQUFTTCxnQkFBVCxDQUEwQmxCLE9BQTFCLEVBQW1DO0FBQy9CLE1BQUk2QixHQUFKOztBQUNBLE1BQUksT0FBTzdCLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDN0I2QixPQUFHLEdBQUdsQixjQUFjLENBQUNYLE9BQUQsQ0FBcEI7QUFDSCxHQUZELE1BR0ssSUFBSUEsT0FBTyxZQUFZOEIsSUFBdkIsRUFBNkI7QUFDOUJELE9BQUcsR0FBRyxDQUFDN0IsT0FBRCxDQUFOO0FBQ0gsR0FGSSxNQUdBO0FBQUU7QUFDSDZCLE9BQUcsR0FBR2pCLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCZixPQUEzQixDQUFOO0FBQ0g7O0FBQ0QsU0FBTzZCLEdBQVA7QUFDSDs7QUFDRCxTQUFTRSxhQUFULENBQXVCekYsRUFBdkIsRUFBMkI7QUFDdkIsTUFBSUEsRUFBRSxDQUFDc0YsVUFBUCxFQUFtQjtBQUNmdEYsTUFBRSxDQUFDc0YsVUFBSCxDQUFjSSxXQUFkLENBQTBCMUYsRUFBMUI7QUFDSDtBQUNKLEMsQ0FDRDtBQUNBO0FBQ0E7OztBQUNBLElBQUkyRixhQUFhLEdBQUdDLE9BQU8sQ0FBQ3JCLFNBQVIsQ0FBa0JzQixPQUFsQixJQUNoQkQsT0FBTyxDQUFDckIsU0FBUixDQUFrQnVCLGVBREYsSUFFaEJGLE9BQU8sQ0FBQ3JCLFNBQVIsQ0FBa0J3QixpQkFGdEI7O0FBR0EsSUFBSUMsYUFBYSxHQUFHSixPQUFPLENBQUNyQixTQUFSLENBQWtCMEIsT0FBbEIsSUFBNkIsVUFBVUMsUUFBVixFQUFvQjtBQUNqRTtBQUNBLE1BQUlsRyxFQUFFLEdBQUcsSUFBVDs7QUFDQSxNQUFJLENBQUM1SCxRQUFRLENBQUMrTixlQUFULENBQXlCQyxRQUF6QixDQUFrQ3BHLEVBQWxDLENBQUwsRUFBNEM7QUFDeEMsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsS0FBRztBQUNDLFFBQUlxRyxjQUFjLENBQUNyRyxFQUFELEVBQUtrRyxRQUFMLENBQWxCLEVBQWtDO0FBQzlCLGFBQU9sRyxFQUFQO0FBQ0g7O0FBQ0RBLE1BQUUsR0FBR0EsRUFBRSxDQUFDc0csYUFBSCxJQUFvQnRHLEVBQUUsQ0FBQ3NGLFVBQTVCO0FBQ0gsR0FMRCxRQUtTdEYsRUFBRSxLQUFLLElBQVAsSUFBZUEsRUFBRSxDQUFDdUcsUUFBSCxLQUFnQixDQUx4Qzs7QUFNQSxTQUFPLElBQVA7QUFDSCxDQWJEOztBQWNBLFNBQVNDLGNBQVQsQ0FBd0J4RyxFQUF4QixFQUE0QmtHLFFBQTVCLEVBQXNDO0FBQ2xDLFNBQU9GLGFBQWEsQ0FBQ3ZCLElBQWQsQ0FBbUJ6RSxFQUFuQixFQUF1QmtHLFFBQXZCLENBQVA7QUFDSDs7QUFDRCxTQUFTRyxjQUFULENBQXdCckcsRUFBeEIsRUFBNEJrRyxRQUE1QixFQUFzQztBQUNsQyxTQUFPUCxhQUFhLENBQUNsQixJQUFkLENBQW1CekUsRUFBbkIsRUFBdUJrRyxRQUF2QixDQUFQO0FBQ0gsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVNPLFlBQVQsQ0FBc0J2QyxTQUF0QixFQUFpQ2dDLFFBQWpDLEVBQTJDO0FBQ3ZDLE1BQUlRLFVBQVUsR0FBR3hDLFNBQVMsWUFBWXlDLFdBQXJCLEdBQW1DLENBQUN6QyxTQUFELENBQW5DLEdBQWlEQSxTQUFsRTtBQUNBLE1BQUkwQyxVQUFVLEdBQUcsRUFBakI7O0FBQ0EsT0FBSyxJQUFJaEUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhELFVBQVUsQ0FBQzdCLE1BQS9CLEVBQXVDakMsQ0FBQyxFQUF4QyxFQUE0QztBQUN4QyxRQUFJaUQsT0FBTyxHQUFHYSxVQUFVLENBQUM5RCxDQUFELENBQVYsQ0FBY2lFLGdCQUFkLENBQStCWCxRQUEvQixDQUFkOztBQUNBLFNBQUssSUFBSVksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2pCLE9BQU8sQ0FBQ2hCLE1BQTVCLEVBQW9DaUMsQ0FBQyxFQUFyQyxFQUF5QztBQUNyQ0YsZ0JBQVUsQ0FBQ0csSUFBWCxDQUFnQmxCLE9BQU8sQ0FBQ2lCLENBQUQsQ0FBdkI7QUFDSDtBQUNKOztBQUNELFNBQU9GLFVBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU0ksWUFBVCxDQUFzQjFKLE1BQXRCLEVBQThCNEksUUFBOUIsRUFBd0M7QUFDcEMsTUFBSWUsT0FBTyxHQUFHM0osTUFBTSxZQUFZcUosV0FBbEIsR0FBZ0MsQ0FBQ3JKLE1BQUQsQ0FBaEMsR0FBMkNBLE1BQXpEO0FBQ0EsTUFBSXNKLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxPQUFLLElBQUloRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHcUUsT0FBTyxDQUFDcEMsTUFBNUIsRUFBb0NqQyxDQUFDLEVBQXJDLEVBQXlDO0FBQ3JDLFFBQUkrQixVQUFVLEdBQUdzQyxPQUFPLENBQUNyRSxDQUFELENBQVAsQ0FBV3NFLFFBQTVCLENBRHFDLENBQ0M7O0FBQ3RDLFNBQUssSUFBSUosQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR25DLFVBQVUsQ0FBQ0UsTUFBL0IsRUFBdUNpQyxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFVBQUlLLFNBQVMsR0FBR3hDLFVBQVUsQ0FBQ21DLENBQUQsQ0FBMUI7O0FBQ0EsVUFBSSxDQUFDWixRQUFELElBQWFHLGNBQWMsQ0FBQ2MsU0FBRCxFQUFZakIsUUFBWixDQUEvQixFQUFzRDtBQUNsRFUsa0JBQVUsQ0FBQ0csSUFBWCxDQUFnQkksU0FBaEI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBT1AsVUFBUDtBQUNILEMsQ0FDRDtBQUNBOzs7QUFDQSxTQUFTUSxjQUFULENBQXdCcEgsRUFBeEIsRUFBNEJtRCxTQUE1QixFQUF1Q2tFLElBQXZDLEVBQTZDO0FBQ3pDLE1BQUlBLElBQUosRUFBVTtBQUNOckgsTUFBRSxDQUFDc0gsU0FBSCxDQUFhQyxHQUFiLENBQWlCcEUsU0FBakI7QUFDSCxHQUZELE1BR0s7QUFDRG5ELE1BQUUsQ0FBQ3NILFNBQUgsQ0FBYXJFLE1BQWIsQ0FBb0JFLFNBQXBCO0FBQ0g7QUFDSixDLENBQ0Q7QUFDQTs7O0FBQ0EsSUFBSXFFLGFBQWEsR0FBRyx3Q0FBcEI7O0FBQ0EsU0FBUzVELFVBQVQsQ0FBb0I1RCxFQUFwQixFQUF3QnlILEtBQXhCLEVBQStCO0FBQzNCLE9BQUssSUFBSUMsUUFBVCxJQUFxQkQsS0FBckIsRUFBNEI7QUFDeEJFLGtCQUFjLENBQUMzSCxFQUFELEVBQUswSCxRQUFMLEVBQWVELEtBQUssQ0FBQ0MsUUFBRCxDQUFwQixDQUFkO0FBQ0g7QUFDSjs7QUFDRCxTQUFTQyxjQUFULENBQXdCM0gsRUFBeEIsRUFBNEI0SCxJQUE1QixFQUFrQ2hOLEdBQWxDLEVBQXVDO0FBQ25DLE1BQUlBLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2JvRixNQUFFLENBQUM2SCxLQUFILENBQVNELElBQVQsSUFBaUIsRUFBakI7QUFDSCxHQUZELE1BR0ssSUFBSSxPQUFPaE4sR0FBUCxLQUFlLFFBQWYsSUFBMkI0TSxhQUFhLENBQUNoTixJQUFkLENBQW1Cb04sSUFBbkIsQ0FBL0IsRUFBeUQ7QUFDMUQ1SCxNQUFFLENBQUM2SCxLQUFILENBQVNELElBQVQsSUFBaUJoTixHQUFHLEdBQUcsSUFBdkI7QUFDSCxHQUZJLE1BR0E7QUFDRG9GLE1BQUUsQ0FBQzZILEtBQUgsQ0FBU0QsSUFBVCxJQUFpQmhOLEdBQWpCO0FBQ0g7QUFDSjs7QUFFRCxTQUFTa04sZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ2xDLFNBQU9ELEtBQUssQ0FBQ3JKLElBQU4sSUFBY3NKLElBQUksQ0FBQ3RKLElBQW5CLElBQ0hxSixLQUFLLENBQUNySixJQUFOLEdBQWFzSixJQUFJLENBQUNwSixLQURmLElBRUhtSixLQUFLLENBQUNFLEdBQU4sSUFBYUQsSUFBSSxDQUFDQyxHQUZmLElBR0hGLEtBQUssQ0FBQ0UsR0FBTixHQUFZRCxJQUFJLENBQUNFLE1BSHJCO0FBSUgsQyxDQUNEOzs7QUFDQSxTQUFTQyxjQUFULENBQXdCQyxLQUF4QixFQUErQkMsS0FBL0IsRUFBc0M7QUFDbEMsTUFBSUMsR0FBRyxHQUFHO0FBQ041SixRQUFJLEVBQUU2SixJQUFJLENBQUNDLEdBQUwsQ0FBU0osS0FBSyxDQUFDMUosSUFBZixFQUFxQjJKLEtBQUssQ0FBQzNKLElBQTNCLENBREE7QUFFTkUsU0FBSyxFQUFFMkosSUFBSSxDQUFDRSxHQUFMLENBQVNMLEtBQUssQ0FBQ3hKLEtBQWYsRUFBc0J5SixLQUFLLENBQUN6SixLQUE1QixDQUZEO0FBR05xSixPQUFHLEVBQUVNLElBQUksQ0FBQ0MsR0FBTCxDQUFTSixLQUFLLENBQUNILEdBQWYsRUFBb0JJLEtBQUssQ0FBQ0osR0FBMUIsQ0FIQztBQUlOQyxVQUFNLEVBQUVLLElBQUksQ0FBQ0UsR0FBTCxDQUFTTCxLQUFLLENBQUNGLE1BQWYsRUFBdUJHLEtBQUssQ0FBQ0gsTUFBN0I7QUFKRixHQUFWOztBQU1BLE1BQUlJLEdBQUcsQ0FBQzVKLElBQUosR0FBVzRKLEdBQUcsQ0FBQzFKLEtBQWYsSUFBd0IwSixHQUFHLENBQUNMLEdBQUosR0FBVUssR0FBRyxDQUFDSixNQUExQyxFQUFrRDtBQUM5QyxXQUFPSSxHQUFQO0FBQ0g7O0FBQ0QsU0FBTyxLQUFQO0FBQ0g7O0FBQ0QsU0FBU0ksYUFBVCxDQUF1QlYsSUFBdkIsRUFBNkJXLE1BQTdCLEVBQXFDQyxNQUFyQyxFQUE2QztBQUN6QyxTQUFPO0FBQ0hsSyxRQUFJLEVBQUVzSixJQUFJLENBQUN0SixJQUFMLEdBQVlpSyxNQURmO0FBRUgvSixTQUFLLEVBQUVvSixJQUFJLENBQUNwSixLQUFMLEdBQWErSixNQUZqQjtBQUdIVixPQUFHLEVBQUVELElBQUksQ0FBQ0MsR0FBTCxHQUFXVyxNQUhiO0FBSUhWLFVBQU0sRUFBRUYsSUFBSSxDQUFDRSxNQUFMLEdBQWNVO0FBSm5CLEdBQVA7QUFNSCxDLENBQ0Q7OztBQUNBLFNBQVNDLGNBQVQsQ0FBd0JkLEtBQXhCLEVBQStCQyxJQUEvQixFQUFxQztBQUNqQyxTQUFPO0FBQ0h0SixRQUFJLEVBQUU2SixJQUFJLENBQUNFLEdBQUwsQ0FBU0YsSUFBSSxDQUFDQyxHQUFMLENBQVNULEtBQUssQ0FBQ3JKLElBQWYsRUFBcUJzSixJQUFJLENBQUN0SixJQUExQixDQUFULEVBQTBDc0osSUFBSSxDQUFDcEosS0FBL0MsQ0FESDtBQUVIcUosT0FBRyxFQUFFTSxJQUFJLENBQUNFLEdBQUwsQ0FBU0YsSUFBSSxDQUFDQyxHQUFMLENBQVNULEtBQUssQ0FBQ0UsR0FBZixFQUFvQkQsSUFBSSxDQUFDQyxHQUF6QixDQUFULEVBQXdDRCxJQUFJLENBQUNFLE1BQTdDO0FBRkYsR0FBUDtBQUlILEMsQ0FDRDs7O0FBQ0EsU0FBU1ksYUFBVCxDQUF1QmQsSUFBdkIsRUFBNkI7QUFDekIsU0FBTztBQUNIdEosUUFBSSxFQUFFLENBQUNzSixJQUFJLENBQUN0SixJQUFMLEdBQVlzSixJQUFJLENBQUNwSixLQUFsQixJQUEyQixDQUQ5QjtBQUVIcUosT0FBRyxFQUFFLENBQUNELElBQUksQ0FBQ0MsR0FBTCxHQUFXRCxJQUFJLENBQUNFLE1BQWpCLElBQTJCO0FBRjdCLEdBQVA7QUFJSCxDLENBQ0Q7OztBQUNBLFNBQVNhLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNoQyxTQUFPO0FBQ0h2SyxRQUFJLEVBQUVzSyxNQUFNLENBQUN0SyxJQUFQLEdBQWN1SyxNQUFNLENBQUN2SyxJQUR4QjtBQUVIdUosT0FBRyxFQUFFZSxNQUFNLENBQUNmLEdBQVAsR0FBYWdCLE1BQU0sQ0FBQ2hCO0FBRnRCLEdBQVA7QUFJSCxDLENBRUQ7OztBQUNBLElBQUlpQixvQkFBb0IsR0FBRyxJQUEzQjs7QUFDQSxTQUFTQyx1QkFBVCxHQUFtQztBQUMvQixNQUFJRCxvQkFBb0IsS0FBSyxJQUE3QixFQUFtQztBQUMvQkEsd0JBQW9CLEdBQUdFLDJCQUEyQixFQUFsRDtBQUNIOztBQUNELFNBQU9GLG9CQUFQO0FBQ0g7O0FBQ0QsU0FBU0UsMkJBQVQsR0FBdUM7QUFDbkMsTUFBSUMsT0FBTyxHQUFHOUYsYUFBYSxDQUFDLEtBQUQsRUFBUTtBQUMvQnNFLFNBQUssRUFBRTtBQUNIeUIsY0FBUSxFQUFFLFVBRFA7QUFFSHJCLFNBQUcsRUFBRSxDQUFDLElBRkg7QUFHSHZKLFVBQUksRUFBRSxDQUhIO0FBSUg2SyxZQUFNLEVBQUUsQ0FKTDtBQUtIQyxhQUFPLEVBQUUsQ0FMTjtBQU1IQyxjQUFRLEVBQUUsUUFOUDtBQU9IQyxlQUFTLEVBQUU7QUFQUjtBQUR3QixHQUFSLEVBVXhCLGFBVndCLENBQTNCO0FBV0F0UixVQUFRLENBQUN1UixJQUFULENBQWM3RSxXQUFkLENBQTBCdUUsT0FBMUI7QUFDQSxNQUFJTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQ2pGLFVBQXRCO0FBQ0EsTUFBSWtFLEdBQUcsR0FBR3NCLE9BQU8sQ0FBQ0MscUJBQVIsR0FBZ0NuTCxJQUFoQyxHQUF1QzJLLE9BQU8sQ0FBQ1EscUJBQVIsR0FBZ0NuTCxJQUFqRjtBQUNBK0csZUFBYSxDQUFDNEQsT0FBRCxDQUFiO0FBQ0EsU0FBT2YsR0FBUDtBQUNILEMsQ0FDRDtBQUNBOzs7QUFDQSxTQUFTd0Isc0JBQVQsQ0FBZ0N2SyxLQUFoQyxFQUF1QztBQUNuQ0EsT0FBSyxHQUFHZ0osSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZakosS0FBWixDQUFSLENBRG1DLENBQ1A7O0FBQzVCQSxPQUFLLEdBQUdnSixJQUFJLENBQUN3QixLQUFMLENBQVd4SyxLQUFYLENBQVI7QUFDQSxTQUFPQSxLQUFQO0FBQ0g7O0FBRUQsU0FBU3lLLFlBQVQsQ0FBc0JoSyxFQUF0QixFQUEwQmlLLFVBQTFCLEVBQXNDO0FBQ2xDLE1BQUlBLFVBQVUsS0FBSyxLQUFLLENBQXhCLEVBQTJCO0FBQUVBLGNBQVUsR0FBRyxLQUFiO0FBQXFCOztBQUNsRCxNQUFJQyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JwSyxFQUF4QixDQUFwQjtBQUNBLE1BQUlxSyxVQUFVLEdBQUd6TixRQUFRLENBQUNzTixhQUFhLENBQUNJLGVBQWYsRUFBZ0MsRUFBaEMsQ0FBUixJQUErQyxDQUFoRTtBQUNBLE1BQUlDLFdBQVcsR0FBRzNOLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ00sZ0JBQWYsRUFBaUMsRUFBakMsQ0FBUixJQUFnRCxDQUFsRTtBQUNBLE1BQUlDLFNBQVMsR0FBRzdOLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ1EsY0FBZixFQUErQixFQUEvQixDQUFSLElBQThDLENBQTlEO0FBQ0EsTUFBSUMsWUFBWSxHQUFHL04sUUFBUSxDQUFDc04sYUFBYSxDQUFDVSxpQkFBZixFQUFrQyxFQUFsQyxDQUFSLElBQWlELENBQXBFLENBTmtDLENBT2xDOztBQUNBLE1BQUlDLGtCQUFrQixHQUFHZixzQkFBc0IsQ0FBQzlKLEVBQUUsQ0FBQzhLLFdBQUgsR0FBaUI5SyxFQUFFLENBQUMrSyxXQUFwQixHQUFrQ1YsVUFBbEMsR0FBK0NFLFdBQWhELENBQS9DO0FBQ0EsTUFBSVMsZUFBZSxHQUFHbEIsc0JBQXNCLENBQUM5SixFQUFFLENBQUNpTCxZQUFILEdBQWtCakwsRUFBRSxDQUFDa0wsWUFBckIsR0FBb0NULFNBQXBDLEdBQWdERSxZQUFqRCxDQUE1QztBQUNBLE1BQUlyQyxHQUFHLEdBQUc7QUFDTitCLGNBQVUsRUFBRUEsVUFETjtBQUVORSxlQUFXLEVBQUVBLFdBRlA7QUFHTkUsYUFBUyxFQUFFQSxTQUhMO0FBSU5FLGdCQUFZLEVBQUVBLFlBSlI7QUFLTkssbUJBQWUsRUFBRUEsZUFMWDtBQU1ORyxpQkFBYSxFQUFFLENBTlQ7QUFPTkMsa0JBQWMsRUFBRTtBQVBWLEdBQVY7O0FBU0EsTUFBSWpDLHVCQUF1QixNQUFNZSxhQUFhLENBQUNSLFNBQWQsS0FBNEIsS0FBN0QsRUFBb0U7QUFBRTtBQUNsRXBCLE9BQUcsQ0FBQzZDLGFBQUosR0FBb0JOLGtCQUFwQjtBQUNILEdBRkQsTUFHSztBQUNEdkMsT0FBRyxDQUFDOEMsY0FBSixHQUFxQlAsa0JBQXJCO0FBQ0g7O0FBQ0QsTUFBSVosVUFBSixFQUFnQjtBQUNaM0IsT0FBRyxDQUFDK0MsV0FBSixHQUFrQnpPLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ21CLFdBQWYsRUFBNEIsRUFBNUIsQ0FBUixJQUEyQyxDQUE3RDtBQUNBL0MsT0FBRyxDQUFDZ0QsWUFBSixHQUFtQjFPLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ29CLFlBQWYsRUFBNkIsRUFBN0IsQ0FBUixJQUE0QyxDQUEvRDtBQUNBaEQsT0FBRyxDQUFDaUQsVUFBSixHQUFpQjNPLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ3FCLFVBQWYsRUFBMkIsRUFBM0IsQ0FBUixJQUEwQyxDQUEzRDtBQUNBakQsT0FBRyxDQUFDa0QsYUFBSixHQUFvQjVPLFFBQVEsQ0FBQ3NOLGFBQWEsQ0FBQ3NCLGFBQWYsRUFBOEIsRUFBOUIsQ0FBUixJQUE2QyxDQUFqRTtBQUNIOztBQUNELFNBQU9sRCxHQUFQO0FBQ0g7O0FBQ0QsU0FBU21ELGdCQUFULENBQTBCekwsRUFBMUIsRUFBOEIwTCxlQUE5QixFQUErQztBQUMzQyxNQUFJQSxlQUFlLEtBQUssS0FBSyxDQUE3QixFQUFnQztBQUFFQSxtQkFBZSxHQUFHLEtBQWxCO0FBQTBCOztBQUM1RCxNQUFJQyxTQUFTLEdBQUdDLFdBQVcsQ0FBQzVMLEVBQUQsQ0FBM0I7QUFDQSxNQUFJNkwsS0FBSyxHQUFHN0IsWUFBWSxDQUFDaEssRUFBRCxFQUFLMEwsZUFBTCxDQUF4QjtBQUNBLE1BQUlwRCxHQUFHLEdBQUc7QUFDTjVKLFFBQUksRUFBRWlOLFNBQVMsQ0FBQ2pOLElBQVYsR0FBaUJtTixLQUFLLENBQUN4QixVQUF2QixHQUFvQ3dCLEtBQUssQ0FBQ1YsYUFEMUM7QUFFTnZNLFNBQUssRUFBRStNLFNBQVMsQ0FBQy9NLEtBQVYsR0FBa0JpTixLQUFLLENBQUN0QixXQUF4QixHQUFzQ3NCLEtBQUssQ0FBQ1QsY0FGN0M7QUFHTm5ELE9BQUcsRUFBRTBELFNBQVMsQ0FBQzFELEdBQVYsR0FBZ0I0RCxLQUFLLENBQUNwQixTQUhyQjtBQUlOdkMsVUFBTSxFQUFFeUQsU0FBUyxDQUFDekQsTUFBVixHQUFtQjJELEtBQUssQ0FBQ2xCLFlBQXpCLEdBQXdDa0IsS0FBSyxDQUFDYjtBQUpoRCxHQUFWOztBQU1BLE1BQUlVLGVBQUosRUFBcUI7QUFDakJwRCxPQUFHLENBQUM1SixJQUFKLElBQVltTixLQUFLLENBQUNSLFdBQWxCO0FBQ0EvQyxPQUFHLENBQUMxSixLQUFKLElBQWFpTixLQUFLLENBQUNQLFlBQW5CO0FBQ0FoRCxPQUFHLENBQUNMLEdBQUosSUFBVzRELEtBQUssQ0FBQ04sVUFBakI7QUFDQWpELE9BQUcsQ0FBQ0osTUFBSixJQUFjMkQsS0FBSyxDQUFDTCxhQUFwQjtBQUNIOztBQUNELFNBQU9sRCxHQUFQO0FBQ0g7O0FBQ0QsU0FBU3NELFdBQVQsQ0FBcUI1TCxFQUFyQixFQUF5QjtBQUNyQixNQUFJZ0ksSUFBSSxHQUFHaEksRUFBRSxDQUFDNkoscUJBQUgsRUFBWDtBQUNBLFNBQU87QUFDSG5MLFFBQUksRUFBRXNKLElBQUksQ0FBQ3RKLElBQUwsR0FBWXlMLE1BQU0sQ0FBQzJCLFdBRHRCO0FBRUg3RCxPQUFHLEVBQUVELElBQUksQ0FBQ0MsR0FBTCxHQUFXa0MsTUFBTSxDQUFDNEIsV0FGcEI7QUFHSG5OLFNBQUssRUFBRW9KLElBQUksQ0FBQ3BKLEtBQUwsR0FBYXVMLE1BQU0sQ0FBQzJCLFdBSHhCO0FBSUg1RCxVQUFNLEVBQUVGLElBQUksQ0FBQ0UsTUFBTCxHQUFjaUMsTUFBTSxDQUFDNEI7QUFKMUIsR0FBUDtBQU1IOztBQUNELFNBQVNDLG1CQUFULEdBQStCO0FBQzNCLFNBQU87QUFDSHROLFFBQUksRUFBRXlMLE1BQU0sQ0FBQzJCLFdBRFY7QUFFSGxOLFNBQUssRUFBRXVMLE1BQU0sQ0FBQzJCLFdBQVAsR0FBcUIxVCxRQUFRLENBQUMrTixlQUFULENBQXlCNEUsV0FGbEQ7QUFHSDlDLE9BQUcsRUFBRWtDLE1BQU0sQ0FBQzRCLFdBSFQ7QUFJSDdELFVBQU0sRUFBRWlDLE1BQU0sQ0FBQzRCLFdBQVAsR0FBcUIzVCxRQUFRLENBQUMrTixlQUFULENBQXlCK0U7QUFKbkQsR0FBUDtBQU1IOztBQUNELFNBQVNlLHVCQUFULENBQWlDak0sRUFBakMsRUFBcUM7QUFDakMsU0FBT0EsRUFBRSxDQUFDNkoscUJBQUgsR0FBMkJxQyxNQUEzQixHQUFvQ0MsZUFBZSxDQUFDbk0sRUFBRCxDQUExRDtBQUNIOztBQUNELFNBQVNtTSxlQUFULENBQXlCbk0sRUFBekIsRUFBNkI7QUFDekIsTUFBSW9NLFFBQVEsR0FBR2pDLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JwSyxFQUF4QixDQUFmO0FBQ0EsU0FBT3BELFFBQVEsQ0FBQ3dQLFFBQVEsQ0FBQ0MsU0FBVixFQUFxQixFQUFyQixDQUFSLEdBQ0h6UCxRQUFRLENBQUN3UCxRQUFRLENBQUNFLFlBQVYsRUFBd0IsRUFBeEIsQ0FEWjtBQUVILEMsQ0FDRDs7O0FBQ0EsU0FBU0Msa0JBQVQsQ0FBNEJ2TSxFQUE1QixFQUFnQztBQUM1QixNQUFJaUgsT0FBTyxHQUFHLEVBQWQ7O0FBQ0EsU0FBT2pILEVBQUUsWUFBWTJHLFdBQXJCLEVBQWtDO0FBQUU7QUFDaEMsUUFBSXVELGFBQWEsR0FBR0MsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QnBLLEVBQXhCLENBQXBCOztBQUNBLFFBQUlrSyxhQUFhLENBQUNaLFFBQWQsS0FBMkIsT0FBL0IsRUFBd0M7QUFDcEM7QUFDSDs7QUFDRCxRQUFLLGVBQUQsQ0FBa0I5TyxJQUFsQixDQUF1QjBQLGFBQWEsQ0FBQ1QsUUFBZCxHQUF5QlMsYUFBYSxDQUFDc0MsU0FBdkMsR0FBbUR0QyxhQUFhLENBQUN1QyxTQUF4RixDQUFKLEVBQXdHO0FBQ3BHeEYsYUFBTyxDQUFDRixJQUFSLENBQWEvRyxFQUFiO0FBQ0g7O0FBQ0RBLE1BQUUsR0FBR0EsRUFBRSxDQUFDc0YsVUFBUjtBQUNIOztBQUNELFNBQU8yQixPQUFQO0FBQ0g7O0FBQ0QsU0FBU3lGLG1CQUFULENBQTZCMU0sRUFBN0IsRUFBaUM7QUFDN0IsU0FBT3VNLGtCQUFrQixDQUFDdk0sRUFBRCxDQUFsQixDQUNGMk0sR0FERSxDQUNFLFVBQVUzTSxFQUFWLEVBQWM7QUFDbkIsV0FBT3lMLGdCQUFnQixDQUFDekwsRUFBRCxDQUF2QjtBQUNILEdBSE0sRUFJRjRNLE1BSkUsQ0FJS1osbUJBQW1CLEVBSnhCLEVBS0ZhLE1BTEUsQ0FLSyxVQUFVQyxLQUFWLEVBQWlCMUUsS0FBakIsRUFBd0I7QUFDaEMsV0FBT0QsY0FBYyxDQUFDMkUsS0FBRCxFQUFRMUUsS0FBUixDQUFkLElBQWdDQSxLQUF2QyxDQURnQyxDQUNjO0FBQ2pELEdBUE0sQ0FBUDtBQVFILEMsQ0FFRDs7O0FBQ0EsU0FBUzlRLGNBQVQsQ0FBd0JELEVBQXhCLEVBQTRCO0FBQ3hCQSxJQUFFLENBQUNDLGNBQUg7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU3lWLGdCQUFULENBQTBCN0ksU0FBMUIsRUFBcUM4SSxTQUFyQyxFQUFnRDlHLFFBQWhELEVBQTBEK0csT0FBMUQsRUFBbUU7QUFDL0QsV0FBU0MsV0FBVCxDQUFxQjdWLEVBQXJCLEVBQXlCO0FBQ3JCLFFBQUk4VixZQUFZLEdBQUczRyxjQUFjLENBQUNuUCxFQUFFLENBQUMrVixNQUFKLEVBQVlsSCxRQUFaLENBQWpDOztBQUNBLFFBQUlpSCxZQUFKLEVBQWtCO0FBQ2RGLGFBQU8sQ0FBQ3hJLElBQVIsQ0FBYTBJLFlBQWIsRUFBMkI5VixFQUEzQixFQUErQjhWLFlBQS9CO0FBQ0g7QUFDSjs7QUFDRGpKLFdBQVMsQ0FBQ2pFLGdCQUFWLENBQTJCK00sU0FBM0IsRUFBc0NFLFdBQXRDO0FBQ0EsU0FBTyxZQUFZO0FBQ2ZoSixhQUFTLENBQUNtSixtQkFBVixDQUE4QkwsU0FBOUIsRUFBeUNFLFdBQXpDO0FBQ0gsR0FGRDtBQUdIOztBQUNELFNBQVNJLHVCQUFULENBQWlDcEosU0FBakMsRUFBNENnQyxRQUE1QyxFQUFzRHFILFlBQXRELEVBQW9FQyxZQUFwRSxFQUFrRjtBQUM5RSxNQUFJQyxtQkFBSjtBQUNBLFNBQU9WLGdCQUFnQixDQUFDN0ksU0FBRCxFQUFZLFdBQVosRUFBeUJnQyxRQUF6QixFQUFtQyxVQUFVN08sRUFBVixFQUFjOFYsWUFBZCxFQUE0QjtBQUNsRixRQUFJQSxZQUFZLEtBQUtNLG1CQUFyQixFQUEwQztBQUN0Q0EseUJBQW1CLEdBQUdOLFlBQXRCO0FBQ0FJLGtCQUFZLENBQUNsVyxFQUFELEVBQUs4VixZQUFMLENBQVo7O0FBQ0EsVUFBSU8sa0JBQWtCLEdBQUcsVUFBVXJXLEVBQVYsRUFBYztBQUNuQ29XLDJCQUFtQixHQUFHLElBQXRCO0FBQ0FELG9CQUFZLENBQUNuVyxFQUFELEVBQUs4VixZQUFMLENBQVo7QUFDQUEsb0JBQVksQ0FBQ0UsbUJBQWIsQ0FBaUMsWUFBakMsRUFBK0NLLGtCQUEvQztBQUNILE9BSkQsQ0FIc0MsQ0FRdEM7OztBQUNBUCxrQkFBWSxDQUFDbE4sZ0JBQWIsQ0FBOEIsWUFBOUIsRUFBNEN5TixrQkFBNUM7QUFDSDtBQUNKLEdBWnNCLENBQXZCO0FBYUgsQyxDQUNEO0FBQ0E7OztBQUNBLElBQUlDLG9CQUFvQixHQUFHLENBQ3ZCLHFCQUR1QixFQUV2QixnQkFGdUIsRUFHdkIsZ0JBSHVCLEVBSXZCLGlCQUp1QixFQUt2QixlQUx1QixDQUEzQixDLENBT0E7O0FBQ0EsU0FBU0Msa0JBQVQsQ0FBNEI1TixFQUE1QixFQUFnQzZOLFFBQWhDLEVBQTBDO0FBQ3RDLE1BQUlDLFlBQVksR0FBRyxVQUFVelcsRUFBVixFQUFjO0FBQzdCd1csWUFBUSxDQUFDeFcsRUFBRCxDQUFSO0FBQ0FzVyx3QkFBb0IsQ0FBQ0ksT0FBckIsQ0FBNkIsVUFBVUMsU0FBVixFQUFxQjtBQUM5Q2hPLFFBQUUsQ0FBQ3FOLG1CQUFILENBQXVCVyxTQUF2QixFQUFrQ0YsWUFBbEM7QUFDSCxLQUZEO0FBR0gsR0FMRDs7QUFNQUgsc0JBQW9CLENBQUNJLE9BQXJCLENBQTZCLFVBQVVDLFNBQVYsRUFBcUI7QUFDOUNoTyxNQUFFLENBQUNDLGdCQUFILENBQW9CK04sU0FBcEIsRUFBK0JGLFlBQS9CLEVBRDhDLENBQ0E7QUFDakQsR0FGRDtBQUdIOztBQUVELElBQUlHLE9BQU8sR0FBRyxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixLQUF0QixFQUE2QixLQUE3QixFQUFvQyxLQUFwQyxFQUEyQyxLQUEzQyxDQUFkLEMsQ0FDQTs7QUFDQSxTQUFTQyxRQUFULENBQWtCQyxDQUFsQixFQUFxQkMsQ0FBckIsRUFBd0I7QUFDcEIsTUFBSUMsQ0FBQyxHQUFHQyxjQUFjLENBQUNILENBQUQsQ0FBdEI7QUFDQUUsR0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRRCxDQUFDLEdBQUcsQ0FBWjtBQUNBLFNBQU9HLGNBQWMsQ0FBQ0YsQ0FBRCxDQUFyQjtBQUNIOztBQUNELFNBQVNHLE9BQVQsQ0FBaUJMLENBQWpCLEVBQW9CQyxDQUFwQixFQUF1QjtBQUNuQixNQUFJQyxDQUFDLEdBQUdDLGNBQWMsQ0FBQ0gsQ0FBRCxDQUF0QjtBQUNBRSxHQUFDLENBQUMsQ0FBRCxDQUFELElBQVFELENBQVI7QUFDQSxTQUFPRyxjQUFjLENBQUNGLENBQUQsQ0FBckI7QUFDSDs7QUFDRCxTQUFTSSxLQUFULENBQWVOLENBQWYsRUFBa0JDLENBQWxCLEVBQXFCO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsY0FBYyxDQUFDSCxDQUFELENBQXRCO0FBQ0FFLEdBQUMsQ0FBQyxDQUFELENBQUQsSUFBUUQsQ0FBUjtBQUNBLFNBQU9HLGNBQWMsQ0FBQ0YsQ0FBRCxDQUFyQjtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBU0ssU0FBVCxDQUFtQkMsRUFBbkIsRUFBdUJDLEVBQXZCLEVBQTJCO0FBQ3ZCLFNBQU9DLFFBQVEsQ0FBQ0YsRUFBRCxFQUFLQyxFQUFMLENBQVIsR0FBbUIsQ0FBMUI7QUFDSDs7QUFDRCxTQUFTQyxRQUFULENBQWtCRixFQUFsQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFDdEIsU0FBTyxDQUFDQSxFQUFFLENBQUNFLE9BQUgsS0FBZUgsRUFBRSxDQUFDRyxPQUFILEVBQWhCLEtBQWlDLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsRUFBbEQsQ0FBUDtBQUNIOztBQUNELFNBQVNDLFNBQVQsQ0FBbUJKLEVBQW5CLEVBQXVCQyxFQUF2QixFQUEyQjtBQUN2QixTQUFPLENBQUNBLEVBQUUsQ0FBQ0UsT0FBSCxLQUFlSCxFQUFFLENBQUNHLE9BQUgsRUFBaEIsS0FBaUMsT0FBTyxFQUFQLEdBQVksRUFBN0MsQ0FBUDtBQUNIOztBQUNELFNBQVNFLFdBQVQsQ0FBcUJMLEVBQXJCLEVBQXlCQyxFQUF6QixFQUE2QjtBQUN6QixTQUFPLENBQUNBLEVBQUUsQ0FBQ0UsT0FBSCxLQUFlSCxFQUFFLENBQUNHLE9BQUgsRUFBaEIsS0FBaUMsT0FBTyxFQUF4QyxDQUFQO0FBQ0g7O0FBQ0QsU0FBU0csV0FBVCxDQUFxQk4sRUFBckIsRUFBeUJDLEVBQXpCLEVBQTZCO0FBQ3pCLFNBQU8sQ0FBQ0EsRUFBRSxDQUFDRSxPQUFILEtBQWVILEVBQUUsQ0FBQ0csT0FBSCxFQUFoQixJQUFnQyxJQUF2QztBQUNIOztBQUNELFNBQVNJLGNBQVQsQ0FBd0JQLEVBQXhCLEVBQTRCQyxFQUE1QixFQUFnQztBQUM1QixNQUFJTyxLQUFLLEdBQUdDLFVBQVUsQ0FBQ1QsRUFBRCxDQUF0QjtBQUNBLE1BQUlVLEtBQUssR0FBR0QsVUFBVSxDQUFDUixFQUFELENBQXRCO0FBQ0EsU0FBTztBQUNIVSxTQUFLLEVBQUUsQ0FESjtBQUVIQyxVQUFNLEVBQUUsQ0FGTDtBQUdIQyxRQUFJLEVBQUVqSCxJQUFJLENBQUN3QixLQUFMLENBQVc4RSxRQUFRLENBQUNNLEtBQUQsRUFBUUUsS0FBUixDQUFuQixDQUhIO0FBSUhJLGdCQUFZLEVBQUdiLEVBQUUsQ0FBQ0UsT0FBSCxLQUFlTyxLQUFLLENBQUNQLE9BQU4sRUFBaEIsSUFBb0NILEVBQUUsQ0FBQ0csT0FBSCxLQUFlSyxLQUFLLENBQUNMLE9BQU4sRUFBbkQ7QUFKWCxHQUFQO0FBTUgsQyxDQUNEOzs7QUFDQSxTQUFTWSxjQUFULENBQXdCZixFQUF4QixFQUE0QkMsRUFBNUIsRUFBZ0M7QUFDNUIsTUFBSWUsQ0FBQyxHQUFHQyxhQUFhLENBQUNqQixFQUFELEVBQUtDLEVBQUwsQ0FBckI7O0FBQ0EsTUFBSWUsQ0FBQyxLQUFLLElBQU4sSUFBY0EsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUE1QixFQUErQjtBQUMzQixXQUFPQSxDQUFDLEdBQUcsQ0FBWDtBQUNIOztBQUNELFNBQU8sSUFBUDtBQUNIOztBQUNELFNBQVNDLGFBQVQsQ0FBdUJqQixFQUF2QixFQUEyQkMsRUFBM0IsRUFBK0I7QUFDM0IsTUFBSWlCLFFBQVEsQ0FBQ2xCLEVBQUQsQ0FBUixLQUFpQmtCLFFBQVEsQ0FBQ2pCLEVBQUQsQ0FBN0IsRUFBbUM7QUFDL0IsV0FBT3JHLElBQUksQ0FBQ3dCLEtBQUwsQ0FBVzhFLFFBQVEsQ0FBQ0YsRUFBRCxFQUFLQyxFQUFMLENBQW5CLENBQVA7QUFDSDs7QUFDRCxTQUFPLElBQVA7QUFDSCxDLENBQ0Q7OztBQUNBLFNBQVNRLFVBQVQsQ0FBb0JqQixDQUFwQixFQUF1QjtBQUNuQixTQUFPSSxjQUFjLENBQUMsQ0FDbEJKLENBQUMsQ0FBQzJCLGNBQUYsRUFEa0IsRUFFbEIzQixDQUFDLENBQUM0QixXQUFGLEVBRmtCLEVBR2xCNUIsQ0FBQyxDQUFDNkIsVUFBRixFQUhrQixDQUFELENBQXJCO0FBS0g7O0FBQ0QsU0FBU0MsV0FBVCxDQUFxQjlCLENBQXJCLEVBQXdCO0FBQ3BCLFNBQU9JLGNBQWMsQ0FBQyxDQUNsQkosQ0FBQyxDQUFDMkIsY0FBRixFQURrQixFQUVsQjNCLENBQUMsQ0FBQzRCLFdBQUYsRUFGa0IsRUFHbEI1QixDQUFDLENBQUM2QixVQUFGLEVBSGtCLEVBSWxCN0IsQ0FBQyxDQUFDK0IsV0FBRixFQUprQixDQUFELENBQXJCO0FBTUg7O0FBQ0QsU0FBU0MsYUFBVCxDQUF1QmhDLENBQXZCLEVBQTBCO0FBQ3RCLFNBQU9JLGNBQWMsQ0FBQyxDQUNsQkosQ0FBQyxDQUFDMkIsY0FBRixFQURrQixFQUVsQjNCLENBQUMsQ0FBQzRCLFdBQUYsRUFGa0IsRUFHbEI1QixDQUFDLENBQUM2QixVQUFGLEVBSGtCLEVBSWxCN0IsQ0FBQyxDQUFDK0IsV0FBRixFQUprQixFQUtsQi9CLENBQUMsQ0FBQ2lDLGFBQUYsRUFMa0IsQ0FBRCxDQUFyQjtBQU9IOztBQUNELFNBQVNDLGFBQVQsQ0FBdUJsQyxDQUF2QixFQUEwQjtBQUN0QixTQUFPSSxjQUFjLENBQUMsQ0FDbEJKLENBQUMsQ0FBQzJCLGNBQUYsRUFEa0IsRUFFbEIzQixDQUFDLENBQUM0QixXQUFGLEVBRmtCLEVBR2xCNUIsQ0FBQyxDQUFDNkIsVUFBRixFQUhrQixFQUlsQjdCLENBQUMsQ0FBQytCLFdBQUYsRUFKa0IsRUFLbEIvQixDQUFDLENBQUNpQyxhQUFGLEVBTGtCLEVBTWxCakMsQ0FBQyxDQUFDbUMsYUFBRixFQU5rQixDQUFELENBQXJCO0FBUUgsQyxDQUNEOzs7QUFDQSxTQUFTQyxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsR0FBNUIsRUFBaUNDLEdBQWpDLEVBQXNDO0FBQ2xDLE1BQUlDLENBQUMsR0FBR0gsTUFBTSxDQUFDVixjQUFQLEVBQVI7QUFDQSxNQUFJYyxDQUFDLEdBQUdDLGVBQWUsQ0FBQ0wsTUFBRCxFQUFTRyxDQUFULEVBQVlGLEdBQVosRUFBaUJDLEdBQWpCLENBQXZCOztBQUNBLE1BQUlFLENBQUMsR0FBRyxDQUFSLEVBQVc7QUFDUCxXQUFPQyxlQUFlLENBQUNMLE1BQUQsRUFBU0csQ0FBQyxHQUFHLENBQWIsRUFBZ0JGLEdBQWhCLEVBQXFCQyxHQUFyQixDQUF0QjtBQUNIOztBQUNELE1BQUlJLEtBQUssR0FBR0QsZUFBZSxDQUFDTCxNQUFELEVBQVNHLENBQUMsR0FBRyxDQUFiLEVBQWdCRixHQUFoQixFQUFxQkMsR0FBckIsQ0FBM0I7O0FBQ0EsTUFBSUksS0FBSyxJQUFJLENBQWIsRUFBZ0I7QUFDWixXQUFPdkksSUFBSSxDQUFDRSxHQUFMLENBQVNtSSxDQUFULEVBQVlFLEtBQVosQ0FBUDtBQUNIOztBQUNELFNBQU9GLENBQVA7QUFDSDs7QUFDRCxTQUFTQyxlQUFULENBQXlCTCxNQUF6QixFQUFpQ08sSUFBakMsRUFBdUNOLEdBQXZDLEVBQTRDQyxHQUE1QyxFQUFpRDtBQUM3QyxNQUFJTSxjQUFjLEdBQUd6QyxjQUFjLENBQUMsQ0FBQ3dDLElBQUQsRUFBTyxDQUFQLEVBQVUsSUFBSUUsZUFBZSxDQUFDRixJQUFELEVBQU9OLEdBQVAsRUFBWUMsR0FBWixDQUE3QixDQUFELENBQW5DO0FBQ0EsTUFBSVEsUUFBUSxHQUFHOUIsVUFBVSxDQUFDb0IsTUFBRCxDQUF6QjtBQUNBLE1BQUloQixJQUFJLEdBQUdqSCxJQUFJLENBQUN3QixLQUFMLENBQVc4RSxRQUFRLENBQUNtQyxjQUFELEVBQWlCRSxRQUFqQixDQUFuQixDQUFYO0FBQ0EsU0FBTzNJLElBQUksQ0FBQzdMLEtBQUwsQ0FBVzhTLElBQUksR0FBRyxDQUFsQixJQUF1QixDQUE5QixDQUo2QyxDQUlaO0FBQ3BDLEMsQ0FDRDs7O0FBQ0EsU0FBU3lCLGVBQVQsQ0FBeUJGLElBQXpCLEVBQStCTixHQUEvQixFQUFvQ0MsR0FBcEMsRUFBeUM7QUFDckM7QUFDQSxNQUFJUyxHQUFHLEdBQUcsSUFBSVYsR0FBSixHQUFVQyxHQUFwQixDQUZxQyxDQUdyQzs7QUFDQSxNQUFJVSxLQUFLLEdBQUcsQ0FBQyxJQUFJN0MsY0FBYyxDQUFDLENBQUN3QyxJQUFELEVBQU8sQ0FBUCxFQUFVSSxHQUFWLENBQUQsQ0FBZCxDQUErQkUsU0FBL0IsRUFBSixHQUFpRFosR0FBbEQsSUFBeUQsQ0FBckU7QUFDQSxTQUFPLENBQUNXLEtBQUQsR0FBU0QsR0FBVCxHQUFlLENBQXRCO0FBQ0gsQyxDQUNEOzs7QUFDQSxTQUFTRyxnQkFBVCxDQUEwQnBQLElBQTFCLEVBQWdDO0FBQzVCLFNBQU8sQ0FDSEEsSUFBSSxDQUFDcVAsV0FBTCxFQURHLEVBRUhyUCxJQUFJLENBQUNzUCxRQUFMLEVBRkcsRUFHSHRQLElBQUksQ0FBQ3VQLE9BQUwsRUFIRyxFQUlIdlAsSUFBSSxDQUFDd1AsUUFBTCxFQUpHLEVBS0h4UCxJQUFJLENBQUN5UCxVQUFMLEVBTEcsRUFNSHpQLElBQUksQ0FBQzBQLFVBQUwsRUFORyxFQU9IMVAsSUFBSSxDQUFDMlAsZUFBTCxFQVBHLENBQVA7QUFTSDs7QUFDRCxTQUFTQyxnQkFBVCxDQUEwQnpELENBQTFCLEVBQTZCO0FBQ3pCLFNBQU8sSUFBSTBELElBQUosQ0FBUzFELENBQUMsQ0FBQyxDQUFELENBQVYsRUFBZUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLENBQXZCLEVBQTBCQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsSUFBUixHQUFlLENBQWYsR0FBbUJBLENBQUMsQ0FBQyxDQUFELENBQTlDLEVBQW1EO0FBQzFEQSxHQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsQ0FERCxFQUNJQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsQ0FEWixFQUNlQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsQ0FEdkIsQ0FBUDtBQUVIOztBQUNELFNBQVNDLGNBQVQsQ0FBd0JwTSxJQUF4QixFQUE4QjtBQUMxQixTQUFPLENBQ0hBLElBQUksQ0FBQzROLGNBQUwsRUFERyxFQUVINU4sSUFBSSxDQUFDNk4sV0FBTCxFQUZHLEVBR0g3TixJQUFJLENBQUM4TixVQUFMLEVBSEcsRUFJSDlOLElBQUksQ0FBQ2dPLFdBQUwsRUFKRyxFQUtIaE8sSUFBSSxDQUFDa08sYUFBTCxFQUxHLEVBTUhsTyxJQUFJLENBQUNvTyxhQUFMLEVBTkcsRUFPSHBPLElBQUksQ0FBQzhQLGtCQUFMLEVBUEcsQ0FBUDtBQVNIOztBQUNELFNBQVN6RCxjQUFULENBQXdCRixDQUF4QixFQUEyQjtBQUN2QjtBQUNBO0FBQ0EsTUFBSUEsQ0FBQyxDQUFDeEosTUFBRixLQUFhLENBQWpCLEVBQW9CO0FBQ2hCd0osS0FBQyxHQUFHQSxDQUFDLENBQUN6QixNQUFGLENBQVMsQ0FBQyxDQUFELENBQVQsQ0FBSjtBQUNIOztBQUNELFNBQU8sSUFBSW1GLElBQUosQ0FBU0EsSUFBSSxDQUFDRSxHQUFMLENBQVNDLEtBQVQsQ0FBZUgsSUFBZixFQUFxQjFELENBQXJCLENBQVQsQ0FBUDtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBUzhELFdBQVQsQ0FBcUJoRSxDQUFyQixFQUF3QjtBQUNwQixTQUFPLENBQUN0UyxLQUFLLENBQUNzUyxDQUFDLENBQUNXLE9BQUYsRUFBRCxDQUFiO0FBQ0g7O0FBQ0QsU0FBU2UsUUFBVCxDQUFrQjFCLENBQWxCLEVBQXFCO0FBQ2pCLFNBQU9BLENBQUMsQ0FBQytCLFdBQUYsS0FBa0IsSUFBbEIsR0FBeUIsRUFBekIsR0FBOEIsRUFBOUIsR0FDSC9CLENBQUMsQ0FBQ2lDLGFBQUYsS0FBb0IsSUFBcEIsR0FBMkIsRUFEeEIsR0FFSGpDLENBQUMsQ0FBQ21DLGFBQUYsS0FBb0IsSUFGakIsR0FHSG5DLENBQUMsQ0FBQzZELGtCQUFGLEVBSEo7QUFJSDs7QUFFRCxJQUFJSSxjQUFjLEdBQUcsQ0FBQyxPQUFELEVBQVUsUUFBVixFQUFvQixNQUFwQixFQUE0QixjQUE1QixDQUFyQjtBQUNBLElBQUlDLFFBQVEsR0FBRywwREFBZixDLENBQ0E7O0FBQ0EsU0FBU0MsY0FBVCxDQUF3Qm5WLEtBQXhCLEVBQStCb1YsSUFBL0IsRUFBcUM7QUFDakMsTUFBSUMsRUFBSjs7QUFDQSxNQUFJLE9BQU9yVixLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLFdBQU9zVixXQUFXLENBQUN0VixLQUFELENBQWxCO0FBQ0gsR0FGRCxNQUdLLElBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBakMsRUFBd0M7QUFBRTtBQUMzQyxXQUFPdVYsZUFBZSxDQUFDdlYsS0FBRCxDQUF0QjtBQUNILEdBRkksTUFHQSxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDaEMsV0FBT3VWLGVBQWUsRUFBRUYsRUFBRSxHQUFHLEVBQUwsRUFBU0EsRUFBRSxDQUFDRCxJQUFJLElBQUksY0FBVCxDQUFGLEdBQTZCcFYsS0FBdEMsRUFBNkNxVixFQUEvQyxFQUF0QjtBQUNILEdBRkksTUFHQTtBQUNELFdBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBU0MsV0FBVCxDQUFxQkUsQ0FBckIsRUFBd0I7QUFDcEIsTUFBSXhFLENBQUMsR0FBR2tFLFFBQVEsQ0FBQ08sSUFBVCxDQUFjRCxDQUFkLENBQVI7O0FBQ0EsTUFBSXhFLENBQUosRUFBTztBQUNILFFBQUkwRSxJQUFJLEdBQUcxRSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sQ0FBQyxDQUFSLEdBQVksQ0FBdkI7QUFDQSxXQUFPO0FBQ0htQixXQUFLLEVBQUUsQ0FESjtBQUVIQyxZQUFNLEVBQUUsQ0FGTDtBQUdIQyxVQUFJLEVBQUVxRCxJQUFJLElBQUkxRSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU92UixRQUFRLENBQUN1UixDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sRUFBUCxDQUFmLEdBQTRCLENBQWhDLENBSFA7QUFJSHNCLGtCQUFZLEVBQUVvRCxJQUFJLElBQUksQ0FBQzFFLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT3ZSLFFBQVEsQ0FBQ3VSLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBTyxFQUFQLENBQWYsR0FBNEIsQ0FBN0IsSUFBa0MsRUFBbEMsR0FBdUMsRUFBdkMsR0FBNEMsSUFBNUMsR0FBbUQ7QUFDckUsT0FBQ0EsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPdlIsUUFBUSxDQUFDdVIsQ0FBQyxDQUFDLENBQUQsQ0FBRixFQUFPLEVBQVAsQ0FBZixHQUE0QixDQUE3QixJQUFrQyxFQUFsQyxHQUF1QyxJQURyQixHQUM0QjtBQUM5QyxPQUFDQSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU92UixRQUFRLENBQUN1UixDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sRUFBUCxDQUFmLEdBQTRCLENBQTdCLElBQWtDLElBRmhCLEtBRXVCO0FBQ3hDQSxPQUFDLENBQUMsQ0FBRCxDQUFELEdBQU92UixRQUFRLENBQUN1UixDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sRUFBUCxDQUFmLEdBQTRCLENBSFgsQ0FBSixDQUdrQjtBQUhsQjtBQUpmLEtBQVA7QUFVSDs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFTdUUsZUFBVCxDQUF5QkksR0FBekIsRUFBOEI7QUFDMUIsU0FBTztBQUNIeEQsU0FBSyxFQUFFd0QsR0FBRyxDQUFDeEQsS0FBSixJQUFhd0QsR0FBRyxDQUFDL0IsSUFBakIsSUFBeUIsQ0FEN0I7QUFFSHhCLFVBQU0sRUFBRXVELEdBQUcsQ0FBQ3ZELE1BQUosSUFBY3VELEdBQUcsQ0FBQ0MsS0FBbEIsSUFBMkIsQ0FGaEM7QUFHSHZELFFBQUksRUFBRSxDQUFDc0QsR0FBRyxDQUFDdEQsSUFBSixJQUFZc0QsR0FBRyxDQUFDRSxHQUFoQixJQUF1QixDQUF4QixJQUNGQyxpQkFBaUIsQ0FBQ0gsR0FBRCxDQUFqQixHQUF5QixDQUoxQjtBQUtIckQsZ0JBQVksRUFBRSxDQUFDcUQsR0FBRyxDQUFDSSxLQUFKLElBQWFKLEdBQUcsQ0FBQ0ssSUFBakIsSUFBeUIsQ0FBMUIsSUFBK0IsRUFBL0IsR0FBb0MsRUFBcEMsR0FBeUMsSUFBekMsR0FBZ0Q7QUFDMUQsS0FBQ0wsR0FBRyxDQUFDTSxPQUFKLElBQWVOLEdBQUcsQ0FBQ08sTUFBbkIsSUFBNkIsQ0FBOUIsSUFBbUMsRUFBbkMsR0FBd0MsSUFEOUIsR0FDcUM7QUFDL0MsS0FBQ1AsR0FBRyxDQUFDUSxPQUFKLElBQWVSLEdBQUcsQ0FBQ1MsTUFBbkIsSUFBNkIsQ0FBOUIsSUFBbUMsSUFGekIsS0FFZ0M7QUFDekNULE9BQUcsQ0FBQ3JELFlBQUosSUFBb0JxRCxHQUFHLENBQUNVLFdBQXhCLElBQXVDVixHQUFHLENBQUNXLEVBQTNDLElBQWlELENBSHhDLENBTFgsQ0FRc0Q7O0FBUnRELEdBQVA7QUFVSDs7QUFDRCxTQUFTUixpQkFBVCxDQUEyQkgsR0FBM0IsRUFBZ0M7QUFDNUIsU0FBT0EsR0FBRyxDQUFDWSxLQUFKLElBQWFaLEdBQUcsQ0FBQ2EsSUFBakIsSUFBeUIsQ0FBaEM7QUFDSCxDLENBQ0Q7OztBQUNBLFNBQVNDLGNBQVQsQ0FBd0JDLEVBQXhCLEVBQTRCQyxFQUE1QixFQUFnQztBQUM1QixTQUFPRCxFQUFFLENBQUN2RSxLQUFILEtBQWF3RSxFQUFFLENBQUN4RSxLQUFoQixJQUNIdUUsRUFBRSxDQUFDdEUsTUFBSCxLQUFjdUUsRUFBRSxDQUFDdkUsTUFEZCxJQUVIc0UsRUFBRSxDQUFDckUsSUFBSCxLQUFZc0UsRUFBRSxDQUFDdEUsSUFGWixJQUdIcUUsRUFBRSxDQUFDcEUsWUFBSCxLQUFvQnFFLEVBQUUsQ0FBQ3JFLFlBSDNCO0FBSUg7O0FBQ0QsU0FBU3NFLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCO0FBQ3RCLFNBQU9BLEdBQUcsQ0FBQzFFLEtBQUosS0FBYyxDQUFkLElBQW1CMEUsR0FBRyxDQUFDekUsTUFBSixLQUFlLENBQWxDLElBQXVDeUUsR0FBRyxDQUFDeEUsSUFBSixLQUFhLENBQXBELElBQXlEd0UsR0FBRyxDQUFDdkUsWUFBSixLQUFxQixDQUFyRjtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBU3dFLFlBQVQsQ0FBc0JKLEVBQXRCLEVBQTBCQyxFQUExQixFQUE4QjtBQUMxQixTQUFPO0FBQ0h4RSxTQUFLLEVBQUV1RSxFQUFFLENBQUN2RSxLQUFILEdBQVd3RSxFQUFFLENBQUN4RSxLQURsQjtBQUVIQyxVQUFNLEVBQUVzRSxFQUFFLENBQUN0RSxNQUFILEdBQVl1RSxFQUFFLENBQUN2RSxNQUZwQjtBQUdIQyxRQUFJLEVBQUVxRSxFQUFFLENBQUNyRSxJQUFILEdBQVVzRSxFQUFFLENBQUN0RSxJQUhoQjtBQUlIQyxnQkFBWSxFQUFFb0UsRUFBRSxDQUFDcEUsWUFBSCxHQUFrQnFFLEVBQUUsQ0FBQ3JFO0FBSmhDLEdBQVA7QUFNSDs7QUFDRCxTQUFTeUUsaUJBQVQsQ0FBMkJKLEVBQTNCLEVBQStCRCxFQUEvQixFQUFtQztBQUMvQixTQUFPO0FBQ0h2RSxTQUFLLEVBQUV3RSxFQUFFLENBQUN4RSxLQUFILEdBQVd1RSxFQUFFLENBQUN2RSxLQURsQjtBQUVIQyxVQUFNLEVBQUV1RSxFQUFFLENBQUN2RSxNQUFILEdBQVlzRSxFQUFFLENBQUN0RSxNQUZwQjtBQUdIQyxRQUFJLEVBQUVzRSxFQUFFLENBQUN0RSxJQUFILEdBQVVxRSxFQUFFLENBQUNyRSxJQUhoQjtBQUlIQyxnQkFBWSxFQUFFcUUsRUFBRSxDQUFDckUsWUFBSCxHQUFrQm9FLEVBQUUsQ0FBQ3BFO0FBSmhDLEdBQVA7QUFNSDs7QUFDRCxTQUFTMEUsZ0JBQVQsQ0FBMEJ4RSxDQUExQixFQUE2QnZCLENBQTdCLEVBQWdDO0FBQzVCLFNBQU87QUFDSGtCLFNBQUssRUFBRUssQ0FBQyxDQUFDTCxLQUFGLEdBQVVsQixDQURkO0FBRUhtQixVQUFNLEVBQUVJLENBQUMsQ0FBQ0osTUFBRixHQUFXbkIsQ0FGaEI7QUFHSG9CLFFBQUksRUFBRUcsQ0FBQyxDQUFDSCxJQUFGLEdBQVNwQixDQUhaO0FBSUhxQixnQkFBWSxFQUFFRSxDQUFDLENBQUNGLFlBQUYsR0FBaUJyQjtBQUo1QixHQUFQO0FBTUgsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVNnRyxZQUFULENBQXNCSixHQUF0QixFQUEyQjtBQUN2QixTQUFPSyxXQUFXLENBQUNMLEdBQUQsQ0FBWCxHQUFtQixHQUExQjtBQUNIOztBQUNELFNBQVNNLGFBQVQsQ0FBdUJOLEdBQXZCLEVBQTRCO0FBQ3hCLFNBQU9LLFdBQVcsQ0FBQ0wsR0FBRCxDQUFYLEdBQW1CLEVBQTFCO0FBQ0g7O0FBQ0QsU0FBU0ssV0FBVCxDQUFxQkwsR0FBckIsRUFBMEI7QUFDdEIsU0FBT08sU0FBUyxDQUFDUCxHQUFELENBQVQsR0FBaUIsS0FBeEI7QUFDSDs7QUFDRCxTQUFTUSxjQUFULENBQXdCUixHQUF4QixFQUE2QjtBQUN6QixTQUFPTyxTQUFTLENBQUNQLEdBQUQsQ0FBVCxJQUFrQixPQUFPLEVBQXpCLENBQVA7QUFDSDs7QUFDRCxTQUFTUyxjQUFULENBQXdCVCxHQUF4QixFQUE2QjtBQUN6QixTQUFPTyxTQUFTLENBQUNQLEdBQUQsQ0FBVCxHQUFpQixJQUF4QjtBQUNIOztBQUNELFNBQVNPLFNBQVQsQ0FBbUJQLEdBQW5CLEVBQXdCO0FBQ3BCLFNBQU9BLEdBQUcsQ0FBQzFFLEtBQUosSUFBYSxNQUFNLEtBQW5CLElBQ0gwRSxHQUFHLENBQUN6RSxNQUFKLElBQWMsS0FBSyxLQUFuQixDQURHLEdBRUh5RSxHQUFHLENBQUN4RSxJQUFKLEdBQVcsS0FGUixHQUdId0UsR0FBRyxDQUFDdkUsWUFIUjtBQUlILEMsQ0FDRDs7O0FBQ0EsU0FBU2lGLG9CQUFULENBQThCQyxTQUE5QixFQUF5Q0MsV0FBekMsRUFBc0Q7QUFDbEQsTUFBSXRNLEdBQUcsR0FBRyxJQUFWOztBQUNBLE9BQUssSUFBSTFGLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd3UCxjQUFjLENBQUN2TixNQUFuQyxFQUEyQ2pDLENBQUMsRUFBNUMsRUFBZ0Q7QUFDNUMsUUFBSTJQLElBQUksR0FBR0gsY0FBYyxDQUFDeFAsQ0FBRCxDQUF6Qjs7QUFDQSxRQUFJZ1MsV0FBVyxDQUFDckMsSUFBRCxDQUFmLEVBQXVCO0FBQ25CLFVBQUlzQyxRQUFRLEdBQUdGLFNBQVMsQ0FBQ3BDLElBQUQsQ0FBVCxHQUFrQnFDLFdBQVcsQ0FBQ3JDLElBQUQsQ0FBNUM7O0FBQ0EsVUFBSSxDQUFDdUMsS0FBSyxDQUFDRCxRQUFELENBQU4sSUFBcUJ2TSxHQUFHLEtBQUssSUFBUixJQUFnQkEsR0FBRyxLQUFLdU0sUUFBakQsRUFBNEQ7QUFDeEQsZUFBTyxJQUFQO0FBQ0g7O0FBQ0R2TSxTQUFHLEdBQUd1TSxRQUFOO0FBQ0gsS0FORCxNQU9LLElBQUlGLFNBQVMsQ0FBQ3BDLElBQUQsQ0FBYixFQUFxQjtBQUN0QjtBQUNBLGFBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBT2pLLEdBQVA7QUFDSDs7QUFDRCxTQUFTeU0sMkJBQVQsQ0FBcUNmLEdBQXJDLEVBQTBDZ0IsZUFBMUMsRUFBMkQ7QUFDdkQsTUFBSXZCLEVBQUUsR0FBR08sR0FBRyxDQUFDdkUsWUFBYjs7QUFDQSxNQUFJZ0UsRUFBSixFQUFRO0FBQ0osUUFBSUEsRUFBRSxHQUFHLElBQUwsS0FBYyxDQUFsQixFQUFxQjtBQUNqQixhQUFPO0FBQUVsQixZQUFJLEVBQUUsYUFBUjtBQUF1QjBDLGFBQUssRUFBRXhCO0FBQTlCLE9BQVA7QUFDSDs7QUFDRCxRQUFJQSxFQUFFLElBQUksT0FBTyxFQUFYLENBQUYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDeEIsYUFBTztBQUFFbEIsWUFBSSxFQUFFLFFBQVI7QUFBa0IwQyxhQUFLLEVBQUV4QixFQUFFLEdBQUc7QUFBOUIsT0FBUDtBQUNIOztBQUNELFFBQUlBLEVBQUUsSUFBSSxPQUFPLEVBQVAsR0FBWSxFQUFoQixDQUFGLEtBQTBCLENBQTlCLEVBQWlDO0FBQzdCLGFBQU87QUFBRWxCLFlBQUksRUFBRSxRQUFSO0FBQWtCMEMsYUFBSyxFQUFFeEIsRUFBRSxJQUFJLE9BQU8sRUFBWDtBQUEzQixPQUFQO0FBQ0g7O0FBQ0QsUUFBSUEsRUFBSixFQUFRO0FBQ0osYUFBTztBQUFFbEIsWUFBSSxFQUFFLE1BQVI7QUFBZ0IwQyxhQUFLLEVBQUV4QixFQUFFLElBQUksT0FBTyxFQUFQLEdBQVksRUFBaEI7QUFBekIsT0FBUDtBQUNIO0FBQ0o7O0FBQ0QsTUFBSU8sR0FBRyxDQUFDeEUsSUFBUixFQUFjO0FBQ1YsUUFBSSxDQUFDd0YsZUFBRCxJQUFvQmhCLEdBQUcsQ0FBQ3hFLElBQUosR0FBVyxDQUFYLEtBQWlCLENBQXpDLEVBQTRDO0FBQ3hDLGFBQU87QUFBRStDLFlBQUksRUFBRSxNQUFSO0FBQWdCMEMsYUFBSyxFQUFFakIsR0FBRyxDQUFDeEUsSUFBSixHQUFXO0FBQWxDLE9BQVA7QUFDSDs7QUFDRCxXQUFPO0FBQUUrQyxVQUFJLEVBQUUsS0FBUjtBQUFlMEMsV0FBSyxFQUFFakIsR0FBRyxDQUFDeEU7QUFBMUIsS0FBUDtBQUNIOztBQUNELE1BQUl3RSxHQUFHLENBQUN6RSxNQUFSLEVBQWdCO0FBQ1osV0FBTztBQUFFZ0QsVUFBSSxFQUFFLE9BQVI7QUFBaUIwQyxXQUFLLEVBQUVqQixHQUFHLENBQUN6RTtBQUE1QixLQUFQO0FBQ0g7O0FBQ0QsTUFBSXlFLEdBQUcsQ0FBQzFFLEtBQVIsRUFBZTtBQUNYLFdBQU87QUFBRWlELFVBQUksRUFBRSxNQUFSO0FBQWdCMEMsV0FBSyxFQUFFakIsR0FBRyxDQUFDMUU7QUFBM0IsS0FBUDtBQUNIOztBQUNELFNBQU87QUFBRWlELFFBQUksRUFBRSxhQUFSO0FBQXVCMEMsU0FBSyxFQUFFO0FBQTlCLEdBQVA7QUFDSDtBQUVEOztBQUVBO0FBQ0E7OztBQUNBLFNBQVNDLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsZUFBakMsRUFBa0Q7QUFDOUMsTUFBSUEsZUFBZSxDQUFDMVcsSUFBcEIsRUFBMEI7QUFDdEJrRixjQUFVLENBQUN1UixLQUFELEVBQVE7QUFDZDdLLHFCQUFlLEVBQUUsQ0FESDtBQUVkK0ssZ0JBQVUsRUFBRUQsZUFBZSxDQUFDMVcsSUFBaEIsR0FBdUI7QUFGckIsS0FBUixDQUFWO0FBSUg7O0FBQ0QsTUFBSTBXLGVBQWUsQ0FBQ3hXLEtBQXBCLEVBQTJCO0FBQ3ZCZ0YsY0FBVSxDQUFDdVIsS0FBRCxFQUFRO0FBQ2QzSyxzQkFBZ0IsRUFBRSxDQURKO0FBRWQ4SyxpQkFBVyxFQUFFRixlQUFlLENBQUN4VyxLQUFoQixHQUF3QjtBQUZ2QixLQUFSLENBQVY7QUFJSDtBQUNKLEMsQ0FDRDs7O0FBQ0EsU0FBUzJXLGtCQUFULENBQTRCSixLQUE1QixFQUFtQztBQUMvQnZSLFlBQVUsQ0FBQ3VSLEtBQUQsRUFBUTtBQUNkRSxjQUFVLEVBQUUsRUFERTtBQUVkQyxlQUFXLEVBQUUsRUFGQztBQUdkaEwsbUJBQWUsRUFBRSxFQUhIO0FBSWRFLG9CQUFnQixFQUFFO0FBSkosR0FBUixDQUFWO0FBTUgsQyxDQUNEOzs7QUFDQSxTQUFTZ0wsYUFBVCxHQUF5QjtBQUNyQnBkLFVBQVEsQ0FBQ3VSLElBQVQsQ0FBY3JDLFNBQWQsQ0FBd0JDLEdBQXhCLENBQTRCLGdCQUE1QjtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBU2tPLFlBQVQsR0FBd0I7QUFDcEJyZCxVQUFRLENBQUN1UixJQUFULENBQWNyQyxTQUFkLENBQXdCckUsTUFBeEIsQ0FBK0IsZ0JBQS9CO0FBQ0gsQyxDQUNEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTeVMsZ0JBQVQsQ0FBMEJuUSxHQUExQixFQUErQm9RLGVBQS9CLEVBQWdEQyxrQkFBaEQsRUFBb0U7QUFDaEU7QUFDQTtBQUNBLE1BQUlDLFVBQVUsR0FBR3ROLElBQUksQ0FBQzdMLEtBQUwsQ0FBV2laLGVBQWUsR0FBR3BRLEdBQUcsQ0FBQ1YsTUFBakMsQ0FBakIsQ0FIZ0UsQ0FHTDs7QUFDM0QsTUFBSWlSLFVBQVUsR0FBR3ZOLElBQUksQ0FBQzdMLEtBQUwsQ0FBV2laLGVBQWUsR0FBR0UsVUFBVSxJQUFJdFEsR0FBRyxDQUFDVixNQUFKLEdBQWEsQ0FBakIsQ0FBdkMsQ0FBakIsQ0FKZ0UsQ0FJYzs7QUFDOUUsTUFBSWtSLE9BQU8sR0FBRyxFQUFkLENBTGdFLENBSzlDOztBQUNsQixNQUFJQyxXQUFXLEdBQUcsRUFBbEIsQ0FOZ0UsQ0FNMUM7O0FBQ3RCLE1BQUlDLFdBQVcsR0FBRyxFQUFsQixDQVBnRSxDQU8xQzs7QUFDdEIsTUFBSUMsVUFBVSxHQUFHLENBQWpCO0FBQ0FDLG9CQUFrQixDQUFDNVEsR0FBRCxDQUFsQixDQVRnRSxDQVN2QztBQUN6QjtBQUNBOztBQUNBQSxLQUFHLENBQUN3SSxPQUFKLENBQVksVUFBVS9OLEVBQVYsRUFBYzRDLENBQWQsRUFBaUI7QUFDekIsUUFBSXdULFNBQVMsR0FBR3hULENBQUMsS0FBSzJDLEdBQUcsQ0FBQ1YsTUFBSixHQUFhLENBQW5CLEdBQXVCaVIsVUFBdkIsR0FBb0NELFVBQXBEO0FBQ0EsUUFBSVEsYUFBYSxHQUFHclcsRUFBRSxDQUFDNkoscUJBQUgsR0FBMkJxQyxNQUEvQztBQUNBLFFBQUlvSyxhQUFhLEdBQUdELGFBQWEsR0FBR2xLLGVBQWUsQ0FBQ25NLEVBQUQsQ0FBbkQ7O0FBQ0EsUUFBSXNXLGFBQWEsR0FBR0YsU0FBcEIsRUFBK0I7QUFDM0JMLGFBQU8sQ0FBQ2hQLElBQVIsQ0FBYS9HLEVBQWI7QUFDQWdXLGlCQUFXLENBQUNqUCxJQUFaLENBQWlCdVAsYUFBakI7QUFDQUwsaUJBQVcsQ0FBQ2xQLElBQVosQ0FBaUJzUCxhQUFqQjtBQUNILEtBSkQsTUFLSztBQUNEO0FBQ0FILGdCQUFVLElBQUlJLGFBQWQ7QUFDSDtBQUNKLEdBYkQsRUFaZ0UsQ0EwQmhFOztBQUNBLE1BQUlWLGtCQUFKLEVBQXdCO0FBQ3BCRCxtQkFBZSxJQUFJTyxVQUFuQjtBQUNBTCxjQUFVLEdBQUd0TixJQUFJLENBQUM3TCxLQUFMLENBQVdpWixlQUFlLEdBQUdJLE9BQU8sQ0FBQ2xSLE1BQXJDLENBQWI7QUFDQWlSLGNBQVUsR0FBR3ZOLElBQUksQ0FBQzdMLEtBQUwsQ0FBV2laLGVBQWUsR0FBR0UsVUFBVSxJQUFJRSxPQUFPLENBQUNsUixNQUFSLEdBQWlCLENBQXJCLENBQXZDLENBQWIsQ0FIb0IsQ0FHMEQ7QUFDakYsR0EvQitELENBZ0NoRTs7O0FBQ0FrUixTQUFPLENBQUNoSSxPQUFSLENBQWdCLFVBQVUvTixFQUFWLEVBQWM0QyxDQUFkLEVBQWlCO0FBQzdCLFFBQUl3VCxTQUFTLEdBQUd4VCxDQUFDLEtBQUttVCxPQUFPLENBQUNsUixNQUFSLEdBQWlCLENBQXZCLEdBQTJCaVIsVUFBM0IsR0FBd0NELFVBQXhEO0FBQ0EsUUFBSVMsYUFBYSxHQUFHTixXQUFXLENBQUNwVCxDQUFELENBQS9CO0FBQ0EsUUFBSXlULGFBQWEsR0FBR0osV0FBVyxDQUFDclQsQ0FBRCxDQUEvQjtBQUNBLFFBQUkyVCxTQUFTLEdBQUdILFNBQVMsSUFBSUUsYUFBYSxHQUFHRCxhQUFwQixDQUF6QixDQUo2QixDQUlnQzs7QUFDN0QsUUFBSUMsYUFBYSxHQUFHRixTQUFwQixFQUErQjtBQUFFO0FBQzdCcFcsUUFBRSxDQUFDNkgsS0FBSCxDQUFTcUUsTUFBVCxHQUFrQnFLLFNBQVMsR0FBRyxJQUE5QjtBQUNIO0FBQ0osR0FSRDtBQVNILEMsQ0FDRDs7O0FBQ0EsU0FBU0osa0JBQVQsQ0FBNEI1USxHQUE1QixFQUFpQztBQUM3QkEsS0FBRyxDQUFDd0ksT0FBSixDQUFZLFVBQVUvTixFQUFWLEVBQWM7QUFDdEJBLE1BQUUsQ0FBQzZILEtBQUgsQ0FBU3FFLE1BQVQsR0FBa0IsRUFBbEI7QUFDSCxHQUZEO0FBR0gsQyxDQUNEO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU3NLLGVBQVQsQ0FBeUJqUixHQUF6QixFQUE4QjtBQUMxQixNQUFJa1IsYUFBYSxHQUFHLENBQXBCO0FBQ0FsUixLQUFHLENBQUN3SSxPQUFKLENBQVksVUFBVS9OLEVBQVYsRUFBYztBQUN0QixRQUFJNEosT0FBTyxHQUFHNUosRUFBRSxDQUFDb0UsVUFBakIsQ0FEc0IsQ0FDTzs7QUFDN0IsUUFBSXdGLE9BQU8sWUFBWWpELFdBQXZCLEVBQW9DO0FBQ2hDLFVBQUkrUCxZQUFZLEdBQUc5TSxPQUFPLENBQUNDLHFCQUFSLEdBQWdDdEssS0FBbkQ7O0FBQ0EsVUFBSW1YLFlBQVksR0FBR0QsYUFBbkIsRUFBa0M7QUFDOUJBLHFCQUFhLEdBQUdDLFlBQWhCO0FBQ0g7QUFDSjtBQUNKLEdBUkQ7QUFTQUQsZUFBYSxHQVhhLENBV1Q7O0FBQ2pCbFIsS0FBRyxDQUFDd0ksT0FBSixDQUFZLFVBQVUvTixFQUFWLEVBQWM7QUFDdEJBLE1BQUUsQ0FBQzZILEtBQUgsQ0FBU3RJLEtBQVQsR0FBaUJrWCxhQUFhLEdBQUcsSUFBakM7QUFDSCxHQUZEO0FBR0EsU0FBT0EsYUFBUDtBQUNILEMsQ0FDRDtBQUNBOzs7QUFDQSxTQUFTRSxxQkFBVCxDQUErQnROLE9BQS9CLEVBQXdDTyxPQUF4QyxFQUFpRDtBQUM3QztBQUNBLE1BQUlnTixnQkFBZ0IsR0FBRztBQUNuQnROLFlBQVEsRUFBRSxVQURTO0FBRW5CNUssUUFBSSxFQUFFLENBQUMsQ0FGWSxDQUVWOztBQUZVLEdBQXZCO0FBSUFrRixZQUFVLENBQUN5RixPQUFELEVBQVV1TixnQkFBVixDQUFWO0FBQ0FoVCxZQUFVLENBQUNnRyxPQUFELEVBQVVnTixnQkFBVixDQUFWO0FBQ0EsTUFBSUMsSUFBSSxHQUFHO0FBQ1Z4TixTQUFPLENBQUNRLHFCQUFSLEdBQWdDcUMsTUFBaEMsR0FDR3RDLE9BQU8sQ0FBQ0MscUJBQVIsR0FBZ0NxQyxNQUZwQyxDQVI2QyxDQVc3Qzs7QUFDQSxNQUFJNEssZUFBZSxHQUFHO0FBQUV4TixZQUFRLEVBQUUsRUFBWjtBQUFnQjVLLFFBQUksRUFBRTtBQUF0QixHQUF0QjtBQUNBa0YsWUFBVSxDQUFDeUYsT0FBRCxFQUFVeU4sZUFBVixDQUFWO0FBQ0FsVCxZQUFVLENBQUNnRyxPQUFELEVBQVVrTixlQUFWLENBQVY7QUFDQSxTQUFPRCxJQUFQO0FBQ0g7QUFDRDs7OztBQUVBLFNBQVNFLGdCQUFULENBQTBCL1csRUFBMUIsRUFBOEI7QUFDMUJBLElBQUUsQ0FBQ3NILFNBQUgsQ0FBYUMsR0FBYixDQUFpQixpQkFBakI7QUFDQXZILElBQUUsQ0FBQ0MsZ0JBQUgsQ0FBb0IsYUFBcEIsRUFBbUMzSSxjQUFuQztBQUNIOztBQUNELFNBQVMwZixjQUFULENBQXdCaFgsRUFBeEIsRUFBNEI7QUFDeEJBLElBQUUsQ0FBQ3NILFNBQUgsQ0FBYXJFLE1BQWIsQ0FBb0IsaUJBQXBCO0FBQ0FqRCxJQUFFLENBQUNxTixtQkFBSCxDQUF1QixhQUF2QixFQUFzQy9WLGNBQXRDO0FBQ0g7QUFDRDs7OztBQUVBLFNBQVMyZixrQkFBVCxDQUE0QmpYLEVBQTVCLEVBQWdDO0FBQzVCQSxJQUFFLENBQUNDLGdCQUFILENBQW9CLGFBQXBCLEVBQW1DM0ksY0FBbkM7QUFDSDs7QUFDRCxTQUFTNGYsZ0JBQVQsQ0FBMEJsWCxFQUExQixFQUE4QjtBQUMxQkEsSUFBRSxDQUFDcU4sbUJBQUgsQ0FBdUIsYUFBdkIsRUFBc0MvVixjQUF0QztBQUNIO0FBQ0Q7Ozs7QUFFQSxTQUFTNmYsZUFBVCxDQUF5QmhhLEtBQXpCLEVBQWdDO0FBQzVCLE1BQUlpYSxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSXpVLENBQUo7QUFDQSxNQUFJMFUsS0FBSjs7QUFDQSxNQUFJLE9BQU9uYSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCa2EsVUFBTSxHQUFHbGEsS0FBSyxDQUFDb2EsS0FBTixDQUFZLFNBQVosQ0FBVDtBQUNILEdBRkQsTUFHSyxJQUFJLE9BQU9wYSxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQ2xDa2EsVUFBTSxHQUFHLENBQUNsYSxLQUFELENBQVQ7QUFDSCxHQUZJLE1BR0EsSUFBSW1ILEtBQUssQ0FBQ2tULE9BQU4sQ0FBY3JhLEtBQWQsQ0FBSixFQUEwQjtBQUMzQmthLFVBQU0sR0FBR2xhLEtBQVQ7QUFDSDs7QUFDRCxPQUFLeUYsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHeVUsTUFBTSxDQUFDeFMsTUFBdkIsRUFBK0JqQyxDQUFDLEVBQWhDLEVBQW9DO0FBQ2hDMFUsU0FBSyxHQUFHRCxNQUFNLENBQUN6VSxDQUFELENBQWQ7O0FBQ0EsUUFBSSxPQUFPMFUsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQkYsV0FBSyxDQUFDclEsSUFBTixDQUFXdVEsS0FBSyxDQUFDRyxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUFwQixHQUNQO0FBQUVuWSxhQUFLLEVBQUVnWSxLQUFLLENBQUNJLFNBQU4sQ0FBZ0IsQ0FBaEIsQ0FBVDtBQUE2QkMsYUFBSyxFQUFFLENBQUM7QUFBckMsT0FETyxHQUVQO0FBQUVyWSxhQUFLLEVBQUVnWSxLQUFUO0FBQWdCSyxhQUFLLEVBQUU7QUFBdkIsT0FGSjtBQUdILEtBSkQsTUFLSyxJQUFJLE9BQU9MLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDbENGLFdBQUssQ0FBQ3JRLElBQU4sQ0FBVztBQUFFNlEsWUFBSSxFQUFFTjtBQUFSLE9BQVg7QUFDSDtBQUNKOztBQUNELFNBQU9GLEtBQVA7QUFDSDs7QUFDRCxTQUFTUyxtQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUNDLElBQW5DLEVBQXlDQyxVQUF6QyxFQUFxRDtBQUNqRCxNQUFJcFYsQ0FBSjtBQUNBLE1BQUlxVixHQUFKOztBQUNBLE9BQUtyVixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdvVixVQUFVLENBQUNuVCxNQUEzQixFQUFtQ2pDLENBQUMsRUFBcEMsRUFBd0M7QUFDcENxVixPQUFHLEdBQUdDLGtCQUFrQixDQUFDSixJQUFELEVBQU9DLElBQVAsRUFBYUMsVUFBVSxDQUFDcFYsQ0FBRCxDQUF2QixDQUF4Qjs7QUFDQSxRQUFJcVYsR0FBSixFQUFTO0FBQ0wsYUFBT0EsR0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxDQUFQO0FBQ0g7O0FBQ0QsU0FBU0Msa0JBQVQsQ0FBNEJKLElBQTVCLEVBQWtDQyxJQUFsQyxFQUF3Q0ksU0FBeEMsRUFBbUQ7QUFDL0MsTUFBSUEsU0FBUyxDQUFDUCxJQUFkLEVBQW9CO0FBQ2hCLFdBQU9PLFNBQVMsQ0FBQ1AsSUFBVixDQUFlRSxJQUFmLEVBQXFCQyxJQUFyQixDQUFQO0FBQ0g7O0FBQ0QsU0FBT0ssZUFBZSxDQUFDTixJQUFJLENBQUNLLFNBQVMsQ0FBQzdZLEtBQVgsQ0FBTCxFQUF3QnlZLElBQUksQ0FBQ0ksU0FBUyxDQUFDN1ksS0FBWCxDQUE1QixDQUFmLElBQ0E2WSxTQUFTLENBQUNSLEtBQVYsSUFBbUIsQ0FEbkIsQ0FBUDtBQUVIOztBQUNELFNBQVNTLGVBQVQsQ0FBeUIvSixDQUF6QixFQUE0QmdLLENBQTVCLEVBQStCO0FBQzNCLE1BQUksQ0FBQ2hLLENBQUQsSUFBTSxDQUFDZ0ssQ0FBWCxFQUFjO0FBQ1YsV0FBTyxDQUFQO0FBQ0g7O0FBQ0QsTUFBSUEsQ0FBQyxJQUFJLElBQVQsRUFBZTtBQUNYLFdBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsTUFBSWhLLENBQUMsSUFBSSxJQUFULEVBQWU7QUFDWCxXQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJLE9BQU9BLENBQVAsS0FBYSxRQUFiLElBQXlCLE9BQU9nSyxDQUFQLEtBQWEsUUFBMUMsRUFBb0Q7QUFDaEQsV0FBT0MsTUFBTSxDQUFDakssQ0FBRCxDQUFOLENBQVVrSyxhQUFWLENBQXdCRCxNQUFNLENBQUNELENBQUQsQ0FBOUIsQ0FBUDtBQUNIOztBQUNELFNBQU9oSyxDQUFDLEdBQUdnSyxDQUFYO0FBQ0g7QUFDRDs7OztBQUVBLFNBQVNHLHFCQUFULENBQStCQyxHQUEvQixFQUFvQztBQUNoQyxTQUFPQSxHQUFHLENBQUNoQixNQUFKLENBQVcsQ0FBWCxFQUFjaUIsV0FBZCxLQUE4QkQsR0FBRyxDQUFDalUsS0FBSixDQUFVLENBQVYsQ0FBckM7QUFDSDs7QUFDRCxTQUFTbVUsUUFBVCxDQUFrQi9kLEdBQWxCLEVBQXVCZ2UsR0FBdkIsRUFBNEI7QUFDeEIsTUFBSWpHLENBQUMsR0FBRzJGLE1BQU0sQ0FBQzFkLEdBQUQsQ0FBZDtBQUNBLFNBQU8sTUFBTWtILE1BQU4sQ0FBYSxDQUFiLEVBQWdCOFcsR0FBRyxHQUFHakcsQ0FBQyxDQUFDOU4sTUFBeEIsSUFBa0M4TixDQUF6QztBQUNIO0FBQ0Q7Ozs7QUFFQSxTQUFTa0csY0FBVCxDQUF3QnhLLENBQXhCLEVBQTJCZ0ssQ0FBM0IsRUFBOEI7QUFDMUIsU0FBT2hLLENBQUMsR0FBR2dLLENBQVg7QUFDSDs7QUFDRCxTQUFTdkQsS0FBVCxDQUFlMUcsQ0FBZixFQUFrQjtBQUNkLFNBQU9BLENBQUMsR0FBRyxDQUFKLEtBQVUsQ0FBakI7QUFDSDtBQUNEOzs7O0FBRUEsU0FBUzBLLFFBQVQsQ0FBa0JDLFNBQWxCLEVBQTZCQyxPQUE3QixFQUFzQ0MsSUFBdEMsRUFBNEM7QUFDeEMsTUFBSSxPQUFPRixTQUFQLEtBQXFCLFVBQXpCLEVBQXFDO0FBQUU7QUFDbkNBLGFBQVMsR0FBRyxDQUFDQSxTQUFELENBQVo7QUFDSDs7QUFDRCxNQUFJQSxTQUFKLEVBQWU7QUFDWCxRQUFJblcsQ0FBQyxHQUFHLEtBQUssQ0FBYjtBQUNBLFFBQUlzVyxHQUFHLEdBQUcsS0FBSyxDQUFmOztBQUNBLFNBQUt0VyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdtVyxTQUFTLENBQUNsVSxNQUExQixFQUFrQ2pDLENBQUMsRUFBbkMsRUFBdUM7QUFDbkNzVyxTQUFHLEdBQUdILFNBQVMsQ0FBQ25XLENBQUQsQ0FBVCxDQUFhc1AsS0FBYixDQUFtQjhHLE9BQW5CLEVBQTRCQyxJQUE1QixLQUFxQ0MsR0FBM0M7QUFDSDs7QUFDRCxXQUFPQSxHQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFTQyxZQUFULEdBQXdCO0FBQ3BCLE1BQUlGLElBQUksR0FBRyxFQUFYOztBQUNBLE9BQUssSUFBSUcsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDSCxRQUFJLENBQUNHLEVBQUQsQ0FBSixHQUFXQyxTQUFTLENBQUNELEVBQUQsQ0FBcEI7QUFDSDs7QUFDRCxPQUFLLElBQUl4VyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHcVcsSUFBSSxDQUFDcFUsTUFBekIsRUFBaUNqQyxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFFBQUlxVyxJQUFJLENBQUNyVyxDQUFELENBQUosS0FBWTBXLFNBQWhCLEVBQTJCO0FBQ3ZCLGFBQU9MLElBQUksQ0FBQ3JXLENBQUQsQ0FBWDtBQUNIO0FBQ0o7QUFDSixDLENBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBUzJXLFFBQVQsQ0FBa0IzQixJQUFsQixFQUF3QjRCLElBQXhCLEVBQThCO0FBQzFCLE1BQUlDLE9BQUo7QUFDQSxNQUFJUixJQUFKO0FBQ0EsTUFBSVMsT0FBSjtBQUNBLE1BQUlDLFNBQUo7QUFDQSxNQUFJQyxNQUFKOztBQUNBLE1BQUlDLEtBQUssR0FBRyxZQUFZO0FBQ3BCLFFBQUlDLElBQUksR0FBRyxJQUFJL0gsSUFBSixHQUFXakQsT0FBWCxLQUF1QjZLLFNBQWxDOztBQUNBLFFBQUlHLElBQUksR0FBR04sSUFBWCxFQUFpQjtBQUNiQyxhQUFPLEdBQUdwWCxVQUFVLENBQUN3WCxLQUFELEVBQVFMLElBQUksR0FBR00sSUFBZixDQUFwQjtBQUNILEtBRkQsTUFHSztBQUNETCxhQUFPLEdBQUcsSUFBVjtBQUNBRyxZQUFNLEdBQUdoQyxJQUFJLENBQUMxRixLQUFMLENBQVd3SCxPQUFYLEVBQW9CVCxJQUFwQixDQUFUO0FBQ0FTLGFBQU8sR0FBR1QsSUFBSSxHQUFHLElBQWpCO0FBQ0g7QUFDSixHQVZEOztBQVdBLFNBQU8sWUFBWTtBQUNmUyxXQUFPLEdBQUcsSUFBVjtBQUNBVCxRQUFJLEdBQUdJLFNBQVA7QUFDQU0sYUFBUyxHQUFHLElBQUk1SCxJQUFKLEdBQVdqRCxPQUFYLEVBQVo7O0FBQ0EsUUFBSSxDQUFDMkssT0FBTCxFQUFjO0FBQ1ZBLGFBQU8sR0FBR3BYLFVBQVUsQ0FBQ3dYLEtBQUQsRUFBUUwsSUFBUixDQUFwQjtBQUNIOztBQUNELFdBQU9JLE1BQVA7QUFDSCxHQVJEO0FBU0gsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVNHLFdBQVQsQ0FBcUJDLFFBQXJCLEVBQStCQyxVQUEvQixFQUEyQ0MsUUFBM0MsRUFBcURDLGFBQXJELEVBQW9FO0FBQ2hFLE1BQUlELFFBQVEsS0FBSyxLQUFLLENBQXRCLEVBQXlCO0FBQUVBLFlBQVEsR0FBRyxFQUFYO0FBQWdCOztBQUMzQyxNQUFJRSxPQUFPLEdBQUcsRUFBZDs7QUFDQSxPQUFLLElBQUlDLEdBQVQsSUFBZ0JKLFVBQWhCLEVBQTRCO0FBQ3hCLFFBQUlLLFNBQVMsR0FBR0wsVUFBVSxDQUFDSSxHQUFELENBQTFCOztBQUNBLFFBQUlMLFFBQVEsQ0FBQ0ssR0FBRCxDQUFSLEtBQWtCZixTQUF0QixFQUFpQztBQUM3QjtBQUNBLFVBQUlnQixTQUFTLEtBQUtDLFFBQWxCLEVBQTRCO0FBQ3hCSCxlQUFPLENBQUNDLEdBQUQsQ0FBUCxHQUFlLE9BQU9MLFFBQVEsQ0FBQ0ssR0FBRCxDQUFmLEtBQXlCLFVBQXpCLEdBQXNDTCxRQUFRLENBQUNLLEdBQUQsQ0FBOUMsR0FBc0QsSUFBckU7QUFDSCxPQUZELE1BR0ssSUFBSUMsU0FBSixFQUFlO0FBQUU7QUFDbEJGLGVBQU8sQ0FBQ0MsR0FBRCxDQUFQLEdBQWVDLFNBQVMsQ0FBQ04sUUFBUSxDQUFDSyxHQUFELENBQVQsQ0FBeEI7QUFDSCxPQUZJLE1BR0E7QUFDREQsZUFBTyxDQUFDQyxHQUFELENBQVAsR0FBZUwsUUFBUSxDQUFDSyxHQUFELENBQXZCO0FBQ0g7QUFDSixLQVhELE1BWUssSUFBSUgsUUFBUSxDQUFDRyxHQUFELENBQVIsS0FBa0JmLFNBQXRCLEVBQWlDO0FBQ2xDO0FBQ0FjLGFBQU8sQ0FBQ0MsR0FBRCxDQUFQLEdBQWVILFFBQVEsQ0FBQ0csR0FBRCxDQUF2QjtBQUNILEtBSEksTUFJQTtBQUNEO0FBQ0EsVUFBSUMsU0FBUyxLQUFLaEMsTUFBbEIsRUFBMEI7QUFDdEI4QixlQUFPLENBQUNDLEdBQUQsQ0FBUCxHQUFlLEVBQWYsQ0FEc0IsQ0FDSDtBQUN0QixPQUZELE1BR0ssSUFBSSxDQUFDQyxTQUFELElBQWNBLFNBQVMsS0FBS0UsTUFBNUIsSUFBc0NGLFNBQVMsS0FBS0csT0FBcEQsSUFBK0RILFNBQVMsS0FBS0MsUUFBakYsRUFBMkY7QUFDNUZILGVBQU8sQ0FBQ0MsR0FBRCxDQUFQLEdBQWUsSUFBZixDQUQ0RixDQUN2RTtBQUN4QixPQUZJLE1BR0E7QUFDREQsZUFBTyxDQUFDQyxHQUFELENBQVAsR0FBZUMsU0FBUyxDQUFDLElBQUQsQ0FBeEIsQ0FEQyxDQUMrQjtBQUNuQztBQUNKO0FBQ0o7O0FBQ0QsTUFBSUgsYUFBSixFQUFtQjtBQUNmLFNBQUssSUFBSUUsR0FBVCxJQUFnQkwsUUFBaEIsRUFBMEI7QUFDdEIsVUFBSUMsVUFBVSxDQUFDSSxHQUFELENBQVYsS0FBb0JmLFNBQXhCLEVBQW1DO0FBQy9CYSxxQkFBYSxDQUFDRSxHQUFELENBQWIsR0FBcUJMLFFBQVEsQ0FBQ0ssR0FBRCxDQUE3QjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPRCxPQUFQO0FBQ0g7QUFDRDs7QUFFQTtBQUNBOzs7QUFDQSxTQUFTTSxzQkFBVCxDQUFnQ0MsVUFBaEMsRUFBNEM7QUFDeEMsTUFBSUMsTUFBTSxHQUFHclMsSUFBSSxDQUFDN0wsS0FBTCxDQUFXbVMsUUFBUSxDQUFDOEwsVUFBVSxDQUFDdFosS0FBWixFQUFtQnNaLFVBQVUsQ0FBQ3JaLEdBQTlCLENBQW5CLEtBQTBELENBQXZFO0FBQ0EsTUFBSUQsS0FBSyxHQUFHK04sVUFBVSxDQUFDdUwsVUFBVSxDQUFDdFosS0FBWixDQUF0QjtBQUNBLE1BQUlDLEdBQUcsR0FBR2tOLE9BQU8sQ0FBQ25OLEtBQUQsRUFBUXVaLE1BQVIsQ0FBakI7QUFDQSxTQUFPO0FBQUV2WixTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JDLE9BQUcsRUFBRUE7QUFBckIsR0FBUDtBQUNILEMsQ0FDRDtBQUNBOzs7QUFDQSxTQUFTdVosc0JBQVQsQ0FBZ0NGLFVBQWhDLEVBQTRDRyxnQkFBNUMsRUFBOEQ7QUFDMUQsTUFBSUEsZ0JBQWdCLEtBQUssS0FBSyxDQUE5QixFQUFpQztBQUFFQSxvQkFBZ0IsR0FBR3hJLGNBQWMsQ0FBQyxDQUFELENBQWpDO0FBQXVDOztBQUMxRSxNQUFJeUksUUFBUSxHQUFHLElBQWY7QUFDQSxNQUFJQyxNQUFNLEdBQUcsSUFBYjs7QUFDQSxNQUFJTCxVQUFVLENBQUNyWixHQUFmLEVBQW9CO0FBQ2hCMFosVUFBTSxHQUFHNUwsVUFBVSxDQUFDdUwsVUFBVSxDQUFDclosR0FBWixDQUFuQjtBQUNBLFFBQUkyWixTQUFTLEdBQUdOLFVBQVUsQ0FBQ3JaLEdBQVgsQ0FBZXdOLE9BQWYsS0FBMkJrTSxNQUFNLENBQUNsTSxPQUFQLEVBQTNDLENBRmdCLENBRTZDO0FBQzdEO0FBQ0E7QUFDQTs7QUFDQSxRQUFJbU0sU0FBUyxJQUFJQSxTQUFTLElBQUkxRyxTQUFTLENBQUN1RyxnQkFBRCxDQUF2QyxFQUEyRDtBQUN2REUsWUFBTSxHQUFHeE0sT0FBTyxDQUFDd00sTUFBRCxFQUFTLENBQVQsQ0FBaEI7QUFDSDtBQUNKOztBQUNELE1BQUlMLFVBQVUsQ0FBQ3RaLEtBQWYsRUFBc0I7QUFDbEIwWixZQUFRLEdBQUczTCxVQUFVLENBQUN1TCxVQUFVLENBQUN0WixLQUFaLENBQXJCLENBRGtCLENBQ3VCO0FBQ3pDOztBQUNBLFFBQUkyWixNQUFNLElBQUlBLE1BQU0sSUFBSUQsUUFBeEIsRUFBa0M7QUFDOUJDLFlBQU0sR0FBR3hNLE9BQU8sQ0FBQ3VNLFFBQUQsRUFBVyxDQUFYLENBQWhCO0FBQ0g7QUFDSjs7QUFDRCxTQUFPO0FBQUUxWixTQUFLLEVBQUUwWixRQUFUO0FBQW1CelosT0FBRyxFQUFFMFo7QUFBeEIsR0FBUDtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBU0UsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0M7QUFDNUIsTUFBSUMsWUFBWSxHQUFHUCxzQkFBc0IsQ0FBQ00sS0FBRCxDQUF6QztBQUNBLFNBQU90TSxRQUFRLENBQUN1TSxZQUFZLENBQUMvWixLQUFkLEVBQXFCK1osWUFBWSxDQUFDOVosR0FBbEMsQ0FBUixHQUFpRCxDQUF4RDtBQUNIOztBQUNELFNBQVMrWixTQUFULENBQW1CQyxLQUFuQixFQUEwQkMsS0FBMUIsRUFBaUNDLE9BQWpDLEVBQTBDQyxTQUExQyxFQUFxRDtBQUNqRCxNQUFJQSxTQUFTLEtBQUssTUFBbEIsRUFBMEI7QUFDdEIsV0FBT25KLGNBQWMsQ0FBQ2tKLE9BQU8sQ0FBQ0UsY0FBUixDQUF1QkosS0FBdkIsRUFBOEJDLEtBQTlCLENBQUQsRUFBdUMsTUFBdkMsQ0FBckI7QUFDSCxHQUZELE1BR0ssSUFBSUUsU0FBUyxLQUFLLE9BQWxCLEVBQTJCO0FBQzVCLFdBQU9uSixjQUFjLENBQUNrSixPQUFPLENBQUNHLGVBQVIsQ0FBd0JMLEtBQXhCLEVBQStCQyxLQUEvQixDQUFELEVBQXdDLE9BQXhDLENBQXJCO0FBQ0gsR0FGSSxNQUdBO0FBQ0QsV0FBT3JNLGNBQWMsQ0FBQ29NLEtBQUQsRUFBUUMsS0FBUixDQUFyQixDQURDLENBQ29DO0FBQ3hDO0FBQ0o7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7OztBQUVBLElBQUlLLGFBQWEsR0FBRyxVQUFTak0sQ0FBVCxFQUFZMEksQ0FBWixFQUFlO0FBQy9CdUQsZUFBYSxHQUFHQyxNQUFNLENBQUNDLGNBQVAsSUFDWDtBQUFFQyxhQUFTLEVBQUU7QUFBYixlQUE2QnpYLEtBQTdCLElBQXNDLFVBQVVxTCxDQUFWLEVBQWEwSSxDQUFiLEVBQWdCO0FBQUUxSSxLQUFDLENBQUNvTSxTQUFGLEdBQWMxRCxDQUFkO0FBQWtCLEdBRC9ELElBRVosVUFBVTFJLENBQVYsRUFBYTBJLENBQWIsRUFBZ0I7QUFBRSxTQUFLLElBQUkyRCxDQUFULElBQWMzRCxDQUFkLEVBQWlCLElBQUlBLENBQUMsQ0FBQzRELGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJyTSxDQUFDLENBQUNxTSxDQUFELENBQUQsR0FBTzNELENBQUMsQ0FBQzJELENBQUQsQ0FBUjtBQUFjLEdBRjlFOztBQUdBLFNBQU9KLGFBQWEsQ0FBQ2pNLENBQUQsRUFBSTBJLENBQUosQ0FBcEI7QUFDSCxDQUxEOztBQU9BLFNBQVM2RCxTQUFULENBQW1Cdk0sQ0FBbkIsRUFBc0IwSSxDQUF0QixFQUF5QjtBQUNyQnVELGVBQWEsQ0FBQ2pNLENBQUQsRUFBSTBJLENBQUosQ0FBYjs7QUFDQSxXQUFTdGdCLEVBQVQsR0FBYztBQUFFLFNBQUtva0IsV0FBTCxHQUFtQnhNLENBQW5CO0FBQXVCOztBQUN2Q0EsR0FBQyxDQUFDcEwsU0FBRixHQUFjOFQsQ0FBQyxLQUFLLElBQU4sR0FBYXdELE1BQU0sQ0FBQ08sTUFBUCxDQUFjL0QsQ0FBZCxDQUFiLElBQWlDdGdCLEVBQUUsQ0FBQ3dNLFNBQUgsR0FBZThULENBQUMsQ0FBQzlULFNBQWpCLEVBQTRCLElBQUl4TSxFQUFKLEVBQTdELENBQWQ7QUFDSDs7QUFFRCxJQUFJc2tCLFFBQVEsR0FBRyxZQUFXO0FBQ3RCQSxVQUFRLEdBQUdSLE1BQU0sQ0FBQ1MsTUFBUCxJQUFpQixTQUFTRCxRQUFULENBQWtCRSxDQUFsQixFQUFxQjtBQUM3QyxTQUFLLElBQUk1SixDQUFKLEVBQU8vUCxDQUFDLEdBQUcsQ0FBWCxFQUFjd0wsQ0FBQyxHQUFHaUwsU0FBUyxDQUFDeFUsTUFBakMsRUFBeUNqQyxDQUFDLEdBQUd3TCxDQUE3QyxFQUFnRHhMLENBQUMsRUFBakQsRUFBcUQ7QUFDakQrUCxPQUFDLEdBQUcwRyxTQUFTLENBQUN6VyxDQUFELENBQWI7O0FBQ0EsV0FBSyxJQUFJb1osQ0FBVCxJQUFjckosQ0FBZCxFQUFpQixJQUFJa0osTUFBTSxDQUFDdFgsU0FBUCxDQUFpQjBYLGNBQWpCLENBQWdDeFgsSUFBaEMsQ0FBcUNrTyxDQUFyQyxFQUF3Q3FKLENBQXhDLENBQUosRUFBZ0RPLENBQUMsQ0FBQ1AsQ0FBRCxDQUFELEdBQU9ySixDQUFDLENBQUNxSixDQUFELENBQVI7QUFDcEU7O0FBQ0QsV0FBT08sQ0FBUDtBQUNILEdBTkQ7O0FBT0EsU0FBT0YsUUFBUSxDQUFDbkssS0FBVCxDQUFlLElBQWYsRUFBcUJtSCxTQUFyQixDQUFQO0FBQ0gsQ0FURDs7QUFXQSxTQUFTbUQsY0FBVCxDQUF3QkMsVUFBeEIsRUFBb0NDLGFBQXBDLEVBQW1EbEIsT0FBbkQsRUFBNERtQixjQUE1RCxFQUE0RUMsU0FBNUUsRUFBdUY7QUFDbkYsT0FBSyxJQUFJaGEsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRytaLGNBQWMsQ0FBQzlYLE1BQW5DLEVBQTJDakMsQ0FBQyxFQUE1QyxFQUFnRDtBQUM1QyxRQUFJaWEsY0FBYyxHQUFHLEVBQXJCO0FBQ0EsUUFBSUMsTUFBTSxHQUFHSCxjQUFjLENBQUMvWixDQUFELENBQWQsQ0FBa0JtYSxLQUFsQixDQUF3Qk4sVUFBeEIsRUFBb0NJLGNBQXBDLEVBQW9EckIsT0FBcEQsQ0FBYjs7QUFDQSxRQUFJc0IsTUFBSixFQUFZO0FBQ1IsVUFBSUUsTUFBTSxHQUFHSCxjQUFjLENBQUNHLE1BQTVCO0FBQ0EsYUFBT0gsY0FBYyxDQUFDRyxNQUF0QixDQUZRLENBRXNCOztBQUM5QixVQUFJQSxNQUFNLElBQUksSUFBZCxFQUFvQjtBQUNoQkEsY0FBTSxHQUFHTixhQUFUOztBQUNBLFlBQUlNLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2hCQSxnQkFBTSxHQUFHRixNQUFNLENBQUNHLFdBQWhCOztBQUNBLGNBQUlELE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2hCQSxrQkFBTSxHQUFHLEtBQVQ7QUFDSDtBQUNKO0FBQ0o7O0FBQ0RYLGNBQVEsQ0FBQ08sU0FBRCxFQUFZQyxjQUFaLENBQVI7O0FBQ0EsYUFBTztBQUNIRyxjQUFNLEVBQUVBLE1BREw7QUFFSEUsZ0JBQVEsRUFBRUosTUFBTSxDQUFDSSxRQUZkO0FBR0hDLGdCQUFRLEVBQUVMLE1BQU0sQ0FBQ0ssUUFIZDtBQUlIQyxjQUFNLEVBQUV4YTtBQUpMLE9BQVA7QUFNSDtBQUNKOztBQUNELFNBQU8sSUFBUDtBQUNIO0FBQ0Q7Ozs7O0FBR0EsU0FBU3lhLHFCQUFULENBQStCQyxRQUEvQixFQUF5Q0osUUFBekMsRUFBbURLLFlBQW5ELEVBQWlFL0IsT0FBakUsRUFBMEVtQixjQUExRSxFQUEwRjtBQUN0RixNQUFJYSxPQUFPLEdBQUdiLGNBQWMsQ0FBQ1csUUFBUSxDQUFDRyxZQUFULENBQXNCTCxNQUF2QixDQUE1QjtBQUNBLE1BQUlNLE9BQU8sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLENBQWVMLFFBQVEsQ0FBQ0csWUFBVCxDQUFzQk4sUUFBckMsRUFBK0M7QUFDekQ5YixTQUFLLEVBQUVtYSxPQUFPLENBQUNvQyxRQUFSLENBQWlCTCxZQUFZLENBQUNsYyxLQUE5QixFQUFxQzZiLFFBQXJDLENBRGtEO0FBRXpENWIsT0FBRyxFQUFFaWMsWUFBWSxDQUFDamM7QUFGdUMsR0FBL0MsRUFHWGthLE9BSFcsQ0FBZCxDQUZzRixDQU10Rjs7QUFDQSxNQUFJOEIsUUFBUSxDQUFDTixNQUFiLEVBQXFCO0FBQ2pCVSxXQUFPLEdBQUdBLE9BQU8sQ0FBQy9RLEdBQVIsQ0FBWXlDLFVBQVosQ0FBVjtBQUNIOztBQUNELFNBQU9zTyxPQUFQO0FBQ0g7O0FBRUQsSUFBSXpCLGNBQWMsR0FBR0osTUFBTSxDQUFDdFgsU0FBUCxDQUFpQjBYLGNBQXRDLEMsQ0FDQTtBQUNBOztBQUNBLFNBQVM0QixVQUFULENBQW9CQyxRQUFwQixFQUE4QkMsWUFBOUIsRUFBNEM7QUFDeEMsTUFBSUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxNQUFJcGIsQ0FBSjtBQUNBLE1BQUlnRixJQUFKO0FBQ0EsTUFBSXFXLFdBQUo7QUFDQSxNQUFJblgsQ0FBSjtBQUNBLE1BQUlsTSxHQUFKO0FBQ0EsTUFBSTZNLEtBQUo7O0FBQ0EsTUFBSXNXLFlBQUosRUFBa0I7QUFDZCxTQUFLbmIsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHbWIsWUFBWSxDQUFDbFosTUFBN0IsRUFBcUNqQyxDQUFDLEVBQXRDLEVBQTBDO0FBQ3RDZ0YsVUFBSSxHQUFHbVcsWUFBWSxDQUFDbmIsQ0FBRCxDQUFuQjtBQUNBcWIsaUJBQVcsR0FBRyxFQUFkLENBRnNDLENBR3RDOztBQUNBLFdBQUtuWCxDQUFDLEdBQUdnWCxRQUFRLENBQUNqWixNQUFULEdBQWtCLENBQTNCLEVBQThCaUMsQ0FBQyxJQUFJLENBQW5DLEVBQXNDQSxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDbE0sV0FBRyxHQUFHa2pCLFFBQVEsQ0FBQ2hYLENBQUQsQ0FBUixDQUFZYyxJQUFaLENBQU47O0FBQ0EsWUFBSSxPQUFPaE4sR0FBUCxLQUFlLFFBQWYsSUFBMkJBLEdBQS9CLEVBQW9DO0FBQUU7QUFDbENxakIscUJBQVcsQ0FBQ0MsT0FBWixDQUFvQnRqQixHQUFwQjtBQUNILFNBRkQsTUFHSyxJQUFJQSxHQUFHLEtBQUswZSxTQUFaLEVBQXVCO0FBQ3hCMEUsY0FBSSxDQUFDcFcsSUFBRCxDQUFKLEdBQWFoTixHQUFiLENBRHdCLENBQ047O0FBQ2xCO0FBQ0g7QUFDSixPQWJxQyxDQWN0Qzs7O0FBQ0EsVUFBSXFqQixXQUFXLENBQUNwWixNQUFoQixFQUF3QjtBQUNwQm1aLFlBQUksQ0FBQ3BXLElBQUQsQ0FBSixHQUFhaVcsVUFBVSxDQUFDSSxXQUFELENBQXZCO0FBQ0g7QUFDSjtBQUNKLEdBNUJ1QyxDQTZCeEM7OztBQUNBLE9BQUtyYixDQUFDLEdBQUdrYixRQUFRLENBQUNqWixNQUFULEdBQWtCLENBQTNCLEVBQThCakMsQ0FBQyxJQUFJLENBQW5DLEVBQXNDQSxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDNkUsU0FBSyxHQUFHcVcsUUFBUSxDQUFDbGIsQ0FBRCxDQUFoQjs7QUFDQSxTQUFLZ0YsSUFBTCxJQUFhSCxLQUFiLEVBQW9CO0FBQ2hCLFVBQUksRUFBRUcsSUFBSSxJQUFJb1csSUFBVixDQUFKLEVBQXFCO0FBQUU7QUFDbkJBLFlBQUksQ0FBQ3BXLElBQUQsQ0FBSixHQUFhSCxLQUFLLENBQUNHLElBQUQsQ0FBbEI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBT29XLElBQVA7QUFDSDs7QUFDRCxTQUFTRyxVQUFULENBQW9CQyxJQUFwQixFQUEwQnhHLElBQTFCLEVBQWdDO0FBQzVCLE1BQUl5RyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxPQUFLLElBQUloRSxHQUFULElBQWdCK0QsSUFBaEIsRUFBc0I7QUFDbEIsUUFBSXhHLElBQUksQ0FBQ3dHLElBQUksQ0FBQy9ELEdBQUQsQ0FBTCxFQUFZQSxHQUFaLENBQVIsRUFBMEI7QUFDdEJnRSxjQUFRLENBQUNoRSxHQUFELENBQVIsR0FBZ0IrRCxJQUFJLENBQUMvRCxHQUFELENBQXBCO0FBQ0g7QUFDSjs7QUFDRCxTQUFPZ0UsUUFBUDtBQUNIOztBQUNELFNBQVNDLE9BQVQsQ0FBaUJGLElBQWpCLEVBQXVCeEcsSUFBdkIsRUFBNkI7QUFDekIsTUFBSTJHLE9BQU8sR0FBRyxFQUFkOztBQUNBLE9BQUssSUFBSWxFLEdBQVQsSUFBZ0IrRCxJQUFoQixFQUFzQjtBQUNsQkcsV0FBTyxDQUFDbEUsR0FBRCxDQUFQLEdBQWV6QyxJQUFJLENBQUN3RyxJQUFJLENBQUMvRCxHQUFELENBQUwsRUFBWUEsR0FBWixDQUFuQjtBQUNIOztBQUNELFNBQU9rRSxPQUFQO0FBQ0g7O0FBQ0QsU0FBU0MsV0FBVCxDQUFxQm5RLENBQXJCLEVBQXdCO0FBQ3BCLE1BQUkrUCxJQUFJLEdBQUcsRUFBWDs7QUFDQSxPQUFLLElBQUloRixFQUFFLEdBQUcsQ0FBVCxFQUFZcUYsR0FBRyxHQUFHcFEsQ0FBdkIsRUFBMEIrSyxFQUFFLEdBQUdxRixHQUFHLENBQUM1WixNQUFuQyxFQUEyQ3VVLEVBQUUsRUFBN0MsRUFBaUQ7QUFDN0MsUUFBSXNGLElBQUksR0FBR0QsR0FBRyxDQUFDckYsRUFBRCxDQUFkO0FBQ0FnRixRQUFJLENBQUNNLElBQUQsQ0FBSixHQUFhLElBQWI7QUFDSDs7QUFDRCxTQUFPTixJQUFQO0FBQ0g7O0FBQ0QsU0FBU08saUJBQVQsQ0FBMkI3TCxHQUEzQixFQUFnQztBQUM1QixNQUFJekUsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsT0FBSyxJQUFJZ00sR0FBVCxJQUFnQnZILEdBQWhCLEVBQXFCO0FBQ2pCekUsS0FBQyxDQUFDdEgsSUFBRixDQUFPK0wsR0FBRyxDQUFDdUgsR0FBRCxDQUFWO0FBQ0g7O0FBQ0QsU0FBT2hNLENBQVA7QUFDSDs7QUFDRCxTQUFTdVEsWUFBVCxDQUFzQjlHLElBQXRCLEVBQTRCQyxJQUE1QixFQUFrQztBQUM5QixPQUFLLElBQUlzQyxHQUFULElBQWdCdkMsSUFBaEIsRUFBc0I7QUFDbEIsUUFBSW1FLGNBQWMsQ0FBQ3hYLElBQWYsQ0FBb0JxVCxJQUFwQixFQUEwQnVDLEdBQTFCLENBQUosRUFBb0M7QUFDaEMsVUFBSSxFQUFFQSxHQUFHLElBQUl0QyxJQUFULENBQUosRUFBb0I7QUFDaEIsZUFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUNELE9BQUssSUFBSXNDLEdBQVQsSUFBZ0J0QyxJQUFoQixFQUFzQjtBQUNsQixRQUFJa0UsY0FBYyxDQUFDeFgsSUFBZixDQUFvQnNULElBQXBCLEVBQTBCc0MsR0FBMUIsQ0FBSixFQUFvQztBQUNoQyxVQUFJdkMsSUFBSSxDQUFDdUMsR0FBRCxDQUFKLEtBQWN0QyxJQUFJLENBQUNzQyxHQUFELENBQXRCLEVBQTZCO0FBQ3pCLGVBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFTd0UsV0FBVCxDQUFxQkMsU0FBckIsRUFBZ0NDLFFBQWhDLEVBQTBDamhCLFFBQTFDLEVBQW9Ea2hCLGNBQXBELEVBQW9FO0FBQ2hFLE1BQUlDLFVBQVUsR0FBR0MscUJBQXFCLEVBQXRDOztBQUNBLE9BQUssSUFBSTlGLEVBQUUsR0FBRyxDQUFULEVBQVkrRixXQUFXLEdBQUdMLFNBQS9CLEVBQTBDMUYsRUFBRSxHQUFHK0YsV0FBVyxDQUFDdGEsTUFBM0QsRUFBbUV1VSxFQUFFLEVBQXJFLEVBQXlFO0FBQ3JFLFFBQUlnRyxRQUFRLEdBQUdELFdBQVcsQ0FBQy9GLEVBQUQsQ0FBMUI7QUFDQSxRQUFJaUcsS0FBSyxHQUFHQyxVQUFVLENBQUNGLFFBQUQsRUFBV0wsUUFBWCxFQUFxQmpoQixRQUFyQixFQUErQmtoQixjQUEvQixDQUF0Qjs7QUFDQSxRQUFJSyxLQUFKLEVBQVc7QUFDUEUsdUJBQWlCLENBQUNGLEtBQUQsRUFBUUosVUFBUixDQUFqQjtBQUNIO0FBQ0o7O0FBQ0QsU0FBT0EsVUFBUDtBQUNIOztBQUNELFNBQVNNLGlCQUFULENBQTJCRixLQUEzQixFQUFrQ0osVUFBbEMsRUFBOEM7QUFDMUMsTUFBSUEsVUFBVSxLQUFLLEtBQUssQ0FBeEIsRUFBMkI7QUFBRUEsY0FBVSxHQUFHQyxxQkFBcUIsRUFBbEM7QUFBdUM7O0FBQ3BFRCxZQUFVLENBQUNPLElBQVgsQ0FBZ0JILEtBQUssQ0FBQ0ksR0FBTixDQUFVQyxLQUExQixJQUFtQ0wsS0FBSyxDQUFDSSxHQUF6Qzs7QUFDQSxNQUFJSixLQUFLLENBQUNNLFFBQVYsRUFBb0I7QUFDaEJWLGNBQVUsQ0FBQ1csU0FBWCxDQUFxQlAsS0FBSyxDQUFDTSxRQUFOLENBQWVFLFVBQXBDLElBQWtEUixLQUFLLENBQUNNLFFBQXhEO0FBQ0g7O0FBQ0QsU0FBT1YsVUFBUDtBQUNIOztBQUNELFNBQVNhLGVBQVQsQ0FBeUJiLFVBQXpCLEVBQXFDMUIsWUFBckMsRUFBbUR6ZixRQUFuRCxFQUE2RDtBQUN6RCxNQUFJMGQsT0FBTyxHQUFHMWQsUUFBUSxDQUFDMGQsT0FBdkI7QUFDQSxNQUFJZ0UsSUFBSSxHQUFHUCxVQUFVLENBQUNPLElBQXRCO0FBQUEsTUFBNEJJLFNBQVMsR0FBR1gsVUFBVSxDQUFDVyxTQUFuRCxDQUZ5RCxDQUd6RDs7QUFDQUEsV0FBUyxHQUFHekIsVUFBVSxDQUFDeUIsU0FBRCxFQUFZLFVBQVVELFFBQVYsRUFBb0I7QUFDbEQsV0FBTyxDQUFDSCxJQUFJLENBQUNHLFFBQVEsQ0FBQ0QsS0FBVixDQUFKLENBQXFCakMsWUFBN0I7QUFDSCxHQUZxQixDQUF0Qjs7QUFHQSxPQUFLLElBQUlpQyxLQUFULElBQWtCRixJQUFsQixFQUF3QjtBQUNwQixRQUFJQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsS0FBRCxDQUFkOztBQUNBLFFBQUlELEdBQUcsQ0FBQ2hDLFlBQVIsRUFBc0I7QUFDbEIsVUFBSVAsUUFBUSxHQUFHdUMsR0FBRyxDQUFDaEMsWUFBSixDQUFpQlAsUUFBaEM7O0FBQ0EsVUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDWEEsZ0JBQVEsR0FBR3VDLEdBQUcsQ0FBQ3pDLE1BQUosR0FDUGxmLFFBQVEsQ0FBQ2lpQiwwQkFERixHQUVQamlCLFFBQVEsQ0FBQ2tpQix5QkFGYjtBQUdIOztBQUNELFVBQUlDLE1BQU0sR0FBRzVDLHFCQUFxQixDQUFDb0MsR0FBRCxFQUFNdkMsUUFBTixFQUFnQkssWUFBaEIsRUFBOEJ6ZixRQUFRLENBQUMwZCxPQUF2QyxFQUFnRDFkLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QnhELGNBQTVFLENBQWxDOztBQUNBLFdBQUssSUFBSXZELEVBQUUsR0FBRyxDQUFULEVBQVlnSCxRQUFRLEdBQUdILE1BQTVCLEVBQW9DN0csRUFBRSxHQUFHZ0gsUUFBUSxDQUFDdmIsTUFBbEQsRUFBMER1VSxFQUFFLEVBQTVELEVBQWdFO0FBQzVELFlBQUkvWCxLQUFLLEdBQUcrZSxRQUFRLENBQUNoSCxFQUFELENBQXBCO0FBQ0EsWUFBSXVHLFFBQVEsR0FBR1UsbUJBQW1CLENBQUNYLEtBQUQsRUFBUTtBQUN0Q3JlLGVBQUssRUFBRUEsS0FEK0I7QUFFdENDLGFBQUcsRUFBRWthLE9BQU8sQ0FBQ2pVLEdBQVIsQ0FBWWxHLEtBQVosRUFBbUI2YixRQUFuQjtBQUZpQyxTQUFSLENBQWxDO0FBSUEwQyxpQkFBUyxDQUFDRCxRQUFRLENBQUNFLFVBQVYsQ0FBVCxHQUFpQ0YsUUFBakM7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBTztBQUFFSCxRQUFJLEVBQUVBLElBQVI7QUFBY0ksYUFBUyxFQUFFQTtBQUF6QixHQUFQO0FBQ0gsQyxDQUNEO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU1UsaUJBQVQsQ0FBMkJyQixVQUEzQixFQUF1Q1ksVUFBdkMsRUFBbUQ7QUFDL0MsTUFBSUYsUUFBUSxHQUFHVixVQUFVLENBQUNXLFNBQVgsQ0FBcUJDLFVBQXJCLENBQWY7O0FBQ0EsTUFBSUYsUUFBSixFQUFjO0FBQ1YsUUFBSVksS0FBSyxHQUFHdEIsVUFBVSxDQUFDTyxJQUFYLENBQWdCRyxRQUFRLENBQUNELEtBQXpCLENBQVosQ0FEVSxDQUVWOztBQUNBLFFBQUljLFFBQVEsR0FBR0Msb0JBQW9CLENBQUN4QixVQUFELEVBQWEsVUFBVXlCLE9BQVYsRUFBbUI7QUFDL0QsYUFBT0Msa0JBQWtCLENBQUNKLEtBQUQsRUFBUUcsT0FBUixDQUF6QjtBQUNILEtBRmtDLENBQW5DLENBSFUsQ0FNVjtBQUNBOztBQUNBRixZQUFRLENBQUNoQixJQUFULENBQWNlLEtBQUssQ0FBQ2IsS0FBcEIsSUFBNkJhLEtBQTdCO0FBQ0FDLFlBQVEsQ0FBQ1osU0FBVCxDQUFtQkQsUUFBUSxDQUFDRSxVQUE1QixJQUEwQ0YsUUFBMUM7QUFDQSxXQUFPYSxRQUFQO0FBQ0g7O0FBQ0QsU0FBT3RCLHFCQUFxQixFQUE1QjtBQUNIOztBQUNELFNBQVN5QixrQkFBVCxDQUE0QkMsSUFBNUIsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3BDLFNBQU9wRyxPQUFPLENBQUNtRyxJQUFJLENBQUNFLE9BQUwsSUFBZ0JGLElBQUksQ0FBQ0UsT0FBTCxLQUFpQkQsSUFBSSxDQUFDQyxPQUF2QyxDQUFkO0FBQ0g7O0FBQ0QsU0FBU0Msa0JBQVQsQ0FBNEJqQyxTQUE1QixFQUF1Q2tDLFdBQXZDLEVBQW9EbGpCLFFBQXBELEVBQThEO0FBQzFELE1BQUltakIsZ0JBQWdCLEdBQUduakIsUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSxvQkFBYixDQUF2QjtBQUNBLE1BQUlDLG1CQUFtQixHQUFHSCxXQUFXLEdBQUdBLFdBQVcsQ0FBQ0ksa0JBQWYsR0FBb0MsSUFBekU7O0FBQ0EsTUFBSUQsbUJBQUosRUFBeUI7QUFDckJyQyxhQUFTLEdBQUd1QyxxQkFBcUIsQ0FBQ3ZDLFNBQUQsRUFBWXFDLG1CQUFaLENBQWpDO0FBQ0g7O0FBQ0QsTUFBSUYsZ0JBQUosRUFBc0I7QUFDbEJuQyxhQUFTLEdBQUd1QyxxQkFBcUIsQ0FBQ3ZDLFNBQUQsRUFBWW1DLGdCQUFaLENBQWpDO0FBQ0g7O0FBQ0QsU0FBT25DLFNBQVA7QUFDSDs7QUFDRCxTQUFTdUMscUJBQVQsQ0FBK0J2QyxTQUEvQixFQUEwQ2xILElBQTFDLEVBQWdEO0FBQzVDLE1BQUkwSixhQUFKOztBQUNBLE1BQUksQ0FBQzFKLElBQUwsRUFBVztBQUNQMEosaUJBQWEsR0FBR3hDLFNBQWhCO0FBQ0gsR0FGRCxNQUdLO0FBQ0R3QyxpQkFBYSxHQUFHLEVBQWhCOztBQUNBLFNBQUssSUFBSWxJLEVBQUUsR0FBRyxDQUFULEVBQVltSSxXQUFXLEdBQUd6QyxTQUEvQixFQUEwQzFGLEVBQUUsR0FBR21JLFdBQVcsQ0FBQzFjLE1BQTNELEVBQW1FdVUsRUFBRSxFQUFyRSxFQUF5RTtBQUNyRSxVQUFJZ0csUUFBUSxHQUFHbUMsV0FBVyxDQUFDbkksRUFBRCxDQUExQjtBQUNBLFVBQUlvSSxZQUFZLEdBQUc1SixJQUFJLENBQUN3SCxRQUFELENBQXZCOztBQUNBLFVBQUlvQyxZQUFKLEVBQWtCO0FBQ2RGLHFCQUFhLENBQUN2YSxJQUFkLENBQW1CeWEsWUFBbkI7QUFDSCxPQUZELE1BR0ssSUFBSUEsWUFBWSxJQUFJLElBQXBCLEVBQTBCO0FBQzNCRixxQkFBYSxDQUFDdmEsSUFBZCxDQUFtQnFZLFFBQW5CO0FBQ0gsT0FSb0UsQ0FRbkU7O0FBQ0w7QUFDSjs7QUFDRCxTQUFPa0MsYUFBUDtBQUNIOztBQUNELFNBQVNwQyxxQkFBVCxHQUFpQztBQUM3QixTQUFPO0FBQUVNLFFBQUksRUFBRSxFQUFSO0FBQVlJLGFBQVMsRUFBRTtBQUF2QixHQUFQO0FBQ0g7O0FBQ0QsU0FBUzZCLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsTUFBbEMsRUFBMEM7QUFDdEMsU0FBTztBQUNIbkMsUUFBSSxFQUFFbkQsUUFBUSxDQUFDLEVBQUQsRUFBS3FGLE1BQU0sQ0FBQ2xDLElBQVosRUFBa0JtQyxNQUFNLENBQUNuQyxJQUF6QixDQURYO0FBRUhJLGFBQVMsRUFBRXZELFFBQVEsQ0FBQyxFQUFELEVBQUtxRixNQUFNLENBQUM5QixTQUFaLEVBQXVCK0IsTUFBTSxDQUFDL0IsU0FBOUI7QUFGaEIsR0FBUDtBQUlIOztBQUNELFNBQVNhLG9CQUFULENBQThCeEIsVUFBOUIsRUFBMEMyQyxVQUExQyxFQUFzRDtBQUNsRCxNQUFJcEMsSUFBSSxHQUFHckIsVUFBVSxDQUFDYyxVQUFVLENBQUNPLElBQVosRUFBa0JvQyxVQUFsQixDQUFyQjtBQUNBLE1BQUloQyxTQUFTLEdBQUd6QixVQUFVLENBQUNjLFVBQVUsQ0FBQ1csU0FBWixFQUF1QixVQUFVRCxRQUFWLEVBQW9CO0FBQ2pFLFdBQU9ILElBQUksQ0FBQ0csUUFBUSxDQUFDRCxLQUFWLENBQVgsQ0FEaUUsQ0FDcEM7QUFDaEMsR0FGeUIsQ0FBMUI7QUFHQSxTQUFPO0FBQUVGLFFBQUksRUFBRUEsSUFBUjtBQUFjSSxhQUFTLEVBQUVBO0FBQXpCLEdBQVA7QUFDSDs7QUFFRCxTQUFTaUMsVUFBVCxDQUFvQjFrQixLQUFwQixFQUEyQnFlLE9BQTNCLEVBQW9DO0FBQ2hDLE1BQUluYSxLQUFLLEdBQUcsSUFBWjtBQUNBLE1BQUlDLEdBQUcsR0FBRyxJQUFWOztBQUNBLE1BQUluRSxLQUFLLENBQUNrRSxLQUFWLEVBQWlCO0FBQ2JBLFNBQUssR0FBR21hLE9BQU8sQ0FBQ3NHLFlBQVIsQ0FBcUIza0IsS0FBSyxDQUFDa0UsS0FBM0IsQ0FBUjtBQUNIOztBQUNELE1BQUlsRSxLQUFLLENBQUNtRSxHQUFWLEVBQWU7QUFDWEEsT0FBRyxHQUFHa2EsT0FBTyxDQUFDc0csWUFBUixDQUFxQjNrQixLQUFLLENBQUNtRSxHQUEzQixDQUFOO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDRCxLQUFELElBQVUsQ0FBQ0MsR0FBZixFQUFvQjtBQUNoQixXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJRCxLQUFLLElBQUlDLEdBQVQsSUFBZ0JBLEdBQUcsR0FBR0QsS0FBMUIsRUFBaUM7QUFDN0IsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsU0FBTztBQUFFQSxTQUFLLEVBQUVBLEtBQVQ7QUFBZ0JDLE9BQUcsRUFBRUE7QUFBckIsR0FBUDtBQUNILEMsQ0FDRDtBQUNBOzs7QUFDQSxTQUFTeWdCLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxlQUE5QixFQUErQztBQUMzQyxNQUFJQyxjQUFjLEdBQUcsRUFBckI7QUFDQSxNQUFJN2dCLEtBQUssR0FBRzRnQixlQUFlLENBQUM1Z0IsS0FBNUIsQ0FGMkMsQ0FFUjs7QUFDbkMsTUFBSXVCLENBQUo7QUFDQSxNQUFJdWYsU0FBSixDQUoyQyxDQUszQzs7QUFDQUgsUUFBTSxDQUFDSSxJQUFQLENBQVlDLGFBQVo7O0FBQ0EsT0FBS3pmLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR29mLE1BQU0sQ0FBQ25kLE1BQXZCLEVBQStCakMsQ0FBQyxFQUFoQyxFQUFvQztBQUNoQ3VmLGFBQVMsR0FBR0gsTUFBTSxDQUFDcGYsQ0FBRCxDQUFsQixDQURnQyxDQUVoQzs7QUFDQSxRQUFJdWYsU0FBUyxDQUFDOWdCLEtBQVYsR0FBa0JBLEtBQXRCLEVBQTZCO0FBQUU7QUFDM0I2Z0Isb0JBQWMsQ0FBQ25iLElBQWYsQ0FBb0I7QUFBRTFGLGFBQUssRUFBRUEsS0FBVDtBQUFnQkMsV0FBRyxFQUFFNmdCLFNBQVMsQ0FBQzlnQjtBQUEvQixPQUFwQjtBQUNIOztBQUNELFFBQUk4Z0IsU0FBUyxDQUFDN2dCLEdBQVYsR0FBZ0JELEtBQXBCLEVBQTJCO0FBQ3ZCQSxXQUFLLEdBQUc4Z0IsU0FBUyxDQUFDN2dCLEdBQWxCO0FBQ0g7QUFDSixHQWhCMEMsQ0FpQjNDOzs7QUFDQSxNQUFJRCxLQUFLLEdBQUc0Z0IsZUFBZSxDQUFDM2dCLEdBQTVCLEVBQWlDO0FBQUU7QUFDL0I0Z0Isa0JBQWMsQ0FBQ25iLElBQWYsQ0FBb0I7QUFBRTFGLFdBQUssRUFBRUEsS0FBVDtBQUFnQkMsU0FBRyxFQUFFMmdCLGVBQWUsQ0FBQzNnQjtBQUFyQyxLQUFwQjtBQUNIOztBQUNELFNBQU80Z0IsY0FBUDtBQUNIOztBQUNELFNBQVNHLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxNQUEvQixFQUF1QztBQUNuQyxTQUFPRCxNQUFNLENBQUNqaEIsS0FBUCxDQUFheU4sT0FBYixLQUF5QnlULE1BQU0sQ0FBQ2xoQixLQUFQLENBQWF5TixPQUFiLEVBQWhDLENBRG1DLENBQ3FCO0FBQzNEOztBQUNELFNBQVMwVCxlQUFULENBQXlCRixNQUF6QixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDckMsTUFBSWxoQixLQUFLLEdBQUdpaEIsTUFBTSxDQUFDamhCLEtBQW5CO0FBQ0EsTUFBSUMsR0FBRyxHQUFHZ2hCLE1BQU0sQ0FBQ2hoQixHQUFqQjtBQUNBLE1BQUltaEIsUUFBUSxHQUFHLElBQWY7O0FBQ0EsTUFBSUYsTUFBTSxDQUFDbGhCLEtBQVAsS0FBaUIsSUFBckIsRUFBMkI7QUFDdkIsUUFBSUEsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDaEJBLFdBQUssR0FBR2toQixNQUFNLENBQUNsaEIsS0FBZjtBQUNILEtBRkQsTUFHSztBQUNEQSxXQUFLLEdBQUcsSUFBSTBRLElBQUosQ0FBU3hKLElBQUksQ0FBQ0MsR0FBTCxDQUFTbkgsS0FBSyxDQUFDeU4sT0FBTixFQUFULEVBQTBCeVQsTUFBTSxDQUFDbGhCLEtBQVAsQ0FBYXlOLE9BQWIsRUFBMUIsQ0FBVCxDQUFSO0FBQ0g7QUFDSjs7QUFDRCxNQUFJeVQsTUFBTSxDQUFDamhCLEdBQVAsSUFBYyxJQUFsQixFQUF3QjtBQUNwQixRQUFJQSxHQUFHLEtBQUssSUFBWixFQUFrQjtBQUNkQSxTQUFHLEdBQUdpaEIsTUFBTSxDQUFDamhCLEdBQWI7QUFDSCxLQUZELE1BR0s7QUFDREEsU0FBRyxHQUFHLElBQUl5USxJQUFKLENBQVN4SixJQUFJLENBQUNFLEdBQUwsQ0FBU25ILEdBQUcsQ0FBQ3dOLE9BQUosRUFBVCxFQUF3QnlULE1BQU0sQ0FBQ2poQixHQUFQLENBQVd3TixPQUFYLEVBQXhCLENBQVQsQ0FBTjtBQUNIO0FBQ0o7O0FBQ0QsTUFBSXpOLEtBQUssS0FBSyxJQUFWLElBQWtCQyxHQUFHLEtBQUssSUFBMUIsSUFBa0NELEtBQUssR0FBR0MsR0FBOUMsRUFBbUQ7QUFDL0NtaEIsWUFBUSxHQUFHO0FBQUVwaEIsV0FBSyxFQUFFQSxLQUFUO0FBQWdCQyxTQUFHLEVBQUVBO0FBQXJCLEtBQVg7QUFDSDs7QUFDRCxTQUFPbWhCLFFBQVA7QUFDSDs7QUFDRCxTQUFTQyxXQUFULENBQXFCSixNQUFyQixFQUE2QkMsTUFBN0IsRUFBcUM7QUFDakMsU0FBTyxDQUFDRCxNQUFNLENBQUNqaEIsS0FBUCxLQUFpQixJQUFqQixHQUF3QixJQUF4QixHQUErQmloQixNQUFNLENBQUNqaEIsS0FBUCxDQUFheU4sT0FBYixFQUFoQyxPQUE2RHlULE1BQU0sQ0FBQ2xoQixLQUFQLEtBQWlCLElBQWpCLEdBQXdCLElBQXhCLEdBQStCa2hCLE1BQU0sQ0FBQ2xoQixLQUFQLENBQWF5TixPQUFiLEVBQTVGLEtBQ0gsQ0FBQ3dULE1BQU0sQ0FBQ2hoQixHQUFQLEtBQWUsSUFBZixHQUFzQixJQUF0QixHQUE2QmdoQixNQUFNLENBQUNoaEIsR0FBUCxDQUFXd04sT0FBWCxFQUE5QixPQUF5RHlULE1BQU0sQ0FBQ2poQixHQUFQLEtBQWUsSUFBZixHQUFzQixJQUF0QixHQUE2QmloQixNQUFNLENBQUNqaEIsR0FBUCxDQUFXd04sT0FBWCxFQUF0RixDQURKO0FBRUg7O0FBQ0QsU0FBUzZULGVBQVQsQ0FBeUJMLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUNyQyxTQUFPLENBQUNELE1BQU0sQ0FBQ2hoQixHQUFQLEtBQWUsSUFBZixJQUF1QmloQixNQUFNLENBQUNsaEIsS0FBUCxLQUFpQixJQUF4QyxJQUFnRGloQixNQUFNLENBQUNoaEIsR0FBUCxHQUFhaWhCLE1BQU0sQ0FBQ2xoQixLQUFyRSxNQUNGaWhCLE1BQU0sQ0FBQ2poQixLQUFQLEtBQWlCLElBQWpCLElBQXlCa2hCLE1BQU0sQ0FBQ2poQixHQUFQLEtBQWUsSUFBeEMsSUFBZ0RnaEIsTUFBTSxDQUFDamhCLEtBQVAsR0FBZWtoQixNQUFNLENBQUNqaEIsR0FEcEUsQ0FBUDtBQUVIOztBQUNELFNBQVNzaEIsa0JBQVQsQ0FBNEJDLFVBQTVCLEVBQXdDQyxVQUF4QyxFQUFvRDtBQUNoRCxTQUFPLENBQUNELFVBQVUsQ0FBQ3hoQixLQUFYLEtBQXFCLElBQXJCLElBQThCeWhCLFVBQVUsQ0FBQ3poQixLQUFYLEtBQXFCLElBQXJCLElBQTZCeWhCLFVBQVUsQ0FBQ3poQixLQUFYLElBQW9Cd2hCLFVBQVUsQ0FBQ3hoQixLQUEzRixNQUNGd2hCLFVBQVUsQ0FBQ3ZoQixHQUFYLEtBQW1CLElBQW5CLElBQTRCd2hCLFVBQVUsQ0FBQ3hoQixHQUFYLEtBQW1CLElBQW5CLElBQTJCd2hCLFVBQVUsQ0FBQ3hoQixHQUFYLElBQWtCdWhCLFVBQVUsQ0FBQ3ZoQixHQURsRixDQUFQO0FBRUg7O0FBQ0QsU0FBU3loQixtQkFBVCxDQUE2QjVILEtBQTdCLEVBQW9DalosSUFBcEMsRUFBMEM7QUFDdEMsU0FBTyxDQUFDaVosS0FBSyxDQUFDOVosS0FBTixLQUFnQixJQUFoQixJQUF3QmEsSUFBSSxJQUFJaVosS0FBSyxDQUFDOVosS0FBdkMsTUFDRjhaLEtBQUssQ0FBQzdaLEdBQU4sS0FBYyxJQUFkLElBQXNCWSxJQUFJLEdBQUdpWixLQUFLLENBQUM3WixHQURqQyxDQUFQO0FBRUgsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVMwaEIsc0JBQVQsQ0FBZ0M5Z0IsSUFBaEMsRUFBc0NpWixLQUF0QyxFQUE2QztBQUN6QyxNQUFJQSxLQUFLLENBQUM5WixLQUFOLElBQWUsSUFBZixJQUF1QmEsSUFBSSxHQUFHaVosS0FBSyxDQUFDOVosS0FBeEMsRUFBK0M7QUFDM0MsV0FBTzhaLEtBQUssQ0FBQzlaLEtBQWI7QUFDSDs7QUFDRCxNQUFJOFosS0FBSyxDQUFDN1osR0FBTixJQUFhLElBQWIsSUFBcUJZLElBQUksSUFBSWlaLEtBQUssQ0FBQzdaLEdBQXZDLEVBQTRDO0FBQ3hDLFdBQU8sSUFBSXlRLElBQUosQ0FBU29KLEtBQUssQ0FBQzdaLEdBQU4sQ0FBVXdOLE9BQVYsS0FBc0IsQ0FBL0IsQ0FBUDtBQUNIOztBQUNELFNBQU81TSxJQUFQO0FBQ0g7O0FBRUQsU0FBUytnQixXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsUUFBNUIsRUFBc0M7QUFDbEMsTUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0EsTUFBSXhnQixDQUFDLEdBQUcsQ0FBUjs7QUFDQSxTQUFPQSxDQUFDLEdBQUdzZ0IsS0FBSyxDQUFDcmUsTUFBakIsRUFBeUI7QUFDckIsUUFBSXFlLEtBQUssQ0FBQ3RnQixDQUFELENBQUwsS0FBYXVnQixRQUFqQixFQUEyQjtBQUN2QkQsV0FBSyxDQUFDRyxNQUFOLENBQWF6Z0IsQ0FBYixFQUFnQixDQUFoQjtBQUNBd2dCLGVBQVM7QUFDWixLQUhELE1BSUs7QUFDRHhnQixPQUFDO0FBQ0o7QUFDSjs7QUFDRCxTQUFPd2dCLFNBQVA7QUFDSDs7QUFDRCxTQUFTRSxhQUFULENBQXVCQyxFQUF2QixFQUEyQkMsRUFBM0IsRUFBK0I7QUFDM0IsTUFBSTVLLEdBQUcsR0FBRzJLLEVBQUUsQ0FBQzFlLE1BQWI7QUFDQSxNQUFJakMsQ0FBSjs7QUFDQSxNQUFJZ1csR0FBRyxLQUFLNEssRUFBRSxDQUFDM2UsTUFBZixFQUF1QjtBQUFFO0FBQ3JCLFdBQU8sS0FBUDtBQUNIOztBQUNELE9BQUtqQyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdnVyxHQUFoQixFQUFxQmhXLENBQUMsRUFBdEIsRUFBMEI7QUFDdEIsUUFBSTJnQixFQUFFLENBQUMzZ0IsQ0FBRCxDQUFGLEtBQVU0Z0IsRUFBRSxDQUFDNWdCLENBQUQsQ0FBaEIsRUFBcUI7QUFDakIsYUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFTNmdCLE9BQVQsQ0FBaUJDLFVBQWpCLEVBQTZCO0FBQ3pCLE1BQUl6SyxJQUFKO0FBQ0EsTUFBSTNRLEdBQUo7QUFDQSxTQUFPLFlBQVk7QUFDZixRQUFJLENBQUMyUSxJQUFELElBQVMsQ0FBQ3FLLGFBQWEsQ0FBQ3JLLElBQUQsRUFBT0ksU0FBUCxDQUEzQixFQUE4QztBQUMxQ0osVUFBSSxHQUFHSSxTQUFQO0FBQ0EvUSxTQUFHLEdBQUdvYixVQUFVLENBQUN4UixLQUFYLENBQWlCLElBQWpCLEVBQXVCbUgsU0FBdkIsQ0FBTjtBQUNIOztBQUNELFdBQU8vUSxHQUFQO0FBQ0gsR0FORDtBQU9IO0FBQ0Q7Ozs7OztBQUlBLFNBQVNxYixhQUFULENBQXVCRCxVQUF2QixFQUFtQ0UsWUFBbkMsRUFBaUQ7QUFDN0MsTUFBSUMsU0FBUyxHQUFHLElBQWhCO0FBQ0EsU0FBTyxZQUFZO0FBQ2YsUUFBSUMsTUFBTSxHQUFHSixVQUFVLENBQUN4UixLQUFYLENBQWlCLElBQWpCLEVBQXVCbUgsU0FBdkIsQ0FBYjs7QUFDQSxRQUFJd0ssU0FBUyxLQUFLLElBQWQsSUFBc0IsRUFBRUEsU0FBUyxLQUFLQyxNQUFkLElBQXdCRixZQUFZLENBQUNDLFNBQUQsRUFBWUMsTUFBWixDQUF0QyxDQUExQixFQUFzRjtBQUNsRkQsZUFBUyxHQUFHQyxNQUFaO0FBQ0g7O0FBQ0QsV0FBT0QsU0FBUDtBQUNILEdBTkQ7QUFPSDs7QUFFRCxJQUFJRSxnQ0FBZ0MsR0FBRztBQUNuQ3BRLE1BQUksRUFBRSxDQUQ2QjtBQUVuQ3FRLFdBQVMsRUFBRSxDQUZ3QjtBQUduQ0MsZ0JBQWMsRUFBRSxDQUhtQjtBQUluQ0MsVUFBUSxFQUFFLENBSnlCO0FBS25DQyxZQUFVLEVBQUU7QUFMdUIsQ0FBdkM7QUFPQSxJQUFJQyw2QkFBNkIsR0FBRztBQUNoQ0MsY0FBWSxFQUFFLENBRGtCO0FBRWhDQyxLQUFHLEVBQUUsQ0FGMkI7QUFHaEN2VCxNQUFJLEVBQUUsQ0FIMEI7QUFJaENnQyxPQUFLLEVBQUUsQ0FKeUI7QUFLaENDLEtBQUcsRUFBRSxDQUwyQjtBQU1oQ3VSLFNBQU8sRUFBRSxDQU51QjtBQU9oQ3BSLE1BQUksRUFBRSxDQVAwQjtBQVFoQ0UsUUFBTSxFQUFFLENBUndCO0FBU2hDRSxRQUFNLEVBQUU7QUFUd0IsQ0FBcEM7QUFXQSxJQUFJaVIsV0FBVyxHQUFHLG1CQUFsQixDLENBQXVDOztBQUN2QyxJQUFJQyxRQUFRLEdBQUcsSUFBZixDLENBQXFCOztBQUNyQixJQUFJQyxjQUFjLEdBQUcsTUFBckI7QUFDQSxJQUFJQyxNQUFNLEdBQUcsU0FBYixDLENBQXdCOztBQUN4QixJQUFJQyxNQUFNLEdBQUcsU0FBYjs7QUFDQSxJQUFJQyxlQUFlO0FBQUc7QUFBZSxZQUFZO0FBQzdDLFdBQVNBLGVBQVQsQ0FBeUJDLGNBQXpCLEVBQXlDO0FBQ3JDLFFBQUlDLGlCQUFpQixHQUFHLEVBQXhCO0FBQ0EsUUFBSUMsZ0JBQWdCLEdBQUcsRUFBdkI7QUFDQSxRQUFJQyxRQUFRLEdBQUcsQ0FBZjs7QUFDQSxTQUFLLElBQUlDLE1BQVQsSUFBbUJKLGNBQW5CLEVBQW1DO0FBQy9CLFVBQUlJLE1BQU0sSUFBSW5CLGdDQUFkLEVBQWdEO0FBQzVDaUIsd0JBQWdCLENBQUNFLE1BQUQsQ0FBaEIsR0FBMkJKLGNBQWMsQ0FBQ0ksTUFBRCxDQUF6QztBQUNBRCxnQkFBUSxHQUFHMWMsSUFBSSxDQUFDQyxHQUFMLENBQVN1YixnQ0FBZ0MsQ0FBQ21CLE1BQUQsQ0FBekMsRUFBbURELFFBQW5ELENBQVg7QUFDSCxPQUhELE1BSUs7QUFDREYseUJBQWlCLENBQUNHLE1BQUQsQ0FBakIsR0FBNEJKLGNBQWMsQ0FBQ0ksTUFBRCxDQUExQzs7QUFDQSxZQUFJQSxNQUFNLElBQUlkLDZCQUFkLEVBQTZDO0FBQ3pDYSxrQkFBUSxHQUFHMWMsSUFBSSxDQUFDQyxHQUFMLENBQVM0Yiw2QkFBNkIsQ0FBQ2MsTUFBRCxDQUF0QyxFQUFnREQsUUFBaEQsQ0FBWDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFLRixpQkFBTCxHQUF5QkEsaUJBQXpCO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0UsbUJBQUwsR0FBMkIxQixPQUFPLENBQUMwQixtQkFBRCxDQUFsQztBQUNIOztBQUNETixpQkFBZSxDQUFDdGdCLFNBQWhCLENBQTBCNmdCLE1BQTFCLEdBQW1DLFVBQVVsakIsSUFBVixFQUFnQndYLE9BQWhCLEVBQXlCO0FBQ3hELFdBQU8sS0FBS3lMLG1CQUFMLENBQXlCLEtBQUtKLGlCQUE5QixFQUFpRCxLQUFLQyxnQkFBdEQsRUFBd0V0TCxPQUF4RSxFQUFpRnhYLElBQWpGLENBQVA7QUFDSCxHQUZEOztBQUdBMmlCLGlCQUFlLENBQUN0Z0IsU0FBaEIsQ0FBMEI4Z0IsV0FBMUIsR0FBd0MsVUFBVWhrQixLQUFWLEVBQWlCQyxHQUFqQixFQUFzQm9ZLE9BQXRCLEVBQStCO0FBQ25FLFFBQUlsSCxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWV1UyxpQkFBaUIsR0FBR3ZTLEVBQUUsQ0FBQ3VTLGlCQUF0QztBQUFBLFFBQXlEQyxnQkFBZ0IsR0FBR3hTLEVBQUUsQ0FBQ3dTLGdCQUEvRTs7QUFDQSxRQUFJTSxZQUFZLEdBQUdDLHlCQUF5QixDQUFDbGtCLEtBQUssQ0FBQ21QLE1BQVAsRUFBZWxQLEdBQUcsQ0FBQ2tQLE1BQW5CLEVBQTJCa0osT0FBTyxDQUFDOEwsY0FBbkMsQ0FBNUM7O0FBQ0EsUUFBSSxDQUFDRixZQUFMLEVBQW1CO0FBQ2YsYUFBTyxLQUFLRixNQUFMLENBQVkvakIsS0FBWixFQUFtQnFZLE9BQW5CLENBQVA7QUFDSDs7QUFDRCxRQUFJK0wscUJBQXFCLEdBQUdILFlBQTVCOztBQUNBLFFBQUlHLHFCQUFxQixHQUFHLENBQXhCLE1BQTZCO0FBQzVCVixxQkFBaUIsQ0FBQ2hVLElBQWxCLEtBQTJCLFNBQTNCLElBQXdDZ1UsaUJBQWlCLENBQUNoVSxJQUFsQixLQUEyQixTQURwRSxNQUVDZ1UsaUJBQWlCLENBQUNoUyxLQUFsQixLQUE0QixTQUE1QixJQUF5Q2dTLGlCQUFpQixDQUFDaFMsS0FBbEIsS0FBNEIsU0FGdEUsTUFHQ2dTLGlCQUFpQixDQUFDL1IsR0FBbEIsS0FBMEIsU0FBMUIsSUFBdUMrUixpQkFBaUIsQ0FBQy9SLEdBQWxCLEtBQTBCLFNBSGxFLENBQUosRUFHa0Y7QUFDOUV5UywyQkFBcUIsR0FBRyxDQUF4QixDQUQ4RSxDQUNuRDtBQUM5Qjs7QUFDRCxRQUFJQyxLQUFLLEdBQUcsS0FBS04sTUFBTCxDQUFZL2pCLEtBQVosRUFBbUJxWSxPQUFuQixDQUFaO0FBQ0EsUUFBSWlNLEtBQUssR0FBRyxLQUFLUCxNQUFMLENBQVk5akIsR0FBWixFQUFpQm9ZLE9BQWpCLENBQVo7O0FBQ0EsUUFBSWdNLEtBQUssS0FBS0MsS0FBZCxFQUFxQjtBQUNqQixhQUFPRCxLQUFQO0FBQ0g7O0FBQ0QsUUFBSUUsZ0JBQWdCLEdBQUdDLCtCQUErQixDQUFDZCxpQkFBRCxFQUFvQlUscUJBQXBCLENBQXREO0FBQ0EsUUFBSUsscUJBQXFCLEdBQUdYLG1CQUFtQixDQUFDUyxnQkFBRCxFQUFtQlosZ0JBQW5CLEVBQXFDdEwsT0FBckMsQ0FBL0M7QUFDQSxRQUFJcU0sUUFBUSxHQUFHRCxxQkFBcUIsQ0FBQ3prQixLQUFELENBQXBDO0FBQ0EsUUFBSTJrQixRQUFRLEdBQUdGLHFCQUFxQixDQUFDeGtCLEdBQUQsQ0FBcEM7QUFDQSxRQUFJMmtCLFNBQVMsR0FBR0MsbUJBQW1CLENBQUNSLEtBQUQsRUFBUUssUUFBUixFQUFrQkosS0FBbEIsRUFBeUJLLFFBQXpCLENBQW5DO0FBQ0EsUUFBSWhDLFNBQVMsR0FBR2dCLGdCQUFnQixDQUFDaEIsU0FBakIsSUFBOEIsRUFBOUM7O0FBQ0EsUUFBSWlDLFNBQUosRUFBZTtBQUNYLGFBQU9BLFNBQVMsQ0FBQ0UsTUFBVixHQUFtQkosUUFBbkIsR0FBOEIvQixTQUE5QixHQUEwQ2dDLFFBQTFDLEdBQXFEQyxTQUFTLENBQUNHLEtBQXRFO0FBQ0g7O0FBQ0QsV0FBT1YsS0FBSyxHQUFHMUIsU0FBUixHQUFvQjJCLEtBQTNCO0FBQ0gsR0E1QkQ7O0FBNkJBZCxpQkFBZSxDQUFDdGdCLFNBQWhCLENBQTBCOGhCLGNBQTFCLEdBQTJDLFlBQVk7QUFDbkQsWUFBUSxLQUFLcEIsUUFBYjtBQUNJLFdBQUssQ0FBTDtBQUNBLFdBQUssQ0FBTDtBQUNBLFdBQUssQ0FBTDtBQUNJLGVBQU8sTUFBUDs7QUFDSixXQUFLLENBQUw7QUFDSSxlQUFPLE9BQVA7O0FBQ0osV0FBSyxDQUFMO0FBQ0ksZUFBTyxNQUFQOztBQUNKO0FBQ0ksZUFBTyxLQUFQO0FBVlI7QUFZSCxHQWJEOztBQWNBLFNBQU9KLGVBQVA7QUFDSCxDQXJFb0MsRUFBckM7O0FBc0VBLFNBQVNNLG1CQUFULENBQTZCSixpQkFBN0IsRUFBZ0RDLGdCQUFoRCxFQUFrRXRMLE9BQWxFLEVBQTJFO0FBQ3ZFLE1BQUk0TSxtQkFBbUIsR0FBR3pLLE1BQU0sQ0FBQzBLLElBQVAsQ0FBWXhCLGlCQUFaLEVBQStCbGdCLE1BQXpEOztBQUNBLE1BQUl5aEIsbUJBQW1CLEtBQUssQ0FBeEIsSUFBNkJ2QixpQkFBaUIsQ0FBQ1YsWUFBbEIsS0FBbUMsT0FBcEUsRUFBNkU7QUFDekUsV0FBTyxVQUFVbmlCLElBQVYsRUFBZ0I7QUFDbkIsYUFBT3NrQixvQkFBb0IsQ0FBQ3RrQixJQUFJLENBQUN1a0IsY0FBTixDQUEzQjtBQUNILEtBRkQ7QUFHSDs7QUFDRCxNQUFJSCxtQkFBbUIsS0FBSyxDQUF4QixJQUE2QnRCLGdCQUFnQixDQUFDclIsSUFBbEQsRUFBd0Q7QUFDcEQsV0FBTyxVQUFVelIsSUFBVixFQUFnQjtBQUNuQixhQUFPd2tCLGdCQUFnQixDQUFDaE4sT0FBTyxDQUFDaU4saUJBQVIsQ0FBMEJ6a0IsSUFBSSxDQUFDc08sTUFBL0IsQ0FBRCxFQUF5Q2tKLE9BQU8sQ0FBQ2tOLFNBQWpELEVBQTREbE4sT0FBTyxDQUFDbGIsTUFBcEUsRUFBNEV3bUIsZ0JBQWdCLENBQUNyUixJQUE3RixDQUF2QjtBQUNILEtBRkQ7QUFHSDs7QUFDRCxTQUFPa1QseUJBQXlCLENBQUM5QixpQkFBRCxFQUFvQkMsZ0JBQXBCLEVBQXNDdEwsT0FBdEMsQ0FBaEM7QUFDSDs7QUFDRCxTQUFTbU4seUJBQVQsQ0FBbUM5QixpQkFBbkMsRUFBc0RDLGdCQUF0RCxFQUF3RXRMLE9BQXhFLEVBQWlGO0FBQzdFcUwsbUJBQWlCLEdBQUcxSSxRQUFRLENBQUMsRUFBRCxFQUFLMEksaUJBQUwsQ0FBNUIsQ0FENkUsQ0FDeEI7O0FBQ3JEQyxrQkFBZ0IsR0FBRzNJLFFBQVEsQ0FBQyxFQUFELEVBQUsySSxnQkFBTCxDQUEzQixDQUY2RSxDQUUxQjs7QUFDbkQ4QixrQkFBZ0IsQ0FBQy9CLGlCQUFELEVBQW9CQyxnQkFBcEIsQ0FBaEI7QUFDQUQsbUJBQWlCLENBQUM5akIsUUFBbEIsR0FBNkIsS0FBN0IsQ0FKNkUsQ0FJekM7O0FBQ3BDLE1BQUk4bEIsWUFBWSxHQUFHLElBQUlDLElBQUksQ0FBQ0MsY0FBVCxDQUF3QnZOLE9BQU8sQ0FBQ2xiLE1BQVIsQ0FBZTBvQixLQUF2QyxFQUE4Q25DLGlCQUE5QyxDQUFuQjtBQUNBLE1BQUlvQyxVQUFKLENBTjZFLENBTTdEOztBQUNoQixNQUFJbkMsZ0JBQWdCLENBQUNmLGNBQXJCLEVBQXFDO0FBQ2pDLFFBQUltRCxTQUFTLEdBQUcvSyxRQUFRLENBQUMsRUFBRCxFQUFLMEksaUJBQUwsQ0FBeEI7O0FBQ0EsV0FBT3FDLFNBQVMsQ0FBQy9ULE1BQWpCLENBRmlDLENBRVI7O0FBQ3pCOFQsY0FBVSxHQUFHLElBQUlILElBQUksQ0FBQ0MsY0FBVCxDQUF3QnZOLE9BQU8sQ0FBQ2xiLE1BQVIsQ0FBZTBvQixLQUF2QyxFQUE4Q0UsU0FBOUMsQ0FBYjtBQUNIOztBQUNELFNBQU8sVUFBVWxsQixJQUFWLEVBQWdCO0FBQ25CLFFBQUlzTyxNQUFNLEdBQUd0TyxJQUFJLENBQUNzTyxNQUFsQjtBQUNBLFFBQUk0VSxNQUFKOztBQUNBLFFBQUkrQixVQUFVLElBQUksQ0FBQzNXLE1BQU0sQ0FBQ0osYUFBUCxFQUFuQixFQUEyQztBQUN2Q2dWLFlBQU0sR0FBRytCLFVBQVQ7QUFDSCxLQUZELE1BR0s7QUFDRC9CLFlBQU0sR0FBRzJCLFlBQVQ7QUFDSDs7QUFDRCxRQUFJcFUsQ0FBQyxHQUFHeVMsTUFBTSxDQUFDQSxNQUFQLENBQWM1VSxNQUFkLENBQVI7QUFDQSxXQUFPNlcsV0FBVyxDQUFDMVUsQ0FBRCxFQUFJelEsSUFBSixFQUFVNmlCLGlCQUFWLEVBQTZCQyxnQkFBN0IsRUFBK0N0TCxPQUEvQyxDQUFsQjtBQUNILEdBWEQ7QUFZSDs7QUFDRCxTQUFTb04sZ0JBQVQsQ0FBMEIvQixpQkFBMUIsRUFBNkNDLGdCQUE3QyxFQUErRDtBQUMzRDtBQUNBO0FBQ0EsTUFBSUQsaUJBQWlCLENBQUNWLFlBQXRCLEVBQW9DO0FBQ2hDLFFBQUksQ0FBQ1UsaUJBQWlCLENBQUM1UixJQUF2QixFQUE2QjtBQUN6QjRSLHVCQUFpQixDQUFDNVIsSUFBbEIsR0FBeUIsU0FBekI7QUFDSDs7QUFDRCxRQUFJLENBQUM0UixpQkFBaUIsQ0FBQzFSLE1BQXZCLEVBQStCO0FBQzNCMFIsdUJBQWlCLENBQUMxUixNQUFsQixHQUEyQixTQUEzQjtBQUNIO0FBQ0osR0FWMEQsQ0FXM0Q7OztBQUNBLE1BQUkwUixpQkFBaUIsQ0FBQ1YsWUFBbEIsS0FBbUMsTUFBdkMsRUFBK0M7QUFDM0NVLHFCQUFpQixDQUFDVixZQUFsQixHQUFpQyxPQUFqQztBQUNILEdBZDBELENBZTNEOzs7QUFDQSxNQUFJVyxnQkFBZ0IsQ0FBQ2YsY0FBakIsS0FBb0NjLGlCQUFpQixDQUFDeFIsTUFBbEIsSUFBNEJ3UixpQkFBaUIsQ0FBQ3ZSLFdBQWxGLENBQUosRUFBb0c7QUFDaEcsV0FBT3dSLGdCQUFnQixDQUFDZixjQUF4QjtBQUNIO0FBQ0o7O0FBQ0QsU0FBU29ELFdBQVQsQ0FBcUIxVSxDQUFyQixFQUF3QnpRLElBQXhCLEVBQThCNmlCLGlCQUE5QixFQUFpREMsZ0JBQWpELEVBQW1FdEwsT0FBbkUsRUFBNEU7QUFDeEUvRyxHQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVXFvQixNQUFWLEVBQWtCLEVBQWxCLENBQUosQ0FEd0UsQ0FDN0M7O0FBQzNCLE1BQUlJLGlCQUFpQixDQUFDVixZQUFsQixLQUFtQyxPQUF2QyxFQUFnRDtBQUM1QzFSLEtBQUMsR0FBRzJVLFlBQVksQ0FBQzNVLENBQUQsRUFBSytHLE9BQU8sQ0FBQ3pZLFFBQVIsS0FBcUIsS0FBckIsSUFBOEJpQixJQUFJLENBQUN1a0IsY0FBTCxJQUF1QixJQUF0RCxHQUNoQixLQURnQixHQUNSO0FBQ1JELHdCQUFvQixDQUFDdGtCLElBQUksQ0FBQ3VrQixjQUFOLENBRlIsQ0FBaEI7QUFHSDs7QUFDRCxNQUFJekIsZ0JBQWdCLENBQUNiLFVBQXJCLEVBQWlDO0FBQzdCeFIsS0FBQyxHQUFHQSxDQUFDLENBQUNyVyxPQUFGLENBQVVtb0IsUUFBVixFQUFvQixFQUFwQixFQUF3QnpwQixJQUF4QixFQUFKO0FBQ0g7O0FBQ0QsTUFBSWdxQixnQkFBZ0IsQ0FBQ2YsY0FBckIsRUFBcUM7QUFDakN0UixLQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVSxLQUFWLEVBQWlCLEVBQWpCLENBQUosQ0FEaUMsQ0FDUDtBQUM3QixHQVp1RSxDQWF4RTtBQUNBOzs7QUFDQSxNQUFJMG9CLGdCQUFnQixDQUFDZCxRQUFqQixLQUE4QixLQUFsQyxFQUF5QztBQUNyQ3ZSLEtBQUMsR0FBR0EsQ0FBQyxDQUFDclcsT0FBRixDQUFVa29CLFdBQVYsRUFBdUIsRUFBdkIsRUFBMkJ4cEIsSUFBM0IsRUFBSjtBQUNILEdBRkQsTUFHSyxJQUFJZ3FCLGdCQUFnQixDQUFDZCxRQUFqQixLQUE4QixRQUFsQyxFQUE0QztBQUFFO0FBQy9DdlIsS0FBQyxHQUFHQSxDQUFDLENBQUNyVyxPQUFGLENBQVVrb0IsV0FBVixFQUF1QixVQUFVN1YsRUFBVixFQUFjQyxFQUFkLEVBQWtCO0FBQ3pDLGFBQU9BLEVBQUUsQ0FBQzJZLGlCQUFILEVBQVA7QUFDSCxLQUZHLENBQUo7QUFHSCxHQUpJLE1BS0EsSUFBSXZDLGdCQUFnQixDQUFDZCxRQUFqQixLQUE4QixPQUFsQyxFQUEyQztBQUFFO0FBQzlDdlIsS0FBQyxHQUFHQSxDQUFDLENBQUNyVyxPQUFGLENBQVVrb0IsV0FBVixFQUF1QixVQUFVN1YsRUFBVixFQUFjQyxFQUFkLEVBQWtCO0FBQ3pDLGFBQU9BLEVBQUUsQ0FBQzJZLGlCQUFILEtBQXlCLEdBQWhDO0FBQ0gsS0FGRyxDQUFKO0FBR0gsR0FKSSxNQUtBLElBQUl2QyxnQkFBZ0IsQ0FBQ2QsUUFBakIsS0FBOEIsV0FBbEMsRUFBK0M7QUFBRTtBQUNsRHZSLEtBQUMsR0FBR0EsQ0FBQyxDQUFDclcsT0FBRixDQUFVa29CLFdBQVYsRUFBdUIsVUFBVTdWLEVBQVYsRUFBYztBQUNyQyxhQUFPQSxFQUFFLENBQUM0WSxpQkFBSCxFQUFQO0FBQ0gsS0FGRyxDQUFKO0FBR0g7O0FBQ0Q1VSxHQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVW9vQixjQUFWLEVBQTBCLEdBQTFCLENBQUo7QUFDQS9SLEdBQUMsR0FBR0EsQ0FBQyxDQUFDM1gsSUFBRixFQUFKO0FBQ0EsU0FBTzJYLENBQVA7QUFDSDs7QUFDRCxTQUFTMlUsWUFBVCxDQUFzQjNVLENBQXRCLEVBQXlCNlUsTUFBekIsRUFBaUM7QUFDN0IsTUFBSUMsUUFBUSxHQUFHLEtBQWY7QUFDQTlVLEdBQUMsR0FBR0EsQ0FBQyxDQUFDclcsT0FBRixDQUFVc29CLE1BQVYsRUFBa0IsWUFBWTtBQUM5QjZDLFlBQVEsR0FBRyxJQUFYO0FBQ0EsV0FBT0QsTUFBUDtBQUNILEdBSEcsQ0FBSixDQUY2QixDQU03Qjs7QUFDQSxNQUFJLENBQUNDLFFBQUwsRUFBZTtBQUNYOVUsS0FBQyxJQUFJLE1BQU02VSxNQUFYO0FBQ0g7O0FBQ0QsU0FBTzdVLENBQVA7QUFDSDs7QUFDRCxTQUFTK1QsZ0JBQVQsQ0FBMEJnQixHQUExQixFQUErQmQsU0FBL0IsRUFBMENwb0IsTUFBMUMsRUFBa0RtcEIsT0FBbEQsRUFBMkQ7QUFDdkQsTUFBSUMsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsTUFBSUQsT0FBTyxLQUFLLFFBQWhCLEVBQTBCO0FBQ3RCQyxTQUFLLENBQUM3Z0IsSUFBTixDQUFXNmYsU0FBWDtBQUNILEdBRkQsTUFHSyxJQUFJZSxPQUFPLEtBQUssT0FBaEIsRUFBeUI7QUFDMUJDLFNBQUssQ0FBQzdnQixJQUFOLENBQVc2ZixTQUFYLEVBQXNCLEdBQXRCO0FBQ0gsR0FQc0QsQ0FRdkQ7OztBQUNBZ0IsT0FBSyxDQUFDN2dCLElBQU4sQ0FBV3ZJLE1BQU0sQ0FBQ3FwQixrQkFBUCxDQUEwQnpDLE1BQTFCLENBQWlDc0MsR0FBakMsQ0FBWDs7QUFDQSxNQUFJbHBCLE1BQU0sQ0FBQ3NwQixPQUFQLENBQWVDLEtBQW5CLEVBQTBCO0FBQUU7QUFDeEJILFNBQUssQ0FBQ0ksT0FBTjtBQUNIOztBQUNELFNBQU9KLEtBQUssQ0FBQ0ssSUFBTixDQUFXLEVBQVgsQ0FBUDtBQUNILEMsQ0FDRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBUzFDLHlCQUFULENBQW1DMVIsRUFBbkMsRUFBdUNDLEVBQXZDLEVBQTJDb1UsRUFBM0MsRUFBK0M7QUFDM0MsTUFBSUEsRUFBRSxDQUFDQyxhQUFILENBQWlCdFUsRUFBakIsTUFBeUJxVSxFQUFFLENBQUNDLGFBQUgsQ0FBaUJyVSxFQUFqQixDQUE3QixFQUFtRDtBQUMvQyxXQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJb1UsRUFBRSxDQUFDRSxjQUFILENBQWtCdlUsRUFBbEIsTUFBMEJxVSxFQUFFLENBQUNFLGNBQUgsQ0FBa0J0VSxFQUFsQixDQUE5QixFQUFxRDtBQUNqRCxXQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJb1UsRUFBRSxDQUFDRyxZQUFILENBQWdCeFUsRUFBaEIsTUFBd0JxVSxFQUFFLENBQUNHLFlBQUgsQ0FBZ0J2VSxFQUFoQixDQUE1QixFQUFpRDtBQUM3QyxXQUFPLENBQVA7QUFDSDs7QUFDRCxNQUFJakUsUUFBUSxDQUFDZ0UsRUFBRCxDQUFSLEtBQWlCaEUsUUFBUSxDQUFDaUUsRUFBRCxDQUE3QixFQUFtQztBQUMvQixXQUFPLENBQVA7QUFDSDs7QUFDRCxTQUFPLENBQVA7QUFDSDs7QUFDRCxTQUFTK1IsK0JBQVQsQ0FBeUNpQyxPQUF6QyxFQUFrRFEsV0FBbEQsRUFBK0Q7QUFDM0QsTUFBSUMsY0FBYyxHQUFHLEVBQXJCOztBQUNBLE9BQUssSUFBSUMsTUFBVCxJQUFtQlYsT0FBbkIsRUFBNEI7QUFDeEIsUUFBSSxFQUFFVSxNQUFNLElBQUlwRSw2QkFBWixLQUE4QztBQUM5Q0EsaUNBQTZCLENBQUNvRSxNQUFELENBQTdCLElBQXlDRixXQUQ3QyxFQUMwRDtBQUN0REMsb0JBQWMsQ0FBQ0MsTUFBRCxDQUFkLEdBQXlCVixPQUFPLENBQUNVLE1BQUQsQ0FBaEM7QUFDSDtBQUNKOztBQUNELFNBQU9ELGNBQVA7QUFDSDs7QUFDRCxTQUFTckMsbUJBQVQsQ0FBNkJSLEtBQTdCLEVBQW9DSyxRQUFwQyxFQUE4Q0osS0FBOUMsRUFBcURLLFFBQXJELEVBQStEO0FBQzNELE1BQUl5QyxFQUFFLEdBQUcsQ0FBVDs7QUFDQSxTQUFPQSxFQUFFLEdBQUcvQyxLQUFLLENBQUM3Z0IsTUFBbEIsRUFBMEI7QUFDdEIsUUFBSTZqQixNQUFNLEdBQUdoRCxLQUFLLENBQUNpRCxPQUFOLENBQWM1QyxRQUFkLEVBQXdCMEMsRUFBeEIsQ0FBYjs7QUFDQSxRQUFJQyxNQUFNLEtBQUssQ0FBQyxDQUFoQixFQUFtQjtBQUNmO0FBQ0g7O0FBQ0QsUUFBSUUsT0FBTyxHQUFHbEQsS0FBSyxDQUFDNWpCLE1BQU4sQ0FBYSxDQUFiLEVBQWdCNG1CLE1BQWhCLENBQWQ7QUFDQUQsTUFBRSxHQUFHQyxNQUFNLEdBQUczQyxRQUFRLENBQUNsaEIsTUFBdkI7QUFDQSxRQUFJZ2tCLE1BQU0sR0FBR25ELEtBQUssQ0FBQzVqQixNQUFOLENBQWEybUIsRUFBYixDQUFiO0FBQ0EsUUFBSUssRUFBRSxHQUFHLENBQVQ7O0FBQ0EsV0FBT0EsRUFBRSxHQUFHbkQsS0FBSyxDQUFDOWdCLE1BQWxCLEVBQTBCO0FBQ3RCLFVBQUlra0IsTUFBTSxHQUFHcEQsS0FBSyxDQUFDZ0QsT0FBTixDQUFjM0MsUUFBZCxFQUF3QjhDLEVBQXhCLENBQWI7O0FBQ0EsVUFBSUMsTUFBTSxLQUFLLENBQUMsQ0FBaEIsRUFBbUI7QUFDZjtBQUNIOztBQUNELFVBQUlDLE9BQU8sR0FBR3JELEtBQUssQ0FBQzdqQixNQUFOLENBQWEsQ0FBYixFQUFnQmluQixNQUFoQixDQUFkO0FBQ0FELFFBQUUsR0FBR0MsTUFBTSxHQUFHL0MsUUFBUSxDQUFDbmhCLE1BQXZCO0FBQ0EsVUFBSW9rQixNQUFNLEdBQUd0RCxLQUFLLENBQUM3akIsTUFBTixDQUFhZ25CLEVBQWIsQ0FBYjs7QUFDQSxVQUFJRixPQUFPLEtBQUtJLE9BQVosSUFBdUJILE1BQU0sS0FBS0ksTUFBdEMsRUFBOEM7QUFDMUMsZUFBTztBQUNIOUMsZ0JBQU0sRUFBRXlDLE9BREw7QUFFSHhDLGVBQUssRUFBRXlDO0FBRkosU0FBUDtBQUlIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDtBQUVEOzs7O0FBR0E7Ozs7OztBQUlBLElBQUlLLFlBQVk7QUFBRztBQUFlLFlBQVk7QUFDMUMsV0FBU0EsWUFBVCxDQUFzQkMsTUFBdEIsRUFBOEJuRixTQUE5QixFQUF5QztBQUNyQyxTQUFLbUYsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS25GLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0g7O0FBQ0RrRixjQUFZLENBQUMza0IsU0FBYixDQUF1QjZnQixNQUF2QixHQUFnQyxVQUFVbGpCLElBQVYsRUFBZ0J3WCxPQUFoQixFQUF5QjtBQUNyRCxXQUFPQSxPQUFPLENBQUMwUCxZQUFSLENBQXFCLEtBQUtELE1BQTFCLEVBQWtDRSwwQkFBMEIsQ0FBQ25uQixJQUFELEVBQU8sSUFBUCxFQUFhd1gsT0FBYixFQUFzQixLQUFLc0ssU0FBM0IsQ0FBNUQsQ0FBUDtBQUNILEdBRkQ7O0FBR0FrRixjQUFZLENBQUMza0IsU0FBYixDQUF1QjhnQixXQUF2QixHQUFxQyxVQUFVaGtCLEtBQVYsRUFBaUJDLEdBQWpCLEVBQXNCb1ksT0FBdEIsRUFBK0I7QUFDaEUsV0FBT0EsT0FBTyxDQUFDMFAsWUFBUixDQUFxQixLQUFLRCxNQUExQixFQUFrQ0UsMEJBQTBCLENBQUNob0IsS0FBRCxFQUFRQyxHQUFSLEVBQWFvWSxPQUFiLEVBQXNCLEtBQUtzSyxTQUEzQixDQUE1RCxDQUFQO0FBQ0gsR0FGRDs7QUFHQSxTQUFPa0YsWUFBUDtBQUNILENBWmlDLEVBQWxDOztBQWNBLElBQUlJLGFBQWE7QUFBRztBQUFlLFlBQVk7QUFDM0MsV0FBU0EsYUFBVCxDQUF1QjFSLElBQXZCLEVBQTZCO0FBQ3pCLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNIOztBQUNEMFIsZUFBYSxDQUFDL2tCLFNBQWQsQ0FBd0I2Z0IsTUFBeEIsR0FBaUMsVUFBVWxqQixJQUFWLEVBQWdCd1gsT0FBaEIsRUFBeUI7QUFDdEQsV0FBTyxLQUFLOUIsSUFBTCxDQUFVeVIsMEJBQTBCLENBQUNubkIsSUFBRCxFQUFPLElBQVAsRUFBYXdYLE9BQWIsQ0FBcEMsQ0FBUDtBQUNILEdBRkQ7O0FBR0E0UCxlQUFhLENBQUMva0IsU0FBZCxDQUF3QjhnQixXQUF4QixHQUFzQyxVQUFVaGtCLEtBQVYsRUFBaUJDLEdBQWpCLEVBQXNCb1ksT0FBdEIsRUFBK0I7QUFDakUsV0FBTyxLQUFLOUIsSUFBTCxDQUFVeVIsMEJBQTBCLENBQUNob0IsS0FBRCxFQUFRQyxHQUFSLEVBQWFvWSxPQUFiLENBQXBDLENBQVA7QUFDSCxHQUZEOztBQUdBLFNBQU80UCxhQUFQO0FBQ0gsQ0FYa0MsRUFBbkMsQyxDQWFBOzs7QUFDQSxTQUFTQyxlQUFULENBQXlCcHNCLEtBQXpCLEVBQWdDcXNCLGdCQUFoQyxFQUFrRDtBQUM5QyxNQUFJLE9BQU9yc0IsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBakMsRUFBd0M7QUFBRTtBQUN0QyxRQUFJLE9BQU9xc0IsZ0JBQVAsS0FBNEIsUUFBaEMsRUFBMEM7QUFDdENyc0IsV0FBSyxHQUFHa2YsUUFBUSxDQUFDO0FBQUUySCxpQkFBUyxFQUFFd0Y7QUFBYixPQUFELEVBQWtDcnNCLEtBQWxDLENBQWhCO0FBQ0g7O0FBQ0QsV0FBTyxJQUFJMG5CLGVBQUosQ0FBb0IxbkIsS0FBcEIsQ0FBUDtBQUNILEdBTEQsTUFNSyxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDaEMsV0FBTyxJQUFJK3JCLFlBQUosQ0FBaUIvckIsS0FBakIsRUFBd0Jxc0IsZ0JBQXhCLENBQVA7QUFDSCxHQUZJLE1BR0EsSUFBSSxPQUFPcnNCLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDbEMsV0FBTyxJQUFJbXNCLGFBQUosQ0FBa0Juc0IsS0FBbEIsQ0FBUDtBQUNIO0FBQ0osQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVNzc0IsY0FBVCxDQUF3QmpaLE1BQXhCLEVBQWdDaVcsY0FBaEMsRUFBZ0RpRCxhQUFoRCxFQUErRDtBQUMzRCxNQUFJQSxhQUFhLEtBQUssS0FBSyxDQUEzQixFQUE4QjtBQUFFQSxpQkFBYSxHQUFHLEtBQWhCO0FBQXdCOztBQUN4RCxNQUFJL1csQ0FBQyxHQUFHbkMsTUFBTSxDQUFDM08sV0FBUCxFQUFSO0FBQ0E4USxHQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVSxNQUFWLEVBQWtCLEVBQWxCLENBQUo7O0FBQ0EsTUFBSW90QixhQUFKLEVBQW1CO0FBQ2YvVyxLQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVSxZQUFWLEVBQXdCLEVBQXhCLENBQUo7QUFDSDs7QUFDRCxNQUFJcVcsQ0FBQyxDQUFDOU4sTUFBRixHQUFXLEVBQWYsRUFBbUI7QUFBRTtBQUNqQixRQUFJNGhCLGNBQWMsSUFBSSxJQUF0QixFQUE0QjtBQUN4QjlULE9BQUMsR0FBR0EsQ0FBQyxDQUFDclcsT0FBRixDQUFVLEdBQVYsRUFBZSxFQUFmLENBQUo7QUFDSCxLQUZELE1BR0ssSUFBSW1xQixjQUFjLEtBQUssQ0FBdkIsRUFBMEI7QUFDM0I5VCxPQUFDLEdBQUdBLENBQUMsQ0FBQ3JXLE9BQUYsQ0FBVSxHQUFWLEVBQWVrcUIsb0JBQW9CLENBQUNDLGNBQUQsRUFBaUIsSUFBakIsQ0FBbkMsQ0FBSjtBQUNILEtBTmMsQ0FPZjs7QUFDSDs7QUFDRCxTQUFPOVQsQ0FBUDtBQUNIOztBQUNELFNBQVNnWCxtQkFBVCxDQUE2Qm5aLE1BQTdCLEVBQXFDO0FBQ2pDLFNBQU9tSSxRQUFRLENBQUNuSSxNQUFNLENBQUNOLFdBQVAsRUFBRCxFQUF1QixDQUF2QixDQUFSLEdBQW9DLEdBQXBDLEdBQ0h5SSxRQUFRLENBQUNuSSxNQUFNLENBQUNKLGFBQVAsRUFBRCxFQUF5QixDQUF6QixDQURMLEdBQ21DLEdBRG5DLEdBRUh1SSxRQUFRLENBQUNuSSxNQUFNLENBQUNGLGFBQVAsRUFBRCxFQUF5QixDQUF6QixDQUZaO0FBR0g7O0FBQ0QsU0FBU2tXLG9CQUFULENBQThCcFQsT0FBOUIsRUFBdUN3VyxLQUF2QyxFQUE4QztBQUMxQyxNQUFJQSxLQUFLLEtBQUssS0FBSyxDQUFuQixFQUFzQjtBQUFFQSxTQUFLLEdBQUcsS0FBUjtBQUFnQjs7QUFDeEMsTUFBSS9XLElBQUksR0FBR08sT0FBTyxHQUFHLENBQVYsR0FBYyxHQUFkLEdBQW9CLEdBQS9CO0FBQ0EsTUFBSXlXLEdBQUcsR0FBR3RoQixJQUFJLENBQUNzaEIsR0FBTCxDQUFTelcsT0FBVCxDQUFWO0FBQ0EsTUFBSUYsS0FBSyxHQUFHM0ssSUFBSSxDQUFDN0wsS0FBTCxDQUFXbXRCLEdBQUcsR0FBRyxFQUFqQixDQUFaO0FBQ0EsTUFBSUMsSUFBSSxHQUFHdmhCLElBQUksQ0FBQ3dCLEtBQUwsQ0FBVzhmLEdBQUcsR0FBRyxFQUFqQixDQUFYOztBQUNBLE1BQUlELEtBQUosRUFBVztBQUNQLFdBQU8vVyxJQUFJLEdBQUc4RixRQUFRLENBQUN6RixLQUFELEVBQVEsQ0FBUixDQUFmLEdBQTRCLEdBQTVCLEdBQWtDeUYsUUFBUSxDQUFDbVIsSUFBRCxFQUFPLENBQVAsQ0FBakQ7QUFDSCxHQUZELE1BR0s7QUFDRCxXQUFPLFFBQVFqWCxJQUFSLEdBQWVLLEtBQWYsSUFBd0I0VyxJQUFJLEdBQUcsTUFBTW5SLFFBQVEsQ0FBQ21SLElBQUQsRUFBTyxDQUFQLENBQWpCLEdBQTZCLEVBQXpELENBQVA7QUFDSDtBQUNKLEMsQ0FDRDs7O0FBQ0EsU0FBU1QsMEJBQVQsQ0FBb0Nob0IsS0FBcEMsRUFBMkNDLEdBQTNDLEVBQWdEb1ksT0FBaEQsRUFBeURzSyxTQUF6RCxFQUFvRTtBQUNoRSxNQUFJK0YsU0FBUyxHQUFHQyxpQkFBaUIsQ0FBQzNvQixLQUFELEVBQVFxWSxPQUFPLENBQUM4TCxjQUFoQixDQUFqQztBQUNBLE1BQUl5RSxPQUFPLEdBQUczb0IsR0FBRyxHQUFHMG9CLGlCQUFpQixDQUFDMW9CLEdBQUQsRUFBTW9ZLE9BQU8sQ0FBQzhMLGNBQWQsQ0FBcEIsR0FBb0QsSUFBckU7QUFDQSxTQUFPO0FBQ0h0akIsUUFBSSxFQUFFNm5CLFNBREg7QUFFSDFvQixTQUFLLEVBQUUwb0IsU0FGSjtBQUdIem9CLE9BQUcsRUFBRTJvQixPQUhGO0FBSUhocEIsWUFBUSxFQUFFeVksT0FBTyxDQUFDelksUUFKZjtBQUtIaXBCLGVBQVcsRUFBRXhRLE9BQU8sQ0FBQ2xiLE1BQVIsQ0FBZTBvQixLQUx6QjtBQU1IbEQsYUFBUyxFQUFFQTtBQU5SLEdBQVA7QUFRSDs7QUFDRCxTQUFTZ0csaUJBQVQsQ0FBMkJHLFFBQTNCLEVBQXFDM0UsY0FBckMsRUFBcUQ7QUFDakQsTUFBSW5YLENBQUMsR0FBR21YLGNBQWMsQ0FBQzRFLGFBQWYsQ0FBNkJELFFBQVEsQ0FBQzNaLE1BQXRDLENBQVI7QUFDQSxTQUFPO0FBQ0hBLFVBQU0sRUFBRTJaLFFBQVEsQ0FBQzNaLE1BRGQ7QUFFSGlXLGtCQUFjLEVBQUUwRCxRQUFRLENBQUMxRCxjQUZ0QjtBQUdIdkQsU0FBSyxFQUFFN1UsQ0FISjtBQUlIMEMsUUFBSSxFQUFFMUMsQ0FBQyxDQUFDLENBQUQsQ0FKSjtBQUtIMEUsU0FBSyxFQUFFMUUsQ0FBQyxDQUFDLENBQUQsQ0FMTDtBQU1IMkUsT0FBRyxFQUFFM0UsQ0FBQyxDQUFDLENBQUQsQ0FOSDtBQU9IOEUsUUFBSSxFQUFFOUUsQ0FBQyxDQUFDLENBQUQsQ0FQSjtBQVFIZ0YsVUFBTSxFQUFFaEYsQ0FBQyxDQUFDLENBQUQsQ0FSTjtBQVNIa0YsVUFBTSxFQUFFbEYsQ0FBQyxDQUFDLENBQUQsQ0FUTjtBQVVIbUYsZUFBVyxFQUFFbkYsQ0FBQyxDQUFDLENBQUQ7QUFWWCxHQUFQO0FBWUg7O0FBRUQsSUFBSWdjLGNBQWM7QUFBRztBQUFlLFlBQVk7QUFDNUMsV0FBU0EsY0FBVCxDQUF3QnZzQixRQUF4QixFQUFrQ3dzQixtQkFBbEMsRUFBdUQ7QUFDbkQsU0FBS3hzQixRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUt3c0IsbUJBQUwsR0FBMkJBLG1CQUEzQjtBQUNIOztBQUNERCxnQkFBYyxDQUFDOWxCLFNBQWYsQ0FBeUJ0QixNQUF6QixHQUFrQyxZQUFZO0FBQzFDLFNBQUtuRixRQUFMLENBQWN5c0IsUUFBZCxDQUF1QjtBQUNuQnBxQixVQUFJLEVBQUUscUJBRGE7QUFFbkI0ZSxjQUFRLEVBQUUsS0FBS3VMLG1CQUFMLENBQXlCdkw7QUFGaEIsS0FBdkI7QUFJSCxHQUxEOztBQU1Bc0wsZ0JBQWMsQ0FBQzlsQixTQUFmLENBQXlCaW1CLE9BQXpCLEdBQW1DLFlBQVk7QUFDM0MsU0FBSzFzQixRQUFMLENBQWN5c0IsUUFBZCxDQUF1QjtBQUNuQnBxQixVQUFJLEVBQUUscUJBRGE7QUFFbkJzcUIsZUFBUyxFQUFFLENBQUMsS0FBS0gsbUJBQUwsQ0FBeUJ2TCxRQUExQjtBQUZRLEtBQXZCO0FBSUgsR0FMRDs7QUFNQWxELFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JMLGNBQWMsQ0FBQzlsQixTQUFyQyxFQUFnRCxJQUFoRCxFQUFzRDtBQUNsRG9tQixPQUFHLEVBQUUsWUFBWTtBQUNiLGFBQU8sS0FBS0wsbUJBQUwsQ0FBeUJNLFFBQWhDO0FBQ0gsS0FIaUQ7QUFJbERDLGNBQVUsRUFBRSxJQUpzQztBQUtsREMsZ0JBQVksRUFBRTtBQUxvQyxHQUF0RDtBQU9BalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQkwsY0FBYyxDQUFDOWxCLFNBQXJDLEVBQWdELEtBQWhELEVBQXVEO0FBQ25EO0FBQ0FvbUIsT0FBRyxFQUFFLFlBQVk7QUFDYixhQUFPLEtBQUtMLG1CQUFMLENBQXlCUyxJQUF6QixDQUE4QnJyQixHQUFyQztBQUNILEtBSmtEO0FBS25EbXJCLGNBQVUsRUFBRSxJQUx1QztBQU1uREMsZ0JBQVksRUFBRTtBQU5xQyxHQUF2RDtBQVFBLFNBQU9ULGNBQVA7QUFDSCxDQWpDbUMsRUFBcEM7O0FBbUNBLElBQUlXLFFBQVE7QUFBRztBQUFlLFlBQVk7QUFDdEMsV0FBU0EsUUFBVCxDQUFrQmx0QixRQUFsQixFQUE0QjJoQixHQUE1QixFQUFpQ0UsUUFBakMsRUFBMkM7QUFDdkMsU0FBS3NMLFNBQUwsR0FBaUJudEIsUUFBakI7QUFDQSxTQUFLb3RCLElBQUwsR0FBWXpMLEdBQVo7QUFDQSxTQUFLMEwsU0FBTCxHQUFpQnhMLFFBQVEsSUFBSSxJQUE3QjtBQUNIO0FBQ0Q7Ozs7O0FBR0FxTCxVQUFRLENBQUN6bUIsU0FBVCxDQUFtQjZtQixPQUFuQixHQUE2QixVQUFVeGpCLElBQVYsRUFBZ0JoTixHQUFoQixFQUFxQjtBQUM5QyxRQUFJNFgsRUFBSixFQUFRNlksRUFBUjs7QUFDQSxRQUFJempCLElBQUksSUFBSTBqQixVQUFaLEVBQXdCLENBQXhCLEtBQ0ssSUFBSTFqQixJQUFJLElBQUkyakIsY0FBWixFQUE0QjtBQUM3QixVQUFJLE9BQU9BLGNBQWMsQ0FBQzNqQixJQUFELENBQXJCLEtBQWdDLFVBQXBDLEVBQWdEO0FBQzVDaE4sV0FBRyxHQUFHMndCLGNBQWMsQ0FBQzNqQixJQUFELENBQWQsQ0FBcUJoTixHQUFyQixDQUFOO0FBQ0g7O0FBQ0QsV0FBSzR3QixNQUFMLENBQVk7QUFDUkMscUJBQWEsR0FBR2paLEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQzVLLElBQUQsQ0FBRixHQUFXaE4sR0FBcEIsRUFBeUI0WCxFQUE1QjtBQURMLE9BQVo7QUFHSCxLQVBJLE1BUUEsSUFBSTVLLElBQUksSUFBSThqQix1QkFBWixFQUFxQztBQUN0QyxVQUFJQyxFQUFFLEdBQUcsS0FBSyxDQUFkOztBQUNBLFVBQUksT0FBT0QsdUJBQXVCLENBQUM5akIsSUFBRCxDQUE5QixLQUF5QyxVQUE3QyxFQUF5RDtBQUNyRGhOLFdBQUcsR0FBRzh3Qix1QkFBdUIsQ0FBQzlqQixJQUFELENBQXZCLENBQThCaE4sR0FBOUIsQ0FBTjtBQUNIOztBQUNELFVBQUlnTixJQUFJLEtBQUssT0FBYixFQUFzQjtBQUNsQitqQixVQUFFLEdBQUc7QUFBRUMseUJBQWUsRUFBRWh4QixHQUFuQjtBQUF3Qml4QixxQkFBVyxFQUFFanhCO0FBQXJDLFNBQUw7QUFDSCxPQUZELE1BR0ssSUFBSWdOLElBQUksS0FBSyxVQUFiLEVBQXlCO0FBQzFCK2pCLFVBQUUsR0FBRztBQUFFRyx1QkFBYSxFQUFFbHhCLEdBQWpCO0FBQXNCbXhCLDBCQUFnQixFQUFFbnhCO0FBQXhDLFNBQUw7QUFDSCxPQUZJLE1BR0E7QUFDRCt3QixVQUFFLElBQUlOLEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQ3pqQixJQUFELENBQUYsR0FBV2hOLEdBQXBCLEVBQXlCeXdCLEVBQTdCLENBQUY7QUFDSDs7QUFDRCxXQUFLRyxNQUFMLENBQVk7QUFDUkMscUJBQWEsRUFBRTtBQUFFRSxZQUFFLEVBQUVBO0FBQU47QUFEUCxPQUFaO0FBR0g7QUFDSixHQTdCRDs7QUE4QkFYLFVBQVEsQ0FBQ3ptQixTQUFULENBQW1CeW5CLGVBQW5CLEdBQXFDLFVBQVVwa0IsSUFBVixFQUFnQmhOLEdBQWhCLEVBQXFCO0FBQ3RELFFBQUk0WCxFQUFKOztBQUNBLFNBQUtnWixNQUFMLENBQVk7QUFDUlMsbUJBQWEsR0FBR3paLEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQzVLLElBQUQsQ0FBRixHQUFXaE4sR0FBcEIsRUFBeUI0WCxFQUE1QjtBQURMLEtBQVo7QUFHSCxHQUxEOztBQU1Bd1ksVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUIybkIsUUFBbkIsR0FBOEIsVUFBVUMsVUFBVixFQUFzQnJFLE9BQXRCLEVBQStCO0FBQ3pELFFBQUlBLE9BQU8sS0FBSyxLQUFLLENBQXJCLEVBQXdCO0FBQUVBLGFBQU8sR0FBRyxFQUFWO0FBQWU7O0FBQ3pDLFFBQUl0TSxPQUFPLEdBQUcsS0FBS3lQLFNBQUwsQ0FBZXpQLE9BQTdCO0FBQ0EsUUFBSW5hLEtBQUssR0FBR21hLE9BQU8sQ0FBQ3NHLFlBQVIsQ0FBcUJxSyxVQUFyQixDQUFaOztBQUNBLFFBQUk5cUIsS0FBSyxJQUFJLEtBQUs4cEIsU0FBbEIsRUFBNkI7QUFBRTtBQUMzQixVQUFJaUIsYUFBYSxHQUFHLEtBQUtqQixTQUFMLENBQWVoUSxLQUFuQztBQUNBLFVBQUlrUixVQUFVLEdBQUdoUixTQUFTLENBQUMrUSxhQUFhLENBQUMvcUIsS0FBZixFQUFzQkEsS0FBdEIsRUFBNkJtYSxPQUE3QixFQUFzQ3NNLE9BQU8sQ0FBQ3dFLFdBQTlDLENBQTFCLENBRnlCLENBRTZEOztBQUN0RixVQUFJeEUsT0FBTyxDQUFDeUUsZ0JBQVosRUFBOEI7QUFDMUIsYUFBS2YsTUFBTCxDQUFZO0FBQUVnQixvQkFBVSxFQUFFSDtBQUFkLFNBQVo7QUFDSCxPQUZELE1BR0s7QUFDRCxhQUFLYixNQUFMLENBQVk7QUFBRWEsb0JBQVUsRUFBRUE7QUFBZCxTQUFaO0FBQ0g7QUFDSjtBQUNKLEdBZEQ7O0FBZUFyQixVQUFRLENBQUN6bUIsU0FBVCxDQUFtQmtvQixNQUFuQixHQUE0QixVQUFVQyxRQUFWLEVBQW9CNUUsT0FBcEIsRUFBNkI7QUFDckQsUUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBckIsRUFBd0I7QUFBRUEsYUFBTyxHQUFHLEVBQVY7QUFBZTs7QUFDekMsUUFBSXRNLE9BQU8sR0FBRyxLQUFLeVAsU0FBTCxDQUFlelAsT0FBN0I7QUFDQSxRQUFJbGEsR0FBSjs7QUFDQSxRQUFJb3JCLFFBQVEsSUFBSSxJQUFoQixFQUFzQjtBQUNsQnByQixTQUFHLEdBQUdrYSxPQUFPLENBQUNzRyxZQUFSLENBQXFCNEssUUFBckIsQ0FBTjs7QUFDQSxVQUFJLENBQUNwckIsR0FBTCxFQUFVO0FBQ04sZUFETSxDQUNFO0FBQ1g7QUFDSjs7QUFDRCxRQUFJLEtBQUs2cEIsU0FBVCxFQUFvQjtBQUNoQixVQUFJN3BCLEdBQUosRUFBUztBQUNMLFlBQUlxckIsUUFBUSxHQUFHdFIsU0FBUyxDQUFDLEtBQUs4UCxTQUFMLENBQWVoUSxLQUFmLENBQXFCN1osR0FBdEIsRUFBMkJBLEdBQTNCLEVBQWdDa2EsT0FBaEMsRUFBeUNzTSxPQUFPLENBQUN3RSxXQUFqRCxDQUF4QjtBQUNBLGFBQUtkLE1BQUwsQ0FBWTtBQUFFbUIsa0JBQVEsRUFBRUE7QUFBWixTQUFaO0FBQ0gsT0FIRCxNQUlLO0FBQ0QsYUFBS25CLE1BQUwsQ0FBWTtBQUFFQyx1QkFBYSxFQUFFO0FBQUVtQixrQkFBTSxFQUFFO0FBQVY7QUFBakIsU0FBWjtBQUNIO0FBQ0o7QUFDSixHQW5CRDs7QUFvQkE1QixVQUFRLENBQUN6bUIsU0FBVCxDQUFtQnNvQixRQUFuQixHQUE4QixVQUFVVixVQUFWLEVBQXNCTyxRQUF0QixFQUFnQzVFLE9BQWhDLEVBQXlDO0FBQ25FLFFBQUlBLE9BQU8sS0FBSyxLQUFLLENBQXJCLEVBQXdCO0FBQUVBLGFBQU8sR0FBRyxFQUFWO0FBQWU7O0FBQ3pDLFFBQUl0TSxPQUFPLEdBQUcsS0FBS3lQLFNBQUwsQ0FBZXpQLE9BQTdCO0FBQ0EsUUFBSWlRLGFBQWEsR0FBRztBQUFFek8sWUFBTSxFQUFFOEssT0FBTyxDQUFDOUs7QUFBbEIsS0FBcEI7QUFDQSxRQUFJM2IsS0FBSyxHQUFHbWEsT0FBTyxDQUFDc0csWUFBUixDQUFxQnFLLFVBQXJCLENBQVo7QUFDQSxRQUFJN3FCLEdBQUo7O0FBQ0EsUUFBSSxDQUFDRCxLQUFMLEVBQVk7QUFDUixhQURRLENBQ0E7QUFDWDs7QUFDRCxRQUFJcXJCLFFBQVEsSUFBSSxJQUFoQixFQUFzQjtBQUNsQnByQixTQUFHLEdBQUdrYSxPQUFPLENBQUNzRyxZQUFSLENBQXFCNEssUUFBckIsQ0FBTjs7QUFDQSxVQUFJLENBQUNwckIsR0FBTCxFQUFVO0FBQUU7QUFDUjtBQUNIO0FBQ0o7O0FBQ0QsUUFBSSxLQUFLNnBCLFNBQVQsRUFBb0I7QUFDaEIsVUFBSWlCLGFBQWEsR0FBRyxLQUFLakIsU0FBTCxDQUFlaFEsS0FBbkMsQ0FEZ0IsQ0FFaEI7QUFDQTs7QUFDQSxVQUFJMk0sT0FBTyxDQUFDOUssTUFBUixLQUFtQixJQUF2QixFQUE2QjtBQUN6Qm9QLHFCQUFhLEdBQUcxUixzQkFBc0IsQ0FBQzBSLGFBQUQsQ0FBdEM7QUFDSDs7QUFDRCxVQUFJQyxVQUFVLEdBQUdoUixTQUFTLENBQUMrUSxhQUFhLENBQUMvcUIsS0FBZixFQUFzQkEsS0FBdEIsRUFBNkJtYSxPQUE3QixFQUFzQ3NNLE9BQU8sQ0FBQ3dFLFdBQTlDLENBQTFCOztBQUNBLFVBQUlockIsR0FBSixFQUFTO0FBQ0wsWUFBSXFyQixRQUFRLEdBQUd0UixTQUFTLENBQUMrUSxhQUFhLENBQUM5cUIsR0FBZixFQUFvQkEsR0FBcEIsRUFBeUJrYSxPQUF6QixFQUFrQ3NNLE9BQU8sQ0FBQ3dFLFdBQTFDLENBQXhCOztBQUNBLFlBQUkxWSxjQUFjLENBQUN5WSxVQUFELEVBQWFNLFFBQWIsQ0FBbEIsRUFBMEM7QUFDdEMsZUFBS25CLE1BQUwsQ0FBWTtBQUFFZ0Isc0JBQVUsRUFBRUgsVUFBZDtBQUEwQloseUJBQWEsRUFBRUE7QUFBekMsV0FBWjtBQUNILFNBRkQsTUFHSztBQUNELGVBQUtELE1BQUwsQ0FBWTtBQUFFYSxzQkFBVSxFQUFFQSxVQUFkO0FBQTBCTSxvQkFBUSxFQUFFQSxRQUFwQztBQUE4Q2xCLHlCQUFhLEVBQUVBO0FBQTdELFdBQVo7QUFDSDtBQUNKLE9BUkQsTUFTSztBQUFFO0FBQ0hBLHFCQUFhLENBQUNtQixNQUFkLEdBQXVCLEtBQXZCO0FBQ0EsYUFBS3BCLE1BQUwsQ0FBWTtBQUFFZ0Isb0JBQVUsRUFBRUgsVUFBZDtBQUEwQlosdUJBQWEsRUFBRUE7QUFBekMsU0FBWjtBQUNIO0FBQ0o7QUFDSixHQXJDRDs7QUFzQ0FULFVBQVEsQ0FBQ3ptQixTQUFULENBQW1CdW9CLFNBQW5CLEdBQStCLFVBQVVDLFVBQVYsRUFBc0I7QUFDakQsUUFBSUMsS0FBSyxHQUFHMWEsY0FBYyxDQUFDeWEsVUFBRCxDQUExQjs7QUFDQSxRQUFJQyxLQUFKLEVBQVc7QUFBRTtBQUNULFdBQUt4QixNQUFMLENBQVk7QUFBRWEsa0JBQVUsRUFBRVc7QUFBZCxPQUFaO0FBQ0g7QUFDSixHQUxEOztBQU1BaEMsVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUIwb0IsT0FBbkIsR0FBNkIsVUFBVUYsVUFBVixFQUFzQjtBQUMvQyxRQUFJQyxLQUFLLEdBQUcxYSxjQUFjLENBQUN5YSxVQUFELENBQTFCOztBQUNBLFFBQUlDLEtBQUosRUFBVztBQUFFO0FBQ1QsV0FBS3hCLE1BQUwsQ0FBWTtBQUFFbUIsZ0JBQVEsRUFBRUs7QUFBWixPQUFaO0FBQ0g7QUFDSixHQUxEOztBQU1BaEMsVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUIyb0IsU0FBbkIsR0FBK0IsVUFBVUgsVUFBVixFQUFzQjtBQUNqRCxRQUFJQyxLQUFLLEdBQUcxYSxjQUFjLENBQUN5YSxVQUFELENBQTFCOztBQUNBLFFBQUlDLEtBQUosRUFBVztBQUFFO0FBQ1QsV0FBS3hCLE1BQUwsQ0FBWTtBQUFFZ0Isa0JBQVUsRUFBRVE7QUFBZCxPQUFaO0FBQ0g7QUFDSixHQUxEOztBQU1BaEMsVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUI0b0IsU0FBbkIsR0FBK0IsVUFBVW5RLE1BQVYsRUFBa0I4SyxPQUFsQixFQUEyQjtBQUN0RCxRQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFyQixFQUF3QjtBQUFFQSxhQUFPLEdBQUcsRUFBVjtBQUFlOztBQUN6QyxRQUFJMkQsYUFBYSxHQUFHO0FBQUV6TyxZQUFNLEVBQUVBO0FBQVYsS0FBcEI7QUFDQSxRQUFJdVAsZ0JBQWdCLEdBQUd6RSxPQUFPLENBQUN5RSxnQkFBL0I7O0FBQ0EsUUFBSUEsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDMUJBLHNCQUFnQixHQUFHLEtBQUt0QixTQUFMLENBQWUvSixHQUFmLENBQW1CLHdCQUFuQixDQUFuQjtBQUNIOztBQUNELFFBQUksS0FBS2dLLElBQUwsQ0FBVWxPLE1BQVYsS0FBcUJBLE1BQXpCLEVBQWlDO0FBQzdCeU8sbUJBQWEsQ0FBQ21CLE1BQWQsR0FBdUJMLGdCQUF2QjtBQUNIOztBQUNELFNBQUtmLE1BQUwsQ0FBWTtBQUFFQyxtQkFBYSxFQUFFQTtBQUFqQixLQUFaO0FBQ0gsR0FYRDs7QUFZQVQsVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUI4Z0IsV0FBbkIsR0FBaUMsVUFBVStILFdBQVYsRUFBdUI7QUFDcEQsUUFBSTVSLE9BQU8sR0FBRyxLQUFLeVAsU0FBTCxDQUFlelAsT0FBN0I7QUFDQSxRQUFJbUUsUUFBUSxHQUFHLEtBQUt3TCxTQUFwQjtBQUNBLFFBQUlrQyxTQUFTLEdBQUc5RCxlQUFlLENBQUM2RCxXQUFELEVBQWMsS0FBS25DLFNBQUwsQ0FBZS9KLEdBQWYsQ0FBbUIsdUJBQW5CLENBQWQsQ0FBL0I7O0FBQ0EsUUFBSSxLQUFLZ0ssSUFBTCxDQUFVMEIsTUFBZCxFQUFzQjtBQUNsQixhQUFPcFIsT0FBTyxDQUFDNkosV0FBUixDQUFvQjFGLFFBQVEsQ0FBQ3hFLEtBQVQsQ0FBZTlaLEtBQW5DLEVBQTBDc2UsUUFBUSxDQUFDeEUsS0FBVCxDQUFlN1osR0FBekQsRUFBOEQrckIsU0FBOUQsRUFBeUU7QUFDNUVDLHNCQUFjLEVBQUUzTixRQUFRLENBQUMyTixjQURtRDtBQUU1RUMsb0JBQVksRUFBRTVOLFFBQVEsQ0FBQzROO0FBRnFELE9BQXpFLENBQVA7QUFJSCxLQUxELE1BTUs7QUFDRCxhQUFPL1IsT0FBTyxDQUFDNEosTUFBUixDQUFlekYsUUFBUSxDQUFDeEUsS0FBVCxDQUFlOVosS0FBOUIsRUFBcUNnc0IsU0FBckMsRUFBZ0Q7QUFDbkRHLGlCQUFTLEVBQUU3TixRQUFRLENBQUMyTjtBQUQrQixPQUFoRCxDQUFQO0FBR0g7QUFDSixHQWZEOztBQWdCQXRDLFVBQVEsQ0FBQ3ptQixTQUFULENBQW1CaW5CLE1BQW5CLEdBQTRCLFVBQVVpQyxRQUFWLEVBQW9CO0FBQzVDLFFBQUloTyxHQUFHLEdBQUcsS0FBS3lMLElBQWY7QUFDQSxRQUFJdkwsUUFBUSxHQUFHLEtBQUt3TCxTQUFwQjs7QUFDQSxRQUFJeEwsUUFBSixFQUFjO0FBQ1YsV0FBS3NMLFNBQUwsQ0FBZVYsUUFBZixDQUF3QjtBQUNwQnBxQixZQUFJLEVBQUUsZUFEYztBQUVwQjBmLGtCQUFVLEVBQUVGLFFBQVEsQ0FBQ0UsVUFGRDtBQUdwQjROLGdCQUFRLEVBQUVBLFFBSFU7QUFJcEJDLGVBQU8sRUFBRTtBQUpXLE9BQXhCOztBQU1BLFVBQUl6TyxVQUFVLEdBQUcsS0FBS2dNLFNBQUwsQ0FBZTBDLEtBQWYsQ0FBcUIxTyxVQUF0QztBQUNBLFdBQUtpTSxJQUFMLEdBQVlqTSxVQUFVLENBQUNPLElBQVgsQ0FBZ0JDLEdBQUcsQ0FBQ0MsS0FBcEIsQ0FBWjtBQUNBLFdBQUt5TCxTQUFMLEdBQWlCbE0sVUFBVSxDQUFDVyxTQUFYLENBQXFCRCxRQUFRLENBQUNFLFVBQTlCLENBQWpCO0FBQ0g7QUFDSixHQWREOztBQWVBbUwsVUFBUSxDQUFDem1CLFNBQVQsQ0FBbUJ0QixNQUFuQixHQUE0QixZQUFZO0FBQ3BDLFNBQUtnb0IsU0FBTCxDQUFlVixRQUFmLENBQXdCO0FBQ3BCcHFCLFVBQUksRUFBRSxrQkFEYztBQUVwQnVmLFdBQUssRUFBRSxLQUFLd0wsSUFBTCxDQUFVeEw7QUFGRyxLQUF4QjtBQUlILEdBTEQ7O0FBTUE3RCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsUUFBMUMsRUFBb0Q7QUFDaERvbUIsT0FBRyxFQUFFLFlBQVk7QUFDYixVQUFJNUwsUUFBUSxHQUFHLEtBQUttTSxJQUFMLENBQVVuTSxRQUF6Qjs7QUFDQSxVQUFJQSxRQUFKLEVBQWM7QUFDVixlQUFPLElBQUlzTCxjQUFKLENBQW1CLEtBQUtZLFNBQXhCLEVBQW1DLEtBQUtBLFNBQUwsQ0FBZTBDLEtBQWYsQ0FBcUJDLFlBQXJCLENBQWtDN08sUUFBbEMsQ0FBbkMsQ0FBUDtBQUNIOztBQUNELGFBQU8sSUFBUDtBQUNILEtBUCtDO0FBUWhEOEwsY0FBVSxFQUFFLElBUm9DO0FBU2hEQyxnQkFBWSxFQUFFO0FBVGtDLEdBQXBEO0FBV0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsT0FBMUMsRUFBbUQ7QUFDL0NvbUIsT0FBRyxFQUFFLFlBQVk7QUFDYixhQUFPLEtBQUtRLFNBQUwsR0FDSCxLQUFLRixTQUFMLENBQWV6UCxPQUFmLENBQXVCcVMsTUFBdkIsQ0FBOEIsS0FBSzFDLFNBQUwsQ0FBZWhRLEtBQWYsQ0FBcUI5WixLQUFuRCxDQURHLEdBRUgsSUFGSjtBQUdILEtBTDhDO0FBTS9Dd3BCLGNBQVUsRUFBRSxJQU5tQztBQU8vQ0MsZ0JBQVksRUFBRTtBQVBpQyxHQUFuRDtBQVNBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQk0sUUFBUSxDQUFDem1CLFNBQS9CLEVBQTBDLEtBQTFDLEVBQWlEO0FBQzdDb21CLE9BQUcsRUFBRSxZQUFZO0FBQ2IsYUFBUSxLQUFLUSxTQUFMLElBQWtCLEtBQUtELElBQUwsQ0FBVTBCLE1BQTdCLEdBQ0gsS0FBSzNCLFNBQUwsQ0FBZXpQLE9BQWYsQ0FBdUJxUyxNQUF2QixDQUE4QixLQUFLMUMsU0FBTCxDQUFlaFEsS0FBZixDQUFxQjdaLEdBQW5ELENBREcsR0FFSCxJQUZKO0FBR0gsS0FMNEM7QUFNN0N1cEIsY0FBVSxFQUFFLElBTmlDO0FBTzdDQyxnQkFBWSxFQUFFO0FBUCtCLEdBQWpEO0FBU0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsSUFBMUMsRUFBZ0Q7QUFDNUM7QUFDQTtBQUNBb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVVOLFFBQWpCO0FBQTRCLEtBSEg7QUFJNUNDLGNBQVUsRUFBRSxJQUpnQztBQUs1Q0MsZ0JBQVksRUFBRTtBQUw4QixHQUFoRDtBQU9BalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQk0sUUFBUSxDQUFDem1CLFNBQS9CLEVBQTBDLFNBQTFDLEVBQXFEO0FBQ2pEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVVwSyxPQUFqQjtBQUEyQixLQURHO0FBRWpEK0osY0FBVSxFQUFFLElBRnFDO0FBR2pEQyxnQkFBWSxFQUFFO0FBSG1DLEdBQXJEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsUUFBMUMsRUFBb0Q7QUFDaERvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVWxPLE1BQWpCO0FBQTBCLEtBREc7QUFFaEQ2TixjQUFVLEVBQUUsSUFGb0M7QUFHaERDLGdCQUFZLEVBQUU7QUFIa0MsR0FBcEQ7QUFLQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JNLFFBQVEsQ0FBQ3ptQixTQUEvQixFQUEwQyxPQUExQyxFQUFtRDtBQUMvQ29tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBS08sSUFBTCxDQUFVOXBCLEtBQWpCO0FBQXlCLEtBREc7QUFFL0N5cEIsY0FBVSxFQUFFLElBRm1DO0FBRy9DQyxnQkFBWSxFQUFFO0FBSGlDLEdBQW5EO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsS0FBMUMsRUFBaUQ7QUFDN0NvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVXhyQixHQUFqQjtBQUF1QixLQURHO0FBRTdDbXJCLGNBQVUsRUFBRSxJQUZpQztBQUc3Q0MsZ0JBQVksRUFBRTtBQUgrQixHQUFqRDtBQUtBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQk0sUUFBUSxDQUFDem1CLFNBQS9CLEVBQTBDLFdBQTFDLEVBQXVEO0FBQ25Eb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVU0QyxTQUFqQjtBQUE2QixLQURHO0FBRW5EakQsY0FBVSxFQUFFLElBRnVDO0FBR25EQyxnQkFBWSxFQUFFO0FBSHFDLEdBQXZEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsZUFBMUMsRUFBMkQ7QUFDdkRvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVVMsRUFBVixDQUFhRyxhQUFwQjtBQUFvQyxLQURBO0FBRXZEakIsY0FBVSxFQUFFLElBRjJDO0FBR3ZEQyxnQkFBWSxFQUFFO0FBSHlDLEdBQTNEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsa0JBQTFDLEVBQThEO0FBQzFEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVVTLEVBQVYsQ0FBYUksZ0JBQXBCO0FBQXVDLEtBREE7QUFFMURsQixjQUFVLEVBQUUsSUFGOEM7QUFHMURDLGdCQUFZLEVBQUU7QUFINEMsR0FBOUQ7QUFLQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JNLFFBQVEsQ0FBQ3ptQixTQUEvQixFQUEwQyxZQUExQyxFQUF3RDtBQUNwRG9tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBS08sSUFBTCxDQUFVUyxFQUFWLENBQWFvQyxXQUFiLENBQXlCLENBQXpCLEtBQStCLElBQXRDO0FBQTZDLEtBRFo7QUFFcERsRCxjQUFVLEVBQUUsSUFGd0M7QUFHcERDLGdCQUFZLEVBQUU7QUFIc0MsR0FBeEQ7QUFLQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JNLFFBQVEsQ0FBQ3ptQixTQUEvQixFQUEwQyxTQUExQyxFQUFxRDtBQUNqRG9tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBS08sSUFBTCxDQUFVUyxFQUFWLENBQWFxQyxPQUFwQjtBQUE4QixLQURBO0FBRWpEbkQsY0FBVSxFQUFFLElBRnFDO0FBR2pEQyxnQkFBWSxFQUFFO0FBSG1DLEdBQXJEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsT0FBMUMsRUFBbUQ7QUFDL0NvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVVMsRUFBVixDQUFhc0MsTUFBYixDQUFvQixDQUFwQixLQUEwQixJQUFqQztBQUF3QyxLQURaO0FBRS9DcEQsY0FBVSxFQUFFLElBRm1DO0FBRy9DQyxnQkFBWSxFQUFFO0FBSGlDLEdBQW5EO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsaUJBQTFDLEVBQTZEO0FBQ3pEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVVTLEVBQVYsQ0FBYUMsZUFBcEI7QUFBc0MsS0FEQTtBQUV6RGYsY0FBVSxFQUFFLElBRjZDO0FBR3pEQyxnQkFBWSxFQUFFO0FBSDJDLEdBQTdEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsYUFBMUMsRUFBeUQ7QUFDckRvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVVMsRUFBVixDQUFhRSxXQUFwQjtBQUFrQyxLQURBO0FBRXJEaEIsY0FBVSxFQUFFLElBRnlDO0FBR3JEQyxnQkFBWSxFQUFFO0FBSHVDLEdBQXpEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCTSxRQUFRLENBQUN6bUIsU0FBL0IsRUFBMEMsV0FBMUMsRUFBdUQ7QUFDbkRvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVVMsRUFBVixDQUFhdUMsU0FBcEI7QUFBZ0MsS0FEQTtBQUVuRHJELGNBQVUsRUFBRSxJQUZ1QztBQUduREMsZ0JBQVksRUFBRTtBQUhxQyxHQUF2RDtBQUtBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQk0sUUFBUSxDQUFDem1CLFNBQS9CLEVBQTBDLFlBQTFDLEVBQXdEO0FBQ3BEO0FBQ0FvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUtPLElBQUwsQ0FBVVMsRUFBVixDQUFhd0MsVUFBcEI7QUFBaUMsS0FGQTtBQUdwRHRELGNBQVUsRUFBRSxJQUh3QztBQUlwREMsZ0JBQVksRUFBRTtBQUpzQyxHQUF4RDtBQU1BalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQk0sUUFBUSxDQUFDem1CLFNBQS9CLEVBQTBDLGVBQTFDLEVBQTJEO0FBQ3ZEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLTyxJQUFMLENBQVVlLGFBQWpCO0FBQWlDLEtBREc7QUFFdkRwQixjQUFVLEVBQUUsSUFGMkM7QUFHdkRDLGdCQUFZLEVBQUU7QUFIeUMsR0FBM0Q7QUFLQSxTQUFPRSxRQUFQO0FBQ0gsQ0ExUzZCLEVBQTlCO0FBNFNBOzs7OztBQUdBLFNBQVNvRCxlQUFULENBQXlCblAsVUFBekIsRUFBcUNvUCxZQUFyQyxFQUFtRDlRLFlBQW5ELEVBQWlFekMsZ0JBQWpFLEVBQW1GO0FBQy9FLE1BQUl3VCxrQkFBa0IsR0FBRyxFQUF6QjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHLEVBQXZCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLEVBQWY7QUFDQSxNQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBLE1BQUlDLFFBQVEsR0FBR0MsZUFBZSxDQUFDM1AsVUFBVSxDQUFDTyxJQUFaLEVBQWtCNk8sWUFBbEIsQ0FBOUI7O0FBQ0EsT0FBSyxJQUFJM08sS0FBVCxJQUFrQlQsVUFBVSxDQUFDTyxJQUE3QixFQUFtQztBQUMvQixRQUFJQyxHQUFHLEdBQUdSLFVBQVUsQ0FBQ08sSUFBWCxDQUFnQkUsS0FBaEIsQ0FBVjs7QUFDQSxRQUFJRCxHQUFHLENBQUNxTyxTQUFKLEtBQWtCLG9CQUF0QixFQUE0QztBQUN4QyxVQUFJck8sR0FBRyxDQUFDcUIsT0FBUixFQUFpQjtBQUNid04sMEJBQWtCLENBQUM3TyxHQUFHLENBQUNxQixPQUFMLENBQWxCLEdBQWtDLEVBQWxDOztBQUNBLFlBQUksQ0FBQzBOLFlBQVksQ0FBQy9PLEdBQUcsQ0FBQ3FCLE9BQUwsQ0FBakIsRUFBZ0M7QUFDNUIwTixzQkFBWSxDQUFDL08sR0FBRyxDQUFDcUIsT0FBTCxDQUFaLEdBQTRCckIsR0FBNUI7QUFDSDtBQUNKLE9BTEQsTUFNSztBQUNEOE8sd0JBQWdCLENBQUM3TyxLQUFELENBQWhCLEdBQTBCLEVBQTFCO0FBQ0g7QUFDSjtBQUNKOztBQUNELE9BQUssSUFBSUcsVUFBVCxJQUF1QlosVUFBVSxDQUFDVyxTQUFsQyxFQUE2QztBQUN6QyxRQUFJRCxRQUFRLEdBQUdWLFVBQVUsQ0FBQ1csU0FBWCxDQUFxQkMsVUFBckIsQ0FBZjtBQUNBLFFBQUlKLEdBQUcsR0FBR1IsVUFBVSxDQUFDTyxJQUFYLENBQWdCRyxRQUFRLENBQUNELEtBQXpCLENBQVY7QUFDQSxRQUFJaU0sRUFBRSxHQUFHZ0QsUUFBUSxDQUFDbFAsR0FBRyxDQUFDQyxLQUFMLENBQWpCO0FBQ0EsUUFBSW1QLFNBQVMsR0FBR2xQLFFBQVEsQ0FBQ3hFLEtBQXpCO0FBQ0EsUUFBSTJULFdBQVcsR0FBSSxDQUFDclAsR0FBRyxDQUFDekMsTUFBTCxJQUFlbEMsZ0JBQWhCLEdBQ2RELHNCQUFzQixDQUFDZ1UsU0FBRCxFQUFZL1QsZ0JBQVosQ0FEUixHQUVkK1QsU0FGSjtBQUdBLFFBQUlFLFdBQVcsR0FBR3ZNLGVBQWUsQ0FBQ3NNLFdBQUQsRUFBY3ZSLFlBQWQsQ0FBakM7O0FBQ0EsUUFBSXdSLFdBQUosRUFBaUI7QUFDYixVQUFJdFAsR0FBRyxDQUFDcU8sU0FBSixLQUFrQixvQkFBdEIsRUFBNEM7QUFDeEMsWUFBSXJPLEdBQUcsQ0FBQ3FCLE9BQVIsRUFBaUI7QUFDYndOLDRCQUFrQixDQUFDN08sR0FBRyxDQUFDcUIsT0FBTCxDQUFsQixDQUFnQy9aLElBQWhDLENBQXFDZ29CLFdBQXJDO0FBQ0gsU0FGRCxNQUdLO0FBQ0RSLDBCQUFnQixDQUFDNU8sUUFBUSxDQUFDRCxLQUFWLENBQWhCLENBQWlDM1ksSUFBakMsQ0FBc0Nnb0IsV0FBdEM7QUFDSDtBQUNKLE9BUEQsTUFRSztBQUNELFNBQUN0UCxHQUFHLENBQUNxTyxTQUFKLEtBQWtCLFlBQWxCLEdBQWlDVyxRQUFqQyxHQUE0Q0MsUUFBN0MsRUFBdUQzbkIsSUFBdkQsQ0FBNEQ7QUFDeEQwWSxhQUFHLEVBQUVBLEdBRG1EO0FBRXhEa00sWUFBRSxFQUFFQSxFQUZvRDtBQUd4RGhNLGtCQUFRLEVBQUVBLFFBSDhDO0FBSXhEeEUsZUFBSyxFQUFFNFQsV0FKaUQ7QUFLeERDLGlCQUFPLEVBQUVGLFdBQVcsQ0FBQ3p0QixLQUFaLElBQXFCeXRCLFdBQVcsQ0FBQ3p0QixLQUFaLENBQWtCeU4sT0FBbEIsT0FBZ0NpZ0IsV0FBVyxDQUFDMXRCLEtBQVosQ0FBa0J5TixPQUFsQixFQUxOO0FBTXhEbWdCLGVBQUssRUFBRUgsV0FBVyxDQUFDeHRCLEdBQVosSUFBbUJ3dEIsV0FBVyxDQUFDeHRCLEdBQVosQ0FBZ0J3TixPQUFoQixPQUE4QmlnQixXQUFXLENBQUN6dEIsR0FBWixDQUFnQndOLE9BQWhCO0FBTkEsU0FBNUQ7QUFRSDtBQUNKO0FBQ0o7O0FBQ0QsT0FBSyxJQUFJZ1MsT0FBVCxJQUFvQndOLGtCQUFwQixFQUF3QztBQUFFO0FBQ3RDLFFBQUl0TSxNQUFNLEdBQUdzTSxrQkFBa0IsQ0FBQ3hOLE9BQUQsQ0FBL0I7QUFDQSxRQUFJb0IsY0FBYyxHQUFHSCxZQUFZLENBQUNDLE1BQUQsRUFBU3pFLFlBQVQsQ0FBakM7O0FBQ0EsU0FBSyxJQUFJbkUsRUFBRSxHQUFHLENBQVQsRUFBWThWLGdCQUFnQixHQUFHaE4sY0FBcEMsRUFBb0Q5SSxFQUFFLEdBQUc4VixnQkFBZ0IsQ0FBQ3JxQixNQUExRSxFQUFrRnVVLEVBQUUsRUFBcEYsRUFBd0Y7QUFDcEYsVUFBSStWLGFBQWEsR0FBR0QsZ0JBQWdCLENBQUM5VixFQUFELENBQXBDO0FBQ0EsVUFBSXFHLEdBQUcsR0FBRytPLFlBQVksQ0FBQzFOLE9BQUQsQ0FBdEI7QUFDQSxVQUFJNkssRUFBRSxHQUFHZ0QsUUFBUSxDQUFDbFAsR0FBRyxDQUFDQyxLQUFMLENBQWpCO0FBQ0ErTyxjQUFRLENBQUMxbkIsSUFBVCxDQUFjO0FBQ1YwWSxXQUFHLEVBQUVBLEdBREs7QUFFVmtNLFVBQUUsRUFBRUEsRUFGTTtBQUdWaE0sZ0JBQVEsRUFBRSxJQUhBO0FBSVZ4RSxhQUFLLEVBQUVnVSxhQUpHO0FBS1ZILGVBQU8sRUFBRSxLQUxDO0FBTVZDLGFBQUssRUFBRTtBQU5HLE9BQWQ7QUFRSDtBQUNKOztBQUNELE9BQUssSUFBSXZQLEtBQVQsSUFBa0I2TyxnQkFBbEIsRUFBb0M7QUFDaEMsUUFBSXZNLE1BQU0sR0FBR3VNLGdCQUFnQixDQUFDN08sS0FBRCxDQUE3QjtBQUNBLFFBQUl3QyxjQUFjLEdBQUdILFlBQVksQ0FBQ0MsTUFBRCxFQUFTekUsWUFBVCxDQUFqQzs7QUFDQSxTQUFLLElBQUkvSyxFQUFFLEdBQUcsQ0FBVCxFQUFZNGMsZ0JBQWdCLEdBQUdsTixjQUFwQyxFQUFvRDFQLEVBQUUsR0FBRzRjLGdCQUFnQixDQUFDdnFCLE1BQTFFLEVBQWtGMk4sRUFBRSxFQUFwRixFQUF3RjtBQUNwRixVQUFJMmMsYUFBYSxHQUFHQyxnQkFBZ0IsQ0FBQzVjLEVBQUQsQ0FBcEM7QUFDQWljLGNBQVEsQ0FBQzFuQixJQUFULENBQWM7QUFDVjBZLFdBQUcsRUFBRVIsVUFBVSxDQUFDTyxJQUFYLENBQWdCRSxLQUFoQixDQURLO0FBRVZpTSxVQUFFLEVBQUVnRCxRQUFRLENBQUNqUCxLQUFELENBRkY7QUFHVkMsZ0JBQVEsRUFBRSxJQUhBO0FBSVZ4RSxhQUFLLEVBQUVnVSxhQUpHO0FBS1ZILGVBQU8sRUFBRSxLQUxDO0FBTVZDLGFBQUssRUFBRTtBQU5HLE9BQWQ7QUFRSDtBQUNKOztBQUNELFNBQU87QUFBRUksTUFBRSxFQUFFWixRQUFOO0FBQWdCYSxNQUFFLEVBQUVaO0FBQXBCLEdBQVA7QUFDSDs7QUFDRCxTQUFTYSxjQUFULENBQXdCOVAsR0FBeEIsRUFBNkI7QUFDekIsU0FBT0EsR0FBRyxDQUFDcU8sU0FBSixLQUFrQixZQUFsQixJQUFrQ3JPLEdBQUcsQ0FBQ3FPLFNBQUosS0FBa0Isb0JBQTNEO0FBQ0g7O0FBQ0QsU0FBUzBCLGdCQUFULENBQTBCQyxJQUExQixFQUFnQ0MsSUFBaEMsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQzVDLE1BQUlGLElBQUksQ0FBQ0csaUJBQUwsQ0FBdUIsYUFBdkIsQ0FBSixFQUEyQztBQUN2Q0YsUUFBSSxHQUFHQSxJQUFJLENBQUNHLE1BQUwsQ0FBWSxVQUFVQyxHQUFWLEVBQWU7QUFDOUIsVUFBSUMsTUFBTSxHQUFHTixJQUFJLENBQUNPLGVBQUwsQ0FBcUIsYUFBckIsRUFBb0MsQ0FDN0M7QUFDSXR1QixhQUFLLEVBQUUsSUFBSXNwQixRQUFKLENBQWF5RSxJQUFJLENBQUMzeEIsUUFBbEIsRUFBNEJneUIsR0FBRyxDQUFDRyxVQUFKLENBQWV4USxHQUEzQyxFQUFnRHFRLEdBQUcsQ0FBQ0csVUFBSixDQUFldFEsUUFBL0QsQ0FEWDtBQUVJZ1EsZ0JBQVEsRUFBRUEsUUFGZDtBQUdJWCxlQUFPLEVBQUVjLEdBQUcsQ0FBQ2QsT0FIakI7QUFJSUMsYUFBSyxFQUFFYSxHQUFHLENBQUNiLEtBSmY7QUFLSTtBQUNBanZCLFVBQUUsRUFBRTh2QixHQUFHLENBQUM5dkIsRUFOWjtBQU9JeXZCLFlBQUksRUFBRUE7QUFQVixPQUQ2QyxDQUFwQyxDQUFiOztBQVdBLFVBQUlNLE1BQU0sS0FBSyxLQUFmLEVBQXNCO0FBQUU7QUFDcEIsZUFBTyxLQUFQO0FBQ0gsT0FGRCxNQUdLLElBQUlBLE1BQU0sSUFBSUEsTUFBTSxLQUFLLElBQXpCLEVBQStCO0FBQ2hDRCxXQUFHLENBQUM5dkIsRUFBSixHQUFTK3ZCLE1BQVQ7QUFDSDs7QUFDRCxhQUFPLElBQVA7QUFDSCxLQW5CTSxDQUFQO0FBb0JIOztBQUNELE9BQUssSUFBSTNXLEVBQUUsR0FBRyxDQUFULEVBQVk4VyxNQUFNLEdBQUdSLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHOFcsTUFBTSxDQUFDcnJCLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxRQUFJMFcsR0FBRyxHQUFHSSxNQUFNLENBQUM5VyxFQUFELENBQWhCO0FBQ0ErVyxZQUFRLENBQUNMLEdBQUcsQ0FBQzl2QixFQUFMLEVBQVM4dkIsR0FBVCxDQUFSO0FBQ0g7O0FBQ0QsU0FBT0osSUFBUDtBQUNIOztBQUNELFNBQVNTLFFBQVQsQ0FBa0Jud0IsRUFBbEIsRUFBc0I4dkIsR0FBdEIsRUFBMkI7QUFDdkI5dkIsSUFBRSxDQUFDb3dCLEtBQUgsR0FBV04sR0FBWDtBQUNIOztBQUNELFNBQVNPLFFBQVQsQ0FBa0Jyd0IsRUFBbEIsRUFBc0I7QUFDbEIsU0FBT0EsRUFBRSxDQUFDb3dCLEtBQUgsSUFBWSxJQUFuQjtBQUNILEMsQ0FDRDs7O0FBQ0EsU0FBU3hCLGVBQVQsQ0FBeUIwQixTQUF6QixFQUFvQ2pDLFlBQXBDLEVBQWtEO0FBQzlDLFNBQU8vUCxPQUFPLENBQUNnUyxTQUFELEVBQVksVUFBVWhULFFBQVYsRUFBb0I7QUFDMUMsV0FBT2lULGNBQWMsQ0FBQ2pULFFBQUQsRUFBVytRLFlBQVgsQ0FBckI7QUFDSCxHQUZhLENBQWQ7QUFHSDs7QUFDRCxTQUFTa0MsY0FBVCxDQUF3QmpULFFBQXhCLEVBQWtDK1EsWUFBbEMsRUFBZ0Q7QUFDNUMsTUFBSW1DLEdBQUcsR0FBRyxFQUFWOztBQUNBLE1BQUluQyxZQUFZLENBQUMsRUFBRCxDQUFoQixFQUFzQjtBQUNsQm1DLE9BQUcsQ0FBQ3pwQixJQUFKLENBQVNzbkIsWUFBWSxDQUFDLEVBQUQsQ0FBckI7QUFDSDs7QUFDRCxNQUFJQSxZQUFZLENBQUMvUSxRQUFRLENBQUNvQyxLQUFWLENBQWhCLEVBQWtDO0FBQzlCOFEsT0FBRyxDQUFDenBCLElBQUosQ0FBU3NuQixZQUFZLENBQUMvUSxRQUFRLENBQUNvQyxLQUFWLENBQXJCO0FBQ0g7O0FBQ0Q4USxLQUFHLENBQUN6cEIsSUFBSixDQUFTdVcsUUFBUSxDQUFDcU8sRUFBbEI7QUFDQSxTQUFPOEUsZUFBZSxDQUFDRCxHQUFELENBQXRCO0FBQ0gsQyxDQUVEOzs7QUFDQSxTQUFTRSx5QkFBVCxDQUFtQ3pSLFVBQW5DLEVBQStDMFIsZUFBL0MsRUFBZ0VsRCxRQUFoRSxFQUEwRTN2QixRQUExRSxFQUFvRjtBQUNoRixNQUFJOHlCLFlBQVksR0FBR2hDLGVBQWUsQ0FBQzNQLFVBQVUsQ0FBQ08sSUFBWixFQUFrQm1SLGVBQWxCLENBQWxDO0FBQ0EsTUFBSTNTLElBQUksR0FBR2tCLHFCQUFxQixFQUFoQzs7QUFDQSxPQUFLLElBQUlRLEtBQVQsSUFBa0JULFVBQVUsQ0FBQ08sSUFBN0IsRUFBbUM7QUFDL0IsUUFBSUMsR0FBRyxHQUFHUixVQUFVLENBQUNPLElBQVgsQ0FBZ0JFLEtBQWhCLENBQVY7QUFDQTFCLFFBQUksQ0FBQ3dCLElBQUwsQ0FBVUUsS0FBVixJQUFtQm1SLHVCQUF1QixDQUFDcFIsR0FBRCxFQUFNbVIsWUFBWSxDQUFDbFIsS0FBRCxDQUFsQixFQUEyQitOLFFBQTNCLEVBQXFDM3ZCLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QjJRLHdCQUFqRSxFQUEyRmh6QixRQUEzRixDQUExQztBQUNIOztBQUNELE9BQUssSUFBSStoQixVQUFULElBQXVCWixVQUFVLENBQUNXLFNBQWxDLEVBQTZDO0FBQ3pDLFFBQUlELFFBQVEsR0FBR1YsVUFBVSxDQUFDVyxTQUFYLENBQXFCQyxVQUFyQixDQUFmO0FBQ0EsUUFBSUosR0FBRyxHQUFHekIsSUFBSSxDQUFDd0IsSUFBTCxDQUFVRyxRQUFRLENBQUNELEtBQW5CLENBQVYsQ0FGeUMsQ0FFSjs7QUFDckMxQixRQUFJLENBQUM0QixTQUFMLENBQWVDLFVBQWYsSUFBNkJrUiw0QkFBNEIsQ0FBQ3BSLFFBQUQsRUFBV0YsR0FBWCxFQUFnQm1SLFlBQVksQ0FBQ2pSLFFBQVEsQ0FBQ0QsS0FBVixDQUE1QixFQUE4QytOLFFBQTlDLEVBQXdEM3ZCLFFBQXhELENBQXpEO0FBQ0g7O0FBQ0QsU0FBT2tnQixJQUFQO0FBQ0g7O0FBQ0QsU0FBUzZTLHVCQUFULENBQWlDdlQsUUFBakMsRUFBMkMwVCxXQUEzQyxFQUF3RHZELFFBQXhELEVBQWtFd0QsUUFBbEUsRUFBNEVuekIsUUFBNUUsRUFBc0Y7QUFDbEYsTUFBSTJ0QixhQUFhLEdBQUdnQyxRQUFRLENBQUNoQyxhQUFULElBQTBCLEVBQTlDLENBRGtGLENBRWxGO0FBQ0E7QUFDQTs7QUFDQSxNQUFJQSxhQUFhLENBQUNtQixNQUFkLElBQXdCLElBQXhCLElBQ0FvRSxXQUFXLENBQUNqRixnQkFEWixLQUVDMEIsUUFBUSxDQUFDcEIsVUFBVCxJQUF1Qm9CLFFBQVEsQ0FBQ2QsUUFGakMsQ0FBSixFQUVnRDtBQUM1Q2xCLGlCQUFhLENBQUNtQixNQUFkLEdBQXVCLElBQXZCLENBRDRDLENBQ2Y7QUFDaEM7O0FBQ0QsTUFBSXNFLElBQUksR0FBRzdVLFFBQVEsQ0FBQyxFQUFELEVBQUtpQixRQUFMLEVBQWVtTyxhQUFmLEVBQThCO0FBQUVFLE1BQUUsRUFBRXRQLFFBQVEsQ0FBQyxFQUFELEVBQUtpQixRQUFRLENBQUNxTyxFQUFkLEVBQWtCRixhQUFhLENBQUNFLEVBQWhDO0FBQWQsR0FBOUIsQ0FBbkI7O0FBQ0EsTUFBSThCLFFBQVEsQ0FBQ3hCLGFBQWIsRUFBNEI7QUFDeEJpRixRQUFJLENBQUNqRixhQUFMLEdBQXFCNVAsUUFBUSxDQUFDLEVBQUQsRUFBSzZVLElBQUksQ0FBQ2pGLGFBQVYsRUFBeUJ3QixRQUFRLENBQUN4QixhQUFsQyxDQUE3QjtBQUNIOztBQUNELE9BQUssSUFBSTdTLEVBQUUsR0FBRyxDQUFULEVBQVkrWCxVQUFVLEdBQUdGLFFBQTlCLEVBQXdDN1gsRUFBRSxHQUFHK1gsVUFBVSxDQUFDdHNCLE1BQXhELEVBQWdFdVUsRUFBRSxFQUFsRSxFQUFzRTtBQUNsRSxRQUFJZ1ksT0FBTyxHQUFHRCxVQUFVLENBQUMvWCxFQUFELENBQXhCO0FBQ0FnWSxXQUFPLENBQUNGLElBQUQsRUFBT3pELFFBQVAsRUFBaUIzdkIsUUFBakIsQ0FBUDtBQUNIOztBQUNELE1BQUksQ0FBQ296QixJQUFJLENBQUN0RSxNQUFOLElBQWdCOXVCLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsb0JBQWIsQ0FBcEIsRUFBd0Q7QUFDcERnUSxRQUFJLENBQUN0RSxNQUFMLEdBQWMsSUFBZDtBQUNIOztBQUNELFNBQU9zRSxJQUFQO0FBQ0g7O0FBQ0QsU0FBU0gsNEJBQVQsQ0FBc0NNLGFBQXRDLEVBQXFEL1QsUUFBckQsRUFBK0Q7QUFDL0QwVCxXQURBLEVBQ2F2RCxRQURiLEVBQ3VCM3ZCLFFBRHZCLEVBQ2lDO0FBQzdCLE1BQUkwZCxPQUFPLEdBQUcxZCxRQUFRLENBQUMwZCxPQUF2QjtBQUNBLE1BQUk4VixXQUFXLEdBQUc3RCxRQUFRLENBQUNoQyxhQUFULElBQTBCZ0MsUUFBUSxDQUFDaEMsYUFBVCxDQUF1QnpPLE1BQXZCLEtBQWtDLElBQTlFO0FBQ0EsTUFBSXVVLFFBQVEsR0FBRzlELFFBQVEsQ0FBQ2hDLGFBQVQsSUFBMEJnQyxRQUFRLENBQUNoQyxhQUFULENBQXVCbUIsTUFBdkIsS0FBa0MsS0FBM0U7O0FBQ0EsTUFBSXNFLElBQUksR0FBRzdVLFFBQVEsQ0FBQyxFQUFELEVBQUtnVixhQUFMLENBQW5COztBQUNBLE1BQUlDLFdBQUosRUFBaUI7QUFDYkosUUFBSSxDQUFDL1YsS0FBTCxHQUFhVCxzQkFBc0IsQ0FBQ3dXLElBQUksQ0FBQy9WLEtBQU4sQ0FBbkM7QUFDSDs7QUFDRCxNQUFJc1MsUUFBUSxDQUFDakIsVUFBVCxJQUF1QndFLFdBQVcsQ0FBQ2xGLGFBQXZDLEVBQXNEO0FBQ2xEb0YsUUFBSSxDQUFDL1YsS0FBTCxHQUFhO0FBQ1Q5WixXQUFLLEVBQUVtYSxPQUFPLENBQUNqVSxHQUFSLENBQVkycEIsSUFBSSxDQUFDL1YsS0FBTCxDQUFXOVosS0FBdkIsRUFBOEJvc0IsUUFBUSxDQUFDakIsVUFBdkMsQ0FERTtBQUVUbHJCLFNBQUcsRUFBRWthLE9BQU8sQ0FBQ2pVLEdBQVIsQ0FBWTJwQixJQUFJLENBQUMvVixLQUFMLENBQVc3WixHQUF2QixFQUE0Qm1zQixRQUFRLENBQUNqQixVQUFyQztBQUZJLEtBQWI7QUFJSDs7QUFDRCxNQUFJaUIsUUFBUSxDQUFDcEIsVUFBVCxJQUF1QjJFLFdBQVcsQ0FBQ2pGLGdCQUF2QyxFQUF5RDtBQUNyRG1GLFFBQUksQ0FBQy9WLEtBQUwsR0FBYTtBQUNUOVosV0FBSyxFQUFFbWEsT0FBTyxDQUFDalUsR0FBUixDQUFZMnBCLElBQUksQ0FBQy9WLEtBQUwsQ0FBVzlaLEtBQXZCLEVBQThCb3NCLFFBQVEsQ0FBQ3BCLFVBQXZDLENBREU7QUFFVC9xQixTQUFHLEVBQUU0dkIsSUFBSSxDQUFDL1YsS0FBTCxDQUFXN1o7QUFGUCxLQUFiO0FBSUg7O0FBQ0QsTUFBSW1zQixRQUFRLENBQUNkLFFBQVQsSUFBcUJxRSxXQUFXLENBQUNqRixnQkFBckMsRUFBdUQ7QUFDbkRtRixRQUFJLENBQUMvVixLQUFMLEdBQWE7QUFDVDlaLFdBQUssRUFBRTZ2QixJQUFJLENBQUMvVixLQUFMLENBQVc5WixLQURUO0FBRVRDLFNBQUcsRUFBRWthLE9BQU8sQ0FBQ2pVLEdBQVIsQ0FBWTJwQixJQUFJLENBQUMvVixLQUFMLENBQVc3WixHQUF2QixFQUE0Qm1zQixRQUFRLENBQUNkLFFBQXJDO0FBRkksS0FBYjtBQUlIOztBQUNELE1BQUk0RSxRQUFKLEVBQWM7QUFDVkwsUUFBSSxDQUFDL1YsS0FBTCxHQUFhO0FBQ1Q5WixXQUFLLEVBQUU2dkIsSUFBSSxDQUFDL1YsS0FBTCxDQUFXOVosS0FEVDtBQUVUQyxTQUFHLEVBQUV4RCxRQUFRLENBQUMwekIsa0JBQVQsQ0FBNEJsVSxRQUFRLENBQUNOLE1BQXJDLEVBQTZDa1UsSUFBSSxDQUFDL1YsS0FBTCxDQUFXOVosS0FBeEQ7QUFGSSxLQUFiO0FBSUgsR0EvQjRCLENBZ0M3QjtBQUNBOzs7QUFDQSxNQUFJaWMsUUFBUSxDQUFDTixNQUFiLEVBQXFCO0FBQ2pCa1UsUUFBSSxDQUFDL1YsS0FBTCxHQUFhO0FBQ1Q5WixXQUFLLEVBQUUrTixVQUFVLENBQUM4aEIsSUFBSSxDQUFDL1YsS0FBTCxDQUFXOVosS0FBWixDQURSO0FBRVRDLFNBQUcsRUFBRThOLFVBQVUsQ0FBQzhoQixJQUFJLENBQUMvVixLQUFMLENBQVc3WixHQUFaO0FBRk4sS0FBYjtBQUlILEdBdkM0QixDQXdDN0I7OztBQUNBLE1BQUk0dkIsSUFBSSxDQUFDL1YsS0FBTCxDQUFXN1osR0FBWCxHQUFpQjR2QixJQUFJLENBQUMvVixLQUFMLENBQVc5WixLQUFoQyxFQUF1QztBQUNuQzZ2QixRQUFJLENBQUMvVixLQUFMLENBQVc3WixHQUFYLEdBQWlCeEQsUUFBUSxDQUFDMHpCLGtCQUFULENBQTRCbFUsUUFBUSxDQUFDTixNQUFyQyxFQUE2Q2tVLElBQUksQ0FBQy9WLEtBQUwsQ0FBVzlaLEtBQXhELENBQWpCO0FBQ0g7O0FBQ0QsU0FBTzZ2QixJQUFQO0FBQ0g7O0FBRUQsU0FBU08sZ0JBQVQsQ0FBMkJ4UyxVQUEzQixFQUF1Q3lTLE1BQXZDLEVBQStDOUQsWUFBL0MsRUFBNkQrRCxXQUE3RCxFQUEwRTd6QixRQUExRSxFQUFvRjtBQUNoRixVQUFRNHpCLE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxnQkFBTDtBQUF1QjtBQUNuQixhQUFPeXhCLGdCQUFnQixDQUFDM1MsVUFBRCxFQUFhMk8sWUFBWSxDQUFDOEQsTUFBTSxDQUFDM1MsUUFBUixDQUF6QixFQUE0QzJTLE1BQU0sQ0FBQ0csT0FBbkQsRUFBNERILE1BQU0sQ0FBQ0ksVUFBbkUsRUFBK0VKLE1BQU0sQ0FBQzVTLFNBQXRGLEVBQWlHaGhCLFFBQWpHLENBQXZCOztBQUNKLFNBQUssWUFBTDtBQUFtQjtBQUNmLGFBQU9pMEIsUUFBUSxDQUFDOVMsVUFBRCxFQUFheVMsTUFBTSxDQUFDelMsVUFBcEIsRUFBZ0M7QUFDL0MwUyxpQkFBVyxHQUFHQSxXQUFXLENBQUNLLFdBQWYsR0FBNkIsSUFEekIsRUFDK0JsMEIsUUFEL0IsQ0FBZjs7QUFFSixTQUFLLGNBQUw7QUFBcUI7QUFDakIsYUFBTzJqQixnQkFBZ0IsQ0FBQ3hDLFVBQUQsRUFBYXlTLE1BQU0sQ0FBQ3pTLFVBQXBCLENBQXZCOztBQUNKLFNBQUssTUFBTCxDQVJKLENBUWlCOztBQUNiLFNBQUssTUFBTDtBQUNBLFNBQUssVUFBTDtBQUNBLFNBQUssZUFBTDtBQUNJLFVBQUkwUyxXQUFKLEVBQWlCO0FBQ2IsZUFBTzdSLGVBQWUsQ0FBQ2IsVUFBRCxFQUFhMFMsV0FBVyxDQUFDSyxXQUF6QixFQUFzQ2wwQixRQUF0QyxDQUF0QjtBQUNILE9BRkQsTUFHSztBQUNELGVBQU9taEIsVUFBUDtBQUNIOztBQUNMLFNBQUssaUJBQUw7QUFDSSxhQUFPZ1QsV0FBVyxDQUFDaFQsVUFBRCxFQUFheVMsTUFBTSxDQUFDUSxVQUFwQixFQUFnQ3AwQixRQUFRLENBQUMwZCxPQUF6QyxDQUFsQjs7QUFDSixTQUFLLGVBQUw7QUFDSSxhQUFPMlcsc0JBQXNCLENBQUNsVCxVQUFELEVBQWF5UyxNQUFNLENBQUM3UixVQUFwQixFQUFnQzZSLE1BQU0sQ0FBQ2pFLFFBQXZDLEVBQWlEaUUsTUFBTSxDQUFDaEUsT0FBeEQsRUFBaUU1dkIsUUFBakUsQ0FBN0I7O0FBQ0osU0FBSyx3QkFBTDtBQUNJLGFBQU9zMEIsZ0JBQWdCLENBQUNuVCxVQUFELEVBQWF5UyxNQUFNLENBQUM5UixTQUFwQixDQUF2Qjs7QUFDSixTQUFLLGtCQUFMO0FBQ0ksYUFBT2Esb0JBQW9CLENBQUN4QixVQUFELEVBQWEsVUFBVTNCLFFBQVYsRUFBb0I7QUFDeEQsZUFBT0EsUUFBUSxDQUFDb0MsS0FBVCxLQUFtQmdTLE1BQU0sQ0FBQ2hTLEtBQWpDO0FBQ0gsT0FGMEIsQ0FBM0I7O0FBR0osU0FBSyxxQkFBTDtBQUNJLGFBQU8yUyx1QkFBdUIsQ0FBQ3BULFVBQUQsRUFBYXlTLE1BQU0sQ0FBQzNTLFFBQXBCLENBQTlCOztBQUNKLFNBQUssMEJBQUw7QUFDSSxhQUFPMEIsb0JBQW9CLENBQUN4QixVQUFELEVBQWEsVUFBVTNCLFFBQVYsRUFBb0I7QUFDeEQsZUFBTyxDQUFDQSxRQUFRLENBQUN5QixRQUFqQixDQUR3RCxDQUM3QjtBQUM5QixPQUYwQixDQUEzQjs7QUFHSixTQUFLLG1CQUFMO0FBQ0ksYUFBT0cscUJBQXFCLEVBQTVCOztBQUNKLFNBQUssY0FBTDtBQUNJLGFBQU87QUFDSE0sWUFBSSxFQUFFUCxVQUFVLENBQUNPLElBRGQ7QUFFSEksaUJBQVMsRUFBRVgsVUFBVSxDQUFDVztBQUZuQixPQUFQOztBQUlKO0FBQ0ksYUFBT1gsVUFBUDtBQTFDUjtBQTRDSDs7QUFDRCxTQUFTMlMsZ0JBQVQsQ0FBMEIzUyxVQUExQixFQUFzQytCLFdBQXRDLEVBQW1ENlEsT0FBbkQsRUFBNERDLFVBQTVELEVBQXdFaFQsU0FBeEUsRUFBbUZoaEIsUUFBbkYsRUFBNkY7QUFDekYsTUFBSWtqQixXQUFXLElBQUk7QUFDZjZRLFNBQU8sS0FBSzdRLFdBQVcsQ0FBQ3NSLGFBRDVCLENBQzBDO0FBRDFDLElBRUU7QUFDRSxVQUFJQyxNQUFNLEdBQUcxVCxXQUFXLENBQUNrQyxrQkFBa0IsQ0FBQ2pDLFNBQUQsRUFBWWtDLFdBQVosRUFBeUJsakIsUUFBekIsQ0FBbkIsRUFBdURrakIsV0FBVyxDQUFDakMsUUFBbkUsRUFBNkVqaEIsUUFBN0UsQ0FBeEI7O0FBQ0EsVUFBSWcwQixVQUFKLEVBQWdCO0FBQ1pTLGNBQU0sR0FBR3pTLGVBQWUsQ0FBQ3lTLE1BQUQsRUFBU1QsVUFBVCxFQUFxQmgwQixRQUFyQixDQUF4QjtBQUNIOztBQUNELGFBQU8yakIsZ0JBQWdCLENBQUM0USx1QkFBdUIsQ0FBQ3BULFVBQUQsRUFBYStCLFdBQVcsQ0FBQ2pDLFFBQXpCLENBQXhCLEVBQTREd1QsTUFBNUQsQ0FBdkI7QUFDSDs7QUFDRCxTQUFPdFQsVUFBUDtBQUNIOztBQUNELFNBQVM4UyxRQUFULENBQWtCOVMsVUFBbEIsRUFBOEJzVCxNQUE5QixFQUFzQ0MsV0FBdEMsRUFBbUQxMEIsUUFBbkQsRUFBNkQ7QUFDekQsTUFBSTAwQixXQUFKLEVBQWlCO0FBQ2JELFVBQU0sR0FBR3pTLGVBQWUsQ0FBQ3lTLE1BQUQsRUFBU0MsV0FBVCxFQUFzQjEwQixRQUF0QixDQUF4QjtBQUNIOztBQUNELFNBQU8yakIsZ0JBQWdCLENBQUN4QyxVQUFELEVBQWFzVCxNQUFiLENBQXZCO0FBQ0g7O0FBQ0QsU0FBU04sV0FBVCxDQUFxQmhULFVBQXJCLEVBQWlDaVQsVUFBakMsRUFBNkNPLFVBQTdDLEVBQXlEO0FBQ3JELE1BQUlqVCxJQUFJLEdBQUdQLFVBQVUsQ0FBQ08sSUFBdEI7QUFDQSxNQUFJSSxTQUFTLEdBQUd0QixPQUFPLENBQUNXLFVBQVUsQ0FBQ1csU0FBWixFQUF1QixVQUFVRCxRQUFWLEVBQW9CO0FBQzlELFFBQUlGLEdBQUcsR0FBR0QsSUFBSSxDQUFDRyxRQUFRLENBQUNELEtBQVYsQ0FBZDs7QUFDQSxRQUFJRCxHQUFHLENBQUN6QyxNQUFKLElBQWN5QyxHQUFHLENBQUNoQyxZQUF0QixFQUFvQztBQUNoQyxhQUFPa0MsUUFBUCxDQURnQyxDQUNmO0FBQ3BCLEtBRkQsTUFHSztBQUNELGFBQU90RCxRQUFRLENBQUMsRUFBRCxFQUFLc0QsUUFBTCxFQUFlO0FBQUV4RSxhQUFLLEVBQUU7QUFDL0I5WixlQUFLLEVBQUVveEIsVUFBVSxDQUFDM1EsWUFBWCxDQUF3Qm9RLFVBQVUsQ0FBQ3JFLE1BQVgsQ0FBa0JsTyxRQUFRLENBQUN4RSxLQUFULENBQWU5WixLQUFqQyxFQUF3Q3NlLFFBQVEsQ0FBQzJOLGNBQWpELENBQXhCLENBRHdCO0FBRS9CaHNCLGFBQUcsRUFBRW14QixVQUFVLENBQUMzUSxZQUFYLENBQXdCb1EsVUFBVSxDQUFDckUsTUFBWCxDQUFrQmxPLFFBQVEsQ0FBQ3hFLEtBQVQsQ0FBZTdaLEdBQWpDLEVBQXNDcWUsUUFBUSxDQUFDNE4sWUFBL0MsQ0FBeEI7QUFGMEIsU0FBVDtBQUd2QkQsc0JBQWMsRUFBRW1GLFVBQVUsQ0FBQ0MsZ0JBQVgsR0FBOEIsSUFBOUIsR0FBcUMvUyxRQUFRLENBQUMyTixjQUh2QztBQUd1REMsb0JBQVksRUFBRWtGLFVBQVUsQ0FBQ0MsZ0JBQVgsR0FBOEIsSUFBOUIsR0FBcUMvUyxRQUFRLENBQUM0TjtBQUhuSCxPQUFmLENBQWY7QUFJSDtBQUNKLEdBWHNCLENBQXZCO0FBWUEsU0FBTztBQUFFL04sUUFBSSxFQUFFQSxJQUFSO0FBQWNJLGFBQVMsRUFBRUE7QUFBekIsR0FBUDtBQUNIOztBQUNELFNBQVN1UyxzQkFBVCxDQUFnQ2xULFVBQWhDLEVBQTRDWSxVQUE1QyxFQUF3RDROLFFBQXhELEVBQWtFQyxPQUFsRSxFQUEyRTV2QixRQUEzRSxFQUFxRjtBQUNqRixNQUFJNjBCLFFBQVEsR0FBR3JTLGlCQUFpQixDQUFDckIsVUFBRCxFQUFhWSxVQUFiLENBQWhDO0FBQ0EsTUFBSThRLGVBQWUsR0FBR2pELE9BQU8sR0FDekI7QUFBRSxRQUFJO0FBQ0U1QixtQkFBYSxFQUFFLElBRGpCO0FBRUVDLHNCQUFnQixFQUFFLElBRnBCO0FBR0VnQyxpQkFBVyxFQUFFLEVBSGY7QUFJRUMsYUFBTyxFQUFFLElBSlg7QUFLRUMsWUFBTSxFQUFFLEVBTFY7QUFNRXJDLHFCQUFlLEVBQUUsRUFObkI7QUFPRUMsaUJBQVcsRUFBRSxFQVBmO0FBUUVxQyxlQUFTLEVBQUUsRUFSYjtBQVNFQyxnQkFBVSxFQUFFO0FBVGQ7QUFBTixHQUR5QixHQVl6QnJ3QixRQUFRLENBQUN1d0IsWUFaYjtBQWFBc0UsVUFBUSxHQUFHakMseUJBQXlCLENBQUNpQyxRQUFELEVBQVdoQyxlQUFYLEVBQTRCbEQsUUFBNUIsRUFBc0MzdkIsUUFBdEMsQ0FBcEM7QUFDQSxTQUFPMmpCLGdCQUFnQixDQUFDeEMsVUFBRCxFQUFhMFQsUUFBYixDQUF2QjtBQUNIOztBQUNELFNBQVNOLHVCQUFULENBQWlDcFQsVUFBakMsRUFBNkNGLFFBQTdDLEVBQXVEO0FBQ25ELFNBQU8wQixvQkFBb0IsQ0FBQ3hCLFVBQUQsRUFBYSxVQUFVM0IsUUFBVixFQUFvQjtBQUN4RCxXQUFPQSxRQUFRLENBQUN5QixRQUFULEtBQXNCQSxRQUE3QjtBQUNILEdBRjBCLENBQTNCO0FBR0gsQyxDQUNEOzs7QUFDQSxTQUFTcVQsZ0JBQVQsQ0FBMEJuVCxVQUExQixFQUFzQzJULFFBQXRDLEVBQWdEO0FBQzVDLFNBQU87QUFDSHBULFFBQUksRUFBRVAsVUFBVSxDQUFDTyxJQURkO0FBRUhJLGFBQVMsRUFBRXpCLFVBQVUsQ0FBQ2MsVUFBVSxDQUFDVyxTQUFaLEVBQXVCLFVBQVVELFFBQVYsRUFBb0I7QUFDNUQsYUFBTyxDQUFDaVQsUUFBUSxDQUFDalQsUUFBUSxDQUFDRSxVQUFWLENBQWhCO0FBQ0gsS0FGb0I7QUFGbEIsR0FBUDtBQU1ILEMsQ0FFRDtBQUNBOzs7QUFDQSxTQUFTZ1Qsa0JBQVQsQ0FBNEJDLFdBQTVCLEVBQXlDaDFCLFFBQXpDLEVBQW1EO0FBQy9DLFNBQU9pMUIsZUFBZSxDQUFDO0FBQUVDLGFBQVMsRUFBRUY7QUFBYixHQUFELEVBQTZCaDFCLFFBQTdCLENBQXRCLENBRCtDLENBQ2U7QUFDakU7O0FBQ0QsU0FBU20xQixvQkFBVCxDQUE4QkMsYUFBOUIsRUFBNkNwMUIsUUFBN0MsRUFBdUQ7QUFDbkQsU0FBT2kxQixlQUFlLENBQUM7QUFBRUcsaUJBQWEsRUFBRUE7QUFBakIsR0FBRCxFQUFtQ3AxQixRQUFuQyxDQUF0QjtBQUNIOztBQUNELFNBQVNpMUIsZUFBVCxDQUF5QkksUUFBekIsRUFBbUNyMUIsUUFBbkMsRUFBNkM7QUFDekMsTUFBSTJ4QixJQUFJLEdBQUczeEIsUUFBUSxDQUFDMnhCLElBQXBCOztBQUNBLE1BQUlob0IsS0FBSyxHQUFHNFUsUUFBUSxDQUFDO0FBQUUrVyxpQkFBYSxFQUFFM0QsSUFBSSxHQUFHQSxJQUFJLENBQUNob0IsS0FBTCxDQUFXMnJCLGFBQWQsR0FBOEJsVSxxQkFBcUIsRUFBeEU7QUFBNEVnVSxpQkFBYSxFQUFFLEVBQTNGO0FBQStGalUsY0FBVSxFQUFFbmhCLFFBQVEsQ0FBQzZ2QixLQUFULENBQWUxTyxVQUExSDtBQUFzSW9QLGdCQUFZLEVBQUV2d0IsUUFBUSxDQUFDdXdCLFlBQTdKO0FBQTJLZ0Ysa0JBQWMsRUFBRSxFQUEzTDtBQUErTEwsYUFBUyxFQUFFLElBQTFNO0FBQWdOTSxlQUFXLEVBQUU7QUFBN04sR0FBRCxFQUFzT0gsUUFBdE8sQ0FBcEI7O0FBQ0EsU0FBTyxDQUFDcjFCLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0Qm9ULFlBQTVCLElBQTRDQSxZQUE3QyxFQUEyRDlyQixLQUEzRCxFQUFrRTNKLFFBQWxFLENBQVA7QUFDSDs7QUFDRCxTQUFTeTFCLFlBQVQsQ0FBc0I1RixLQUF0QixFQUE2Qjd2QixRQUE3QixFQUF1QzAxQixZQUF2QyxFQUFxREMsWUFBckQsRUFBbUU7QUFDL0QsTUFBSUQsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFBRUEsZ0JBQVksR0FBRyxFQUFmO0FBQW9COztBQUNuRCxNQUFJN0YsS0FBSyxDQUFDcUYsU0FBTixJQUFtQixDQUFDVSx1QkFBdUIsQ0FBQy9GLEtBQUQsRUFBUTd2QixRQUFSLEVBQWtCMDFCLFlBQWxCLEVBQWdDQyxZQUFoQyxDQUEvQyxFQUE4RjtBQUMxRixXQUFPLEtBQVA7QUFDSDs7QUFDRCxNQUFJOUYsS0FBSyxDQUFDdUYsYUFBTixJQUF1QixDQUFDUyx5QkFBeUIsQ0FBQ2hHLEtBQUQsRUFBUTd2QixRQUFSLEVBQWtCMDFCLFlBQWxCLEVBQWdDQyxZQUFoQyxDQUFyRCxFQUFvRztBQUNoRyxXQUFPLEtBQVA7QUFDSDs7QUFDRCxTQUFPLElBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU0MsdUJBQVQsQ0FBaUMvRixLQUFqQyxFQUF3Qzd2QixRQUF4QyxFQUFrRDAxQixZQUFsRCxFQUFnRUMsWUFBaEUsRUFBOEU7QUFDMUUsTUFBSVgsV0FBVyxHQUFHbkYsS0FBSyxDQUFDcUYsU0FBeEIsQ0FEMEUsQ0FDdkM7O0FBQ25DLE1BQUlZLGlCQUFpQixHQUFHZCxXQUFXLENBQUNlLGFBQXBDO0FBQ0EsTUFBSUMsV0FBVyxHQUFHRixpQkFBaUIsQ0FBQ3BVLElBQXBDO0FBQ0EsTUFBSXVVLGdCQUFnQixHQUFHSCxpQkFBaUIsQ0FBQ2hVLFNBQXpDO0FBQ0EsTUFBSW9VLGNBQWMsR0FBR3BGLGVBQWUsQ0FBQ2tGLFdBQUQsRUFBY2hCLFdBQVcsQ0FBQ21CLE9BQVosR0FDOUN0RyxLQUFLLENBQUNVLFlBRHdDLEdBRTlDO0FBQUUsUUFBSXZ3QixRQUFRLENBQUNvMkI7QUFBZixHQUZnQyxDQUVDO0FBRkQsR0FBcEM7O0FBSUEsTUFBSVQsWUFBSixFQUFrQjtBQUNkTyxrQkFBYyxHQUFHMVYsT0FBTyxDQUFDMFYsY0FBRCxFQUFpQlAsWUFBakIsQ0FBeEI7QUFDSDs7QUFDRCxNQUFJVSxlQUFlLEdBQUcvQixnQkFBZ0IsQ0FBQ3pFLEtBQUssQ0FBQzFPLFVBQVAsRUFBbUI2VCxXQUFXLENBQUNzQixjQUFaLENBQTJCeFUsU0FBOUMsQ0FBdEMsQ0FaMEUsQ0FZc0I7O0FBQ2hHLE1BQUl5VSxTQUFTLEdBQUdGLGVBQWUsQ0FBQzNVLElBQWhDO0FBQ0EsTUFBSThVLGNBQWMsR0FBR0gsZUFBZSxDQUFDdlUsU0FBckM7QUFDQSxNQUFJMlUsWUFBWSxHQUFHM0YsZUFBZSxDQUFDeUYsU0FBRCxFQUFZMUcsS0FBSyxDQUFDVSxZQUFsQixDQUFsQzs7QUFDQSxPQUFLLElBQUltRyxpQkFBVCxJQUE4QlQsZ0JBQTlCLEVBQWdEO0FBQzVDLFFBQUlVLGVBQWUsR0FBR1YsZ0JBQWdCLENBQUNTLGlCQUFELENBQXRDO0FBQ0EsUUFBSUUsWUFBWSxHQUFHRCxlQUFlLENBQUN0WixLQUFuQztBQUNBLFFBQUl3WixhQUFhLEdBQUdYLGNBQWMsQ0FBQ1MsZUFBZSxDQUFDL1UsS0FBakIsQ0FBbEM7QUFDQSxRQUFJa1YsVUFBVSxHQUFHZCxXQUFXLENBQUNXLGVBQWUsQ0FBQy9VLEtBQWpCLENBQTVCLENBSjRDLENBSzVDOztBQUNBLFFBQUksQ0FBQ21WLGtCQUFrQixDQUFDRixhQUFhLENBQUM1RyxXQUFmLEVBQTRCMkcsWUFBNUIsRUFBMENQLGVBQTFDLEVBQTJEeEcsS0FBSyxDQUFDeUYsYUFBakUsRUFBZ0Z0MUIsUUFBaEYsQ0FBdkIsRUFBa0g7QUFDOUcsYUFBTyxLQUFQO0FBQ0gsS0FSMkMsQ0FTNUM7OztBQUNBLFFBQUlnM0IsV0FBVyxHQUFHaDNCLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsY0FBYixDQUFsQjs7QUFDQSxRQUFJLE9BQU80VCxXQUFQLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ25DQSxpQkFBVyxHQUFHLElBQWQ7QUFDSDs7QUFDRCxTQUFLLElBQUlDLGVBQVQsSUFBNEJULGNBQTVCLEVBQTRDO0FBQ3hDLFVBQUlVLGFBQWEsR0FBR1YsY0FBYyxDQUFDUyxlQUFELENBQWxDLENBRHdDLENBRXhDOztBQUNBLFVBQUlwUyxlQUFlLENBQUMrUixZQUFELEVBQWVNLGFBQWEsQ0FBQzdaLEtBQTdCLENBQW5CLEVBQXdEO0FBQ3BELFlBQUk4WixZQUFZLEdBQUdWLFlBQVksQ0FBQ1MsYUFBYSxDQUFDdFYsS0FBZixDQUFaLENBQWtDc08sT0FBckQsQ0FEb0QsQ0FFcEQ7O0FBQ0EsWUFBSWlILFlBQVksS0FBSyxLQUFqQixJQUEwQm5DLFdBQVcsQ0FBQ21CLE9BQTFDLEVBQW1EO0FBQy9DLGlCQUFPLEtBQVA7QUFDSDs7QUFDRCxZQUFJVSxhQUFhLENBQUMzRyxPQUFkLEtBQTBCLEtBQTlCLEVBQXFDO0FBQ2pDLGlCQUFPLEtBQVA7QUFDSDs7QUFDRCxZQUFJOEcsV0FBVyxJQUFJLENBQUNBLFdBQVcsQ0FBQyxJQUFJOUosUUFBSixDQUFhbHRCLFFBQWIsRUFBdUJ1MkIsU0FBUyxDQUFDVyxhQUFhLENBQUN0VixLQUFmLENBQWhDLEVBQXVEc1YsYUFBdkQsQ0FBRCxFQUF3RTtBQUN2RyxZQUFJaEssUUFBSixDQUFhbHRCLFFBQWIsRUFBdUI4MkIsVUFBdkIsRUFBbUNILGVBQW5DLENBRCtCLENBQ3FCO0FBRHJCLFNBQS9CLEVBRUc7QUFDQyxpQkFBTyxLQUFQO0FBQ0g7QUFDSjtBQUNKLEtBaEMyQyxDQWlDNUM7OztBQUNBLFFBQUlTLGtCQUFrQixHQUFHcDNCLFFBQVEsQ0FBQzZ2QixLQUFULENBQWUxTyxVQUF4QyxDQWxDNEMsQ0FrQ1E7O0FBQ3BELFNBQUssSUFBSTdGLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUdtaUIsYUFBYSxDQUFDMUcsTUFBcEMsRUFBNEM3VSxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUFwRCxFQUE0RHVVLEVBQUUsRUFBOUQsRUFBa0U7QUFDOUQsVUFBSStiLFlBQVksR0FBRzNpQixFQUFFLENBQUM0RyxFQUFELENBQXJCOztBQUNBLFVBQUlnYyxlQUFlLEdBQUcvWSxRQUFRLENBQUMsRUFBRCxFQUFLbVgsWUFBTCxFQUFtQjtBQUFFclksYUFBSyxFQUFFc1osZUFBZSxDQUFDdFosS0FBekI7QUFBZ0M2QixjQUFNLEVBQUU0WCxVQUFVLENBQUM1WDtBQUFuRCxPQUFuQixDQUE5Qjs7QUFDQSxVQUFJcVksT0FBTyxHQUFHSCxrQkFBa0IsQ0FBQzFWLElBQW5CLENBQXdCb1YsVUFBVSxDQUFDbFYsS0FBbkMsQ0FBZDtBQUNBLFVBQUk0VixZQUFZLEdBQUdKLGtCQUFrQixDQUFDdFYsU0FBbkIsQ0FBNkI0VSxpQkFBN0IsQ0FBbkI7QUFDQSxVQUFJZSxRQUFRLEdBQUcsS0FBSyxDQUFwQjs7QUFDQSxVQUFJRixPQUFKLEVBQWE7QUFBRTtBQUNYRSxnQkFBUSxHQUFHLElBQUl2SyxRQUFKLENBQWFsdEIsUUFBYixFQUF1QnUzQixPQUF2QixFQUFnQ0MsWUFBaEMsQ0FBWDtBQUNILE9BRkQsTUFHSztBQUFFO0FBQ0hDLGdCQUFRLEdBQUcsSUFBSXZLLFFBQUosQ0FBYWx0QixRQUFiLEVBQXVCODJCLFVBQXZCLENBQVgsQ0FEQyxDQUM4QztBQUNsRDs7QUFDRCxVQUFJLENBQUNPLFlBQVksQ0FBQ3IzQixRQUFRLENBQUMwM0IsZ0JBQVQsQ0FBMEJKLGVBQTFCLENBQUQsRUFBNkNHLFFBQTdDLENBQWpCLEVBQXlFO0FBQ3JFLGVBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBUzVCLHlCQUFULENBQW1DaEcsS0FBbkMsRUFBMEM3dkIsUUFBMUMsRUFBb0QwMUIsWUFBcEQsRUFBa0VDLFlBQWxFLEVBQWdGO0FBQzVFLE1BQUlnQyxrQkFBa0IsR0FBRzlILEtBQUssQ0FBQzFPLFVBQS9CO0FBQ0EsTUFBSXlXLFlBQVksR0FBR0Qsa0JBQWtCLENBQUNqVyxJQUF0QztBQUNBLE1BQUltVyxpQkFBaUIsR0FBR0Ysa0JBQWtCLENBQUM3VixTQUEzQztBQUNBLE1BQUlnVyxTQUFTLEdBQUdqSSxLQUFLLENBQUN1RixhQUF0QjtBQUNBLE1BQUkyQyxjQUFjLEdBQUdELFNBQVMsQ0FBQ3phLEtBQS9CO0FBQ0EsTUFBSStZLGVBQWUsR0FBR3AyQixRQUFRLENBQUNvMkIsZUFBL0I7O0FBQ0EsTUFBSVQsWUFBSixFQUFrQjtBQUNkUyxtQkFBZSxHQUFHVCxZQUFZLENBQUNTLGVBQUQsQ0FBOUI7QUFDSCxHQVQyRSxDQVU1RTs7O0FBQ0EsTUFBSSxDQUFDVyxrQkFBa0IsQ0FBQ1gsZUFBZSxDQUFDbkcsV0FBakIsRUFBOEI4SCxjQUE5QixFQUE4Q0osa0JBQTlDLEVBQWtFOUgsS0FBSyxDQUFDeUYsYUFBeEUsRUFBdUZ0MUIsUUFBdkYsQ0FBdkIsRUFBeUg7QUFDckgsV0FBTyxLQUFQO0FBQ0gsR0FiMkUsQ0FjNUU7OztBQUNBLE1BQUlnM0IsV0FBVyxHQUFHaDNCLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsZUFBYixDQUFsQjs7QUFDQSxNQUFJLE9BQU80VCxXQUFQLEtBQXVCLFVBQTNCLEVBQXVDO0FBQ25DQSxlQUFXLEdBQUcsSUFBZDtBQUNIOztBQUNELE9BQUssSUFBSWdCLGtCQUFULElBQStCSCxpQkFBL0IsRUFBa0Q7QUFDOUMsUUFBSUksZ0JBQWdCLEdBQUdKLGlCQUFpQixDQUFDRyxrQkFBRCxDQUF4QyxDQUQ4QyxDQUU5Qzs7QUFDQSxRQUFJblQsZUFBZSxDQUFDa1QsY0FBRCxFQUFpQkUsZ0JBQWdCLENBQUM1YSxLQUFsQyxDQUFuQixFQUE2RDtBQUN6RCxVQUFJK1ksZUFBZSxDQUFDbEcsT0FBaEIsS0FBNEIsS0FBaEMsRUFBdUM7QUFDbkMsZUFBTyxLQUFQO0FBQ0g7O0FBQ0QsVUFBSThHLFdBQVcsSUFBSSxDQUFDQSxXQUFXLENBQUMsSUFBSTlKLFFBQUosQ0FBYWx0QixRQUFiLEVBQXVCNDNCLFlBQVksQ0FBQ0ssZ0JBQWdCLENBQUNyVyxLQUFsQixDQUFuQyxFQUE2RHFXLGdCQUE3RCxDQUFELENBQS9CLEVBQWlIO0FBQzdHLGVBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSixHQTlCMkUsQ0ErQjVFOzs7QUFDQSxPQUFLLElBQUkzYyxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHMGhCLGVBQWUsQ0FBQ2pHLE1BQXRDLEVBQThDN1UsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBdEQsRUFBOER1VSxFQUFFLEVBQWhFLEVBQW9FO0FBQ2hFLFFBQUk0YyxjQUFjLEdBQUd4akIsRUFBRSxDQUFDNEcsRUFBRCxDQUF2Qjs7QUFDQSxRQUFJNmMsWUFBWSxHQUFHNVosUUFBUSxDQUFDLEVBQUQsRUFBS21YLFlBQUwsRUFBbUJvQyxTQUFuQixDQUEzQjs7QUFDQSxRQUFJLENBQUNJLGNBQWMsQ0FBQ2w0QixRQUFRLENBQUMwM0IsZ0JBQVQsQ0FBMEJTLFlBQTFCLENBQUQsRUFBMEMsSUFBMUMsQ0FBbkIsRUFBb0U7QUFDaEUsYUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU3BCLGtCQUFULENBQTRCOUcsV0FBNUIsRUFBeUMyRyxZQUF6QyxFQUF1RFAsZUFBdkQsRUFBd0UrQix1QkFBeEUsRUFBaUdwNEIsUUFBakcsRUFBMkc7QUFDdkcsT0FBSyxJQUFJc2IsRUFBRSxHQUFHLENBQVQsRUFBWStjLGFBQWEsR0FBR3BJLFdBQWpDLEVBQThDM1UsRUFBRSxHQUFHK2MsYUFBYSxDQUFDdHhCLE1BQWpFLEVBQXlFdVUsRUFBRSxFQUEzRSxFQUErRTtBQUMzRSxRQUFJZ2QsVUFBVSxHQUFHRCxhQUFhLENBQUMvYyxFQUFELENBQTlCOztBQUNBLFFBQUksQ0FBQ2lkLHFCQUFxQixDQUFDQyxrQkFBa0IsQ0FBQ0YsVUFBRCxFQUFhMUIsWUFBYixFQUEyQlAsZUFBM0IsRUFBNEMrQix1QkFBNUMsRUFBcUVwNEIsUUFBckUsQ0FBbkIsRUFBbUc0MkIsWUFBbkcsQ0FBMUIsRUFBNEk7QUFDeEksYUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFTNEIsa0JBQVQsQ0FBNEJGLFVBQTVCLEVBQXdDMUIsWUFBeEMsRUFBc0Q7QUFDdERQLGVBREEsRUFDaUI7QUFDakIrQix1QkFGQSxFQUV5QjtBQUN6QnA0QixRQUhBLENBR1M7QUFIVCxFQUlFO0FBQ0UsTUFBSXM0QixVQUFVLEtBQUssZUFBbkIsRUFBb0M7QUFDaEMsV0FBT0csa0JBQWtCLENBQUN6VyxlQUFlLENBQUNvVyx1QkFBRCxFQUEwQnhCLFlBQTFCLEVBQXdDNTJCLFFBQXhDLENBQWhCLENBQXpCO0FBQ0gsR0FGRCxNQUdLLElBQUksT0FBT3M0QixVQUFQLEtBQXNCLFFBQTFCLEVBQW9DO0FBQUU7QUFDdkMsV0FBT0csa0JBQWtCLENBQUM5VixvQkFBb0IsQ0FBQzBULGVBQUQsRUFBa0IsVUFBVTdXLFFBQVYsRUFBb0I7QUFDaEYsYUFBT0EsUUFBUSxDQUFDd0QsT0FBVCxLQUFxQnNWLFVBQTVCO0FBQ0gsS0FGNkMsQ0FBckIsQ0FBekI7QUFHSCxHQUpJLE1BS0EsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFFBQXRCLElBQWtDQSxVQUF0QyxFQUFrRDtBQUFFO0FBQ3JELFdBQU9HLGtCQUFrQixDQUFDelcsZUFBZSxDQUFDc1csVUFBRCxFQUFhMUIsWUFBYixFQUEyQjUyQixRQUEzQixDQUFoQixDQUF6QjtBQUNIOztBQUNELFNBQU8sRUFBUCxDQVpGLENBWWE7QUFDZCxDLENBQ0Q7OztBQUNBLFNBQVN5NEIsa0JBQVQsQ0FBNEJ0WCxVQUE1QixFQUF3QztBQUNwQyxNQUFJVyxTQUFTLEdBQUdYLFVBQVUsQ0FBQ1csU0FBM0I7QUFDQSxNQUFJb0MsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsT0FBSyxJQUFJbkMsVUFBVCxJQUF1QkQsU0FBdkIsRUFBa0M7QUFDOUJvQyxVQUFNLENBQUNqYixJQUFQLENBQVk2WSxTQUFTLENBQUNDLFVBQUQsQ0FBVCxDQUFzQjFFLEtBQWxDO0FBQ0g7O0FBQ0QsU0FBTzZHLE1BQVA7QUFDSCxDLENBQ0Q7OztBQUNBLFNBQVNxVSxxQkFBVCxDQUErQkcsV0FBL0IsRUFBNEMxVCxVQUE1QyxFQUF3RDtBQUNwRCxPQUFLLElBQUkxSixFQUFFLEdBQUcsQ0FBVCxFQUFZcWQsYUFBYSxHQUFHRCxXQUFqQyxFQUE4Q3BkLEVBQUUsR0FBR3FkLGFBQWEsQ0FBQzV4QixNQUFqRSxFQUF5RXVVLEVBQUUsRUFBM0UsRUFBK0U7QUFDM0UsUUFBSXlKLFVBQVUsR0FBRzRULGFBQWEsQ0FBQ3JkLEVBQUQsQ0FBOUI7O0FBQ0EsUUFBSXdKLGtCQUFrQixDQUFDQyxVQUFELEVBQWFDLFVBQWIsQ0FBdEIsRUFBZ0Q7QUFDNUMsYUFBTyxJQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLEtBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBUzRULG1CQUFULENBQTZCdjVCLEtBQTdCLEVBQW9DVyxRQUFwQyxFQUE4QztBQUMxQyxNQUFJd0csS0FBSyxDQUFDa1QsT0FBTixDQUFjcmEsS0FBZCxDQUFKLEVBQTBCO0FBQ3RCLFdBQU8waEIsV0FBVyxDQUFDMWhCLEtBQUQsRUFBUSxFQUFSLEVBQVlXLFFBQVosRUFBc0IsSUFBdEIsQ0FBbEIsQ0FEc0IsQ0FDeUI7QUFDbEQsR0FGRCxNQUdLLElBQUksT0FBT1gsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBakMsRUFBd0M7QUFBRTtBQUMzQyxXQUFPMGhCLFdBQVcsQ0FBQyxDQUFDMWhCLEtBQUQsQ0FBRCxFQUFVLEVBQVYsRUFBY1csUUFBZCxFQUF3QixJQUF4QixDQUFsQixDQUR5QyxDQUNRO0FBQ3BELEdBRkksTUFHQSxJQUFJWCxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNwQixXQUFPbWIsTUFBTSxDQUFDbmIsS0FBRCxDQUFiO0FBQ0gsR0FGSSxNQUdBO0FBQ0QsV0FBTyxJQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTdzVCLFVBQVQsQ0FBb0Joa0IsQ0FBcEIsRUFBdUI7QUFDbkIsU0FBTyxDQUFDQSxDQUFDLEdBQUcsRUFBTCxFQUFTclcsT0FBVCxDQUFpQixJQUFqQixFQUF1QixPQUF2QixFQUNGQSxPQURFLENBQ00sSUFETixFQUNZLE1BRFosRUFFRkEsT0FGRSxDQUVNLElBRk4sRUFFWSxNQUZaLEVBR0ZBLE9BSEUsQ0FHTSxJQUhOLEVBR1ksUUFIWixFQUlGQSxPQUpFLENBSU0sSUFKTixFQUlZLFFBSlosRUFLRkEsT0FMRSxDQUtNLEtBTE4sRUFLYSxRQUxiLENBQVA7QUFNSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU3M2QixRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUN4QixNQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBQ0EsT0FBSyxJQUFJNVIsTUFBVCxJQUFtQjJSLFFBQW5CLEVBQTZCO0FBQ3pCLFFBQUlqOEIsR0FBRyxHQUFHaThCLFFBQVEsQ0FBQzNSLE1BQUQsQ0FBbEI7O0FBQ0EsUUFBSXRxQixHQUFHLElBQUksSUFBUCxJQUFlQSxHQUFHLEtBQUssRUFBM0IsRUFBK0I7QUFDM0JrOEIsZ0JBQVUsQ0FBQy92QixJQUFYLENBQWdCbWUsTUFBTSxHQUFHLEdBQVQsR0FBZXRxQixHQUEvQjtBQUNIO0FBQ0o7O0FBQ0QsU0FBT2s4QixVQUFVLENBQUM3TyxJQUFYLENBQWdCLEdBQWhCLENBQVA7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBUzhPLFVBQVQsQ0FBb0J0ekIsS0FBcEIsRUFBMkI7QUFDdkIsTUFBSW1rQixLQUFLLEdBQUcsRUFBWjs7QUFDQSxPQUFLLElBQUlZLE1BQVQsSUFBbUIva0IsS0FBbkIsRUFBMEI7QUFDdEIsUUFBSTdJLEdBQUcsR0FBRzZJLEtBQUssQ0FBQytrQixNQUFELENBQWY7O0FBQ0EsUUFBSTV0QixHQUFHLElBQUksSUFBWCxFQUFpQjtBQUNiZ3RCLFdBQUssQ0FBQzdnQixJQUFOLENBQVd5aEIsTUFBTSxHQUFHLElBQVQsR0FBZ0JtTyxVQUFVLENBQUMvN0IsR0FBRCxDQUExQixHQUFrQyxHQUE3QztBQUNIO0FBQ0o7O0FBQ0QsU0FBT2d0QixLQUFLLENBQUNLLElBQU4sQ0FBVyxHQUFYLENBQVA7QUFDSDs7QUFDRCxTQUFTK08sY0FBVCxDQUF3QkMsR0FBeEIsRUFBNkI7QUFDekIsTUFBSTN5QixLQUFLLENBQUNrVCxPQUFOLENBQWN5ZixHQUFkLENBQUosRUFBd0I7QUFDcEIsV0FBT0EsR0FBUDtBQUNILEdBRkQsTUFHSyxJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUM5QixXQUFPQSxHQUFHLENBQUMxZixLQUFKLENBQVUsS0FBVixDQUFQO0FBQ0gsR0FGSSxNQUdBO0FBQ0QsV0FBTyxFQUFQO0FBQ0g7QUFDSjs7QUFFRCxJQUFJbVUsdUJBQXVCLEdBQUc7QUFDMUJ2c0IsVUFBUSxFQUFFc2IsT0FEZ0I7QUFFMUJxUixlQUFhLEVBQUVyUixPQUZXO0FBRzFCc1Isa0JBQWdCLEVBQUV0UixPQUhRO0FBSTFCMmIsWUFBVSxFQUFFLElBSmM7QUFLMUJwSSxTQUFPLEVBQUUsSUFMaUI7QUFNMUJrSixPQUFLLEVBQUUsSUFObUI7QUFPMUIvekIsV0FBUyxFQUFFNnpCLGNBUGU7QUFRMUI3SSxZQUFVLEVBQUU2SSxjQVJjO0FBUzFCejFCLE9BQUssRUFBRStXLE1BVG1CO0FBVTFCc1QsaUJBQWUsRUFBRXRULE1BVlM7QUFXMUJ1VCxhQUFXLEVBQUV2VCxNQVhhO0FBWTFCNFYsV0FBUyxFQUFFNVY7QUFaZSxDQUE5Qjs7QUFjQSxTQUFTNmUsc0JBQVQsQ0FBZ0NuZCxRQUFoQyxFQUEwQ2xjLFFBQTFDLEVBQW9EOGUsU0FBcEQsRUFBK0Q7QUFDM0QsTUFBSW5WLEtBQUssR0FBR3NTLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXMFIsdUJBQVgsRUFBb0MsRUFBcEMsRUFBd0M5TyxTQUF4QyxDQUF2QjtBQUNBLE1BQUl3WixVQUFVLEdBQUdNLG1CQUFtQixDQUFDanZCLEtBQUssQ0FBQzJ1QixVQUFQLEVBQW1CdDRCLFFBQW5CLENBQXBDO0FBQ0EsU0FBTztBQUNIZ3VCLGlCQUFhLEVBQUVya0IsS0FBSyxDQUFDcWtCLGFBQU4sSUFBdUIsSUFBdkIsR0FBOEJya0IsS0FBSyxDQUFDcWtCLGFBQXBDLEdBQW9EcmtCLEtBQUssQ0FBQ3RJLFFBRHRFO0FBRUg0c0Isb0JBQWdCLEVBQUV0a0IsS0FBSyxDQUFDc2tCLGdCQUFOLElBQTBCLElBQTFCLEdBQWlDdGtCLEtBQUssQ0FBQ3NrQixnQkFBdkMsR0FBMER0a0IsS0FBSyxDQUFDdEksUUFGL0U7QUFHSDR1QixlQUFXLEVBQUVxSSxVQUFVLElBQUksSUFBZCxHQUFxQixDQUFDQSxVQUFELENBQXJCLEdBQW9DLEVBSDlDO0FBSUhwSSxXQUFPLEVBQUV2bUIsS0FBSyxDQUFDdW1CLE9BSlo7QUFLSEMsVUFBTSxFQUFFeG1CLEtBQUssQ0FBQ3l2QixLQUFOLElBQWUsSUFBZixHQUFzQixDQUFDenZCLEtBQUssQ0FBQ3l2QixLQUFQLENBQXRCLEdBQXNDLEVBTDNDO0FBTUh0TCxtQkFBZSxFQUFFbmtCLEtBQUssQ0FBQ21rQixlQUFOLElBQXlCbmtCLEtBQUssQ0FBQ2xHLEtBTjdDO0FBT0hzcUIsZUFBVyxFQUFFcGtCLEtBQUssQ0FBQ29rQixXQUFOLElBQXFCcGtCLEtBQUssQ0FBQ2xHLEtBUHJDO0FBUUgyc0IsYUFBUyxFQUFFem1CLEtBQUssQ0FBQ3ltQixTQVJkO0FBU0hDLGNBQVUsRUFBRTFtQixLQUFLLENBQUMwbUIsVUFBTixDQUFpQnZoQixNQUFqQixDQUF3Qm5GLEtBQUssQ0FBQ3RFLFNBQTlCO0FBVFQsR0FBUDtBQVdIOztBQUNELFNBQVNpMEIsb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQXNDQyxTQUF0QyxFQUFpRHg1QixRQUFqRCxFQUEyRDhlLFNBQTNELEVBQXNFO0FBQ2xFLE1BQUkyYSxXQUFXLEdBQUcsRUFBbEI7QUFDQSxNQUFJQyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxPQUFLLElBQUluZCxHQUFULElBQWdCcVIsdUJBQWhCLEVBQXlDO0FBQ3JDLFFBQUkrTCxTQUFTLEdBQUdKLE1BQU0sR0FBRzdlLHFCQUFxQixDQUFDNkIsR0FBRCxDQUE5QztBQUNBa2QsZUFBVyxDQUFDbGQsR0FBRCxDQUFYLEdBQW1CaWQsU0FBUyxDQUFDRyxTQUFELENBQTVCO0FBQ0FELFlBQVEsQ0FBQ0MsU0FBRCxDQUFSLEdBQXNCLElBQXRCO0FBQ0g7O0FBQ0QsTUFBSUosTUFBTSxLQUFLLE9BQWYsRUFBd0I7QUFDcEJFLGVBQVcsQ0FBQ3A0QixRQUFaLEdBQXVCbTRCLFNBQVMsQ0FBQ240QixRQUFqQyxDQURvQixDQUN1QjtBQUM5Qzs7QUFDRCxNQUFJeWQsU0FBSixFQUFlO0FBQ1gsU0FBSyxJQUFJdkMsR0FBVCxJQUFnQmlkLFNBQWhCLEVBQTJCO0FBQ3ZCLFVBQUksQ0FBQ0UsUUFBUSxDQUFDbmQsR0FBRCxDQUFiLEVBQW9CO0FBQ2hCdUMsaUJBQVMsQ0FBQ3ZDLEdBQUQsQ0FBVCxHQUFpQmlkLFNBQVMsQ0FBQ2pkLEdBQUQsQ0FBMUI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBTzhjLHNCQUFzQixDQUFDSSxXQUFELEVBQWN6NUIsUUFBZCxDQUE3QjtBQUNIOztBQUNELElBQUk0NUIsY0FBYyxHQUFHO0FBQ2pCNUwsZUFBYSxFQUFFLElBREU7QUFFakJDLGtCQUFnQixFQUFFLElBRkQ7QUFHakJnQyxhQUFXLEVBQUUsRUFISTtBQUlqQkMsU0FBTyxFQUFFLElBSlE7QUFLakJDLFFBQU0sRUFBRSxFQUxTO0FBTWpCckMsaUJBQWUsRUFBRSxFQU5BO0FBT2pCQyxhQUFXLEVBQUUsRUFQSTtBQVFqQnFDLFdBQVMsRUFBRSxFQVJNO0FBU2pCQyxZQUFVLEVBQUU7QUFUSyxDQUFyQixDLENBV0E7O0FBQ0EsU0FBU3NDLGVBQVQsQ0FBeUJELEdBQXpCLEVBQThCO0FBQzFCLFNBQU9BLEdBQUcsQ0FBQzNqQixNQUFKLENBQVc4cUIsa0JBQVgsRUFBK0JELGNBQS9CLENBQVA7QUFDSDs7QUFDRCxTQUFTQyxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3RDLFNBQU87QUFDSC9MLGlCQUFhLEVBQUUrTCxLQUFLLENBQUMvTCxhQUFOLElBQXVCLElBQXZCLEdBQThCK0wsS0FBSyxDQUFDL0wsYUFBcEMsR0FBb0Q4TCxLQUFLLENBQUM5TCxhQUR0RTtBQUVIQyxvQkFBZ0IsRUFBRThMLEtBQUssQ0FBQzlMLGdCQUFOLElBQTBCLElBQTFCLEdBQWlDOEwsS0FBSyxDQUFDOUwsZ0JBQXZDLEdBQTBENkwsS0FBSyxDQUFDN0wsZ0JBRi9FO0FBR0hnQyxlQUFXLEVBQUU2SixLQUFLLENBQUM3SixXQUFOLENBQWtCbmhCLE1BQWxCLENBQXlCaXJCLEtBQUssQ0FBQzlKLFdBQS9CLENBSFY7QUFJSEMsV0FBTyxFQUFFLE9BQU82SixLQUFLLENBQUM3SixPQUFiLEtBQXlCLFNBQXpCLEdBQXFDNkosS0FBSyxDQUFDN0osT0FBM0MsR0FBcUQ0SixLQUFLLENBQUM1SixPQUpqRTtBQUtIQyxVQUFNLEVBQUUySixLQUFLLENBQUMzSixNQUFOLENBQWFyaEIsTUFBYixDQUFvQmlyQixLQUFLLENBQUM1SixNQUExQixDQUxMO0FBTUhyQyxtQkFBZSxFQUFFaU0sS0FBSyxDQUFDak0sZUFBTixJQUF5QmdNLEtBQUssQ0FBQ2hNLGVBTjdDO0FBT0hDLGVBQVcsRUFBRWdNLEtBQUssQ0FBQ2hNLFdBQU4sSUFBcUIrTCxLQUFLLENBQUMvTCxXQVByQztBQVFIcUMsYUFBUyxFQUFFMkosS0FBSyxDQUFDM0osU0FBTixJQUFtQjBKLEtBQUssQ0FBQzFKLFNBUmpDO0FBU0hDLGNBQVUsRUFBRXlKLEtBQUssQ0FBQ3pKLFVBQU4sQ0FBaUJ2aEIsTUFBakIsQ0FBd0JpckIsS0FBSyxDQUFDMUosVUFBOUI7QUFUVCxHQUFQO0FBV0g7O0FBRUQsSUFBSTVDLGNBQWMsR0FBRztBQUNqQmhyQixJQUFFLEVBQUUrWCxNQURhO0FBRWpCd0ksU0FBTyxFQUFFeEksTUFGUTtBQUdqQmxYLE9BQUssRUFBRWtYLE1BSFU7QUFJakI1WSxLQUFHLEVBQUU0WSxNQUpZO0FBS2pCd1YsV0FBUyxFQUFFeFYsTUFMTTtBQU1qQjJULGVBQWEsRUFBRTtBQU5FLENBQXJCO0FBUUEsSUFBSVgsVUFBVSxHQUFHO0FBQ2JqcUIsT0FBSyxFQUFFLElBRE07QUFFYmEsTUFBSSxFQUFFLElBRk87QUFHYlosS0FBRyxFQUFFLElBSFE7QUFJYjBiLFFBQU0sRUFBRTtBQUpLLENBQWpCO0FBTUEsSUFBSThhLEdBQUcsR0FBRyxDQUFWOztBQUNBLFNBQVN4WSxVQUFULENBQW9CMlgsR0FBcEIsRUFBeUJsWSxRQUF6QixFQUFtQ2poQixRQUFuQyxFQUE2Q2toQixjQUE3QyxFQUE2RDtBQUN6RCxNQUFJdEMsYUFBYSxHQUFHcWIsc0JBQXNCLENBQUNoWixRQUFELEVBQVdqaEIsUUFBWCxDQUExQztBQUNBLE1BQUlrNkIsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHemIsY0FBYyxDQUFDeWEsR0FBRCxFQUFNO0FBQ3ZDdmEsZUFEaUMsRUFDbEI1ZSxRQUFRLENBQUMwZCxPQURTLEVBQ0ExZCxRQUFRLENBQUNvaUIsWUFBVCxDQUFzQkMsS0FBdEIsQ0FBNEJ4RCxjQUQ1QixFQUM0Q3FiLFVBRDVDLENBQ3VEO0FBRHZELEdBQWpDOztBQUdBLE1BQUlDLFlBQUosRUFBa0I7QUFDZCxRQUFJeFksR0FBRyxHQUFHeVksYUFBYSxDQUFDRixVQUFELEVBQWFqWixRQUFiLEVBQXVCa1osWUFBWSxDQUFDamIsTUFBcEMsRUFBNEN2QyxPQUFPLENBQUN3ZCxZQUFZLENBQUMvYSxRQUFkLENBQW5ELEVBQTRFcGYsUUFBNUUsQ0FBdkI7QUFDQTJoQixPQUFHLENBQUNoQyxZQUFKLEdBQW1CO0FBQ2ZMLFlBQU0sRUFBRTZhLFlBQVksQ0FBQzdhLE1BRE47QUFFZkQsY0FBUSxFQUFFOGEsWUFBWSxDQUFDOWEsUUFGUjtBQUdmRCxjQUFRLEVBQUUrYSxZQUFZLENBQUMvYTtBQUhSLEtBQW5CO0FBS0EsV0FBTztBQUFFdUMsU0FBRyxFQUFFQSxHQUFQO0FBQVlFLGNBQVEsRUFBRTtBQUF0QixLQUFQO0FBQ0gsR0FSRCxNQVNLO0FBQ0QsUUFBSXdZLFVBQVUsR0FBRyxFQUFqQjtBQUNBLFFBQUlDLFNBQVMsR0FBR0MsV0FBVyxDQUFDcEIsR0FBRCxFQUFNdmEsYUFBTixFQUFxQjVlLFFBQXJCLEVBQStCcTZCLFVBQS9CLEVBQTJDblosY0FBM0MsQ0FBM0I7O0FBQ0EsUUFBSW9aLFNBQUosRUFBZTtBQUNYLFVBQUkzWSxHQUFHLEdBQUd5WSxhQUFhLENBQUNDLFVBQUQsRUFBYXBaLFFBQWIsRUFBdUJxWixTQUFTLENBQUNwYixNQUFqQyxFQUF5Q29iLFNBQVMsQ0FBQ3hMLE1BQW5ELEVBQTJEOXVCLFFBQTNELENBQXZCO0FBQ0EsVUFBSTZoQixRQUFRLEdBQUdVLG1CQUFtQixDQUFDWixHQUFHLENBQUNDLEtBQUwsRUFBWTBZLFNBQVMsQ0FBQ2pkLEtBQXRCLEVBQTZCaWQsU0FBUyxDQUFDOUssY0FBdkMsRUFBdUQ4SyxTQUFTLENBQUM3SyxZQUFqRSxDQUFsQztBQUNBLGFBQU87QUFBRTlOLFdBQUcsRUFBRUEsR0FBUDtBQUFZRSxnQkFBUSxFQUFFQTtBQUF0QixPQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDtBQUNEOzs7Ozs7O0FBS0EsU0FBU3VZLGFBQVQsQ0FBdUJqQixHQUF2QixFQUE0QmxZLFFBQTVCLEVBQXNDL0IsTUFBdEMsRUFBOEM0UCxNQUE5QyxFQUFzRDl1QixRQUF0RCxFQUFnRTtBQUM1RCxNQUFJOGUsU0FBUyxHQUFHLEVBQWhCO0FBQ0EsTUFBSTZDLEdBQUcsR0FBRzZZLGlCQUFpQixDQUFDckIsR0FBRCxFQUFNbjVCLFFBQU4sRUFBZ0I4ZSxTQUFoQixDQUEzQjtBQUNBNkMsS0FBRyxDQUFDQyxLQUFKLEdBQVlwSCxNQUFNLENBQUN3ZixHQUFHLEVBQUosQ0FBbEI7QUFDQXJZLEtBQUcsQ0FBQ1YsUUFBSixHQUFlQSxRQUFmO0FBQ0FVLEtBQUcsQ0FBQ3pDLE1BQUosR0FBYUEsTUFBYjtBQUNBeUMsS0FBRyxDQUFDbU4sTUFBSixHQUFhQSxNQUFiOztBQUNBLE9BQUssSUFBSXhULEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcxVSxRQUFRLENBQUNvaUIsWUFBVCxDQUFzQkMsS0FBdEIsQ0FBNEJvWSxlQUFsRCxFQUFtRW5mLEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQTNFLEVBQW1GdVUsRUFBRSxFQUFyRixFQUF5RjtBQUNyRixRQUFJb2YsY0FBYyxHQUFHaG1CLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBdkI7QUFDQSxRQUFJcWYsWUFBWSxHQUFHLEVBQW5CO0FBQ0FELGtCQUFjLENBQUMvWSxHQUFELEVBQU03QyxTQUFOLEVBQWlCNmIsWUFBakIsQ0FBZDtBQUNBN2IsYUFBUyxHQUFHNmIsWUFBWjtBQUNIOztBQUNEaFosS0FBRyxDQUFDd00sYUFBSixHQUFvQjVQLFFBQVEsQ0FBQ08sU0FBRCxFQUFZNkMsR0FBRyxDQUFDd00sYUFBSixJQUFxQixFQUFqQyxDQUE1QixDQWI0RCxDQWM1RDs7QUFDQXBRLFFBQU0sQ0FBQzZjLE1BQVAsQ0FBY2paLEdBQUcsQ0FBQ2tNLEVBQUosQ0FBT3dDLFVBQXJCO0FBQ0F0UyxRQUFNLENBQUM2YyxNQUFQLENBQWNqWixHQUFHLENBQUN3TSxhQUFsQjtBQUNBLFNBQU94TSxHQUFQO0FBQ0g7O0FBQ0QsU0FBU1ksbUJBQVQsQ0FBNkJYLEtBQTdCLEVBQW9DdkUsS0FBcEMsRUFBMkNtUyxjQUEzQyxFQUEyREMsWUFBM0QsRUFBeUU7QUFDckUsU0FBTztBQUNIMU4sY0FBVSxFQUFFdkgsTUFBTSxDQUFDd2YsR0FBRyxFQUFKLENBRGY7QUFFSHBZLFNBQUssRUFBRUEsS0FGSjtBQUdIdkUsU0FBSyxFQUFFQSxLQUhKO0FBSUhtUyxrQkFBYyxFQUFFQSxjQUFjLElBQUksSUFBbEIsR0FBeUIsSUFBekIsR0FBZ0NBLGNBSjdDO0FBS0hDLGdCQUFZLEVBQUVBLFlBQVksSUFBSSxJQUFoQixHQUF1QixJQUF2QixHQUE4QkE7QUFMekMsR0FBUDtBQU9IOztBQUNELFNBQVM4SyxXQUFULENBQXFCcEIsR0FBckIsRUFBMEJ2YSxhQUExQixFQUF5QzVlLFFBQXpDLEVBQW1EOGUsU0FBbkQsRUFBOERvQyxjQUE5RCxFQUE4RTtBQUMxRSxNQUFJdlgsS0FBSyxHQUFHa3hCLGNBQWMsQ0FBQzFCLEdBQUQsRUFBTXJhLFNBQU4sQ0FBMUI7QUFDQSxNQUFJSSxNQUFNLEdBQUd2VixLQUFLLENBQUN1VixNQUFuQjtBQUNBLE1BQUk0YixTQUFKO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLElBQWxCO0FBQ0EsTUFBSWpNLE1BQU0sR0FBRyxLQUFiO0FBQ0EsTUFBSWtNLE9BQUo7QUFDQSxNQUFJQyxTQUFTLEdBQUcsSUFBaEI7QUFDQUgsV0FBUyxHQUFHOTZCLFFBQVEsQ0FBQzBkLE9BQVQsQ0FBaUJ3ZCxnQkFBakIsQ0FBa0N2eEIsS0FBSyxDQUFDcEcsS0FBeEMsQ0FBWjs7QUFDQSxNQUFJdTNCLFNBQUosRUFBZTtBQUNYQyxlQUFXLEdBQUdELFNBQVMsQ0FBQ3BvQixNQUF4QjtBQUNILEdBRkQsTUFHSyxJQUFJLENBQUN3TyxjQUFMLEVBQXFCO0FBQ3RCLFdBQU8sSUFBUDtBQUNIOztBQUNELE1BQUl2WCxLQUFLLENBQUNuRyxHQUFOLElBQWEsSUFBakIsRUFBdUI7QUFDbkJ3M0IsV0FBTyxHQUFHaDdCLFFBQVEsQ0FBQzBkLE9BQVQsQ0FBaUJ3ZCxnQkFBakIsQ0FBa0N2eEIsS0FBSyxDQUFDbkcsR0FBeEMsQ0FBVjtBQUNIOztBQUNELE1BQUkwYixNQUFNLElBQUksSUFBZCxFQUFvQjtBQUNoQixRQUFJTixhQUFhLElBQUksSUFBckIsRUFBMkI7QUFDdkJNLFlBQU0sR0FBR04sYUFBVDtBQUNILEtBRkQsTUFHSztBQUNEO0FBQ0FNLFlBQU0sR0FBRyxDQUFDLENBQUM0YixTQUFELElBQWNBLFNBQVMsQ0FBQ0ssaUJBQXpCLE1BQ0osQ0FBQ0gsT0FBRCxJQUFZQSxPQUFPLENBQUNHLGlCQURoQixDQUFUO0FBRUg7QUFDSjs7QUFDRCxNQUFJamMsTUFBTSxJQUFJNmIsV0FBZCxFQUEyQjtBQUN2QkEsZUFBVyxHQUFHenBCLFVBQVUsQ0FBQ3lwQixXQUFELENBQXhCO0FBQ0g7O0FBQ0QsTUFBSUMsT0FBSixFQUFhO0FBQ1RDLGFBQVMsR0FBR0QsT0FBTyxDQUFDdG9CLE1BQXBCOztBQUNBLFFBQUl3TSxNQUFKLEVBQVk7QUFDUitiLGVBQVMsR0FBRzNwQixVQUFVLENBQUMycEIsU0FBRCxDQUF0QjtBQUNIOztBQUNELFFBQUlGLFdBQVcsSUFBSUUsU0FBUyxJQUFJRixXQUFoQyxFQUE2QztBQUN6Q0UsZUFBUyxHQUFHLElBQVo7QUFDSDtBQUNKOztBQUNELE1BQUlBLFNBQUosRUFBZTtBQUNYbk0sVUFBTSxHQUFHLElBQVQ7QUFDSCxHQUZELE1BR0ssSUFBSSxDQUFDNU4sY0FBTCxFQUFxQjtBQUN0QjROLFVBQU0sR0FBRzl1QixRQUFRLENBQUNvakIsR0FBVCxDQUFhLG9CQUFiLEtBQXNDLEtBQS9DO0FBQ0E2WCxhQUFTLEdBQUdqN0IsUUFBUSxDQUFDMGQsT0FBVCxDQUFpQmpVLEdBQWpCLENBQXFCc3hCLFdBQXJCLEVBQWtDN2IsTUFBTSxHQUNoRGxmLFFBQVEsQ0FBQ2lpQiwwQkFEdUMsR0FFaERqaUIsUUFBUSxDQUFDa2lCLHlCQUZELENBQVo7QUFHSDs7QUFDRCxTQUFPO0FBQ0hoRCxVQUFNLEVBQUVBLE1BREw7QUFFSDRQLFVBQU0sRUFBRUEsTUFGTDtBQUdIelIsU0FBSyxFQUFFO0FBQUU5WixXQUFLLEVBQUV3M0IsV0FBVDtBQUFzQnYzQixTQUFHLEVBQUV5M0I7QUFBM0IsS0FISjtBQUlIekwsa0JBQWMsRUFBRXNMLFNBQVMsR0FBR0EsU0FBUyxDQUFDcEwsU0FBYixHQUF5QixJQUovQztBQUtIRCxnQkFBWSxFQUFFdUwsT0FBTyxHQUFHQSxPQUFPLENBQUN0TCxTQUFYLEdBQXVCO0FBTHpDLEdBQVA7QUFPSDs7QUFDRCxTQUFTbUwsY0FBVCxDQUF3QjFCLEdBQXhCLEVBQTZCcmEsU0FBN0IsRUFBd0M7QUFDcEMsTUFBSW5WLEtBQUssR0FBR3NTLFdBQVcsQ0FBQ2tkLEdBQUQsRUFBTTNMLFVBQU4sRUFBa0IsRUFBbEIsRUFBc0IxTyxTQUF0QixDQUF2QjtBQUNBblYsT0FBSyxDQUFDcEcsS0FBTixHQUFlb0csS0FBSyxDQUFDcEcsS0FBTixLQUFnQixJQUFqQixHQUF5Qm9HLEtBQUssQ0FBQ3BHLEtBQS9CLEdBQXVDb0csS0FBSyxDQUFDdkYsSUFBM0Q7QUFDQSxTQUFPdUYsS0FBSyxDQUFDdkYsSUFBYjtBQUNBLFNBQU91RixLQUFQO0FBQ0g7O0FBQ0QsU0FBUzZ3QixpQkFBVCxDQUEyQnJCLEdBQTNCLEVBQWdDbjVCLFFBQWhDLEVBQTBDOGUsU0FBMUMsRUFBcUQ7QUFDakQsTUFBSXNjLFlBQVksR0FBRyxFQUFuQjtBQUNBLE1BQUl6eEIsS0FBSyxHQUFHc1MsV0FBVyxDQUFDa2QsR0FBRCxFQUFNMUwsY0FBTixFQUFzQixFQUF0QixFQUEwQjJOLFlBQTFCLENBQXZCO0FBQ0EsTUFBSXZOLEVBQUUsR0FBR3dMLHNCQUFzQixDQUFDK0IsWUFBRCxFQUFlcDdCLFFBQWYsRUFBeUI4ZSxTQUF6QixDQUEvQjtBQUNBblYsT0FBSyxDQUFDbWpCLFFBQU4sR0FBaUJuakIsS0FBSyxDQUFDbEgsRUFBdkI7QUFDQSxTQUFPa0gsS0FBSyxDQUFDbEgsRUFBYjtBQUNBa0gsT0FBSyxDQUFDa2tCLEVBQU4sR0FBV0EsRUFBWDtBQUNBLFNBQU9sa0IsS0FBUDtBQUNIOztBQUNELFNBQVNzd0Isc0JBQVQsQ0FBZ0NoWixRQUFoQyxFQUEwQ2poQixRQUExQyxFQUFvRDtBQUNoRCxNQUFJd0ssR0FBRyxHQUFHLElBQVY7O0FBQ0EsTUFBSXlXLFFBQUosRUFBYztBQUNWLFFBQUlvYSxNQUFNLEdBQUdyN0IsUUFBUSxDQUFDNnZCLEtBQVQsQ0FBZUMsWUFBZixDQUE0QjdPLFFBQTVCLENBQWI7QUFDQXpXLE9BQUcsR0FBRzZ3QixNQUFNLENBQUN6YyxhQUFiO0FBQ0g7O0FBQ0QsTUFBSXBVLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2JBLE9BQUcsR0FBR3hLLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsZUFBYixDQUFOO0FBQ0g7O0FBQ0QsU0FBTzVZLEdBQVA7QUFDSDs7QUFFRCxJQUFJOHdCLFlBQVksR0FBRztBQUNmQyxXQUFTLEVBQUUsT0FESTtBQUVmQyxTQUFPLEVBQUUsT0FGTTtBQUdmQyxZQUFVLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUhHO0FBSWZ6TCxXQUFTLEVBQUUsb0JBSkk7QUFLZkssWUFBVSxFQUFFLGdCQUxHO0FBTWZyTixTQUFPLEVBQUUsZ0JBTk0sQ0FNVzs7QUFOWCxDQUFuQjtBQVFBOzs7O0FBR0EsU0FBUzBZLGtCQUFULENBQTRCcjhCLEtBQTVCLEVBQW1DVyxRQUFuQyxFQUE2QztBQUN6QyxTQUFPK2dCLFdBQVcsQ0FBQzRhLFlBQVksQ0FBQ3Q4QixLQUFELENBQWIsRUFBc0IsRUFBdEIsRUFBMEJXLFFBQTFCLENBQWxCO0FBQ0g7O0FBQ0QsU0FBUzI3QixZQUFULENBQXNCdDhCLEtBQXRCLEVBQTZCO0FBQ3pCLE1BQUl1OEIsT0FBSjs7QUFDQSxNQUFJdjhCLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2hCdThCLFdBQU8sR0FBRyxDQUFDLEVBQUQsQ0FBVixDQURnQixDQUNBO0FBQ25CLEdBRkQsTUFHSyxJQUFJcDFCLEtBQUssQ0FBQ2tULE9BQU4sQ0FBY3JhLEtBQWQsQ0FBSixFQUEwQjtBQUMzQjtBQUNBdThCLFdBQU8sR0FBR3Y4QixLQUFLLENBQUMweUIsTUFBTixDQUFhLFVBQVU4SixNQUFWLEVBQWtCO0FBQ3JDLGFBQU9BLE1BQU0sQ0FBQ0osVUFBZDtBQUNILEtBRlMsQ0FBVjtBQUdILEdBTEksTUFNQSxJQUFJLE9BQU9wOEIsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBakMsRUFBd0M7QUFBRTtBQUMzQ3U4QixXQUFPLEdBQUcsQ0FBQ3Y4QixLQUFELENBQVY7QUFDSCxHQUZJLE1BR0E7QUFBRTtBQUNIdThCLFdBQU8sR0FBRyxFQUFWO0FBQ0g7O0FBQ0RBLFNBQU8sR0FBR0EsT0FBTyxDQUFDL3NCLEdBQVIsQ0FBWSxVQUFVZ3RCLE1BQVYsRUFBa0I7QUFDcEMsV0FBT3RkLFFBQVEsQ0FBQyxFQUFELEVBQUsrYyxZQUFMLEVBQW1CTyxNQUFuQixDQUFmO0FBQ0gsR0FGUyxDQUFWO0FBR0EsU0FBT0QsT0FBUDtBQUNIOztBQUVELFNBQVNFLGdCQUFULENBQTBCQyxVQUExQixFQUFzQ0MsWUFBdEMsRUFBb0RDLFlBQXBELEVBQWtFO0FBQzlELE1BQUlBLFlBQVksS0FBSyxLQUFLLENBQTFCLEVBQTZCO0FBQUVBLGdCQUFZLEdBQUcsRUFBZjtBQUFvQjs7QUFDbkQsTUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsTUFBSUMsV0FBSjtBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsV0FBU0MsUUFBVCxHQUFvQjtBQUNoQixRQUFJRCxRQUFKLEVBQWM7QUFDVixXQUFLLElBQUk5Z0IsRUFBRSxHQUFHLENBQVQsRUFBWWdoQixZQUFZLEdBQUdKLFVBQWhDLEVBQTRDNWdCLEVBQUUsR0FBR2doQixZQUFZLENBQUN2MUIsTUFBOUQsRUFBc0V1VSxFQUFFLEVBQXhFLEVBQTRFO0FBQ3hFLFlBQUlpaEIsU0FBUyxHQUFHRCxZQUFZLENBQUNoaEIsRUFBRCxDQUE1QjtBQUNBaWhCLGlCQUFTLENBQUNGLFFBQVY7QUFDSDs7QUFDRCxVQUFJTCxZQUFKLEVBQWtCO0FBQ2RBLG9CQUFZLENBQUM1bkIsS0FBYixDQUFtQituQixXQUFuQixFQUFnQ0MsUUFBaEM7QUFDSDs7QUFDREEsY0FBUSxHQUFHLElBQVg7QUFDSDtBQUNKOztBQUNELFdBQVM1eEIsR0FBVCxHQUFlO0FBQ1gsUUFBSSxDQUFDNHhCLFFBQUQsSUFBYSxDQUFDNVcsYUFBYSxDQUFDNFcsUUFBRCxFQUFXN2dCLFNBQVgsQ0FBL0IsRUFBc0Q7QUFDbEQ4Z0IsY0FBUTtBQUNSRixpQkFBVyxHQUFHLElBQWQ7QUFDQUMsY0FBUSxHQUFHN2dCLFNBQVg7QUFDQXdnQixnQkFBVSxDQUFDM25CLEtBQVgsQ0FBaUIsSUFBakIsRUFBdUJtSCxTQUF2QjtBQUNIO0FBQ0o7O0FBQ0QvUSxLQUFHLENBQUMweEIsVUFBSixHQUFpQkEsVUFBakI7QUFDQTF4QixLQUFHLENBQUM2eEIsUUFBSixHQUFlQSxRQUFmOztBQUNBLE9BQUssSUFBSS9nQixFQUFFLEdBQUcsQ0FBVCxFQUFZa2hCLGNBQWMsR0FBR1AsWUFBbEMsRUFBZ0QzZ0IsRUFBRSxHQUFHa2hCLGNBQWMsQ0FBQ3oxQixNQUFwRSxFQUE0RXVVLEVBQUUsRUFBOUUsRUFBa0Y7QUFDOUUsUUFBSW1oQixVQUFVLEdBQUdELGNBQWMsQ0FBQ2xoQixFQUFELENBQS9CO0FBQ0FtaEIsY0FBVSxDQUFDUCxVQUFYLENBQXNCanpCLElBQXRCLENBQTJCdUIsR0FBM0I7QUFDSDs7QUFDRCxTQUFPQSxHQUFQO0FBQ0g7O0FBRUQsSUFBSWt5QixpQkFBaUIsR0FBR3RiLHFCQUFxQixFQUE3QyxDLENBQWlEOztBQUNqRCxJQUFJdWIsUUFBUTtBQUFHO0FBQWUsWUFBWTtBQUN0QyxXQUFTQSxRQUFULEdBQW9CO0FBQ2hCLFNBQUtDLG1CQUFMLEdBQTJCalgsT0FBTyxDQUFDLEtBQUtrWCxvQkFBTixDQUFsQztBQUNBLFNBQUtDLGtCQUFMLEdBQTBCblgsT0FBTyxDQUFDLEtBQUtvWCxjQUFOLENBQWpDO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QnJYLE9BQU8sQ0FBQyxLQUFLc1gsZ0JBQU4sQ0FBOUI7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QnZYLE9BQU8sQ0FBQyxLQUFLd1gsa0JBQU4sQ0FBaEM7QUFDQSxTQUFLQyxjQUFMLEdBQXNCelgsT0FBTyxDQUFDLEtBQUswWCxpQkFBTixDQUE3QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCM1gsT0FBTyxDQUFDLEtBQUswWCxpQkFBTixDQUEvQjtBQUNBLFNBQUtFLGVBQUwsR0FBdUIsRUFBdkIsQ0FQZ0IsQ0FPVztBQUM5Qjs7QUFDRFosVUFBUSxDQUFDbDJCLFNBQVQsQ0FBbUIrMkIsVUFBbkIsR0FBZ0MsVUFBVTd6QixLQUFWLEVBQWlCO0FBQzdDLFFBQUk4ekIsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSUMsUUFBUSxHQUFHLEtBQUtDLFVBQUwsQ0FBZ0JoMEIsS0FBaEIsQ0FBZjtBQUNBLFFBQUlpMEIsT0FBTyxHQUFHLEtBQUtoQixtQkFBTCxDQUF5Qmp6QixLQUFLLENBQUN3WCxVQUEvQixDQUFkO0FBQ0EsUUFBSTBjLGNBQWMsR0FBRyxLQUFLZixrQkFBTCxDQUF3Qm56QixLQUFLLENBQUN5ckIsYUFBOUIsQ0FBckI7QUFDQSxRQUFJMEksWUFBWSxHQUFHLEtBQUtaLGlCQUFMLENBQXVCdnpCLEtBQUssQ0FBQzRtQixZQUE3QixFQUEyQ3FOLE9BQTNDLENBQW5CLENBTDZDLENBSzJCOztBQUN4RSxRQUFJRyxXQUFXLEdBQUcsS0FBS2YsZUFBTCxDQUFxQnJ6QixLQUFLLENBQUN3WCxVQUEzQixFQUF1Q3ljLE9BQXZDLENBQWxCO0FBQ0EsUUFBSUksVUFBVSxHQUFHLEtBQUtaLGNBQUwsQ0FBb0J6ekIsS0FBSyxDQUFDdXJCLFNBQTFCLENBQWpCO0FBQ0EsUUFBSStJLFlBQVksR0FBRyxLQUFLWCxnQkFBTCxDQUFzQjN6QixLQUFLLENBQUM2ckIsV0FBNUIsQ0FBbkI7QUFDQSxRQUFJZ0ksVUFBVSxHQUFHLEVBQWpCO0FBQ0EsU0FBS0QsZUFBTCxHQUF1Qi9jLE9BQU8sQ0FBQ2tkLFFBQUQsRUFBVyxVQUFVLzVCLElBQVYsRUFBZ0I0WSxHQUFoQixFQUFxQjtBQUMxRCxhQUFPa2hCLEtBQUssQ0FBQ0YsZUFBTixDQUFzQmhoQixHQUF0QixLQUE4Qm9KLE9BQU8sQ0FBQ3VZLGtCQUFELENBQTVDO0FBQ0gsS0FGNkIsQ0FBOUI7O0FBR0EsU0FBSyxJQUFJM2hCLEdBQVQsSUFBZ0JtaEIsUUFBaEIsRUFBMEI7QUFDdEIsVUFBSVMsT0FBTyxHQUFHVCxRQUFRLENBQUNuaEIsR0FBRCxDQUF0QjtBQUNBLFVBQUk0RSxVQUFVLEdBQUc0YyxXQUFXLENBQUN4aEIsR0FBRCxDQUFYLElBQW9CbWdCLGlCQUFyQztBQUNBLFVBQUkwQixZQUFZLEdBQUcsS0FBS2IsZUFBTCxDQUFxQmhoQixHQUFyQixDQUFuQjtBQUNBaWhCLGdCQUFVLENBQUNqaEIsR0FBRCxDQUFWLEdBQWtCO0FBQ2QrWSxxQkFBYSxFQUFFNkksT0FBTyxDQUFDN0ksYUFBUixJQUF5QjNyQixLQUFLLENBQUMyckIsYUFEaEM7QUFFZEYscUJBQWEsRUFBRXlJLGNBQWMsQ0FBQ3RoQixHQUFELENBQWQsSUFBdUIsSUFGeEI7QUFHZDRFLGtCQUFVLEVBQUVBLFVBSEU7QUFJZG9QLG9CQUFZLEVBQUU2TixZQUFZLENBQUN6MEIsS0FBSyxDQUFDNG1CLFlBQU4sQ0FBbUIsRUFBbkIsQ0FBRCxFQUF5QjROLE9BQU8sQ0FBQ3RRLEVBQWpDLEVBQXFDaVEsWUFBWSxDQUFDdmhCLEdBQUQsQ0FBakQsQ0FKWjtBQUtkZ1osc0JBQWMsRUFBRXBVLFVBQVUsQ0FBQ1csU0FBWCxDQUFxQm5ZLEtBQUssQ0FBQzRyQixjQUEzQixJQUE2QzVyQixLQUFLLENBQUM0ckIsY0FBbkQsR0FBb0UsRUFMdEU7QUFNZEwsaUJBQVMsRUFBRThJLFVBQVUsQ0FBQ3poQixHQUFELENBQVYsSUFBbUIsSUFOaEI7QUFPZGlaLG1CQUFXLEVBQUV5SSxZQUFZLENBQUMxaEIsR0FBRCxDQUFaLElBQXFCO0FBUHBCLE9BQWxCO0FBU0g7O0FBQ0QsV0FBT2loQixVQUFQO0FBQ0gsR0E1QkQ7O0FBNkJBYixVQUFRLENBQUNsMkIsU0FBVCxDQUFtQnMyQixjQUFuQixHQUFvQyxVQUFVc0IsUUFBVixFQUFvQjtBQUNwRCxRQUFJQyxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsUUFBSUQsUUFBSixFQUFjO0FBQ1YsVUFBSTVWLElBQUksR0FBRyxLQUFLOFYsa0JBQUwsQ0FBd0JGLFFBQXhCLENBQVg7O0FBQ0EsV0FBSyxJQUFJL2lCLEVBQUUsR0FBRyxDQUFULEVBQVlrakIsTUFBTSxHQUFHL1YsSUFBMUIsRUFBZ0NuTixFQUFFLEdBQUdrakIsTUFBTSxDQUFDejNCLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxZQUFJaUIsR0FBRyxHQUFHaWlCLE1BQU0sQ0FBQ2xqQixFQUFELENBQWhCO0FBQ0FnakIsaUJBQVMsQ0FBQy9oQixHQUFELENBQVQsR0FBaUI4aEIsUUFBakI7QUFDSDtBQUNKOztBQUNELFdBQU9DLFNBQVA7QUFDSCxHQVZEOztBQVdBM0IsVUFBUSxDQUFDbDJCLFNBQVQsQ0FBbUJvMkIsb0JBQW5CLEdBQTBDLFVBQVUxYixVQUFWLEVBQXNCO0FBQzVELFFBQUlzYyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxXQUFPamQsT0FBTyxDQUFDVyxVQUFVLENBQUNPLElBQVosRUFBa0IsVUFBVWxDLFFBQVYsRUFBb0I7QUFDaEQsYUFBT2llLEtBQUssQ0FBQ2dCLGtCQUFOLENBQXlCamYsUUFBekIsQ0FBUDtBQUNILEtBRmEsQ0FBZDtBQUdILEdBTEQ7O0FBTUFtZCxVQUFRLENBQUNsMkIsU0FBVCxDQUFtQncyQixnQkFBbkIsR0FBc0MsVUFBVTliLFVBQVYsRUFBc0J5YyxPQUF0QixFQUErQjtBQUNqRSxRQUFJbGMsSUFBSSxHQUFHUCxVQUFVLENBQUNPLElBQXRCO0FBQUEsUUFBNEJJLFNBQVMsR0FBR1gsVUFBVSxDQUFDVyxTQUFuRDtBQUNBLFFBQUk0YyxXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsU0FBSyxJQUFJOWMsS0FBVCxJQUFrQkYsSUFBbEIsRUFBd0I7QUFDcEIsV0FBSyxJQUFJcEcsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBR2twQixPQUFPLENBQUNoYyxLQUFELENBQTdCLEVBQXNDdEcsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBOUMsRUFBc0R1VSxFQUFFLEVBQXhELEVBQTREO0FBQ3hELFlBQUlpQixHQUFHLEdBQUc3SCxFQUFFLENBQUM0RyxFQUFELENBQVo7O0FBQ0EsWUFBSSxDQUFDb2pCLFdBQVcsQ0FBQ25pQixHQUFELENBQWhCLEVBQXVCO0FBQ25CbWlCLHFCQUFXLENBQUNuaUIsR0FBRCxDQUFYLEdBQW1CNkUscUJBQXFCLEVBQXhDO0FBQ0g7O0FBQ0RzZCxtQkFBVyxDQUFDbmlCLEdBQUQsQ0FBWCxDQUFpQm1GLElBQWpCLENBQXNCRSxLQUF0QixJQUErQkYsSUFBSSxDQUFDRSxLQUFELENBQW5DO0FBQ0g7QUFDSjs7QUFDRCxTQUFLLElBQUlHLFVBQVQsSUFBdUJELFNBQXZCLEVBQWtDO0FBQzlCLFVBQUlELFFBQVEsR0FBR0MsU0FBUyxDQUFDQyxVQUFELENBQXhCOztBQUNBLFdBQUssSUFBSXdMLEVBQUUsR0FBRyxDQUFULEVBQVlvUixFQUFFLEdBQUdmLE9BQU8sQ0FBQy9iLFFBQVEsQ0FBQ0QsS0FBVixDQUE3QixFQUErQzJMLEVBQUUsR0FBR29SLEVBQUUsQ0FBQzUzQixNQUF2RCxFQUErRHdtQixFQUFFLEVBQWpFLEVBQXFFO0FBQ2pFLFlBQUloUixHQUFHLEdBQUdvaUIsRUFBRSxDQUFDcFIsRUFBRCxDQUFaOztBQUNBLFlBQUltUixXQUFXLENBQUNuaUIsR0FBRCxDQUFmLEVBQXNCO0FBQUU7QUFDcEJtaUIscUJBQVcsQ0FBQ25pQixHQUFELENBQVgsQ0FBaUJ1RixTQUFqQixDQUEyQkMsVUFBM0IsSUFBeUNGLFFBQXpDO0FBQ0g7QUFDSjtBQUNKOztBQUNELFdBQU82YyxXQUFQO0FBQ0gsR0F0QkQ7O0FBdUJBL0IsVUFBUSxDQUFDbDJCLFNBQVQsQ0FBbUIwMkIsa0JBQW5CLEdBQXdDLFVBQVU1TSxZQUFWLEVBQXdCcU4sT0FBeEIsRUFBaUM7QUFDckUsUUFBSWdCLFdBQVcsR0FBRyxFQUFsQjs7QUFDQSxTQUFLLElBQUloZCxLQUFULElBQWtCMk8sWUFBbEIsRUFBZ0M7QUFDNUIsVUFBSTNPLEtBQUosRUFBVztBQUFFO0FBQ1QsYUFBSyxJQUFJdEcsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBR2twQixPQUFPLENBQUNoYyxLQUFELENBQTdCLEVBQXNDdEcsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBOUMsRUFBc0R1VSxFQUFFLEVBQXhELEVBQTREO0FBQ3hELGNBQUlpQixHQUFHLEdBQUc3SCxFQUFFLENBQUM0RyxFQUFELENBQVo7O0FBQ0EsY0FBSSxDQUFDc2pCLFdBQVcsQ0FBQ3JpQixHQUFELENBQWhCLEVBQXVCO0FBQ25CcWlCLHVCQUFXLENBQUNyaUIsR0FBRCxDQUFYLEdBQW1CLEVBQW5CO0FBQ0g7O0FBQ0RxaUIscUJBQVcsQ0FBQ3JpQixHQUFELENBQVgsQ0FBaUJxRixLQUFqQixJQUEwQjJPLFlBQVksQ0FBQzNPLEtBQUQsQ0FBdEM7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsV0FBT2dkLFdBQVA7QUFDSCxHQWREOztBQWVBakMsVUFBUSxDQUFDbDJCLFNBQVQsQ0FBbUI0MkIsaUJBQW5CLEdBQXVDLFVBQVVySSxXQUFWLEVBQXVCO0FBQzFELFFBQUk2SixXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsUUFBSTdKLFdBQUosRUFBaUI7QUFDYixVQUFJOEosZ0JBQWdCLEdBQUcsS0FBSzdCLGdCQUFMLENBQXNCakksV0FBVyxDQUFDc0IsY0FBbEMsRUFBa0QsS0FBS3VHLG9CQUFMLENBQTBCN0gsV0FBVyxDQUFDc0IsY0FBdEMsQ0FBbEQsQ0FBd0c7QUFBeEcsT0FBdkIsQ0FEYSxDQUdiOzs7QUFDQSxVQUFJeUksa0JBQWtCLEdBQUcsS0FBS2xDLG9CQUFMLENBQTBCN0gsV0FBVyxDQUFDZSxhQUF0QyxDQUF6Qjs7QUFDQSxVQUFJaUosZUFBZSxHQUFHLEtBQUsvQixnQkFBTCxDQUFzQmpJLFdBQVcsQ0FBQ2UsYUFBbEMsRUFBaURnSixrQkFBakQsQ0FBdEI7O0FBQ0EsVUFBSUUsUUFBUSxHQUFHLFVBQVUxaUIsR0FBVixFQUFlO0FBQzFCLFlBQUksQ0FBQ3NpQixXQUFXLENBQUN0aUIsR0FBRCxDQUFoQixFQUF1QjtBQUNuQnNpQixxQkFBVyxDQUFDdGlCLEdBQUQsQ0FBWCxHQUFtQjtBQUNmK1osMEJBQWMsRUFBRXdJLGdCQUFnQixDQUFDdmlCLEdBQUQsQ0FBaEIsSUFBeUJtZ0IsaUJBRDFCO0FBRWYzRyx5QkFBYSxFQUFFaUosZUFBZSxDQUFDemlCLEdBQUQsQ0FBZixJQUF3Qm1nQixpQkFGeEI7QUFHZnZHLG1CQUFPLEVBQUVuQixXQUFXLENBQUNtQixPQUhOO0FBSWYrSSxtQkFBTyxFQUFFbEssV0FBVyxDQUFDa0s7QUFKTixXQUFuQjtBQU1IO0FBQ0osT0FURDs7QUFVQSxXQUFLLElBQUkzaUIsR0FBVCxJQUFnQnVpQixnQkFBaEIsRUFBa0M7QUFDOUJHLGdCQUFRLENBQUMxaUIsR0FBRCxDQUFSO0FBQ0g7O0FBQ0QsV0FBSyxJQUFJQSxHQUFULElBQWdCeWlCLGVBQWhCLEVBQWlDO0FBQzdCQyxnQkFBUSxDQUFDMWlCLEdBQUQsQ0FBUjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT3NpQixXQUFQO0FBQ0gsR0ExQkQ7O0FBMkJBLFNBQU9sQyxRQUFQO0FBQ0gsQ0ExSDZCLEVBQTlCOztBQTJIQSxTQUFTdUIsa0JBQVQsQ0FBNEJpQixLQUE1QixFQUFtQ0MsYUFBbkMsRUFBa0R0QixZQUFsRCxFQUFnRTtBQUM1RCxNQUFJdUIsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE1BQUlGLEtBQUosRUFBVztBQUNQRSxhQUFTLENBQUNwMkIsSUFBVixDQUFlazJCLEtBQWY7QUFDSDs7QUFDRCxNQUFJQyxhQUFKLEVBQW1CO0FBQ2ZDLGFBQVMsQ0FBQ3AyQixJQUFWLENBQWVtMkIsYUFBZjtBQUNIOztBQUNELE1BQUlFLEtBQUssR0FBRztBQUNSLFFBQUkzTSxlQUFlLENBQUMwTSxTQUFEO0FBRFgsR0FBWjs7QUFHQSxNQUFJdkIsWUFBSixFQUFrQjtBQUNkdmYsWUFBUSxDQUFDK2dCLEtBQUQsRUFBUXhCLFlBQVIsQ0FBUjtBQUNIOztBQUNELFNBQU93QixLQUFQO0FBQ0gsQyxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsbUJBQVQsQ0FBNkJDLFNBQTdCLEVBQXdDQyxXQUF4QyxFQUFxRDk1QixLQUFyRCxFQUE0RCs1QixTQUE1RCxFQUF1RTtBQUNuRSxNQUFJaGlCLE9BQU8sR0FBRzhoQixTQUFTLENBQUM5aEIsT0FBeEI7QUFDQSxNQUFJdFosSUFBSjtBQUNBLE1BQUkvQixJQUFKO0FBQ0EsTUFBSXM5QixRQUFKO0FBQ0EsTUFBSUMsWUFBSjs7QUFDQSxNQUFJSCxXQUFXLFlBQVl4ckIsSUFBM0IsRUFBaUM7QUFDN0I3UCxRQUFJLEdBQUdxN0IsV0FBUCxDQUQ2QixDQUNUO0FBQ3ZCLEdBRkQsTUFHSztBQUNEcjdCLFFBQUksR0FBR3E3QixXQUFXLENBQUNyN0IsSUFBbkI7QUFDQS9CLFFBQUksR0FBR285QixXQUFXLENBQUNwOUIsSUFBbkI7QUFDQXM5QixZQUFRLEdBQUdGLFdBQVcsQ0FBQ0UsUUFBdkI7QUFDSDs7QUFDREMsY0FBWSxHQUFHO0FBQ1h4N0IsUUFBSSxFQUFFc1osT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0J6N0IsSUFBbEIsRUFBd0I7QUFBRTA3QixjQUFRLEVBQUU7QUFBWixLQUF4QixDQURLO0FBRVh6OUIsUUFBSSxFQUFFQSxJQUFJLElBQUk7QUFGSCxHQUFmOztBQUlBLE1BQUksT0FBT3NELEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IrNUIsYUFBUyxHQUFHLzVCLEtBQVo7QUFDQUEsU0FBSyxHQUFHLElBQVI7QUFDSDs7QUFDREEsT0FBSyxHQUFHQSxLQUFLLEdBQUcsTUFBTXN6QixVQUFVLENBQUN0ekIsS0FBRCxDQUFuQixHQUE2QixFQUExQyxDQXRCbUUsQ0FzQnJCOztBQUM5Qys1QixXQUFTLEdBQUdBLFNBQVMsSUFBSSxFQUF6Qjs7QUFDQSxNQUFJLENBQUNDLFFBQUQsSUFBYUgsU0FBUyxDQUFDcGMsR0FBVixDQUFjLFVBQWQsQ0FBakIsRUFBNEM7QUFDeEMsV0FBTyxPQUFPemQsS0FBUCxHQUNILGNBREcsR0FDY2t6QixVQUFVLENBQUNsMEIsSUFBSSxDQUFDQyxTQUFMLENBQWVnN0IsWUFBZixDQUFELENBRHhCLEdBQ3lELElBRHpELEdBRUhGLFNBRkcsR0FHSCxNQUhKO0FBSUgsR0FMRCxNQU1LO0FBQ0QsV0FBTyxVQUFVLzVCLEtBQVYsR0FBa0IsR0FBbEIsR0FDSCs1QixTQURHLEdBRUgsU0FGSjtBQUdIO0FBQ0o7O0FBQ0QsU0FBU0ssYUFBVCxDQUF1QlAsU0FBdkIsRUFBa0M7QUFDOUIsU0FBT0EsU0FBUyxDQUFDcGMsR0FBVixDQUFjLFlBQWQsS0FBK0J5VixVQUFVLENBQUMyRyxTQUFTLENBQUNwYyxHQUFWLENBQWMsWUFBZCxDQUFELENBQWhEO0FBQ0gsQyxDQUNEOzs7QUFDQSxTQUFTNGMsYUFBVCxDQUF1QjU3QixJQUF2QixFQUE2Qnl2QixXQUE3QixFQUEwQ2pZLE9BQTFDLEVBQW1EcWtCLGdCQUFuRCxFQUFxRTtBQUNqRSxNQUFJamdDLFFBQVEsR0FBRzRiLE9BQU8sQ0FBQzViLFFBQXZCO0FBQUEsTUFBaUMyeEIsSUFBSSxHQUFHL1YsT0FBTyxDQUFDK1YsSUFBaEQ7QUFBQSxNQUFzRHVPLEtBQUssR0FBR3RrQixPQUFPLENBQUNza0IsS0FBdEU7QUFBQSxNQUE2RXhpQixPQUFPLEdBQUc5QixPQUFPLENBQUM4QixPQUEvRjtBQUNBLE1BQUl5aUIsT0FBTyxHQUFHLEVBQWQ7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJLENBQUNwYixtQkFBbUIsQ0FBQzRPLFdBQVcsQ0FBQ0ssV0FBYixFQUEwQjl2QixJQUExQixDQUF4QixFQUF5RDtBQUNyRCs3QixXQUFPLENBQUNsM0IsSUFBUixDQUFhLGlCQUFiO0FBQ0gsR0FGRCxNQUdLO0FBQ0RrM0IsV0FBTyxDQUFDbDNCLElBQVIsQ0FBYSxRQUFRa0gsT0FBTyxDQUFDL0wsSUFBSSxDQUFDbVAsU0FBTCxFQUFELENBQTVCOztBQUNBLFFBQUlvZSxJQUFJLENBQUN2TyxHQUFMLENBQVMsV0FBVCxLQUNBMUYsT0FBTyxDQUFDaEssUUFBUixDQUFpQnRQLElBQWpCLE1BQTJCc1osT0FBTyxDQUFDaEssUUFBUixDQUFpQm1nQixXQUFXLENBQUN5TSxZQUFaLENBQXlCLzhCLEtBQTFDLENBRC9CLEVBQ2lGO0FBQzdFNDhCLGFBQU8sQ0FBQ2wzQixJQUFSLENBQWEsZ0JBQWI7QUFDSDs7QUFDRG0zQixjQUFVLEdBQUc5dUIsVUFBVSxDQUFDdFIsUUFBUSxDQUFDdWdDLE1BQVQsRUFBRCxDQUF2QjtBQUNBRixZQUFRLEdBQUczdkIsT0FBTyxDQUFDMHZCLFVBQUQsRUFBYSxDQUFiLENBQWxCOztBQUNBLFFBQUloOEIsSUFBSSxHQUFHZzhCLFVBQVgsRUFBdUI7QUFDbkJELGFBQU8sQ0FBQ2wzQixJQUFSLENBQWEsU0FBYjtBQUNILEtBRkQsTUFHSyxJQUFJN0UsSUFBSSxJQUFJaThCLFFBQVosRUFBc0I7QUFDdkJGLGFBQU8sQ0FBQ2wzQixJQUFSLENBQWEsV0FBYjtBQUNILEtBRkksTUFHQTtBQUNEazNCLGFBQU8sQ0FBQ2wzQixJQUFSLENBQWEsVUFBYjs7QUFDQSxVQUFJZzNCLGdCQUFnQixLQUFLLElBQXpCLEVBQStCO0FBQzNCRSxlQUFPLENBQUNsM0IsSUFBUixDQUFhaTNCLEtBQUssQ0FBQ00sUUFBTixDQUFlLE9BQWYsQ0FBYjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPTCxPQUFQO0FBQ0gsQyxDQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTTSxXQUFULENBQXFCM21CLElBQXJCLEVBQTJCcFgsT0FBM0IsRUFBb0NnK0IsT0FBcEMsRUFBNkM7QUFDekM7QUFDQTtBQUNBLE1BQUlDLFVBQVUsR0FBRyxLQUFqQjs7QUFDQSxNQUFJQyxjQUFjLEdBQUcsWUFBWTtBQUM3QixRQUFJLENBQUNELFVBQUwsRUFBaUI7QUFDYkEsZ0JBQVUsR0FBRyxJQUFiO0FBQ0FqK0IsYUFBTyxDQUFDMFIsS0FBUixDQUFjLElBQWQsRUFBb0JtSCxTQUFwQjtBQUNIO0FBQ0osR0FMRDs7QUFNQSxNQUFJc2xCLGNBQWMsR0FBRyxZQUFZO0FBQzdCLFFBQUksQ0FBQ0YsVUFBTCxFQUFpQjtBQUNiQSxnQkFBVSxHQUFHLElBQWI7O0FBQ0EsVUFBSUQsT0FBSixFQUFhO0FBQ1RBLGVBQU8sQ0FBQ3RzQixLQUFSLENBQWMsSUFBZCxFQUFvQm1ILFNBQXBCO0FBQ0g7QUFDSjtBQUNKLEdBUEQ7O0FBUUEsTUFBSS9RLEdBQUcsR0FBR3NQLElBQUksQ0FBQzhtQixjQUFELEVBQWlCQyxjQUFqQixDQUFkOztBQUNBLE1BQUlyMkIsR0FBRyxJQUFJLE9BQU9BLEdBQUcsQ0FBQ3MyQixJQUFYLEtBQW9CLFVBQS9CLEVBQTJDO0FBQ3ZDdDJCLE9BQUcsQ0FBQ3MyQixJQUFKLENBQVNGLGNBQVQsRUFBeUJDLGNBQXpCO0FBQ0g7QUFDSjs7QUFFRCxJQUFJRSxLQUFLO0FBQUc7QUFBZSxZQUFZO0FBQ25DLFdBQVNBLEtBQVQsR0FBaUIsQ0FDaEIsQ0FGa0MsQ0FHbkM7OztBQUNBQSxPQUFLLENBQUNDLE9BQU4sR0FBZ0IsVUFBVUMsU0FBVixFQUFxQjtBQUNqQyxTQUFLQyxVQUFMLENBQWdCRCxTQUFTLENBQUN4NkIsU0FBMUI7QUFDSCxHQUZELENBSm1DLENBT25DOzs7QUFDQXM2QixPQUFLLENBQUNHLFVBQU4sR0FBbUIsVUFBVUMsT0FBVixFQUFtQjtBQUNsQyxRQUFJMUQsS0FBSyxHQUFHLElBQVo7O0FBQ0ExZixVQUFNLENBQUNxakIsbUJBQVAsQ0FBMkIsS0FBSzM2QixTQUFoQyxFQUEyQ3dKLE9BQTNDLENBQW1ELFVBQVVuRyxJQUFWLEVBQWdCO0FBQy9ELFVBQUksQ0FBQ3EzQixPQUFPLENBQUNyM0IsSUFBRCxDQUFaLEVBQW9CO0FBQUU7QUFDbEJxM0IsZUFBTyxDQUFDcjNCLElBQUQsQ0FBUCxHQUFnQjJ6QixLQUFLLENBQUNoM0IsU0FBTixDQUFnQnFELElBQWhCLENBQWhCO0FBQ0g7QUFDSixLQUpEO0FBS0gsR0FQRDtBQVFBOzs7Ozs7QUFJQWkzQixPQUFLLENBQUNNLE9BQU4sR0FBZ0IsVUFBVUosU0FBVixFQUFxQjtBQUNqQyxRQUFJeEQsS0FBSyxHQUFHLElBQVo7O0FBQ0ExZixVQUFNLENBQUNxakIsbUJBQVAsQ0FBMkIsS0FBSzM2QixTQUFoQyxFQUEyQ3dKLE9BQTNDLENBQW1ELFVBQVVuRyxJQUFWLEVBQWdCO0FBQy9EbTNCLGVBQVMsQ0FBQ3g2QixTQUFWLENBQW9CcUQsSUFBcEIsSUFBNEIyekIsS0FBSyxDQUFDaDNCLFNBQU4sQ0FBZ0JxRCxJQUFoQixDQUE1QjtBQUNILEtBRkQ7QUFHSCxHQUxEOztBQU1BLFNBQU9pM0IsS0FBUDtBQUNILENBM0IwQixFQUEzQjtBQTZCQTs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsSUFBSU8sWUFBWTtBQUFHO0FBQWUsVUFBVUMsTUFBVixFQUFrQjtBQUNoRG5qQixXQUFTLENBQUNrakIsWUFBRCxFQUFlQyxNQUFmLENBQVQ7O0FBQ0EsV0FBU0QsWUFBVCxHQUF3QjtBQUNwQixXQUFPQyxNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDbnRCLEtBQVAsQ0FBYSxJQUFiLEVBQW1CbUgsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRCtsQixjQUFZLENBQUM3NkIsU0FBYixDQUF1QnpCLEVBQXZCLEdBQTRCLFVBQVUzQyxJQUFWLEVBQWdCOE0sT0FBaEIsRUFBeUI7QUFDakRxeUIsYUFBUyxDQUFDLEtBQUtDLFNBQUwsS0FBbUIsS0FBS0EsU0FBTCxHQUFpQixFQUFwQyxDQUFELEVBQTBDcC9CLElBQTFDLEVBQWdEOE0sT0FBaEQsQ0FBVDtBQUNBLFdBQU8sSUFBUCxDQUZpRCxDQUVwQztBQUNoQixHQUhELENBTGdELENBU2hEOzs7QUFDQW15QixjQUFZLENBQUM3NkIsU0FBYixDQUF1Qmk3QixHQUF2QixHQUE2QixVQUFVci9CLElBQVYsRUFBZ0I4TSxPQUFoQixFQUF5QjtBQUNsRHF5QixhQUFTLENBQUMsS0FBS0csWUFBTCxLQUFzQixLQUFLQSxZQUFMLEdBQW9CLEVBQTFDLENBQUQsRUFBZ0R0L0IsSUFBaEQsRUFBc0Q4TSxPQUF0RCxDQUFUO0FBQ0EsV0FBTyxJQUFQLENBRmtELENBRXJDO0FBQ2hCLEdBSEQ7O0FBSUFteUIsY0FBWSxDQUFDNzZCLFNBQWIsQ0FBdUJtN0IsR0FBdkIsR0FBNkIsVUFBVXYvQixJQUFWLEVBQWdCOE0sT0FBaEIsRUFBeUI7QUFDbEQsUUFBSSxLQUFLc3lCLFNBQVQsRUFBb0I7QUFDaEJJLG9CQUFjLENBQUMsS0FBS0osU0FBTixFQUFpQnAvQixJQUFqQixFQUF1QjhNLE9BQXZCLENBQWQ7QUFDSDs7QUFDRCxRQUFJLEtBQUt3eUIsWUFBVCxFQUF1QjtBQUNuQkUsb0JBQWMsQ0FBQyxLQUFLRixZQUFOLEVBQW9CdC9CLElBQXBCLEVBQTBCOE0sT0FBMUIsQ0FBZDtBQUNIOztBQUNELFdBQU8sSUFBUCxDQVBrRCxDQU9yQztBQUNoQixHQVJEOztBQVNBbXlCLGNBQVksQ0FBQzc2QixTQUFiLENBQXVCaE4sT0FBdkIsR0FBaUMsVUFBVTRJLElBQVYsRUFBZ0I7QUFDN0MsUUFBSThZLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSUcsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDSCxVQUFJLENBQUNHLEVBQUUsR0FBRyxDQUFOLENBQUosR0FBZUMsU0FBUyxDQUFDRCxFQUFELENBQXhCO0FBQ0g7O0FBQ0QsU0FBS3dtQixXQUFMLENBQWlCei9CLElBQWpCLEVBQXVCLElBQXZCLEVBQTZCOFksSUFBN0I7QUFDQSxXQUFPLElBQVAsQ0FONkMsQ0FNaEM7QUFDaEIsR0FQRDs7QUFRQW1tQixjQUFZLENBQUM3NkIsU0FBYixDQUF1QnE3QixXQUF2QixHQUFxQyxVQUFVei9CLElBQVYsRUFBZ0J1WixPQUFoQixFQUF5QlQsSUFBekIsRUFBK0I7QUFDaEUsUUFBSSxLQUFLc21CLFNBQVQsRUFBb0I7QUFDaEJ6bUIsY0FBUSxDQUFDLEtBQUt5bUIsU0FBTCxDQUFlcC9CLElBQWYsQ0FBRCxFQUF1QnVaLE9BQXZCLEVBQWdDVCxJQUFoQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLd21CLFlBQVQsRUFBdUI7QUFDbkIzbUIsY0FBUSxDQUFDLEtBQUsybUIsWUFBTCxDQUFrQnQvQixJQUFsQixDQUFELEVBQTBCdVosT0FBMUIsRUFBbUNULElBQW5DLENBQVI7QUFDQSxhQUFPLEtBQUt3bUIsWUFBTCxDQUFrQnQvQixJQUFsQixDQUFQLENBRm1CLENBRWE7QUFDbkM7O0FBQ0QsV0FBTyxJQUFQLENBUmdFLENBUW5EO0FBQ2hCLEdBVEQ7O0FBVUFpL0IsY0FBWSxDQUFDNzZCLFNBQWIsQ0FBdUJzN0IsV0FBdkIsR0FBcUMsVUFBVTEvQixJQUFWLEVBQWdCO0FBQ2pELFdBQVEsS0FBS28vQixTQUFMLElBQWtCLEtBQUtBLFNBQUwsQ0FBZXAvQixJQUFmLENBQWxCLElBQTBDLEtBQUtvL0IsU0FBTCxDQUFlcC9CLElBQWYsRUFBcUIwRSxNQUFoRSxJQUNGLEtBQUs0NkIsWUFBTCxJQUFxQixLQUFLQSxZQUFMLENBQWtCdC9CLElBQWxCLENBQXJCLElBQWdELEtBQUtzL0IsWUFBTCxDQUFrQnQvQixJQUFsQixFQUF3QjBFLE1BRDdFO0FBRUgsR0FIRDs7QUFJQSxTQUFPdTZCLFlBQVA7QUFDSCxDQTlDaUMsQ0E4Q2hDUCxLQTlDZ0MsQ0FBbEM7O0FBK0NBLFNBQVNTLFNBQVQsQ0FBbUJsaEIsSUFBbkIsRUFBeUJqZSxJQUF6QixFQUErQjhNLE9BQS9CLEVBQXdDO0FBQ3BDLEdBQUNtUixJQUFJLENBQUNqZSxJQUFELENBQUosS0FBZWllLElBQUksQ0FBQ2plLElBQUQsQ0FBSixHQUFhLEVBQTVCLENBQUQsRUFDSzRHLElBREwsQ0FDVWtHLE9BRFY7QUFFSDs7QUFDRCxTQUFTMHlCLGNBQVQsQ0FBd0J2aEIsSUFBeEIsRUFBOEJqZSxJQUE5QixFQUFvQzhNLE9BQXBDLEVBQTZDO0FBQ3pDLE1BQUlBLE9BQUosRUFBYTtBQUNULFFBQUltUixJQUFJLENBQUNqZSxJQUFELENBQVIsRUFBZ0I7QUFDWmllLFVBQUksQ0FBQ2plLElBQUQsQ0FBSixHQUFhaWUsSUFBSSxDQUFDamUsSUFBRCxDQUFKLENBQVcwdkIsTUFBWCxDQUFrQixVQUFValksSUFBVixFQUFnQjtBQUMzQyxlQUFPQSxJQUFJLEtBQUszSyxPQUFoQjtBQUNILE9BRlksQ0FBYjtBQUdIO0FBQ0osR0FORCxNQU9LO0FBQ0QsV0FBT21SLElBQUksQ0FBQ2plLElBQUQsQ0FBWCxDQURDLENBQ2tCO0FBQ3RCO0FBQ0o7QUFFRDs7Ozs7OztBQUtBLElBQUkyL0IsYUFBYTtBQUFHO0FBQWUsWUFBWTtBQUMzQyxXQUFTQSxhQUFULENBQXVCQyxRQUF2QixFQUFpQ3g2QixHQUFqQyxFQUFzQ3k2QixZQUF0QyxFQUFvREMsVUFBcEQsRUFBZ0U7QUFDNUQsU0FBS0YsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLeDZCLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUt5NkIsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNILEdBTjBDLENBTzNDO0FBQ0E7OztBQUNBSCxlQUFhLENBQUN2N0IsU0FBZCxDQUF3QjI3QixLQUF4QixHQUFnQyxZQUFZO0FBQ3hDLFFBQUlILFFBQVEsR0FBRyxLQUFLQSxRQUFwQjtBQUNBLFFBQUlJLGdCQUFnQixHQUFHLEtBQUtBLGdCQUFMLEdBQ25CSixRQUFRLENBQUNsMkIscUJBQVQsRUFESixDQUZ3QyxDQUdGOztBQUN0QyxRQUFJLEtBQUttMkIsWUFBVCxFQUF1QjtBQUNuQixXQUFLSSxrQkFBTCxDQUF3QkQsZ0JBQWdCLENBQUN6aEMsSUFBekM7QUFDSDs7QUFDRCxRQUFJLEtBQUt1aEMsVUFBVCxFQUFxQjtBQUNqQixXQUFLSSxnQkFBTCxDQUFzQkYsZ0JBQWdCLENBQUNsNEIsR0FBdkM7QUFDSDtBQUNKLEdBVkQsQ0FUMkMsQ0FvQjNDOzs7QUFDQTYzQixlQUFhLENBQUN2N0IsU0FBZCxDQUF3QjY3QixrQkFBeEIsR0FBNkMsVUFBVUUsZ0JBQVYsRUFBNEI7QUFDckUsUUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxRQUFJQyxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlwbkIsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLak4sR0FBM0IsRUFBZ0M2VCxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUF4QyxFQUFnRHVVLEVBQUUsRUFBbEQsRUFBc0Q7QUFDbEQsVUFBSXBaLEVBQUUsR0FBR3dTLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBWDtBQUNBLFVBQUlwUixJQUFJLEdBQUdoSSxFQUFFLENBQUM2SixxQkFBSCxFQUFYO0FBQ0EwMkIsV0FBSyxDQUFDeDVCLElBQU4sQ0FBV2lCLElBQUksQ0FBQ3RKLElBQUwsR0FBWTRoQyxnQkFBdkI7QUFDQUUsWUFBTSxDQUFDejVCLElBQVAsQ0FBWWlCLElBQUksQ0FBQ3BKLEtBQUwsR0FBYTBoQyxnQkFBekI7QUFDSDs7QUFDRCxTQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDSCxHQVhELENBckIyQyxDQWlDM0M7OztBQUNBVixlQUFhLENBQUN2N0IsU0FBZCxDQUF3Qjg3QixnQkFBeEIsR0FBMkMsVUFBVUksZUFBVixFQUEyQjtBQUNsRSxRQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBLFFBQUlDLE9BQU8sR0FBRyxFQUFkOztBQUNBLFNBQUssSUFBSXZuQixFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUtqTixHQUEzQixFQUFnQzZULEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQXhDLEVBQWdEdVUsRUFBRSxFQUFsRCxFQUFzRDtBQUNsRCxVQUFJcFosRUFBRSxHQUFHd1MsRUFBRSxDQUFDNEcsRUFBRCxDQUFYO0FBQ0EsVUFBSXBSLElBQUksR0FBR2hJLEVBQUUsQ0FBQzZKLHFCQUFILEVBQVg7QUFDQTYyQixVQUFJLENBQUMzNUIsSUFBTCxDQUFVaUIsSUFBSSxDQUFDQyxHQUFMLEdBQVd3NEIsZUFBckI7QUFDQUUsYUFBTyxDQUFDNTVCLElBQVIsQ0FBYWlCLElBQUksQ0FBQ0UsTUFBTCxHQUFjdTRCLGVBQTNCO0FBQ0g7O0FBQ0QsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0gsR0FYRCxDQWxDMkMsQ0E4QzNDO0FBQ0E7OztBQUNBYixlQUFhLENBQUN2N0IsU0FBZCxDQUF3QnE4QixXQUF4QixHQUFzQyxVQUFVQyxZQUFWLEVBQXdCO0FBQzFELFFBQUlOLEtBQUssR0FBRyxLQUFLQSxLQUFqQjtBQUNBLFFBQUlDLE1BQU0sR0FBRyxLQUFLQSxNQUFsQjtBQUNBLFFBQUk1bkIsR0FBRyxHQUFHMm5CLEtBQUssQ0FBQzE3QixNQUFoQjtBQUNBLFFBQUlqQyxDQUFKOztBQUNBLFNBQUtBLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR2dXLEdBQWhCLEVBQXFCaFcsQ0FBQyxFQUF0QixFQUEwQjtBQUN0QixVQUFJaStCLFlBQVksSUFBSU4sS0FBSyxDQUFDMzlCLENBQUQsQ0FBckIsSUFBNEJpK0IsWUFBWSxHQUFHTCxNQUFNLENBQUM1OUIsQ0FBRCxDQUFyRCxFQUEwRDtBQUN0RCxlQUFPQSxDQUFQO0FBQ0g7QUFDSjtBQUNKLEdBVkQsQ0FoRDJDLENBMkQzQztBQUNBOzs7QUFDQWs5QixlQUFhLENBQUN2N0IsU0FBZCxDQUF3QnU4QixVQUF4QixHQUFxQyxVQUFVQyxXQUFWLEVBQXVCO0FBQ3hELFFBQUlMLElBQUksR0FBRyxLQUFLQSxJQUFoQjtBQUNBLFFBQUlDLE9BQU8sR0FBRyxLQUFLQSxPQUFuQjtBQUNBLFFBQUkvbkIsR0FBRyxHQUFHOG5CLElBQUksQ0FBQzc3QixNQUFmO0FBQ0EsUUFBSWpDLENBQUo7O0FBQ0EsU0FBS0EsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHZ1csR0FBaEIsRUFBcUJoVyxDQUFDLEVBQXRCLEVBQTBCO0FBQ3RCLFVBQUltK0IsV0FBVyxJQUFJTCxJQUFJLENBQUM5OUIsQ0FBRCxDQUFuQixJQUEwQm0rQixXQUFXLEdBQUdKLE9BQU8sQ0FBQy85QixDQUFELENBQW5ELEVBQXdEO0FBQ3BELGVBQU9BLENBQVA7QUFDSDtBQUNKO0FBQ0osR0FWRCxDQTdEMkMsQ0F3RTNDOzs7QUFDQWs5QixlQUFhLENBQUN2N0IsU0FBZCxDQUF3Qnk4QixRQUF4QixHQUFtQyxVQUFVQyxTQUFWLEVBQXFCO0FBQ3BELFdBQU8sS0FBS1QsTUFBTCxDQUFZUyxTQUFaLElBQXlCLEtBQUtWLEtBQUwsQ0FBV1UsU0FBWCxDQUFoQztBQUNILEdBRkQsQ0F6RTJDLENBNEUzQzs7O0FBQ0FuQixlQUFhLENBQUN2N0IsU0FBZCxDQUF3QjI4QixTQUF4QixHQUFvQyxVQUFVQyxRQUFWLEVBQW9CO0FBQ3BELFdBQU8sS0FBS1IsT0FBTCxDQUFhUSxRQUFiLElBQXlCLEtBQUtULElBQUwsQ0FBVVMsUUFBVixDQUFoQztBQUNILEdBRkQ7O0FBR0EsU0FBT3JCLGFBQVA7QUFDSCxDQWpGa0MsRUFBbkM7QUFtRkE7Ozs7Ozs7QUFLQSxJQUFJc0IsZ0JBQWdCO0FBQUc7QUFBZSxZQUFZO0FBQzlDLFdBQVNBLGdCQUFULEdBQTRCLENBQzNCOztBQUNEQSxrQkFBZ0IsQ0FBQzc4QixTQUFqQixDQUEyQjg4QixlQUEzQixHQUE2QyxZQUFZO0FBQ3JELFdBQU8sS0FBS0MsZUFBTCxLQUF5QixLQUFLQyxlQUFMLEVBQWhDO0FBQ0gsR0FGRDs7QUFHQUgsa0JBQWdCLENBQUM3OEIsU0FBakIsQ0FBMkJpOUIsZ0JBQTNCLEdBQThDLFlBQVk7QUFDdEQsV0FBTyxLQUFLQyxjQUFMLEtBQXdCLEtBQUtDLGNBQUwsRUFBL0I7QUFDSCxHQUZEOztBQUdBTixrQkFBZ0IsQ0FBQzc4QixTQUFqQixDQUEyQm85QixtQkFBM0IsR0FBaUQsWUFBWTtBQUN6RCxXQUFPLEtBQUtOLGVBQUwsS0FBeUIsQ0FBaEM7QUFDSCxHQUZEOztBQUdBRCxrQkFBZ0IsQ0FBQzc4QixTQUFqQixDQUEyQnE5QixxQkFBM0IsR0FBbUQsWUFBWTtBQUMzRCxXQUFPLEtBQUtKLGdCQUFMLEtBQTBCLENBQWpDO0FBQ0gsR0FGRDs7QUFHQUosa0JBQWdCLENBQUM3OEIsU0FBakIsQ0FBMkJzOUIsV0FBM0IsR0FBeUMsWUFBWTtBQUNqRCxXQUFPLEtBQUtDLFlBQUwsS0FBc0IsQ0FBN0I7QUFDSCxHQUZEOztBQUdBVixrQkFBZ0IsQ0FBQzc4QixTQUFqQixDQUEyQnc5QixhQUEzQixHQUEyQyxZQUFZO0FBQ25ELFdBQU8sS0FBS0QsWUFBTCxLQUFzQixLQUFLVCxlQUFMLEVBQTdCO0FBQ0gsR0FGRDs7QUFHQUQsa0JBQWdCLENBQUM3OEIsU0FBakIsQ0FBMkJ5OUIsYUFBM0IsR0FBMkMsWUFBWTtBQUNuRCxXQUFPLEtBQUtDLGFBQUwsS0FBdUIsQ0FBOUI7QUFDSCxHQUZEOztBQUdBYixrQkFBZ0IsQ0FBQzc4QixTQUFqQixDQUEyQjI5QixjQUEzQixHQUE0QyxZQUFZO0FBQ3BELFdBQU8sS0FBS0QsYUFBTCxLQUF1QixLQUFLVCxnQkFBTCxFQUE5QjtBQUNILEdBRkQ7O0FBR0EsU0FBT0osZ0JBQVA7QUFDSCxDQTVCcUMsRUFBdEM7O0FBNkJBLElBQUllLHVCQUF1QjtBQUFHO0FBQWUsVUFBVTlDLE1BQVYsRUFBa0I7QUFDM0RuakIsV0FBUyxDQUFDaW1CLHVCQUFELEVBQTBCOUMsTUFBMUIsQ0FBVDs7QUFDQSxXQUFTOEMsdUJBQVQsQ0FBaUNuaUMsRUFBakMsRUFBcUM7QUFDakMsUUFBSXU3QixLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosS0FBcUIsSUFBakM7O0FBQ0E4MkIsU0FBSyxDQUFDdjdCLEVBQU4sR0FBV0EsRUFBWDtBQUNBLFdBQU91N0IsS0FBUDtBQUNIOztBQUNENEcseUJBQXVCLENBQUM1OUIsU0FBeEIsQ0FBa0N1OUIsWUFBbEMsR0FBaUQsWUFBWTtBQUN6RCxXQUFPLEtBQUs5aEMsRUFBTCxDQUFRb2lDLFNBQWY7QUFDSCxHQUZEOztBQUdBRCx5QkFBdUIsQ0FBQzU5QixTQUF4QixDQUFrQzA5QixhQUFsQyxHQUFrRCxZQUFZO0FBQzFELFdBQU8sS0FBS2ppQyxFQUFMLENBQVFxaUMsVUFBZjtBQUNILEdBRkQ7O0FBR0FGLHlCQUF1QixDQUFDNTlCLFNBQXhCLENBQWtDKzlCLFlBQWxDLEdBQWlELFVBQVVyNkIsR0FBVixFQUFlO0FBQzVELFNBQUtqSSxFQUFMLENBQVFvaUMsU0FBUixHQUFvQm42QixHQUFwQjtBQUNILEdBRkQ7O0FBR0FrNkIseUJBQXVCLENBQUM1OUIsU0FBeEIsQ0FBa0NnK0IsYUFBbEMsR0FBa0QsVUFBVTdqQyxJQUFWLEVBQWdCO0FBQzlELFNBQUtzQixFQUFMLENBQVFxaUMsVUFBUixHQUFxQjNqQyxJQUFyQjtBQUNILEdBRkQ7O0FBR0F5akMseUJBQXVCLENBQUM1OUIsU0FBeEIsQ0FBa0NrOUIsY0FBbEMsR0FBbUQsWUFBWTtBQUMzRCxXQUFPLEtBQUt6aEMsRUFBTCxDQUFRd2lDLFdBQWY7QUFDSCxHQUZEOztBQUdBTCx5QkFBdUIsQ0FBQzU5QixTQUF4QixDQUFrQys4QixlQUFsQyxHQUFvRCxZQUFZO0FBQzVELFdBQU8sS0FBS3RoQyxFQUFMLENBQVF5aUMsWUFBZjtBQUNILEdBRkQ7O0FBR0FOLHlCQUF1QixDQUFDNTlCLFNBQXhCLENBQWtDZzlCLGVBQWxDLEdBQW9ELFlBQVk7QUFDNUQsV0FBTyxLQUFLdmhDLEVBQUwsQ0FBUWtMLFlBQWY7QUFDSCxHQUZEOztBQUdBaTNCLHlCQUF1QixDQUFDNTlCLFNBQXhCLENBQWtDbTlCLGNBQWxDLEdBQW1ELFlBQVk7QUFDM0QsV0FBTyxLQUFLMWhDLEVBQUwsQ0FBUStLLFdBQWY7QUFDSCxHQUZEOztBQUdBLFNBQU9vM0IsdUJBQVA7QUFDSCxDQWhDNEMsQ0FnQzNDZixnQkFoQzJDLENBQTdDOztBQWlDQSxJQUFJc0Isc0JBQXNCO0FBQUc7QUFBZSxVQUFVckQsTUFBVixFQUFrQjtBQUMxRG5qQixXQUFTLENBQUN3bUIsc0JBQUQsRUFBeUJyRCxNQUF6QixDQUFUOztBQUNBLFdBQVNxRCxzQkFBVCxHQUFrQztBQUM5QixXQUFPckQsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ250QixLQUFQLENBQWEsSUFBYixFQUFtQm1ILFNBQW5CLENBQW5CLElBQW9ELElBQTNEO0FBQ0g7O0FBQ0RxcEIsd0JBQXNCLENBQUNuK0IsU0FBdkIsQ0FBaUN1OUIsWUFBakMsR0FBZ0QsWUFBWTtBQUN4RCxXQUFPMzNCLE1BQU0sQ0FBQzRCLFdBQWQ7QUFDSCxHQUZEOztBQUdBMjJCLHdCQUFzQixDQUFDbitCLFNBQXZCLENBQWlDMDlCLGFBQWpDLEdBQWlELFlBQVk7QUFDekQsV0FBTzkzQixNQUFNLENBQUMyQixXQUFkO0FBQ0gsR0FGRDs7QUFHQTQyQix3QkFBc0IsQ0FBQ24rQixTQUF2QixDQUFpQys5QixZQUFqQyxHQUFnRCxVQUFVbDBCLENBQVYsRUFBYTtBQUN6RGpFLFVBQU0sQ0FBQ3c0QixNQUFQLENBQWN4NEIsTUFBTSxDQUFDMkIsV0FBckIsRUFBa0NzQyxDQUFsQztBQUNILEdBRkQ7O0FBR0FzMEIsd0JBQXNCLENBQUNuK0IsU0FBdkIsQ0FBaUNnK0IsYUFBakMsR0FBaUQsVUFBVW4wQixDQUFWLEVBQWE7QUFDMURqRSxVQUFNLENBQUN3NEIsTUFBUCxDQUFjdjBCLENBQWQsRUFBaUJqRSxNQUFNLENBQUM0QixXQUF4QjtBQUNILEdBRkQ7O0FBR0EyMkIsd0JBQXNCLENBQUNuK0IsU0FBdkIsQ0FBaUNrOUIsY0FBakMsR0FBa0QsWUFBWTtBQUMxRCxXQUFPcnBDLFFBQVEsQ0FBQytOLGVBQVQsQ0FBeUJxOEIsV0FBaEM7QUFDSCxHQUZEOztBQUdBRSx3QkFBc0IsQ0FBQ24rQixTQUF2QixDQUFpQys4QixlQUFqQyxHQUFtRCxZQUFZO0FBQzNELFdBQU9scEMsUUFBUSxDQUFDK04sZUFBVCxDQUF5QnM4QixZQUFoQztBQUNILEdBRkQ7O0FBR0FDLHdCQUFzQixDQUFDbitCLFNBQXZCLENBQWlDZzlCLGVBQWpDLEdBQW1ELFlBQVk7QUFDM0QsV0FBT25wQyxRQUFRLENBQUMrTixlQUFULENBQXlCK0UsWUFBaEM7QUFDSCxHQUZEOztBQUdBdzNCLHdCQUFzQixDQUFDbitCLFNBQXZCLENBQWlDbTlCLGNBQWpDLEdBQWtELFlBQVk7QUFDMUQsV0FBT3RwQyxRQUFRLENBQUMrTixlQUFULENBQXlCNEUsV0FBaEM7QUFDSCxHQUZEOztBQUdBLFNBQU8yM0Isc0JBQVA7QUFDSCxDQTlCMkMsQ0E4QjFDdEIsZ0JBOUIwQyxDQUE1QztBQWdDQTs7Ozs7QUFHQSxJQUFJd0IsZUFBZTtBQUFHO0FBQWUsVUFBVXZELE1BQVYsRUFBa0I7QUFDbkRuakIsV0FBUyxDQUFDMG1CLGVBQUQsRUFBa0J2RCxNQUFsQixDQUFUOztBQUNBLFdBQVN1RCxlQUFULENBQXlCbjJCLFNBQXpCLEVBQW9DRCxTQUFwQyxFQUErQztBQUMzQyxRQUFJK3VCLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmxCLGFBQWEsQ0FBQyxLQUFELEVBQVE7QUFDL0NKLGVBQVMsRUFBRTtBQURvQyxLQUFSLENBQS9CLEtBRUwsSUFGUDs7QUFHQW80QixTQUFLLENBQUM5dUIsU0FBTixHQUFrQkEsU0FBbEI7QUFDQTh1QixTQUFLLENBQUMvdUIsU0FBTixHQUFrQkEsU0FBbEI7O0FBQ0ErdUIsU0FBSyxDQUFDc0gsYUFBTjs7QUFDQSxXQUFPdEgsS0FBUDtBQUNILEdBVmtELENBV25EOzs7QUFDQXFILGlCQUFlLENBQUNyK0IsU0FBaEIsQ0FBMEJ1K0IsS0FBMUIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLQyxTQUFMLENBQWUsTUFBZjtBQUNBLFNBQUtGLGFBQUw7QUFDSCxHQUhEOztBQUlBRCxpQkFBZSxDQUFDcitCLFNBQWhCLENBQTBCeStCLE9BQTFCLEdBQW9DLFlBQVk7QUFDNUN2OUIsaUJBQWEsQ0FBQyxLQUFLekYsRUFBTixDQUFiO0FBQ0gsR0FGRCxDQWhCbUQsQ0FtQm5EO0FBQ0E7OztBQUNBNGlDLGlCQUFlLENBQUNyK0IsU0FBaEIsQ0FBMEJzK0IsYUFBMUIsR0FBMEMsWUFBWTtBQUNsRGovQixjQUFVLENBQUMsS0FBSzVELEVBQU4sRUFBVTtBQUNoQnlNLGVBQVMsRUFBRSxLQUFLQSxTQURBO0FBRWhCRCxlQUFTLEVBQUUsS0FBS0E7QUFGQSxLQUFWLENBQVY7QUFJSCxHQUxELENBckJtRCxDQTJCbkQ7QUFDQTtBQUNBOzs7QUFDQW8yQixpQkFBZSxDQUFDcitCLFNBQWhCLENBQTBCMCtCLFlBQTFCLEdBQXlDLFVBQVU3dEIsZUFBVixFQUEyQjtBQUNoRSxRQUFJM0ksU0FBUyxHQUFHLEtBQUtBLFNBQXJCO0FBQ0EsUUFBSUQsU0FBUyxHQUFHLEtBQUtBLFNBQXJCO0FBQ0E0SSxtQkFBZSxHQUFHQSxlQUFlLElBQUksS0FBSzh0QixrQkFBTCxFQUFyQzs7QUFDQSxRQUFJejJCLFNBQVMsS0FBSyxNQUFsQixFQUEwQjtBQUN0QkEsZUFBUyxHQUFJMkksZUFBZSxDQUFDbE4sTUFBaEIsSUFBMEI7QUFDbkMsV0FBSzA1QixxQkFBTCxFQURRLENBQ3FCO0FBRHJCLFFBRVIsUUFGUSxHQUVHLFFBRmY7QUFHSDs7QUFDRCxRQUFJcDFCLFNBQVMsS0FBSyxNQUFsQixFQUEwQjtBQUN0QkEsZUFBUyxHQUFJNEksZUFBZSxDQUFDMVcsSUFBaEIsSUFBd0IwVyxlQUFlLENBQUN4VyxLQUF4QyxJQUFpRDtBQUMxRCxXQUFLK2lDLG1CQUFMLEVBRFEsQ0FDbUI7QUFEbkIsUUFFUixRQUZRLEdBRUcsUUFGZjtBQUdIOztBQUNELzlCLGNBQVUsQ0FBQyxLQUFLNUQsRUFBTixFQUFVO0FBQUV5TSxlQUFTLEVBQUVBLFNBQWI7QUFBd0JELGVBQVMsRUFBRUE7QUFBbkMsS0FBVixDQUFWO0FBQ0gsR0FmRDs7QUFnQkFvMkIsaUJBQWUsQ0FBQ3IrQixTQUFoQixDQUEwQncrQixTQUExQixHQUFzQyxVQUFVNzJCLE1BQVYsRUFBa0I7QUFDcER2RSxrQkFBYyxDQUFDLEtBQUszSCxFQUFOLEVBQVUsUUFBVixFQUFvQmtNLE1BQXBCLENBQWQ7QUFDSCxHQUZEOztBQUdBMDJCLGlCQUFlLENBQUNyK0IsU0FBaEIsQ0FBMEIyK0Isa0JBQTFCLEdBQStDLFlBQVk7QUFDdkQsUUFBSXIzQixLQUFLLEdBQUc3QixZQUFZLENBQUMsS0FBS2hLLEVBQU4sQ0FBeEI7QUFDQSxXQUFPO0FBQ0h0QixVQUFJLEVBQUVtTixLQUFLLENBQUNWLGFBRFQ7QUFFSHZNLFdBQUssRUFBRWlOLEtBQUssQ0FBQ1QsY0FGVjtBQUdIbEQsWUFBTSxFQUFFMkQsS0FBSyxDQUFDYjtBQUhYLEtBQVA7QUFLSCxHQVBEOztBQVFBLFNBQU80M0IsZUFBUDtBQUNILENBMURvQyxDQTBEbkNULHVCQTFEbUMsQ0FBckM7O0FBNERBLElBQUlnQixLQUFLO0FBQUc7QUFBZSxZQUFZO0FBQ25DLFdBQVNBLEtBQVQsQ0FBZUMsZUFBZixFQUFnQztBQUM1QixTQUFLQSxlQUFMLEdBQXVCQSxlQUF2QjtBQUNBLFNBQUtDLG1CQUFMO0FBQ0g7O0FBQ0RGLE9BQUssQ0FBQzUrQixTQUFOLENBQWdCOCtCLG1CQUFoQixHQUFzQyxZQUFZO0FBQzlDLFFBQUksS0FBS0Msa0JBQVQsRUFBNkI7QUFDekIsV0FBS0MsZUFBTCxDQUFxQixLQUFLSCxlQUFMLENBQXFCLEtBQUtFLGtCQUExQixDQUFyQjtBQUNIO0FBQ0osR0FKRDs7QUFLQUgsT0FBSyxDQUFDNStCLFNBQU4sQ0FBZ0JnL0IsZUFBaEIsR0FBa0MsVUFBVUMsZ0JBQVYsRUFBNEI7QUFDMUQsUUFBSUMsZUFBSjtBQUNBLFFBQUlDLFVBQUo7O0FBQ0EsUUFBSSxPQUFPRixnQkFBUCxLQUE0QixRQUE1QixJQUF3Q0EsZ0JBQTVDLEVBQThEO0FBQUU7QUFDNURDLHFCQUFlLEdBQUdwbkIsUUFBUSxDQUFDLEVBQUQsRUFBSyxLQUFLc25CLFdBQVYsQ0FBMUI7O0FBQ0EsV0FBS0QsVUFBTCxJQUFtQkYsZ0JBQW5CLEVBQXFDO0FBQ2pDQyx1QkFBZSxDQUFDQyxVQUFELENBQWYsR0FBOEIsS0FBS0UsdUJBQUwsQ0FBNkJKLGdCQUFnQixDQUFDRSxVQUFELENBQTdDLENBQTlCO0FBQ0g7O0FBQ0QsV0FBS0MsV0FBTCxHQUFtQkYsZUFBbkI7QUFDSCxLQU5ELE1BT0ssSUFBSUQsZ0JBQWdCLEtBQUssS0FBekIsRUFBZ0M7QUFDakMsV0FBS0csV0FBTCxHQUFtQixFQUFuQjtBQUNIO0FBQ0osR0FiRDs7QUFjQVIsT0FBSyxDQUFDNStCLFNBQU4sQ0FBZ0JxL0IsdUJBQWhCLEdBQTBDLFVBQVV6Z0MsU0FBVixFQUFxQjtBQUMzRCxRQUFJazBCLE1BQU0sR0FBRyxLQUFLd00sa0JBQWxCOztBQUNBLFFBQUl4TSxNQUFNLElBQUlsMEIsU0FBUyxDQUFDd2xCLE9BQVYsQ0FBa0IwTyxNQUFsQixNQUE4QixDQUE1QyxFQUErQztBQUFFO0FBQzdDbDBCLGVBQVMsR0FBR2swQixNQUFNLEdBQUdsMEIsU0FBckI7QUFDSDs7QUFDRCxXQUFPQSxTQUFQO0FBQ0gsR0FORDs7QUFPQWdnQyxPQUFLLENBQUM1K0IsU0FBTixDQUFnQis1QixRQUFoQixHQUEyQixVQUFVamtCLEdBQVYsRUFBZTtBQUN0QyxXQUFPLEtBQUs0akIsT0FBTCxDQUFhNWpCLEdBQWIsS0FBcUIsRUFBNUI7QUFDSCxHQUZEOztBQUdBOG9CLE9BQUssQ0FBQzUrQixTQUFOLENBQWdCdS9CLFlBQWhCLEdBQStCLFVBQVVKLFVBQVYsRUFBc0I7QUFDakQsUUFBSXZnQyxTQUFTLEdBQUcsS0FBS3dnQyxXQUFMLENBQWlCRCxVQUFqQixDQUFoQjs7QUFDQSxRQUFJdmdDLFNBQUosRUFBZTtBQUNYLGFBQU8sS0FBSzRnQyxhQUFMLEdBQXFCLEdBQXJCLEdBQTJCNWdDLFNBQWxDO0FBQ0g7O0FBQ0QsV0FBTyxFQUFQO0FBQ0gsR0FORDs7QUFPQWdnQyxPQUFLLENBQUM1K0IsU0FBTixDQUFnQnkvQix3QkFBaEIsR0FBMkMsVUFBVUMsaUJBQVYsRUFBNkI7QUFDcEUsUUFBSTlnQyxTQUFKOztBQUNBLFFBQUksS0FBSytnQyw4QkFBVCxFQUF5QztBQUNyQy9nQyxlQUFTLEdBQUc4Z0MsaUJBQWlCLENBQUMsS0FBS0MsOEJBQU4sQ0FBN0I7O0FBQ0EsVUFBSS9nQyxTQUFKLEVBQWU7QUFDWCxlQUFPLEtBQUs0Z0MsYUFBTCxHQUFxQixHQUFyQixHQUEyQixLQUFLSCx1QkFBTCxDQUE2QnpnQyxTQUE3QixDQUFsQztBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxFQUFQO0FBQ0gsR0FURDs7QUFVQSxTQUFPZ2dDLEtBQVA7QUFDSCxDQXBEMEIsRUFBM0I7O0FBcURBQSxLQUFLLENBQUM1K0IsU0FBTixDQUFnQjA1QixPQUFoQixHQUEwQixFQUExQjtBQUNBa0YsS0FBSyxDQUFDNStCLFNBQU4sQ0FBZ0JvL0IsV0FBaEIsR0FBOEIsRUFBOUI7QUFDQVIsS0FBSyxDQUFDNStCLFNBQU4sQ0FBZ0J3L0IsYUFBaEIsR0FBZ0MsRUFBaEM7QUFDQVosS0FBSyxDQUFDNStCLFNBQU4sQ0FBZ0JzL0Isa0JBQWhCLEdBQXFDLEVBQXJDO0FBRUEsSUFBSU0sSUFBSSxHQUFHLENBQVg7O0FBQ0EsSUFBSUMsU0FBUztBQUFHO0FBQWUsWUFBWTtBQUN2QyxXQUFTQSxTQUFULENBQW1CMXFCLE9BQW5CLEVBQTRCMnFCLE1BQTVCLEVBQW9DO0FBQ2hDO0FBQ0EsUUFBSUEsTUFBSixFQUFZO0FBQ1IzcUIsYUFBTyxDQUFDK1YsSUFBUixHQUFlLElBQWY7QUFDSDs7QUFDRCxTQUFLcUksR0FBTCxHQUFXeGYsTUFBTSxDQUFDNnJCLElBQUksRUFBTCxDQUFqQjtBQUNBLFNBQUt6cUIsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBSzhCLE9BQUwsR0FBZTlCLE9BQU8sQ0FBQzhCLE9BQXZCO0FBQ0EsU0FBS3dpQixLQUFMLEdBQWF0a0IsT0FBTyxDQUFDc2tCLEtBQXJCO0FBQ0EsU0FBS3ZPLElBQUwsR0FBWS9WLE9BQU8sQ0FBQytWLElBQXBCO0FBQ0EsU0FBSzN4QixRQUFMLEdBQWdCNGIsT0FBTyxDQUFDNWIsUUFBeEI7QUFDQSxTQUFLaXFCLEtBQUwsR0FBYSxLQUFLN0csR0FBTCxDQUFTLEtBQVQsTUFBb0IsS0FBakM7QUFDSDs7QUFDRGtqQixXQUFTLENBQUNFLGdCQUFWLEdBQTZCLFVBQVVDLFFBQVYsRUFBb0I7QUFDN0MsU0FBS2hnQyxTQUFMLENBQWVpZ0MsYUFBZixHQUErQm5vQixRQUFRLENBQUMsRUFBRCxFQUFLLEtBQUs5WCxTQUFMLENBQWVpZ0MsYUFBcEIsRUFBbUNELFFBQW5DLENBQXZDO0FBQ0gsR0FGRDs7QUFHQUgsV0FBUyxDQUFDNy9CLFNBQVYsQ0FBb0IyYyxHQUFwQixHQUEwQixVQUFVdFosSUFBVixFQUFnQjtBQUN0QyxXQUFPLEtBQUs4UixPQUFMLENBQWFvTyxPQUFiLENBQXFCbGdCLElBQXJCLENBQVA7QUFDSCxHQUZEOztBQUdBdzhCLFdBQVMsQ0FBQzcvQixTQUFWLENBQW9Ca2dDLFlBQXBCLEdBQW1DLFVBQVVoOUIsS0FBVixFQUFpQjtBQUNoRCxRQUFJK0ssRUFBRSxHQUFHa3lCLFlBQVksQ0FBQyxLQUFLajlCLEtBQUwsSUFBYyxFQUFmLEVBQW1CQSxLQUFuQixFQUEwQixLQUFLKzhCLGFBQS9CLENBQXJCO0FBQUEsUUFBb0VHLFVBQVUsR0FBR255QixFQUFFLENBQUNteUIsVUFBcEY7QUFBQSxRQUFnR0MsVUFBVSxHQUFHcHlCLEVBQUUsQ0FBQ295QixVQUFoSDs7QUFDQSxTQUFLbjlCLEtBQUwsR0FBYW05QixVQUFiOztBQUNBLFFBQUlELFVBQUosRUFBZ0I7QUFDWixXQUFLeGlDLE1BQUwsQ0FBWXlpQyxVQUFaO0FBQ0g7QUFDSixHQU5EOztBQU9BUixXQUFTLENBQUM3L0IsU0FBVixDQUFvQnBDLE1BQXBCLEdBQTZCLFVBQVVzRixLQUFWLEVBQWlCLENBQzdDLENBREQsQ0EzQnVDLENBNkJ2Qzs7O0FBQ0EyOEIsV0FBUyxDQUFDNy9CLFNBQVYsQ0FBb0J5K0IsT0FBcEIsR0FBOEIsWUFBWSxDQUN6QyxDQUREOztBQUVBLFNBQU9vQixTQUFQO0FBQ0gsQ0FqQzhCLEVBQS9COztBQWtDQUEsU0FBUyxDQUFDNy9CLFNBQVYsQ0FBb0JpZ0MsYUFBcEIsR0FBb0MsRUFBcEM7QUFDQTs7Ozs7QUFJQSxTQUFTRSxZQUFULENBQXNCRyxRQUF0QixFQUFnQzFSLFFBQWhDLEVBQTBDcVIsYUFBMUMsRUFBeUQ7QUFDckQsTUFBSUksVUFBVSxHQUFHLEVBQWpCLENBRHFELENBQ2hDOztBQUNyQixNQUFJRCxVQUFVLEdBQUcsS0FBakI7O0FBQ0EsT0FBSyxJQUFJdHFCLEdBQVQsSUFBZ0I4WSxRQUFoQixFQUEwQjtBQUN0QixRQUFJOVksR0FBRyxJQUFJd3FCLFFBQVAsS0FBb0JBLFFBQVEsQ0FBQ3hxQixHQUFELENBQVIsS0FBa0I4WSxRQUFRLENBQUM5WSxHQUFELENBQTFCLElBQ25CbXFCLGFBQWEsQ0FBQ25xQixHQUFELENBQWIsSUFBc0JtcUIsYUFBYSxDQUFDbnFCLEdBQUQsQ0FBYixDQUFtQndxQixRQUFRLENBQUN4cUIsR0FBRCxDQUEzQixFQUFrQzhZLFFBQVEsQ0FBQzlZLEdBQUQsQ0FBMUMsQ0FEdkIsQ0FBSixFQUMrRTtBQUMzRTtBQUNBdXFCLGdCQUFVLENBQUN2cUIsR0FBRCxDQUFWLEdBQWtCd3FCLFFBQVEsQ0FBQ3hxQixHQUFELENBQTFCO0FBQ0gsS0FKRCxNQUtLO0FBQ0R1cUIsZ0JBQVUsQ0FBQ3ZxQixHQUFELENBQVYsR0FBa0I4WSxRQUFRLENBQUM5WSxHQUFELENBQTFCO0FBQ0FzcUIsZ0JBQVUsR0FBRyxJQUFiO0FBQ0g7QUFDSjs7QUFDRCxPQUFLLElBQUl0cUIsR0FBVCxJQUFnQndxQixRQUFoQixFQUEwQjtBQUN0QixRQUFJLEVBQUV4cUIsR0FBRyxJQUFJOFksUUFBVCxDQUFKLEVBQXdCO0FBQ3BCd1IsZ0JBQVUsR0FBRyxJQUFiO0FBQ0E7QUFDSDtBQUNKOztBQUNELFNBQU87QUFBRUEsY0FBVSxFQUFFQSxVQUFkO0FBQTBCQyxjQUFVLEVBQUVBO0FBQXRDLEdBQVA7QUFDSDtBQUVEOzs7Ozs7O0FBS0EsSUFBSUUsYUFBYTtBQUFHO0FBQWUsVUFBVXpGLE1BQVYsRUFBa0I7QUFDakRuakIsV0FBUyxDQUFDNG9CLGFBQUQsRUFBZ0J6RixNQUFoQixDQUFUOztBQUNBLFdBQVN5RixhQUFULENBQXVCcHJCLE9BQXZCLEVBQWdDMVosRUFBaEMsRUFBb0Nxa0MsTUFBcEMsRUFBNEM7QUFDeEMsUUFBSTlJLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEVBQTJCMnFCLE1BQTNCLEtBQXNDLElBQWxEOztBQUNBOUksU0FBSyxDQUFDdjdCLEVBQU4sR0FBV0EsRUFBWDtBQUNBLFdBQU91N0IsS0FBUDtBQUNIOztBQUNEdUosZUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0J5K0IsT0FBeEIsR0FBa0MsWUFBWTtBQUMxQzNELFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCOztBQUNBZ0IsaUJBQWEsQ0FBQyxLQUFLekYsRUFBTixDQUFiO0FBQ0gsR0FIRCxDQVBpRCxDQVdqRDtBQUNBO0FBQ0E7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQTtBQUNBOzs7QUFDQThrQyxlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QndnQyxtQkFBeEIsR0FBOEMsWUFBWSxDQUN6RCxDQUREOztBQUVBRCxlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QnlnQyxRQUF4QixHQUFtQyxVQUFVQyxZQUFWLEVBQXdCQyxXQUF4QixFQUFxQ0MsT0FBckMsRUFBOENDLFFBQTlDLEVBQXdEO0FBQ3ZGLFdBQU8sSUFBUCxDQUR1RixDQUMxRTtBQUNoQixHQUZELENBL0NpRCxDQWtEakQ7QUFDQTs7O0FBQ0FOLGVBQWEsQ0FBQ3ZnQyxTQUFkLENBQXdCc3VCLGtCQUF4QixHQUE2QyxVQUFVQyxXQUFWLEVBQXVCO0FBQ2hFLFFBQUloMUIsUUFBUSxHQUFHLEtBQUtBLFFBQXBCO0FBQ0EsUUFBSTZ6QixXQUFXLEdBQUcsS0FBS2xxQixLQUFMLENBQVdrcUIsV0FBN0IsQ0FGZ0UsQ0FFdEI7O0FBQzFDLFFBQUkvUixTQUFTLEdBQUdrVCxXQUFXLENBQUNlLGFBQVosQ0FBMEJqVSxTQUExQzs7QUFDQSxRQUFJK1IsV0FBSixFQUFpQjtBQUFFO0FBQ2YsV0FBSyxJQUFJOVIsVUFBVCxJQUF1QkQsU0FBdkIsRUFBa0M7QUFDOUIsWUFBSSxDQUFDZ0Qsa0JBQWtCLENBQUMrTyxXQUFXLENBQUMwVCxVQUFiLEVBQXlCemxCLFNBQVMsQ0FBQ0MsVUFBRCxDQUFULENBQXNCMUUsS0FBL0MsQ0FBdkIsRUFBOEU7QUFDMUUsaUJBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxXQUFPMFgsa0JBQWtCLENBQUNDLFdBQUQsRUFBY2gxQixRQUFkLENBQXpCO0FBQ0gsR0FaRDs7QUFhQWduQyxlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QjB1QixvQkFBeEIsR0FBK0MsVUFBVTJDLFNBQVYsRUFBcUI7QUFDaEUsUUFBSWpFLFdBQVcsR0FBRyxLQUFLbHFCLEtBQUwsQ0FBV2txQixXQUE3QixDQURnRSxDQUN0Qjs7QUFDMUMsUUFBSUEsV0FBVyxJQUFJO0FBQ2YsS0FBQy9PLGtCQUFrQixDQUFDK08sV0FBVyxDQUFDMFQsVUFBYixFQUF5QnpQLFNBQVMsQ0FBQ3phLEtBQW5DLENBRHZCLEVBQ2tFO0FBQzlELGFBQU8sS0FBUDtBQUNIOztBQUNELFdBQU84WCxvQkFBb0IsQ0FBQzJDLFNBQUQsRUFBWSxLQUFLOTNCLFFBQWpCLENBQTNCO0FBQ0gsR0FQRCxDQWpFaUQsQ0F5RWpEO0FBQ0E7QUFDQTs7O0FBQ0FnbkMsZUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0J5ckIsZUFBeEIsR0FBMEMsVUFBVXBvQixJQUFWLEVBQWdCcVIsSUFBaEIsRUFBc0I7QUFDNUQsUUFBSW5iLFFBQVEsR0FBRyxLQUFLQSxRQUFwQjtBQUNBLFdBQU9BLFFBQVEsQ0FBQ2t5QixlQUFULENBQXlCcG9CLElBQXpCLEVBQStCcVIsSUFBL0IsQ0FBUDtBQUNILEdBSEQ7O0FBSUE2ckIsZUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0IrZ0MsMEJBQXhCLEdBQXFELFVBQVUxOUIsSUFBVixFQUFnQnFSLElBQWhCLEVBQXNCO0FBQ3ZFLFFBQUluYixRQUFRLEdBQUcsS0FBS0EsUUFBcEI7QUFDQSxXQUFPQSxRQUFRLENBQUN3bkMsMEJBQVQsQ0FBb0MxOUIsSUFBcEMsRUFBMENxUixJQUExQyxDQUFQO0FBQ0gsR0FIRDs7QUFJQTZyQixlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QnFyQixpQkFBeEIsR0FBNEMsVUFBVWhvQixJQUFWLEVBQWdCO0FBQ3hELFFBQUk5SixRQUFRLEdBQUcsS0FBS0EsUUFBcEI7QUFDQSxXQUFPQSxRQUFRLENBQUM4eEIsaUJBQVQsQ0FBMkJob0IsSUFBM0IsQ0FBUDtBQUNILEdBSEQ7O0FBSUFrOUIsZUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0JnaEMsbUJBQXhCLEdBQThDLFVBQVU3VixJQUFWLEVBQWdCOFYsU0FBaEIsRUFBMkI7QUFDckUsUUFBSTFuQyxRQUFRLEdBQUcsS0FBS0EsUUFBcEI7O0FBQ0EsUUFBSSxLQUFLOHhCLGlCQUFMLENBQXVCLGlCQUF2QixDQUFKLEVBQStDO0FBQzNDLFdBQUssSUFBSXhXLEVBQUUsR0FBRyxDQUFULEVBQVk4VyxNQUFNLEdBQUdSLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHOFcsTUFBTSxDQUFDcnJCLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxZQUFJMFcsR0FBRyxHQUFHSSxNQUFNLENBQUM5VyxFQUFELENBQWhCO0FBQ0EsYUFBS2tzQiwwQkFBTCxDQUFnQyxpQkFBaEMsRUFBbUQsQ0FDL0M7QUFDSTVqQyxlQUFLLEVBQUUsSUFBSXNwQixRQUFKLENBQWFsdEIsUUFBYixFQUF1Qmd5QixHQUFHLENBQUNHLFVBQUosQ0FBZXhRLEdBQXRDLEVBQTJDcVEsR0FBRyxDQUFDRyxVQUFKLENBQWV0USxRQUExRCxDQURYO0FBRUlnUSxrQkFBUSxFQUFFNlYsU0FGZDtBQUdJeFcsaUJBQU8sRUFBRWMsR0FBRyxDQUFDZCxPQUhqQjtBQUlJQyxlQUFLLEVBQUVhLEdBQUcsQ0FBQ2IsS0FKZjtBQUtJanZCLFlBQUUsRUFBRTh2QixHQUFHLENBQUM5dkIsRUFMWjtBQU1JeXZCLGNBQUksRUFBRSxJQU5WLENBTWU7O0FBTmYsU0FEK0MsQ0FBbkQ7QUFVSDtBQUNKOztBQUNELFFBQUksQ0FBQzN4QixRQUFRLENBQUM2dkIsS0FBVCxDQUFlOFgsWUFBcEIsRUFBa0M7QUFBRTtBQUNoQzNuQyxjQUFRLENBQUM0bkMsbUJBQVQsQ0FBNkJDLGlCQUE3QixHQUFpRCxDQUFDLElBQUQsQ0FBakQsQ0FEOEIsQ0FDMkI7QUFDNUQ7QUFDSixHQXBCRDs7QUFxQkFiLGVBQWEsQ0FBQ3ZnQyxTQUFkLENBQXdCcWhDLHFCQUF4QixHQUFnRCxVQUFVbFcsSUFBVixFQUFnQjhWLFNBQWhCLEVBQTJCO0FBQ3ZFLFFBQUkxbkMsUUFBUSxHQUFHLEtBQUtBLFFBQXBCOztBQUNBLFNBQUssSUFBSXNiLEVBQUUsR0FBRyxDQUFULEVBQVl5c0IsTUFBTSxHQUFHblcsSUFBMUIsRUFBZ0N0VyxFQUFFLEdBQUd5c0IsTUFBTSxDQUFDaGhDLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxVQUFJMFcsR0FBRyxHQUFHK1YsTUFBTSxDQUFDenNCLEVBQUQsQ0FBaEI7QUFDQXRiLGNBQVEsQ0FBQ3ZHLE9BQVQsQ0FBaUIsZUFBakIsRUFBa0N1NEIsR0FBRyxDQUFDOXZCLEVBQXRDO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLNHZCLGlCQUFMLENBQXVCLGNBQXZCLENBQUosRUFBNEM7QUFDeEMsV0FBSyxJQUFJcGQsRUFBRSxHQUFHLENBQVQsRUFBWXN6QixNQUFNLEdBQUdwVyxJQUExQixFQUFnQ2xkLEVBQUUsR0FBR3N6QixNQUFNLENBQUNqaEMsTUFBNUMsRUFBb0QyTixFQUFFLEVBQXRELEVBQTBEO0FBQ3RELFlBQUlzZCxHQUFHLEdBQUdnVyxNQUFNLENBQUN0ekIsRUFBRCxDQUFoQjtBQUNBLGFBQUt3ZCxlQUFMLENBQXFCLGNBQXJCLEVBQXFDLENBQ2pDO0FBQ0l0dUIsZUFBSyxFQUFFLElBQUlzcEIsUUFBSixDQUFhbHRCLFFBQWIsRUFBdUJneUIsR0FBRyxDQUFDRyxVQUFKLENBQWV4USxHQUF0QyxFQUEyQ3FRLEdBQUcsQ0FBQ0csVUFBSixDQUFldFEsUUFBMUQsQ0FEWDtBQUVJZ1Esa0JBQVEsRUFBRTZWLFNBRmQ7QUFHSXhsQyxZQUFFLEVBQUU4dkIsR0FBRyxDQUFDOXZCLEVBSFo7QUFJSXl2QixjQUFJLEVBQUUsSUFKVixDQUllOztBQUpmLFNBRGlDLENBQXJDO0FBUUg7QUFDSjtBQUNKLEdBbkJELENBN0dpRCxDQWlJakQ7QUFDQTs7O0FBQ0FxVixlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QndoQyxnQkFBeEIsR0FBMkMsVUFBVS9sQyxFQUFWLEVBQWM7QUFDckQsV0FBTyxDQUFDLEtBQUt5SCxLQUFMLENBQVd1ckIsU0FBWixJQUF5QjtBQUM1QixLQUFDLEtBQUt2ckIsS0FBTCxDQUFXNnJCLFdBRFQsSUFDd0I7QUFDM0IsS0FBQzlzQixjQUFjLENBQUN4RyxFQUFELEVBQUssWUFBTCxDQUZaLEtBR0YsS0FBS2dtQyxTQUFMLE1BQW9CLENBQUMsS0FBS0MsV0FBTCxDQUFpQmptQyxFQUFqQixDQUhuQixDQUFQLENBRHFELENBS3JEO0FBQ0E7QUFDSCxHQVBEOztBQVFBOGtDLGVBQWEsQ0FBQ3ZnQyxTQUFkLENBQXdCMmhDLGlCQUF4QixHQUE0QyxVQUFVbG1DLEVBQVYsRUFBYztBQUN0RCxRQUFJbW1DLEtBQUssR0FBRzMvQixjQUFjLENBQUN4RyxFQUFELEVBQUssS0FBS29tQyxhQUFWLENBQTFCO0FBQ0EsV0FBTyxDQUFDLENBQUNELEtBQUQsSUFBVUEsS0FBSyxDQUFDNytCLFNBQU4sQ0FBZ0JsQixRQUFoQixDQUF5QixXQUF6QixDQUFYLEtBQ0gsQ0FBQ0ksY0FBYyxDQUFDeEcsRUFBRCxFQUFLLFVBQUwsQ0FEWixJQUNnQztBQUNuQyxLQUFDd0csY0FBYyxDQUFDeEcsRUFBRCxFQUFLLGNBQUwsQ0FGWixJQUVvQztBQUN2QyxLQUFDLEtBQUtpbUMsV0FBTCxDQUFpQmptQyxFQUFqQixDQUhMO0FBSUgsR0FORDs7QUFPQThrQyxlQUFhLENBQUN2Z0MsU0FBZCxDQUF3QnloQyxTQUF4QixHQUFvQyxZQUFZO0FBQzVDLFdBQU8sS0FBS2htQyxFQUFMLENBQVFzSCxTQUFSLENBQWtCbEIsUUFBbEIsQ0FBMkIsWUFBM0IsQ0FBUDtBQUNILEdBRkQ7O0FBR0EwK0IsZUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0IwaEMsV0FBeEIsR0FBc0MsVUFBVWptQyxFQUFWLEVBQWM7QUFDaEQsV0FBT3lhLE9BQU8sQ0FBQ2pVLGNBQWMsQ0FBQ3hHLEVBQUQsRUFBSyxhQUFMLENBQWYsQ0FBZDtBQUNILEdBRkQ7O0FBR0EsU0FBTzhrQyxhQUFQO0FBQ0gsQ0F6SmtDLENBeUpqQ1YsU0F6SmlDLENBQW5DOztBQTBKQVUsYUFBYSxDQUFDdmdDLFNBQWQsQ0FBd0I2aEMsYUFBeEIsR0FBd0MseUJBQXhDO0FBQ0F0QixhQUFhLENBQUN2Z0MsU0FBZCxDQUF3QjhoQyxhQUF4QixHQUF3QyxrQ0FBeEM7QUFFQSxJQUFJQyxLQUFLLEdBQUcsQ0FBWjs7QUFDQSxTQUFTQyxZQUFULENBQXNCcHBDLEtBQXRCLEVBQTZCO0FBQ3pCLFNBQU87QUFDSG9ELE1BQUUsRUFBRStYLE1BQU0sQ0FBQ2d1QixLQUFLLEVBQU4sQ0FEUDtBQUVIRSxRQUFJLEVBQUVycEMsS0FBSyxDQUFDcXBDLElBQU4sSUFBYyxFQUZqQjtBQUdIQyxZQUFRLEVBQUV0cEMsS0FBSyxDQUFDc3BDLFFBQU4sSUFBa0IsRUFIekI7QUFJSGxPLG1CQUFlLEVBQUVwN0IsS0FBSyxDQUFDbzdCLGVBQU4sSUFBeUIsRUFKdkM7QUFLSG1PLDJCQUF1QixFQUFFdnBDLEtBQUssQ0FBQ3VwQyx1QkFBTixJQUFpQyxFQUx2RDtBQU1IQyw4QkFBMEIsRUFBRXhwQyxLQUFLLENBQUN3cEMsMEJBQU4sSUFBb0MsRUFON0Q7QUFPSDdWLDRCQUF3QixFQUFFM3pCLEtBQUssQ0FBQzJ6Qix3QkFBTixJQUFrQyxFQVB6RDtBQVFIOFYsNkJBQXlCLEVBQUV6cEMsS0FBSyxDQUFDeXBDLHlCQUFOLElBQW1DLEVBUjNEO0FBU0hDLHVCQUFtQixFQUFFMXBDLEtBQUssQ0FBQzBwQyxtQkFBTixJQUE2QixFQVQvQztBQVVIQyxzQkFBa0IsRUFBRTNwQyxLQUFLLENBQUMycEMsa0JBQU4sSUFBNEIsRUFWN0M7QUFXSEMsU0FBSyxFQUFFNXBDLEtBQUssQ0FBQzRwQyxLQUFOLElBQWUsRUFYbkI7QUFZSEMseUJBQXFCLEVBQUU3cEMsS0FBSyxDQUFDNnBDLHFCQUFOLElBQStCLEVBWm5EO0FBYUh6VCxnQkFBWSxFQUFFcDJCLEtBQUssQ0FBQ28yQixZQUFOLElBQXNCLElBYmpDO0FBY0gwVCx5QkFBcUIsRUFBRTlwQyxLQUFLLENBQUM4cEMscUJBQU4sSUFBK0IsRUFkbkQ7QUFlSEMsNkJBQXlCLEVBQUUvcEMsS0FBSyxDQUFDK3BDLHlCQUFOLElBQW1DLEVBZjNEO0FBZ0JIQywwQkFBc0IsRUFBRWhxQyxLQUFLLENBQUNncUMsc0JBQU4sSUFBZ0MsRUFoQnJEO0FBaUJIQyx5QkFBcUIsRUFBRWpxQyxLQUFLLENBQUNpcUMscUJBQU4sSUFBK0IsRUFqQm5EO0FBa0JIQyx5QkFBcUIsRUFBRWxxQyxLQUFLLENBQUNrcUMscUJBQU4sSUFBK0IsRUFsQm5EO0FBbUJIQyx3QkFBb0IsRUFBRW5xQyxLQUFLLENBQUNtcUMsb0JBQU4sSUFBOEIsRUFuQmpEO0FBb0JIQyxnQkFBWSxFQUFFcHFDLEtBQUssQ0FBQ29xQyxZQUFOLElBQXNCLEVBcEJqQztBQXFCSEMsbUJBQWUsRUFBRXJxQyxLQUFLLENBQUNxcUMsZUFBTixJQUF5QixFQXJCdkM7QUFzQkhwZSxnQkFBWSxFQUFFanNCLEtBQUssQ0FBQ2lzQixZQXRCakI7QUF1Qkh6TSxrQkFBYyxFQUFFeGYsS0FBSyxDQUFDd2YsY0FBTixJQUF3QixFQXZCckM7QUF3Qkg4cUIsc0JBQWtCLEVBQUV0cUMsS0FBSyxDQUFDc3FDLGtCQXhCdkI7QUF5Qkh6b0MsZUFBVyxFQUFFN0IsS0FBSyxDQUFDNkIsV0FBTixJQUFxQixFQXpCL0I7QUEwQkgwb0MsdUJBQW1CLEVBQUV2cUMsS0FBSyxDQUFDdXFDLG1CQTFCeEI7QUEyQkhDLHdCQUFvQixFQUFFeHFDLEtBQUssQ0FBQ3dxQyxvQkFBTixJQUE4QjtBQTNCakQsR0FBUDtBQTZCSDs7QUFDRCxJQUFJQyxZQUFZO0FBQUc7QUFBZSxZQUFZO0FBQzFDLFdBQVNBLFlBQVQsR0FBd0I7QUFDcEIsU0FBS3puQixLQUFMLEdBQWE7QUFDVHNtQixjQUFRLEVBQUUsRUFERDtBQUVUbE8scUJBQWUsRUFBRSxFQUZSO0FBR1RtTyw2QkFBdUIsRUFBRSxFQUhoQjtBQUlUQyxnQ0FBMEIsRUFBRSxFQUpuQjtBQUtUN1YsOEJBQXdCLEVBQUUsRUFMakI7QUFNVDhWLCtCQUF5QixFQUFFLEVBTmxCO0FBT1RDLHlCQUFtQixFQUFFLEVBUFo7QUFRVEMsd0JBQWtCLEVBQUUsRUFSWDtBQVNUQyxXQUFLLEVBQUUsRUFURTtBQVVUQywyQkFBcUIsRUFBRSxFQVZkO0FBV1R6VCxrQkFBWSxFQUFFLElBWEw7QUFZVDBULDJCQUFxQixFQUFFLEVBWmQ7QUFhVEMsK0JBQXlCLEVBQUUsRUFibEI7QUFjVEMsNEJBQXNCLEVBQUUsRUFkZjtBQWVUQywyQkFBcUIsRUFBRSxFQWZkO0FBZ0JUQywyQkFBcUIsRUFBRSxFQWhCZDtBQWlCVEMsMEJBQW9CLEVBQUUsRUFqQmI7QUFrQlRDLGtCQUFZLEVBQUUsRUFsQkw7QUFtQlRDLHFCQUFlLEVBQUUsRUFuQlI7QUFvQlRwZSxrQkFBWSxFQUFFLElBcEJMO0FBcUJUek0sb0JBQWMsRUFBRSxFQXJCUDtBQXNCVDhxQix3QkFBa0IsRUFBRSxJQXRCWDtBQXVCVHpvQyxpQkFBVyxFQUFFLEVBdkJKO0FBd0JUMG9DLHlCQUFtQixFQUFFLElBeEJaO0FBeUJUQywwQkFBb0IsRUFBRTtBQXpCYixLQUFiO0FBMkJBLFNBQUtFLFNBQUwsR0FBaUIsRUFBakI7QUFDSDs7QUFDREQsY0FBWSxDQUFDcmpDLFNBQWIsQ0FBdUJnRCxHQUF2QixHQUE2QixVQUFVdWdDLE1BQVYsRUFBa0I7QUFDM0MsUUFBSSxDQUFDLEtBQUtELFNBQUwsQ0FBZUMsTUFBTSxDQUFDdm5DLEVBQXRCLENBQUwsRUFBZ0M7QUFDNUIsV0FBS3NuQyxTQUFMLENBQWVDLE1BQU0sQ0FBQ3ZuQyxFQUF0QixJQUE0QixJQUE1Qjs7QUFDQSxXQUFLLElBQUk2WSxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHczFCLE1BQU0sQ0FBQ3RCLElBQTdCLEVBQW1DcHRCLEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQTNDLEVBQW1EdVUsRUFBRSxFQUFyRCxFQUF5RDtBQUNyRCxZQUFJMnVCLEdBQUcsR0FBR3YxQixFQUFFLENBQUM0RyxFQUFELENBQVo7QUFDQSxhQUFLN1IsR0FBTCxDQUFTd2dDLEdBQVQ7QUFDSDs7QUFDRCxXQUFLNW5CLEtBQUwsR0FBYTZuQixZQUFZLENBQUMsS0FBSzduQixLQUFOLEVBQWEybkIsTUFBYixDQUF6QjtBQUNIO0FBQ0osR0FURDs7QUFVQSxTQUFPRixZQUFQO0FBQ0gsQ0ExQ2lDLEVBQWxDOztBQTJDQSxTQUFTSSxZQUFULENBQXNCQyxNQUF0QixFQUE4QkMsTUFBOUIsRUFBc0M7QUFDbEMsU0FBTztBQUNIekIsWUFBUSxFQUFFd0IsTUFBTSxDQUFDeEIsUUFBUCxDQUFnQjc1QixNQUFoQixDQUF1QnM3QixNQUFNLENBQUN6QixRQUE5QixDQURQO0FBRUhsTyxtQkFBZSxFQUFFMFAsTUFBTSxDQUFDMVAsZUFBUCxDQUF1QjNyQixNQUF2QixDQUE4QnM3QixNQUFNLENBQUMzUCxlQUFyQyxDQUZkO0FBR0htTywyQkFBdUIsRUFBRXVCLE1BQU0sQ0FBQ3ZCLHVCQUFQLENBQStCOTVCLE1BQS9CLENBQXNDczdCLE1BQU0sQ0FBQ3hCLHVCQUE3QyxDQUh0QjtBQUlIQyw4QkFBMEIsRUFBRXNCLE1BQU0sQ0FBQ3RCLDBCQUFQLENBQWtDLzVCLE1BQWxDLENBQXlDczdCLE1BQU0sQ0FBQ3ZCLDBCQUFoRCxDQUp6QjtBQUtIN1YsNEJBQXdCLEVBQUVtWCxNQUFNLENBQUNuWCx3QkFBUCxDQUFnQ2xrQixNQUFoQyxDQUF1Q3M3QixNQUFNLENBQUNwWCx3QkFBOUMsQ0FMdkI7QUFNSDhWLDZCQUF5QixFQUFFcUIsTUFBTSxDQUFDckIseUJBQVAsQ0FBaUNoNkIsTUFBakMsQ0FBd0NzN0IsTUFBTSxDQUFDdEIseUJBQS9DLENBTnhCO0FBT0hDLHVCQUFtQixFQUFFb0IsTUFBTSxDQUFDcEIsbUJBQVAsQ0FBMkJqNkIsTUFBM0IsQ0FBa0NzN0IsTUFBTSxDQUFDckIsbUJBQXpDLENBUGxCO0FBUUhDLHNCQUFrQixFQUFFbUIsTUFBTSxDQUFDbkIsa0JBQVAsQ0FBMEJsNkIsTUFBMUIsQ0FBaUNzN0IsTUFBTSxDQUFDcEIsa0JBQXhDLENBUmpCO0FBU0hDLFNBQUssRUFBRTFxQixRQUFRLENBQUMsRUFBRCxFQUFLNHJCLE1BQU0sQ0FBQ2xCLEtBQVosRUFBbUJtQixNQUFNLENBQUNuQixLQUExQixDQVRaO0FBVUhDLHlCQUFxQixFQUFFaUIsTUFBTSxDQUFDakIscUJBQVAsQ0FBNkJwNkIsTUFBN0IsQ0FBb0NzN0IsTUFBTSxDQUFDbEIscUJBQTNDLENBVnBCO0FBV0h6VCxnQkFBWSxFQUFFMlUsTUFBTSxDQUFDM1UsWUFBUCxJQUF1QjBVLE1BQU0sQ0FBQzFVLFlBWHpDO0FBWUgwVCx5QkFBcUIsRUFBRWdCLE1BQU0sQ0FBQ2hCLHFCQUFQLENBQTZCcjZCLE1BQTdCLENBQW9DczdCLE1BQU0sQ0FBQ2pCLHFCQUEzQyxDQVpwQjtBQWFIQyw2QkFBeUIsRUFBRWUsTUFBTSxDQUFDZix5QkFBUCxDQUFpQ3Q2QixNQUFqQyxDQUF3Q3M3QixNQUFNLENBQUNoQix5QkFBL0MsQ0FieEI7QUFjSEMsMEJBQXNCLEVBQUVjLE1BQU0sQ0FBQ2Qsc0JBQVAsQ0FBOEJ2NkIsTUFBOUIsQ0FBcUNzN0IsTUFBTSxDQUFDZixzQkFBNUMsQ0FkckI7QUFlSEMseUJBQXFCLEVBQUVhLE1BQU0sQ0FBQ2IscUJBQVAsQ0FBNkJ4NkIsTUFBN0IsQ0FBb0NzN0IsTUFBTSxDQUFDZCxxQkFBM0MsQ0FmcEI7QUFnQkhFLHdCQUFvQixFQUFFVyxNQUFNLENBQUNYLG9CQUFQLENBQTRCMTZCLE1BQTVCLENBQW1DczdCLE1BQU0sQ0FBQ1osb0JBQTFDLENBaEJuQjtBQWlCSEQseUJBQXFCLEVBQUVZLE1BQU0sQ0FBQ1oscUJBQVAsQ0FBNkJ6NkIsTUFBN0IsQ0FBb0NzN0IsTUFBTSxDQUFDYixxQkFBM0MsQ0FqQnBCO0FBa0JIRSxnQkFBWSxFQUFFbHJCLFFBQVEsQ0FBQyxFQUFELEVBQUs0ckIsTUFBTSxDQUFDVixZQUFaLEVBQTBCVyxNQUFNLENBQUNYLFlBQWpDLENBbEJuQjtBQW1CSEMsbUJBQWUsRUFBRVMsTUFBTSxDQUFDVCxlQUFQLENBQXVCNTZCLE1BQXZCLENBQThCczdCLE1BQU0sQ0FBQ1YsZUFBckMsQ0FuQmQ7QUFvQkhwZSxnQkFBWSxFQUFFOGUsTUFBTSxDQUFDOWUsWUFBUCxJQUF1QjZlLE1BQU0sQ0FBQzdlLFlBcEJ6QztBQXFCSHpNLGtCQUFjLEVBQUVzckIsTUFBTSxDQUFDdHJCLGNBQVAsQ0FBc0IvUCxNQUF0QixDQUE2QnM3QixNQUFNLENBQUN2ckIsY0FBcEMsQ0FyQmI7QUFzQkg4cUIsc0JBQWtCLEVBQUVTLE1BQU0sQ0FBQ1Qsa0JBQVAsSUFBNkJRLE1BQU0sQ0FBQ1Isa0JBdEJyRDtBQXVCSHpvQyxlQUFXLEVBQUVpcEMsTUFBTSxDQUFDanBDLFdBQVAsSUFBc0JrcEMsTUFBTSxDQUFDbHBDLFdBdkJ2QztBQXdCSDBvQyx1QkFBbUIsRUFBRU8sTUFBTSxDQUFDUCxtQkFBUCxJQUE4QlEsTUFBTSxDQUFDUixtQkF4QnZEO0FBeUJIQyx3QkFBb0IsRUFBRXRyQixRQUFRLENBQUMsRUFBRCxFQUFLNHJCLE1BQU0sQ0FBQ04sb0JBQVosRUFBa0NPLE1BQU0sQ0FBQ1Asb0JBQXpDO0FBekIzQixHQUFQO0FBMkJIOztBQUVELElBQUlRLGNBQWMsR0FBRztBQUNqQkMsYUFBVyxFQUFFLElBREk7QUFFakJDLFdBQVMsRUFBRSxVQUFVcFIsR0FBVixFQUFlO0FBQ3RCLFFBQUkzeUIsS0FBSyxDQUFDa1QsT0FBTixDQUFjeWYsR0FBZCxDQUFKLEVBQXdCO0FBQUU7QUFDdEIsYUFBT0EsR0FBUDtBQUNILEtBRkQsTUFHSyxJQUFJM3lCLEtBQUssQ0FBQ2tULE9BQU4sQ0FBY3lmLEdBQUcsQ0FBQy8xQixNQUFsQixDQUFKLEVBQStCO0FBQ2hDLGFBQU8rMUIsR0FBRyxDQUFDLzFCLE1BQVg7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVZnQjtBQVdqQm9uQyxPQUFLLEVBQUUsVUFBVTFtQyxHQUFWLEVBQWVwQixPQUFmLEVBQXdCO0FBQzNCQSxXQUFPLENBQUM7QUFDSnNlLGVBQVMsRUFBRWxkLEdBQUcsQ0FBQ29mLFdBQUosQ0FBZ0IrSjtBQUR2QixLQUFELENBQVA7QUFHSDtBQWZnQixDQUFyQjtBQWlCQSxJQUFJd2Qsc0JBQXNCLEdBQUdoQyxZQUFZLENBQUM7QUFDdENpQixpQkFBZSxFQUFFLENBQUNXLGNBQUQ7QUFEcUIsQ0FBRCxDQUF6QztBQUlBLElBQUlLLGdCQUFnQixHQUFHO0FBQ25CSCxXQUFTLEVBQUUsVUFBVXBSLEdBQVYsRUFBZTtBQUN0QixRQUFJLE9BQU9BLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUFFO0FBQzdCLGFBQU9BLEdBQVA7QUFDSCxLQUZELE1BR0ssSUFBSSxPQUFPQSxHQUFHLENBQUMvMUIsTUFBWCxLQUFzQixVQUExQixFQUFzQztBQUN2QyxhQUFPKzFCLEdBQUcsQ0FBQy8xQixNQUFYO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FUa0I7QUFVbkJvbkMsT0FBSyxFQUFFLFVBQVUxbUMsR0FBVixFQUFlcEIsT0FBZixFQUF3QmcrQixPQUF4QixFQUFpQztBQUNwQyxRQUFJaGpCLE9BQU8sR0FBRzVaLEdBQUcsQ0FBQzlELFFBQUosQ0FBYTBkLE9BQTNCO0FBQ0EsUUFBSTVELElBQUksR0FBR2hXLEdBQUcsQ0FBQ29mLFdBQUosQ0FBZ0IrSixJQUEzQjtBQUNBd1QsZUFBVyxDQUFDM21CLElBQUksQ0FBQzZ3QixJQUFMLENBQVUsSUFBVixFQUFnQjtBQUN4QnBuQyxXQUFLLEVBQUVtYSxPQUFPLENBQUNxUyxNQUFSLENBQWVqc0IsR0FBRyxDQUFDdVosS0FBSixDQUFVOVosS0FBekIsQ0FEaUI7QUFFeEJDLFNBQUcsRUFBRWthLE9BQU8sQ0FBQ3FTLE1BQVIsQ0FBZWpzQixHQUFHLENBQUN1WixLQUFKLENBQVU3WixHQUF6QixDQUZtQjtBQUd4QlMsY0FBUSxFQUFFeVosT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0IvN0IsR0FBRyxDQUFDdVosS0FBSixDQUFVOVosS0FBNUIsQ0FIYztBQUl4QlcsWUFBTSxFQUFFd1osT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0IvN0IsR0FBRyxDQUFDdVosS0FBSixDQUFVN1osR0FBNUIsQ0FKZ0I7QUFLeEJMLGNBQVEsRUFBRXVhLE9BQU8sQ0FBQ3ZhO0FBTE0sS0FBaEIsQ0FBRCxFQU1QLFVBQVU2ZCxTQUFWLEVBQXFCO0FBQ3JCdGUsYUFBTyxDQUFDO0FBQUVzZSxpQkFBUyxFQUFFQTtBQUFiLE9BQUQsQ0FBUCxDQURxQixDQUNjO0FBQ3RDLEtBUlUsRUFRUjBmLE9BUlEsQ0FRQTtBQVJBLEtBQVg7QUFVSDtBQXZCa0IsQ0FBdkI7QUF5QkEsSUFBSWtLLHFCQUFxQixHQUFHbkMsWUFBWSxDQUFDO0FBQ3JDaUIsaUJBQWUsRUFBRSxDQUFDZ0IsZ0JBQUQ7QUFEb0IsQ0FBRCxDQUF4Qzs7QUFJQSxTQUFTRyxXQUFULENBQXFCOW9DLE1BQXJCLEVBQTZCSCxHQUE3QixFQUFrQ2twQyxNQUFsQyxFQUEwQ0MsZUFBMUMsRUFBMkRDLGVBQTNELEVBQTRFO0FBQ3hFanBDLFFBQU0sR0FBR0EsTUFBTSxDQUFDNlksV0FBUCxFQUFUO0FBQ0EsTUFBSS9PLElBQUksR0FBRyxJQUFYOztBQUNBLE1BQUk5SixNQUFNLEtBQUssS0FBZixFQUFzQjtBQUNsQkgsT0FBRyxHQUFHcXBDLHVCQUF1QixDQUFDcnBDLEdBQUQsRUFBTWtwQyxNQUFOLENBQTdCO0FBQ0gsR0FGRCxNQUdLO0FBQ0RqL0IsUUFBSSxHQUFHcS9CLFlBQVksQ0FBQ0osTUFBRCxDQUFuQjtBQUNIOztBQUNELE1BQUk5bkMsR0FBRyxHQUFHLElBQUltb0MsY0FBSixFQUFWO0FBQ0Fub0MsS0FBRyxDQUFDb29DLElBQUosQ0FBU3JwQyxNQUFULEVBQWlCSCxHQUFqQixFQUFzQixJQUF0Qjs7QUFDQSxNQUFJRyxNQUFNLEtBQUssS0FBZixFQUFzQjtBQUNsQmlCLE9BQUcsQ0FBQ0MsZ0JBQUosQ0FBcUIsY0FBckIsRUFBcUMsbUNBQXJDO0FBQ0g7O0FBQ0RELEtBQUcsQ0FBQ3FvQyxNQUFKLEdBQWEsWUFBWTtBQUNyQixRQUFJcm9DLEdBQUcsQ0FBQ3NvQyxNQUFKLElBQWMsR0FBZCxJQUFxQnRvQyxHQUFHLENBQUNzb0MsTUFBSixHQUFhLEdBQXRDLEVBQTJDO0FBQ3ZDLFVBQUk7QUFDQSxZQUFJOWdDLEdBQUcsR0FBRzdGLElBQUksQ0FBQ3NhLEtBQUwsQ0FBV2pjLEdBQUcsQ0FBQ3VvQyxZQUFmLENBQVY7QUFDQVIsdUJBQWUsQ0FBQ3ZnQyxHQUFELEVBQU14SCxHQUFOLENBQWY7QUFDSCxPQUhELENBSUEsT0FBT3dCLEdBQVAsRUFBWTtBQUNSd21DLHVCQUFlLENBQUMsc0JBQUQsRUFBeUJob0MsR0FBekIsQ0FBZjtBQUNIO0FBQ0osS0FSRCxNQVNLO0FBQ0Rnb0MscUJBQWUsQ0FBQyxnQkFBRCxFQUFtQmhvQyxHQUFuQixDQUFmO0FBQ0g7QUFDSixHQWJEOztBQWNBQSxLQUFHLENBQUN3b0MsT0FBSixHQUFjLFlBQVk7QUFDdEJSLG1CQUFlLENBQUMsZ0JBQUQsRUFBbUJob0MsR0FBbkIsQ0FBZjtBQUNILEdBRkQ7O0FBR0FBLEtBQUcsQ0FBQ3lvQyxJQUFKLENBQVM1L0IsSUFBVDtBQUNIOztBQUNELFNBQVNvL0IsdUJBQVQsQ0FBaUNycEMsR0FBakMsRUFBc0NrcEMsTUFBdEMsRUFBOEM7QUFDMUMsU0FBT2xwQyxHQUFHLElBQ0xBLEdBQUcsQ0FBQ2lwQixPQUFKLENBQVksR0FBWixNQUFxQixDQUFDLENBQXRCLEdBQTBCLEdBQTFCLEdBQWdDLEdBRDNCLENBQUgsR0FFSHFnQixZQUFZLENBQUNKLE1BQUQsQ0FGaEI7QUFHSDs7QUFDRCxTQUFTSSxZQUFULENBQXNCSixNQUF0QixFQUE4QjtBQUMxQixNQUFJaGhCLEtBQUssR0FBRyxFQUFaOztBQUNBLE9BQUssSUFBSXZOLEdBQVQsSUFBZ0J1dUIsTUFBaEIsRUFBd0I7QUFDcEJoaEIsU0FBSyxDQUFDN2dCLElBQU4sQ0FBV3lpQyxrQkFBa0IsQ0FBQ252QixHQUFELENBQWxCLEdBQTBCLEdBQTFCLEdBQWdDbXZCLGtCQUFrQixDQUFDWixNQUFNLENBQUN2dUIsR0FBRCxDQUFQLENBQTdEO0FBQ0g7O0FBQ0QsU0FBT3VOLEtBQUssQ0FBQ0ssSUFBTixDQUFXLEdBQVgsQ0FBUDtBQUNIOztBQUVELElBQUl3aEIsZ0JBQWdCLEdBQUc7QUFDbkJwQixXQUFTLEVBQUUsVUFBVXBSLEdBQVYsRUFBZTtBQUN0QixRQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUFFO0FBQzNCQSxTQUFHLEdBQUc7QUFBRXYzQixXQUFHLEVBQUV1M0I7QUFBUCxPQUFOO0FBQ0gsS0FGRCxNQUdLLElBQUksQ0FBQ0EsR0FBRCxJQUFRLE9BQU9BLEdBQVAsS0FBZSxRQUF2QixJQUFtQyxDQUFDQSxHQUFHLENBQUN2M0IsR0FBNUMsRUFBaUQ7QUFDbEQsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTztBQUNIQSxTQUFHLEVBQUV1M0IsR0FBRyxDQUFDdjNCLEdBRE47QUFFSEcsWUFBTSxFQUFFLENBQUNvM0IsR0FBRyxDQUFDcDNCLE1BQUosSUFBYyxLQUFmLEVBQXNCNlksV0FBdEIsRUFGTDtBQUdIZ3hCLGlCQUFXLEVBQUV6UyxHQUFHLENBQUN5UyxXQUhkO0FBSUhDLGdCQUFVLEVBQUUxUyxHQUFHLENBQUMwUyxVQUpiO0FBS0hDLGNBQVEsRUFBRTNTLEdBQUcsQ0FBQzJTLFFBTFg7QUFNSEMsbUJBQWEsRUFBRTVTLEdBQUcsQ0FBQzRTO0FBTmhCLEtBQVA7QUFRSCxHQWhCa0I7QUFpQm5CdkIsT0FBSyxFQUFFLFVBQVUxbUMsR0FBVixFQUFlcEIsT0FBZixFQUF3QmcrQixPQUF4QixFQUFpQztBQUNwQyxRQUFJelQsSUFBSSxHQUFHbnBCLEdBQUcsQ0FBQ29mLFdBQUosQ0FBZ0IrSixJQUEzQjtBQUNBLFFBQUkrZSxhQUFhLEdBQUdDLGtCQUFrQixDQUFDaGYsSUFBRCxFQUFPbnBCLEdBQUcsQ0FBQ3VaLEtBQVgsRUFBa0J2WixHQUFHLENBQUM5RCxRQUF0QixDQUF0QztBQUNBNnFDLGVBQVcsQ0FBQzVkLElBQUksQ0FBQ2xyQixNQUFOLEVBQWNrckIsSUFBSSxDQUFDcnJCLEdBQW5CLEVBQXdCb3FDLGFBQXhCLEVBQXVDLFVBQVVockIsU0FBVixFQUFxQmhlLEdBQXJCLEVBQTBCO0FBQ3hFTixhQUFPLENBQUM7QUFBRXNlLGlCQUFTLEVBQUVBLFNBQWI7QUFBd0JoZSxXQUFHLEVBQUVBO0FBQTdCLE9BQUQsQ0FBUDtBQUNILEtBRlUsRUFFUixVQUFVa3BDLFlBQVYsRUFBd0JscEMsR0FBeEIsRUFBNkI7QUFDNUIwOUIsYUFBTyxDQUFDO0FBQUVwaEMsZUFBTyxFQUFFNHNDLFlBQVg7QUFBeUJscEMsV0FBRyxFQUFFQTtBQUE5QixPQUFELENBQVA7QUFDSCxLQUpVLENBQVg7QUFLSDtBQXpCa0IsQ0FBdkI7QUEyQkEsSUFBSW1wQyx5QkFBeUIsR0FBRzFELFlBQVksQ0FBQztBQUN6Q2lCLGlCQUFlLEVBQUUsQ0FBQ2lDLGdCQUFEO0FBRHdCLENBQUQsQ0FBNUM7O0FBR0EsU0FBU00sa0JBQVQsQ0FBNEJoZixJQUE1QixFQUFrQzVQLEtBQWxDLEVBQXlDcmQsUUFBekMsRUFBbUQ7QUFDL0MsTUFBSTBkLE9BQU8sR0FBRzFkLFFBQVEsQ0FBQzBkLE9BQXZCO0FBQ0EsTUFBSW11QixVQUFKO0FBQ0EsTUFBSUMsUUFBSjtBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJSyxtQkFBSjtBQUNBLE1BQUl0QixNQUFNLEdBQUcsRUFBYjtBQUNBZSxZQUFVLEdBQUc1ZSxJQUFJLENBQUM0ZSxVQUFsQjs7QUFDQSxNQUFJQSxVQUFVLElBQUksSUFBbEIsRUFBd0I7QUFDcEJBLGNBQVUsR0FBRzdyQyxRQUFRLENBQUNvakIsR0FBVCxDQUFhLFlBQWIsQ0FBYjtBQUNIOztBQUNEMG9CLFVBQVEsR0FBRzdlLElBQUksQ0FBQzZlLFFBQWhCOztBQUNBLE1BQUlBLFFBQVEsSUFBSSxJQUFoQixFQUFzQjtBQUNsQkEsWUFBUSxHQUFHOXJDLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsVUFBYixDQUFYO0FBQ0g7O0FBQ0Qyb0IsZUFBYSxHQUFHOWUsSUFBSSxDQUFDOGUsYUFBckI7O0FBQ0EsTUFBSUEsYUFBYSxJQUFJLElBQXJCLEVBQTJCO0FBQ3ZCQSxpQkFBYSxHQUFHL3JDLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsZUFBYixDQUFoQjtBQUNILEdBbEI4QyxDQW1CL0M7OztBQUNBLE1BQUksT0FBTzZKLElBQUksQ0FBQzJlLFdBQVosS0FBNEIsVUFBaEMsRUFBNEM7QUFDeEM7QUFDQVEsdUJBQW1CLEdBQUduZixJQUFJLENBQUMyZSxXQUFMLEVBQXRCO0FBQ0gsR0FIRCxNQUlLO0FBQ0Q7QUFDQVEsdUJBQW1CLEdBQUduZixJQUFJLENBQUMyZSxXQUFMLElBQW9CLEVBQTFDO0FBQ0g7O0FBQ0RydEIsVUFBUSxDQUFDdXNCLE1BQUQsRUFBU3NCLG1CQUFULENBQVI7O0FBQ0F0QixRQUFNLENBQUNlLFVBQUQsQ0FBTixHQUFxQm51QixPQUFPLENBQUNtaUIsU0FBUixDQUFrQnhpQixLQUFLLENBQUM5WixLQUF4QixDQUFyQjtBQUNBdW5DLFFBQU0sQ0FBQ2dCLFFBQUQsQ0FBTixHQUFtQnB1QixPQUFPLENBQUNtaUIsU0FBUixDQUFrQnhpQixLQUFLLENBQUM3WixHQUF4QixDQUFuQjs7QUFDQSxNQUFJa2EsT0FBTyxDQUFDdmEsUUFBUixLQUFxQixPQUF6QixFQUFrQztBQUM5QjJuQyxVQUFNLENBQUNpQixhQUFELENBQU4sR0FBd0JydUIsT0FBTyxDQUFDdmEsUUFBaEM7QUFDSDs7QUFDRCxTQUFPMm5DLE1BQVA7QUFDSDs7QUFFRCxJQUFJdUIsU0FBUyxHQUFHO0FBQ1pwdEIsT0FBSyxFQUFFLFVBQVVxQyxRQUFWLEVBQW9CakYsYUFBcEIsRUFBbUNxQixPQUFuQyxFQUE0QztBQUMvQyxRQUFJc0csWUFBWSxHQUFHdEcsT0FBTyxDQUFDc0csWUFBUixDQUFxQjJtQixJQUFyQixDQUEwQmp0QixPQUExQixDQUFuQjtBQUNBLFFBQUl2QixVQUFVLEdBQUc7QUFDYnNmLGdCQUFVLEVBQUUsSUFEQztBQUViRixlQUFTLEVBQUUvbUIsY0FGRTtBQUdiZ25CLGFBQU8sRUFBRWhuQixjQUhJO0FBSWI4M0IsZ0JBQVUsRUFBRXRvQixZQUpDO0FBS2J1b0IsY0FBUSxFQUFFdm9CO0FBTEcsS0FBakI7QUFPQSxRQUFJcmEsS0FBSyxHQUFHc1MsV0FBVyxDQUFDcUYsUUFBRCxFQUFXbkYsVUFBWCxFQUF1QixFQUF2QixFQUEyQkUsYUFBM0IsQ0FBdkI7QUFDQSxRQUFJbXdCLFFBQVEsR0FBRyxLQUFmOztBQUNBLFNBQUssSUFBSTVpQyxRQUFULElBQXFCRCxLQUFyQixFQUE0QjtBQUN4QixVQUFJQSxLQUFLLENBQUNDLFFBQUQsQ0FBTCxJQUFtQixJQUF2QixFQUE2QjtBQUN6QjRpQyxnQkFBUSxHQUFHLElBQVg7QUFDQTtBQUNIO0FBQ0o7O0FBQ0QsUUFBSUEsUUFBSixFQUFjO0FBQ1YsVUFBSXB0QixRQUFRLEdBQUcsSUFBZjs7QUFDQSxVQUFJLGNBQWMvQyxhQUFsQixFQUFpQztBQUM3QitDLGdCQUFRLEdBQUc1SyxjQUFjLENBQUM2SCxhQUFhLENBQUMrQyxRQUFmLENBQXpCO0FBQ0EsZUFBTy9DLGFBQWEsQ0FBQytDLFFBQXJCO0FBQ0g7O0FBQ0QsVUFBSSxDQUFDQSxRQUFELElBQWF6VixLQUFLLENBQUM0eEIsU0FBbkIsSUFBZ0M1eEIsS0FBSyxDQUFDNnhCLE9BQTFDLEVBQW1EO0FBQy9DcGMsZ0JBQVEsR0FBR2hKLGlCQUFpQixDQUFDek0sS0FBSyxDQUFDNnhCLE9BQVAsRUFBZ0I3eEIsS0FBSyxDQUFDNHhCLFNBQXRCLENBQTVCO0FBQ0g7O0FBQ0QsYUFBTztBQUNIcGMsbUJBQVcsRUFBRXhDLE9BQU8sQ0FBQyxDQUFDaFQsS0FBSyxDQUFDNHhCLFNBQVAsSUFBb0IsQ0FBQzV4QixLQUFLLENBQUM2eEIsT0FBNUIsQ0FEakI7QUFFSHBjLGdCQUFRLEVBQUVBLFFBRlA7QUFHSEMsZ0JBQVEsRUFBRTFWLEtBSFAsQ0FHYTs7QUFIYixPQUFQO0FBS0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FsQ1c7QUFtQ1prVyxRQUFNLEVBQUUsVUFBVVIsUUFBVixFQUFvQkksWUFBcEIsRUFBa0MvQixPQUFsQyxFQUEyQztBQUMvQyxRQUFJK3VCLG1CQUFtQixHQUFHL25CLGVBQWUsQ0FBQ2pGLFlBQUQsRUFBZTtBQUFFbGMsV0FBSyxFQUFFOGIsUUFBUSxDQUFDaXRCLFVBQWxCO0FBQThCOW9DLFNBQUcsRUFBRTZiLFFBQVEsQ0FBQ2t0QjtBQUE1QyxLQUFmLENBQXpDOztBQUNBLFFBQUlFLG1CQUFKLEVBQXlCO0FBQ3JCLGFBQU9DLFlBQVksQ0FBQ3J0QixRQUFRLENBQUNvYyxVQUFWLEVBQXNCcGMsUUFBUSxDQUFDa2MsU0FBL0IsRUFBMENrUixtQkFBMUMsRUFBK0QvdUIsT0FBL0QsQ0FBbkI7QUFDSCxLQUZELE1BR0s7QUFDRCxhQUFPLEVBQVA7QUFDSDtBQUNKO0FBM0NXLENBQWhCO0FBNkNBLElBQUlpdkIsc0JBQXNCLEdBQUdsRSxZQUFZLENBQUM7QUFDdEM1cEIsZ0JBQWMsRUFBRSxDQUFDd3RCLFNBQUQ7QUFEc0IsQ0FBRCxDQUF6Qzs7QUFHQSxTQUFTSyxZQUFULENBQXNCalIsVUFBdEIsRUFBa0NGLFNBQWxDLEVBQTZDOWIsWUFBN0MsRUFBMkQvQixPQUEzRCxFQUFvRTtBQUNoRSxNQUFJa3ZCLE9BQU8sR0FBR25SLFVBQVUsR0FBRy9hLFdBQVcsQ0FBQythLFVBQUQsQ0FBZCxHQUE2QixJQUFyRDtBQUNBLE1BQUlvUixTQUFTLEdBQUd2N0IsVUFBVSxDQUFDbU8sWUFBWSxDQUFDbGMsS0FBZCxDQUExQjtBQUNBLE1BQUkwM0IsU0FBUyxHQUFHeGIsWUFBWSxDQUFDamMsR0FBN0I7QUFDQSxNQUFJc3BDLGNBQWMsR0FBRyxFQUFyQjs7QUFDQSxTQUFPRCxTQUFTLEdBQUc1UixTQUFuQixFQUE4QjtBQUMxQixRQUFJOFIsYUFBYSxDQUNqQjtBQURpQixNQUVmLEtBQUssQ0FGUCxDQUQwQixDQUkxQjs7QUFDQSxRQUFJLENBQUNILE9BQUQsSUFBWUEsT0FBTyxDQUFDQyxTQUFTLENBQUN0NUIsU0FBVixFQUFELENBQXZCLEVBQWdEO0FBQzVDLFVBQUlnb0IsU0FBSixFQUFlO0FBQ1h3UixxQkFBYSxHQUFHcnZCLE9BQU8sQ0FBQ2pVLEdBQVIsQ0FBWW9qQyxTQUFaLEVBQXVCdFIsU0FBdkIsQ0FBaEI7QUFDSCxPQUZELE1BR0s7QUFDRHdSLHFCQUFhLEdBQUdGLFNBQWhCO0FBQ0g7O0FBQ0RDLG9CQUFjLENBQUM3akMsSUFBZixDQUFvQjhqQyxhQUFwQjtBQUNIOztBQUNERixhQUFTLEdBQUduOEIsT0FBTyxDQUFDbThCLFNBQUQsRUFBWSxDQUFaLENBQW5CO0FBQ0g7O0FBQ0QsU0FBT0MsY0FBUDtBQUNIOztBQUVELElBQUlFLDJCQUEyQixHQUFHdkUsWUFBWSxDQUFDO0FBQzNDb0Isc0JBQW9CLEVBQUU7QUFDbEJ6bUMsVUFBTSxFQUFFLFVBQVVBLE1BQVYsRUFBa0JwRCxRQUFsQixFQUE0Qml0QyxTQUE1QixFQUF1QztBQUMzQ0Msd0JBQWtCLENBQUMsQ0FBQzlwQyxNQUFELENBQUQsRUFBV3BELFFBQVgsRUFBcUJpdEMsU0FBckIsQ0FBbEI7QUFDSCxLQUhpQjtBQUlsQm5kLGdCQUFZLEVBQUVvZCxrQkFKSTtBQUtsQi9zQyxXQUFPLEVBQUVndEM7QUFMUztBQURxQixDQUFELENBQTlDOztBQVNBLFNBQVNELGtCQUFULENBQTRCRSxNQUE1QixFQUFvQ3B0QyxRQUFwQyxFQUE4Q2l0QyxTQUE5QyxFQUF5RDtBQUNyRCxNQUFJSSxjQUFjLEdBQUd4c0IsaUJBQWlCLENBQUM3Z0IsUUFBUSxDQUFDNnZCLEtBQVQsQ0FBZUMsWUFBaEIsQ0FBdEM7QUFDQSxNQUFJd2QsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE9BQUssSUFBSWh5QixFQUFFLEdBQUcsQ0FBVCxFQUFZaXlCLFFBQVEsR0FBR0gsTUFBNUIsRUFBb0M5eEIsRUFBRSxHQUFHaXlCLFFBQVEsQ0FBQ3htQyxNQUFsRCxFQUEwRHVVLEVBQUUsRUFBNUQsRUFBZ0U7QUFDNUQsUUFBSWpjLEtBQUssR0FBR2t1QyxRQUFRLENBQUNqeUIsRUFBRCxDQUFwQjtBQUNBLFFBQUlreUIsVUFBVSxHQUFHLEtBQWpCOztBQUNBLFNBQUssSUFBSTFvQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdW9DLGNBQWMsQ0FBQ3RtQyxNQUFuQyxFQUEyQ2pDLENBQUMsRUFBNUMsRUFBZ0Q7QUFDNUMsVUFBSW1vQyxTQUFTLENBQUNJLGNBQWMsQ0FBQ3ZvQyxDQUFELENBQWQsQ0FBa0Iyb0MsSUFBbkIsRUFBeUJwdUMsS0FBekIsQ0FBYixFQUE4QztBQUMxQ2d1QyxzQkFBYyxDQUFDOW5CLE1BQWYsQ0FBc0J6Z0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFEMEMsQ0FDYjs7QUFDN0Iwb0Msa0JBQVUsR0FBRyxJQUFiO0FBQ0E7QUFDSDtBQUNKOztBQUNELFFBQUksQ0FBQ0EsVUFBTCxFQUFpQjtBQUNiRixlQUFTLENBQUNya0MsSUFBVixDQUFlNUosS0FBZjtBQUNIO0FBQ0o7O0FBQ0QsT0FBSyxJQUFJcVYsRUFBRSxHQUFHLENBQVQsRUFBWWc1QixnQkFBZ0IsR0FBR0wsY0FBcEMsRUFBb0QzNEIsRUFBRSxHQUFHZzVCLGdCQUFnQixDQUFDM21DLE1BQTFFLEVBQWtGMk4sRUFBRSxFQUFwRixFQUF3RjtBQUNwRixRQUFJaTVCLGFBQWEsR0FBR0QsZ0JBQWdCLENBQUNoNUIsRUFBRCxDQUFwQztBQUNBMVUsWUFBUSxDQUFDeXNCLFFBQVQsQ0FBa0I7QUFDZHBxQixVQUFJLEVBQUUscUJBRFE7QUFFZDRlLGNBQVEsRUFBRTBzQixhQUFhLENBQUMxc0I7QUFGVixLQUFsQjtBQUlIOztBQUNELE9BQUssSUFBSXNNLEVBQUUsR0FBRyxDQUFULEVBQVlxZ0IsV0FBVyxHQUFHTixTQUEvQixFQUEwQy9mLEVBQUUsR0FBR3FnQixXQUFXLENBQUM3bUMsTUFBM0QsRUFBbUV3bUIsRUFBRSxFQUFyRSxFQUF5RTtBQUNyRSxRQUFJc2dCLFFBQVEsR0FBR0QsV0FBVyxDQUFDcmdCLEVBQUQsQ0FBMUI7QUFDQXZ0QixZQUFRLENBQUM4dEMsY0FBVCxDQUF3QkQsUUFBeEI7QUFDSDtBQUNKLEMsQ0FDRDs7O0FBQ0EsU0FBU1YsYUFBVCxDQUF1QkMsTUFBdkIsRUFBK0JwdEMsUUFBL0IsRUFBeUM7QUFDckNBLFVBQVEsQ0FBQyt0QyxlQUFULENBQXlCWCxNQUF6QixFQURxQyxDQUNIO0FBQ3JDOztBQUVELElBQUlZLE1BQU0sR0FBRyxFQUFiLEMsQ0FBaUI7O0FBQ2pCLElBQUlDLGNBQWMsR0FBRztBQUNqQkMsdUJBQXFCLEVBQUUsS0FETjtBQUVqQkMscUJBQW1CLEVBQUUsVUFGSjtBQUdqQmpzQiwyQkFBeUIsRUFBRSxVQUhWO0FBSWpCRCw0QkFBMEIsRUFBRTtBQUFFL00sT0FBRyxFQUFFO0FBQVAsR0FKWDtBQUtqQms1QixvQkFBa0IsRUFBRSxLQUxIO0FBTWpCcHhCLGtCQUFnQixFQUFFLFVBTkQ7QUFPakI7QUFDQXF4QixjQUFZLEVBQUUsSUFSRztBQVNqQm50QyxhQUFXLEVBQUUsRUFUSTtBQVVqQlosYUFBVyxFQUFFLElBVkk7QUFXakJLLFFBQU0sRUFBRTtBQUNKQyxRQUFJLEVBQUUsT0FERjtBQUVKQyxVQUFNLEVBQUUsRUFGSjtBQUdKQyxTQUFLLEVBQUU7QUFISCxHQVhTO0FBZ0JqQnd0QyxVQUFRLEVBQUUsSUFoQk87QUFpQmpCQyxhQUFXLEVBQUUsS0FqQkk7QUFrQmpCQyx1QkFBcUIsRUFBRSxPQWxCTjtBQW1CakJudEMsVUFBUSxFQUFFLEtBbkJPO0FBb0JqQjtBQUNBWixZQUFVLEVBQUUsVUFyQks7QUFzQmpCZ3VDLFNBQU8sRUFBRSxVQXRCUTtBQXVCakJDLFNBQU8sRUFBRSxVQXZCUTtBQXdCakJDLHFCQUFtQixFQUFFLElBeEJKO0FBeUJqQjtBQUNBQyxjQUFZLEVBQUUsSUExQkc7QUEyQmpCL0MsWUFBVSxFQUFFLE9BM0JLO0FBNEJqQkMsVUFBUSxFQUFFLEtBNUJPO0FBNkJqQkMsZUFBYSxFQUFFLFVBN0JFO0FBOEJqQjVvQyxVQUFRLEVBQUUsT0E5Qk87QUErQmpCO0FBQ0E7QUFDQTByQyxTQUFPLEVBQUUsRUFqQ1E7QUFrQ2pCbnVDLFFBQU0sRUFBRSxFQWxDUztBQW1DakI7QUFDQTtBQUNBO0FBQ0FvdUMsd0JBQXNCLEVBQUUsQ0F0Q1A7QUF1Q2pCQyxhQUFXLEVBQUUsVUF2Q0k7QUF3Q2pCO0FBQ0FDLG9CQUFrQixFQUFFLEdBekNIO0FBMENqQkMsWUFBVSxFQUFFLElBMUNLO0FBMkNqQkMsd0JBQXNCLEVBQUUsS0EzQ1A7QUE0Q2pCO0FBQ0FDLGNBQVksRUFBRSxJQTdDRztBQThDakI7QUFDQUMsWUFBVSxFQUFFLEdBL0NLO0FBZ0RqQkMsWUFBVSxFQUFFLDhCQWhESztBQWlEakI7QUFDQTtBQUNBQyxZQUFVLEVBQUUsS0FuREs7QUFvRGpCQyxpQkFBZSxFQUFFLFNBcERBO0FBcURqQkMsa0JBQWdCLEVBQUU7QUFBRXY2QixTQUFLLEVBQUUsTUFBVDtBQUFpQkMsT0FBRyxFQUFFLFNBQXRCO0FBQWlDakMsUUFBSSxFQUFFO0FBQXZDLEdBckREO0FBc0RqQnc4QixvQkFBa0IsRUFBRSxJQXRESDtBQXVEakJDLG1CQUFpQixFQUFFLEdBdkRGO0FBd0RqQkMsZ0JBQWMsRUFBRSxJQXhEQztBQXlEakJDLHNCQUFvQixFQUFFLENBekRMLENBeURPOztBQXpEUCxDQUFyQjtBQTJEQSxJQUFJQyxXQUFXLEdBQUc7QUFDZGx2QyxRQUFNLEVBQUU7QUFDSkMsUUFBSSxFQUFFLGlCQURGO0FBRUpDLFVBQU0sRUFBRSxFQUZKO0FBR0pDLFNBQUssRUFBRTtBQUhILEdBRE07QUFNZGd2QyxhQUFXLEVBQUU7QUFDVDtBQUNBQyxRQUFJLEVBQUUsdUJBRkc7QUFHVEMsUUFBSSxFQUFFLHNCQUhHO0FBSVRDLFlBQVEsRUFBRSx3QkFKRDtBQUtUQyxZQUFRLEVBQUU7QUFMRDtBQU5DLENBQWxCO0FBY0EsSUFBSUMsY0FBYyxHQUFHLENBQ2pCLFFBRGlCLEVBRWpCLFFBRmlCLEVBR2pCLFlBSGlCLEVBSWpCLGFBSmlCLENBQXJCLEMsQ0FNQTs7QUFDQSxTQUFTQyxZQUFULENBQXNCQyxVQUF0QixFQUFrQztBQUM5QixTQUFPdHdCLFVBQVUsQ0FBQ3N3QixVQUFELEVBQWFGLGNBQWIsQ0FBakI7QUFDSCxDLENBQ0Q7OztBQUNBLElBQUlHLGdCQUFnQixHQUFHLENBQ25CN0Ysc0JBRG1CLEVBRW5CRyxxQkFGbUIsRUFHbkJ1Qix5QkFIbUIsRUFJbkJRLHNCQUptQixFQUtuQkssMkJBTG1CLENBQXZCOztBQU9BLFNBQVN1RCxnQkFBVCxDQUEwQkMsWUFBMUIsRUFBd0M7QUFDcEMsTUFBSXJ3QyxPQUFPLEdBQUcsRUFBZDs7QUFDQSxPQUFLLElBQUltYixFQUFFLEdBQUcsQ0FBVCxFQUFZbTFCLGNBQWMsR0FBR0QsWUFBbEMsRUFBZ0RsMUIsRUFBRSxHQUFHbTFCLGNBQWMsQ0FBQzFwQyxNQUFwRSxFQUE0RXVVLEVBQUUsRUFBOUUsRUFBa0Y7QUFDOUUsUUFBSW8xQixXQUFXLEdBQUdELGNBQWMsQ0FBQ24xQixFQUFELENBQWhDOztBQUNBLFFBQUksT0FBT28xQixXQUFQLEtBQXVCLFFBQTNCLEVBQXFDO0FBQ2pDLFVBQUlDLFVBQVUsR0FBRyxpQkFBaUJqMkIscUJBQXFCLENBQUNnMkIsV0FBRCxDQUF2RDs7QUFDQSxVQUFJLENBQUNya0MsTUFBTSxDQUFDc2tDLFVBQUQsQ0FBWCxFQUF5QjtBQUNyQjkyQyxlQUFPLENBQUMrMkMsSUFBUixDQUFhLGdDQUFnQ0YsV0FBN0M7QUFDSCxPQUZELE1BR0s7QUFDRHZ3QyxlQUFPLENBQUM4SSxJQUFSLENBQWFvRCxNQUFNLENBQUNza0MsVUFBRCxDQUFOLENBQW1CRSxPQUFoQyxFQURDLENBQ3lDO0FBQzdDO0FBQ0osS0FSRCxNQVNLO0FBQ0Qxd0MsYUFBTyxDQUFDOEksSUFBUixDQUFheW5DLFdBQWI7QUFDSDtBQUNKOztBQUNELFNBQU9KLGdCQUFnQixDQUFDeGhDLE1BQWpCLENBQXdCM08sT0FBeEIsQ0FBUDtBQUNIOztBQUVELElBQUkyd0MsYUFBYSxHQUFHO0FBQ2hCQyxNQUFJLEVBQUUsSUFEVTtBQUVoQmw3QixNQUFJLEVBQUU7QUFDRmxELE9BQUcsRUFBRSxDQURIO0FBRUZDLE9BQUcsRUFBRSxDQUZILENBRUs7O0FBRkwsR0FGVTtBQU1oQm8rQixLQUFHLEVBQUUsS0FOVztBQU9oQkMsWUFBVSxFQUFFO0FBQ1JsQixRQUFJLEVBQUUsTUFERTtBQUVSQyxRQUFJLEVBQUUsTUFGRTtBQUdSQyxZQUFRLEVBQUUsV0FIRjtBQUlSQyxZQUFRLEVBQUUsV0FKRjtBQUtSajlCLFFBQUksRUFBRSxNQUxFO0FBTVJpK0IsU0FBSyxFQUFFLE9BTkM7QUFPUmo4QixTQUFLLEVBQUUsT0FQQztBQVFSWSxRQUFJLEVBQUUsTUFSRTtBQVNSWCxPQUFHLEVBQUUsS0FURztBQVVSaThCLFFBQUksRUFBRTtBQVZFLEdBUEk7QUFtQmhCcm9CLFdBQVMsRUFBRSxHQW5CSztBQW9CaEJzb0IsWUFBVSxFQUFFLFNBcEJJO0FBcUJoQkMsZ0JBQWMsRUFBRSxNQXJCQTtBQXNCaEJDLGlCQUFlLEVBQUU7QUF0QkQsQ0FBcEI7O0FBd0JBLFNBQVNDLGVBQVQsQ0FBeUJDLGtCQUF6QixFQUE2QztBQUN6QyxNQUFJQyxXQUFXLEdBQUdELGtCQUFrQixDQUFDenFDLE1BQW5CLEdBQTRCLENBQTVCLEdBQWdDeXFDLGtCQUFrQixDQUFDLENBQUQsQ0FBbEIsQ0FBc0JULElBQXRELEdBQTZELElBQS9FO0FBQ0EsTUFBSVcsV0FBVyxHQUFHcmxDLE1BQU0sQ0FBQyx3QkFBRCxDQUFOLElBQW9DLEVBQXRELENBRnlDLENBRWlCOztBQUMxRCxNQUFJc2xDLFlBQVksR0FBR3RsQyxNQUFNLENBQUMscUJBQUQsQ0FBTixJQUFpQyxFQUFwRCxDQUh5QyxDQUdlOztBQUN4RCxNQUFJdWxDLGFBQWEsR0FBR0YsV0FBVyxDQUFDNWlDLE1BQVosRUFBbUI7QUFDdkMrUixtQkFBaUIsQ0FBQzh3QixZQUFELENBREcsRUFDYTtBQUNqQ0gsb0JBRm9CLENBRUQ7QUFGQyxHQUFwQjtBQUlBLE1BQUlLLFlBQVksR0FBRztBQUNmQyxNQUFFLEVBQUVoQixhQURXLENBQ0c7O0FBREgsR0FBbkI7O0FBR0EsT0FBSyxJQUFJeDFCLEVBQUUsR0FBRyxDQUFULEVBQVl5MkIsZUFBZSxHQUFHSCxhQUFuQyxFQUFrRHQyQixFQUFFLEdBQUd5MkIsZUFBZSxDQUFDaHJDLE1BQXZFLEVBQStFdVUsRUFBRSxFQUFqRixFQUFxRjtBQUNqRixRQUFJMDJCLFNBQVMsR0FBR0QsZUFBZSxDQUFDejJCLEVBQUQsQ0FBL0I7QUFDQXUyQixnQkFBWSxDQUFDRyxTQUFTLENBQUNqQixJQUFYLENBQVosR0FBK0JpQixTQUEvQjtBQUNIOztBQUNELFNBQU87QUFDSG5qQyxPQUFHLEVBQUVnakMsWUFERjtBQUVISixlQUFXLEVBQUVBO0FBRlYsR0FBUDtBQUlIOztBQUNELFNBQVNRLFdBQVQsQ0FBcUJDLGFBQXJCLEVBQW9DQyxTQUFwQyxFQUErQztBQUMzQyxNQUFJLE9BQU9ELGFBQVAsS0FBeUIsUUFBekIsSUFBcUMsQ0FBQzFyQyxLQUFLLENBQUNrVCxPQUFOLENBQWN3NEIsYUFBZCxDQUExQyxFQUF3RTtBQUNwRSxXQUFPRSxXQUFXLENBQUNGLGFBQWEsQ0FBQ25CLElBQWYsRUFBcUIsQ0FBQ21CLGFBQWEsQ0FBQ25CLElBQWYsQ0FBckIsRUFBMkNtQixhQUEzQyxDQUFsQjtBQUNILEdBRkQsTUFHSztBQUNELFdBQU9HLFdBQVcsQ0FBQ0gsYUFBRCxFQUFnQkMsU0FBaEIsQ0FBbEI7QUFDSDtBQUNKOztBQUNELFNBQVNFLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCSCxTQUE5QixFQUF5QztBQUNyQyxNQUFJL29CLEtBQUssR0FBRyxHQUFHdGEsTUFBSCxDQUFVd2pDLE9BQU8sSUFBSSxFQUFyQixDQUFaLENBRHFDLENBQ0M7O0FBQ3RDLE1BQUluWixHQUFHLEdBQUdvWixjQUFjLENBQUNucEIsS0FBRCxFQUFRK29CLFNBQVIsQ0FBZCxJQUFvQ3JCLGFBQTlDO0FBQ0EsU0FBT3NCLFdBQVcsQ0FBQ0UsT0FBRCxFQUFVbHBCLEtBQVYsRUFBaUIrUCxHQUFqQixDQUFsQjtBQUNIOztBQUNELFNBQVNvWixjQUFULENBQXdCbnBCLEtBQXhCLEVBQStCK29CLFNBQS9CLEVBQTBDO0FBQ3RDLE9BQUssSUFBSXJ0QyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHc2tCLEtBQUssQ0FBQ3JpQixNQUExQixFQUFrQ2pDLENBQUMsRUFBbkMsRUFBdUM7QUFDbkMsUUFBSWdsQixLQUFLLEdBQUdWLEtBQUssQ0FBQ3RrQixDQUFELENBQUwsQ0FBUzJrQixpQkFBVCxHQUE2QmhRLEtBQTdCLENBQW1DLEdBQW5DLENBQVo7O0FBQ0EsU0FBSyxJQUFJelEsQ0FBQyxHQUFHOGdCLEtBQUssQ0FBQy9pQixNQUFuQixFQUEyQmlDLENBQUMsR0FBRyxDQUEvQixFQUFrQ0EsQ0FBQyxFQUFuQyxFQUF1QztBQUNuQyxVQUFJd3BDLFFBQVEsR0FBRzFvQixLQUFLLENBQUNwakIsS0FBTixDQUFZLENBQVosRUFBZXNDLENBQWYsRUFBa0JtaEIsSUFBbEIsQ0FBdUIsR0FBdkIsQ0FBZjs7QUFDQSxVQUFJZ29CLFNBQVMsQ0FBQ0ssUUFBRCxDQUFiLEVBQXlCO0FBQ3JCLGVBQU9MLFNBQVMsQ0FBQ0ssUUFBRCxDQUFoQjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFTSixXQUFULENBQXFCRSxPQUFyQixFQUE4QmxwQixLQUE5QixFQUFxQytQLEdBQXJDLEVBQTBDO0FBQ3RDLE1BQUlzWixNQUFNLEdBQUcxeUIsVUFBVSxDQUFDLENBQUMrd0IsYUFBRCxFQUFnQjNYLEdBQWhCLENBQUQsRUFBdUIsQ0FBQyxZQUFELENBQXZCLENBQXZCO0FBQ0EsU0FBT3NaLE1BQU0sQ0FBQzFCLElBQWQsQ0FGc0MsQ0FFbEI7O0FBQ3BCLE1BQUlsN0IsSUFBSSxHQUFHNDhCLE1BQU0sQ0FBQzU4QixJQUFsQjtBQUNBLFNBQU80OEIsTUFBTSxDQUFDNThCLElBQWQ7QUFDQSxTQUFPO0FBQ0h5OEIsV0FBTyxFQUFFQSxPQUROO0FBRUhscEIsU0FBSyxFQUFFQSxLQUZKO0FBR0h2VCxRQUFJLEVBQUVBLElBSEg7QUFJSGtVLHNCQUFrQixFQUFFLElBQUliLElBQUksQ0FBQ3dwQixZQUFULENBQXNCSixPQUF0QixDQUpqQjtBQUtIdG9CLFdBQU8sRUFBRXlvQjtBQUxOLEdBQVA7QUFPSDs7QUFFRCxJQUFJRSxjQUFjO0FBQUc7QUFBZSxZQUFZO0FBQzVDLFdBQVNBLGNBQVQsQ0FBd0JDLFNBQXhCLEVBQW1DO0FBQy9CLFNBQUtBLFNBQUwsR0FBaUJyMEIsUUFBUSxDQUFDLEVBQUQsRUFBS3EwQixTQUFMLENBQXpCLENBRCtCLENBQ1c7O0FBQzFDLFNBQUtDLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0EsU0FBS0MsT0FBTDtBQUNIOztBQUNESCxnQkFBYyxDQUFDbHNDLFNBQWYsQ0FBeUJpbkIsTUFBekIsR0FBa0MsVUFBVXFsQixPQUFWLEVBQW1CamUsUUFBbkIsRUFBNkJrZSxTQUE3QixFQUF3QztBQUN0RSxRQUFJQyxZQUFZLEdBQUdELFNBQVMsR0FBRyxLQUFLSCxnQkFBUixHQUEyQixLQUFLRCxTQUE1RDs7QUFDQXIwQixZQUFRLENBQUMwMEIsWUFBRCxFQUFlRixPQUFmLENBQVI7O0FBQ0EsU0FBSyxJQUFJejNCLEVBQUUsR0FBRyxDQUFULEVBQVk0M0IsVUFBVSxHQUFHcGUsUUFBOUIsRUFBd0N4WixFQUFFLEdBQUc0M0IsVUFBVSxDQUFDbnNDLE1BQXhELEVBQWdFdVUsRUFBRSxFQUFsRSxFQUFzRTtBQUNsRSxVQUFJMVIsUUFBUSxHQUFHc3BDLFVBQVUsQ0FBQzUzQixFQUFELENBQXpCO0FBQ0EsYUFBTzIzQixZQUFZLENBQUNycEMsUUFBRCxDQUFuQjtBQUNIOztBQUNELFNBQUtrcEMsT0FBTDtBQUNILEdBUkQsQ0FONEMsQ0FlNUM7QUFDQTs7O0FBQ0FILGdCQUFjLENBQUNsc0MsU0FBZixDQUF5QnFzQyxPQUF6QixHQUFtQyxZQUFZO0FBQzNDO0FBQ0EsUUFBSWpFLE9BQU8sR0FBR3h6QixZQUFZLEVBQUM7QUFDM0IsU0FBS3czQixnQkFBTCxDQUFzQmhFLE9BREksRUFDSyxLQUFLK0QsU0FBTCxDQUFlL0QsT0FEcEIsRUFDNkJaLGNBQWMsQ0FBQ1ksT0FENUMsQ0FBMUI7QUFFQSxRQUFJbnVDLE1BQU0sR0FBRzJhLFlBQVksRUFBQztBQUMxQixTQUFLdzNCLGdCQUFMLENBQXNCbnlDLE1BREcsRUFDSyxLQUFLa3lDLFNBQUwsQ0FBZWx5QyxNQURwQixFQUM0QnV0QyxjQUFjLENBQUN2dEMsTUFEM0MsQ0FBekI7QUFFQSxRQUFJeXhDLFNBQVMsR0FBR1osZUFBZSxDQUFDMUMsT0FBRCxDQUEvQjtBQUNBLFFBQUlzRSxjQUFjLEdBQUdsQixXQUFXLENBQUN2eEMsTUFBTSxJQUFJeXhDLFNBQVMsQ0FBQ1YsV0FBckIsRUFBa0NVLFNBQVMsQ0FBQ3RqQyxHQUE1QyxDQUFYLENBQTREbWIsT0FBakY7QUFDQSxRQUFJZ25CLEdBQUcsR0FBRzMxQixZQUFZLEVBQUM7QUFDdkIsU0FBS3czQixnQkFBTCxDQUFzQjdCLEdBREEsRUFDSyxLQUFLNEIsU0FBTCxDQUFlNUIsR0FEcEIsRUFDeUJtQyxjQUFjLENBQUNuQyxHQUR4QyxDQUF0QjtBQUVBLFFBQUlvQyxXQUFXLEdBQUdwQyxHQUFHLEtBQUssS0FBUixHQUFnQm5CLFdBQWhCLEdBQThCLEVBQWhEO0FBQ0EsU0FBS3VELFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS0QsY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLN2tDLFFBQUwsR0FBZ0I4aEMsWUFBWSxDQUFDLENBQ3pCbkMsY0FEeUIsRUFFekJtRixXQUZ5QixFQUd6QkQsY0FIeUIsRUFJekIsS0FBS1AsU0FKb0IsRUFLekIsS0FBS0MsZ0JBTG9CLENBQUQsQ0FBNUI7QUFPSCxHQXBCRDs7QUFxQkEsU0FBT0YsY0FBUDtBQUNILENBdkNtQyxFQUFwQzs7QUF5Q0EsSUFBSVUsc0JBQXNCLEdBQUcsRUFBN0I7O0FBQ0EsU0FBU0Msc0JBQVQsQ0FBZ0N4cEMsSUFBaEMsRUFBc0N5cEMsUUFBdEMsRUFBZ0Q7QUFDNUNGLHdCQUFzQixDQUFDdnBDLElBQUQsQ0FBdEIsR0FBK0J5cEMsUUFBL0I7QUFDSDs7QUFDRCxTQUFTQyxvQkFBVCxDQUE4QjFwQyxJQUE5QixFQUFvQztBQUNoQyxTQUFPLElBQUl1cEMsc0JBQXNCLENBQUN2cEMsSUFBRCxDQUExQixFQUFQO0FBQ0g7O0FBQ0QsSUFBSTJwQyx1QkFBdUI7QUFBRztBQUFlLFlBQVk7QUFDckQsV0FBU0EsdUJBQVQsR0FBbUMsQ0FDbEM7O0FBQ0RBLHlCQUF1QixDQUFDaHRDLFNBQXhCLENBQWtDNGpCLGFBQWxDLEdBQWtELFVBQVV4WSxDQUFWLEVBQWE7QUFDM0QsV0FBT0EsQ0FBQyxDQUFDRyxjQUFGLEVBQVA7QUFDSCxHQUZEOztBQUdBeWhDLHlCQUF1QixDQUFDaHRDLFNBQXhCLENBQWtDNmpCLGNBQWxDLEdBQW1ELFVBQVV6WSxDQUFWLEVBQWE7QUFDNUQsV0FBT0EsQ0FBQyxDQUFDSSxXQUFGLEVBQVA7QUFDSCxHQUZEOztBQUdBd2hDLHlCQUF1QixDQUFDaHRDLFNBQXhCLENBQWtDOGpCLFlBQWxDLEdBQWlELFVBQVUxWSxDQUFWLEVBQWE7QUFDMUQsV0FBT0EsQ0FBQyxDQUFDSyxVQUFGLEVBQVA7QUFDSCxHQUZEOztBQUdBdWhDLHlCQUF1QixDQUFDaHRDLFNBQXhCLENBQWtDaXRDLGFBQWxDLEdBQWtELFVBQVVDLEdBQVYsRUFBZTtBQUM3RCxXQUFPbGpDLGNBQWMsQ0FBQ2tqQyxHQUFELENBQXJCO0FBQ0gsR0FGRDs7QUFHQUYseUJBQXVCLENBQUNodEMsU0FBeEIsQ0FBa0M2bEIsYUFBbEMsR0FBa0QsVUFBVTVaLE1BQVYsRUFBa0I7QUFDaEUsV0FBT2xDLGNBQWMsQ0FBQ2tDLE1BQUQsQ0FBckI7QUFDSCxHQUZEOztBQUdBLFNBQU8rZ0MsdUJBQVA7QUFDSCxDQW5CNEMsRUFBN0M7O0FBb0JBSCxzQkFBc0IsQ0FBQyxTQUFELEVBQVlHLHVCQUFaLENBQXRCO0FBRUEsSUFBSUcsTUFBTSxHQUFHLCtHQUFiOztBQUNBLFNBQVMzMEIsS0FBVCxDQUFldEUsR0FBZixFQUFvQjtBQUNoQixNQUFJdEssQ0FBQyxHQUFHdWpDLE1BQU0sQ0FBQzkrQixJQUFQLENBQVk2RixHQUFaLENBQVI7O0FBQ0EsTUFBSXRLLENBQUosRUFBTztBQUNILFFBQUlxQyxNQUFNLEdBQUcsSUFBSXVCLElBQUosQ0FBU0EsSUFBSSxDQUFDRSxHQUFMLENBQVN1SSxNQUFNLENBQUNyTSxDQUFDLENBQUMsQ0FBRCxDQUFGLENBQWYsRUFBdUJBLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT3FNLE1BQU0sQ0FBQ3JNLENBQUMsQ0FBQyxDQUFELENBQUYsQ0FBTixHQUFlLENBQXRCLEdBQTBCLENBQWpELEVBQW9EcU0sTUFBTSxDQUFDck0sQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLENBQVQsQ0FBMUQsRUFBdUVxTSxNQUFNLENBQUNyTSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsQ0FBVCxDQUE3RSxFQUEwRnFNLE1BQU0sQ0FBQ3JNLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxDQUFULENBQWhHLEVBQTZHcU0sTUFBTSxDQUFDck0sQ0FBQyxDQUFDLEVBQUQsQ0FBRCxJQUFTLENBQVYsQ0FBbkgsRUFBaUlBLENBQUMsQ0FBQyxFQUFELENBQUQsR0FBUXFNLE1BQU0sQ0FBQyxPQUFPck0sQ0FBQyxDQUFDLEVBQUQsQ0FBVCxDQUFOLEdBQXVCLElBQS9CLEdBQXNDLENBQXZLLENBQVQsQ0FBYjs7QUFDQSxRQUFJZ0UsV0FBVyxDQUFDM0IsTUFBRCxDQUFmLEVBQXlCO0FBQ3JCLFVBQUlpVyxjQUFjLEdBQUcsSUFBckI7O0FBQ0EsVUFBSXRZLENBQUMsQ0FBQyxFQUFELENBQUwsRUFBVztBQUNQc1ksc0JBQWMsR0FBRyxDQUFDdFksQ0FBQyxDQUFDLEVBQUQsQ0FBRCxLQUFVLEdBQVYsR0FBZ0IsQ0FBQyxDQUFqQixHQUFxQixDQUF0QixLQUE0QnFNLE1BQU0sQ0FBQ3JNLENBQUMsQ0FBQyxFQUFELENBQUQsSUFBUyxDQUFWLENBQU4sR0FBcUIsRUFBckIsR0FDekNxTSxNQUFNLENBQUNyTSxDQUFDLENBQUMsRUFBRCxDQUFELElBQVMsQ0FBVixDQURPLENBQWpCO0FBRUg7O0FBQ0QsYUFBTztBQUNIcUMsY0FBTSxFQUFFQSxNQURMO0FBRUh5b0IseUJBQWlCLEVBQUUsQ0FBQzlxQixDQUFDLENBQUMsQ0FBRCxDQUZsQjtBQUdIc1ksc0JBQWMsRUFBRUE7QUFIYixPQUFQO0FBS0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFFRCxJQUFJa3JCLE9BQU87QUFBRztBQUFlLFlBQVk7QUFDckMsV0FBU0EsT0FBVCxDQUFpQkMsUUFBakIsRUFBMkI7QUFDdkIsUUFBSTN3QyxRQUFRLEdBQUcsS0FBS0EsUUFBTCxHQUFnQjJ3QyxRQUFRLENBQUMzd0MsUUFBeEM7QUFDQSxRQUFJNHdDLGVBQWUsR0FBRzV3QyxRQUFRLEtBQUssT0FBYixJQUF3QkEsUUFBUSxLQUFLLEtBQTNEOztBQUNBLFFBQUkyd0MsUUFBUSxDQUFDRSxpQkFBVCxJQUE4QkQsZUFBbEMsRUFBbUQ7QUFDL0MsV0FBS0MsaUJBQUwsR0FBeUIsSUFBSUYsUUFBUSxDQUFDRSxpQkFBYixDQUErQjd3QyxRQUEvQixDQUF6QjtBQUNIOztBQUNELFNBQUt5eEIsZ0JBQUwsR0FBd0JqWSxPQUFPLENBQUMsQ0FBQ28zQixlQUFELElBQW9CLEtBQUtDLGlCQUExQixDQUEvQjtBQUNBLFNBQUt0c0IsY0FBTCxHQUFzQjhyQixvQkFBb0IsQ0FBQ00sUUFBUSxDQUFDcHNCLGNBQVYsQ0FBMUM7QUFDQSxTQUFLaG5CLE1BQUwsR0FBY296QyxRQUFRLENBQUNwekMsTUFBdkI7QUFDQSxTQUFLdXpDLE9BQUwsR0FBZUgsUUFBUSxDQUFDcHpDLE1BQVQsQ0FBZ0JtVixJQUFoQixDQUFxQmxELEdBQXBDO0FBQ0EsU0FBS3VoQyxPQUFMLEdBQWVKLFFBQVEsQ0FBQ3B6QyxNQUFULENBQWdCbVYsSUFBaEIsQ0FBcUJqRCxHQUFwQzs7QUFDQSxRQUFJa2hDLFFBQVEsQ0FBQ3RGLHFCQUFULEtBQW1DLEtBQXZDLEVBQThDO0FBQzFDLFdBQUt5RixPQUFMLEdBQWUsQ0FBZjtBQUNBLFdBQUtDLE9BQUwsR0FBZSxDQUFmO0FBQ0g7O0FBQ0QsUUFBSSxPQUFPSixRQUFRLENBQUNLLFFBQWhCLEtBQTZCLFFBQWpDLEVBQTJDO0FBQ3ZDLFdBQUtGLE9BQUwsR0FBZUgsUUFBUSxDQUFDSyxRQUF4QjtBQUNIOztBQUNELFFBQUksT0FBT0wsUUFBUSxDQUFDdEYscUJBQWhCLEtBQTBDLFVBQTlDLEVBQTBEO0FBQ3RELFdBQUs0RixjQUFMLEdBQXNCTixRQUFRLENBQUN0RixxQkFBL0I7QUFDSDs7QUFDRCxTQUFLMWxCLFNBQUwsR0FBaUJnckIsUUFBUSxDQUFDaHJCLFNBQVQsSUFBc0IsSUFBdEIsR0FBNkJnckIsUUFBUSxDQUFDaHJCLFNBQXRDLEdBQWtEZ3JCLFFBQVEsQ0FBQ3B6QyxNQUFULENBQWdCc3BCLE9BQWhCLENBQXdCbEIsU0FBM0Y7QUFDQSxTQUFLd0MsWUFBTCxHQUFvQndvQixRQUFRLENBQUN4b0IsWUFBN0I7QUFDSCxHQXhCb0MsQ0F5QnJDOzs7QUFDQXVvQixTQUFPLENBQUNwdEMsU0FBUixDQUFrQnVkLFlBQWxCLEdBQWlDLFVBQVUza0IsS0FBVixFQUFpQjtBQUM5QyxRQUFJNHRCLElBQUksR0FBRyxLQUFLaU8sZ0JBQUwsQ0FBc0I3N0IsS0FBdEIsQ0FBWDs7QUFDQSxRQUFJNHRCLElBQUksS0FBSyxJQUFiLEVBQW1CO0FBQ2YsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBT0EsSUFBSSxDQUFDdmEsTUFBWjtBQUNILEdBTkQ7O0FBT0FtaEMsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0I0dEMsZUFBbEIsR0FBb0MsWUFBWTtBQUM1QyxRQUFJLEtBQUt6ZixnQkFBVCxFQUEyQjtBQUN2QixhQUFPLEtBQUswZixpQkFBTCxDQUF1QixJQUFJcmdDLElBQUosR0FBV2pELE9BQVgsRUFBdkIsQ0FBUDtBQUNILEtBRkQsTUFHSztBQUNEO0FBQ0E7QUFDQSxhQUFPUCxjQUFjLENBQUMrQyxnQkFBZ0IsQ0FBQyxJQUFJUyxJQUFKLEVBQUQsQ0FBakIsQ0FBckI7QUFDSDtBQUNKLEdBVEQ7O0FBVUE0L0IsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0J5MEIsZ0JBQWxCLEdBQXFDLFVBQVU3N0IsS0FBVixFQUFpQjtBQUNsRCxRQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsYUFBTyxLQUFLNGYsS0FBTCxDQUFXNWYsS0FBWCxDQUFQO0FBQ0g7O0FBQ0QsUUFBSXFULE1BQU0sR0FBRyxJQUFiOztBQUNBLFFBQUksT0FBT3JULEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0JxVCxZQUFNLEdBQUcsS0FBSzRoQyxpQkFBTCxDQUF1QmoxQyxLQUF2QixDQUFUO0FBQ0gsS0FGRCxNQUdLLElBQUlBLEtBQUssWUFBWTRVLElBQXJCLEVBQTJCO0FBQzVCNVUsV0FBSyxHQUFHQSxLQUFLLENBQUMyUixPQUFOLEVBQVI7O0FBQ0EsVUFBSSxDQUFDalQsS0FBSyxDQUFDc0IsS0FBRCxDQUFWLEVBQW1CO0FBQ2ZxVCxjQUFNLEdBQUcsS0FBSzRoQyxpQkFBTCxDQUF1QmoxQyxLQUF2QixDQUFUO0FBQ0g7QUFDSixLQUxJLE1BTUEsSUFBSW1ILEtBQUssQ0FBQ2tULE9BQU4sQ0FBY3JhLEtBQWQsQ0FBSixFQUEwQjtBQUMzQnFULFlBQU0sR0FBR2pDLGNBQWMsQ0FBQ3BSLEtBQUQsQ0FBdkI7QUFDSDs7QUFDRCxRQUFJcVQsTUFBTSxLQUFLLElBQVgsSUFBbUIsQ0FBQzJCLFdBQVcsQ0FBQzNCLE1BQUQsQ0FBbkMsRUFBNkM7QUFDekMsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTztBQUFFQSxZQUFNLEVBQUVBLE1BQVY7QUFBa0J5b0IsdUJBQWlCLEVBQUUsS0FBckM7QUFBNEN6TCxlQUFTLEVBQUU7QUFBdkQsS0FBUDtBQUNILEdBckJEOztBQXNCQW1rQixTQUFPLENBQUNwdEMsU0FBUixDQUFrQndZLEtBQWxCLEdBQTBCLFVBQVVwSyxDQUFWLEVBQWE7QUFDbkMsUUFBSWlWLEtBQUssR0FBRzdLLEtBQUssQ0FBQ3BLLENBQUQsQ0FBakI7O0FBQ0EsUUFBSWlWLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2hCLGFBQU8sSUFBUDtBQUNIOztBQUNELFFBQUlwWCxNQUFNLEdBQUdvWCxLQUFLLENBQUNwWCxNQUFuQjtBQUNBLFFBQUlnZCxTQUFTLEdBQUcsSUFBaEI7O0FBQ0EsUUFBSTVGLEtBQUssQ0FBQ25CLGNBQU4sS0FBeUIsSUFBN0IsRUFBbUM7QUFDL0IsVUFBSSxLQUFLaU0sZ0JBQVQsRUFBMkI7QUFDdkJsaUIsY0FBTSxHQUFHLEtBQUs0aEMsaUJBQUwsQ0FBdUI1aEMsTUFBTSxDQUFDMUIsT0FBUCxLQUFtQjhZLEtBQUssQ0FBQ25CLGNBQU4sR0FBdUIsRUFBdkIsR0FBNEIsSUFBdEUsQ0FBVDtBQUNILE9BRkQsTUFHSztBQUNEK0csaUJBQVMsR0FBRzVGLEtBQUssQ0FBQ25CLGNBQWxCO0FBQ0g7QUFDSjs7QUFDRCxXQUFPO0FBQUVqVyxZQUFNLEVBQUVBLE1BQVY7QUFBa0J5b0IsdUJBQWlCLEVBQUVyUixLQUFLLENBQUNxUixpQkFBM0M7QUFBOER6TCxlQUFTLEVBQUVBO0FBQXpFLEtBQVA7QUFDSCxHQWhCRCxDQWpFcUMsQ0FrRnJDOzs7QUFDQW1rQixTQUFPLENBQUNwdEMsU0FBUixDQUFrQjh0QyxPQUFsQixHQUE0QixVQUFVN2hDLE1BQVYsRUFBa0I7QUFDMUMsV0FBTyxLQUFLZ1YsY0FBTCxDQUFvQjJDLGFBQXBCLENBQWtDM1gsTUFBbEMsQ0FBUDtBQUNILEdBRkQ7O0FBR0FtaEMsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0JpTixRQUFsQixHQUE2QixVQUFVaEIsTUFBVixFQUFrQjtBQUMzQyxXQUFPLEtBQUtnVixjQUFMLENBQW9CNEMsY0FBcEIsQ0FBbUM1WCxNQUFuQyxDQUFQO0FBQ0gsR0FGRCxDQXRGcUMsQ0F5RnJDOzs7QUFDQW1oQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQmdELEdBQWxCLEdBQXdCLFVBQVVpSixNQUFWLEVBQWtCd0QsR0FBbEIsRUFBdUI7QUFDM0MsUUFBSTNGLENBQUMsR0FBRyxLQUFLbVgsY0FBTCxDQUFvQjRFLGFBQXBCLENBQWtDNVosTUFBbEMsQ0FBUjtBQUNBbkMsS0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRMkYsR0FBRyxDQUFDMUUsS0FBWjtBQUNBakIsS0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRMkYsR0FBRyxDQUFDekUsTUFBWjtBQUNBbEIsS0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRMkYsR0FBRyxDQUFDeEUsSUFBWjtBQUNBbkIsS0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRMkYsR0FBRyxDQUFDdkUsWUFBWjtBQUNBLFdBQU8sS0FBSytWLGNBQUwsQ0FBb0Jnc0IsYUFBcEIsQ0FBa0NuakMsQ0FBbEMsQ0FBUDtBQUNILEdBUEQ7O0FBUUFzakMsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0JxWixRQUFsQixHQUE2QixVQUFVcE4sTUFBVixFQUFrQndELEdBQWxCLEVBQXVCO0FBQ2hELFFBQUkzRixDQUFDLEdBQUcsS0FBS21YLGNBQUwsQ0FBb0I0RSxhQUFwQixDQUFrQzVaLE1BQWxDLENBQVI7QUFDQW5DLEtBQUMsQ0FBQyxDQUFELENBQUQsSUFBUTJGLEdBQUcsQ0FBQzFFLEtBQVo7QUFDQWpCLEtBQUMsQ0FBQyxDQUFELENBQUQsSUFBUTJGLEdBQUcsQ0FBQ3pFLE1BQVo7QUFDQWxCLEtBQUMsQ0FBQyxDQUFELENBQUQsSUFBUTJGLEdBQUcsQ0FBQ3hFLElBQVo7QUFDQW5CLEtBQUMsQ0FBQyxDQUFELENBQUQsSUFBUTJGLEdBQUcsQ0FBQ3ZFLFlBQVo7QUFDQSxXQUFPLEtBQUsrVixjQUFMLENBQW9CZ3NCLGFBQXBCLENBQWtDbmpDLENBQWxDLENBQVA7QUFDSCxHQVBEOztBQVFBc2pDLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCK3RDLFFBQWxCLEdBQTZCLFVBQVU5aEMsTUFBVixFQUFrQnBDLENBQWxCLEVBQXFCO0FBQzlDLFFBQUlDLENBQUMsR0FBRyxLQUFLbVgsY0FBTCxDQUFvQjRFLGFBQXBCLENBQWtDNVosTUFBbEMsQ0FBUjtBQUNBbkMsS0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRRCxDQUFSO0FBQ0EsV0FBTyxLQUFLb1gsY0FBTCxDQUFvQmdzQixhQUFwQixDQUFrQ25qQyxDQUFsQyxDQUFQO0FBQ0gsR0FKRDs7QUFLQXNqQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQmd1QyxTQUFsQixHQUE4QixVQUFVL2hDLE1BQVYsRUFBa0JwQyxDQUFsQixFQUFxQjtBQUMvQyxRQUFJQyxDQUFDLEdBQUcsS0FBS21YLGNBQUwsQ0FBb0I0RSxhQUFwQixDQUFrQzVaLE1BQWxDLENBQVI7QUFDQW5DLEtBQUMsQ0FBQyxDQUFELENBQUQsSUFBUUQsQ0FBUjtBQUNBLFdBQU8sS0FBS29YLGNBQUwsQ0FBb0Jnc0IsYUFBcEIsQ0FBa0NuakMsQ0FBbEMsQ0FBUDtBQUNILEdBSkQsQ0EvR3FDLENBb0hyQzs7O0FBQ0FzakMsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0JtWCxjQUFsQixHQUFtQyxVQUFVL00sRUFBVixFQUFjQyxFQUFkLEVBQWtCO0FBQ2pELFFBQUk0VyxjQUFjLEdBQUcsS0FBS0EsY0FBMUI7O0FBQ0EsUUFBSTNWLFFBQVEsQ0FBQ2xCLEVBQUQsQ0FBUixLQUFpQmtCLFFBQVEsQ0FBQ2pCLEVBQUQsQ0FBekIsSUFDQTRXLGNBQWMsQ0FBQzZDLFlBQWYsQ0FBNEIxWixFQUE1QixNQUFvQzZXLGNBQWMsQ0FBQzZDLFlBQWYsQ0FBNEJ6WixFQUE1QixDQURwQyxJQUVBNFcsY0FBYyxDQUFDNEMsY0FBZixDQUE4QnpaLEVBQTlCLE1BQXNDNlcsY0FBYyxDQUFDNEMsY0FBZixDQUE4QnhaLEVBQTlCLENBRjFDLEVBRTZFO0FBQ3pFLGFBQU80VyxjQUFjLENBQUMyQyxhQUFmLENBQTZCdlosRUFBN0IsSUFBbUM0VyxjQUFjLENBQUMyQyxhQUFmLENBQTZCeFosRUFBN0IsQ0FBMUM7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVJEOztBQVNBZ2pDLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCb1gsZUFBbEIsR0FBb0MsVUFBVWhOLEVBQVYsRUFBY0MsRUFBZCxFQUFrQjtBQUNsRCxRQUFJNFcsY0FBYyxHQUFHLEtBQUtBLGNBQTFCOztBQUNBLFFBQUkzVixRQUFRLENBQUNsQixFQUFELENBQVIsS0FBaUJrQixRQUFRLENBQUNqQixFQUFELENBQXpCLElBQ0E0VyxjQUFjLENBQUM2QyxZQUFmLENBQTRCMVosRUFBNUIsTUFBb0M2VyxjQUFjLENBQUM2QyxZQUFmLENBQTRCelosRUFBNUIsQ0FEeEMsRUFDeUU7QUFDckUsYUFBUTRXLGNBQWMsQ0FBQzRDLGNBQWYsQ0FBOEJ4WixFQUE5QixJQUFvQzRXLGNBQWMsQ0FBQzRDLGNBQWYsQ0FBOEJ6WixFQUE5QixDQUFyQyxHQUNILENBQUM2VyxjQUFjLENBQUMyQyxhQUFmLENBQTZCdlosRUFBN0IsSUFBbUM0VyxjQUFjLENBQUMyQyxhQUFmLENBQTZCeFosRUFBN0IsQ0FBcEMsSUFBd0UsRUFENUU7QUFFSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVJELENBOUhxQyxDQXVJckM7OztBQUNBZ2pDLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCaXVDLGlCQUFsQixHQUFzQyxVQUFVN2pDLEVBQVYsRUFBY0MsRUFBZCxFQUFrQjtBQUNwRCxRQUFJUixDQUFDLEdBQUcsS0FBS3NOLGNBQUwsQ0FBb0IvTSxFQUFwQixFQUF3QkMsRUFBeEIsQ0FBUjs7QUFDQSxRQUFJUixDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNaLGFBQU87QUFBRW1FLFlBQUksRUFBRSxNQUFSO0FBQWdCMEMsYUFBSyxFQUFFN0c7QUFBdkIsT0FBUDtBQUNIOztBQUNEQSxLQUFDLEdBQUcsS0FBS3VOLGVBQUwsQ0FBcUJoTixFQUFyQixFQUF5QkMsRUFBekIsQ0FBSjs7QUFDQSxRQUFJUixDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNaLGFBQU87QUFBRW1FLFlBQUksRUFBRSxPQUFSO0FBQWlCMEMsYUFBSyxFQUFFN0c7QUFBeEIsT0FBUDtBQUNIOztBQUNEQSxLQUFDLEdBQUdzQixjQUFjLENBQUNmLEVBQUQsRUFBS0MsRUFBTCxDQUFsQjs7QUFDQSxRQUFJUixDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNaLGFBQU87QUFBRW1FLFlBQUksRUFBRSxNQUFSO0FBQWdCMEMsYUFBSyxFQUFFN0c7QUFBdkIsT0FBUDtBQUNIOztBQUNEQSxLQUFDLEdBQUd3QixhQUFhLENBQUNqQixFQUFELEVBQUtDLEVBQUwsQ0FBakI7O0FBQ0EsUUFBSVIsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDWixhQUFPO0FBQUVtRSxZQUFJLEVBQUUsS0FBUjtBQUFlMEMsYUFBSyxFQUFFN0c7QUFBdEIsT0FBUDtBQUNIOztBQUNEQSxLQUFDLEdBQUdXLFNBQVMsQ0FBQ0osRUFBRCxFQUFLQyxFQUFMLENBQWI7O0FBQ0EsUUFBSWtHLEtBQUssQ0FBQzFHLENBQUQsQ0FBVCxFQUFjO0FBQ1YsYUFBTztBQUFFbUUsWUFBSSxFQUFFLE1BQVI7QUFBZ0IwQyxhQUFLLEVBQUU3RztBQUF2QixPQUFQO0FBQ0g7O0FBQ0RBLEtBQUMsR0FBR1ksV0FBVyxDQUFDTCxFQUFELEVBQUtDLEVBQUwsQ0FBZjs7QUFDQSxRQUFJa0csS0FBSyxDQUFDMUcsQ0FBRCxDQUFULEVBQWM7QUFDVixhQUFPO0FBQUVtRSxZQUFJLEVBQUUsUUFBUjtBQUFrQjBDLGFBQUssRUFBRTdHO0FBQXpCLE9BQVA7QUFDSDs7QUFDREEsS0FBQyxHQUFHYSxXQUFXLENBQUNOLEVBQUQsRUFBS0MsRUFBTCxDQUFmOztBQUNBLFFBQUlrRyxLQUFLLENBQUMxRyxDQUFELENBQVQsRUFBYztBQUNWLGFBQU87QUFBRW1FLFlBQUksRUFBRSxRQUFSO0FBQWtCMEMsYUFBSyxFQUFFN0c7QUFBekIsT0FBUDtBQUNIOztBQUNELFdBQU87QUFBRW1FLFVBQUksRUFBRSxhQUFSO0FBQXVCMEMsV0FBSyxFQUFFckcsRUFBRSxDQUFDRSxPQUFILEtBQWVILEVBQUUsQ0FBQ0csT0FBSDtBQUE3QyxLQUFQO0FBQ0gsR0E5QkQ7O0FBK0JBNmlDLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCa3VDLHFCQUFsQixHQUEwQyxVQUFVOWpDLEVBQVYsRUFBY0MsRUFBZCxFQUFrQmUsQ0FBbEIsRUFBcUI7QUFDM0Q7QUFDQSxRQUFJa0gsSUFBSjs7QUFDQSxRQUFJbEgsQ0FBQyxDQUFDTCxLQUFOLEVBQWE7QUFDVHVILFVBQUksR0FBRyxLQUFLNkUsY0FBTCxDQUFvQi9NLEVBQXBCLEVBQXdCQyxFQUF4QixDQUFQOztBQUNBLFVBQUlpSSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUNmLGVBQU9BLElBQUksR0FBR3pDLFlBQVksQ0FBQ3pFLENBQUQsQ0FBMUI7QUFDSDtBQUNKOztBQUNELFFBQUlBLENBQUMsQ0FBQ0osTUFBTixFQUFjO0FBQ1ZzSCxVQUFJLEdBQUcsS0FBSzhFLGVBQUwsQ0FBcUJoTixFQUFyQixFQUF5QkMsRUFBekIsQ0FBUDs7QUFDQSxVQUFJaUksSUFBSSxLQUFLLElBQWIsRUFBbUI7QUFDZixlQUFPQSxJQUFJLEdBQUd2QyxhQUFhLENBQUMzRSxDQUFELENBQTNCO0FBQ0g7QUFDSjs7QUFDRCxRQUFJQSxDQUFDLENBQUNILElBQU4sRUFBWTtBQUNScUgsVUFBSSxHQUFHakgsYUFBYSxDQUFDakIsRUFBRCxFQUFLQyxFQUFMLENBQXBCOztBQUNBLFVBQUlpSSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUNmLGVBQU9BLElBQUksR0FBR3hDLFdBQVcsQ0FBQzFFLENBQUQsQ0FBekI7QUFDSDtBQUNKOztBQUNELFdBQU8sQ0FBQ2YsRUFBRSxDQUFDRSxPQUFILEtBQWVILEVBQUUsQ0FBQ0csT0FBSCxFQUFoQixJQUFnQ3lGLFNBQVMsQ0FBQzVFLENBQUQsQ0FBaEQ7QUFDSCxHQXRCRCxDQXZLcUMsQ0E4THJDOzs7QUFDQWdpQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQm11QyxPQUFsQixHQUE0QixVQUFVdmtDLENBQVYsRUFBYW9FLElBQWIsRUFBbUI7QUFDM0MsUUFBSUEsSUFBSSxLQUFLLE1BQWIsRUFBcUI7QUFDakIsYUFBTyxLQUFLb2dDLFdBQUwsQ0FBaUJ4a0MsQ0FBakIsQ0FBUDtBQUNILEtBRkQsTUFHSyxJQUFJb0UsSUFBSSxLQUFLLE9BQWIsRUFBc0I7QUFDdkIsYUFBTyxLQUFLcWdDLFlBQUwsQ0FBa0J6a0MsQ0FBbEIsQ0FBUDtBQUNILEtBRkksTUFHQSxJQUFJb0UsSUFBSSxLQUFLLE1BQWIsRUFBcUI7QUFDdEIsYUFBTyxLQUFLc2dDLFdBQUwsQ0FBaUIxa0MsQ0FBakIsQ0FBUDtBQUNILEtBRkksTUFHQSxJQUFJb0UsSUFBSSxLQUFLLEtBQWIsRUFBb0I7QUFDckIsYUFBT25ELFVBQVUsQ0FBQ2pCLENBQUQsQ0FBakI7QUFDSCxLQUZJLE1BR0EsSUFBSW9FLElBQUksS0FBSyxNQUFiLEVBQXFCO0FBQ3RCLGFBQU90QyxXQUFXLENBQUM5QixDQUFELENBQWxCO0FBQ0gsS0FGSSxNQUdBLElBQUlvRSxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUN4QixhQUFPcEMsYUFBYSxDQUFDaEMsQ0FBRCxDQUFwQjtBQUNILEtBRkksTUFHQSxJQUFJb0UsSUFBSSxLQUFLLFFBQWIsRUFBdUI7QUFDeEIsYUFBT2xDLGFBQWEsQ0FBQ2xDLENBQUQsQ0FBcEI7QUFDSDtBQUNKLEdBdEJEOztBQXVCQXdqQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQm91QyxXQUFsQixHQUFnQyxVQUFVeGtDLENBQVYsRUFBYTtBQUN6QyxXQUFPLEtBQUtxWCxjQUFMLENBQW9CZ3NCLGFBQXBCLENBQWtDLENBQ3JDLEtBQUtoc0IsY0FBTCxDQUFvQjJDLGFBQXBCLENBQWtDaGEsQ0FBbEMsQ0FEcUMsQ0FBbEMsQ0FBUDtBQUdILEdBSkQ7O0FBS0F3akMsU0FBTyxDQUFDcHRDLFNBQVIsQ0FBa0JxdUMsWUFBbEIsR0FBaUMsVUFBVXprQyxDQUFWLEVBQWE7QUFDMUMsV0FBTyxLQUFLcVgsY0FBTCxDQUFvQmdzQixhQUFwQixDQUFrQyxDQUNyQyxLQUFLaHNCLGNBQUwsQ0FBb0IyQyxhQUFwQixDQUFrQ2hhLENBQWxDLENBRHFDLEVBRXJDLEtBQUtxWCxjQUFMLENBQW9CNEMsY0FBcEIsQ0FBbUNqYSxDQUFuQyxDQUZxQyxDQUFsQyxDQUFQO0FBSUgsR0FMRDs7QUFNQXdqQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQnN1QyxXQUFsQixHQUFnQyxVQUFVMWtDLENBQVYsRUFBYTtBQUN6QyxXQUFPLEtBQUtxWCxjQUFMLENBQW9CZ3NCLGFBQXBCLENBQWtDLENBQ3JDLEtBQUtoc0IsY0FBTCxDQUFvQjJDLGFBQXBCLENBQWtDaGEsQ0FBbEMsQ0FEcUMsRUFFckMsS0FBS3FYLGNBQUwsQ0FBb0I0QyxjQUFwQixDQUFtQ2phLENBQW5DLENBRnFDLEVBR3JDQSxDQUFDLENBQUM2QixVQUFGLEtBQWtCLENBQUM3QixDQUFDLENBQUNrRCxTQUFGLEtBQWdCLEtBQUswZ0MsT0FBckIsR0FBK0IsQ0FBaEMsSUFBcUMsQ0FIbEIsQ0FBbEMsQ0FBUDtBQUtILEdBTkQsQ0FqT3FDLENBd09yQzs7O0FBQ0FKLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCb2lCLGlCQUFsQixHQUFzQyxVQUFVblcsTUFBVixFQUFrQjtBQUNwRCxRQUFJLEtBQUswaEMsY0FBVCxFQUF5QjtBQUNyQixhQUFPLEtBQUtBLGNBQUwsQ0FBb0IsS0FBS3JrQixNQUFMLENBQVlyZCxNQUFaLENBQXBCLENBQVA7QUFDSCxLQUZELE1BR0s7QUFDRCxhQUFPRCxVQUFVLENBQUNDLE1BQUQsRUFBUyxLQUFLdWhDLE9BQWQsRUFBdUIsS0FBS0MsT0FBNUIsQ0FBakI7QUFDSDtBQUNKLEdBUEQsQ0F6T3FDLENBaVByQzs7O0FBQ0FMLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCNmdCLE1BQWxCLEdBQTJCLFVBQVU1VSxNQUFWLEVBQWtCNmMsU0FBbEIsRUFBNkJ5bEIsV0FBN0IsRUFBMEM7QUFDakUsUUFBSUEsV0FBVyxLQUFLLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsaUJBQVcsR0FBRyxFQUFkO0FBQW1COztBQUNqRCxXQUFPemxCLFNBQVMsQ0FBQ2pJLE1BQVYsQ0FBaUI7QUFDcEI1VSxZQUFNLEVBQUVBLE1BRFk7QUFFcEJpVyxvQkFBYyxFQUFFcXNCLFdBQVcsQ0FBQ3RsQixTQUFaLElBQXlCLElBQXpCLEdBQ1pzbEIsV0FBVyxDQUFDdGxCLFNBREEsR0FFWixLQUFLdWxCLGVBQUwsQ0FBcUJ2aUMsTUFBckI7QUFKZ0IsS0FBakIsRUFLSixJQUxJLENBQVA7QUFNSCxHQVJEOztBQVNBbWhDLFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCOGdCLFdBQWxCLEdBQWdDLFVBQVVoa0IsS0FBVixFQUFpQkMsR0FBakIsRUFBc0IrckIsU0FBdEIsRUFBaUN5bEIsV0FBakMsRUFBOEM7QUFDMUUsUUFBSUEsV0FBVyxLQUFLLEtBQUssQ0FBekIsRUFBNEI7QUFBRUEsaUJBQVcsR0FBRyxFQUFkO0FBQW1COztBQUNqRCxRQUFJQSxXQUFXLENBQUNFLGNBQWhCLEVBQWdDO0FBQzVCMXhDLFNBQUcsR0FBR21OLEtBQUssQ0FBQ25OLEdBQUQsRUFBTSxDQUFDLENBQVAsQ0FBWDtBQUNIOztBQUNELFdBQU8rckIsU0FBUyxDQUFDaEksV0FBVixDQUFzQjtBQUN6QjdVLFlBQU0sRUFBRW5QLEtBRGlCO0FBRXpCb2xCLG9CQUFjLEVBQUVxc0IsV0FBVyxDQUFDeGxCLGNBQVosSUFBOEIsSUFBOUIsR0FDWndsQixXQUFXLENBQUN4bEIsY0FEQSxHQUVaLEtBQUt5bEIsZUFBTCxDQUFxQjF4QyxLQUFyQjtBQUpxQixLQUF0QixFQUtKO0FBQ0NtUCxZQUFNLEVBQUVsUCxHQURUO0FBRUNtbEIsb0JBQWMsRUFBRXFzQixXQUFXLENBQUN2bEIsWUFBWixJQUE0QixJQUE1QixHQUNadWxCLFdBQVcsQ0FBQ3ZsQixZQURBLEdBRVosS0FBS3dsQixlQUFMLENBQXFCenhDLEdBQXJCO0FBSkwsS0FMSSxFQVVKLElBVkksQ0FBUDtBQVdILEdBaEJEOztBQWlCQXF3QyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQm81QixTQUFsQixHQUE4QixVQUFVbnRCLE1BQVYsRUFBa0J5aUMsWUFBbEIsRUFBZ0M7QUFDMUQsUUFBSUEsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFBRUEsa0JBQVksR0FBRyxFQUFmO0FBQW9COztBQUNuRCxRQUFJeHNCLGNBQWMsR0FBRyxJQUFyQjs7QUFDQSxRQUFJLENBQUN3c0IsWUFBWSxDQUFDQyxrQkFBbEIsRUFBc0M7QUFDbEMsVUFBSUQsWUFBWSxDQUFDemxCLFNBQWIsSUFBMEIsSUFBOUIsRUFBb0M7QUFDaEMvRyxzQkFBYyxHQUFHd3NCLFlBQVksQ0FBQ3psQixTQUE5QjtBQUNILE9BRkQsTUFHSztBQUNEL0csc0JBQWMsR0FBRyxLQUFLc3NCLGVBQUwsQ0FBcUJ2aUMsTUFBckIsQ0FBakI7QUFDSDtBQUNKOztBQUNELFdBQU9pWixjQUFjLENBQUNqWixNQUFELEVBQVNpVyxjQUFULEVBQXlCd3NCLFlBQVksQ0FBQ3JWLFFBQXRDLENBQXJCO0FBQ0gsR0FaRCxDQTVRcUMsQ0F5UnJDOzs7QUFDQStULFNBQU8sQ0FBQ3B0QyxTQUFSLENBQWtCNnRDLGlCQUFsQixHQUFzQyxVQUFVMytCLEVBQVYsRUFBYztBQUNoRCxRQUFJLEtBQUt4UyxRQUFMLEtBQWtCLE9BQXRCLEVBQStCO0FBQzNCLGFBQU9zTixjQUFjLENBQUMrQyxnQkFBZ0IsQ0FBQyxJQUFJUyxJQUFKLENBQVMwQixFQUFULENBQUQsQ0FBakIsQ0FBckI7QUFDSCxLQUZELE1BR0ssSUFBSSxLQUFLeFMsUUFBTCxLQUFrQixLQUFsQixJQUEyQixDQUFDLEtBQUs2d0MsaUJBQXJDLEVBQXdEO0FBQ3pELGFBQU8sSUFBSS8vQixJQUFKLENBQVMwQixFQUFULENBQVA7QUFDSCxLQUZJLE1BR0E7QUFDRCxhQUFPbEYsY0FBYyxDQUFDLEtBQUt1akMsaUJBQUwsQ0FBdUJxQixnQkFBdkIsQ0FBd0MxL0IsRUFBeEMsQ0FBRCxDQUFyQjtBQUNIO0FBQ0osR0FWRDs7QUFXQWsrQixTQUFPLENBQUNwdEMsU0FBUixDQUFrQnd1QyxlQUFsQixHQUFvQyxVQUFVNWtDLENBQVYsRUFBYTtBQUM3QyxRQUFJLEtBQUtsTixRQUFMLEtBQWtCLE9BQXRCLEVBQStCO0FBQzNCLGFBQU8sQ0FBQzZRLGdCQUFnQixDQUFDeEQsY0FBYyxDQUFDSCxDQUFELENBQWYsQ0FBaEIsQ0FBb0NpbEMsaUJBQXBDLEVBQVIsQ0FEMkIsQ0FDc0M7QUFDcEUsS0FGRCxNQUdLLElBQUksS0FBS255QyxRQUFMLEtBQWtCLEtBQXRCLEVBQTZCO0FBQzlCLGFBQU8sQ0FBUDtBQUNILEtBRkksTUFHQSxJQUFJLEtBQUs2d0MsaUJBQVQsRUFBNEI7QUFDN0IsYUFBTyxLQUFLQSxpQkFBTCxDQUF1QnVCLGNBQXZCLENBQXNDL2tDLGNBQWMsQ0FBQ0gsQ0FBRCxDQUFwRCxDQUFQO0FBQ0g7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FYRCxDQXJTcUMsQ0FpVHJDOzs7QUFDQXdqQyxTQUFPLENBQUNwdEMsU0FBUixDQUFrQnNwQixNQUFsQixHQUEyQixVQUFVMWYsQ0FBVixFQUFhcWYsU0FBYixFQUF3QjtBQUMvQyxRQUFJLEtBQUt2c0IsUUFBTCxLQUFrQixPQUF0QixFQUErQjtBQUMzQixhQUFPNlEsZ0JBQWdCLENBQUN4RCxjQUFjLENBQUNILENBQUQsQ0FBZixDQUF2QjtBQUNILEtBRkQsTUFHSyxJQUFJLEtBQUtsTixRQUFMLEtBQWtCLEtBQXRCLEVBQTZCO0FBQzlCLGFBQU8sSUFBSThRLElBQUosQ0FBUzVELENBQUMsQ0FBQ1csT0FBRixFQUFULENBQVAsQ0FEOEIsQ0FDQTtBQUNqQyxLQUZJLE1BR0EsSUFBSSxDQUFDLEtBQUtnakMsaUJBQVYsRUFBNkI7QUFDOUIsYUFBTyxJQUFJLy9CLElBQUosQ0FBUzVELENBQUMsQ0FBQ1csT0FBRixNQUFlMGUsU0FBUyxJQUFJLENBQTVCLENBQVQsQ0FBUDtBQUNILEtBRkksTUFHQTtBQUNELGFBQU8sSUFBSXpiLElBQUosQ0FBUzVELENBQUMsQ0FBQ1csT0FBRixLQUNaLEtBQUtnakMsaUJBQUwsQ0FBdUJ1QixjQUF2QixDQUFzQy9rQyxjQUFjLENBQUNILENBQUQsQ0FBcEQsSUFBMkQsSUFBM0QsR0FBa0UsRUFEL0QsQ0FDa0U7QUFEbEUsT0FBUDtBQUdIO0FBQ0osR0FmRDs7QUFnQkEsU0FBT3dqQyxPQUFQO0FBQ0gsQ0FuVTRCLEVBQTdCOztBQXFVQSxJQUFJMkIsbUJBQW1CLEdBQUc7QUFDdEIveUMsSUFBRSxFQUFFK1gsTUFEa0I7QUFFdEJvRSxlQUFhLEVBQUVqQyxPQUZPO0FBR3RCMkcsb0JBQWtCLEVBQUU3RyxRQUhFO0FBSXRCL1osU0FBTyxFQUFFK1osUUFKYTtBQUt0QmlrQixTQUFPLEVBQUVqa0I7QUFMYSxDQUExQjtBQU9BLElBQUlnNUIsS0FBSyxHQUFHLENBQVo7O0FBQ0EsU0FBU0MsbUJBQVQsQ0FBNkJ4eUIsV0FBN0IsRUFBMENsakIsUUFBMUMsRUFBb0Q7QUFDaEQsTUFBSTBoQixJQUFJLEdBQUcxaEIsUUFBUSxDQUFDb2lCLFlBQVQsQ0FBc0JDLEtBQXRCLENBQTRCcW5CLGVBQXZDO0FBQ0EsU0FBTyxDQUFDaG9CLElBQUksQ0FBQ3dCLFdBQVcsQ0FBQ3l5QixXQUFiLENBQUosQ0FBOEJyTCxXQUF0QztBQUNIOztBQUNELFNBQVNzTCxnQkFBVCxDQUEwQnpjLEdBQTFCLEVBQStCbjVCLFFBQS9CLEVBQXlDO0FBQ3JDLE1BQUkwaEIsSUFBSSxHQUFHMWhCLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QnFuQixlQUF2Qzs7QUFDQSxPQUFLLElBQUk1a0MsQ0FBQyxHQUFHNGMsSUFBSSxDQUFDM2EsTUFBTCxHQUFjLENBQTNCLEVBQThCakMsQ0FBQyxJQUFJLENBQW5DLEVBQXNDQSxDQUFDLEVBQXZDLEVBQTJDO0FBQUU7QUFDekMsUUFBSTZjLEdBQUcsR0FBR0QsSUFBSSxDQUFDNWMsQ0FBRCxDQUFkO0FBQ0EsUUFBSW1vQixJQUFJLEdBQUd0TCxHQUFHLENBQUM0b0IsU0FBSixDQUFjcFIsR0FBZCxDQUFYOztBQUNBLFFBQUlsTSxJQUFKLEVBQVU7QUFDTixVQUFJemlCLEdBQUcsR0FBR3FyQyxxQkFBcUIsQ0FBQyxPQUFPMWMsR0FBUCxLQUFlLFFBQWYsR0FBMEJBLEdBQTFCLEdBQWdDLEVBQWpDLEVBQXFDbE0sSUFBckMsRUFBMkNub0IsQ0FBM0MsRUFBOEM5RSxRQUE5QyxDQUEvQjtBQUNBd0ssU0FBRyxDQUFDaWpDLElBQUosR0FBV3RVLEdBQVg7QUFDQSxhQUFPM3VCLEdBQVA7QUFDSDtBQUNKOztBQUNELFNBQU8sSUFBUDtBQUNIOztBQUNELFNBQVNxckMscUJBQVQsQ0FBK0IxYyxHQUEvQixFQUFvQ2xNLElBQXBDLEVBQTBDMG9CLFdBQTFDLEVBQXVEMzFDLFFBQXZELEVBQWlFO0FBQzdELE1BQUlrNkIsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsTUFBSXZ3QixLQUFLLEdBQUdzUyxXQUFXLENBQUNrZCxHQUFELEVBQU1xYyxtQkFBTixFQUEyQixFQUEzQixFQUErQnRiLFVBQS9CLENBQXZCO0FBQ0EsTUFBSUcsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsTUFBSXhNLEVBQUUsR0FBR3dMLHNCQUFzQixDQUFDYSxVQUFELEVBQWFsNkIsUUFBYixFQUF1QnE2QixVQUF2QixDQUEvQjtBQUNBMXdCLE9BQUssQ0FBQ21zQyxVQUFOLEdBQW1CLEtBQW5CO0FBQ0Fuc0MsT0FBSyxDQUFDNnFCLGFBQU4sR0FBc0IsRUFBdEI7QUFDQTdxQixPQUFLLENBQUNxcUIsVUFBTixHQUFtQixJQUFuQjtBQUNBcnFCLE9BQUssQ0FBQ21qQixRQUFOLEdBQWlCdFMsTUFBTSxDQUFDMmUsR0FBRyxDQUFDMTJCLEVBQUosSUFBVSxFQUFYLENBQXZCO0FBQ0FrSCxPQUFLLENBQUNzWCxRQUFOLEdBQWlCekcsTUFBTSxDQUFDaTdCLEtBQUssRUFBTixDQUF2QjtBQUNBOXJDLE9BQUssQ0FBQ2dzQyxXQUFOLEdBQW9CQSxXQUFwQjtBQUNBaHNDLE9BQUssQ0FBQ3NqQixJQUFOLEdBQWFBLElBQWI7QUFDQXRqQixPQUFLLENBQUNra0IsRUFBTixHQUFXQSxFQUFYO0FBQ0Fsa0IsT0FBSyxDQUFDd2tCLGFBQU4sR0FBc0JrTSxVQUF0QjtBQUNBLFNBQU8xd0IsS0FBUDtBQUNIOztBQUVELFNBQVNvc0Msa0JBQVQsQ0FBNkJqbUIsWUFBN0IsRUFBMkM4RCxNQUEzQyxFQUFtREMsV0FBbkQsRUFBZ0U3ekIsUUFBaEUsRUFBMEU7QUFDdEUsVUFBUTR6QixNQUFNLENBQUN2eEIsSUFBZjtBQUNJLFNBQUssbUJBQUw7QUFBMEI7QUFDdEIsYUFBTzJ6QyxVQUFVLENBQUNsbUIsWUFBRCxFQUFlOEQsTUFBTSxDQUFDcWlCLE9BQXRCLEVBQStCcGlCLFdBQVcsR0FBR0EsV0FBVyxDQUFDSyxXQUFmLEdBQTZCLElBQXZFLEVBQTZFbDBCLFFBQTdFLENBQWpCOztBQUNKLFNBQUsscUJBQUw7QUFDSSxhQUFPazJDLFlBQVksQ0FBQ3BtQixZQUFELEVBQWU4RCxNQUFNLENBQUMzUyxRQUF0QixDQUFuQjs7QUFDSixTQUFLLE1BQUwsQ0FMSixDQUtpQjs7QUFDYixTQUFLLE1BQUw7QUFDQSxTQUFLLFVBQUw7QUFDQSxTQUFLLGVBQUw7QUFDSSxVQUFJNFMsV0FBSixFQUFpQjtBQUNiLGVBQU9zaUIsaUJBQWlCLENBQUNybUIsWUFBRCxFQUFlK0QsV0FBVyxDQUFDSyxXQUEzQixFQUF3Q2wwQixRQUF4QyxDQUF4QjtBQUNILE9BRkQsTUFHSztBQUNELGVBQU84dkIsWUFBUDtBQUNIOztBQUNMLFNBQUsscUJBQUw7QUFDQSxTQUFLLGlCQUFMO0FBQ0ksYUFBT3NtQixpQkFBaUIsQ0FBQ3RtQixZQUFELEVBQWU4RCxNQUFNLENBQUNqSCxTQUFQLEdBQ25Dak0sV0FBVyxDQUFDa1QsTUFBTSxDQUFDakgsU0FBUixDQUR3QixHQUVuQzBwQixvQkFBb0IsQ0FBQ3ZtQixZQUFELEVBQWU5dkIsUUFBZixDQUZBLEVBRTBCNnpCLFdBQVcsR0FBR0EsV0FBVyxDQUFDSyxXQUFmLEdBQTZCLElBRmxFLEVBRXdFbDBCLFFBRnhFLENBQXhCOztBQUdKLFNBQUssZ0JBQUw7QUFDQSxTQUFLLHFCQUFMO0FBQ0ksYUFBT3MyQyxlQUFlLENBQUN4bUIsWUFBRCxFQUFlOEQsTUFBTSxDQUFDM1MsUUFBdEIsRUFBZ0MyUyxNQUFNLENBQUNHLE9BQXZDLEVBQWdESCxNQUFNLENBQUNJLFVBQXZELENBQXRCOztBQUNKLFNBQUssMEJBQUw7QUFDSSxhQUFPLEVBQVA7O0FBQ0o7QUFDSSxhQUFPbEUsWUFBUDtBQTFCUjtBQTRCSDs7QUFDRCxJQUFJeW1CLEtBQUssR0FBRyxDQUFaOztBQUNBLFNBQVNQLFVBQVQsQ0FBb0JRLGVBQXBCLEVBQXFDUCxPQUFyQyxFQUE4Q2ppQixVQUE5QyxFQUEwRGgwQixRQUExRCxFQUFvRTtBQUNoRSxNQUFJc2dCLElBQUksR0FBRyxFQUFYOztBQUNBLE9BQUssSUFBSWhGLEVBQUUsR0FBRyxDQUFULEVBQVltN0IsU0FBUyxHQUFHUixPQUE3QixFQUFzQzM2QixFQUFFLEdBQUdtN0IsU0FBUyxDQUFDMXZDLE1BQXJELEVBQTZEdVUsRUFBRSxFQUEvRCxFQUFtRTtBQUMvRCxRQUFJK2YsTUFBTSxHQUFHb2IsU0FBUyxDQUFDbjdCLEVBQUQsQ0FBdEI7QUFDQWdGLFFBQUksQ0FBQythLE1BQU0sQ0FBQ3BhLFFBQVIsQ0FBSixHQUF3Qm9hLE1BQXhCO0FBQ0g7O0FBQ0QsTUFBSXJILFVBQUosRUFBZ0I7QUFDWjFULFFBQUksR0FBRzYxQixpQkFBaUIsQ0FBQzcxQixJQUFELEVBQU8wVCxVQUFQLEVBQW1CaDBCLFFBQW5CLENBQXhCO0FBQ0g7O0FBQ0QsU0FBT3VlLFFBQVEsQ0FBQyxFQUFELEVBQUtpNEIsZUFBTCxFQUFzQmwyQixJQUF0QixDQUFmO0FBQ0g7O0FBQ0QsU0FBUzQxQixZQUFULENBQXNCTSxlQUF0QixFQUF1Q3YxQixRQUF2QyxFQUFpRDtBQUM3QyxTQUFPWixVQUFVLENBQUNtMkIsZUFBRCxFQUFrQixVQUFVdHpCLFdBQVYsRUFBdUI7QUFDdEQsV0FBT0EsV0FBVyxDQUFDakMsUUFBWixLQUF5QkEsUUFBaEM7QUFDSCxHQUZnQixDQUFqQjtBQUdIOztBQUNELFNBQVNrMUIsaUJBQVQsQ0FBMkJPLFVBQTNCLEVBQXVDMWlCLFVBQXZDLEVBQW1EaDBCLFFBQW5ELEVBQTZEO0FBQ3pELFNBQU9vMkMsaUJBQWlCLENBQUNNLFVBQUQsRUFBYXIyQixVQUFVLENBQUNxMkIsVUFBRCxFQUFhLFVBQVV4ekIsV0FBVixFQUF1QjtBQUMvRSxXQUFPeXpCLGFBQWEsQ0FBQ3p6QixXQUFELEVBQWM4USxVQUFkLEVBQTBCaDBCLFFBQTFCLENBQXBCO0FBQ0gsR0FGOEMsQ0FBdkIsRUFFcEJnMEIsVUFGb0IsRUFFUmgwQixRQUZRLENBQXhCO0FBR0g7O0FBQ0QsU0FBUzIyQyxhQUFULENBQXVCenpCLFdBQXZCLEVBQW9DOFEsVUFBcEMsRUFBZ0RoMEIsUUFBaEQsRUFBMEQ7QUFDdEQsTUFBSSxDQUFDMDFDLG1CQUFtQixDQUFDeHlCLFdBQUQsRUFBY2xqQixRQUFkLENBQXhCLEVBQWlEO0FBQzdDLFdBQU8sQ0FBQ2tqQixXQUFXLENBQUNzUixhQUFwQjtBQUNILEdBRkQsTUFHSztBQUNELFdBQU8sQ0FBQ3gwQixRQUFRLENBQUNvakIsR0FBVCxDQUFhLGNBQWIsQ0FBRCxJQUNILENBQUNGLFdBQVcsQ0FBQzhRLFVBRFYsSUFFSEEsVUFBVSxDQUFDendCLEtBQVgsR0FBbUIyZixXQUFXLENBQUM4USxVQUFaLENBQXVCendCLEtBRnZDLElBR0h5d0IsVUFBVSxDQUFDeHdCLEdBQVgsR0FBaUIwZixXQUFXLENBQUM4USxVQUFaLENBQXVCeHdCLEdBSDVDO0FBSUg7QUFDSjs7QUFDRCxTQUFTNHlDLGlCQUFULENBQTJCUSxXQUEzQixFQUF3Q0MsWUFBeEMsRUFBc0Q3aUIsVUFBdEQsRUFBa0VoMEIsUUFBbEUsRUFBNEU7QUFDeEUsTUFBSTgyQyxXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsT0FBSyxJQUFJNzFCLFFBQVQsSUFBcUIyMUIsV0FBckIsRUFBa0M7QUFDOUIsUUFBSXZiLE1BQU0sR0FBR3ViLFdBQVcsQ0FBQzMxQixRQUFELENBQXhCOztBQUNBLFFBQUk0MUIsWUFBWSxDQUFDNTFCLFFBQUQsQ0FBaEIsRUFBNEI7QUFDeEI2MUIsaUJBQVcsQ0FBQzcxQixRQUFELENBQVgsR0FBd0I4MUIsV0FBVyxDQUFDMWIsTUFBRCxFQUFTckgsVUFBVCxFQUFxQmgwQixRQUFyQixDQUFuQztBQUNILEtBRkQsTUFHSztBQUNEODJDLGlCQUFXLENBQUM3MUIsUUFBRCxDQUFYLEdBQXdCb2EsTUFBeEI7QUFDSDtBQUNKOztBQUNELFNBQU95YixXQUFQO0FBQ0g7O0FBQ0QsU0FBU0MsV0FBVCxDQUFxQjd6QixXQUFyQixFQUFrQzhRLFVBQWxDLEVBQThDaDBCLFFBQTlDLEVBQXdEO0FBQ3BELE1BQUlnM0MsU0FBUyxHQUFHaDNDLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QnFuQixlQUE1QixDQUE0Q3htQixXQUFXLENBQUN5eUIsV0FBeEQsQ0FBaEI7QUFDQSxNQUFJNWhCLE9BQU8sR0FBR3ZaLE1BQU0sQ0FBQys3QixLQUFLLEVBQU4sQ0FBcEI7QUFDQVMsV0FBUyxDQUFDeE0sS0FBVixDQUFnQjtBQUNadG5CLGVBQVcsRUFBRUEsV0FERDtBQUVabGpCLFlBQVEsRUFBRUEsUUFGRTtBQUdacWQsU0FBSyxFQUFFMlc7QUFISyxHQUFoQixFQUlHLFVBQVV4cEIsR0FBVixFQUFlO0FBQ2QsUUFBSXdXLFNBQVMsR0FBR3hXLEdBQUcsQ0FBQ3dXLFNBQXBCO0FBQ0EsUUFBSWkyQixVQUFVLEdBQUdqM0MsUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSxvQkFBYixDQUFqQjtBQUNBLFFBQUk4ekIsYUFBSjtBQUNBLFFBQUlDLGdCQUFKOztBQUNBLFFBQUlqMEIsV0FBVyxDQUFDeGdCLE9BQWhCLEVBQXlCO0FBQ3JCeTBDLHNCQUFnQixHQUFHajBCLFdBQVcsQ0FBQ3hnQixPQUFaLENBQW9Cc2UsU0FBcEIsRUFBK0J4VyxHQUFHLENBQUN4SCxHQUFuQyxDQUFuQjtBQUNIOztBQUNELFFBQUlpMEMsVUFBSixFQUFnQjtBQUNaQyxtQkFBYSxHQUFHRCxVQUFVLENBQUNqMkIsU0FBRCxFQUFZeFcsR0FBRyxDQUFDeEgsR0FBaEIsQ0FBMUI7QUFDSDs7QUFDRGdlLGFBQVMsR0FBR20yQixnQkFBZ0IsSUFBSUQsYUFBcEIsSUFBcUNsMkIsU0FBakQ7QUFDQWhoQixZQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUNkcHFCLFVBQUksRUFBRSxnQkFEUTtBQUVkNGUsY0FBUSxFQUFFaUMsV0FBVyxDQUFDakMsUUFGUjtBQUdkOFMsYUFBTyxFQUFFQSxPQUhLO0FBSWRDLGdCQUFVLEVBQUVBLFVBSkU7QUFLZGhULGVBQVMsRUFBRUE7QUFMRyxLQUFsQjtBQU9ILEdBdkJELEVBdUJHLFVBQVVuZSxLQUFWLEVBQWlCO0FBQ2hCLFFBQUl1MEMsV0FBVyxHQUFHcDNDLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsb0JBQWIsQ0FBbEI7QUFDQXZwQixXQUFPLENBQUMrMkMsSUFBUixDQUFhL3RDLEtBQUssQ0FBQ3ZELE9BQW5CLEVBQTRCdUQsS0FBNUI7O0FBQ0EsUUFBSXFnQixXQUFXLENBQUN3ZCxPQUFoQixFQUF5QjtBQUNyQnhkLGlCQUFXLENBQUN3ZCxPQUFaLENBQW9CNzlCLEtBQXBCO0FBQ0g7O0FBQ0QsUUFBSXUwQyxXQUFKLEVBQWlCO0FBQ2JBLGlCQUFXLENBQUN2MEMsS0FBRCxDQUFYO0FBQ0g7O0FBQ0Q3QyxZQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUNkcHFCLFVBQUksRUFBRSxxQkFEUTtBQUVkNGUsY0FBUSxFQUFFaUMsV0FBVyxDQUFDakMsUUFGUjtBQUdkOFMsYUFBTyxFQUFFQSxPQUhLO0FBSWRDLGdCQUFVLEVBQUVBLFVBSkU7QUFLZG54QixXQUFLLEVBQUVBO0FBTE8sS0FBbEI7QUFPSCxHQXZDRDtBQXdDQSxTQUFPMGIsUUFBUSxDQUFDLEVBQUQsRUFBSzJFLFdBQUwsRUFBa0I7QUFBRTR5QixjQUFVLEVBQUUsSUFBZDtBQUFvQnRoQixpQkFBYSxFQUFFVDtBQUFuQyxHQUFsQixDQUFmO0FBQ0g7O0FBQ0QsU0FBU3VpQixlQUFULENBQXlCSSxVQUF6QixFQUFxQ3oxQixRQUFyQyxFQUErQzhTLE9BQS9DLEVBQXdEQyxVQUF4RCxFQUFvRTtBQUNoRSxNQUFJdGYsRUFBSjs7QUFDQSxNQUFJd08sV0FBVyxHQUFHd3pCLFVBQVUsQ0FBQ3oxQixRQUFELENBQTVCOztBQUNBLE1BQUlpQyxXQUFXLElBQUk7QUFDZjZRLFNBQU8sS0FBSzdRLFdBQVcsQ0FBQ3NSLGFBRDVCLEVBQzJDO0FBQ3ZDLFdBQU9qVyxRQUFRLENBQUMsRUFBRCxFQUFLbTRCLFVBQUwsR0FBa0JoaUMsRUFBRSxHQUFHLEVBQUwsRUFBU0EsRUFBRSxDQUFDdU0sUUFBRCxDQUFGLEdBQWUxQyxRQUFRLENBQUMsRUFBRCxFQUFLMkUsV0FBTCxFQUFrQjtBQUFFNHlCLGdCQUFVLEVBQUUsS0FBZDtBQUFxQjloQixnQkFBVSxFQUFFQTtBQUFqQyxLQUFsQixDQUFoQyxFQUFrR3RmLEVBQXBILEVBQWY7QUFDSDs7QUFDRCxTQUFPZ2lDLFVBQVA7QUFDSDs7QUFDRCxTQUFTTCxvQkFBVCxDQUE4QnZtQixZQUE5QixFQUE0Qzl2QixRQUE1QyxFQUFzRDtBQUNsRCxTQUFPcWdCLFVBQVUsQ0FBQ3lQLFlBQUQsRUFBZSxVQUFVNU0sV0FBVixFQUF1QjtBQUNuRCxXQUFPd3lCLG1CQUFtQixDQUFDeHlCLFdBQUQsRUFBY2xqQixRQUFkLENBQTFCO0FBQ0gsR0FGZ0IsQ0FBakI7QUFHSDs7QUFFRCxJQUFJcTNDLG9CQUFvQjtBQUFHO0FBQWUsWUFBWTtBQUNsRCxXQUFTQSxvQkFBVCxDQUE4QkMsUUFBOUIsRUFBd0N0M0MsUUFBeEMsRUFBa0Q7QUFDOUMsU0FBS3MzQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUt0dEIsT0FBTCxHQUFlc3RCLFFBQVEsQ0FBQ3R0QixPQUF4QjtBQUNBLFNBQUt0TSxPQUFMLEdBQWUxZCxRQUFRLENBQUMwZCxPQUF4QjtBQUNBLFNBQUsxZCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUt1M0MsY0FBTDtBQUNIO0FBQ0Q7O0FBRUE7OztBQUNBRixzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQit3QyxTQUEvQixHQUEyQyxVQUFVQyxrQkFBVixFQUE4QkMsV0FBOUIsRUFBMkM7QUFDbEYsUUFBSWg2QixPQUFPLEdBQUcsS0FBS0EsT0FBbkI7QUFDQSxRQUFJaTZCLFFBQVEsR0FBR2o2QixPQUFPLENBQUNvQyxRQUFSLENBQWlCcEMsT0FBTyxDQUFDazNCLE9BQVIsQ0FBZ0I4QyxXQUFoQixFQUE2QkQsa0JBQWtCLENBQUNHLGdCQUFoRCxDQUFqQixFQUFvRjtBQUNuR0gsc0JBQWtCLENBQUNJLGFBREosQ0FBZjtBQUVBLFdBQU8sS0FBS3pWLEtBQUwsQ0FBV3VWLFFBQVgsRUFBcUIsQ0FBQyxDQUF0QixDQUFQO0FBQ0gsR0FMRCxDQVhrRCxDQWlCbEQ7OztBQUNBTixzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQnF4QyxTQUEvQixHQUEyQyxVQUFVTCxrQkFBVixFQUE4QkMsV0FBOUIsRUFBMkM7QUFDbEYsUUFBSWg2QixPQUFPLEdBQUcsS0FBS0EsT0FBbkI7QUFDQSxRQUFJcTZCLFFBQVEsR0FBR3I2QixPQUFPLENBQUNqVSxHQUFSLENBQVlpVSxPQUFPLENBQUNrM0IsT0FBUixDQUFnQjhDLFdBQWhCLEVBQTZCRCxrQkFBa0IsQ0FBQ0csZ0JBQWhELENBQVosRUFBK0U7QUFDOUZILHNCQUFrQixDQUFDSSxhQURKLENBQWY7QUFFQSxXQUFPLEtBQUt6VixLQUFMLENBQVcyVixRQUFYLEVBQXFCLENBQXJCLENBQVA7QUFDSCxHQUxELENBbEJrRCxDQXdCbEQ7QUFDQTtBQUNBOzs7QUFDQVYsc0JBQW9CLENBQUM1d0MsU0FBckIsQ0FBK0IyN0IsS0FBL0IsR0FBdUMsVUFBVXNWLFdBQVYsRUFBdUI5ckMsU0FBdkIsRUFBa0Nvc0MsWUFBbEMsRUFBZ0Q7QUFDbkYsUUFBSUEsWUFBWSxLQUFLLEtBQUssQ0FBMUIsRUFBNkI7QUFBRUEsa0JBQVksR0FBRyxLQUFmO0FBQXVCOztBQUN0RCxRQUFJelEsVUFBSjtBQUNBLFFBQUlrSCxPQUFPLEdBQUcsSUFBZDtBQUNBLFFBQUlDLE9BQU8sR0FBRyxJQUFkO0FBQ0EsUUFBSXVKLFdBQUo7QUFDQSxRQUFJQyxhQUFKO0FBQ0EsUUFBSUMsV0FBSjtBQUNBLFFBQUlqa0IsV0FBSjtBQUNBLFFBQUlra0IsT0FBSjtBQUNBN1EsY0FBVSxHQUFHLEtBQUs4USxlQUFMLEVBQWI7QUFDQTlRLGNBQVUsR0FBRyxLQUFLK1EsY0FBTCxDQUFvQi9RLFVBQXBCLENBQWI7O0FBQ0EsUUFBSXlRLFlBQUosRUFBa0I7QUFDZE4saUJBQVcsR0FBR3h5QixzQkFBc0IsQ0FBQ3d5QixXQUFELEVBQWNuUSxVQUFkLENBQXBDO0FBQ0g7O0FBQ0QwUSxlQUFXLEdBQUcsS0FBS00scUJBQUwsQ0FBMkJiLFdBQTNCLEVBQXdDOXJDLFNBQXhDLENBQWQ7QUFDQXNzQyxpQkFBYSxHQUFHLDBCQUEwQng3QyxJQUExQixDQUErQnU3QyxXQUFXLENBQUN4akMsSUFBM0MsQ0FBaEI7QUFDQTBqQyxlQUFXLEdBQUcsS0FBS0ssZ0JBQUwsQ0FBc0IsS0FBS0YsY0FBTCxDQUFvQkwsV0FBVyxDQUFDNTZCLEtBQWhDLENBQXRCLEVBQThENDZCLFdBQVcsQ0FBQ3hqQyxJQUExRSxFQUFnRnlqQyxhQUFoRixDQUFkO0FBQ0FDLGVBQVcsR0FBRyxLQUFLRyxjQUFMLENBQW9CSCxXQUFwQixDQUFkO0FBQ0Fqa0IsZUFBVyxHQUFHaWtCLFdBQWQ7O0FBQ0EsUUFBSSxDQUFDLEtBQUtudUIsT0FBTCxDQUFhMmtCLG1CQUFsQixFQUF1QztBQUNuQ3phLGlCQUFXLEdBQUd4UCxlQUFlLENBQUN3UCxXQUFELEVBQWMrakIsV0FBVyxDQUFDNTZCLEtBQTFCLENBQTdCO0FBQ0g7O0FBQ0RveEIsV0FBTyxHQUFHajZCLGNBQWMsQ0FBQyxLQUFLd1YsT0FBTCxDQUFheWtCLE9BQWQsQ0FBeEI7QUFDQUMsV0FBTyxHQUFHbDZCLGNBQWMsQ0FBQyxLQUFLd1YsT0FBTCxDQUFhMGtCLE9BQWQsQ0FBeEI7QUFDQXhhLGVBQVcsR0FBRyxLQUFLdWtCLGlCQUFMLENBQXVCdmtCLFdBQXZCLEVBQW9DdWEsT0FBcEMsRUFBNkNDLE9BQTdDLENBQWQ7QUFDQXhhLGVBQVcsR0FBR3hQLGVBQWUsQ0FBQ3dQLFdBQUQsRUFBY3FULFVBQWQsQ0FBN0IsQ0ExQm1GLENBMEIzQjtBQUN4RDtBQUNBOztBQUNBNlEsV0FBTyxHQUFHdnpCLGVBQWUsQ0FBQ296QixXQUFXLENBQUM1NkIsS0FBYixFQUFvQmtxQixVQUFwQixDQUF6QjtBQUNBLFdBQU87QUFDSDtBQUNBO0FBQ0FBLGdCQUFVLEVBQUVBLFVBSFQ7QUFJSDtBQUNBO0FBQ0FqSCxrQkFBWSxFQUFFMlgsV0FBVyxDQUFDNTZCLEtBTnZCO0FBT0g7QUFDQXU2QixzQkFBZ0IsRUFBRUssV0FBVyxDQUFDeGpDLElBUjNCO0FBU0h5akMsbUJBQWEsRUFBRUEsYUFUWjtBQVVIO0FBQ0E7QUFDQWhrQixpQkFBVyxFQUFFQSxXQVpWO0FBYUg7QUFDQTtBQUNBaWtCLGlCQUFXLEVBQUVBLFdBZlY7QUFnQkg7QUFDQTFKLGFBQU8sRUFBRUEsT0FqQk47QUFrQkg7QUFDQUMsYUFBTyxFQUFFQSxPQW5CTjtBQW9CSDBKLGFBQU8sRUFBRUEsT0FwQk47QUFxQkg7QUFDQVAsbUJBQWEsRUFBRSxLQUFLYSxrQkFBTCxDQUF3QlQsV0FBVyxDQUFDNzRCLFFBQXBDLENBdEJaLENBdUJIOztBQXZCRyxLQUFQO0FBeUJILEdBdkRELENBM0JrRCxDQW1GbEQ7QUFDQTtBQUNBOzs7QUFDQWk0QixzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQjR4QyxlQUEvQixHQUFpRCxZQUFZO0FBQ3pELFdBQU8sS0FBS00sY0FBTCxDQUFvQixZQUFwQixFQUFrQyxLQUFLMzRDLFFBQUwsQ0FBY3VnQyxNQUFkLEVBQWxDLEtBQ0g7QUFBRWg5QixXQUFLLEVBQUUsSUFBVDtBQUFlQyxTQUFHLEVBQUU7QUFBcEIsS0FESixDQUR5RCxDQUV6QjtBQUNuQyxHQUhELENBdEZrRCxDQTBGbEQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBNnpDLHNCQUFvQixDQUFDNXdDLFNBQXJCLENBQStCOHhDLHFCQUEvQixHQUF1RCxVQUFVbjBDLElBQVYsRUFBZ0J3SCxTQUFoQixFQUEyQjtBQUM5RSxRQUFJOEksRUFBRSxHQUFHLElBQVQ7QUFBQSxRQUFlNGlDLFFBQVEsR0FBRzVpQyxFQUFFLENBQUM0aUMsUUFBN0I7QUFBQSxRQUF1QzU1QixPQUFPLEdBQUdoSixFQUFFLENBQUNnSixPQUFwRDs7QUFDQSxRQUFJMEIsUUFBUSxHQUFHLElBQWY7QUFDQSxRQUFJM0ssSUFBSSxHQUFHLElBQVg7QUFDQSxRQUFJNEksS0FBSyxHQUFHLElBQVo7QUFDQSxRQUFJdTdCLFFBQUo7O0FBQ0EsUUFBSXRCLFFBQVEsQ0FBQ2w0QixRQUFiLEVBQXVCO0FBQ25CQSxjQUFRLEdBQUdrNEIsUUFBUSxDQUFDbDRCLFFBQXBCO0FBQ0EzSyxVQUFJLEdBQUc2aUMsUUFBUSxDQUFDdUIsWUFBaEI7QUFDQXg3QixXQUFLLEdBQUcsS0FBS3k3QixzQkFBTCxDQUE0QjEwQyxJQUE1QixFQUFrQ3dILFNBQWxDLEVBQTZDd1QsUUFBN0MsRUFBdUQzSyxJQUF2RCxDQUFSO0FBQ0gsS0FKRCxNQUtLLElBQUtta0MsUUFBUSxHQUFHLEtBQUs1dUIsT0FBTCxDQUFhNHVCLFFBQTdCLEVBQXdDO0FBQ3pDbmtDLFVBQUksR0FBRyxLQUFQO0FBQ0E0SSxXQUFLLEdBQUcsS0FBSzA3QixzQkFBTCxDQUE0QjMwQyxJQUE1QixFQUFrQ3dILFNBQWxDLEVBQTZDZ3RDLFFBQTdDLENBQVI7QUFDSCxLQUhJLE1BSUEsSUFBS3Y3QixLQUFLLEdBQUcsS0FBSzI3Qix1QkFBTCxDQUE2QjUwQyxJQUE3QixDQUFiLEVBQWtEO0FBQ25EcVEsVUFBSSxHQUFHaUosT0FBTyxDQUFDZzNCLGlCQUFSLENBQTBCcjNCLEtBQUssQ0FBQzlaLEtBQWhDLEVBQXVDOFosS0FBSyxDQUFDN1osR0FBN0MsRUFBa0RpUixJQUF6RDtBQUNILEtBRkksTUFHQTtBQUNEMkssY0FBUSxHQUFHLEtBQUs2NUIsbUJBQUwsRUFBWDtBQUNBeGtDLFVBQUksR0FBR3dDLDJCQUEyQixDQUFDbUksUUFBRCxDQUEzQixDQUFzQzNLLElBQTdDO0FBQ0E0SSxXQUFLLEdBQUcsS0FBS3k3QixzQkFBTCxDQUE0QjEwQyxJQUE1QixFQUFrQ3dILFNBQWxDLEVBQTZDd1QsUUFBN0MsRUFBdUQzSyxJQUF2RCxDQUFSO0FBQ0g7O0FBQ0QsV0FBTztBQUFFMkssY0FBUSxFQUFFQSxRQUFaO0FBQXNCM0ssVUFBSSxFQUFFQSxJQUE1QjtBQUFrQzRJLFdBQUssRUFBRUE7QUFBekMsS0FBUDtBQUNILEdBeEJEOztBQXlCQWc2QixzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQnd5QyxtQkFBL0IsR0FBcUQsWUFBWTtBQUM3RCxXQUFPemtDLGNBQWMsQ0FBQztBQUFFVSxTQUFHLEVBQUU7QUFBUCxLQUFELENBQXJCO0FBQ0gsR0FGRCxDQXZIa0QsQ0EwSGxEO0FBQ0E7OztBQUNBbWlDLHNCQUFvQixDQUFDNXdDLFNBQXJCLENBQStCZ3lDLGlCQUEvQixHQUFtRCxVQUFVcDdCLEtBQVYsRUFBaUJveEIsT0FBakIsRUFBMEJDLE9BQTFCLEVBQW1DO0FBQ2xGLFFBQUloeEIsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsUUFBSW5hLEtBQUssR0FBRzhaLEtBQUssQ0FBQzlaLEtBQWxCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHNlosS0FBSyxDQUFDN1osR0FBaEI7O0FBQ0EsUUFBSSxLQUFLOHpDLFFBQUwsQ0FBYzRCLEtBQWQsQ0FBb0J6eUMsU0FBcEIsQ0FBOEIweUMsY0FBbEMsRUFBa0Q7QUFDOUM7QUFDQSxVQUFJNWlDLFdBQVcsQ0FBQ2s0QixPQUFELENBQVgsR0FBdUIsQ0FBM0IsRUFBOEI7QUFDMUJsckMsYUFBSyxHQUFHK04sVUFBVSxDQUFDL04sS0FBRCxDQUFsQixDQUQwQixDQUNDOztBQUMzQkEsYUFBSyxHQUFHbWEsT0FBTyxDQUFDalUsR0FBUixDQUFZbEcsS0FBWixFQUFtQmtyQyxPQUFuQixDQUFSO0FBQ0gsT0FMNkMsQ0FNOUM7OztBQUNBLFVBQUlsNEIsV0FBVyxDQUFDbTRCLE9BQUQsQ0FBWCxHQUF1QixDQUEzQixFQUE4QjtBQUMxQmxyQyxXQUFHLEdBQUc4TixVQUFVLENBQUM5TixHQUFELENBQWhCLENBRDBCLENBQ0g7O0FBQ3ZCQSxXQUFHLEdBQUdrTixPQUFPLENBQUNsTixHQUFELEVBQU0sQ0FBQyxDQUFQLENBQWI7QUFDQUEsV0FBRyxHQUFHa2EsT0FBTyxDQUFDalUsR0FBUixDQUFZakcsR0FBWixFQUFpQmtyQyxPQUFqQixDQUFOO0FBQ0g7QUFDSjs7QUFDRCxXQUFPO0FBQUVuckMsV0FBSyxFQUFFQSxLQUFUO0FBQWdCQyxTQUFHLEVBQUVBO0FBQXJCLEtBQVA7QUFDSCxHQWxCRCxDQTVIa0QsQ0ErSWxEO0FBQ0E7OztBQUNBNnpDLHNCQUFvQixDQUFDNXdDLFNBQXJCLENBQStCcXlDLHNCQUEvQixHQUF3RCxVQUFVMTBDLElBQVYsRUFBZ0J3SCxTQUFoQixFQUEyQndULFFBQTNCLEVBQXFDM0ssSUFBckMsRUFBMkM7QUFDL0YsUUFBSWlKLE9BQU8sR0FBRyxLQUFLQSxPQUFuQjtBQUNBLFFBQUkwN0IsU0FBUyxHQUFHLEtBQUtwdkIsT0FBTCxDQUFhcXZCLGFBQTdCO0FBQ0EsUUFBSUMsa0JBQUo7QUFDQSxRQUFJQyxxQkFBSjtBQUNBLFFBQUloMkMsS0FBSjtBQUNBLFFBQUlDLEdBQUo7QUFDQSxRQUFJZ0gsR0FBSixDQVArRixDQVEvRjs7QUFDQSxRQUFJLENBQUM0dUMsU0FBTCxFQUFnQjtBQUNaRSx3QkFBa0IsR0FBRyxLQUFLdHZCLE9BQUwsQ0FBYTZ0QixhQUFsQzs7QUFDQSxVQUFJeUIsa0JBQUosRUFBd0I7QUFDcEJDLDZCQUFxQixHQUFHL2tDLGNBQWMsQ0FBQzhrQyxrQkFBRCxDQUF0QyxDQURvQixDQUVwQjs7QUFDQSxZQUFJN2lDLFNBQVMsQ0FBQzhpQyxxQkFBRCxDQUFULEdBQW1DOWlDLFNBQVMsQ0FBQzJJLFFBQUQsQ0FBaEQsRUFBNEQ7QUFDeERnNkIsbUJBQVMsR0FBR25pQywyQkFBMkIsQ0FBQ3NpQyxxQkFBRCxFQUF3QixDQUFDcGtDLGlCQUFpQixDQUFDbWtDLGtCQUFELENBQTFDLENBQTNCLENBQTJGN2tDLElBQXZHO0FBQ0gsU0FGRCxNQUdLO0FBQ0Qya0MsbUJBQVMsR0FBRzNrQyxJQUFaO0FBQ0g7QUFDSixPQVRELE1BVUs7QUFDRDJrQyxpQkFBUyxHQUFHM2tDLElBQVo7QUFDSDtBQUNKLEtBeEI4RixDQXlCL0Y7OztBQUNBLFFBQUk4QixXQUFXLENBQUM2SSxRQUFELENBQVgsSUFBeUIsQ0FBN0IsRUFBZ0M7QUFDNUIsVUFBSSxLQUFLbzZCLFdBQUwsQ0FBaUJqMkMsS0FBakIsQ0FBSixFQUE2QjtBQUN6QkEsYUFBSyxHQUFHLEtBQUtrMkMsY0FBTCxDQUFvQmwyQyxLQUFwQixFQUEyQnFJLFNBQTNCLENBQVI7QUFDQXJJLGFBQUssR0FBRytOLFVBQVUsQ0FBQy9OLEtBQUQsQ0FBbEI7QUFDSDtBQUNKOztBQUNELGFBQVNtMkMsVUFBVCxHQUFzQjtBQUNsQm4yQyxXQUFLLEdBQUdtYSxPQUFPLENBQUNrM0IsT0FBUixDQUFnQnh3QyxJQUFoQixFQUFzQmcxQyxTQUF0QixDQUFSO0FBQ0E1MUMsU0FBRyxHQUFHa2EsT0FBTyxDQUFDalUsR0FBUixDQUFZbEcsS0FBWixFQUFtQjZiLFFBQW5CLENBQU47QUFDQTVVLFNBQUcsR0FBRztBQUFFakgsYUFBSyxFQUFFQSxLQUFUO0FBQWdCQyxXQUFHLEVBQUVBO0FBQXJCLE9BQU47QUFDSDs7QUFDRGsyQyxjQUFVLEdBckNxRixDQXNDL0Y7O0FBQ0EsUUFBSSxDQUFDLEtBQUtwQixjQUFMLENBQW9COXRDLEdBQXBCLENBQUwsRUFBK0I7QUFDM0JwRyxVQUFJLEdBQUcsS0FBS3ExQyxjQUFMLENBQW9CcjFDLElBQXBCLEVBQTBCd0gsU0FBMUIsQ0FBUDtBQUNBOHRDLGdCQUFVO0FBQ2I7O0FBQ0QsV0FBT2x2QyxHQUFQO0FBQ0gsR0E1Q0QsQ0FqSmtELENBOExsRDs7O0FBQ0E2c0Msc0JBQW9CLENBQUM1d0MsU0FBckIsQ0FBK0JzeUMsc0JBQS9CLEdBQXdELFVBQVUzMEMsSUFBVixFQUFnQndILFNBQWhCLEVBQTJCZ3RDLFFBQTNCLEVBQXFDO0FBQ3pGLFFBQUlsN0IsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsUUFBSWk4QixlQUFlLEdBQUcsS0FBSzN2QixPQUFMLENBQWFxdkIsYUFBbkM7QUFDQSxRQUFJTyxZQUFZLEdBQUcsQ0FBbkI7QUFDQSxRQUFJcjJDLEtBQUssR0FBR2EsSUFBWjtBQUNBLFFBQUlaLEdBQUo7O0FBQ0EsUUFBSW0yQyxlQUFKLEVBQXFCO0FBQ2pCcDJDLFdBQUssR0FBR21hLE9BQU8sQ0FBQ2szQixPQUFSLENBQWdCcnhDLEtBQWhCLEVBQXVCbzJDLGVBQXZCLENBQVI7QUFDSDs7QUFDRHAyQyxTQUFLLEdBQUcrTixVQUFVLENBQUMvTixLQUFELENBQWxCO0FBQ0FBLFNBQUssR0FBRyxLQUFLazJDLGNBQUwsQ0FBb0JsMkMsS0FBcEIsRUFBMkJxSSxTQUEzQixDQUFSO0FBQ0FwSSxPQUFHLEdBQUdELEtBQU47O0FBQ0EsT0FBRztBQUNDQyxTQUFHLEdBQUdrTixPQUFPLENBQUNsTixHQUFELEVBQU0sQ0FBTixDQUFiOztBQUNBLFVBQUksQ0FBQyxLQUFLZzJDLFdBQUwsQ0FBaUJoMkMsR0FBakIsQ0FBTCxFQUE0QjtBQUN4Qm8yQyxvQkFBWTtBQUNmO0FBQ0osS0FMRCxRQUtTQSxZQUFZLEdBQUdoQixRQUx4Qjs7QUFNQSxXQUFPO0FBQUVyMUMsV0FBSyxFQUFFQSxLQUFUO0FBQWdCQyxTQUFHLEVBQUVBO0FBQXJCLEtBQVA7QUFDSCxHQW5CRCxDQS9Ma0QsQ0FtTmxEO0FBQ0E7OztBQUNBNnpDLHNCQUFvQixDQUFDNXdDLFNBQXJCLENBQStCdXlDLHVCQUEvQixHQUF5RCxVQUFVNTBDLElBQVYsRUFBZ0I7QUFDckUsUUFBSXNaLE9BQU8sR0FBRyxLQUFLQSxPQUFuQjtBQUNBLFFBQUlKLFlBQVksR0FBRyxLQUFLcTdCLGNBQUwsQ0FBb0IsY0FBcEIsRUFBb0NqN0IsT0FBTyxDQUFDcVMsTUFBUixDQUFlM3JCLElBQWYsQ0FBcEMsQ0FBbkI7O0FBQ0EsUUFBSWtaLFlBQVksS0FBS0EsWUFBWSxDQUFDL1osS0FBYixJQUFzQixJQUF0QixJQUE4QitaLFlBQVksQ0FBQzlaLEdBQWIsSUFBb0IsSUFBdkQsQ0FBaEIsRUFBOEU7QUFDMUUsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTzhaLFlBQVA7QUFDSCxHQVBELENBck5rRCxDQTZObEQ7QUFDQTtBQUNBOzs7QUFDQSs1QixzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQit4QyxnQkFBL0IsR0FBa0QsVUFBVWxZLFlBQVYsRUFBd0JzWCxnQkFBeEIsRUFBMENNLGFBQTFDLEVBQXlEO0FBQ3ZHLFdBQU81WCxZQUFQO0FBQ0gsR0FGRCxDQWhPa0QsQ0FtT2xEO0FBQ0E7OztBQUNBK1csc0JBQW9CLENBQUM1d0MsU0FBckIsQ0FBK0JpeUMsa0JBQS9CLEdBQW9ELFVBQVVtQixRQUFWLEVBQW9CO0FBQ3BFLFFBQUlQLGtCQUFrQixHQUFHLEtBQUt0dkIsT0FBTCxDQUFhNnRCLGFBQXRDO0FBQ0EsUUFBSThCLGVBQUo7O0FBQ0EsUUFBSUwsa0JBQUosRUFBd0I7QUFDcEIsYUFBTzlrQyxjQUFjLENBQUM4a0Msa0JBQUQsQ0FBckI7QUFDSCxLQUZELE1BR0ssSUFBS0ssZUFBZSxHQUFHLEtBQUszdkIsT0FBTCxDQUFhcXZCLGFBQXBDLEVBQW9EO0FBQ3JELGFBQU83a0MsY0FBYyxDQUFDLENBQUQsRUFBSW1sQyxlQUFKLENBQXJCO0FBQ0gsS0FGSSxNQUdBLElBQUlFLFFBQUosRUFBYztBQUNmLGFBQU9BLFFBQVA7QUFDSCxLQUZJLE1BR0E7QUFDRCxhQUFPcmxDLGNBQWMsQ0FBQztBQUFFOUMsWUFBSSxFQUFFO0FBQVIsT0FBRCxDQUFyQjtBQUNIO0FBQ0osR0FmRCxDQXJPa0QsQ0FxUGxEO0FBQ0E7QUFDQTs7O0FBQ0EybEMsc0JBQW9CLENBQUM1d0MsU0FBckIsQ0FBK0JreUMsY0FBL0IsR0FBZ0QsVUFBVTd1QyxJQUFWLEVBQWdCO0FBQzVELFFBQUlnd0MsU0FBUyxHQUFHLEVBQWhCOztBQUNBLFNBQUssSUFBSXgrQixFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHQyxTQUFTLENBQUN4VSxNQUFoQyxFQUF3Q3VVLEVBQUUsRUFBMUMsRUFBOEM7QUFDMUN3K0IsZUFBUyxDQUFDeCtCLEVBQUUsR0FBRyxDQUFOLENBQVQsR0FBb0JDLFNBQVMsQ0FBQ0QsRUFBRCxDQUE3QjtBQUNIOztBQUNELFFBQUl4ZSxHQUFHLEdBQUcsS0FBS2t0QixPQUFMLENBQWFsZ0IsSUFBYixDQUFWOztBQUNBLFFBQUksT0FBT2hOLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUMzQkEsU0FBRyxHQUFHQSxHQUFHLENBQUNzWCxLQUFKLENBQVUsSUFBVixFQUFnQjBsQyxTQUFoQixDQUFOO0FBQ0g7O0FBQ0QsUUFBSWg5QyxHQUFKLEVBQVM7QUFDTEEsU0FBRyxHQUFHaW5CLFVBQVUsQ0FBQ2puQixHQUFELEVBQU0sS0FBSzRnQixPQUFYLENBQWhCO0FBQ0g7O0FBQ0QsUUFBSTVnQixHQUFKLEVBQVM7QUFDTEEsU0FBRyxHQUFHaWdCLHNCQUFzQixDQUFDamdCLEdBQUQsQ0FBNUI7QUFDSDs7QUFDRCxXQUFPQSxHQUFQO0FBQ0gsR0FoQkQ7QUFpQkE7O0FBRUE7OztBQUNBdTZDLHNCQUFvQixDQUFDNXdDLFNBQXJCLENBQStCOHdDLGNBQS9CLEdBQWdELFlBQVk7QUFDeEQsUUFBSXdDLFVBQVUsR0FBRyxLQUFLL3ZCLE9BQUwsQ0FBYSt2QixVQUFiLElBQTJCLEVBQTVDLENBRHdELENBQ1I7O0FBQ2hELFFBQUlDLGVBQWUsR0FBRyxFQUF0QixDQUZ3RCxDQUU5Qjs7QUFDMUIsUUFBSWw5QixNQUFNLEdBQUcsQ0FBYjtBQUNBLFFBQUloWSxDQUFKOztBQUNBLFFBQUksS0FBS2tsQixPQUFMLENBQWFza0IsUUFBYixLQUEwQixLQUE5QixFQUFxQztBQUNqQ3lMLGdCQUFVLENBQUM5d0MsSUFBWCxDQUFnQixDQUFoQixFQUFtQixDQUFuQixFQURpQyxDQUNWO0FBQzFCOztBQUNELFNBQUtuRSxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUcsQ0FBaEIsRUFBbUJBLENBQUMsRUFBcEIsRUFBd0I7QUFDcEIsVUFBSSxFQUFFazFDLGVBQWUsQ0FBQ2wxQyxDQUFELENBQWYsR0FBcUJpMUMsVUFBVSxDQUFDbHZCLE9BQVgsQ0FBbUIvbEIsQ0FBbkIsTUFBMEIsQ0FBQyxDQUFsRCxDQUFKLEVBQTBEO0FBQ3REZ1ksY0FBTTtBQUNUO0FBQ0o7O0FBQ0QsUUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDVCxZQUFNLElBQUltOUIsS0FBSixDQUFVLG9CQUFWLENBQU4sQ0FEUyxDQUM4QjtBQUMxQzs7QUFDRCxTQUFLRCxlQUFMLEdBQXVCQSxlQUF2QjtBQUNILEdBakJELENBNVFrRCxDQThSbEQ7QUFDQTs7O0FBQ0EzQyxzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQjZ4QyxjQUEvQixHQUFnRCxVQUFVajdCLEtBQVYsRUFBaUI7QUFDN0QsUUFBSTlaLEtBQUssR0FBRzhaLEtBQUssQ0FBQzlaLEtBQWxCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHNlosS0FBSyxDQUFDN1osR0FBaEI7O0FBQ0EsUUFBSUQsS0FBSixFQUFXO0FBQ1BBLFdBQUssR0FBRyxLQUFLazJDLGNBQUwsQ0FBb0JsMkMsS0FBcEIsQ0FBUjtBQUNIOztBQUNELFFBQUlDLEdBQUosRUFBUztBQUNMQSxTQUFHLEdBQUcsS0FBS2kyQyxjQUFMLENBQW9CajJDLEdBQXBCLEVBQXlCLENBQUMsQ0FBMUIsRUFBNkIsSUFBN0IsQ0FBTjtBQUNIOztBQUNELFFBQUlELEtBQUssSUFBSSxJQUFULElBQWlCQyxHQUFHLElBQUksSUFBeEIsSUFBZ0NELEtBQUssR0FBR0MsR0FBNUMsRUFBaUQ7QUFDN0MsYUFBTztBQUFFRCxhQUFLLEVBQUVBLEtBQVQ7QUFBZ0JDLFdBQUcsRUFBRUE7QUFBckIsT0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNILEdBYkQsQ0FoU2tELENBOFNsRDtBQUNBOzs7QUFDQTZ6QyxzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQit5QyxXQUEvQixHQUE2QyxVQUFVdGtDLEdBQVYsRUFBZTtBQUN4RCxRQUFJQSxHQUFHLFlBQVlqQixJQUFuQixFQUF5QjtBQUNyQmlCLFNBQUcsR0FBR0EsR0FBRyxDQUFDM0IsU0FBSixFQUFOO0FBQ0g7O0FBQ0QsV0FBTyxLQUFLeW1DLGVBQUwsQ0FBcUI5a0MsR0FBckIsQ0FBUDtBQUNILEdBTEQsQ0FoVGtELENBc1RsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQW1pQyxzQkFBb0IsQ0FBQzV3QyxTQUFyQixDQUErQmd6QyxjQUEvQixHQUFnRCxVQUFVcjFDLElBQVYsRUFBZ0I4MUMsR0FBaEIsRUFBcUJDLFdBQXJCLEVBQWtDO0FBQzlFLFFBQUlELEdBQUcsS0FBSyxLQUFLLENBQWpCLEVBQW9CO0FBQUVBLFNBQUcsR0FBRyxDQUFOO0FBQVU7O0FBQ2hDLFFBQUlDLFdBQVcsS0FBSyxLQUFLLENBQXpCLEVBQTRCO0FBQUVBLGlCQUFXLEdBQUcsS0FBZDtBQUFzQjs7QUFDcEQsV0FBTyxLQUFLSCxlQUFMLENBQXFCLENBQUM1MUMsSUFBSSxDQUFDbVAsU0FBTCxNQUFvQjRtQyxXQUFXLEdBQUdELEdBQUgsR0FBUyxDQUF4QyxJQUE2QyxDQUE5QyxJQUFtRCxDQUF4RSxDQUFQLEVBQW1GO0FBQy9FOTFDLFVBQUksR0FBR3NNLE9BQU8sQ0FBQ3RNLElBQUQsRUFBTzgxQyxHQUFQLENBQWQ7QUFDSDs7QUFDRCxXQUFPOTFDLElBQVA7QUFDSCxHQVBEOztBQVFBLFNBQU9pekMsb0JBQVA7QUFDSCxDQXBVeUMsRUFBMUMsQyxDQXFVQTs7O0FBQ0EsU0FBUytDLG1CQUFULENBQTZCQyxFQUE3QixFQUFpQ0MsRUFBakMsRUFBcUM7QUFDakMsU0FBTzExQixXQUFXLENBQUN5MUIsRUFBRSxDQUFDOVMsVUFBSixFQUFnQitTLEVBQUUsQ0FBQy9TLFVBQW5CLENBQVgsSUFDSDNpQixXQUFXLENBQUN5MUIsRUFBRSxDQUFDbm1CLFdBQUosRUFBaUJvbUIsRUFBRSxDQUFDcG1CLFdBQXBCLENBRFIsSUFFSHRQLFdBQVcsQ0FBQ3kxQixFQUFFLENBQUNsQyxXQUFKLEVBQWlCbUMsRUFBRSxDQUFDbkMsV0FBcEIsQ0FGUixJQUdIcmlDLGNBQWMsQ0FBQ3VrQyxFQUFFLENBQUM1TCxPQUFKLEVBQWE2TCxFQUFFLENBQUM3TCxPQUFoQixDQUhYLElBSUgzNEIsY0FBYyxDQUFDdWtDLEVBQUUsQ0FBQzNMLE9BQUosRUFBYTRMLEVBQUUsQ0FBQzVMLE9BQWhCLENBSmxCO0FBS0E7Ozs7Ozs7O0FBUUg7O0FBRUQsU0FBUzMvQixNQUFULENBQWlCOGdCLEtBQWpCLEVBQXdCK0QsTUFBeEIsRUFBZ0M1ekIsUUFBaEMsRUFBMEM7QUFDdEMsTUFBSXU2QyxRQUFRLEdBQUdDLGNBQWMsQ0FBQzNxQixLQUFLLENBQUMwcUIsUUFBUCxFQUFpQjNtQixNQUFqQixDQUE3QjtBQUNBLE1BQUlDLFdBQVcsR0FBRzRtQixpQkFBaUIsQ0FBQzVxQixLQUFLLENBQUNnRSxXQUFQLEVBQW9CRCxNQUFwQixFQUE0Qi9ELEtBQUssQ0FBQzZuQixXQUFsQyxFQUErQzZDLFFBQS9DLEVBQXlEdjZDLFFBQXpELENBQW5DO0FBQ0EsTUFBSTh2QixZQUFZLEdBQUdpbUIsa0JBQWtCLENBQUNsbUIsS0FBSyxDQUFDQyxZQUFQLEVBQXFCOEQsTUFBckIsRUFBNkJDLFdBQTdCLEVBQTBDN3pCLFFBQTFDLENBQXJDOztBQUNBLE1BQUkwNkMsU0FBUyxHQUFHbjhCLFFBQVEsQ0FBQyxFQUFELEVBQUtzUixLQUFMLEVBQVk7QUFBRTBxQixZQUFRLEVBQUVBLFFBQVo7QUFDaEMxbUIsZUFBVyxFQUFFQSxXQURtQjtBQUNONmpCLGVBQVcsRUFBRWlELGlCQUFpQixDQUFDOXFCLEtBQUssQ0FBQzZuQixXQUFQLEVBQW9COWpCLE1BQXBCLEVBQTRCQyxXQUE1QixDQUR4QjtBQUNrRS9ELGdCQUFZLEVBQUVBLFlBRGhGO0FBQzhGM08sY0FBVSxFQUFFd1MsZ0JBQWdCLENBQUM5RCxLQUFLLENBQUMxTyxVQUFQLEVBQW1CeVMsTUFBbkIsRUFBMkI5RCxZQUEzQixFQUF5QytELFdBQXpDLEVBQXNEN3pCLFFBQXRELENBRDFIO0FBQzJMbzFCLGlCQUFhLEVBQUV3bEIsbUJBQW1CLENBQUMvcUIsS0FBSyxDQUFDdUYsYUFBUCxFQUFzQnhCLE1BQXRCLEVBQThCNXpCLFFBQTlCLENBRDdOO0FBQ3NRdTFCLGtCQUFjLEVBQUVzbEIsbUJBQW1CLENBQUNockIsS0FBSyxDQUFDMEYsY0FBUCxFQUF1QjNCLE1BQXZCLENBRHpTO0FBQ3lVc0IsYUFBUyxFQUFFNGxCLGVBQWUsQ0FBQ2pyQixLQUFLLENBQUNxRixTQUFQLEVBQWtCdEIsTUFBbEIsRUFBMEI5RCxZQUExQixFQUF3Qzl2QixRQUF4QyxDQURuVztBQUNzWncxQixlQUFXLEVBQUV1bEIsaUJBQWlCLENBQUNsckIsS0FBSyxDQUFDMkYsV0FBUCxFQUFvQjVCLE1BQXBCLEVBQTRCOUQsWUFBNUIsRUFBMEM5dkIsUUFBMUMsQ0FEcGI7QUFDeWVnN0MsMkJBQXVCLEVBQUVDLG1CQUFtQixDQUFDbnJCLFlBQUQsQ0FEcmhCO0FBQ3FpQjZYLGdCQUFZLEVBQUVzVCxtQkFBbUIsQ0FBQ25yQixZQUFEO0FBRHRrQixHQUFaLENBQXhCOztBQUVBLE9BQUssSUFBSXhVLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcxVSxRQUFRLENBQUNvaUIsWUFBVCxDQUFzQkMsS0FBdEIsQ0FBNEJzbUIsUUFBbEQsRUFBNERydEIsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBcEUsRUFBNEV1VSxFQUFFLEVBQTlFLEVBQWtGO0FBQzlFLFFBQUk0L0IsV0FBVyxHQUFHeG1DLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBcEI7QUFDQW8vQixhQUFTLEdBQUdRLFdBQVcsQ0FBQ1IsU0FBRCxFQUFZOW1CLE1BQVosRUFBb0I1ekIsUUFBcEIsQ0FBdkI7QUFDSCxHQVRxQyxDQVV0Qzs7O0FBQ0EsU0FBTzA2QyxTQUFQO0FBQ0g7O0FBQ0QsU0FBU0YsY0FBVCxDQUF3QlcsZUFBeEIsRUFBeUN2bkIsTUFBekMsRUFBaUQ7QUFDN0MsVUFBUUEsTUFBTSxDQUFDdnhCLElBQWY7QUFDSSxTQUFLLGVBQUw7QUFDSSxhQUFPdXhCLE1BQU0sQ0FBQzJtQixRQUFkOztBQUNKO0FBQ0ksYUFBT1ksZUFBUDtBQUpSO0FBTUg7O0FBQ0QsU0FBU1YsaUJBQVQsQ0FBMkJoRCxrQkFBM0IsRUFBK0M3akIsTUFBL0MsRUFBdUQ4akIsV0FBdkQsRUFBb0U2QyxRQUFwRSxFQUE4RXY2QyxRQUE5RSxFQUF3RjtBQUNwRixNQUFJbzdDLGNBQUo7O0FBQ0EsVUFBUXhuQixNQUFNLENBQUN2eEIsSUFBZjtBQUNJLFNBQUssTUFBTDtBQUNJKzRDLG9CQUFjLEdBQUdwN0MsUUFBUSxDQUFDcTdDLHFCQUFULENBQStCZCxRQUEvQixFQUF5Qy9DLFNBQXpDLENBQW1EQyxrQkFBbkQsRUFBdUVDLFdBQXZFLENBQWpCO0FBQ0E7O0FBQ0osU0FBSyxNQUFMO0FBQ0kwRCxvQkFBYyxHQUFHcDdDLFFBQVEsQ0FBQ3E3QyxxQkFBVCxDQUErQmQsUUFBL0IsRUFBeUN6QyxTQUF6QyxDQUFtREwsa0JBQW5ELEVBQXVFQyxXQUF2RSxDQUFqQjtBQUNBOztBQUNKLFNBQUssVUFBTDtBQUNJLFVBQUksQ0FBQ0Qsa0JBQWtCLENBQUN2akIsV0FBcEIsSUFDQSxDQUFDalAsbUJBQW1CLENBQUN3eUIsa0JBQWtCLENBQUNuWCxZQUFwQixFQUFrQzFNLE1BQU0sQ0FBQzBuQixVQUF6QyxDQUR4QixFQUM4RTtBQUMxRUYsc0JBQWMsR0FBR3A3QyxRQUFRLENBQUNxN0MscUJBQVQsQ0FBK0JkLFFBQS9CLEVBQXlDblksS0FBekMsQ0FBK0N4TyxNQUFNLENBQUMwbkIsVUFBdEQsRUFBa0U5L0IsU0FBbEUsRUFBNkUsSUFBN0UsQ0FBa0Y7QUFBbEYsU0FBakI7QUFFSDs7QUFDRDs7QUFDSixTQUFLLGVBQUw7QUFDSSxVQUFJKy9CLFNBQVMsR0FBR3Y3QyxRQUFRLENBQUNxN0MscUJBQVQsQ0FBK0JkLFFBQS9CLENBQWhCOztBQUNBLFVBQUksQ0FBQ2dCLFNBQUwsRUFBZ0I7QUFDWixjQUFNLElBQUl0QixLQUFKLENBQVVNLFFBQVEsR0FDcEIsNEJBQTRCQSxRQUE1QixHQUF1QyxnRUFEbkIsR0FFcEIseUNBRkUsQ0FBTjtBQUdIOztBQUNEYSxvQkFBYyxHQUFHRyxTQUFTLENBQUNuWixLQUFWLENBQWdCeE8sTUFBTSxDQUFDMG5CLFVBQVAsSUFBcUI1RCxXQUFyQyxFQUFrRGw4QixTQUFsRCxFQUE2RCxJQUE3RCxDQUFrRTtBQUFsRSxPQUFqQjtBQUVBO0FBdkJSOztBQXlCQSxNQUFJNC9CLGNBQWMsSUFDZEEsY0FBYyxDQUFDaEQsT0FEZixJQUVBLEVBQUVYLGtCQUFrQixJQUFJMkMsbUJBQW1CLENBQUMzQyxrQkFBRCxFQUFxQjJELGNBQXJCLENBQTNDLENBRkosRUFFc0Y7QUFDbEYsV0FBT0EsY0FBUDtBQUNILEdBSkQsTUFLSztBQUNELFdBQU8zRCxrQkFBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBU2tELGlCQUFULENBQTJCakQsV0FBM0IsRUFBd0M5akIsTUFBeEMsRUFBZ0RDLFdBQWhELEVBQTZEO0FBQ3pELFVBQVFELE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxNQUFMO0FBQ0EsU0FBSyxNQUFMO0FBQ0ksVUFBSSxDQUFDNGlCLG1CQUFtQixDQUFDNE8sV0FBVyxDQUFDeU0sWUFBYixFQUEyQm9YLFdBQTNCLENBQXhCLEVBQWlFO0FBQzdELGVBQU83akIsV0FBVyxDQUFDeU0sWUFBWixDQUF5Qi84QixLQUFoQztBQUNILE9BRkQsTUFHSztBQUNELGVBQU9tMEMsV0FBUDtBQUNIOztBQUNMLFNBQUssVUFBTDtBQUNBLFNBQUssZUFBTDtBQUNJLFVBQUk4RCxPQUFPLEdBQUc1bkIsTUFBTSxDQUFDMG5CLFVBQVAsSUFBcUI1RCxXQUFuQzs7QUFDQSxVQUFJN2pCLFdBQVcsQ0FBQ0ssV0FBWixJQUEyQixDQUFDalAsbUJBQW1CLENBQUM0TyxXQUFXLENBQUNLLFdBQWIsRUFBMEJzbkIsT0FBMUIsQ0FBbkQsRUFBdUY7QUFDbkYsZUFBTzNuQixXQUFXLENBQUN5TSxZQUFaLENBQXlCLzhCLEtBQWhDO0FBQ0gsT0FGRCxNQUdLO0FBQ0QsZUFBT2k0QyxPQUFQO0FBQ0g7O0FBQ0w7QUFDSSxhQUFPOUQsV0FBUDtBQW5CUjtBQXFCSDs7QUFDRCxTQUFTa0QsbUJBQVQsQ0FBNkJhLGdCQUE3QixFQUErQzduQixNQUEvQyxFQUF1RDV6QixRQUF2RCxFQUFpRTtBQUM3RCxVQUFRNHpCLE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxjQUFMO0FBQ0ksYUFBT3V4QixNQUFNLENBQUNrRSxTQUFkOztBQUNKLFNBQUssZ0JBQUw7QUFDSSxhQUFPLElBQVA7O0FBQ0o7QUFDSSxhQUFPMmpCLGdCQUFQO0FBTlI7QUFRSDs7QUFDRCxTQUFTWixtQkFBVCxDQUE2QmEsaUJBQTdCLEVBQWdEOW5CLE1BQWhELEVBQXdEO0FBQ3BELFVBQVFBLE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxjQUFMO0FBQ0ksYUFBT3V4QixNQUFNLENBQUMrbkIsZUFBZDs7QUFDSixTQUFLLGdCQUFMO0FBQ0ksYUFBTyxFQUFQOztBQUNKO0FBQ0ksYUFBT0QsaUJBQVA7QUFOUjtBQVFIOztBQUNELFNBQVNaLGVBQVQsQ0FBeUJjLFdBQXpCLEVBQXNDaG9CLE1BQXRDLEVBQThDcWlCLE9BQTlDLEVBQXVEajJDLFFBQXZELEVBQWlFO0FBQzdELFVBQVE0ekIsTUFBTSxDQUFDdnhCLElBQWY7QUFDSSxTQUFLLGdCQUFMO0FBQ0ksVUFBSXc1QyxPQUFPLEdBQUdqb0IsTUFBTSxDQUFDL0QsS0FBckI7QUFDQSxhQUFPO0FBQ0h5RyxzQkFBYyxFQUFFdWxCLE9BQU8sQ0FBQ3ZsQixjQURyQjtBQUVIUCxxQkFBYSxFQUFFOGxCLE9BQU8sQ0FBQzlsQixhQUZwQjtBQUdISSxlQUFPLEVBQUUwbEIsT0FBTyxDQUFDMWxCLE9BSGQ7QUFJSCtJLGVBQU8sRUFBRTJjLE9BQU8sQ0FBQzNjO0FBSmQsT0FBUDs7QUFNSixTQUFLLGtCQUFMO0FBQ0ksYUFBTyxJQUFQOztBQUNKO0FBQ0ksYUFBTzBjLFdBQVA7QUFaUjtBQWNIOztBQUNELFNBQVNiLGlCQUFULENBQTJCZSxhQUEzQixFQUEwQ2xvQixNQUExQyxFQUFrRHFpQixPQUFsRCxFQUEyRGoyQyxRQUEzRCxFQUFxRTtBQUNqRSxVQUFRNHpCLE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxrQkFBTDtBQUNJLFVBQUkwNUMsU0FBUyxHQUFHbm9CLE1BQU0sQ0FBQy9ELEtBQXZCO0FBQ0EsYUFBTztBQUNIeUcsc0JBQWMsRUFBRXlsQixTQUFTLENBQUN6bEIsY0FEdkI7QUFFSFAscUJBQWEsRUFBRWdtQixTQUFTLENBQUNobUIsYUFGdEI7QUFHSEksZUFBTyxFQUFFNGxCLFNBQVMsQ0FBQzVsQixPQUhoQjtBQUlIK0ksZUFBTyxFQUFFNmMsU0FBUyxDQUFDN2M7QUFKaEIsT0FBUDs7QUFNSixTQUFLLG9CQUFMO0FBQ0ksYUFBTyxJQUFQOztBQUNKO0FBQ0ksYUFBTzRjLGFBQVA7QUFaUjtBQWNIOztBQUNELFNBQVNiLG1CQUFULENBQTZCbnJCLFlBQTdCLEVBQTJDO0FBQ3ZDLE1BQUlrc0IsR0FBRyxHQUFHLENBQVY7O0FBQ0EsT0FBSyxJQUFJLzZCLFFBQVQsSUFBcUI2TyxZQUFyQixFQUFtQztBQUMvQixRQUFJQSxZQUFZLENBQUM3TyxRQUFELENBQVosQ0FBdUI2MEIsVUFBM0IsRUFBdUM7QUFDbkNrRyxTQUFHO0FBQ047QUFDSjs7QUFDRCxTQUFPQSxHQUFQO0FBQ0g7O0FBRUQsSUFBSUMsY0FBYyxHQUFHO0FBQ2pCMTRDLE9BQUssRUFBRSxJQURVO0FBRWpCQyxLQUFHLEVBQUUsSUFGWTtBQUdqQjBiLFFBQU0sRUFBRXZDO0FBSFMsQ0FBckI7O0FBS0EsU0FBU3UvQixhQUFULENBQXVCL2lCLEdBQXZCLEVBQTRCemIsT0FBNUIsRUFBcUN5K0IsZUFBckMsRUFBc0Q7QUFDbEQsTUFBSUMsSUFBSSxHQUFHQyxpQkFBaUIsQ0FBQ2xqQixHQUFELEVBQU16YixPQUFOLENBQTVCO0FBQ0EsTUFBSUwsS0FBSyxHQUFHKytCLElBQUksQ0FBQy8rQixLQUFqQjs7QUFDQSxNQUFJLENBQUNBLEtBQUssQ0FBQzlaLEtBQVgsRUFBa0I7QUFDZCxXQUFPLElBQVA7QUFDSDs7QUFDRCxNQUFJLENBQUM4WixLQUFLLENBQUM3WixHQUFYLEVBQWdCO0FBQ1osUUFBSTI0QyxlQUFlLElBQUksSUFBdkIsRUFBNkI7QUFDekIsYUFBTyxJQUFQO0FBQ0gsS0FGRCxNQUdLO0FBQ0Q5K0IsV0FBSyxDQUFDN1osR0FBTixHQUFZa2EsT0FBTyxDQUFDalUsR0FBUixDQUFZNFQsS0FBSyxDQUFDOVosS0FBbEIsRUFBeUI0NEMsZUFBekIsQ0FBWjtBQUNIO0FBQ0o7O0FBQ0QsU0FBT0MsSUFBUDtBQUNIO0FBQ0Q7Ozs7OztBQUlBLFNBQVNDLGlCQUFULENBQTJCbGpCLEdBQTNCLEVBQWdDemIsT0FBaEMsRUFBeUM7QUFDckMsTUFBSW9CLFNBQVMsR0FBRyxFQUFoQjtBQUNBLE1BQUk2TyxhQUFhLEdBQUcxUixXQUFXLENBQUNrZCxHQUFELEVBQU04aUIsY0FBTixFQUFzQixFQUF0QixFQUEwQm45QixTQUExQixDQUEvQjtBQUNBLE1BQUlnYyxTQUFTLEdBQUduTixhQUFhLENBQUNwcUIsS0FBZCxHQUFzQm1hLE9BQU8sQ0FBQ3dkLGdCQUFSLENBQXlCdk4sYUFBYSxDQUFDcHFCLEtBQXZDLENBQXRCLEdBQXNFLElBQXRGO0FBQ0EsTUFBSXkzQixPQUFPLEdBQUdyTixhQUFhLENBQUNucUIsR0FBZCxHQUFvQmthLE9BQU8sQ0FBQ3dkLGdCQUFSLENBQXlCdk4sYUFBYSxDQUFDbnFCLEdBQXZDLENBQXBCLEdBQWtFLElBQWhGO0FBQ0EsTUFBSTBiLE1BQU0sR0FBR3lPLGFBQWEsQ0FBQ3pPLE1BQTNCOztBQUNBLE1BQUlBLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2hCQSxVQUFNLEdBQUk0YixTQUFTLElBQUlBLFNBQVMsQ0FBQ0ssaUJBQXhCLEtBQ0osQ0FBQ0gsT0FBRCxJQUFZQSxPQUFPLENBQUNHLGlCQURoQixDQUFUO0FBRUgsR0FUb0MsQ0FVckM7OztBQUNBcmMsV0FBUyxDQUFDekIsS0FBVixHQUFrQjtBQUNkOVosU0FBSyxFQUFFdTNCLFNBQVMsR0FBR0EsU0FBUyxDQUFDcG9CLE1BQWIsR0FBc0IsSUFEeEI7QUFFZGxQLE9BQUcsRUFBRXczQixPQUFPLEdBQUdBLE9BQU8sQ0FBQ3RvQixNQUFYLEdBQW9CO0FBRmxCLEdBQWxCO0FBSUFvTSxXQUFTLENBQUNJLE1BQVYsR0FBbUJBLE1BQW5CO0FBQ0EsU0FBT0osU0FBUDtBQUNIOztBQUNELFNBQVN3OUIsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDQyxLQUFqQyxFQUF3QztBQUNwQyxTQUFPNTNCLFdBQVcsQ0FBQzIzQixLQUFLLENBQUNsL0IsS0FBUCxFQUFjbS9CLEtBQUssQ0FBQ24vQixLQUFwQixDQUFYLElBQ0hrL0IsS0FBSyxDQUFDcjlCLE1BQU4sS0FBaUJzOUIsS0FBSyxDQUFDdDlCLE1BRHBCLElBRUh1OUIsZ0JBQWdCLENBQUNGLEtBQUQsRUFBUUMsS0FBUixDQUZwQjtBQUdILEMsQ0FDRDs7O0FBQ0EsU0FBU0MsZ0JBQVQsQ0FBMEJGLEtBQTFCLEVBQWlDQyxLQUFqQyxFQUF3QztBQUNwQyxPQUFLLElBQUk1eUMsUUFBVCxJQUFxQjR5QyxLQUFyQixFQUE0QjtBQUN4QixRQUFJNXlDLFFBQVEsS0FBSyxPQUFiLElBQXdCQSxRQUFRLEtBQUssUUFBekMsRUFBbUQ7QUFDL0MsVUFBSTJ5QyxLQUFLLENBQUMzeUMsUUFBRCxDQUFMLEtBQW9CNHlDLEtBQUssQ0FBQzV5QyxRQUFELENBQTdCLEVBQXlDO0FBQ3JDLGVBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSixHQVBtQyxDQVFwQztBQUNBOzs7QUFDQSxPQUFLLElBQUlBLFFBQVQsSUFBcUIyeUMsS0FBckIsRUFBNEI7QUFDeEIsUUFBSSxFQUFFM3lDLFFBQVEsSUFBSTR5QyxLQUFkLENBQUosRUFBMEI7QUFDdEIsYUFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFTOWtCLGdCQUFULENBQTBCMGtCLElBQTFCLEVBQWdDMStCLE9BQWhDLEVBQXlDO0FBQ3JDLFNBQU87QUFDSG5hLFNBQUssRUFBRW1hLE9BQU8sQ0FBQ3FTLE1BQVIsQ0FBZXFzQixJQUFJLENBQUMvK0IsS0FBTCxDQUFXOVosS0FBMUIsQ0FESjtBQUVIQyxPQUFHLEVBQUVrYSxPQUFPLENBQUNxUyxNQUFSLENBQWVxc0IsSUFBSSxDQUFDLytCLEtBQUwsQ0FBVzdaLEdBQTFCLENBRkY7QUFHSFMsWUFBUSxFQUFFeVosT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0J1YyxJQUFJLENBQUMvK0IsS0FBTCxDQUFXOVosS0FBN0IsRUFBb0M7QUFBRXU4QixjQUFRLEVBQUVzYyxJQUFJLENBQUNsOUI7QUFBakIsS0FBcEMsQ0FIUDtBQUlIaGIsVUFBTSxFQUFFd1osT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0J1YyxJQUFJLENBQUMvK0IsS0FBTCxDQUFXN1osR0FBN0IsRUFBa0M7QUFBRXM4QixjQUFRLEVBQUVzYyxJQUFJLENBQUNsOUI7QUFBakIsS0FBbEMsQ0FKTDtBQUtIQSxVQUFNLEVBQUVrOUIsSUFBSSxDQUFDbDlCO0FBTFYsR0FBUDtBQU9IOztBQUNELFNBQVN3OUIsaUJBQVQsQ0FBMkJOLElBQTNCLEVBQWlDMStCLE9BQWpDLEVBQTBDO0FBQ3RDLFNBQU87QUFDSHRaLFFBQUksRUFBRXNaLE9BQU8sQ0FBQ3FTLE1BQVIsQ0FBZXFzQixJQUFJLENBQUMvK0IsS0FBTCxDQUFXOVosS0FBMUIsQ0FESDtBQUVIbzVDLFdBQU8sRUFBRWovQixPQUFPLENBQUNtaUIsU0FBUixDQUFrQnVjLElBQUksQ0FBQy8rQixLQUFMLENBQVc5WixLQUE3QixFQUFvQztBQUFFdThCLGNBQVEsRUFBRXNjLElBQUksQ0FBQ2w5QjtBQUFqQixLQUFwQyxDQUZOO0FBR0hBLFVBQU0sRUFBRWs5QixJQUFJLENBQUNsOUI7QUFIVixHQUFQO0FBS0g7O0FBQ0QsU0FBUzA5QixtQkFBVCxDQUE2QnZlLFFBQTdCLEVBQXVDOU4sWUFBdkMsRUFBcUR2d0IsUUFBckQsRUFBK0Q7QUFDM0QsTUFBSTJoQixHQUFHLEdBQUd5WSxhQUFhLENBQUM7QUFBRS80QixZQUFRLEVBQUU7QUFBWixHQUFELEVBQXNCLEVBQXRCLEVBQTBCO0FBQ2pEZzlCLFVBQVEsQ0FBQ25mLE1BRGMsRUFDTixJQURNLEVBQ0E7QUFDdkJsZixVQUZ1QixDQUF2QjtBQUdBLFNBQU87QUFDSDJoQixPQUFHLEVBQUVBLEdBREY7QUFFSGtNLE1BQUUsRUFBRTRFLGNBQWMsQ0FBQzlRLEdBQUQsRUFBTTRPLFlBQU4sQ0FGZjtBQUdIMU8sWUFBUSxFQUFFVSxtQkFBbUIsQ0FBQ1osR0FBRyxDQUFDQyxLQUFMLEVBQVl5YyxRQUFRLENBQUNoaEIsS0FBckIsQ0FIMUI7QUFJSEEsU0FBSyxFQUFFZ2hCLFFBQVEsQ0FBQ2hoQixLQUpiO0FBS0g2VCxXQUFPLEVBQUUsSUFMTjtBQU1IQyxTQUFLLEVBQUU7QUFOSixHQUFQO0FBUUg7O0FBRUQsU0FBUzByQixlQUFULENBQXlCQyxjQUF6QixFQUF5Q0MsZUFBekMsRUFBMEQ7QUFDdEQsTUFBSXo4QixJQUFJLEdBQUcsRUFBWDtBQUNBLE1BQUlpNkIsUUFBSjs7QUFDQSxPQUFLQSxRQUFMLElBQWlCdUMsY0FBakIsRUFBaUM7QUFDN0JFLGlCQUFhLENBQUN6QyxRQUFELEVBQVdqNkIsSUFBWCxFQUFpQnc4QixjQUFqQixFQUFpQ0MsZUFBakMsQ0FBYjtBQUNIOztBQUNELE9BQUt4QyxRQUFMLElBQWlCd0MsZUFBakIsRUFBa0M7QUFDOUJDLGlCQUFhLENBQUN6QyxRQUFELEVBQVdqNkIsSUFBWCxFQUFpQnc4QixjQUFqQixFQUFpQ0MsZUFBakMsQ0FBYjtBQUNIOztBQUNELFNBQU96OEIsSUFBUDtBQUNIOztBQUNELFNBQVMwOEIsYUFBVCxDQUF1QnpDLFFBQXZCLEVBQWlDajZCLElBQWpDLEVBQXVDdzhCLGNBQXZDLEVBQXVEQyxlQUF2RCxFQUF3RTtBQUNwRSxNQUFJejhCLElBQUksQ0FBQ2k2QixRQUFELENBQVIsRUFBb0I7QUFDaEIsV0FBT2o2QixJQUFJLENBQUNpNkIsUUFBRCxDQUFYO0FBQ0g7O0FBQ0QsTUFBSTBDLE9BQU8sR0FBR0MsWUFBWSxDQUFDM0MsUUFBRCxFQUFXajZCLElBQVgsRUFBaUJ3OEIsY0FBakIsRUFBaUNDLGVBQWpDLENBQTFCOztBQUNBLE1BQUlFLE9BQUosRUFBYTtBQUNUMzhCLFFBQUksQ0FBQ2k2QixRQUFELENBQUosR0FBaUIwQyxPQUFqQjtBQUNIOztBQUNELFNBQU9BLE9BQVA7QUFDSDs7QUFDRCxTQUFTQyxZQUFULENBQXNCM0MsUUFBdEIsRUFBZ0NqNkIsSUFBaEMsRUFBc0N3OEIsY0FBdEMsRUFBc0RDLGVBQXRELEVBQXVFO0FBQ25FLE1BQUlJLGFBQWEsR0FBR0wsY0FBYyxDQUFDdkMsUUFBRCxDQUFsQztBQUNBLE1BQUk2QyxjQUFjLEdBQUdMLGVBQWUsQ0FBQ3hDLFFBQUQsQ0FBcEM7O0FBQ0EsTUFBSThDLFNBQVMsR0FBRyxVQUFVdnpDLElBQVYsRUFBZ0I7QUFDNUIsV0FBUXF6QyxhQUFhLElBQUlBLGFBQWEsQ0FBQ3J6QyxJQUFELENBQWIsS0FBd0IsSUFBMUMsR0FBa0RxekMsYUFBYSxDQUFDcnpDLElBQUQsQ0FBL0QsR0FDRHN6QyxjQUFjLElBQUlBLGNBQWMsQ0FBQ3R6QyxJQUFELENBQWQsS0FBeUIsSUFBNUMsR0FBb0RzekMsY0FBYyxDQUFDdHpDLElBQUQsQ0FBbEUsR0FBMkUsSUFEaEY7QUFFSCxHQUhEOztBQUlBLE1BQUl5cEMsUUFBUSxHQUFHOEosU0FBUyxDQUFDLE9BQUQsQ0FBeEI7QUFDQSxNQUFJQyxTQUFTLEdBQUdELFNBQVMsQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQUksQ0FBQ0MsU0FBRCxJQUFjL0osUUFBbEIsRUFBNEI7QUFDeEIrSixhQUFTLEdBQ0xDLHNCQUFzQixDQUFDaEssUUFBRCxFQUFXd0osZUFBWCxDQUF0QixJQUNJUSxzQkFBc0IsQ0FBQ2hLLFFBQUQsRUFBV3VKLGNBQVgsQ0FGOUI7QUFHSDs7QUFDRCxNQUFJVSxRQUFRLEdBQUcsSUFBZjs7QUFDQSxNQUFJRixTQUFKLEVBQWU7QUFDWCxRQUFJQSxTQUFTLEtBQUsvQyxRQUFsQixFQUE0QjtBQUN4QixZQUFNLElBQUlOLEtBQUosQ0FBVSx1REFBVixDQUFOO0FBQ0g7O0FBQ0R1RCxZQUFRLEdBQUdSLGFBQWEsQ0FBQ00sU0FBRCxFQUFZaDlCLElBQVosRUFBa0J3OEIsY0FBbEIsRUFBa0NDLGVBQWxDLENBQXhCO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDeEosUUFBRCxJQUFhaUssUUFBakIsRUFBMkI7QUFDdkJqSyxZQUFRLEdBQUdpSyxRQUFRLENBQUN0RSxLQUFwQjtBQUNIOztBQUNELE1BQUksQ0FBQzNGLFFBQUwsRUFBZTtBQUNYLFdBQU8sSUFBUCxDQURXLENBQ0U7QUFDaEI7O0FBQ0QsU0FBTztBQUNIbHhDLFFBQUksRUFBRWs0QyxRQURIO0FBRUhyQixTQUFLLEVBQUUzRixRQUZKO0FBR0huM0IsWUFBUSxFQUFFbUMsUUFBUSxDQUFDLEVBQUQsRUFBTWkvQixRQUFRLEdBQUdBLFFBQVEsQ0FBQ3BoQyxRQUFaLEdBQXVCLEVBQXJDLEVBQTJDK2dDLGFBQWEsR0FBR0EsYUFBYSxDQUFDbnpCLE9BQWpCLEdBQTJCLEVBQW5GLENBSGY7QUFJSDRvQixhQUFTLEVBQUVyMEIsUUFBUSxDQUFDLEVBQUQsRUFBTWkvQixRQUFRLEdBQUdBLFFBQVEsQ0FBQzVLLFNBQVosR0FBd0IsRUFBdEMsRUFBNEN3SyxjQUFjLEdBQUdBLGNBQWMsQ0FBQ3B6QixPQUFsQixHQUE0QixFQUF0RjtBQUpoQixHQUFQO0FBTUg7O0FBQ0QsU0FBU3V6QixzQkFBVCxDQUFnQ0UsWUFBaEMsRUFBOENDLE9BQTlDLEVBQXVEO0FBQ25ELE1BQUlDLFVBQVUsR0FBRzUvQixNQUFNLENBQUM2L0IsY0FBUCxDQUFzQkgsWUFBWSxDQUFDaDNDLFNBQW5DLENBQWpCOztBQUNBLE9BQUssSUFBSTh6QyxRQUFULElBQXFCbUQsT0FBckIsRUFBOEI7QUFDMUIsUUFBSTErQixNQUFNLEdBQUcwK0IsT0FBTyxDQUFDbkQsUUFBRCxDQUFwQixDQUQwQixDQUUxQjs7QUFDQSxRQUFJdjdCLE1BQU0sQ0FBQ2s2QixLQUFQLElBQWdCbDZCLE1BQU0sQ0FBQ2s2QixLQUFQLENBQWF6eUMsU0FBYixLQUEyQmszQyxVQUEvQyxFQUEyRDtBQUN2RCxhQUFPcEQsUUFBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxFQUFQO0FBQ0g7O0FBRUQsU0FBU3NELGdCQUFULENBQTBCelEsTUFBMUIsRUFBa0M7QUFDOUIsU0FBTzVzQixPQUFPLENBQUM0c0IsTUFBRCxFQUFTMFEsZUFBVCxDQUFkO0FBQ0g7O0FBQ0QsSUFBSUMsY0FBYyxHQUFHO0FBQ2pCMTdDLE1BQUksRUFBRW1ZLE1BRFc7QUFFakIwK0IsT0FBSyxFQUFFO0FBRlUsQ0FBckI7O0FBSUEsU0FBUzRFLGVBQVQsQ0FBeUJ6K0MsS0FBekIsRUFBZ0M7QUFDNUIsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQzdCQSxTQUFLLEdBQUc7QUFBRTY1QyxXQUFLLEVBQUU3NUM7QUFBVCxLQUFSO0FBQ0g7O0FBQ0QsTUFBSTJxQixPQUFPLEdBQUcsRUFBZDtBQUNBLE1BQUlyZ0IsS0FBSyxHQUFHc1MsV0FBVyxDQUFDNWMsS0FBRCxFQUFRMCtDLGNBQVIsRUFBd0IsRUFBeEIsRUFBNEIvekIsT0FBNUIsQ0FBdkI7QUFDQSxTQUFPO0FBQ0hzekIsYUFBUyxFQUFFM3pDLEtBQUssQ0FBQ3RILElBRGQ7QUFFSDYyQyxTQUFLLEVBQUV2dkMsS0FBSyxDQUFDdXZDLEtBRlY7QUFHSGx2QixXQUFPLEVBQUVBO0FBSE4sR0FBUDtBQUtIOztBQUVELFNBQVNnMEIsY0FBVCxDQUF3QkMsYUFBeEIsRUFBdUNDLGNBQXZDLEVBQXVEO0FBQ25ELE1BQUlwQixjQUFjLEdBQUdlLGdCQUFnQixDQUFDSSxhQUFELENBQXJDO0FBQ0EsTUFBSWxCLGVBQWUsR0FBR2MsZ0JBQWdCLENBQUNLLGNBQWMsQ0FBQ3RMLFNBQWYsQ0FBeUIzSixLQUExQixDQUF0QztBQUNBLE1BQUlrVixRQUFRLEdBQUd0QixlQUFlLENBQUNDLGNBQUQsRUFBaUJDLGVBQWpCLENBQTlCO0FBQ0EsU0FBT3Y4QixPQUFPLENBQUMyOUIsUUFBRCxFQUFXLFVBQVVsQixPQUFWLEVBQW1CO0FBQ3hDLFdBQU9tQixhQUFhLENBQUNuQixPQUFELEVBQVVGLGVBQVYsRUFBMkJtQixjQUEzQixDQUFwQjtBQUNILEdBRmEsQ0FBZDtBQUdIOztBQUNELFNBQVNFLGFBQVQsQ0FBdUJuQixPQUF2QixFQUFnQ0YsZUFBaEMsRUFBaURtQixjQUFqRCxFQUFpRTtBQUM3RCxNQUFJRyxhQUFhLEdBQUdwQixPQUFPLENBQUNySyxTQUFSLENBQWtCeHpCLFFBQWxCLElBQ2hCNjlCLE9BQU8sQ0FBQzdnQyxRQUFSLENBQWlCZ0QsUUFERCxJQUVoQjgrQixjQUFjLENBQUNyTCxnQkFBZixDQUFnQ3p6QixRQUZoQixJQUdoQjgrQixjQUFjLENBQUN0TCxTQUFmLENBQXlCeHpCLFFBSDdCO0FBSUEsTUFBSUEsUUFBUSxHQUFHLElBQWY7QUFDQSxNQUFJeTVCLFlBQVksR0FBRyxFQUFuQjtBQUNBLE1BQUl5RixVQUFVLEdBQUcsRUFBakI7QUFDQSxNQUFJQyxtQkFBbUIsR0FBRyxFQUExQjs7QUFDQSxNQUFJRixhQUFKLEVBQW1CO0FBQ2ZqL0IsWUFBUSxHQUFHNUssY0FBYyxDQUFDNnBDLGFBQUQsQ0FBekI7O0FBQ0EsUUFBSWovQixRQUFKLEVBQWM7QUFBRTtBQUNaLFVBQUlvL0IsS0FBSyxHQUFHdm5DLDJCQUEyQixDQUFDbUksUUFBRCxFQUFXLENBQUNqSyxpQkFBaUIsQ0FBQ2twQyxhQUFELENBQTdCLENBQXZDO0FBQ0F4RixrQkFBWSxHQUFHMkYsS0FBSyxDQUFDL3BDLElBQXJCOztBQUNBLFVBQUkrcEMsS0FBSyxDQUFDcm5DLEtBQU4sS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDbkJtbkMsa0JBQVUsR0FBR3pGLFlBQWI7QUFDQTBGLDJCQUFtQixHQUFHeEIsZUFBZSxDQUFDbEUsWUFBRCxDQUFmLEdBQWdDa0UsZUFBZSxDQUFDbEUsWUFBRCxDQUFmLENBQThCN3VCLE9BQTlELEdBQXdFLEVBQTlGO0FBQ0g7QUFDSjtBQUNKOztBQUNELE1BQUl5MEIsZUFBZSxHQUFHLFVBQVV6MEIsT0FBVixFQUFtQjtBQUNyQyxRQUFJMDBCLGFBQWEsR0FBRzEwQixPQUFPLENBQUNpbkIsVUFBUixJQUFzQixFQUExQztBQUNBLFFBQUkwTixhQUFhLEdBQUcxQixPQUFPLENBQUM3Z0MsUUFBUixDQUFpQnVpQyxhQUFyQzs7QUFDQSxRQUFJQSxhQUFhLElBQUksSUFBakIsSUFBeUJELGFBQWEsQ0FBQ0MsYUFBRCxDQUFiLElBQWdDLElBQTdELEVBQW1FO0FBQy9ELGFBQU9ELGFBQWEsQ0FBQ0MsYUFBRCxDQUFwQjtBQUNIOztBQUNELFFBQUlELGFBQWEsQ0FBQ3pCLE9BQU8sQ0FBQzU2QyxJQUFULENBQWIsSUFBK0IsSUFBbkMsRUFBeUM7QUFDckMsYUFBT3E4QyxhQUFhLENBQUN6QixPQUFPLENBQUM1NkMsSUFBVCxDQUFwQjtBQUNIOztBQUNELFFBQUlxOEMsYUFBYSxDQUFDSixVQUFELENBQWIsSUFBNkIsSUFBakMsRUFBdUM7QUFDbkMsYUFBT0ksYUFBYSxDQUFDSixVQUFELENBQXBCO0FBQ0g7QUFDSixHQVpEOztBQWFBLFNBQU87QUFDSGo4QyxRQUFJLEVBQUU0NkMsT0FBTyxDQUFDNTZDLElBRFg7QUFFSDYyQyxTQUFLLEVBQUUrRCxPQUFPLENBQUMvRCxLQUZaO0FBR0g5NUIsWUFBUSxFQUFFQSxRQUhQO0FBSUh5NUIsZ0JBQVksRUFBRUEsWUFKWDtBQUtIeUYsY0FBVSxFQUFFQSxVQUxUO0FBTUh0MEIsV0FBTyxFQUFFekwsUUFBUSxDQUFDLEVBQUQsRUFBSzB2QixjQUFMLEVBQXFCZ1AsT0FBTyxDQUFDN2dDLFFBQTdCLEVBQXVDOGhDLGNBQWMsQ0FBQzlLLFdBQXRELEVBQW1FOEssY0FBYyxDQUFDL0ssY0FBbEYsRUFBa0crSyxjQUFjLENBQUN0TCxTQUFqSCxFQUE0SDJMLG1CQUE1SCxFQUFpSnRCLE9BQU8sQ0FBQ3JLLFNBQXpKLEVBQW9Lc0wsY0FBYyxDQUFDckwsZ0JBQW5MLENBTmQ7QUFPSCtMLHNCQUFrQixFQUFFSCxlQUFlLENBQUNQLGNBQWMsQ0FBQ3JMLGdCQUFoQixDQUFmLElBQ2hCNEwsZUFBZSxDQUFDUCxjQUFjLENBQUN0TCxTQUFoQixDQURDLElBQzZCO0FBQzdDcUssV0FBTyxDQUFDckssU0FBUixDQUFrQjNCLFVBVG5CO0FBVUg0TixxQkFBaUIsRUFBRUosZUFBZSxDQUFDUCxjQUFjLENBQUMvSyxjQUFoQixDQUFmLElBQ2ZzTCxlQUFlLENBQUNQLGNBQWMsQ0FBQzlLLFdBQWhCLENBREEsSUFFZjZKLE9BQU8sQ0FBQzdnQyxRQUFSLENBQWlCNjBCLFVBRkYsSUFHZndOLGVBQWUsQ0FBQ3hRLGNBQUQsQ0FIQSxJQUlmZ1AsT0FBTyxDQUFDNTZDLElBZFQsQ0FjYzs7QUFkZCxHQUFQO0FBZ0JIOztBQUVELElBQUl5OEMsT0FBTztBQUFHO0FBQWUsVUFBVXZkLE1BQVYsRUFBa0I7QUFDM0NuakIsV0FBUyxDQUFDMGdDLE9BQUQsRUFBVXZkLE1BQVYsQ0FBVDs7QUFDQSxXQUFTdWQsT0FBVCxDQUFpQmxqQyxPQUFqQixFQUEwQm1qQyxjQUExQixFQUEwQztBQUN0QyxRQUFJdGhCLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEtBQThCLElBQTFDOztBQUNBNmhCLFNBQUssQ0FBQ3VoQixhQUFOLEdBQXNCbGpCLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDd2hCLFlBQVAsRUFBcUJ4aEIsS0FBSyxDQUFDeWhCLGNBQTNCLENBQXRDO0FBQ0F6aEIsU0FBSyxDQUFDMGhCLFlBQU4sR0FBcUJyakIsZ0JBQWdCLENBQUMyQixLQUFLLENBQUMyaEIsV0FBUCxFQUFvQixJQUFwQixFQUEwQixDQUFDM2hCLEtBQUssQ0FBQ3VoQixhQUFQLENBQTFCLENBQXJDO0FBQ0F2aEIsU0FBSyxDQUFDNGhCLG1CQUFOLEdBQTRCdmpCLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDNmhCLGtCQUFQLEVBQTJCLElBQTNCLEVBQWlDLENBQUM3aEIsS0FBSyxDQUFDdWhCLGFBQVAsQ0FBakMsQ0FBNUM7QUFDQXZoQixTQUFLLENBQUM4aEIsWUFBTixHQUFxQnpqQixnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQytoQixXQUFQLEVBQW9CLElBQXBCLEVBQTBCLENBQUMvaEIsS0FBSyxDQUFDdWhCLGFBQVAsQ0FBMUIsQ0FBckM7QUFDQXZoQixTQUFLLENBQUNnaUIsV0FBTixHQUFvQjNqQixnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ2lpQixVQUFQLEVBQW1CLElBQW5CLEVBQXlCLENBQUNqaUIsS0FBSyxDQUFDdWhCLGFBQVAsQ0FBekIsQ0FBcEM7QUFDQXZoQixTQUFLLENBQUNraUIsV0FBTixHQUFvQjdqQixnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ21pQixVQUFQLEVBQW1CLElBQW5CLEVBQXlCLENBQUNuaUIsS0FBSyxDQUFDdWhCLGFBQVAsQ0FBekIsQ0FBcEM7QUFDQXZoQixTQUFLLENBQUN2N0IsRUFBTixHQUFXdUQsYUFBYSxDQUFDLEtBQUQsRUFBUTtBQUFFSixlQUFTLEVBQUUsZ0JBQWdCMDVDO0FBQTdCLEtBQVIsQ0FBeEI7QUFDQSxXQUFPdGhCLEtBQVA7QUFDSDs7QUFDRHFoQixTQUFPLENBQUNyNEMsU0FBUixDQUFrQnkrQixPQUFsQixHQUE0QixZQUFZO0FBQ3BDM0QsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7O0FBQ0EsU0FBS3E0QyxhQUFMLENBQW1CM2lCLFFBQW5CLEdBRm9DLENBRUw7OztBQUMvQjEwQixpQkFBYSxDQUFDLEtBQUt6RixFQUFOLENBQWI7QUFDSCxHQUpEOztBQUtBNDhDLFNBQU8sQ0FBQ3I0QyxTQUFSLENBQWtCcEMsTUFBbEIsR0FBMkIsVUFBVXNGLEtBQVYsRUFBaUI7QUFDeEMsU0FBS3ExQyxhQUFMLENBQW1CcjFDLEtBQUssQ0FBQ2syQyxNQUF6Qjs7QUFDQSxTQUFLVixZQUFMLENBQWtCeDFDLEtBQUssQ0FBQ3JHLEtBQXhCOztBQUNBLFNBQUsrN0MsbUJBQUwsQ0FBeUIxMUMsS0FBSyxDQUFDbTJDLFlBQS9COztBQUNBLFNBQUtQLFlBQUwsQ0FBa0I1MUMsS0FBSyxDQUFDbzJDLGNBQXhCOztBQUNBLFNBQUtOLFdBQUwsQ0FBaUI5MUMsS0FBSyxDQUFDcTJDLGFBQXZCOztBQUNBLFNBQUtMLFdBQUwsQ0FBaUJoMkMsS0FBSyxDQUFDczJDLGFBQXZCO0FBQ0gsR0FQRDs7QUFRQW5CLFNBQU8sQ0FBQ3I0QyxTQUFSLENBQWtCdzRDLFlBQWxCLEdBQWlDLFVBQVVZLE1BQVYsRUFBa0I7QUFDL0MsUUFBSTM5QyxFQUFFLEdBQUcsS0FBS0EsRUFBZDtBQUNBLFNBQUtnK0MsZ0JBQUwsR0FBd0IsRUFBeEI7QUFDQWo2QyxtQkFBZSxDQUFDL0QsRUFBRCxFQUFLLEtBQUtpK0MsYUFBTCxDQUFtQixNQUFuQixFQUEyQk4sTUFBTSxDQUFDai9DLElBQWxDLENBQUwsQ0FBZjtBQUNBcUYsbUJBQWUsQ0FBQy9ELEVBQUQsRUFBSyxLQUFLaStDLGFBQUwsQ0FBbUIsUUFBbkIsRUFBNkJOLE1BQU0sQ0FBQ2gvQyxNQUFwQyxDQUFMLENBQWY7QUFDQW9GLG1CQUFlLENBQUMvRCxFQUFELEVBQUssS0FBS2krQyxhQUFMLENBQW1CLE9BQW5CLEVBQTRCTixNQUFNLENBQUMvK0MsS0FBbkMsQ0FBTCxDQUFmO0FBQ0gsR0FORDs7QUFPQWcrQyxTQUFPLENBQUNyNEMsU0FBUixDQUFrQnk0QyxjQUFsQixHQUFtQyxZQUFZO0FBQzNDLFNBQUtoOUMsRUFBTCxDQUFROEQsU0FBUixHQUFvQixFQUFwQjtBQUNILEdBRkQ7O0FBR0E4NEMsU0FBTyxDQUFDcjRDLFNBQVIsQ0FBa0IwNUMsYUFBbEIsR0FBa0MsVUFBVTMwQyxRQUFWLEVBQW9CNDBDLFNBQXBCLEVBQStCO0FBQzdELFFBQUkzaUIsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSS9vQixFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWV3ckIsS0FBSyxHQUFHeHJCLEVBQUUsQ0FBQ3dyQixLQUExQjtBQUFBLFFBQWlDbGdDLFFBQVEsR0FBRzBVLEVBQUUsQ0FBQzFVLFFBQS9DOztBQUNBLFFBQUlrK0MsY0FBYyxHQUFHbCtDLFFBQVEsQ0FBQ2srQyxjQUE5QjtBQUNBLFFBQUltQyxTQUFTLEdBQUdyZ0QsUUFBUSxDQUFDcWdELFNBQXpCO0FBQ0EsUUFBSUMsU0FBUyxHQUFHNzZDLGFBQWEsQ0FBQyxLQUFELEVBQVE7QUFBRUosZUFBUyxFQUFFLFFBQVFtRztBQUFyQixLQUFSLENBQTdCO0FBQ0EsUUFBSSswQyxxQkFBcUIsR0FBR3JDLGNBQWMsQ0FBQzV2QyxRQUFmLENBQXdCdk4sYUFBeEIsSUFBeUMsRUFBckU7QUFDQSxRQUFJeS9DLDJCQUEyQixHQUFHdEMsY0FBYyxDQUFDdEwsU0FBZixDQUF5QjNCLFVBQXpCLElBQXVDLEVBQXpFO0FBQ0EsUUFBSXdQLGtCQUFrQixHQUFHdkMsY0FBYyxDQUFDNXZDLFFBQWYsQ0FBd0IyaUMsVUFBeEIsSUFBc0MsRUFBL0Q7O0FBQ0EsUUFBSW1QLFNBQUosRUFBZTtBQUNYQSxlQUFTLENBQUMzbUMsS0FBVixDQUFnQixHQUFoQixFQUFxQnhKLE9BQXJCLENBQTZCLFVBQVV5d0MsY0FBVixFQUEwQjU3QyxDQUExQixFQUE2QjtBQUN0RCxZQUFJNjdDLGFBQWEsR0FBRyxFQUFwQjtBQUNBLFlBQUlDLGFBQWEsR0FBRyxJQUFwQjtBQUNBLFlBQUlDLE9BQUo7QUFDQUgsc0JBQWMsQ0FBQ2puQyxLQUFmLENBQXFCLEdBQXJCLEVBQTBCeEosT0FBMUIsQ0FBa0MsVUFBVTIxQixVQUFWLEVBQXNCNThCLENBQXRCLEVBQXlCO0FBQ3ZELGNBQUltOUIsaUJBQUo7QUFDQSxjQUFJbVIsUUFBSjtBQUNBLGNBQUl3SixXQUFKO0FBQ0EsY0FBSUMsVUFBSixDQUp1RCxDQUl2Qzs7QUFDaEIsY0FBSTlQLFVBQUosQ0FMdUQsQ0FLdkM7O0FBQ2hCLGNBQUkrUCxlQUFKO0FBQ0EsY0FBSUMsYUFBSjtBQUNBLGNBQUlDLFFBQUo7QUFDQSxjQUFJQyxjQUFKOztBQUNBLGNBQUl2YixVQUFVLEtBQUssT0FBbkIsRUFBNEI7QUFDeEIrYSx5QkFBYSxDQUFDMTNDLElBQWQsQ0FBbUIvQyxhQUFhLENBQUMsaUJBQUQsQ0FBaEMsRUFEd0IsQ0FDOEI7O0FBQ3REMDZDLHlCQUFhLEdBQUcsS0FBaEI7QUFDSCxXQUhELE1BSUs7QUFDRCxnQkFBS3phLGlCQUFpQixHQUFHb2EscUJBQXFCLENBQUMzYSxVQUFELENBQTlDLEVBQTZEO0FBQ3pEa2IseUJBQVcsR0FBRyxVQUFVdm5ELEVBQVYsRUFBYztBQUN4QixvQkFBSTRzQyxpQkFBaUIsQ0FBQzdzQyxLQUF0QixFQUE2QjtBQUN6QjZzQyxtQ0FBaUIsQ0FBQzdzQyxLQUFsQixDQUF3QnFOLElBQXhCLENBQTZCdTZDLFFBQTdCLEVBQXVDM25ELEVBQXZDO0FBQ0g7QUFDSixlQUpEOztBQUtBLGVBQUN3bkQsVUFBVSxHQUFHN2dCLEtBQUssQ0FBQ2dHLHdCQUFOLENBQStCQyxpQkFBL0IsQ0FBZCxNQUNLNGEsVUFBVSxHQUFHN2dCLEtBQUssQ0FBQzhGLFlBQU4sQ0FBbUJKLFVBQW5CLENBRGxCLE1BRUtxTCxVQUFVLEdBQUc5SyxpQkFBaUIsQ0FBQ3ZtQyxJQUZwQztBQUdILGFBVEQsTUFVSyxJQUFLMDNDLFFBQVEsR0FBRytJLFNBQVMsQ0FBQ3phLFVBQUQsQ0FBekIsRUFBd0M7QUFDekNuSSxtQkFBSyxDQUFDeWlCLGdCQUFOLENBQXVCajNDLElBQXZCLENBQTRCMjhCLFVBQTVCOztBQUNBa2IseUJBQVcsR0FBRyxZQUFZO0FBQ3RCOWdELHdCQUFRLENBQUNvaEQsVUFBVCxDQUFvQnhiLFVBQXBCO0FBQ0gsZUFGRDs7QUFHQSxlQUFDcUwsVUFBVSxHQUFHcUcsUUFBUSxDQUFDc0gsa0JBQXZCLE1BQ0ttQyxVQUFVLEdBQUc3Z0IsS0FBSyxDQUFDOEYsWUFBTixDQUFtQkosVUFBbkIsQ0FEbEIsTUFFS3FMLFVBQVUsR0FBR3FHLFFBQVEsQ0FBQ3VILGlCQUYzQjtBQUdILGFBUkksTUFTQSxJQUFJNytDLFFBQVEsQ0FBQzRsQyxVQUFELENBQVosRUFBMEI7QUFBRTtBQUM3QmtiLHlCQUFXLEdBQUcsWUFBWTtBQUN0QjlnRCx3QkFBUSxDQUFDNGxDLFVBQUQsQ0FBUjtBQUNILGVBRkQ7O0FBR0EsZUFBQ3FMLFVBQVUsR0FBR3VQLDJCQUEyQixDQUFDNWEsVUFBRCxDQUF6QyxNQUNLbWIsVUFBVSxHQUFHN2dCLEtBQUssQ0FBQzhGLFlBQU4sQ0FBbUJKLFVBQW5CLENBRGxCLE1BRUtxTCxVQUFVLEdBQUd3UCxrQkFBa0IsQ0FBQzdhLFVBQUQsQ0FGcEMsRUFKMkIsQ0FPM0I7QUFDSDs7QUFDRCxnQkFBSWtiLFdBQUosRUFBaUI7QUFDYkcsMkJBQWEsR0FBRyxDQUNaLFFBQVFyYixVQUFSLEdBQXFCLFNBRFQsRUFFWjFGLEtBQUssQ0FBQ00sUUFBTixDQUFlLFFBQWYsQ0FGWSxDQUFoQjs7QUFJQSxrQkFBSXlRLFVBQUosRUFBZ0I7QUFDWitQLCtCQUFlLEdBQUdub0IsVUFBVSxDQUFDb1ksVUFBRCxDQUE1QjtBQUNBa1EsOEJBQWMsR0FBRyxFQUFqQjtBQUNILGVBSEQsTUFJSyxJQUFJSixVQUFKLEVBQWdCO0FBQ2pCQywrQkFBZSxHQUFHLGtCQUFrQkQsVUFBbEIsR0FBK0IsV0FBakQ7QUFDQUksOEJBQWMsR0FBRyxrQkFBa0J2YixVQUFsQixHQUErQixHQUFoRDtBQUNIOztBQUNEc2Isc0JBQVEsR0FBR2g3QyxhQUFhLEVBQUM7QUFDekIsZ0RBQWtDKzZDLGFBQWEsQ0FBQzkyQixJQUFkLENBQW1CLEdBQW5CLENBQWxDLEdBQTRELEdBQTVELEdBQ0lnM0IsY0FESixHQUVJLEdBRkosR0FFVUgsZUFGVixHQUU0QixXQUhKLENBQXhCO0FBSUFFLHNCQUFRLENBQUMvK0MsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMyK0MsV0FBbkM7QUFDQUgsMkJBQWEsQ0FBQzEzQyxJQUFkLENBQW1CaTRDLFFBQW5CO0FBQ0g7QUFDSjtBQUNKLFNBaEVEOztBQWlFQSxZQUFJUCxhQUFhLENBQUM1NUMsTUFBZCxHQUF1QixDQUEzQixFQUE4QjtBQUMxQjg1QyxpQkFBTyxHQUFHdm1ELFFBQVEsQ0FBQ21MLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBLGNBQUk0N0Msb0JBQW9CLEdBQUduaEIsS0FBSyxDQUFDTSxRQUFOLENBQWUsYUFBZixDQUEzQjs7QUFDQSxjQUFJb2dCLGFBQWEsSUFBSVMsb0JBQXJCLEVBQTJDO0FBQ3ZDUixtQkFBTyxDQUFDcjNDLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCNDNDLG9CQUF0QjtBQUNIOztBQUNEcDdDLHlCQUFlLENBQUM0NkMsT0FBRCxFQUFVRixhQUFWLENBQWY7QUFDQUwsbUJBQVMsQ0FBQ3Q1QyxXQUFWLENBQXNCNjVDLE9BQXRCO0FBQ0gsU0FSRCxNQVNLO0FBQ0Q1NkMseUJBQWUsQ0FBQ3E2QyxTQUFELEVBQVlLLGFBQVosQ0FBZixDQURDLENBQzBDO0FBQzlDO0FBQ0osT0FqRkQ7QUFrRkg7O0FBQ0QsV0FBT0wsU0FBUDtBQUNILEdBOUZEOztBQStGQXhCLFNBQU8sQ0FBQ3I0QyxTQUFSLENBQWtCKzRDLFdBQWxCLEdBQWdDLFVBQVVPLGNBQVYsRUFBMEI7QUFDdEQsU0FBS3VCLG1CQUFMLENBQXlCLE9BQXpCLEVBQWtDdkIsY0FBbEM7QUFDSCxHQUZEOztBQUdBakIsU0FBTyxDQUFDcjRDLFNBQVIsQ0FBa0JpNUMsVUFBbEIsR0FBK0IsVUFBVU0sYUFBVixFQUF5QjtBQUNwRCxTQUFLc0IsbUJBQUwsQ0FBeUIsTUFBekIsRUFBaUN0QixhQUFqQztBQUNILEdBRkQ7O0FBR0FsQixTQUFPLENBQUNyNEMsU0FBUixDQUFrQm01QyxVQUFsQixHQUErQixVQUFVSyxhQUFWLEVBQXlCO0FBQ3BELFNBQUtxQixtQkFBTCxDQUF5QixNQUF6QixFQUFpQ3JCLGFBQWpDO0FBQ0gsR0FGRDs7QUFHQW5CLFNBQU8sQ0FBQ3I0QyxTQUFSLENBQWtCMjRDLFdBQWxCLEdBQWdDLFVBQVV4L0MsSUFBVixFQUFnQjtBQUM1QytJLGdCQUFZLENBQUMsS0FBS3pHLEVBQU4sRUFBVSxJQUFWLENBQVosQ0FBNEIrTixPQUE1QixDQUFvQyxVQUFVc3hDLE9BQVYsRUFBbUI7QUFDbkRBLGFBQU8sQ0FBQ0MsU0FBUixHQUFvQjVoRCxJQUFwQjtBQUNILEtBRkQ7QUFHSCxHQUpEOztBQUtBay9DLFNBQU8sQ0FBQ3I0QyxTQUFSLENBQWtCNjRDLGtCQUFsQixHQUF1QyxVQUFVMVosVUFBVixFQUFzQjtBQUN6RCxRQUFJdmdDLFNBQVMsR0FBRyxLQUFLNjZCLEtBQUwsQ0FBV00sUUFBWCxDQUFvQixjQUFwQixDQUFoQjtBQUNBNzNCLGdCQUFZLENBQUMsS0FBS3pHLEVBQU4sRUFBVSxRQUFWLENBQVosQ0FBZ0MrTixPQUFoQyxDQUF3QyxVQUFVaXhDLFFBQVYsRUFBb0I7QUFDeEQsVUFBSXRiLFVBQVUsSUFBSXNiLFFBQVEsQ0FBQzEzQyxTQUFULENBQW1CbEIsUUFBbkIsQ0FBNEIsUUFBUXM5QixVQUFSLEdBQXFCLFNBQWpELENBQWxCLEVBQStFO0FBQzNFc2IsZ0JBQVEsQ0FBQzEzQyxTQUFULENBQW1CQyxHQUFuQixDQUF1QnBFLFNBQXZCO0FBQ0gsT0FGRCxNQUdLO0FBQ0Q2N0MsZ0JBQVEsQ0FBQzEzQyxTQUFULENBQW1CckUsTUFBbkIsQ0FBMEJFLFNBQTFCO0FBQ0g7QUFDSixLQVBEO0FBUUgsR0FWRDs7QUFXQXk1QyxTQUFPLENBQUNyNEMsU0FBUixDQUFrQjY2QyxtQkFBbEIsR0FBd0MsVUFBVTFiLFVBQVYsRUFBc0JyOEIsSUFBdEIsRUFBNEI7QUFDaEVaLGdCQUFZLENBQUMsS0FBS3pHLEVBQU4sRUFBVSxTQUFTMGpDLFVBQVQsR0FBc0IsU0FBaEMsQ0FBWixDQUF1RDMxQixPQUF2RCxDQUErRCxVQUFVaXhDLFFBQVYsRUFBb0I7QUFDL0VBLGNBQVEsQ0FBQ08sUUFBVCxHQUFvQixDQUFDbDRDLElBQXJCO0FBQ0gsS0FGRDtBQUdILEdBSkQ7O0FBS0EsU0FBT3UxQyxPQUFQO0FBQ0gsQ0FsSzRCLENBa0szQnhZLFNBbEsyQixDQUE3Qjs7QUFvS0EsSUFBSW9iLGlCQUFpQjtBQUFHO0FBQWUsVUFBVW5nQixNQUFWLEVBQWtCO0FBQ3JEbmpCLFdBQVMsQ0FBQ3NqQyxpQkFBRCxFQUFvQm5nQixNQUFwQixDQUFUOztBQUNBLFdBQVNtZ0IsaUJBQVQsQ0FBMkI5bEMsT0FBM0IsRUFBb0MxWixFQUFwQyxFQUF3QztBQUNwQyxRQUFJdTdCLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEtBQThCLElBQTFDOztBQUNBNmhCLFNBQUssQ0FBQ2trQixlQUFOLEdBQXdCN2xCLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDbWtCLGNBQVAsQ0FBeEM7QUFDQW5rQixTQUFLLENBQUNva0IseUJBQU4sR0FBa0NsOEIsT0FBTyxDQUFDazhCLHlCQUFELENBQXpDO0FBQ0Fwa0IsU0FBSyxDQUFDdjdCLEVBQU4sR0FBV0EsRUFBWDtBQUNBK0Usb0JBQWdCLENBQUMvRSxFQUFELEVBQUt1N0IsS0FBSyxDQUFDcWtCLFNBQU4sR0FBa0JyOEMsYUFBYSxDQUFDLEtBQUQsRUFBUTtBQUFFSixlQUFTLEVBQUU7QUFBYixLQUFSLENBQXBDLENBQWhCO0FBQ0EsUUFBSXJGLFFBQVEsR0FBR3k5QixLQUFLLENBQUN6OUIsUUFBckI7O0FBQ0EsU0FBSyxJQUFJc2IsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRzFVLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QmduQixzQkFBbEQsRUFBMEUvdEIsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBbEYsRUFBMEZ1VSxFQUFFLEVBQTVGLEVBQWdHO0FBQzVGLFVBQUl5bUMsbUJBQW1CLEdBQUdydEMsRUFBRSxDQUFDNEcsRUFBRCxDQUE1QjtBQUNBeW1DLHlCQUFtQixDQUFDdGtCLEtBQUssQ0FBQ3FrQixTQUFQLEVBQWtCOWhELFFBQWxCLENBQW5CO0FBQ0g7O0FBQ0R5OUIsU0FBSyxDQUFDdWtCLGtCQUFOLENBQXlCLElBQXpCOztBQUNBdmtCLFNBQUssQ0FBQ3drQixZQUFOLEdBQXFCdDhCLE9BQU8sQ0FBQ3M4QixZQUFELENBQTVCO0FBQ0F4a0IsU0FBSyxDQUFDL0Isa0JBQU4sR0FBMkIvVixPQUFPLENBQUMsVUFBVXRtQixLQUFWLEVBQWlCO0FBQ2hELGFBQU9xOEIsa0JBQWtCLENBQUNyOEIsS0FBRCxFQUFRbytCLEtBQUssQ0FBQ3o5QixRQUFkLENBQXpCO0FBQ0gsS0FGaUMsQ0FBbEM7QUFHQSxXQUFPeTlCLEtBQVA7QUFDSDs7QUFDRGlrQixtQkFBaUIsQ0FBQ2o3QyxTQUFsQixDQUE0QnkrQixPQUE1QixHQUFzQyxZQUFZO0FBQzlDLFFBQUksS0FBS3ZrQyxNQUFULEVBQWlCO0FBQ2IsV0FBS0EsTUFBTCxDQUFZdWtDLE9BQVo7QUFDSDs7QUFDRCxRQUFJLEtBQUtnZCxNQUFULEVBQWlCO0FBQ2IsV0FBS0EsTUFBTCxDQUFZaGQsT0FBWjtBQUNIOztBQUNELFFBQUksS0FBS3ZULElBQVQsRUFBZTtBQUNYLFdBQUtBLElBQUwsQ0FBVXVULE9BQVY7QUFDSDs7QUFDRHY5QixpQkFBYSxDQUFDLEtBQUttNkMsU0FBTixDQUFiO0FBQ0EsU0FBS0Usa0JBQUwsQ0FBd0IsS0FBeEI7O0FBQ0F6Z0IsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7QUFDSCxHQWJEOztBQWNBKzZDLG1CQUFpQixDQUFDajdDLFNBQWxCLENBQTRCdTdDLGtCQUE1QixHQUFpRCxVQUFVejRDLElBQVYsRUFBZ0I7QUFDN0QsUUFBSUMsU0FBUyxHQUFHLEtBQUt0SCxFQUFMLENBQVFzSCxTQUF4QjtBQUNBLFFBQUkyNEMsWUFBWSxHQUFHLFFBQVEsS0FBSy8rQixHQUFMLENBQVMsS0FBVCxDQUEzQjtBQUNBLFFBQUlnL0IsY0FBYyxHQUFHLEtBQUtsaUIsS0FBTCxDQUFXTSxRQUFYLENBQW9CLFFBQXBCLENBQXJCOztBQUNBLFFBQUlqM0IsSUFBSixFQUFVO0FBQ05DLGVBQVMsQ0FBQ0MsR0FBVixDQUFjLElBQWQ7QUFDQUQsZUFBUyxDQUFDQyxHQUFWLENBQWMwNEMsWUFBZDtBQUNBMzRDLGVBQVMsQ0FBQ0MsR0FBVixDQUFjMjRDLGNBQWQ7QUFDSCxLQUpELE1BS0s7QUFDRDU0QyxlQUFTLENBQUNyRSxNQUFWLENBQWlCLElBQWpCO0FBQ0FxRSxlQUFTLENBQUNyRSxNQUFWLENBQWlCZzlDLFlBQWpCO0FBQ0EzNEMsZUFBUyxDQUFDckUsTUFBVixDQUFpQmk5QyxjQUFqQjtBQUNIO0FBQ0osR0FkRDs7QUFlQVYsbUJBQWlCLENBQUNqN0MsU0FBbEIsQ0FBNEJwQyxNQUE1QixHQUFxQyxVQUFVc0YsS0FBVixFQUFpQjtBQUNsRCxTQUFLMDRDLFlBQUw7QUFDQSxRQUFJLytDLEtBQUssR0FBRyxLQUFLMitDLFlBQUwsQ0FBa0J0NEMsS0FBSyxDQUFDa3FCLFdBQXhCLEVBQXFDbHFCLEtBQUssQ0FBQzJ0QyxRQUFOLENBQWV0dEIsT0FBcEQsQ0FBWjs7QUFDQSxTQUFLMjNCLGVBQUwsQ0FBcUJoNEMsS0FBSyxDQUFDMnRDLFFBQTNCLEVBQXFDM3RDLEtBQUssQ0FBQ2txQixXQUEzQyxFQUF3RGxxQixLQUFLLENBQUMrdEMsV0FBOUQsRUFBMkUvdEMsS0FBSyxDQUFDMjRDLG9CQUFqRixFQUF1R2gvQyxLQUF2Rzs7QUFDQSxTQUFLaS9DLFVBQUwsQ0FBZ0I1NEMsS0FBaEIsRUFBdUJyRyxLQUF2QjtBQUNBLFNBQUtrL0MsVUFBTDtBQUNBLFNBQUtDLFVBQUw7QUFDSCxHQVBEOztBQVFBZixtQkFBaUIsQ0FBQ2o3QyxTQUFsQixDQUE0Qm03QyxjQUE1QixHQUE2QyxVQUFVdEssUUFBVixFQUFvQnpqQixXQUFwQixFQUFpQzZqQixXQUFqQyxFQUE4QzRLLG9CQUE5QyxFQUFvRWgvQyxLQUFwRSxFQUEyRTtBQUNwSCxRQUFJby9DLFlBQVksR0FBRyxLQUFLdC9CLEdBQUwsQ0FBUyxRQUFULENBQW5CO0FBQ0EsUUFBSXUvQixZQUFZLEdBQUcsS0FBS3YvQixHQUFMLENBQVMsUUFBVCxDQUFuQjtBQUNBLFFBQUl3L0IsR0FBRyxHQUFHLEtBQUs1aUQsUUFBTCxDQUFjdWdDLE1BQWQsRUFBVjtBQUNBLFFBQUlzaUIsU0FBUyxHQUFHUCxvQkFBb0IsQ0FBQ2xnQixLQUFyQixDQUEyQndnQixHQUEzQixDQUFoQjtBQUNBLFFBQUlFLFFBQVEsR0FBR1Isb0JBQW9CLENBQUM5SyxTQUFyQixDQUErQjNqQixXQUEvQixFQUE0QzZqQixXQUE1QyxDQUFmO0FBQ0EsUUFBSXFMLFFBQVEsR0FBR1Qsb0JBQW9CLENBQUN4SyxTQUFyQixDQUErQmprQixXQUEvQixFQUE0QzZqQixXQUE1QyxDQUFmO0FBQ0EsUUFBSXNMLFlBQVksR0FBRztBQUNmMS9DLFdBQUssRUFBRUEsS0FEUTtBQUVmdzhDLGtCQUFZLEVBQUV4SSxRQUFRLENBQUNqMUMsSUFGUjtBQUdmMDlDLG9CQUFjLEVBQUU4QyxTQUFTLENBQUN6SyxPQUFWLElBQXFCLENBQUNuekIsbUJBQW1CLENBQUM0TyxXQUFXLENBQUN5TSxZQUFiLEVBQTJCc2lCLEdBQTNCLENBSDFDO0FBSWY1QyxtQkFBYSxFQUFFOEMsUUFBUSxDQUFDMUssT0FKVDtBQUtmNkgsbUJBQWEsRUFBRThDLFFBQVEsQ0FBQzNLO0FBTFQsS0FBbkI7O0FBT0EsUUFBSXNLLFlBQUosRUFBa0I7QUFDZCxVQUFJLENBQUMsS0FBSy9oRCxNQUFWLEVBQWtCO0FBQ2QsYUFBS0EsTUFBTCxHQUFjLElBQUltK0MsT0FBSixDQUFZLEtBQUtsakMsT0FBakIsRUFBMEIsbUJBQTFCLENBQWQ7QUFDQTNVLHdCQUFnQixDQUFDLEtBQUsvRSxFQUFOLEVBQVUsS0FBS3ZCLE1BQUwsQ0FBWXVCLEVBQXRCLENBQWhCO0FBQ0g7O0FBQ0QsV0FBS3ZCLE1BQUwsQ0FBWWdtQyxZQUFaLENBQXlCcG9CLFFBQVEsQ0FBQztBQUFFc2hDLGNBQU0sRUFBRTZDO0FBQVYsT0FBRCxFQUEyQk0sWUFBM0IsQ0FBakM7QUFDSCxLQU5ELE1BT0ssSUFBSSxLQUFLcmlELE1BQVQsRUFBaUI7QUFDbEIsV0FBS0EsTUFBTCxDQUFZdWtDLE9BQVo7QUFDQSxXQUFLdmtDLE1BQUwsR0FBYyxJQUFkO0FBQ0g7O0FBQ0QsUUFBSWdpRCxZQUFKLEVBQWtCO0FBQ2QsVUFBSSxDQUFDLEtBQUtULE1BQVYsRUFBa0I7QUFDZCxhQUFLQSxNQUFMLEdBQWMsSUFBSXBELE9BQUosQ0FBWSxLQUFLbGpDLE9BQWpCLEVBQTBCLG1CQUExQixDQUFkO0FBQ0EzVix1QkFBZSxDQUFDLEtBQUsvRCxFQUFOLEVBQVUsS0FBS2dnRCxNQUFMLENBQVloZ0QsRUFBdEIsQ0FBZjtBQUNIOztBQUNELFdBQUtnZ0QsTUFBTCxDQUFZdmIsWUFBWixDQUF5QnBvQixRQUFRLENBQUM7QUFBRXNoQyxjQUFNLEVBQUU4QztBQUFWLE9BQUQsRUFBMkJLLFlBQTNCLENBQWpDO0FBQ0gsS0FORCxNQU9LLElBQUksS0FBS2QsTUFBVCxFQUFpQjtBQUNsQixXQUFLQSxNQUFMLENBQVloZCxPQUFaO0FBQ0EsV0FBS2dkLE1BQUwsR0FBYyxJQUFkO0FBQ0g7QUFDSixHQXBDRDs7QUFxQ0FSLG1CQUFpQixDQUFDajdDLFNBQWxCLENBQTRCODdDLFVBQTVCLEdBQXlDLFVBQVU1NEMsS0FBVixFQUFpQnJHLEtBQWpCLEVBQXdCO0FBQzdELFFBQUlxdUIsSUFBSSxHQUFHLEtBQUtBLElBQWhCO0FBQ0EsUUFBSTJsQixRQUFRLEdBQUczdEMsS0FBSyxDQUFDMnRDLFFBQXJCO0FBQUEsUUFBK0JnTCxvQkFBb0IsR0FBRzM0QyxLQUFLLENBQUMyNEMsb0JBQTVEOztBQUNBLFFBQUksQ0FBQzN3QixJQUFELElBQVNBLElBQUksQ0FBQzJsQixRQUFMLEtBQWtCQSxRQUEvQixFQUF5QztBQUNyQyxVQUFJM2xCLElBQUosRUFBVTtBQUNOQSxZQUFJLENBQUN1VCxPQUFMO0FBQ0g7O0FBQ0R2VCxVQUFJLEdBQUcsS0FBS0EsSUFBTCxHQUFZLElBQUkybEIsUUFBUSxDQUFDLE9BQUQsQ0FBWixDQUFzQjtBQUNyQ3QzQyxnQkFBUSxFQUFFLEtBQUtBLFFBRHNCO0FBRXJDMnhCLFlBQUksRUFBRSxJQUYrQjtBQUdyQ2pVLGVBQU8sRUFBRSxLQUFLQSxPQUh1QjtBQUlyQ3dpQixhQUFLLEVBQUUsS0FBS0EsS0FKeUI7QUFLckNsVyxlQUFPLEVBQUVzdEIsUUFBUSxDQUFDdHRCO0FBTG1CLE9BQXRCLEVBTWhCc3RCLFFBTmdCLEVBTU5nTCxvQkFOTSxFQU1nQixLQUFLUixTQU5yQixDQUFuQjtBQU9ILEtBWEQsTUFZSztBQUNEbndCLFVBQUksQ0FBQ3N4QixTQUFMLENBQWV0eEIsSUFBSSxDQUFDdXhCLFdBQUwsRUFBZjtBQUNIOztBQUNEdnhCLFFBQUksQ0FBQ3J1QixLQUFMLEdBQWFBLEtBQWIsQ0FsQjZELENBa0J6Qzs7QUFDcEIsUUFBSTYvQyxTQUFTLEdBQUc7QUFDWnR2QixpQkFBVyxFQUFFbHFCLEtBQUssQ0FBQ2txQixXQURQO0FBRVp5QixtQkFBYSxFQUFFLEtBQUtvRyxrQkFBTCxDQUF3QjRiLFFBQVEsQ0FBQ3R0QixPQUFULENBQWlCc0wsYUFBekMsQ0FGSDtBQUdablUsZ0JBQVUsRUFBRXhYLEtBQUssQ0FBQ3dYLFVBSE47QUFJWm9QLGtCQUFZLEVBQUU1bUIsS0FBSyxDQUFDNG1CLFlBSlI7QUFLWjZFLG1CQUFhLEVBQUV6ckIsS0FBSyxDQUFDeXJCLGFBTFQ7QUFNWkcsb0JBQWMsRUFBRTVyQixLQUFLLENBQUM0ckIsY0FOVjtBQU9aTCxlQUFTLEVBQUV2ckIsS0FBSyxDQUFDdXJCLFNBUEw7QUFRWk0saUJBQVcsRUFBRTdyQixLQUFLLENBQUM2ckI7QUFSUCxLQUFoQjtBQVVBLFFBQUk0dEIsWUFBWSxHQUFHLEtBQUt2Qix5QkFBTCxDQUErQixLQUFLN2hELFFBQUwsQ0FBY29pQixZQUFkLENBQTJCQyxLQUEzQixDQUFpQzZtQixxQkFBaEUsQ0FBbkI7O0FBQ0EsU0FBSyxJQUFJNXRCLEVBQUUsR0FBRyxDQUFULEVBQVkrbkMsY0FBYyxHQUFHRCxZQUFsQyxFQUFnRDluQyxFQUFFLEdBQUcrbkMsY0FBYyxDQUFDdDhDLE1BQXBFLEVBQTRFdVUsRUFBRSxFQUE5RSxFQUFrRjtBQUM5RSxVQUFJZ29DLFdBQVcsR0FBR0QsY0FBYyxDQUFDL25DLEVBQUQsQ0FBaEM7O0FBQ0FpRCxjQUFRLENBQUM0a0MsU0FBRCxFQUFZRyxXQUFXLENBQUNDLFNBQVosQ0FBc0JKLFNBQXRCLEVBQWlDN0wsUUFBakMsRUFBMkMzdEMsS0FBM0MsRUFBa0Rnb0IsSUFBbEQsQ0FBWixDQUFSO0FBQ0g7O0FBQ0RBLFFBQUksQ0FBQ2dWLFlBQUwsQ0FBa0J3YyxTQUFsQjtBQUNILEdBbkNELENBOUZxRCxDQWtJckQ7QUFDQTs7O0FBQ0F6QixtQkFBaUIsQ0FBQ2o3QyxTQUFsQixDQUE0Qis3QyxVQUE1QixHQUF5QyxVQUFVZ0IsUUFBVixFQUFvQjtBQUN6RCxRQUFJQSxRQUFRLEtBQUssS0FBSyxDQUF0QixFQUF5QjtBQUFFQSxjQUFRLEdBQUcsS0FBWDtBQUFtQjs7QUFDOUMsUUFBSTd4QixJQUFJLEdBQUcsS0FBS0EsSUFBaEI7O0FBQ0EsUUFBSTZ4QixRQUFKLEVBQWM7QUFDVjd4QixVQUFJLENBQUNzeEIsU0FBTCxDQUFldHhCLElBQUksQ0FBQ3V4QixXQUFMLEVBQWY7QUFDSDs7QUFDRCxRQUFJTSxRQUFRLElBQUksS0FBS0MsWUFBTCxJQUFxQixJQUFyQyxFQUEyQztBQUN2QyxXQUFLQyxpQkFBTDtBQUNIOztBQUNEL3hCLFFBQUksQ0FBQzZ3QixVQUFMLENBQWdCZ0IsUUFBaEIsRUFBMEIsS0FBS0csVUFBL0IsRUFBMkMsS0FBS0YsWUFBaEQ7QUFDQTl4QixRQUFJLENBQUNpeUIsa0JBQUwsR0FWeUQsQ0FVOUI7O0FBQzNCanlCLFFBQUksQ0FBQ2t5QixTQUFMLENBQWVMLFFBQWY7QUFDSCxHQVpEOztBQWFBOUIsbUJBQWlCLENBQUNqN0MsU0FBbEIsQ0FBNEJpOUMsaUJBQTVCLEdBQWdELFlBQVk7QUFDeEQsUUFBSTFqRCxRQUFRLEdBQUcsS0FBS0EsUUFBcEIsQ0FEd0QsQ0FDMUI7O0FBQzlCLFFBQUk4akQsV0FBVyxHQUFHOWpELFFBQVEsQ0FBQ29qQixHQUFULENBQWEsUUFBYixDQUFsQjtBQUNBLFFBQUkyZ0Msa0JBQWtCLEdBQUcvakQsUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSxlQUFiLENBQXpCO0FBQ0EsU0FBS3FnQyxZQUFMLEdBQW9CSyxXQUFXLEtBQUssTUFBaEIsSUFBMEJDLGtCQUFrQixLQUFLLE1BQXJFOztBQUNBLFFBQUksT0FBT0Esa0JBQVAsS0FBOEIsUUFBbEMsRUFBNEM7QUFBRTtBQUMxQyxXQUFLSixVQUFMLEdBQWtCSSxrQkFBbEI7QUFDSCxLQUZELE1BR0ssSUFBSSxPQUFPQSxrQkFBUCxLQUE4QixVQUFsQyxFQUE4QztBQUFFO0FBQ2pELFdBQUtKLFVBQUwsR0FBa0JJLGtCQUFrQixFQUFwQztBQUNILEtBRkksTUFHQSxJQUFJLE9BQU9ELFdBQVAsS0FBdUIsUUFBM0IsRUFBcUM7QUFBRTtBQUN4QyxXQUFLSCxVQUFMLEdBQWtCRyxXQUFXLEdBQUcsS0FBS0UsbUJBQUwsRUFBaEM7QUFDSCxLQUZJLE1BR0EsSUFBSSxPQUFPRixXQUFQLEtBQXVCLFVBQTNCLEVBQXVDO0FBQUU7QUFDMUMsV0FBS0gsVUFBTCxHQUFrQkcsV0FBVyxLQUFLLEtBQUtFLG1CQUFMLEVBQWxDO0FBQ0gsS0FGSSxNQUdBLElBQUlGLFdBQVcsS0FBSyxRQUFwQixFQUE4QjtBQUFFO0FBQ2pDLFVBQUlHLFFBQVEsR0FBRyxLQUFLL2hELEVBQUwsQ0FBUXNGLFVBQXZCO0FBQ0EsV0FBS204QyxVQUFMLEdBQWtCTSxRQUFRLENBQUNsNEMscUJBQVQsR0FBaUNxQyxNQUFqQyxHQUEwQyxLQUFLNDFDLG1CQUFMLEVBQTVEO0FBQ0gsS0FISSxNQUlBO0FBQ0QsV0FBS0wsVUFBTCxHQUFrQmw1QyxJQUFJLENBQUN3QixLQUFMLENBQVcsS0FBSzYxQyxTQUFMLENBQWUvMUMscUJBQWYsR0FBdUN0SyxLQUF2QyxHQUN6QmdKLElBQUksQ0FBQ0MsR0FBTCxDQUFTMUssUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSxhQUFiLENBQVQsRUFBc0MsRUFBdEMsQ0FEYyxDQUFsQjtBQUVIO0FBQ0osR0F6QkQ7O0FBMEJBcytCLG1CQUFpQixDQUFDajdDLFNBQWxCLENBQTRCdTlDLG1CQUE1QixHQUFrRCxZQUFZO0FBQzFELFFBQUk1MUMsTUFBTSxHQUFHLENBQWI7O0FBQ0EsUUFBSSxLQUFLek4sTUFBVCxFQUFpQjtBQUNieU4sWUFBTSxJQUFJRCx1QkFBdUIsQ0FBQyxLQUFLeE4sTUFBTCxDQUFZdUIsRUFBYixDQUFqQztBQUNIOztBQUNELFFBQUksS0FBS2dnRCxNQUFULEVBQWlCO0FBQ2I5ekMsWUFBTSxJQUFJRCx1QkFBdUIsQ0FBQyxLQUFLK3pDLE1BQUwsQ0FBWWhnRCxFQUFiLENBQWpDO0FBQ0g7O0FBQ0QsV0FBT2tNLE1BQVA7QUFDSCxHQVRELENBM0txRCxDQXFMckQ7QUFDQTs7O0FBQ0FzekMsbUJBQWlCLENBQUNqN0MsU0FBbEIsQ0FBNEI0N0MsWUFBNUIsR0FBMkMsWUFBWTtBQUNuRHY4QyxjQUFVLENBQUMsS0FBSzVELEVBQU4sRUFBVTtBQUNoQmtNLFlBQU0sRUFBRSxLQUFLbE0sRUFBTCxDQUFRNkoscUJBQVIsR0FBZ0NxQyxNQUR4QjtBQUVoQnpDLGNBQVEsRUFBRTtBQUZNLEtBQVYsQ0FBVjtBQUlILEdBTEQ7O0FBTUErMUMsbUJBQWlCLENBQUNqN0MsU0FBbEIsQ0FBNEJnOEMsVUFBNUIsR0FBeUMsWUFBWTtBQUNqRDM4QyxjQUFVLENBQUMsS0FBSzVELEVBQU4sRUFBVTtBQUNoQmtNLFlBQU0sRUFBRSxFQURRO0FBRWhCekMsY0FBUSxFQUFFO0FBRk0sS0FBVixDQUFWO0FBSUgsR0FMRDs7QUFNQSxTQUFPKzFDLGlCQUFQO0FBQ0gsQ0FwTXNDLENBb01yQ3BiLFNBcE1xQyxDQUF2QyxDLENBcU1BO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBUzJiLFlBQVQsQ0FBc0JwdUIsV0FBdEIsRUFBbUNxd0IsV0FBbkMsRUFBZ0Q7QUFDNUMsTUFBSTdtQyxLQUFKLENBRDRDLENBRTVDOztBQUNBLE1BQUksaUJBQWlCM2dCLElBQWpCLENBQXNCbTNCLFdBQVcsQ0FBQytqQixnQkFBbEMsQ0FBSixFQUF5RDtBQUNyRHY2QixTQUFLLEdBQUd3VyxXQUFXLENBQUN5TSxZQUFwQjtBQUNILEdBRkQsTUFHSztBQUFFO0FBQ0hqakIsU0FBSyxHQUFHd1csV0FBVyxDQUFDSyxXQUFwQjtBQUNIOztBQUNELFNBQU8sS0FBS3hXLE9BQUwsQ0FBYTZKLFdBQWIsQ0FBeUJsSyxLQUFLLENBQUM5WixLQUEvQixFQUFzQzhaLEtBQUssQ0FBQzdaLEdBQTVDLEVBQWlEaW9CLGVBQWUsQ0FBQ3k0QixXQUFXLENBQUNDLFdBQVosSUFBMkJDLGtCQUFrQixDQUFDdndCLFdBQUQsQ0FBOUMsRUFBNkRxd0IsV0FBVyxDQUFDL1YsbUJBQXpFLENBQWhFLEVBQStKO0FBQUUrRyxrQkFBYyxFQUFFcmhCLFdBQVcsQ0FBQ3FrQjtBQUE5QixHQUEvSixDQUFQO0FBQ0gsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVNrTSxrQkFBVCxDQUE0QnZ3QixXQUE1QixFQUF5QztBQUNyQyxNQUFJK2pCLGdCQUFnQixHQUFHL2pCLFdBQVcsQ0FBQytqQixnQkFBbkM7O0FBQ0EsTUFBSUEsZ0JBQWdCLEtBQUssTUFBekIsRUFBaUM7QUFDN0IsV0FBTztBQUFFM2tDLFVBQUksRUFBRTtBQUFSLEtBQVA7QUFDSCxHQUZELE1BR0ssSUFBSTJrQyxnQkFBZ0IsS0FBSyxPQUF6QixFQUFrQztBQUNuQyxXQUFPO0FBQUUza0MsVUFBSSxFQUFFLFNBQVI7QUFBbUJnQyxXQUFLLEVBQUU7QUFBMUIsS0FBUCxDQURtQyxDQUNRO0FBQzlDLEdBRkksTUFHQTtBQUNELFFBQUl2RCxJQUFJLEdBQUdJLGFBQWEsQ0FBQytoQixXQUFXLENBQUN5TSxZQUFaLENBQXlCLzhCLEtBQTFCLEVBQWlDc3dCLFdBQVcsQ0FBQ3lNLFlBQVosQ0FBeUI5OEIsR0FBMUQsQ0FBeEI7O0FBQ0EsUUFBSWtPLElBQUksS0FBSyxJQUFULElBQWlCQSxJQUFJLEdBQUcsQ0FBNUIsRUFBK0I7QUFDM0I7QUFDQSxhQUFPO0FBQUV1QixZQUFJLEVBQUUsU0FBUjtBQUFtQmdDLGFBQUssRUFBRSxPQUExQjtBQUFtQ0MsV0FBRyxFQUFFO0FBQXhDLE9BQVA7QUFDSCxLQUhELE1BSUs7QUFDRDtBQUNBLGFBQU87QUFBRWpDLFlBQUksRUFBRSxTQUFSO0FBQW1CZ0MsYUFBSyxFQUFFLE1BQTFCO0FBQWtDQyxXQUFHLEVBQUU7QUFBdkMsT0FBUDtBQUNIO0FBQ0o7QUFDSixDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBUzJzQyx5QkFBVCxDQUFtQ3dDLFVBQW5DLEVBQStDO0FBQzNDLFNBQU9BLFVBQVUsQ0FBQ3gxQyxHQUFYLENBQWUsVUFBVTBrQyxRQUFWLEVBQW9CO0FBQ3RDLFdBQU8sSUFBSUEsUUFBSixFQUFQO0FBQ0gsR0FGTSxDQUFQO0FBR0g7O0FBRUQsSUFBSStRLFdBQVc7QUFBRztBQUFlLFlBQVk7QUFDekMsV0FBU0EsV0FBVCxDQUFxQnhRLFFBQXJCLEVBQStCO0FBQzNCLFNBQUt0VSxTQUFMLEdBQWlCc1UsUUFBUSxDQUFDdFUsU0FBMUI7QUFDSDs7QUFDRDhrQixhQUFXLENBQUM3OUMsU0FBWixDQUFzQnkrQixPQUF0QixHQUFnQyxZQUFZLENBQzNDLENBREQ7O0FBRUEsU0FBT29mLFdBQVA7QUFDSCxDQVBnQyxFQUFqQzs7QUFRQSxTQUFTQyx3QkFBVCxDQUFrQy9rQixTQUFsQyxFQUE2Q25nQyxLQUE3QyxFQUFvRDtBQUNoRCxTQUFPO0FBQ0htZ0MsYUFBUyxFQUFFQSxTQURSO0FBRUh0OUIsTUFBRSxFQUFFN0MsS0FBSyxDQUFDNkMsRUFGUDtBQUdIc2lELGtCQUFjLEVBQUVubEQsS0FBSyxDQUFDbWxELGNBQU4sSUFBd0IsSUFBeEIsR0FBK0JubEQsS0FBSyxDQUFDbWxELGNBQXJDLEdBQXNEO0FBSG5FLEdBQVA7QUFLSDs7QUFDRCxTQUFTQywwQkFBVCxDQUFvQzNRLFFBQXBDLEVBQThDO0FBQzFDLE1BQUlwL0IsRUFBSjs7QUFDQSxTQUFPQSxFQUFFLEdBQUcsRUFBTCxFQUNIQSxFQUFFLENBQUNvL0IsUUFBUSxDQUFDdFUsU0FBVCxDQUFtQnhGLEdBQXBCLENBQUYsR0FBNkI4WixRQUQxQixFQUVIcC9CLEVBRko7QUFHSCxDLENBQ0Q7OztBQUNBLElBQUlnd0Msd0JBQXdCLEdBQUcsRUFBL0I7QUFFQTs7OztBQUdBLElBQUlDLGFBQWE7QUFBRztBQUFlLFVBQVVwakIsTUFBVixFQUFrQjtBQUNqRG5qQixXQUFTLENBQUN1bUMsYUFBRCxFQUFnQnBqQixNQUFoQixDQUFUOztBQUNBLFdBQVNvakIsYUFBVCxDQUF1QjdRLFFBQXZCLEVBQWlDO0FBQzdCLFFBQUlyVyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JtdEMsUUFBbEIsS0FBK0IsSUFBM0M7O0FBQ0FyVyxTQUFLLENBQUNtbkIsY0FBTixHQUF1QixVQUFVcnJELEVBQVYsRUFBYzh1QyxLQUFkLEVBQXFCO0FBQ3hDLFVBQUk3SSxTQUFTLEdBQUcvQixLQUFLLENBQUMrQixTQUF0QjtBQUNBLFVBQUl4TixHQUFHLEdBQUdPLFFBQVEsQ0FBQzhWLEtBQUQsQ0FBbEI7O0FBQ0EsVUFBSXJXLEdBQUcsSUFBSTtBQUNQd04sZUFBUyxDQUFDeUksZ0JBQVYsQ0FBMkIxdUMsRUFBRSxDQUFDK1YsTUFBOUIsQ0FESixFQUMyQztBQUN2QztBQUNBO0FBQ0EsWUFBSXUxQyxlQUFlLEdBQUduOEMsY0FBYyxDQUFDblAsRUFBRSxDQUFDK1YsTUFBSixFQUFZLGFBQVosQ0FBcEM7QUFDQSxZQUFJMU4sR0FBRyxHQUFHaWpELGVBQWUsR0FBR0EsZUFBZSxDQUFDQyxhQUFoQixDQUE4QixTQUE5QixFQUF5Q0MsSUFBNUMsR0FBbUQsRUFBNUU7QUFDQXZsQixpQkFBUyxDQUFDdE4sZUFBVixDQUEwQixZQUExQixFQUF3QyxDQUNwQztBQUNJaHdCLFlBQUUsRUFBRW1tQyxLQURSO0FBRUl6a0MsZUFBSyxFQUFFLElBQUlzcEIsUUFBSixDQUFhc1MsU0FBUyxDQUFDeC9CLFFBQXZCLEVBQWlDZ3lCLEdBQUcsQ0FBQ0csVUFBSixDQUFleFEsR0FBaEQsRUFBcURxUSxHQUFHLENBQUNHLFVBQUosQ0FBZXRRLFFBQXBFLENBRlg7QUFHSW1qQyxpQkFBTyxFQUFFenJELEVBSGI7QUFJSW80QixjQUFJLEVBQUU2TixTQUFTLENBQUM3TjtBQUpwQixTQURvQyxDQUF4Qzs7QUFRQSxZQUFJL3ZCLEdBQUcsSUFBSSxDQUFDckksRUFBRSxDQUFDMHJELGdCQUFmLEVBQWlDO0FBQzdCNTRDLGdCQUFNLENBQUMxUyxRQUFQLENBQWdCb3JELElBQWhCLEdBQXVCbmpELEdBQXZCO0FBQ0g7QUFDSjtBQUNKLEtBckJEOztBQXNCQSxRQUFJNDlCLFNBQVMsR0FBR3NVLFFBQVEsQ0FBQ3RVLFNBQXpCO0FBQ0EvQixTQUFLLENBQUN5SCxPQUFOLEdBQWdCajJCLGdCQUFnQixDQUFDdXdCLFNBQVMsQ0FBQ3Q5QixFQUFYLEVBQWUsT0FBZixFQUF3QnM5QixTQUFTLENBQUM4SSxhQUFWLEdBQTBCLEdBQTFCLEdBQWdDOUksU0FBUyxDQUFDK0ksYUFBbEUsRUFBaUY5SyxLQUFLLENBQUNtbkIsY0FBdkYsQ0FBaEM7QUFDQSxXQUFPbm5CLEtBQVA7QUFDSDs7QUFDRCxTQUFPa25CLGFBQVA7QUFDSCxDQS9Ca0MsQ0ErQmpDTCxXQS9CaUMsQ0FBbkM7QUFpQ0E7Ozs7OztBQUlBLElBQUlZLGFBQWE7QUFBRztBQUFlLFVBQVUzakIsTUFBVixFQUFrQjtBQUNqRG5qQixXQUFTLENBQUM4bUMsYUFBRCxFQUFnQjNqQixNQUFoQixDQUFUOztBQUNBLFdBQVMyakIsYUFBVCxDQUF1QnBSLFFBQXZCLEVBQWlDO0FBQzdCLFFBQUlyVyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JtdEMsUUFBbEIsS0FBK0IsSUFBM0MsQ0FENkIsQ0FFN0I7OztBQUNBclcsU0FBSyxDQUFDMG5CLG1CQUFOLEdBQTRCLFVBQVVqakQsRUFBVixFQUFjO0FBQ3RDLFVBQUlBLEVBQUUsS0FBS3U3QixLQUFLLENBQUMybkIsWUFBakIsRUFBK0I7QUFDM0IzbkIsYUFBSyxDQUFDNG5CLGNBQU4sQ0FBcUIsSUFBckIsRUFBMkI1bkIsS0FBSyxDQUFDMm5CLFlBQWpDO0FBQ0g7QUFDSixLQUpEOztBQUtBM25CLFNBQUssQ0FBQzZuQixjQUFOLEdBQXVCLFVBQVUvckQsRUFBVixFQUFjOHVDLEtBQWQsRUFBcUI7QUFDeEMsVUFBSTlWLFFBQVEsQ0FBQzhWLEtBQUQsQ0FBWixFQUFxQjtBQUFFO0FBQ25CQSxhQUFLLENBQUM3K0IsU0FBTixDQUFnQkMsR0FBaEIsQ0FBb0IsdUJBQXBCO0FBQ0FnMEIsYUFBSyxDQUFDMm5CLFlBQU4sR0FBcUIvYyxLQUFyQjs7QUFDQTVLLGFBQUssQ0FBQzhuQixZQUFOLENBQW1CLGlCQUFuQixFQUFzQ2hzRCxFQUF0QyxFQUEwQzh1QyxLQUExQztBQUNIO0FBQ0osS0FORDs7QUFPQTVLLFNBQUssQ0FBQzRuQixjQUFOLEdBQXVCLFVBQVU5ckQsRUFBVixFQUFjOHVDLEtBQWQsRUFBcUI7QUFDeEMsVUFBSTVLLEtBQUssQ0FBQzJuQixZQUFWLEVBQXdCO0FBQ3BCL2MsYUFBSyxDQUFDNytCLFNBQU4sQ0FBZ0JyRSxNQUFoQixDQUF1Qix1QkFBdkI7QUFDQXM0QixhQUFLLENBQUMybkIsWUFBTixHQUFxQixJQUFyQjs7QUFDQTNuQixhQUFLLENBQUM4bkIsWUFBTixDQUFtQixpQkFBbkIsRUFBc0Noc0QsRUFBdEMsRUFBMEM4dUMsS0FBMUM7QUFDSDtBQUNKLEtBTkQ7O0FBT0EsUUFBSTdJLFNBQVMsR0FBR3NVLFFBQVEsQ0FBQ3RVLFNBQXpCO0FBQ0EvQixTQUFLLENBQUMrbkIsb0JBQU4sR0FBNkJoMkMsdUJBQXVCLENBQUNnd0IsU0FBUyxDQUFDdDlCLEVBQVgsRUFBZXM5QixTQUFTLENBQUM4SSxhQUFWLEdBQTBCLEdBQTFCLEdBQWdDOUksU0FBUyxDQUFDK0ksYUFBekQsRUFBd0U5SyxLQUFLLENBQUM2bkIsY0FBOUUsRUFBOEY3bkIsS0FBSyxDQUFDNG5CLGNBQXBHLENBQXBEO0FBQ0E3bEIsYUFBUyxDQUFDeC9CLFFBQVYsQ0FBbUJnRixFQUFuQixDQUFzQixlQUF0QixFQUF1Q3k0QixLQUFLLENBQUMwbkIsbUJBQTdDO0FBQ0EsV0FBTzFuQixLQUFQO0FBQ0g7O0FBQ0R5bkIsZUFBYSxDQUFDeitDLFNBQWQsQ0FBd0J5K0IsT0FBeEIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLc2dCLG9CQUFMO0FBQ0EsU0FBS2htQixTQUFMLENBQWV4L0IsUUFBZixDQUF3QjRoQyxHQUF4QixDQUE0QixlQUE1QixFQUE2QyxLQUFLdWpCLG1CQUFsRDtBQUNILEdBSEQ7O0FBSUFELGVBQWEsQ0FBQ3orQyxTQUFkLENBQXdCOCtDLFlBQXhCLEdBQXVDLFVBQVVFLFlBQVYsRUFBd0Jsc0QsRUFBeEIsRUFBNEI4dUMsS0FBNUIsRUFBbUM7QUFDdEUsUUFBSTdJLFNBQVMsR0FBRyxLQUFLQSxTQUFyQjtBQUNBLFFBQUl4TixHQUFHLEdBQUdPLFFBQVEsQ0FBQzhWLEtBQUQsQ0FBbEI7O0FBQ0EsUUFBSSxDQUFDOXVDLEVBQUQsSUFBT2ltQyxTQUFTLENBQUN5SSxnQkFBVixDQUEyQjF1QyxFQUFFLENBQUMrVixNQUE5QixDQUFYLEVBQWtEO0FBQzlDa3dCLGVBQVMsQ0FBQ3ROLGVBQVYsQ0FBMEJ1ekIsWUFBMUIsRUFBd0MsQ0FDcEM7QUFDSXZqRCxVQUFFLEVBQUVtbUMsS0FEUjtBQUVJemtDLGFBQUssRUFBRSxJQUFJc3BCLFFBQUosQ0FBYSxLQUFLc1MsU0FBTCxDQUFleC9CLFFBQTVCLEVBQXNDZ3lCLEdBQUcsQ0FBQ0csVUFBSixDQUFleFEsR0FBckQsRUFBMERxUSxHQUFHLENBQUNHLFVBQUosQ0FBZXRRLFFBQXpFLENBRlg7QUFHSW1qQyxlQUFPLEVBQUV6ckQsRUFIYjtBQUlJbzRCLFlBQUksRUFBRTZOLFNBQVMsQ0FBQzdOO0FBSnBCLE9BRG9DLENBQXhDO0FBUUg7QUFDSixHQWJEOztBQWNBLFNBQU91ekIsYUFBUDtBQUNILENBaERrQyxDQWdEakNaLFdBaERpQyxDQUFuQzs7QUFrREEsSUFBSW9CLGFBQWE7QUFBRztBQUFlLFVBQVVua0IsTUFBVixFQUFrQjtBQUNqRG5qQixXQUFTLENBQUNzbkMsYUFBRCxFQUFnQm5rQixNQUFoQixDQUFUOztBQUNBLFdBQVNta0IsYUFBVCxHQUF5QjtBQUNyQixXQUFPbmtCLE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNudEIsS0FBUCxDQUFhLElBQWIsRUFBbUJtSCxTQUFuQixDQUFuQixJQUFvRCxJQUEzRDtBQUNIOztBQUNELFNBQU9tcUMsYUFBUDtBQUNILENBTmtDLENBTWpDcmdCLEtBTmlDLENBQW5DOztBQU9BcWdCLGFBQWEsQ0FBQ2ovQyxTQUFkLENBQXdCMDVCLE9BQXhCLEdBQWtDO0FBQzlCd2xCLFFBQU0sRUFBRSxhQURzQjtBQUU5QkMsY0FBWSxFQUFFLGtCQUZnQjtBQUc5QkMsZUFBYSxFQUFFLG1CQUhlO0FBSTlCQyxhQUFXLEVBQUUsaUJBSmlCO0FBSzlCQyxRQUFNLEVBQUUsNkJBTHNCO0FBTTlCQyxjQUFZLEVBQUUsa0JBTmdCO0FBTzlCQyxlQUFhLEVBQUUsa0JBUGU7QUFROUJDLGdCQUFjLEVBQUUsbUJBUmM7QUFTOUI7QUFDQUMsV0FBUyxFQUFFLGtCQVZtQjtBQVc5QkMsUUFBTSxFQUFFLG1CQVhzQjtBQVk5QjtBQUNBQyxVQUFRLEVBQUU7QUFib0IsQ0FBbEM7QUFlQVgsYUFBYSxDQUFDai9DLFNBQWQsQ0FBd0J3L0IsYUFBeEIsR0FBd0MsU0FBeEM7QUFDQXlmLGFBQWEsQ0FBQ2ovQyxTQUFkLENBQXdCby9CLFdBQXhCLEdBQXNDO0FBQ2xDeWdCLE9BQUssRUFBRSxXQUQyQjtBQUVsQ3ZXLE1BQUksRUFBRSxzQkFGNEI7QUFHbENDLE1BQUksRUFBRSx1QkFINEI7QUFJbENDLFVBQVEsRUFBRSx1QkFKd0I7QUFLbENDLFVBQVEsRUFBRTtBQUx3QixDQUF0QztBQU9Bd1YsYUFBYSxDQUFDai9DLFNBQWQsQ0FBd0IrK0Isa0JBQXhCLEdBQTZDLGFBQTdDO0FBQ0FrZ0IsYUFBYSxDQUFDai9DLFNBQWQsQ0FBd0IyL0IsOEJBQXhCLEdBQXlELE1BQXpEO0FBQ0FzZixhQUFhLENBQUNqL0MsU0FBZCxDQUF3QnMvQixrQkFBeEIsR0FBNkMsVUFBN0M7O0FBRUEsSUFBSTlsQyxRQUFRO0FBQUc7QUFBZSxZQUFZO0FBQ3RDLFdBQVNBLFFBQVQsQ0FBa0JpQyxFQUFsQixFQUFzQjB3QyxTQUF0QixFQUFpQztBQUM3QixRQUFJblYsS0FBSyxHQUFHLElBQVo7O0FBQ0EsU0FBSzhULGVBQUwsR0FBdUI1ckIsT0FBTyxDQUFDNHJCLGVBQUQsQ0FBOUI7QUFDQSxTQUFLVSxXQUFMLEdBQW1CdHNCLE9BQU8sQ0FBQ3NzQixXQUFELENBQTFCO0FBQ0EsU0FBS3NVLFlBQUwsR0FBb0I1Z0MsT0FBTyxDQUFDNGdDLFlBQUQsQ0FBM0I7QUFDQSxTQUFLQyxVQUFMLEdBQWtCN2dDLE9BQU8sQ0FBQzZnQyxVQUFELENBQXpCO0FBQ0EsU0FBS0Msc0JBQUwsR0FBOEI5Z0MsT0FBTyxDQUFDLEtBQUsrZ0MsdUJBQU4sQ0FBckM7QUFDQSxTQUFLQyxvQkFBTCxHQUE0QmhoQyxPQUFPLENBQUMsS0FBS2loQyxxQkFBTixDQUFuQztBQUNBLFNBQUtDLG9CQUFMLEdBQTRCaGhDLGFBQWEsQ0FBQ2doQyxvQkFBRCxFQUF1Qi9sQyxZQUF2QixDQUF6QztBQUNBLFNBQUtnbUMsaUJBQUwsR0FBeUJuaEMsT0FBTyxDQUFDbWhDLGlCQUFELENBQWhDO0FBQ0EsU0FBS0MsaUJBQUwsR0FBeUIsRUFBekI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQixLQUFsQixDQVo2QixDQWE3Qjs7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEtBQXJCLENBZDZCLENBY0Q7O0FBQzVCLFNBQUtDLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFuQixDQWhCNkIsQ0FnQkg7O0FBQzFCLFNBQUtDLG1CQUFMLEdBQTJCLENBQTNCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIzaEMsT0FBTyxDQUFDMmhDLG9CQUFELENBQW5DO0FBQ0EsU0FBSzFmLG1CQUFMLEdBQTJCLEVBQTNCO0FBQ0EsU0FBSzJmLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLEtBQXRCO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixLQUF2QjtBQUNBLFNBQUt2bEQsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsU0FBS2c4QyxjQUFMLEdBQXNCLElBQUl2TCxjQUFKLENBQW1CQyxTQUFTLElBQUksRUFBaEMsQ0FBdEI7QUFDQSxTQUFLeHdCLFlBQUwsR0FBb0IsSUFBSTBuQixZQUFKLEVBQXBCLENBekI2QixDQTBCN0I7O0FBQ0EsU0FBS2lFLGVBQUwsQ0FBcUIsS0FBS21RLGNBQUwsQ0FBb0I1dkMsUUFBcEIsQ0FBNkJuTyxPQUE3QixJQUF3QyxFQUE3RDtBQUNBLFNBQUt1bkQsYUFBTCxDQUFtQixLQUFLeEosY0FBTCxDQUFvQjV2QyxRQUF2QztBQUNBLFNBQUs0akIsZUFBTCxDQUFxQixPQUFyQixFQTdCNkIsQ0E2QkU7O0FBQy9CLFNBQUt5MUIsT0FBTDtBQUNBLFNBQUtuZSxvQkFBTCxHQUE0QixLQUFLcG5CLFlBQUwsQ0FBa0JDLEtBQWxCLENBQXdCbW5CLG9CQUF4QixDQUN2QjM2QixHQUR1QixDQUNuQixVQUFVKzRDLHdCQUFWLEVBQW9DO0FBQ3pDLGFBQU8sSUFBSUEsd0JBQUosQ0FBNkJucUIsS0FBN0IsQ0FBUDtBQUNILEtBSDJCLENBQTVCO0FBSUg7O0FBQ0R4OUIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnNuQyxlQUFuQixHQUFxQyxVQUFVeUMsWUFBVixFQUF3QjtBQUN6RCxRQUFJcVgsVUFBVSxHQUFHdFgsZ0JBQWdCLENBQUNDLFlBQUQsQ0FBakM7O0FBQ0EsU0FBSyxJQUFJbDFCLEVBQUUsR0FBRyxDQUFULEVBQVl3c0MsWUFBWSxHQUFHRCxVQUFoQyxFQUE0Q3ZzQyxFQUFFLEdBQUd3c0MsWUFBWSxDQUFDL2dELE1BQTlELEVBQXNFdVUsRUFBRSxFQUF4RSxFQUE0RTtBQUN4RSxVQUFJeXNDLFNBQVMsR0FBR0QsWUFBWSxDQUFDeHNDLEVBQUQsQ0FBNUI7QUFDQSxXQUFLOEcsWUFBTCxDQUFrQjNZLEdBQWxCLENBQXNCcytDLFNBQXRCO0FBQ0g7QUFDSixHQU5EOztBQU9BaHFDLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0Izc0IsUUFBUSxDQUFDd0csU0FBL0IsRUFBMEMsTUFBMUMsRUFBa0Q7QUFDOUM7QUFDQW9tQixPQUFHLEVBQUUsWUFBWTtBQUNiLGFBQU8sS0FBSzJTLFNBQUwsR0FBaUIsS0FBS0EsU0FBTCxDQUFlN04sSUFBaEMsR0FBdUMsSUFBOUM7QUFDSCxLQUo2QztBQUs5QzVFLGNBQVUsRUFBRSxJQUxrQztBQU05Q0MsZ0JBQVksRUFBRTtBQU5nQyxHQUFsRCxFQTVDc0MsQ0FvRHRDO0FBQ0E7O0FBQ0Evc0IsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnBDLE1BQW5CLEdBQTRCLFlBQVk7QUFDcEMsUUFBSSxDQUFDLEtBQUttN0IsU0FBVixFQUFxQjtBQUNqQixXQUFLd29CLG9CQUFMLEdBQTRCNW1DLHFCQUFxQixFQUFqRDtBQUNBLFdBQUs2bUMsWUFBTDtBQUNBLFdBQUtDLGFBQUw7QUFDSCxLQUpELE1BS0s7QUFDRCxXQUFLQyxlQUFMLENBQXFCLElBQXJCO0FBQ0g7QUFDSixHQVREOztBQVVBbG9ELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJ5K0IsT0FBbkIsR0FBNkIsWUFBWTtBQUNyQyxRQUFJLEtBQUsxRixTQUFULEVBQW9CO0FBQ2hCLFdBQUs0b0IsY0FBTDtBQUNBLFdBQUs1b0IsU0FBTCxDQUFlMEYsT0FBZixHQUZnQixDQUVVOztBQUMxQixXQUFLMUYsU0FBTCxHQUFpQixJQUFqQixDQUhnQixDQUdPOztBQUN2QixXQUFLLElBQUlsa0IsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLODBCLG9CQUEzQixFQUFpRGx1QixFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUF6RCxFQUFpRXVVLEVBQUUsRUFBbkUsRUFBdUU7QUFDbkUsWUFBSTBaLFdBQVcsR0FBR3RnQixFQUFFLENBQUM0RyxFQUFELENBQXBCO0FBQ0EwWixtQkFBVyxDQUFDa1EsT0FBWjtBQUNIOztBQUNELFdBQUtoVCxlQUFMLENBQXFCLFlBQXJCO0FBQ0g7QUFDSixHQVhELENBaEVzQyxDQTRFdEM7QUFDQTs7O0FBQ0FqeUIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQndoRCxZQUFuQixHQUFrQyxZQUFZO0FBQzFDLFFBQUl4cUIsS0FBSyxHQUFHLElBQVosQ0FEMEMsQ0FFMUM7OztBQUNBLFNBQUs0cUIscUJBQUwsR0FBNkJwNUMsZ0JBQWdCLENBQUMsS0FBSy9NLEVBQU4sRUFBVSxPQUFWLEVBQW1CLGNBQW5CLEVBQW1DLFVBQVUzSSxFQUFWLEVBQWMrdUQsUUFBZCxFQUF3QjtBQUNwRyxVQUFJN29CLFdBQVcsR0FBRzZvQixRQUFRLENBQUNDLFlBQVQsQ0FBc0IsV0FBdEIsQ0FBbEI7QUFDQTlvQixpQkFBVyxHQUFHQSxXQUFXLEdBQUc5NkIsSUFBSSxDQUFDc2EsS0FBTCxDQUFXd2dCLFdBQVgsQ0FBSCxHQUE2QixFQUF0RDtBQUNBLFVBQUkvaEIsT0FBTyxHQUFHK2YsS0FBSyxDQUFDL2YsT0FBcEI7QUFDQSxVQUFJNDlCLFVBQVUsR0FBRzU5QixPQUFPLENBQUNzRyxZQUFSLENBQXFCeWIsV0FBVyxDQUFDcjdCLElBQWpDLENBQWpCO0FBQ0EsVUFBSW0yQyxRQUFRLEdBQUc5YSxXQUFXLENBQUNwOUIsSUFBM0IsQ0FMb0csQ0FNcEc7O0FBQ0EsVUFBSW1tRCxZQUFZLEdBQUcvcUIsS0FBSyxDQUFDZ3JCLE9BQU4sQ0FBYyxZQUFZL3RDLHFCQUFxQixDQUFDNi9CLFFBQUQsQ0FBakMsR0FBOEMsT0FBNUQsQ0FBbkI7O0FBQ0EsVUFBSSxPQUFPaU8sWUFBUCxLQUF3QixVQUE1QixFQUF3QztBQUNwQ0Esb0JBQVksQ0FBQzlxQyxPQUFPLENBQUNxUyxNQUFSLENBQWV1ckIsVUFBZixDQUFELEVBQTZCL2hELEVBQTdCLENBQVo7QUFDSCxPQUZELE1BR0s7QUFDRCxZQUFJLE9BQU9pdkQsWUFBUCxLQUF3QixRQUE1QixFQUFzQztBQUNsQ2pPLGtCQUFRLEdBQUdpTyxZQUFYO0FBQ0g7O0FBQ0QvcUIsYUFBSyxDQUFDaXJCLE1BQU4sQ0FBYXBOLFVBQWIsRUFBeUJmLFFBQXpCO0FBQ0g7QUFDSixLQWpCNEMsQ0FBN0M7O0FBa0JBLFFBQUksS0FBS24zQixHQUFMLENBQVMsb0JBQVQsQ0FBSixFQUFvQztBQUNoQy9XLFlBQU0sQ0FBQ2xLLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLEtBQUt3bUQsaUJBQUwsR0FBeUJsdEMsUUFBUSxFQUFDO0FBQ3BFLFdBQUttdEMsWUFBTCxDQUFrQmplLElBQWxCLENBQXVCLElBQXZCLENBRG1FLEVBQ3JDLEtBQUt2bkIsR0FBTCxDQUFTLG1CQUFULENBRHFDLENBQW5FO0FBRUg7QUFDSixHQXpCRDs7QUEwQkFuakIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjJoRCxjQUFuQixHQUFvQyxZQUFZO0FBQzVDLFNBQUtDLHFCQUFMOztBQUNBLFFBQUksS0FBS00saUJBQVQsRUFBNEI7QUFDeEJ0OEMsWUFBTSxDQUFDa0QsbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUMsS0FBS281QyxpQkFBMUM7QUFDQSxXQUFLQSxpQkFBTCxHQUF5QixJQUF6QjtBQUNIO0FBQ0osR0FORCxDQXhHc0MsQ0ErR3RDO0FBQ0E7OztBQUNBMW9ELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJraEQsT0FBbkIsR0FBNkIsWUFBWTtBQUNyQyxRQUFJbHFCLEtBQUssR0FBRyxJQUFaOztBQUNBLFNBQUs1TixLQUFMLEdBQWEsS0FBS2c1QixpQkFBTCxFQUFiO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEtBQUsxbEMsR0FBTCxDQUFTLGNBQVQsS0FBNEIsRUFBN0M7QUFDQSxRQUFJMmxDLGVBQWUsR0FBRyxLQUFLM2xDLEdBQUwsQ0FBUyxRQUFULENBQXRCO0FBQ0EsUUFBSTZ5QixPQUFPLEdBQUcsRUFBZCxDQUxxQyxDQUtuQjs7QUFDbEIsUUFBSThTLGVBQUosRUFBcUI7QUFDakJELGdCQUFVLENBQUMxb0MsT0FBWCxDQUFtQjJvQyxlQUFuQjtBQUNIOztBQUNELFNBQUssSUFBSXp0QyxFQUFFLEdBQUcsQ0FBVCxFQUFZMHRDLFlBQVksR0FBR0YsVUFBaEMsRUFBNEN4dEMsRUFBRSxHQUFHMHRDLFlBQVksQ0FBQ2ppRCxNQUE5RCxFQUFzRXVVLEVBQUUsRUFBeEUsRUFBNEU7QUFDeEUsVUFBSTJ0QyxTQUFTLEdBQUdELFlBQVksQ0FBQzF0QyxFQUFELENBQTVCO0FBQ0EsVUFBSStmLE1BQU0sR0FBR3VhLGdCQUFnQixDQUFDcVQsU0FBRCxFQUFZLElBQVosQ0FBN0I7O0FBQ0EsVUFBSTV0QixNQUFKLEVBQVk7QUFDUjRhLGVBQU8sQ0FBQ2h0QyxJQUFSLENBQWFveUIsTUFBYjtBQUNIO0FBQ0o7O0FBQ0QsU0FBSzZ0QixjQUFMLENBQW9CLFlBQVk7QUFDNUJ6ckIsV0FBSyxDQUFDaFIsUUFBTixDQUFlO0FBQUVwcUIsWUFBSSxFQUFFO0FBQVIsT0FBZixFQUQ0QixDQUNNOzs7QUFDbENvN0IsV0FBSyxDQUFDaFIsUUFBTixDQUFlO0FBQUVwcUIsWUFBSSxFQUFFLG1CQUFSO0FBQTZCNHpDLGVBQU8sRUFBRUE7QUFBdEMsT0FBZjs7QUFDQXhZLFdBQUssQ0FBQ2hSLFFBQU4sQ0FBZTtBQUNYcHFCLFlBQUksRUFBRSxlQURLO0FBRVhrNEMsZ0JBQVEsRUFBRTljLEtBQUssQ0FBQ3JhLEdBQU4sQ0FBVSxhQUFWLEtBQTRCcWEsS0FBSyxDQUFDcmIsWUFBTixDQUFtQkMsS0FBbkIsQ0FBeUJuaEI7QUFGcEQsT0FBZjtBQUlILEtBUEQ7QUFRSCxHQXhCRDs7QUF5QkFqQixVQUFRLENBQUN3RyxTQUFULENBQW1Cb2lELGlCQUFuQixHQUF1QyxZQUFZO0FBQy9DLFdBQU87QUFDSHRPLGNBQVEsRUFBRSxJQURQO0FBRUg1UyxrQkFBWSxFQUFFLENBRlg7QUFHSHFULDZCQUF1QixFQUFFLENBSHRCO0FBSUh0RCxpQkFBVyxFQUFFLEtBQUt5UixjQUFMLEVBSlY7QUFLSHQxQixpQkFBVyxFQUFFLElBTFY7QUFNSC9ELGtCQUFZLEVBQUUsRUFOWDtBQU9IM08sZ0JBQVUsRUFBRUMscUJBQXFCLEVBUDlCO0FBUUhnVSxtQkFBYSxFQUFFLElBUlo7QUFTSEcsb0JBQWMsRUFBRSxFQVRiO0FBVUhMLGVBQVMsRUFBRSxJQVZSO0FBV0hNLGlCQUFXLEVBQUU7QUFYVixLQUFQO0FBYUgsR0FkRDs7QUFlQXYxQixVQUFRLENBQUN3RyxTQUFULENBQW1CZ21CLFFBQW5CLEdBQThCLFVBQVVtSCxNQUFWLEVBQWtCO0FBQzVDLFNBQUtvekIsV0FBTCxDQUFpQi85QyxJQUFqQixDQUFzQjJxQixNQUF0Qjs7QUFDQSxRQUFJLENBQUMsS0FBS3F6QixVQUFWLEVBQXNCO0FBQ2xCLFdBQUtBLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxVQUFJbUMsUUFBUSxHQUFHLEtBQUt2NUIsS0FBcEI7O0FBQ0EsYUFBTyxLQUFLbTNCLFdBQUwsQ0FBaUJqZ0QsTUFBeEIsRUFBZ0M7QUFDNUIsYUFBSzhvQixLQUFMLEdBQWEsS0FBSzlnQixNQUFMLENBQVksS0FBSzhnQixLQUFqQixFQUF3QixLQUFLbTNCLFdBQUwsQ0FBaUJxQyxLQUFqQixFQUF4QixFQUFrRCxJQUFsRCxDQUFiO0FBQ0g7O0FBQ0QsVUFBSUMsUUFBUSxHQUFHLEtBQUt6NUIsS0FBcEI7QUFDQSxXQUFLbzNCLFVBQUwsR0FBa0IsS0FBbEI7O0FBQ0EsVUFBSSxDQUFDbUMsUUFBUSxDQUFDemhCLFlBQVYsSUFBMEIyaEIsUUFBUSxDQUFDM2hCLFlBQXZDLEVBQXFEO0FBQ2pELGFBQUt6VixlQUFMLENBQXFCLFNBQXJCLEVBQWdDLENBQUMsSUFBRCxDQUFoQztBQUNILE9BRkQsTUFHSyxJQUFJazNCLFFBQVEsQ0FBQ3poQixZQUFULElBQXlCLENBQUMyaEIsUUFBUSxDQUFDM2hCLFlBQXZDLEVBQXFEO0FBQ3RELGFBQUt6VixlQUFMLENBQXFCLFNBQXJCLEVBQWdDLENBQUMsS0FBRCxDQUFoQztBQUNIOztBQUNELFVBQUlQLElBQUksR0FBRyxLQUFLNk4sU0FBTCxJQUFrQixLQUFLQSxTQUFMLENBQWU3TixJQUE1Qzs7QUFDQSxVQUFJeTNCLFFBQVEsQ0FBQ2pvQyxVQUFULEtBQXdCbW9DLFFBQVEsQ0FBQ25vQyxVQUFqQyxJQUErQyxLQUFLZ21DLGlCQUF4RCxFQUEyRTtBQUN2RSxZQUFJaUMsUUFBUSxDQUFDam9DLFVBQWIsRUFBeUI7QUFDckIsZUFBS3NtQyxlQUFMLEdBQXVCLElBQXZCO0FBQ0g7QUFDSjs7QUFDRCxVQUFJMkIsUUFBUSxDQUFDdjFCLFdBQVQsS0FBeUJ5MUIsUUFBUSxDQUFDejFCLFdBQWxDLElBQWlELEtBQUtzekIsaUJBQTFELEVBQTZFO0FBQ3pFLFlBQUlpQyxRQUFRLENBQUN2MUIsV0FBVCxJQUF3QmxDLElBQTVCLEVBQWtDO0FBQUU7QUFDaEMsZUFBS08sZUFBTCxDQUFxQixjQUFyQixFQUFxQyxDQUNqQztBQUNJUCxnQkFBSSxFQUFFQSxJQURWO0FBRUl6dkIsY0FBRSxFQUFFeXZCLElBQUksQ0FBQ3p2QjtBQUZiLFdBRGlDLENBQXJDO0FBTUg7O0FBQ0QsYUFBS3NsRCxjQUFMLEdBQXNCLElBQXRCO0FBQ0g7O0FBQ0QsVUFBSTRCLFFBQVEsQ0FBQzdPLFFBQVQsS0FBc0IrTyxRQUFRLENBQUMvTyxRQUEvQixJQUEyQyxLQUFLNE0saUJBQXBELEVBQXVFO0FBQ25FLFlBQUlpQyxRQUFRLENBQUM3TyxRQUFULElBQXFCNW9CLElBQXpCLEVBQStCO0FBQUU7QUFDN0IsZUFBS08sZUFBTCxDQUFxQixxQkFBckIsRUFBNEMsQ0FDeEM7QUFDSVAsZ0JBQUksRUFBRUEsSUFEVjtBQUVJenZCLGNBQUUsRUFBRXl2QixJQUFJLENBQUN6dkI7QUFGYixXQUR3QyxDQUE1QztBQU1IOztBQUNELGFBQUtxbEQsYUFBTCxHQUFxQixJQUFyQjtBQUNIOztBQUNELFdBQUtZLGVBQUw7QUFDSDtBQUNKLEdBOUNEOztBQStDQWxvRCxVQUFRLENBQUN3RyxTQUFULENBQW1Cc0ksTUFBbkIsR0FBNEIsVUFBVThnQixLQUFWLEVBQWlCK0QsTUFBakIsRUFBeUI1ekIsUUFBekIsRUFBbUM7QUFDM0QsV0FBTytPLE1BQU0sQ0FBQzhnQixLQUFELEVBQVErRCxNQUFSLEVBQWdCNXpCLFFBQWhCLENBQWI7QUFDSCxHQUZELENBeE1zQyxDQTJNdEM7QUFDQTs7O0FBQ0FDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUIwaEQsZUFBbkIsR0FBcUMsVUFBVW9CLFNBQVYsRUFBcUI7QUFDdEQsUUFBSUEsU0FBUyxLQUFLLEtBQUssQ0FBdkIsRUFBMEI7QUFBRUEsZUFBUyxHQUFHLEtBQVo7QUFBb0I7O0FBQ2hELFNBQUtyQyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsU0FBS0MsaUJBQUwsR0FBeUIsS0FBS0EsaUJBQUwsSUFBMEJvQyxTQUFuRDtBQUNBLFNBQUtDLGVBQUwsR0FKc0QsQ0FJOUI7QUFDM0IsR0FMRDs7QUFNQXZwRCxVQUFRLENBQUN3RyxTQUFULENBQW1CZ2pELFdBQW5CLEdBQWlDLFlBQVk7QUFDekMsUUFBSSxLQUFLanFCLFNBQUwsSUFBa0I7QUFDbEIsU0FBSzBuQixhQURMLElBQ3NCO0FBQ3RCLEtBQUMsS0FBS0csbUJBRk4sSUFFNkI7QUFDN0IsS0FBQyxLQUFLRCxXQUhWLENBR3NCO0FBSHRCLE1BSUU7QUFDRSxhQUFLYyxhQUFMO0FBQ0g7QUFDSixHQVJEOztBQVNBam9ELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJ5aUQsY0FBbkIsR0FBb0MsVUFBVXB2QyxJQUFWLEVBQWdCO0FBQ2hELFNBQUt1dEMsbUJBQUw7QUFDQXZ0QyxRQUFJO0FBQ0osU0FBS3V0QyxtQkFBTDs7QUFDQSxRQUFJLEtBQUtILGFBQVQsRUFBd0I7QUFDcEIsV0FBS2lCLGVBQUw7QUFDSDtBQUNKLEdBUEQsQ0E1TnNDLENBb090QztBQUNBOzs7QUFDQWxvRCxVQUFRLENBQUN3RyxTQUFULENBQW1CeWhELGFBQW5CLEdBQW1DLFlBQVk7QUFDM0MsUUFBSWYsaUJBQWlCLEdBQUcsS0FBS0EsaUJBQTdCLENBRDJDLENBQ0s7QUFDaEQ7O0FBQ0EsU0FBS0QsYUFBTCxHQUFxQixLQUFyQjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUNBLFNBQUtzQyxlQUFMLENBQXFCdkMsaUJBQXJCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFuQixDQVAyQyxDQVEzQzs7QUFDQSxRQUFJLEtBQUtGLGFBQVQsRUFBd0I7QUFDcEIsV0FBS3NDLGVBQUw7QUFDSDtBQUNKLEdBWkQ7QUFhQTs7Ozs7QUFHQXZwRCxVQUFRLENBQUN3RyxTQUFULENBQW1CaWpELGVBQW5CLEdBQXFDLFVBQVVILFNBQVYsRUFBcUI7QUFDdEQsUUFBSTcwQyxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWVtYixLQUFLLEdBQUduYixFQUFFLENBQUNtYixLQUExQjtBQUFBLFFBQWlDMlAsU0FBUyxHQUFHOXFCLEVBQUUsQ0FBQzhxQixTQUFoRDs7QUFDQSxRQUFJK2EsUUFBUSxHQUFHMXFCLEtBQUssQ0FBQzBxQixRQUFyQjtBQUNBLFFBQUlqRCxRQUFRLEdBQUcsS0FBSytJLFNBQUwsQ0FBZTlGLFFBQWYsQ0FBZjtBQUNBLFFBQUlvUCxXQUFXLEdBQUlKLFNBQVMsSUFBSS9wQixTQUFkLEdBQTJCQSxTQUFTLENBQUM3TixJQUFWLENBQWV1eEIsV0FBZixFQUEzQixHQUEwRCxJQUE1RTs7QUFDQSxRQUFJLENBQUM1TCxRQUFMLEVBQWU7QUFDWCxZQUFNLElBQUkyQyxLQUFKLENBQVUsaUJBQWlCTSxRQUFqQixHQUE0QixpQkFBdEMsQ0FBTjtBQUNILEtBUHFELENBUXREO0FBQ0E7OztBQUNBLFFBQUl5TixvQkFBb0IsR0FBRyxLQUFLQSxvQkFBTCxHQUN0Qm40QixLQUFLLENBQUNtckIsdUJBQU4sSUFBaUMsQ0FBQyxLQUFLNTNCLEdBQUwsQ0FBUywyQkFBVCxDQUFuQyxHQUNJLEtBQUs0a0Msb0JBRFQsR0FFSW40QixLQUFLLENBQUMxTyxVQUhkO0FBSUEsUUFBSXlvQyxpQkFBaUIsR0FBRyxLQUFLbkQsc0JBQUwsQ0FBNEJuUCxRQUFRLENBQUN0dEIsT0FBckMsQ0FBeEI7QUFDQSxRQUFJNi9CLGVBQWUsR0FBRyxLQUFLaEQsb0JBQUwsQ0FBMEJoM0IsS0FBSyxDQUFDQyxZQUFoQyxDQUF0QjtBQUNBLFFBQUlTLFlBQVksR0FBRyxLQUFLQSxZQUFMLEdBQW9CLEtBQUt1MkIsaUJBQUwsQ0FBdUJrQixvQkFBb0IsQ0FBQ3RtQyxJQUE1QyxFQUFrRGtvQyxpQkFBbEQsRUFBcUVDLGVBQXJFLENBQXZDOztBQUNBLFFBQUlOLFNBQVMsSUFBSSxDQUFDL3BCLFNBQWxCLEVBQTZCO0FBQ3pCLFVBQUlBLFNBQUosRUFBZTtBQUNYQSxpQkFBUyxDQUFDNmlCLFlBQVYsR0FEVyxDQUNlOztBQUMxQjdpQixpQkFBUyxDQUFDMEYsT0FBVjtBQUNIOztBQUNEMUYsZUFBUyxHQUFHLEtBQUtBLFNBQUwsR0FBaUIsSUFBSWtpQixpQkFBSixDQUFzQjtBQUMvQzFoRCxnQkFBUSxFQUFFLElBRHFDO0FBRS9DMnhCLFlBQUksRUFBRSxJQUZ5QztBQUcvQ2pVLGVBQU8sRUFBRSxLQUFLQSxPQUhpQztBQUkvQ3dpQixhQUFLLEVBQUUsS0FBS0EsS0FKbUM7QUFLL0NsVyxlQUFPLEVBQUUsS0FBS2swQixjQUFMLENBQW9CNXZDO0FBTGtCLE9BQXRCLEVBTTFCLEtBQUtwTSxFQU5xQixDQUE3QjtBQU9BLFdBQUtxbEQsYUFBTCxHQUFxQixJQUFyQjtBQUNBLFdBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxXQUFLQyxlQUFMLEdBQXVCLElBQXZCO0FBQ0g7O0FBQ0Rqb0IsYUFBUyxDQUFDbUgsWUFBVixDQUF1QnBvQixRQUFRLENBQUMsRUFBRCxFQUFLc1IsS0FBTCxFQUFZO0FBQUV5bkIsY0FBUSxFQUFFQSxRQUFaO0FBQXNCempCLGlCQUFXLEVBQUVoRSxLQUFLLENBQUNnRSxXQUF6QztBQUFzRHl1QiwwQkFBb0IsRUFBRSxLQUFLakgscUJBQUwsQ0FBMkJkLFFBQTNCLENBQTVFO0FBQWtIcDVCLGdCQUFVLEVBQUU2bUMsb0JBQTlIO0FBQW9KejNCLGtCQUFZLEVBQUVBLFlBQWxLO0FBQWdMNkUsbUJBQWEsRUFBRXZGLEtBQUssQ0FBQ3VGLGFBQXJNO0FBQW9ORyxvQkFBYyxFQUFFMUYsS0FBSyxDQUFDMEYsY0FBMU87QUFBMFBMLGVBQVMsRUFBRXJGLEtBQUssQ0FBQ3FGLFNBQTNRO0FBQXNSTSxpQkFBVyxFQUFFM0YsS0FBSyxDQUFDMkY7QUFBelMsS0FBWixDQUEvQjs7QUFDQSxRQUFJbTBCLFdBQUosRUFBaUI7QUFDYm5xQixlQUFTLENBQUM3TixJQUFWLENBQWVtNEIsV0FBZixDQUEyQkgsV0FBM0IsRUFBd0MsS0FBeEM7QUFDSDs7QUFDRCxRQUFJLEtBQUtwQyxhQUFULEVBQXdCO0FBQ3BCLFdBQUtBLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxXQUFLcjFCLGVBQUwsQ0FBcUIsb0JBQXJCLEVBQTJDLENBQ3ZDO0FBQ0lQLFlBQUksRUFBRTZOLFNBQVMsQ0FBQzdOLElBRHBCO0FBRUl6dkIsVUFBRSxFQUFFczlCLFNBQVMsQ0FBQzdOLElBQVYsQ0FBZXp2QjtBQUZ2QixPQUR1QyxDQUEzQztBQU1IOztBQUNELFFBQUksS0FBS3NsRCxjQUFULEVBQXlCO0FBQ3JCLFdBQUtBLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxXQUFLdDFCLGVBQUwsQ0FBcUIsYUFBckIsRUFBb0MsQ0FDaEM7QUFDSVAsWUFBSSxFQUFFNk4sU0FBUyxDQUFDN04sSUFEcEI7QUFFSXp2QixVQUFFLEVBQUVzOUIsU0FBUyxDQUFDN04sSUFBVixDQUFlenZCO0FBRnZCLE9BRGdDLENBQXBDO0FBTUg7O0FBQ0QsUUFBSSxLQUFLdWxELGVBQVQsRUFBMEI7QUFDdEIsV0FBS0EsZUFBTCxHQUF1QixLQUF2QjtBQUNIOztBQUNELFNBQUtzQywwQkFBTDtBQUNILEdBM0RELENBdFBzQyxDQWtUdEM7QUFDQTs7O0FBQ0E5cEQsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnVqRCxTQUFuQixHQUErQixVQUFVbGdELElBQVYsRUFBZ0JoTixHQUFoQixFQUFxQjtBQUNoRCxRQUFJNFgsRUFBSjs7QUFDQSxTQUFLdTFDLGFBQUwsRUFBb0J2MUMsRUFBRSxHQUFHLEVBQUwsRUFBU0EsRUFBRSxDQUFDNUssSUFBRCxDQUFGLEdBQVdoTixHQUFwQixFQUF5QjRYLEVBQTdDLEdBQWtELEVBQWxELEVBQXNELElBQXREO0FBQ0gsR0FIRDs7QUFJQXpVLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJ5akQsU0FBbkIsR0FBK0IsVUFBVXBnRCxJQUFWLEVBQWdCO0FBQzNDLFdBQU8sS0FBS28wQyxjQUFMLENBQW9CNXZDLFFBQXBCLENBQTZCeEUsSUFBN0IsQ0FBUDtBQUNILEdBRkQ7O0FBR0E3SixVQUFRLENBQUN3RyxTQUFULENBQW1CMmMsR0FBbkIsR0FBeUIsVUFBVXRaLElBQVYsRUFBZ0I7QUFDckMsV0FBTyxLQUFLbzBDLGNBQUwsQ0FBb0I1dkMsUUFBcEIsQ0FBNkJ4RSxJQUE3QixDQUFQO0FBQ0gsR0FGRDs7QUFHQTdKLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJnaUQsT0FBbkIsR0FBNkIsVUFBVTMrQyxJQUFWLEVBQWdCO0FBQ3pDLFdBQU8sS0FBS3FnRCxRQUFMLEdBQWdCcmdELElBQWhCLENBQVA7QUFDSCxHQUZEOztBQUdBN0osVUFBUSxDQUFDd0csU0FBVCxDQUFtQjBqRCxRQUFuQixHQUE4QixZQUFZO0FBQ3RDLFdBQU8sS0FBSzlKLFNBQUwsQ0FBZSxLQUFLeHdCLEtBQUwsQ0FBVzBxQixRQUExQixFQUFvQ3Z3QixPQUEzQztBQUNILEdBRkQ7QUFHQTs7Ozs7QUFHQS9wQixVQUFRLENBQUN3RyxTQUFULENBQW1Cd2pELGFBQW5CLEdBQW1DLFVBQVVsWCxPQUFWLEVBQW1CamUsUUFBbkIsRUFBNkJrZSxTQUE3QixFQUF3Qy9GLFNBQXhDLEVBQW1EO0FBQ2xGLFFBQUl4UCxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJMnNCLGNBQWMsR0FBRyxLQUFLaG9DLFlBQUwsQ0FBa0JDLEtBQWxCLENBQXdCd25CLG9CQUE3QztBQUNBLFFBQUl3Z0IsYUFBYSxHQUFHLEVBQXBCO0FBQ0EsUUFBSUMsY0FBYyxHQUFHLEVBQXJCO0FBQ0EsUUFBSWwyQixVQUFVLEdBQUcsS0FBSzFXLE9BQXRCLENBTGtGLENBS25EOztBQUMvQixRQUFJNnNDLGVBQWUsR0FBRyxLQUF0QjtBQUNBLFFBQUlDLFdBQVcsR0FBRyxLQUFsQjtBQUNBLFFBQUlDLG1CQUFtQixHQUFHOXRDLE9BQU8sQ0FBQ21ZLFFBQVEsQ0FBQy90QixNQUFWLENBQWpDOztBQUNBLFNBQUssSUFBSXFnQixNQUFULElBQW1CMnJCLE9BQW5CLEVBQTRCO0FBQ3hCLFVBQUlxWCxjQUFjLENBQUNoakMsTUFBRCxDQUFsQixFQUE0QjtBQUN4QmtqQyxzQkFBYyxDQUFDbGpDLE1BQUQsQ0FBZCxHQUF5QjJyQixPQUFPLENBQUMzckIsTUFBRCxDQUFoQztBQUNILE9BRkQsTUFHSztBQUNEaWpDLHFCQUFhLENBQUNqakMsTUFBRCxDQUFiLEdBQXdCMnJCLE9BQU8sQ0FBQzNyQixNQUFELENBQS9CO0FBQ0g7QUFDSjs7QUFDRCxTQUFLLElBQUlzRCxNQUFULElBQW1CMi9CLGFBQW5CLEVBQWtDO0FBQzlCLFVBQUksdUNBQXVDM3RELElBQXZDLENBQTRDZ3VCLE1BQTVDLENBQUosRUFBeUQ7QUFDckQ4L0IsbUJBQVcsR0FBRyxJQUFkO0FBQ0gsT0FGRCxNQUdLLElBQUksOEJBQThCOXRELElBQTlCLENBQW1DZ3VCLE1BQW5DLENBQUosRUFBZ0QsQ0FBaEQsS0FDQTtBQUNEKy9CLDJCQUFtQixHQUFHLElBQXRCOztBQUNBLFlBQUkvL0IsTUFBTSxLQUFLLFVBQWYsRUFBMkI7QUFDdkI2L0IseUJBQWUsR0FBRyxJQUFsQjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFLck0sY0FBTCxDQUFvQnh3QixNQUFwQixDQUEyQjI4QixhQUEzQixFQUEwQ3YxQixRQUExQyxFQUFvRGtlLFNBQXBEOztBQUNBLFFBQUl5WCxtQkFBSixFQUF5QjtBQUNyQixXQUFLL0MsYUFBTCxDQUFtQixLQUFLeEosY0FBTCxDQUFvQjV2QyxRQUF2QztBQUNBLFdBQUs2NEMsaUJBQUwsR0FBeUIsSUFBekI7QUFDSDs7QUFDRCxTQUFLK0IsY0FBTCxDQUFvQixZQUFZO0FBQzVCLFVBQUl1QixtQkFBSixFQUF5QjtBQUNyQixZQUFJRixlQUFKLEVBQXFCO0FBQ2pCOXNCLGVBQUssQ0FBQ2hSLFFBQU4sQ0FBZTtBQUNYcHFCLGdCQUFJLEVBQUUsaUJBREs7QUFFWCt4QixzQkFBVSxFQUFFQTtBQUZELFdBQWY7QUFJSDtBQUNEOzs7Ozs7QUFJQXFKLGFBQUssQ0FBQ2hSLFFBQU4sQ0FBZTtBQUNYcHFCLGNBQUksRUFBRSxlQURLO0FBRVhrNEMsa0JBQVEsRUFBRTljLEtBQUssQ0FBQzVOLEtBQU4sQ0FBWTBxQjtBQUZYLFNBQWY7QUFJSCxPQWZELE1BZ0JLLElBQUlpUSxXQUFKLEVBQWlCO0FBQ2xCL3NCLGFBQUssQ0FBQytrQixVQUFOO0FBQ0gsT0FuQjJCLENBb0I1Qjs7O0FBQ0EsVUFBSXZWLFNBQUosRUFBZTtBQUNYLGFBQUssSUFBSXlkLE1BQVQsSUFBbUJKLGNBQW5CLEVBQW1DO0FBQy9CRix3QkFBYyxDQUFDTSxNQUFELENBQWQsQ0FBdUJKLGNBQWMsQ0FBQ0ksTUFBRCxDQUFyQyxFQUErQ2p0QixLQUEvQyxFQUFzRHdQLFNBQXREO0FBQ0g7QUFDSjtBQUNKLEtBMUJEO0FBMkJILEdBN0REO0FBOERBOzs7OztBQUdBaHRDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJpaEQsYUFBbkIsR0FBbUMsVUFBVTE5QixPQUFWLEVBQW1CO0FBQ2xELFFBQUl5VCxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJa3RCLFdBQVcsR0FBRyxLQUFLdm9DLFlBQUwsQ0FBa0JDLEtBQXBDO0FBQ0EsU0FBS0osMEJBQUwsR0FBa0N6TixjQUFjLENBQUN3VixPQUFPLENBQUMvSCwwQkFBVCxDQUFoRDtBQUNBLFNBQUtDLHlCQUFMLEdBQWlDMU4sY0FBYyxDQUFDd1YsT0FBTyxDQUFDOUgseUJBQVQsQ0FBL0M7QUFDQSxTQUFLc25DLGVBQUwsR0FBdUIsS0FBS2xDLG9CQUFMLENBQTBCdDlCLE9BQU8sQ0FBQzRnQyxhQUFsQyxDQUF2QjtBQUNBLFNBQUsxcUIsS0FBTCxHQUFhLEtBQUtzbUIsVUFBTCxDQUFnQng4QixPQUFoQixDQUFiO0FBQ0EsUUFBSW1vQixTQUFTLEdBQUcsS0FBS1osZUFBTCxDQUFxQnZuQixPQUFPLENBQUM2a0IsT0FBN0IsQ0FBaEI7QUFDQSxTQUFLZ2MsbUJBQUwsR0FBMkIxWSxTQUFTLENBQUN0akMsR0FBckM7QUFDQSxRQUFJbk8sTUFBTSxHQUFHLEtBQUt1eEMsV0FBTCxDQUFpQmpvQixPQUFPLENBQUN0cEIsTUFBUixJQUFrQnl4QyxTQUFTLENBQUNWLFdBQTdDLEVBQTBEVSxTQUFTLENBQUN0akMsR0FBcEUsQ0FBYjtBQUNBLFNBQUs2TyxPQUFMLEdBQWUsS0FBSzZvQyxZQUFMLENBQWtCN2xELE1BQWxCLEVBQTBCc3BCLE9BQU8sQ0FBQzdtQixRQUFsQyxFQUE0Q3duRCxXQUFXLENBQUNoaEIsa0JBQXhELEVBQTRFM2YsT0FBTyxDQUFDbXFCLFFBQXBGLEVBQThGbnFCLE9BQU8sQ0FBQ3drQixxQkFBdEcsRUFBNkh4a0IsT0FBTyxDQUFDbEIsU0FBckksRUFBZ0o2aEMsV0FBVyxDQUFDci9CLFlBQTVKLENBQWY7QUFDQSxTQUFLOEssZUFBTCxHQUF1QixLQUFLdXdCLG9CQUFMLENBQTBCMzhCLE9BQTFCLENBQXZCLENBWGtELENBV1M7QUFDM0Q7O0FBQ0EsU0FBS3EyQixTQUFMLEdBQWlCckMsY0FBYyxDQUFDMk0sV0FBVyxDQUFDMWhCLEtBQWIsRUFBb0IsS0FBS2lWLGNBQXpCLENBQS9CLENBYmtELENBY2xEOztBQUNBLFNBQUs3QyxxQkFBTCxHQUE2Qjc2QixPQUFPLENBQUMsS0FBSzYvQixTQUFOLEVBQWlCLFVBQVUvSSxRQUFWLEVBQW9CO0FBQ3JFLGFBQU8sSUFBSUEsUUFBUSxDQUFDNEIsS0FBVCxDQUFlenlDLFNBQWYsQ0FBeUJxa0QseUJBQTdCLENBQXVEeFQsUUFBdkQsRUFBaUU3WixLQUFqRSxDQUFQO0FBQ0gsS0FGbUMsQ0FBcEM7QUFHSCxHQWxCRDs7QUFtQkF4OUIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnNrRCx1QkFBbkIsR0FBNkMsWUFBWTtBQUNyRCxXQUFPaHRDLE1BQU0sQ0FBQzBLLElBQVAsQ0FBWSxLQUFLb2lDLG1CQUFqQixDQUFQO0FBQ0gsR0FGRDs7QUFHQTVxRCxVQUFRLENBQUN3RyxTQUFULENBQW1CbWdELHFCQUFuQixHQUEyQyxVQUFVb0UsT0FBVixFQUFtQjtBQUMxRCxXQUFPMXhCLG9CQUFvQixDQUFDLFFBQUQsRUFBVzB4QixPQUFYLEVBQW9CLElBQXBCLENBQTNCO0FBQ0gsR0FGRDs7QUFHQS9xRCxVQUFRLENBQUN3RyxTQUFULENBQW1CaWdELHVCQUFuQixHQUE2QyxVQUFVc0UsT0FBVixFQUFtQjtBQUM1RCxRQUFJQSxPQUFPLENBQUMzcEQsUUFBWixFQUFzQjtBQUFFO0FBQ3BCMnBELGFBQU8sR0FBR3pzQyxRQUFRLENBQUMsRUFBRCxFQUFLeXNDLE9BQUwsRUFBYztBQUFFQyxxQkFBYSxFQUFFO0FBQWpCLE9BQWQsQ0FBbEI7QUFDSDs7QUFDRCxXQUFPM3hCLG9CQUFvQixDQUFDLE9BQUQsRUFBVTB4QixPQUFWLEVBQW1CLElBQW5CLENBQTNCO0FBQ0gsR0FMRCxDQWphc0MsQ0F1YXRDO0FBQ0E7OztBQUNBL3FELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJxckIsaUJBQW5CLEdBQXVDLFVBQVVob0IsSUFBVixFQUFnQjtBQUNuRCxXQUFPLEtBQUtpNEIsV0FBTCxDQUFpQmo0QixJQUFqQixLQUNILEtBQUtzWixHQUFMLENBQVN0WixJQUFULENBREosQ0FEbUQsQ0FFL0I7QUFDdkIsR0FIRDs7QUFJQTdKLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJ5ckIsZUFBbkIsR0FBcUMsVUFBVXBvQixJQUFWLEVBQWdCcVIsSUFBaEIsRUFBc0I7QUFDdkQsUUFBSSt2QyxVQUFVLEdBQUcsS0FBSzluQyxHQUFMLENBQVN0WixJQUFULENBQWpCO0FBQ0EsU0FBS2c0QixXQUFMLENBQWlCaDRCLElBQWpCLEVBQXVCLElBQXZCLEVBQTZCcVIsSUFBN0I7O0FBQ0EsUUFBSSt2QyxVQUFKLEVBQWdCO0FBQ1osYUFBT0EsVUFBVSxDQUFDOTJDLEtBQVgsQ0FBaUIsSUFBakIsRUFBdUIrRyxJQUF2QixDQUFQO0FBQ0g7QUFDSixHQU5EOztBQU9BbGIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQitnQywwQkFBbkIsR0FBZ0QsVUFBVTE5QixJQUFWLEVBQWdCcVIsSUFBaEIsRUFBc0I7QUFDbEUsUUFBSXlzQixtQkFBbUIsR0FBRyxLQUFLQSxtQkFBL0I7QUFDQSxLQUFDQSxtQkFBbUIsQ0FBQzk5QixJQUFELENBQW5CLEtBQThCODlCLG1CQUFtQixDQUFDOTlCLElBQUQsQ0FBbkIsR0FBNEIsRUFBMUQsQ0FBRCxFQUFnRWIsSUFBaEUsQ0FBcUVrUyxJQUFyRTtBQUNILEdBSEQ7O0FBSUFsYixVQUFRLENBQUN3RyxTQUFULENBQW1Cc2pELDBCQUFuQixHQUFnRCxZQUFZO0FBQ3hELFFBQUluaUIsbUJBQW1CLEdBQUcsS0FBS0EsbUJBQS9COztBQUNBLFNBQUssSUFBSXVqQixNQUFULElBQW1CdmpCLG1CQUFuQixFQUF3QztBQUNwQyxXQUFLLElBQUl0c0IsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBR2t6QixtQkFBbUIsQ0FBQ3VqQixNQUFELENBQXpDLEVBQW1EN3ZDLEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQTNELEVBQW1FdVUsRUFBRSxFQUFyRSxFQUF5RTtBQUNyRSxZQUFJSCxJQUFJLEdBQUd6RyxFQUFFLENBQUM0RyxFQUFELENBQWI7QUFDQSxhQUFLNFcsZUFBTCxDQUFxQmk1QixNQUFyQixFQUE2Qmh3QyxJQUE3QjtBQUNIO0FBQ0o7O0FBQ0QsU0FBS3lzQixtQkFBTCxHQUEyQixFQUEzQjtBQUNILEdBVEQsQ0F4YnNDLENBa2N0QztBQUNBO0FBQ0E7OztBQUNBM25DLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUIya0QsZUFBbkIsR0FBcUMsVUFBVTdRLFFBQVYsRUFBb0I7QUFDckQsV0FBTzU5QixPQUFPLENBQUMsS0FBSzBqQyxTQUFMLENBQWU5RixRQUFmLENBQUQsQ0FBZDtBQUNILEdBRkQ7O0FBR0F0NkMsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjI2QyxVQUFuQixHQUFnQyxVQUFVN0csUUFBVixFQUFvQjhRLFdBQXBCLEVBQWlDO0FBQzdELFFBQUkvUCxVQUFVLEdBQUcsSUFBakI7O0FBQ0EsUUFBSStQLFdBQUosRUFBaUI7QUFDYixVQUFJQSxXQUFXLENBQUM5bkQsS0FBWixJQUFxQjhuRCxXQUFXLENBQUM3bkQsR0FBckMsRUFBMEM7QUFBRTtBQUN4QyxhQUFLMDZDLGNBQUwsQ0FBb0J4d0IsTUFBcEIsQ0FBMkI7QUFBRXBRLHNCQUFZLEVBQUUrdEM7QUFBaEIsU0FBM0IsRUFBMEQsRUFBMUQsRUFEc0MsQ0FDeUI7O0FBQy9ELGFBQUszRCxhQUFMLENBQW1CLEtBQUt4SixjQUFMLENBQW9CNXZDLFFBQXZDLEVBRnNDLENBRVk7QUFDckQsT0FIRCxNQUlLO0FBQUU7QUFDSGd0QyxrQkFBVSxHQUFHLEtBQUs1OUIsT0FBTCxDQUFhc0csWUFBYixDQUEwQnFuQyxXQUExQixDQUFiLENBREMsQ0FDb0Q7QUFDeEQ7QUFDSjs7QUFDRCxTQUFLQyxRQUFMO0FBQ0EsU0FBSzcrQixRQUFMLENBQWM7QUFDVnBxQixVQUFJLEVBQUUsZUFESTtBQUVWazRDLGNBQVEsRUFBRUEsUUFGQTtBQUdWZSxnQkFBVSxFQUFFQTtBQUhGLEtBQWQ7QUFLSCxHQWpCRCxDQXhjc0MsQ0EwZHRDO0FBQ0E7QUFDQTs7O0FBQ0FyN0MsVUFBUSxDQUFDd0csU0FBVCxDQUFtQmlpRCxNQUFuQixHQUE0QixVQUFVcE4sVUFBVixFQUFzQmYsUUFBdEIsRUFBZ0M7QUFDeEQsUUFBSWdSLElBQUo7QUFDQWhSLFlBQVEsR0FBR0EsUUFBUSxJQUFJLEtBQXZCLENBRndELENBRTFCOztBQUM5QmdSLFFBQUksR0FBRyxLQUFLbEwsU0FBTCxDQUFlOUYsUUFBZixLQUNILEtBQUtpUixlQUFMLENBQXFCalIsUUFBckIsQ0FESjtBQUVBLFNBQUsrUSxRQUFMOztBQUNBLFFBQUlDLElBQUosRUFBVTtBQUNOLFdBQUs5K0IsUUFBTCxDQUFjO0FBQ1ZwcUIsWUFBSSxFQUFFLGVBREk7QUFFVms0QyxnQkFBUSxFQUFFZ1IsSUFBSSxDQUFDbHBELElBRkw7QUFHVmk1QyxrQkFBVSxFQUFFQTtBQUhGLE9BQWQ7QUFLSCxLQU5ELE1BT0s7QUFDRCxXQUFLN3VCLFFBQUwsQ0FBYztBQUNWcHFCLFlBQUksRUFBRSxVQURJO0FBRVZpNUMsa0JBQVUsRUFBRUE7QUFGRixPQUFkO0FBSUg7QUFDSixHQW5CRCxDQTdkc0MsQ0FpZnRDO0FBQ0E7OztBQUNBcjdDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUIra0QsZUFBbkIsR0FBcUMsVUFBVS8yQyxJQUFWLEVBQWdCO0FBQ2pELFFBQUkrcUIsU0FBUyxHQUFHLEtBQUtBLFNBQXJCO0FBQ0EsUUFBSWlzQixTQUFTLEdBQUcsRUFBaEI7QUFDQSxRQUFJM21ELENBQUo7QUFDQSxRQUFJeW1ELElBQUosQ0FKaUQsQ0FLakQ7O0FBQ0EsUUFBSS9yQixTQUFTLENBQUM3K0IsTUFBZCxFQUFzQjtBQUNsQjhxRCxlQUFTLENBQUN4aUQsSUFBVixDQUFlbUwsS0FBZixDQUFxQnEzQyxTQUFyQixFQUFnQ2pzQixTQUFTLENBQUM3K0IsTUFBVixDQUFpQnUvQyxnQkFBakQ7QUFDSDs7QUFDRCxRQUFJMWdCLFNBQVMsQ0FBQzBpQixNQUFkLEVBQXNCO0FBQ2xCdUosZUFBUyxDQUFDeGlELElBQVYsQ0FBZW1MLEtBQWYsQ0FBcUJxM0MsU0FBckIsRUFBZ0Nqc0IsU0FBUyxDQUFDMGlCLE1BQVYsQ0FBaUJoQyxnQkFBakQ7QUFDSDs7QUFDRCxTQUFLLElBQUkzRixRQUFULElBQXFCLEtBQUs4RixTQUExQixFQUFxQztBQUNqQ29MLGVBQVMsQ0FBQ3hpRCxJQUFWLENBQWVzeEMsUUFBZjtBQUNIOztBQUNELFNBQUt6MUMsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHMm1ELFNBQVMsQ0FBQzFrRCxNQUExQixFQUFrQ2pDLENBQUMsRUFBbkMsRUFBdUM7QUFDbkN5bUQsVUFBSSxHQUFHLEtBQUtsTCxTQUFMLENBQWVvTCxTQUFTLENBQUMzbUQsQ0FBRCxDQUF4QixDQUFQOztBQUNBLFVBQUl5bUQsSUFBSixFQUFVO0FBQ04sWUFBSUEsSUFBSSxDQUFDak4sVUFBTCxLQUFvQjdwQyxJQUF4QixFQUE4QjtBQUMxQixpQkFBTzgyQyxJQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osR0F2QkQsQ0FuZnNDLENBMmdCdEM7QUFDQTs7O0FBQ0F0ckQsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjBpRCxjQUFuQixHQUFvQyxZQUFZO0FBQzVDLFFBQUl1QyxnQkFBZ0IsR0FBRyxLQUFLdG9DLEdBQUwsQ0FBUyxhQUFULENBQXZCLENBRDRDLENBRTVDOztBQUNBLFFBQUlzb0MsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDMUIsYUFBTyxLQUFLaHVDLE9BQUwsQ0FBYXNHLFlBQWIsQ0FBMEIwbkMsZ0JBQTFCLENBQVA7QUFDSCxLQUZELE1BR0s7QUFDRCxhQUFPLEtBQUtuckIsTUFBTCxFQUFQLENBREMsQ0FDcUI7QUFDekI7QUFDSixHQVREOztBQVVBdGdDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJzcEMsSUFBbkIsR0FBMEIsWUFBWTtBQUNsQyxTQUFLdWIsUUFBTDtBQUNBLFNBQUs3K0IsUUFBTCxDQUFjO0FBQUVwcUIsVUFBSSxFQUFFO0FBQVIsS0FBZDtBQUNILEdBSEQ7O0FBSUFwQyxVQUFRLENBQUN3RyxTQUFULENBQW1CdXBDLElBQW5CLEdBQTBCLFlBQVk7QUFDbEMsU0FBS3NiLFFBQUw7QUFDQSxTQUFLNytCLFFBQUwsQ0FBYztBQUFFcHFCLFVBQUksRUFBRTtBQUFSLEtBQWQ7QUFDSCxHQUhEOztBQUlBcEMsVUFBUSxDQUFDd0csU0FBVCxDQUFtQndwQyxRQUFuQixHQUE4QixZQUFZO0FBQ3RDLFNBQUtxYixRQUFMO0FBQ0EsU0FBSzcrQixRQUFMLENBQWM7QUFDVnBxQixVQUFJLEVBQUUsVUFESTtBQUVWaTVDLGdCQUFVLEVBQUUsS0FBSzU5QixPQUFMLENBQWE4MkIsUUFBYixDQUFzQixLQUFLM2tCLEtBQUwsQ0FBVzZuQixXQUFqQyxFQUE4QyxDQUFDLENBQS9DO0FBRkYsS0FBZDtBQUlILEdBTkQ7O0FBT0F6M0MsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnlwQyxRQUFuQixHQUE4QixZQUFZO0FBQ3RDLFNBQUtvYixRQUFMO0FBQ0EsU0FBSzcrQixRQUFMLENBQWM7QUFDVnBxQixVQUFJLEVBQUUsVUFESTtBQUVWaTVDLGdCQUFVLEVBQUUsS0FBSzU5QixPQUFMLENBQWE4MkIsUUFBYixDQUFzQixLQUFLM2tCLEtBQUwsQ0FBVzZuQixXQUFqQyxFQUE4QyxDQUE5QztBQUZGLEtBQWQ7QUFJSCxHQU5EOztBQU9BejNDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJ5cUMsS0FBbkIsR0FBMkIsWUFBWTtBQUNuQyxTQUFLb2EsUUFBTDtBQUNBLFNBQUs3K0IsUUFBTCxDQUFjO0FBQ1ZwcUIsVUFBSSxFQUFFLFVBREk7QUFFVmk1QyxnQkFBVSxFQUFFLEtBQUsvYSxNQUFMO0FBRkYsS0FBZDtBQUlILEdBTkQ7O0FBT0F0Z0MsVUFBUSxDQUFDd0csU0FBVCxDQUFtQmtsRCxRQUFuQixHQUE4QixVQUFVQyxjQUFWLEVBQTBCO0FBQ3BELFNBQUtOLFFBQUw7QUFDQSxTQUFLNytCLFFBQUwsQ0FBYztBQUNWcHFCLFVBQUksRUFBRSxVQURJO0FBRVZpNUMsZ0JBQVUsRUFBRSxLQUFLNTlCLE9BQUwsQ0FBYXNHLFlBQWIsQ0FBMEI0bkMsY0FBMUI7QUFGRixLQUFkO0FBSUgsR0FORDs7QUFPQTNyRCxVQUFRLENBQUN3RyxTQUFULENBQW1Cb2xELGFBQW5CLEdBQW1DLFVBQVU1OEIsVUFBVixFQUFzQjtBQUNyRCxRQUFJQyxLQUFLLEdBQUcxYSxjQUFjLENBQUN5YSxVQUFELENBQTFCOztBQUNBLFFBQUlDLEtBQUosRUFBVztBQUFFO0FBQ1QsV0FBS284QixRQUFMO0FBQ0EsV0FBSzcrQixRQUFMLENBQWM7QUFDVnBxQixZQUFJLEVBQUUsVUFESTtBQUVWaTVDLGtCQUFVLEVBQUUsS0FBSzU5QixPQUFMLENBQWFqVSxHQUFiLENBQWlCLEtBQUtvbUIsS0FBTCxDQUFXNm5CLFdBQTVCLEVBQXlDeG9CLEtBQXpDO0FBRkYsT0FBZDtBQUlIO0FBQ0osR0FURCxDQTNqQnNDLENBcWtCdEM7OztBQUNBanZCLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJrTixPQUFuQixHQUE2QixZQUFZO0FBQ3JDLFdBQU8sS0FBSytKLE9BQUwsQ0FBYXFTLE1BQWIsQ0FBb0IsS0FBS0YsS0FBTCxDQUFXNm5CLFdBQS9CLENBQVA7QUFDSCxHQUZELENBdGtCc0MsQ0F5a0J0QztBQUNBOzs7QUFDQXozQyxVQUFRLENBQUN3RyxTQUFULENBQW1CcWxELFVBQW5CLEdBQWdDLFVBQVVqNkMsQ0FBVixFQUFhMGQsU0FBYixFQUF3QjtBQUNwRCxRQUFJN1IsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsV0FBT0EsT0FBTyxDQUFDNEosTUFBUixDQUFlNUosT0FBTyxDQUFDc0csWUFBUixDQUFxQm5TLENBQXJCLENBQWYsRUFBd0M0WixlQUFlLENBQUM4RCxTQUFELENBQXZELENBQVA7QUFDSCxHQUhELENBM2tCc0MsQ0Era0J0Qzs7O0FBQ0F0dkIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjhnQixXQUFuQixHQUFpQyxVQUFVeFIsRUFBVixFQUFjQyxFQUFkLEVBQWtCODlCLFFBQWxCLEVBQTRCO0FBQ3pELFFBQUlwMkIsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsV0FBT0EsT0FBTyxDQUFDNkosV0FBUixDQUFvQjdKLE9BQU8sQ0FBQ3NHLFlBQVIsQ0FBcUJqTyxFQUFyQixDQUFwQixFQUE4QzJILE9BQU8sQ0FBQ3NHLFlBQVIsQ0FBcUJoTyxFQUFyQixDQUE5QyxFQUF3RXlWLGVBQWUsQ0FBQ3FvQixRQUFELEVBQVcsS0FBSzF3QixHQUFMLENBQVMsdUJBQVQsQ0FBWCxDQUF2RixFQUFzSTB3QixRQUF0SSxDQUFQO0FBQ0gsR0FIRDs7QUFJQTd6QyxVQUFRLENBQUN3RyxTQUFULENBQW1CbzVCLFNBQW5CLEdBQStCLFVBQVVodUIsQ0FBVixFQUFhaXVCLFFBQWIsRUFBdUI7QUFDbEQsUUFBSXBpQixPQUFPLEdBQUcsS0FBS0EsT0FBbkI7QUFDQSxXQUFPQSxPQUFPLENBQUNtaUIsU0FBUixDQUFrQm5pQixPQUFPLENBQUNzRyxZQUFSLENBQXFCblMsQ0FBckIsQ0FBbEIsRUFBMkM7QUFBRWl1QixjQUFRLEVBQUVBO0FBQVosS0FBM0MsQ0FBUDtBQUNILEdBSEQsQ0FwbEJzQyxDQXdsQnRDO0FBQ0E7OztBQUNBNy9CLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJtaUQsWUFBbkIsR0FBa0MsVUFBVXJ2RCxFQUFWLEVBQWM7QUFDNUMsUUFBSSxDQUFDLEtBQUt3eUQsc0JBQU4sSUFDQSxLQUFLdnNCLFNBREwsSUFDa0I7QUFDbEJqbUMsTUFBRSxDQUFDK1YsTUFBSCxLQUFjakQsTUFGbEIsQ0FFeUI7QUFGekIsTUFHRTtBQUNFLGFBQUswL0Msc0JBQUwsR0FBOEIsSUFBOUI7QUFDQSxhQUFLdkosVUFBTDtBQUNBLGFBQUt0d0IsZUFBTCxDQUFxQixjQUFyQixFQUFxQyxDQUFDLEtBQUtQLElBQU4sQ0FBckM7QUFDQSxhQUFLbzZCLHNCQUFMLEdBQThCLEtBQTlCO0FBQ0g7QUFDSixHQVZEOztBQVdBOXJELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUIrN0MsVUFBbkIsR0FBZ0MsWUFBWTtBQUN4QyxRQUFJLEtBQUtoakIsU0FBVCxFQUFvQjtBQUFFO0FBQ2xCLFdBQUtBLFNBQUwsQ0FBZWdqQixVQUFmLENBQTBCLElBQTFCO0FBQ0g7QUFDSixHQUpELENBcm1Cc0MsQ0EwbUJ0QztBQUNBOzs7QUFDQXZpRCxVQUFRLENBQUN3RyxTQUFULENBQW1CdWxELDRCQUFuQixHQUFrRCxVQUFVeHNCLFNBQVYsRUFBcUJ5c0IsYUFBckIsRUFBb0M7QUFDbEYsUUFBSW5ZLFFBQVEsR0FBR3lRLHdCQUF3QixDQUFDL2tCLFNBQUQsRUFBWXlzQixhQUFaLENBQXZDO0FBQ0EsUUFBSUMsb0JBQW9CLEdBQUcsQ0FDdkJ2SCxhQUR1QixFQUV2Qk8sYUFGdUIsQ0FBM0I7QUFJQSxRQUFJaUgsa0JBQWtCLEdBQUdELG9CQUFvQixDQUFDcDlDLE1BQXJCLENBQTRCLEtBQUtzVCxZQUFMLENBQWtCQyxLQUFsQixDQUF3QmtuQixxQkFBcEQsQ0FBekI7QUFDQSxRQUFJNmlCLFlBQVksR0FBR0Qsa0JBQWtCLENBQUN0OUMsR0FBbkIsQ0FBdUIsVUFBVXc5QyxnQkFBVixFQUE0QjtBQUNsRSxhQUFPLElBQUlBLGdCQUFKLENBQXFCdlksUUFBckIsQ0FBUDtBQUNILEtBRmtCLENBQW5CO0FBR0EsU0FBS2lULGlCQUFMLENBQXVCdm5CLFNBQVMsQ0FBQ3hGLEdBQWpDLElBQXdDb3lCLFlBQXhDO0FBQ0ExSCw0QkFBd0IsQ0FBQ2xsQixTQUFTLENBQUN4RixHQUFYLENBQXhCLEdBQTBDOFosUUFBMUM7QUFDSCxHQVpEOztBQWFBN3pDLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUI2bEQsOEJBQW5CLEdBQW9ELFVBQVU5c0IsU0FBVixFQUFxQjtBQUNyRSxTQUFLLElBQUlsa0IsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLcXlDLGlCQUFMLENBQXVCdm5CLFNBQVMsQ0FBQ3hGLEdBQWpDLENBQXRCLEVBQTZEMWUsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBckUsRUFBNkV1VSxFQUFFLEVBQS9FLEVBQW1GO0FBQy9FLFVBQUlpeEMsUUFBUSxHQUFHNzNDLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBakI7QUFDQWl4QyxjQUFRLENBQUNybkIsT0FBVDtBQUNIOztBQUNELFdBQU8sS0FBSzZoQixpQkFBTCxDQUF1QnZuQixTQUFTLENBQUN4RixHQUFqQyxDQUFQO0FBQ0EsV0FBTzBxQix3QkFBd0IsQ0FBQ2xsQixTQUFTLENBQUN4RixHQUFYLENBQS9CO0FBQ0gsR0FQRCxDQXpuQnNDLENBaW9CdEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLzVCLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUI1QyxNQUFuQixHQUE0QixVQUFVMm9ELFNBQVYsRUFBcUJDLE9BQXJCLEVBQThCO0FBQ3RELFFBQUlDLGNBQUo7O0FBQ0EsUUFBSUQsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDakIsVUFBSUQsU0FBUyxDQUFDanBELEtBQVYsSUFBbUIsSUFBdkIsRUFBNkI7QUFDekJtcEQsc0JBQWMsR0FBR0YsU0FBakI7QUFDSCxPQUZELE1BR0s7QUFDREUsc0JBQWMsR0FBRztBQUNibnBELGVBQUssRUFBRWlwRCxTQURNO0FBRWJocEQsYUFBRyxFQUFFO0FBRlEsU0FBakI7QUFJSDtBQUNKLEtBVkQsTUFXSztBQUNEa3BELG9CQUFjLEdBQUc7QUFDYm5wRCxhQUFLLEVBQUVpcEQsU0FETTtBQUViaHBELFdBQUcsRUFBRWlwRDtBQUZRLE9BQWpCO0FBSUg7O0FBQ0QsUUFBSTMwQixTQUFTLEdBQUdva0IsYUFBYSxDQUFDd1EsY0FBRCxFQUFpQixLQUFLaHZDLE9BQXRCLEVBQStCbEosY0FBYyxDQUFDO0FBQUU5QyxVQUFJLEVBQUU7QUFBUixLQUFELENBQTdDLENBQTJEO0FBQTNELEtBQTdCOztBQUVBLFFBQUlvbUIsU0FBSixFQUFlO0FBQUU7QUFDYixXQUFLckwsUUFBTCxDQUFjO0FBQUVwcUIsWUFBSSxFQUFFLGNBQVI7QUFBd0J5MUIsaUJBQVMsRUFBRUE7QUFBbkMsT0FBZDtBQUNBLFdBQUs2MEIsaUJBQUwsQ0FBdUI3MEIsU0FBdkI7QUFDSDtBQUNKLEdBekJELENBcm9Cc0MsQ0ErcEJ0Qzs7O0FBQ0E3M0IsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjZrRCxRQUFuQixHQUE4QixVQUFVc0IsR0FBVixFQUFlO0FBQ3pDLFFBQUksS0FBSy84QixLQUFMLENBQVd1RixhQUFmLEVBQThCO0FBQzFCLFdBQUszSSxRQUFMLENBQWM7QUFBRXBxQixZQUFJLEVBQUU7QUFBUixPQUFkO0FBQ0EsV0FBS3dxRCxtQkFBTCxDQUF5QkQsR0FBekI7QUFDSDtBQUNKLEdBTEQ7O0FBTUEzc0QsVUFBUSxDQUFDd0csU0FBVCxDQUFtQmttRCxpQkFBbkIsR0FBdUMsVUFBVTcwQixTQUFWLEVBQXFCODBCLEdBQXJCLEVBQTBCO0FBQzdELFFBQUk5b0QsR0FBRyxHQUFHeWEsUUFBUSxDQUFDLEVBQUQsRUFBSyxLQUFLbVosZ0JBQUwsQ0FBc0JJLFNBQXRCLENBQUwsRUFBdUM7QUFBRWt0QixhQUFPLEVBQUU0SCxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0UsU0FBUCxHQUFtQixJQUFqQztBQUF1Q243QixVQUFJLEVBQUUsS0FBS0E7QUFBbEQsS0FBdkMsQ0FBbEI7O0FBQ0EsU0FBS08sZUFBTCxDQUFxQixRQUFyQixFQUErQixDQUFDcHVCLEdBQUQsQ0FBL0I7QUFDSCxHQUhEOztBQUlBN0QsVUFBUSxDQUFDd0csU0FBVCxDQUFtQm9tRCxtQkFBbkIsR0FBeUMsVUFBVUQsR0FBVixFQUFlO0FBQ3BELFNBQUsxNkIsZUFBTCxDQUFxQixVQUFyQixFQUFpQyxDQUM3QjtBQUNJOHlCLGFBQU8sRUFBRTRILEdBQUcsR0FBR0EsR0FBRyxDQUFDRSxTQUFQLEdBQW1CLElBRG5DO0FBRUluN0IsVUFBSSxFQUFFLEtBQUtBO0FBRmYsS0FENkIsQ0FBakM7QUFNSCxHQVBELENBMXFCc0MsQ0FrckJ0Qzs7O0FBQ0ExeEIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQnNtRCxnQkFBbkIsR0FBc0MsVUFBVTF1QixRQUFWLEVBQW9CMnVCLEtBQXBCLEVBQTJCcjdCLElBQTNCLEVBQWlDcDRCLEVBQWpDLEVBQXFDO0FBQ3ZFLFFBQUl1SyxHQUFHLEdBQUd5YSxRQUFRLENBQUMsRUFBRCxFQUFLLEtBQUttK0IsaUJBQUwsQ0FBdUJyZSxRQUF2QixDQUFMLEVBQXVDO0FBQUUydUIsV0FBSyxFQUFFQSxLQUFUO0FBQWdCaEksYUFBTyxFQUFFenJELEVBQXpCO0FBQTZCO0FBQ2xGbzRCLFVBQUksRUFBRUE7QUFEK0MsS0FBdkMsQ0FBbEI7O0FBRUEsU0FBS08sZUFBTCxDQUFxQixXQUFyQixFQUFrQyxDQUFDcHVCLEdBQUQsQ0FBbEM7QUFDSCxHQUpEOztBQUtBN0QsVUFBUSxDQUFDd0csU0FBVCxDQUFtQmkyQyxpQkFBbkIsR0FBdUMsVUFBVXJlLFFBQVYsRUFBb0I7QUFDdkQsUUFBSTEwQixLQUFLLEdBQUcsRUFBWjs7QUFDQSxTQUFLLElBQUkyUixFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUswTixZQUFMLENBQWtCQyxLQUFsQixDQUF3QjBtQixtQkFBOUMsRUFBbUV6dEIsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBM0UsRUFBbUZ1VSxFQUFFLEVBQXJGLEVBQXlGO0FBQ3JGLFVBQUlpb0MsU0FBUyxHQUFHN3VDLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBbEI7O0FBQ0FpRCxjQUFRLENBQUM1VSxLQUFELEVBQVE0NUMsU0FBUyxDQUFDbGxCLFFBQUQsRUFBVyxJQUFYLENBQWpCLENBQVI7QUFDSDs7QUFDRDlmLFlBQVEsQ0FBQzVVLEtBQUQsRUFBUSt5QyxpQkFBaUIsQ0FBQ3JlLFFBQUQsRUFBVyxLQUFLM2dCLE9BQWhCLENBQXpCLENBQVI7O0FBQ0EsV0FBTy9ULEtBQVA7QUFDSCxHQVJEOztBQVNBMUosVUFBUSxDQUFDd0csU0FBVCxDQUFtQml4QixnQkFBbkIsR0FBc0MsVUFBVTJHLFFBQVYsRUFBb0I7QUFDdEQsUUFBSTEwQixLQUFLLEdBQUcsRUFBWjs7QUFDQSxTQUFLLElBQUkyUixFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUswTixZQUFMLENBQWtCQyxLQUFsQixDQUF3QjJtQixrQkFBOUMsRUFBa0UxdEIsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBMUUsRUFBa0Z1VSxFQUFFLEVBQXBGLEVBQXdGO0FBQ3BGLFVBQUlpb0MsU0FBUyxHQUFHN3VDLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBbEI7O0FBQ0FpRCxjQUFRLENBQUM1VSxLQUFELEVBQVE0NUMsU0FBUyxDQUFDbGxCLFFBQUQsRUFBVyxJQUFYLENBQWpCLENBQVI7QUFDSDs7QUFDRDlmLFlBQVEsQ0FBQzVVLEtBQUQsRUFBUSt0QixnQkFBZ0IsQ0FBQzJHLFFBQUQsRUFBVyxLQUFLM2dCLE9BQWhCLENBQXhCLENBQVI7O0FBQ0EsV0FBTy9ULEtBQVA7QUFDSCxHQVJELENBanNCc0MsQ0Ewc0J0QztBQUNBO0FBQ0E7OztBQUNBMUosVUFBUSxDQUFDd0csU0FBVCxDQUFtQjg1QixNQUFuQixHQUE0QixZQUFZO0FBQ3BDLFFBQUlxaUIsR0FBRyxHQUFHLEtBQUt4L0IsR0FBTCxDQUFTLEtBQVQsQ0FBVjs7QUFDQSxRQUFJLE9BQU93L0IsR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzNCQSxTQUFHLEdBQUdBLEdBQUcsRUFBVDtBQUNIOztBQUNELFFBQUlBLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsYUFBTyxLQUFLbGxDLE9BQUwsQ0FBYTIyQixlQUFiLEVBQVA7QUFDSDs7QUFDRCxXQUFPLEtBQUszMkIsT0FBTCxDQUFhc0csWUFBYixDQUEwQjQrQixHQUExQixDQUFQO0FBQ0gsR0FURCxDQTdzQnNDLENBdXRCdEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBM2lELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUJpdEIsa0JBQW5CLEdBQXdDLFVBQVV4VSxNQUFWLEVBQWtCeE0sTUFBbEIsRUFBMEI7QUFDOUQsUUFBSWxQLEdBQUcsR0FBR2tQLE1BQVY7O0FBQ0EsUUFBSXdNLE1BQUosRUFBWTtBQUNSMWIsU0FBRyxHQUFHOE4sVUFBVSxDQUFDOU4sR0FBRCxDQUFoQjtBQUNBQSxTQUFHLEdBQUcsS0FBS2thLE9BQUwsQ0FBYWpVLEdBQWIsQ0FBaUJqRyxHQUFqQixFQUFzQixLQUFLeWUsMEJBQTNCLENBQU47QUFDSCxLQUhELE1BSUs7QUFDRHplLFNBQUcsR0FBRyxLQUFLa2EsT0FBTCxDQUFhalUsR0FBYixDQUFpQmpHLEdBQWpCLEVBQXNCLEtBQUswZSx5QkFBM0IsQ0FBTjtBQUNIOztBQUNELFdBQU8xZSxHQUFQO0FBQ0gsR0FWRCxDQTN0QnNDLENBc3VCdEM7QUFDQTs7O0FBQ0F2RCxVQUFRLENBQUN3RyxTQUFULENBQW1Cd3RCLFFBQW5CLEdBQThCLFVBQVV0VixVQUFWLEVBQXNCc3VDLFdBQXRCLEVBQW1DO0FBQzdELFFBQUl0dUMsVUFBVSxZQUFZdU8sUUFBMUIsRUFBb0M7QUFDaEMsVUFBSXZMLEdBQUcsR0FBR2hELFVBQVUsQ0FBQ3lPLElBQXJCO0FBQ0EsVUFBSXZMLFFBQVEsR0FBR2xELFVBQVUsQ0FBQzBPLFNBQTFCLENBRmdDLENBR2hDOztBQUNBLFVBQUksQ0FBQyxLQUFLd0MsS0FBTCxDQUFXMU8sVUFBWCxDQUFzQk8sSUFBdEIsQ0FBMkJDLEdBQUcsQ0FBQ0MsS0FBL0IsQ0FBTCxFQUE0QztBQUN4QyxhQUFLNkssUUFBTCxDQUFjO0FBQ1ZwcUIsY0FBSSxFQUFFLFlBREk7QUFFVjhlLG9CQUFVLEVBQUVNLGlCQUFpQixDQUFDO0FBQUVFLGVBQUcsRUFBRUEsR0FBUDtBQUFZRSxvQkFBUSxFQUFFQTtBQUF0QixXQUFELENBRm5CLENBRXNEOztBQUZ0RCxTQUFkO0FBSUg7O0FBQ0QsYUFBT2xELFVBQVA7QUFDSDs7QUFDRCxRQUFJc0MsUUFBSjs7QUFDQSxRQUFJZ3NDLFdBQVcsWUFBWTFnQyxjQUEzQixFQUEyQztBQUN2Q3RMLGNBQVEsR0FBR2dzQyxXQUFXLENBQUN6Z0MsbUJBQVosQ0FBZ0N2TCxRQUEzQztBQUNILEtBRkQsTUFHSyxJQUFJZ3NDLFdBQVcsSUFBSSxJQUFuQixFQUF5QjtBQUMxQixVQUFJQyxTQUFTLEdBQUcsS0FBS0Msa0JBQUwsQ0FBd0JGLFdBQXhCLENBQWhCLENBRDBCLENBQzRCOztBQUN0RCxVQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDWnJ6RCxlQUFPLENBQUMrMkMsSUFBUixDQUFhLDZDQUE2Q3FjLFdBQTdDLEdBQTJELEdBQXhFLEVBRFksQ0FDa0U7O0FBQzlFLGVBQU8sSUFBUDtBQUNILE9BSEQsTUFJSztBQUNEaHNDLGdCQUFRLEdBQUdpc0MsU0FBUyxDQUFDMWdDLG1CQUFWLENBQThCdkwsUUFBekM7QUFDSDtBQUNKOztBQUNELFFBQUlNLEtBQUssR0FBR0MsVUFBVSxDQUFDN0MsVUFBRCxFQUFhc0MsUUFBYixFQUF1QixJQUF2QixDQUF0Qjs7QUFDQSxRQUFJTSxLQUFKLEVBQVc7QUFDUCxXQUFLa0wsUUFBTCxDQUFjO0FBQ1ZwcUIsWUFBSSxFQUFFLFlBREk7QUFFVjhlLGtCQUFVLEVBQUVNLGlCQUFpQixDQUFDRixLQUFEO0FBRm5CLE9BQWQ7QUFJQSxhQUFPLElBQUkyTCxRQUFKLENBQWEsSUFBYixFQUFtQjNMLEtBQUssQ0FBQ0ksR0FBekIsRUFBOEJKLEtBQUssQ0FBQ0ksR0FBTixDQUFVaEMsWUFBVixHQUF5QixJQUF6QixHQUFnQzRCLEtBQUssQ0FBQ00sUUFBcEUsQ0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNILEdBcENELENBeHVCc0MsQ0E2d0J0Qzs7O0FBQ0E1aEIsVUFBUSxDQUFDd0csU0FBVCxDQUFtQjJtRCxZQUFuQixHQUFrQyxVQUFVM3FELEVBQVYsRUFBYztBQUM1QyxRQUFJaVMsRUFBRSxHQUFHLEtBQUttYixLQUFMLENBQVcxTyxVQUFwQjtBQUFBLFFBQWdDTyxJQUFJLEdBQUdoTixFQUFFLENBQUNnTixJQUExQztBQUFBLFFBQWdESSxTQUFTLEdBQUdwTixFQUFFLENBQUNvTixTQUEvRDtBQUNBcmYsTUFBRSxHQUFHK1gsTUFBTSxDQUFDL1gsRUFBRCxDQUFYOztBQUNBLFNBQUssSUFBSW1mLEtBQVQsSUFBa0JGLElBQWxCLEVBQXdCO0FBQ3BCLFVBQUlDLEdBQUcsR0FBR0QsSUFBSSxDQUFDRSxLQUFELENBQWQ7O0FBQ0EsVUFBSUQsR0FBRyxDQUFDbUwsUUFBSixLQUFpQnJxQixFQUFyQixFQUF5QjtBQUNyQixZQUFJa2YsR0FBRyxDQUFDaEMsWUFBUixFQUFzQjtBQUNsQixpQkFBTyxJQUFJdU4sUUFBSixDQUFhLElBQWIsRUFBbUJ2TCxHQUFuQixFQUF3QixJQUF4QixDQUFQO0FBQ0gsU0FGRCxNQUdLO0FBQ0QsZUFBSyxJQUFJSSxVQUFULElBQXVCRCxTQUF2QixFQUFrQztBQUM5QixnQkFBSUQsUUFBUSxHQUFHQyxTQUFTLENBQUNDLFVBQUQsQ0FBeEI7O0FBQ0EsZ0JBQUlGLFFBQVEsQ0FBQ0QsS0FBVCxLQUFtQkQsR0FBRyxDQUFDQyxLQUEzQixFQUFrQztBQUM5QixxQkFBTyxJQUFJc0wsUUFBSixDQUFhLElBQWIsRUFBbUJ2TCxHQUFuQixFQUF3QkUsUUFBeEIsQ0FBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FwQkQ7O0FBcUJBNWhCLFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUI0bUQsU0FBbkIsR0FBK0IsWUFBWTtBQUN2QyxRQUFJMzRDLEVBQUUsR0FBRyxLQUFLbWIsS0FBTCxDQUFXMU8sVUFBcEI7QUFBQSxRQUFnQ08sSUFBSSxHQUFHaE4sRUFBRSxDQUFDZ04sSUFBMUM7QUFBQSxRQUFnREksU0FBUyxHQUFHcE4sRUFBRSxDQUFDb04sU0FBL0Q7QUFDQSxRQUFJd3JDLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUk3cUQsRUFBVCxJQUFlcWYsU0FBZixFQUEwQjtBQUN0QixVQUFJRCxRQUFRLEdBQUdDLFNBQVMsQ0FBQ3JmLEVBQUQsQ0FBeEI7QUFDQSxVQUFJa2YsR0FBRyxHQUFHRCxJQUFJLENBQUNHLFFBQVEsQ0FBQ0QsS0FBVixDQUFkO0FBQ0EwckMsZUFBUyxDQUFDcmtELElBQVYsQ0FBZSxJQUFJaWtCLFFBQUosQ0FBYSxJQUFiLEVBQW1CdkwsR0FBbkIsRUFBd0JFLFFBQXhCLENBQWY7QUFDSDs7QUFDRCxXQUFPeXJDLFNBQVA7QUFDSCxHQVREOztBQVVBcnRELFVBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUI4bUQsZUFBbkIsR0FBcUMsWUFBWTtBQUM3QyxTQUFLOWdDLFFBQUwsQ0FBYztBQUFFcHFCLFVBQUksRUFBRTtBQUFSLEtBQWQ7QUFDSCxHQUZEOztBQUdBcEMsVUFBUSxDQUFDd0csU0FBVCxDQUFtQittRCxjQUFuQixHQUFvQyxZQUFZO0FBQzVDLFNBQUsvZ0MsUUFBTCxDQUFjO0FBQUVwcUIsVUFBSSxFQUFFO0FBQVIsS0FBZDtBQUNILEdBRkQsQ0FoekJzQyxDQW16QnRDO0FBQ0E7OztBQUNBcEMsVUFBUSxDQUFDd0csU0FBVCxDQUFtQmduRCxlQUFuQixHQUFxQyxZQUFZO0FBQzdDLFFBQUkvVyxVQUFVLEdBQUcsS0FBSzdtQixLQUFMLENBQVdDLFlBQTVCO0FBQ0EsUUFBSTQ5QixVQUFVLEdBQUcsRUFBakI7O0FBQ0EsU0FBSyxJQUFJQyxVQUFULElBQXVCalgsVUFBdkIsRUFBbUM7QUFDL0JnWCxnQkFBVSxDQUFDemtELElBQVgsQ0FBZ0IsSUFBSXNqQixjQUFKLENBQW1CLElBQW5CLEVBQXlCbXFCLFVBQVUsQ0FBQ2lYLFVBQUQsQ0FBbkMsQ0FBaEI7QUFDSDs7QUFDRCxXQUFPRCxVQUFQO0FBQ0gsR0FQRDs7QUFRQXp0RCxVQUFRLENBQUN3RyxTQUFULENBQW1CMG1ELGtCQUFuQixHQUF3QyxVQUFVMXFELEVBQVYsRUFBYztBQUNsRCxRQUFJaTBDLFVBQVUsR0FBRyxLQUFLN21CLEtBQUwsQ0FBV0MsWUFBNUI7QUFDQXJ0QixNQUFFLEdBQUcrWCxNQUFNLENBQUMvWCxFQUFELENBQVg7O0FBQ0EsU0FBSyxJQUFJd2UsUUFBVCxJQUFxQnkxQixVQUFyQixFQUFpQztBQUM3QixVQUFJQSxVQUFVLENBQUN6MUIsUUFBRCxDQUFWLENBQXFCNkwsUUFBckIsS0FBa0NycUIsRUFBdEMsRUFBMEM7QUFDdEMsZUFBTyxJQUFJOHBCLGNBQUosQ0FBbUIsSUFBbkIsRUFBeUJtcUIsVUFBVSxDQUFDejFCLFFBQUQsQ0FBbkMsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FURDs7QUFVQWhoQixVQUFRLENBQUN3RyxTQUFULENBQW1CcW5DLGNBQW5CLEdBQW9DLFVBQVVtZixXQUFWLEVBQXVCO0FBQ3ZELFFBQUlBLFdBQVcsWUFBWTFnQyxjQUEzQixFQUEyQztBQUN2QztBQUNBLFVBQUksQ0FBQyxLQUFLc0QsS0FBTCxDQUFXQyxZQUFYLENBQXdCbTlCLFdBQVcsQ0FBQ3pnQyxtQkFBWixDQUFnQ3ZMLFFBQXhELENBQUwsRUFBd0U7QUFDcEUsYUFBS3dMLFFBQUwsQ0FBYztBQUNWcHFCLGNBQUksRUFBRSxtQkFESTtBQUVWNHpDLGlCQUFPLEVBQUUsQ0FBQ2dYLFdBQVcsQ0FBQ3pnQyxtQkFBYjtBQUZDLFNBQWQ7QUFJSDs7QUFDRCxhQUFPeWdDLFdBQVA7QUFDSDs7QUFDRCxRQUFJL3BDLFdBQVcsR0FBRzB5QixnQkFBZ0IsQ0FBQ3FYLFdBQUQsRUFBYyxJQUFkLENBQWxDOztBQUNBLFFBQUkvcEMsV0FBSixFQUFpQjtBQUFFO0FBQ2YsV0FBS3VKLFFBQUwsQ0FBYztBQUFFcHFCLFlBQUksRUFBRSxtQkFBUjtBQUE2QjR6QyxlQUFPLEVBQUUsQ0FBQy95QixXQUFEO0FBQXRDLE9BQWQ7QUFDQSxhQUFPLElBQUlxSixjQUFKLENBQW1CLElBQW5CLEVBQXlCckosV0FBekIsQ0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNILEdBakJEOztBQWtCQWpqQixVQUFRLENBQUN3RyxTQUFULENBQW1CbW5ELHFCQUFuQixHQUEyQyxZQUFZO0FBQ25ELFNBQUtuaEMsUUFBTCxDQUFjO0FBQUVwcUIsVUFBSSxFQUFFO0FBQVIsS0FBZDtBQUNILEdBRkQ7O0FBR0FwQyxVQUFRLENBQUN3RyxTQUFULENBQW1Cb25ELGFBQW5CLEdBQW1DLFlBQVk7QUFDM0MsU0FBS3BoQyxRQUFMLENBQWM7QUFBRXBxQixVQUFJLEVBQUU7QUFBUixLQUFkO0FBQ0gsR0FGRCxDQTUxQnNDLENBKzFCdEM7QUFDQTs7O0FBQ0FwQyxVQUFRLENBQUN3RyxTQUFULENBQW1CcW5ELFlBQW5CLEdBQWtDLFVBQVVDLFNBQVYsRUFBcUI7QUFDbkQsUUFBSTN1QyxRQUFRLEdBQUc1SyxjQUFjLENBQUN1NUMsU0FBRCxDQUE3Qjs7QUFDQSxRQUFJM3VDLFFBQUosRUFBYztBQUNWLFdBQUtvZ0IsU0FBTCxDQUFlN04sSUFBZixDQUFvQnE4QixnQkFBcEIsQ0FBcUM1dUMsUUFBckM7QUFDSDtBQUNKLEdBTEQ7O0FBTUEsU0FBT25mLFFBQVA7QUFDSCxDQXgyQjZCLEVBQTlCOztBQXkyQkFxaEMsWUFBWSxDQUFDTixPQUFiLENBQXFCL2dDLFFBQXJCLEUsQ0FDQTtBQUNBOztBQUNBLFNBQVNzbUQsWUFBVCxDQUFzQjdsRCxNQUF0QixFQUE4QnlDLFFBQTlCLEVBQXdDNndDLGlCQUF4QyxFQUEyREcsUUFBM0QsRUFBcUUzRixxQkFBckUsRUFBNEYxbEIsU0FBNUYsRUFBdUd3QyxZQUF2RyxFQUFxSDtBQUNqSCxTQUFPLElBQUl1b0IsT0FBSixDQUFZO0FBQ2Zuc0Isa0JBQWMsRUFBRSxTQUREO0FBRWZ2a0IsWUFBUSxFQUFFQSxRQUZLO0FBR2Y2d0MscUJBQWlCLEVBQUVBLGlCQUhKO0FBSWZ0ekMsVUFBTSxFQUFFQSxNQUpPO0FBS2Y4dEMseUJBQXFCLEVBQUVBLHFCQUxSO0FBTWYyRixZQUFRLEVBQUVBLFFBTks7QUFPZnJyQixhQUFTLEVBQUVBLFNBUEk7QUFRZndDLGdCQUFZLEVBQUVBO0FBUkMsR0FBWixDQUFQO0FBVUg7O0FBQ0QsU0FBU2s3QixVQUFULENBQW9CbGhCLGVBQXBCLEVBQXFDO0FBQ2pDLE1BQUkyb0IsVUFBVSxHQUFHLEtBQUs3ckMsWUFBTCxDQUFrQkMsS0FBbEIsQ0FBd0JvbkIsWUFBeEIsQ0FBcUNuRSxlQUFlLENBQUN5SixXQUFyRCxLQUFxRTJXLGFBQXRGO0FBQ0EsU0FBTyxJQUFJdUksVUFBSixDQUFlM29CLGVBQWYsQ0FBUDtBQUNIOztBQUNELFNBQVNnaUIsb0JBQVQsQ0FBOEI1ckMsSUFBOUIsRUFBb0M7QUFDaEMsTUFBSTVCLElBQUksR0FBRyxLQUFLMnZDLFdBQUwsQ0FBaUI5ZSxJQUFqQixDQUFzQixJQUF0QixDQUFYOztBQUNBLE1BQUlqdkIsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDZDVCLFFBQUksR0FBRzJCLFFBQVEsQ0FBQzNCLElBQUQsRUFBTzRCLElBQVAsQ0FBZjtBQUNIOztBQUNELFNBQU81QixJQUFQO0FBQ0g7O0FBQ0QsU0FBUytzQyxvQkFBVCxDQUE4Qi8yQixZQUE5QixFQUE0QztBQUN4QyxTQUFPdFAsT0FBTyxDQUFDc1AsWUFBRCxFQUFlLFVBQVU1TSxXQUFWLEVBQXVCO0FBQ2hELFdBQU9BLFdBQVcsQ0FBQzJLLEVBQW5CO0FBQ0gsR0FGYSxDQUFkO0FBR0g7O0FBQ0QsU0FBU2k1QixpQkFBVCxDQUEyQnQwQixTQUEzQixFQUFzQ28zQixpQkFBdEMsRUFBeURDLGVBQXpELEVBQTBFO0FBQ3RFLE1BQUl0NUIsWUFBWSxHQUFHO0FBQUUsUUFBSXE1QjtBQUFOLEdBQW5COztBQUNBLE9BQUssSUFBSWhvQyxLQUFULElBQWtCNFEsU0FBbEIsRUFBNkI7QUFDekIsUUFBSTdRLEdBQUcsR0FBRzZRLFNBQVMsQ0FBQzVRLEtBQUQsQ0FBbkI7O0FBQ0EsUUFBSUQsR0FBRyxDQUFDVixRQUFKLElBQWdCNG9DLGVBQWUsQ0FBQ2xvQyxHQUFHLENBQUNWLFFBQUwsQ0FBbkMsRUFBbUQ7QUFDL0NzUCxrQkFBWSxDQUFDM08sS0FBRCxDQUFaLEdBQXNCaW9DLGVBQWUsQ0FBQ2xvQyxHQUFHLENBQUNWLFFBQUwsQ0FBckM7QUFDSDtBQUNKOztBQUNELFNBQU9zUCxZQUFQO0FBQ0g7O0FBRUQsSUFBSTI5QixJQUFJO0FBQUc7QUFBZSxVQUFVM3NCLE1BQVYsRUFBa0I7QUFDeENuakIsV0FBUyxDQUFDOHZDLElBQUQsRUFBTzNzQixNQUFQLENBQVQ7O0FBQ0EsV0FBUzJzQixJQUFULENBQWN0eUMsT0FBZCxFQUF1QjA3QixRQUF2QixFQUFpQ2dMLG9CQUFqQyxFQUF1RDJCLFFBQXZELEVBQWlFO0FBQzdELFFBQUl4bUIsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsRUFBMkJuVyxhQUFhLENBQUMsS0FBRCxFQUFRO0FBQUVKLGVBQVMsRUFBRSxnQkFBZ0JpeUMsUUFBUSxDQUFDajFDLElBQXpCLEdBQWdDO0FBQTdDLEtBQVIsQ0FBeEMsRUFBeUcsSUFBekcsQ0FBOEc7QUFBOUcsU0FDUCxJQURMOztBQUVBbzdCLFNBQUssQ0FBQzB3QixjQUFOLEdBQXVCcnlCLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDMndCLGVBQVAsRUFBd0Izd0IsS0FBSyxDQUFDNHdCLGlCQUE5QixDQUF2QztBQUNBNXdCLFNBQUssQ0FBQzZ3QixzQkFBTixHQUErQnh5QixnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQzh3QixtQkFBUCxFQUE0Qjl3QixLQUFLLENBQUMrd0IscUJBQWxDLEVBQXlELENBQUMvd0IsS0FBSyxDQUFDMHdCLGNBQVAsQ0FBekQsQ0FBL0M7QUFDQTF3QixTQUFLLENBQUNneEIsc0JBQU4sR0FBK0IzeUIsZ0JBQWdCLENBQUMyQixLQUFLLENBQUNpeEIsdUJBQVAsRUFBZ0NqeEIsS0FBSyxDQUFDa3hCLHlCQUF0QyxFQUFpRSxDQUFDbHhCLEtBQUssQ0FBQzB3QixjQUFQLENBQWpFLENBQS9DO0FBQ0Exd0IsU0FBSyxDQUFDbXhCLGVBQU4sR0FBd0I5eUIsZ0JBQWdCLENBQUMyQixLQUFLLENBQUNveEIsWUFBUCxFQUFxQnB4QixLQUFLLENBQUNxeEIsY0FBM0IsRUFBMkMsQ0FBQ3J4QixLQUFLLENBQUMwd0IsY0FBUCxDQUEzQyxDQUF4QztBQUNBMXdCLFNBQUssQ0FBQ3N4Qix1QkFBTixHQUFnQ2p6QixnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ3V4Qix3QkFBUCxFQUFpQ3Z4QixLQUFLLENBQUN3eEIsMEJBQXZDLEVBQW1FLENBQUN4eEIsS0FBSyxDQUFDbXhCLGVBQVAsQ0FBbkUsQ0FBaEQ7QUFDQW54QixTQUFLLENBQUN5eEIsa0JBQU4sR0FBMkJwekIsZ0JBQWdCLENBQUMyQixLQUFLLENBQUMweEIsbUJBQVAsRUFBNEIxeEIsS0FBSyxDQUFDMnhCLHFCQUFsQyxFQUF5RCxDQUFDM3hCLEtBQUssQ0FBQzB3QixjQUFQLENBQXpELENBQTNDO0FBQ0Exd0IsU0FBSyxDQUFDNHhCLG9CQUFOLEdBQTZCdnpCLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDNnhCLHFCQUFQLEVBQThCN3hCLEtBQUssQ0FBQzh4Qix1QkFBcEMsRUFBNkQsQ0FBQzl4QixLQUFLLENBQUMwd0IsY0FBUCxDQUE3RCxDQUE3QztBQUNBMXdCLFNBQUssQ0FBQzZaLFFBQU4sR0FBaUJBLFFBQWpCO0FBQ0E3WixTQUFLLENBQUM2a0Isb0JBQU4sR0FBNkJBLG9CQUE3QjtBQUNBN2tCLFNBQUssQ0FBQ3A3QixJQUFOLEdBQWFpMUMsUUFBUSxDQUFDajFDLElBQXRCO0FBQ0FvN0IsU0FBSyxDQUFDK3hCLGVBQU4sR0FBd0JuMkMsZUFBZSxDQUFDb2tCLEtBQUssQ0FBQ3JhLEdBQU4sQ0FBVSxZQUFWLENBQUQsQ0FBdkM7QUFDQXFhLFNBQUssQ0FBQ3pnQixnQkFBTixHQUF5QnhJLGNBQWMsQ0FBQ2lwQixLQUFLLENBQUNyYSxHQUFOLENBQVUsa0JBQVYsQ0FBRCxDQUF2QztBQUNBNmdDLFlBQVEsQ0FBQ2o5QyxXQUFULENBQXFCeTJCLEtBQUssQ0FBQ3Y3QixFQUEzQjs7QUFDQXU3QixTQUFLLENBQUNneUIsVUFBTjs7QUFDQSxXQUFPaHlCLEtBQVA7QUFDSDs7QUFDRHl3QixNQUFJLENBQUN6bkQsU0FBTCxDQUFlZ3BELFVBQWYsR0FBNEIsWUFBWSxDQUN2QyxDQUREOztBQUVBMXhDLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JzaEMsSUFBSSxDQUFDem5ELFNBQTNCLEVBQXNDLGFBQXRDLEVBQXFEO0FBQ2pEO0FBQ0E7QUFDQW9tQixPQUFHLEVBQUUsWUFBWTtBQUNiLGFBQU8sS0FBS25QLE9BQUwsQ0FBYXFTLE1BQWIsQ0FBb0IsS0FBS3BtQixLQUFMLENBQVdrcUIsV0FBWCxDQUF1QkssV0FBdkIsQ0FBbUMzd0IsS0FBdkQsQ0FBUDtBQUNILEtBTGdEO0FBTWpEd3BCLGNBQVUsRUFBRSxJQU5xQztBQU9qREMsZ0JBQVksRUFBRTtBQVBtQyxHQUFyRDtBQVNBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQnNoQyxJQUFJLENBQUN6bkQsU0FBM0IsRUFBc0MsV0FBdEMsRUFBbUQ7QUFDL0NvbUIsT0FBRyxFQUFFLFlBQVk7QUFDYixhQUFPLEtBQUtuUCxPQUFMLENBQWFxUyxNQUFiLENBQW9CLEtBQUtwbUIsS0FBTCxDQUFXa3FCLFdBQVgsQ0FBdUJLLFdBQXZCLENBQW1DMXdCLEdBQXZELENBQVA7QUFDSCxLQUg4QztBQUkvQ3VwQixjQUFVLEVBQUUsSUFKbUM7QUFLL0NDLGdCQUFZLEVBQUU7QUFMaUMsR0FBbkQ7QUFPQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0JzaEMsSUFBSSxDQUFDem5ELFNBQTNCLEVBQXNDLGNBQXRDLEVBQXNEO0FBQ2xEb21CLE9BQUcsRUFBRSxZQUFZO0FBQ2IsYUFBTyxLQUFLblAsT0FBTCxDQUFhcVMsTUFBYixDQUFvQixLQUFLcG1CLEtBQUwsQ0FBV2txQixXQUFYLENBQXVCeU0sWUFBdkIsQ0FBb0MvOEIsS0FBeEQsQ0FBUDtBQUNILEtBSGlEO0FBSWxEd3BCLGNBQVUsRUFBRSxJQUpzQztBQUtsREMsZ0JBQVksRUFBRTtBQUxvQyxHQUF0RDtBQU9BalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQnNoQyxJQUFJLENBQUN6bkQsU0FBM0IsRUFBc0MsWUFBdEMsRUFBb0Q7QUFDaERvbUIsT0FBRyxFQUFFLFlBQVk7QUFDYixhQUFPLEtBQUtuUCxPQUFMLENBQWFxUyxNQUFiLENBQW9CLEtBQUtwbUIsS0FBTCxDQUFXa3FCLFdBQVgsQ0FBdUJ5TSxZQUF2QixDQUFvQzk4QixHQUF4RCxDQUFQO0FBQ0gsS0FIK0M7QUFJaER1cEIsY0FBVSxFQUFFLElBSm9DO0FBS2hEQyxnQkFBWSxFQUFFO0FBTGtDLEdBQXBELEVBOUN3QyxDQXFEeEM7QUFDQTs7QUFDQWtoQyxNQUFJLENBQUN6bkQsU0FBTCxDQUFlcEMsTUFBZixHQUF3QixVQUFVc0YsS0FBVixFQUFpQjtBQUNyQyxTQUFLd2tELGNBQUwsQ0FBb0J4a0QsS0FBSyxDQUFDa3FCLFdBQTFCO0FBQ0EsU0FBS3k2QixzQkFBTCxDQUE0QjNrRCxLQUFLLENBQUMyckIsYUFBbEM7QUFDQSxTQUFLbTVCLHNCQUFMLENBQTRCOWtELEtBQUssQ0FBQ3lyQixhQUFsQztBQUNBLFNBQUt3NUIsZUFBTCxDQUFxQmpsRCxLQUFLLENBQUN3WCxVQUEzQjtBQUNBLFNBQUs0dEMsdUJBQUwsQ0FBNkJwbEQsS0FBSyxDQUFDNHJCLGNBQW5DO0FBQ0EsU0FBSzI1QixrQkFBTCxDQUF3QnZsRCxLQUFLLENBQUN1ckIsU0FBOUI7QUFDQSxTQUFLbTZCLG9CQUFMLENBQTBCMWxELEtBQUssQ0FBQzZyQixXQUFoQztBQUNILEdBUkQ7O0FBU0EwNEIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZXkrQixPQUFmLEdBQXlCLFlBQVk7QUFDakMzRCxVQUFNLENBQUM5NkIsU0FBUCxDQUFpQnkrQixPQUFqQixDQUF5QnYrQixJQUF6QixDQUE4QixJQUE5Qjs7QUFDQSxTQUFLd25ELGNBQUwsQ0FBb0I5eEIsUUFBcEIsR0FGaUMsQ0FFRDtBQUNuQyxHQUhELENBaEV3QyxDQW9FeEM7QUFDQTs7O0FBQ0E2eEIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZSs3QyxVQUFmLEdBQTRCLFVBQVVnQixRQUFWLEVBQW9CRyxVQUFwQixFQUFnQytMLE1BQWhDLEVBQXdDO0FBQ2hFLFFBQUkxdkQsUUFBUSxHQUFHLEtBQUtBLFFBQXBCOztBQUNBLFFBQUl3akQsUUFBUSxJQUFJO0FBQ1p4akQsWUFBUSxDQUFDdW5ELGFBRFQsSUFFQXZuRCxRQUFRLENBQUN3bkQsY0FGVCxJQUdBeG5ELFFBQVEsQ0FBQ3luRCxlQUhiLEVBRzhCO0FBQzFCO0FBQ0E7QUFDQSxXQUFLa0ksY0FBTCxDQUFvQm5NLFFBQXBCLEVBQThCRyxVQUE5QixFQUEwQytMLE1BQTFDO0FBQ0g7QUFDSixHQVZEOztBQVdBeEIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZWtwRCxjQUFmLEdBQWdDLFVBQVVuTSxRQUFWLEVBQW9CRyxVQUFwQixFQUFnQytMLE1BQWhDLEVBQXdDLENBQ3ZFLENBREQsQ0FqRndDLENBbUZ4QztBQUNBOzs7QUFDQXhCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWUybkQsZUFBZixHQUFpQyxVQUFVdjZCLFdBQVYsRUFBdUI7QUFDcEQsU0FBSys3QixXQUFMLENBQWlCLzdCLFdBQWpCO0FBQ0EsU0FBS292QixTQUFMLENBQWU7QUFDWDdqQyxjQUFRLEVBQUU1SyxjQUFjLENBQUMsS0FBSzRPLEdBQUwsQ0FBUyxZQUFULENBQUQ7QUFEYixLQUFmO0FBR0EsU0FBS3lzQyxpQkFBTCxDQUF1Qmg4QixXQUF2QixFQUxvRCxDQUtmO0FBQ3hDLEdBTkQ7O0FBT0FxNkIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZTRuRCxpQkFBZixHQUFtQyxZQUFZO0FBQzNDLFNBQUt5QixnQkFBTDtBQUNBLFNBQUtDLGFBQUw7QUFDSCxHQUhEOztBQUlBN0IsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZW1wRCxXQUFmLEdBQTZCLFVBQVUvN0IsV0FBVixFQUF1QixDQUFHLENBQXZEOztBQUNBcTZCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVzcEQsYUFBZixHQUErQixZQUFZLENBQUcsQ0FBOUMsQ0FqR3dDLENBa0d4QztBQUNBOzs7QUFDQTdCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWU4bkQsbUJBQWYsR0FBcUMsVUFBVWo1QixhQUFWLEVBQXlCLENBQUcsQ0FBakU7O0FBQ0E0NEIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZStuRCxxQkFBZixHQUF1QyxZQUFZLENBQUcsQ0FBdEQsQ0FyR3dDLENBc0d4QztBQUNBOzs7QUFDQU4sTUFBSSxDQUFDem5ELFNBQUwsQ0FBZWlvRCx1QkFBZixHQUF5QyxVQUFVNTJCLFNBQVYsRUFBcUI7QUFDMUQsUUFBSUEsU0FBSixFQUFlO0FBQ1gsV0FBS2s0QixtQkFBTCxDQUF5Qmw0QixTQUF6QjtBQUNIO0FBQ0osR0FKRDs7QUFLQW8yQixNQUFJLENBQUN6bkQsU0FBTCxDQUFla29ELHlCQUFmLEdBQTJDLFVBQVU3MkIsU0FBVixFQUFxQjtBQUM1RCxRQUFJQSxTQUFKLEVBQWU7QUFDWCxXQUFLbTRCLHFCQUFMLENBQTJCbjRCLFNBQTNCO0FBQ0g7QUFDSixHQUpEOztBQUtBbzJCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWV1cEQsbUJBQWYsR0FBcUMsVUFBVWw0QixTQUFWLEVBQXFCLENBQUcsQ0FBN0Q7O0FBQ0FvMkIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZXdwRCxxQkFBZixHQUF1QyxVQUFVbjRCLFNBQVYsRUFBcUIsQ0FBRyxDQUEvRCxDQW5Id0MsQ0FvSHhDO0FBQ0E7OztBQUNBbzJCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVvb0QsWUFBZixHQUE4QixVQUFVMXRDLFVBQVYsRUFBc0IsQ0FBRyxDQUF2RDs7QUFDQStzQyxNQUFJLENBQUN6bkQsU0FBTCxDQUFlcW9ELGNBQWYsR0FBZ0MsWUFBWSxDQUFHLENBQS9DLENBdkh3QyxDQXdIeEM7OztBQUNBWixNQUFJLENBQUN6bkQsU0FBTCxDQUFleXBELFdBQWYsR0FBNkIsVUFBVS91QyxVQUFWLEVBQXNCakMsTUFBdEIsRUFBOEI7QUFDdkQsUUFBSXZWLEtBQUssR0FBRyxLQUFLQSxLQUFqQjtBQUNBLFdBQU8ybUIsZUFBZSxDQUFDblAsVUFBRCxFQUFheFgsS0FBSyxDQUFDNG1CLFlBQW5CLEVBQWlDNW1CLEtBQUssQ0FBQ2txQixXQUFOLENBQWtCSyxXQUFuRCxFQUFnRWhWLE1BQU0sR0FBRyxLQUFLbEMsZ0JBQVIsR0FBMkIsSUFBakcsQ0FBZixDQUFzSHdVLEVBQTdIO0FBQ0gsR0FIRDs7QUFJQTA4QixNQUFJLENBQUN6bkQsU0FBTCxDQUFlMHBELHFCQUFmLEdBQXVDLFVBQVUzd0MsUUFBVixFQUFvQjR3QyxPQUFwQixFQUE2QjtBQUNoRSxRQUFJaE4sWUFBWSxHQUFHLEtBQUtwakQsUUFBTCxDQUFjb2lCLFlBQWQsQ0FBMkJDLEtBQTNCLENBQWlDdW1CLHVCQUFwRDtBQUNBLFFBQUk5ckMsR0FBRyxHQUFHc3pELE9BQU8sQ0FBQ3BpQyxhQUFsQjs7QUFDQSxTQUFLLElBQUkxUyxFQUFFLEdBQUcsQ0FBVCxFQUFZK25DLGNBQWMsR0FBR0QsWUFBbEMsRUFBZ0Q5bkMsRUFBRSxHQUFHK25DLGNBQWMsQ0FBQ3Q4QyxNQUFwRSxFQUE0RXVVLEVBQUUsRUFBOUUsRUFBa0Y7QUFDOUUsVUFBSWdvQyxXQUFXLEdBQUdELGNBQWMsQ0FBQy9uQyxFQUFELENBQWhDO0FBQ0F4ZSxTQUFHLEdBQUd3bUQsV0FBVyxDQUFDeG1ELEdBQUQsRUFBTTBpQixRQUFOLEVBQWdCNHdDLE9BQWhCLEVBQXlCLElBQXpCLENBQWpCO0FBQ0g7O0FBQ0QsV0FBT3R6RCxHQUFQO0FBQ0gsR0FSRDs7QUFTQW94RCxNQUFJLENBQUN6bkQsU0FBTCxDQUFlNHBELDBCQUFmLEdBQTRDLFVBQVU3d0MsUUFBVixFQUFvQjR3QyxPQUFwQixFQUE2QjtBQUNyRSxXQUFPQSxPQUFPLENBQUNuaUMsZ0JBQVIsSUFBNEIsS0FBSzdLLEdBQUwsQ0FBUyx5QkFBVCxDQUFuQztBQUNILEdBRkQ7O0FBR0E4cUMsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZTZwRCx3QkFBZixHQUEwQyxVQUFVOXdDLFFBQVYsRUFBb0I0d0MsT0FBcEIsRUFBNkI7QUFDbkUsV0FBT0EsT0FBTyxDQUFDbmlDLGdCQUFmO0FBQ0gsR0FGRCxDQXpJd0MsQ0E0SXhDO0FBQ0E7OztBQUNBaWdDLE1BQUksQ0FBQ3puRCxTQUFMLENBQWV1b0Qsd0JBQWYsR0FBMEMsVUFBVWp0QyxVQUFWLEVBQXNCO0FBQzVELFFBQUlBLFVBQUosRUFBZ0I7QUFDWixXQUFLd3VDLG9CQUFMLENBQTBCeHVDLFVBQTFCO0FBQ0g7QUFDSixHQUpEOztBQUtBbXNDLE1BQUksQ0FBQ3puRCxTQUFMLENBQWV3b0QsMEJBQWYsR0FBNEMsVUFBVWx0QyxVQUFWLEVBQXNCO0FBQzlELFFBQUlBLFVBQUosRUFBZ0I7QUFDWixXQUFLeXVDLHNCQUFMLENBQTRCenVDLFVBQTVCO0FBQ0g7QUFDSixHQUpEOztBQUtBbXNDLE1BQUksQ0FBQ3puRCxTQUFMLENBQWU4cEQsb0JBQWYsR0FBc0MsVUFBVXh1QyxVQUFWLEVBQXNCLENBQUcsQ0FBL0Q7O0FBQ0Ftc0MsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZStwRCxzQkFBZixHQUF3QyxVQUFVenVDLFVBQVYsRUFBc0IsQ0FBRyxDQUFqRSxDQXpKd0MsQ0EwSnhDO0FBQ0E7OztBQUNBbXNDLE1BQUksQ0FBQ3puRCxTQUFMLENBQWUwb0QsbUJBQWYsR0FBcUMsVUFBVXQvQixLQUFWLEVBQWlCO0FBQ2xELFFBQUlBLEtBQUosRUFBVztBQUNQLFdBQUs0Z0MsZUFBTCxDQUFxQjVnQyxLQUFyQjtBQUNIO0FBQ0osR0FKRDs7QUFLQXErQixNQUFJLENBQUN6bkQsU0FBTCxDQUFlMm9ELHFCQUFmLEdBQXVDLFVBQVV2L0IsS0FBVixFQUFpQjtBQUNwRCxRQUFJQSxLQUFKLEVBQVc7QUFDUCxXQUFLNmdDLGlCQUFMLENBQXVCN2dDLEtBQXZCO0FBQ0g7QUFDSixHQUpEOztBQUtBcStCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVncUQsZUFBZixHQUFpQyxVQUFVNWdDLEtBQVYsRUFBaUIsQ0FBRyxDQUFyRDs7QUFDQXErQixNQUFJLENBQUN6bkQsU0FBTCxDQUFlaXFELGlCQUFmLEdBQW1DLFVBQVU3Z0MsS0FBVixFQUFpQixDQUFHLENBQXZELENBdkt3QyxDQXdLeEM7QUFDQTs7O0FBQ0FxK0IsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZTZvRCxxQkFBZixHQUF1QyxVQUFVei9CLEtBQVYsRUFBaUI7QUFDcEQsUUFBSUEsS0FBSixFQUFXO0FBQ1AsV0FBSzhnQyxpQkFBTCxDQUF1QjlnQyxLQUF2QjtBQUNIO0FBQ0osR0FKRDs7QUFLQXErQixNQUFJLENBQUN6bkQsU0FBTCxDQUFlOG9ELHVCQUFmLEdBQXlDLFVBQVUxL0IsS0FBVixFQUFpQjtBQUN0RCxRQUFJQSxLQUFKLEVBQVc7QUFDUCxXQUFLK2dDLG1CQUFMLENBQXlCL2dDLEtBQXpCO0FBQ0g7QUFDSixHQUpEOztBQUtBcStCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVrcUQsaUJBQWYsR0FBbUMsVUFBVTlnQyxLQUFWLEVBQWlCLENBQUcsQ0FBdkQ7O0FBQ0FxK0IsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZW1xRCxtQkFBZixHQUFxQyxVQUFVL2dDLEtBQVYsRUFBaUIsQ0FBRyxDQUF6RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBQ0FxK0IsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZW9wRCxpQkFBZixHQUFtQyxVQUFVaDhCLFdBQVYsRUFBdUI7QUFDdEQsUUFBSTRKLEtBQUssR0FBRyxJQUFaOztBQUNBLFFBQUkvZixPQUFPLEdBQUcsS0FBS0EsT0FBbkI7QUFDQSxRQUFJakosSUFBSjtBQUNBLFFBQUlvOEMsTUFBSjtBQUNBLFFBQUlDLEtBQUosQ0FMc0QsQ0FLM0M7O0FBQ1gsUUFBSSxLQUFLMXRDLEdBQUwsQ0FBUyxjQUFULENBQUosRUFBOEI7QUFDMUIzTyxVQUFJLEdBQUcsS0FBS3M4QyxtQkFBTCxDQUF5Qmw5QixXQUF6QixDQUFQOztBQUNBLFVBQUlwZixJQUFKLEVBQVU7QUFDTm84QyxjQUFNLEdBQUcsS0FBS2pOLGtCQUFMLENBQXdCalosSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBVDtBQUNBLGFBQUtxbUIsY0FBTCxHQUFzQixLQUFLaHhELFFBQUwsQ0FBY3VnQyxNQUFkLEVBQXRCO0FBQ0EsYUFBSzB3QixtQkFBTCxHQUEyQixJQUFJaDlDLElBQUosR0FBV2pELE9BQVgsRUFBM0IsQ0FITSxDQUlOOztBQUNBOC9DLGFBQUssR0FBR3B6QyxPQUFPLENBQUNqVSxHQUFSLENBQVlpVSxPQUFPLENBQUNrM0IsT0FBUixDQUFnQixLQUFLb2MsY0FBckIsRUFBcUN2OEMsSUFBckMsQ0FBWixFQUF3REQsY0FBYyxDQUFDLENBQUQsRUFBSUMsSUFBSixDQUF0RSxFQUFpRnpELE9BQWpGLEtBQTZGLEtBQUtnZ0QsY0FBTCxDQUFvQmhnRCxPQUFwQixFQUFyRyxDQUxNLENBTU47O0FBQ0EsYUFBS2tnRCxxQkFBTCxHQUE2QjNzRCxVQUFVLENBQUMsWUFBWTtBQUNoRGs1QixlQUFLLENBQUN5ekIscUJBQU4sR0FBOEIsSUFBOUI7QUFDQUwsZ0JBQU07O0FBQ04sY0FBSXA4QyxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUNuQnE4QyxpQkFBSyxHQUFHLElBQVIsQ0FEbUIsQ0FDTDtBQUNqQixXQUZELE1BR0s7QUFDREEsaUJBQUssR0FBRyxPQUFPLEVBQWYsQ0FEQyxDQUNrQjtBQUN0Qjs7QUFDRHJ6QixlQUFLLENBQUMwekIsc0JBQU4sR0FBK0JDLFdBQVcsQ0FBQ1AsTUFBRCxFQUFTQyxLQUFULENBQTFDLENBVGdELENBU1c7QUFDOUQsU0FWc0MsRUFVcENBLEtBVm9DLENBQXZDO0FBV0gsT0FwQnlCLENBcUIxQjs7QUFDSDtBQUNKLEdBN0JELENBM0x3QyxDQXlOeEM7QUFDQTs7O0FBQ0E1QyxNQUFJLENBQUN6bkQsU0FBTCxDQUFlbTlDLGtCQUFmLEdBQW9DLFlBQVk7QUFDNUMsUUFBSSxLQUFLajZDLEtBQUwsQ0FBV2txQixXQUFYLElBQTBCO0FBQzFCLFNBQUttOUIsY0FEVCxDQUN3QjtBQUR4QixNQUVFO0FBQ0UsYUFBS0ssb0JBQUwsR0FERixDQUMrQjs7QUFDN0IsYUFBS0Msa0JBQUwsQ0FBd0IzZ0QsS0FBSyxDQUFDLEtBQUtxZ0QsY0FBTixFQUFzQixJQUFJLzhDLElBQUosR0FBV2pELE9BQVgsS0FBdUIsS0FBS2lnRCxtQkFBbEQsQ0FBN0I7QUFDQSxhQUFLTSxzQkFBTCxHQUE4QixJQUE5QjtBQUNIO0FBQ0osR0FSRCxDQTNOd0MsQ0FvT3hDO0FBQ0E7OztBQUNBckQsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZXFwRCxnQkFBZixHQUFrQyxZQUFZO0FBQzFDLFFBQUksS0FBS3lCLHNCQUFULEVBQWlDO0FBQzdCLFVBQUksS0FBS0wscUJBQVQsRUFBZ0M7QUFDNUJNLG9CQUFZLENBQUMsS0FBS04scUJBQU4sQ0FBWjtBQUNBLGFBQUtBLHFCQUFMLEdBQTZCLElBQTdCO0FBQ0g7O0FBQ0QsVUFBSSxLQUFLQyxzQkFBVCxFQUFpQztBQUM3Qk0scUJBQWEsQ0FBQyxLQUFLTixzQkFBTixDQUFiO0FBQ0EsYUFBS0Esc0JBQUwsR0FBOEIsSUFBOUI7QUFDSDs7QUFDRCxXQUFLRSxvQkFBTDtBQUNBLFdBQUtFLHNCQUFMLEdBQThCLEtBQTlCO0FBQ0g7QUFDSixHQWJEOztBQWNBckQsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZXNxRCxtQkFBZixHQUFxQyxVQUFVbDlCLFdBQVYsRUFBdUIsQ0FDeEQ7QUFDSCxHQUZELENBcFB3QyxDQXVQeEM7OztBQUNBcTZCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWU2cUQsa0JBQWYsR0FBb0MsVUFBVWx0RCxJQUFWLEVBQWdCLENBQ2hEO0FBQ0gsR0FGRCxDQXhQd0MsQ0EyUHhDOzs7QUFDQThwRCxNQUFJLENBQUN6bkQsU0FBTCxDQUFlNHFELG9CQUFmLEdBQXNDLFlBQVksQ0FDOUM7QUFDSCxHQUZEO0FBR0E7Ozs7QUFFQW5ELE1BQUksQ0FBQ3puRCxTQUFMLENBQWV3OEMsU0FBZixHQUEyQixVQUFVcGUsTUFBVixFQUFrQjtBQUN6QyxRQUFJNnNCLFlBQVksR0FBRyxLQUFLQSxZQUFMLEtBQXNCLEtBQUtBLFlBQUwsR0FBb0IsRUFBMUMsQ0FBbkI7O0FBQ0FuekMsWUFBUSxDQUFDbXpDLFlBQUQsRUFBZTdzQixNQUFmLENBQVI7QUFDSCxHQUhEOztBQUlBcXBCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVvOUMsU0FBZixHQUEyQixVQUFVTCxRQUFWLEVBQW9CO0FBQzNDLFNBQUttTyxpQkFBTCxDQUF1Qm5PLFFBQXZCO0FBQ0EsU0FBS2tPLFlBQUwsR0FBb0IsSUFBcEI7QUFDSCxHQUhEOztBQUlBeEQsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZWtyRCxpQkFBZixHQUFtQyxVQUFVbk8sUUFBVixFQUFvQjtBQUNuRCxTQUFLc0csV0FBTCxDQUFpQixLQUFLNEgsWUFBTCxJQUFxQixFQUF0QyxFQUEwQ2xPLFFBQTFDO0FBQ0gsR0FGRDs7QUFHQTBLLE1BQUksQ0FBQ3puRCxTQUFMLENBQWV5OEMsV0FBZixHQUE2QixZQUFZO0FBQ3JDLFFBQUlyZSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxRQUFJLEtBQUtsN0IsS0FBTCxDQUFXa3FCLFdBQWYsRUFBNEI7QUFBRTtBQUMxQnRWLGNBQVEsQ0FBQ3NtQixNQUFELEVBQVMsS0FBSytzQixlQUFMLEVBQVQsQ0FBUjtBQUNIOztBQUNELFdBQU8vc0IsTUFBUDtBQUNILEdBTkQ7O0FBT0FxcEIsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZXFqRCxXQUFmLEdBQTZCLFVBQVVqbEIsTUFBVixFQUFrQjJlLFFBQWxCLEVBQTRCO0FBQ3JELFFBQUlwa0MsUUFBUSxHQUFHeWxCLE1BQU0sQ0FBQ3psQixRQUF0Qjs7QUFDQSxRQUFJQSxRQUFRLElBQUksSUFBaEIsRUFBc0I7QUFDbEIsYUFBT3lsQixNQUFNLENBQUN6bEIsUUFBZDs7QUFDQSxVQUFJLEtBQUt6VixLQUFMLENBQVdrcUIsV0FBZixFQUE0QjtBQUFFO0FBQzFCdFYsZ0JBQVEsQ0FBQ3NtQixNQUFELEVBQVMsS0FBS2d0QixpQkFBTCxDQUF1Qnp5QyxRQUF2QixDQUFULENBQVI7QUFDSDtBQUNKOztBQUNELFFBQUksS0FBS3pWLEtBQUwsQ0FBV2txQixXQUFmLEVBQTRCO0FBQUU7QUFDMUIsV0FBS2krQixlQUFMLENBQXFCanRCLE1BQXJCO0FBQ0g7QUFDSixHQVhEOztBQVlBcXBCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWVvckQsaUJBQWYsR0FBbUMsVUFBVXp5QyxRQUFWLEVBQW9CO0FBQ25ELFdBQU8sRUFBUCxDQURtRCxDQUN4QztBQUNkLEdBRkQ7O0FBR0E4dUMsTUFBSSxDQUFDem5ELFNBQUwsQ0FBZW1yRCxlQUFmLEdBQWlDLFlBQVk7QUFDekMsV0FBTyxFQUFQLENBRHlDLENBQzlCO0FBQ2QsR0FGRDs7QUFHQTFELE1BQUksQ0FBQ3puRCxTQUFMLENBQWVxckQsZUFBZixHQUFpQyxVQUFVanRCLE1BQVYsRUFBa0IsQ0FDL0M7QUFDSCxHQUZELENBclN3QyxDQXdTeEM7OztBQUNBcXBCLE1BQUksQ0FBQ3puRCxTQUFMLENBQWV1bkQsZ0JBQWYsR0FBa0MsVUFBVTV1QyxRQUFWLEVBQW9CO0FBQ2xELFNBQUswcUMsV0FBTCxDQUFpQjtBQUFFMXFDLGNBQVEsRUFBRUE7QUFBWixLQUFqQixFQUF5QyxLQUF6QztBQUNILEdBRkQ7O0FBR0EsU0FBTzh1QyxJQUFQO0FBQ0gsQ0E3U3lCLENBNlN4QmxuQixhQTdTd0IsQ0FBMUI7O0FBOFNBMUYsWUFBWSxDQUFDTixPQUFiLENBQXFCa3RCLElBQXJCO0FBQ0FBLElBQUksQ0FBQ3puRCxTQUFMLENBQWUweUMsY0FBZixHQUFnQyxLQUFoQztBQUNBK1UsSUFBSSxDQUFDem5ELFNBQUwsQ0FBZXFrRCx5QkFBZixHQUEyQ3pULG9CQUEzQzs7QUFFQSxJQUFJMGEsZUFBZTtBQUFHO0FBQWUsWUFBWTtBQUM3QyxXQUFTQSxlQUFULENBQXlCbjJDLE9BQXpCLEVBQWtDO0FBQzlCLFNBQUtnVyxJQUFMLEdBQVksRUFBWjtBQUNBLFNBQUs0NEIsV0FBTCxHQUFtQixLQUFuQjtBQUNBLFNBQUs1dUMsT0FBTCxHQUFlQSxPQUFmO0FBQ0g7O0FBQ0RtMkMsaUJBQWUsQ0FBQ3RyRCxTQUFoQixDQUEwQnVyRCxVQUExQixHQUF1QyxVQUFVcGdDLElBQVYsRUFBZ0JxZ0MsVUFBaEIsRUFBNEI7QUFDL0QsU0FBS0MsWUFBTCxHQUQrRCxDQUMxQztBQUNyQjtBQUNBOztBQUNBdGdDLFFBQUksR0FBRyxLQUFLdWdDLFlBQUwsQ0FBa0J2Z0MsSUFBbEIsRUFBd0JxZ0MsVUFBeEIsQ0FBUDtBQUNBLFNBQUtyZ0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS3dnQyxVQUFMLENBQWdCeGdDLElBQWhCLEVBQXNCcWdDLFVBQXRCO0FBQ0EsU0FBS3pILFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLNXVDLE9BQUwsQ0FBYStWLElBQWIsQ0FBa0I4VixtQkFBbEIsQ0FBc0MsS0FBSzdWLElBQTNDLEVBQWlEalYsT0FBTyxDQUFDczFDLFVBQUQsQ0FBeEQ7QUFDSCxHQVREOztBQVVBRixpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCNDFCLFFBQTFCLEdBQXFDLFVBQVVnMkIsS0FBVixFQUFpQkosVUFBakIsRUFBNkI7QUFDOUQsU0FBS3IyQyxPQUFMLENBQWErVixJQUFiLENBQWtCbVcscUJBQWxCLENBQXdDLEtBQUtsVyxJQUE3QyxFQUFtRGpWLE9BQU8sQ0FBQ3MxQyxVQUFELENBQTFEO0FBQ0EsU0FBS0ssVUFBTCxDQUFnQixLQUFLMWdDLElBQXJCO0FBQ0EsU0FBS0EsSUFBTCxHQUFZLEVBQVo7QUFDSCxHQUpELENBaEI2QyxDQXFCN0M7OztBQUNBbWdDLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEJ5ckQsWUFBMUIsR0FBeUMsWUFBWTtBQUNqRCxRQUFJbG9DLE9BQU8sR0FBRyxLQUFLcE8sT0FBTCxDQUFhb08sT0FBM0I7QUFDQSxRQUFJdW9DLGdCQUFKO0FBQ0EsUUFBSUMsZUFBSjtBQUNBLFNBQUtDLGVBQUwsR0FBdUJobkMsZUFBZSxDQUFDekIsT0FBTyxDQUFDeW9DLGVBQVIsSUFBMkIsS0FBS0Msc0JBQUwsRUFBNUIsRUFBMkQxb0MsT0FBTyxDQUFDa2tCLHFCQUFuRSxDQUF0QztBQUNBcWtCLG9CQUFnQixHQUFHdm9DLE9BQU8sQ0FBQ3VvQyxnQkFBM0I7O0FBQ0EsUUFBSUEsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDMUJBLHNCQUFnQixHQUFHLEtBQUtJLHVCQUFMLEVBQW5CLENBRDBCLENBQ3lCO0FBQ3REOztBQUNESCxtQkFBZSxHQUFHeG9DLE9BQU8sQ0FBQ3dvQyxlQUExQjs7QUFDQSxRQUFJQSxlQUFlLElBQUksSUFBdkIsRUFBNkI7QUFDekJBLHFCQUFlLEdBQUcsS0FBS0ksc0JBQUwsRUFBbEIsQ0FEeUIsQ0FDd0I7QUFDcEQ7O0FBQ0QsU0FBS0wsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLFNBQUtDLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0gsR0FmRCxDQXRCNkMsQ0FzQzdDO0FBQ0E7OztBQUNBVCxpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCMHJELFlBQTFCLEdBQXlDLFVBQVV2Z0MsSUFBVixFQUFnQnFnQyxVQUFoQixFQUE0QjtBQUNqRSxRQUFJOXJELElBQUksR0FBRyxFQUFYO0FBQ0EsUUFBSXJCLENBQUo7O0FBQ0EsUUFBSThzQixJQUFJLENBQUM3cUIsTUFBVCxFQUFpQjtBQUFFO0FBQ2Y7QUFDQSxXQUFLakMsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHOHNCLElBQUksQ0FBQzdxQixNQUFyQixFQUE2QmpDLENBQUMsRUFBOUIsRUFBa0M7QUFDOUJxQixZQUFJLElBQUksS0FBSzBzRCxhQUFMLENBQW1CamhDLElBQUksQ0FBQzlzQixDQUFELENBQXZCLEVBQTRCbXRELFVBQTVCLENBQVI7QUFDSCxPQUpZLENBS2I7QUFDQTs7O0FBQ0ExckQsb0JBQWMsQ0FBQ0osSUFBRCxDQUFkLENBQXFCOEosT0FBckIsQ0FBNkIsVUFBVS9OLEVBQVYsRUFBYzRDLENBQWQsRUFBaUI7QUFDMUMsWUFBSWt0QixHQUFHLEdBQUdKLElBQUksQ0FBQzlzQixDQUFELENBQWQ7O0FBQ0EsWUFBSTVDLEVBQUosRUFBUTtBQUNKOHZCLGFBQUcsQ0FBQzl2QixFQUFKLEdBQVNBLEVBQVQ7QUFDSDtBQUNKLE9BTEQ7QUFNQTB2QixVQUFJLEdBQUdGLGdCQUFnQixDQUFDLEtBQUs5VixPQUFMLENBQWErVixJQUFkLEVBQW9CQyxJQUFwQixFQUEwQmpWLE9BQU8sQ0FBQ3MxQyxVQUFELENBQWpDLENBQXZCO0FBQ0g7O0FBQ0QsV0FBT3JnQyxJQUFQO0FBQ0gsR0FuQkQsQ0F4QzZDLENBNEQ3Qzs7O0FBQ0FtZ0MsaUJBQWUsQ0FBQ3RyRCxTQUFoQixDQUEwQnFzRCxhQUExQixHQUEwQyxVQUFVOWdDLEdBQVYsRUFBZStnQyxXQUFmLEVBQTRCQyxXQUE1QixFQUF5Q2YsVUFBekMsRUFBcUQ7QUFDM0YsUUFBSTl4QixPQUFPLEdBQUcsQ0FDVixVQURVLEVBRVZuTyxHQUFHLENBQUNkLE9BQUosR0FBYyxVQUFkLEdBQTJCLGNBRmpCLEVBR1ZjLEdBQUcsQ0FBQ2IsS0FBSixHQUFZLFFBQVosR0FBdUIsWUFIYixFQUlacmlCLE1BSlksQ0FJTGtqQixHQUFHLENBQUNHLFVBQUosQ0FBZXRFLEVBQWYsQ0FBa0J3QyxVQUpiLENBQWQ7O0FBS0EsUUFBSTBpQyxXQUFKLEVBQWlCO0FBQ2I1eUIsYUFBTyxDQUFDbDNCLElBQVIsQ0FBYSxjQUFiO0FBQ0g7O0FBQ0QsUUFBSStwRCxXQUFKLEVBQWlCO0FBQ2I3eUIsYUFBTyxDQUFDbDNCLElBQVIsQ0FBYSxjQUFiO0FBQ0g7O0FBQ0QsUUFBSWdwRCxVQUFKLEVBQWdCO0FBQ1o5eEIsYUFBTyxDQUFDbDNCLElBQVIsQ0FBYSxXQUFiOztBQUNBLFVBQUlncEQsVUFBVSxDQUFDZ0IsVUFBZixFQUEyQjtBQUN2Qjl5QixlQUFPLENBQUNsM0IsSUFBUixDQUFhLGFBQWI7QUFDSDs7QUFDRCxVQUFJZ3BELFVBQVUsQ0FBQ2lCLFVBQWYsRUFBMkI7QUFDdkIveUIsZUFBTyxDQUFDbDNCLElBQVIsQ0FBYSxhQUFiO0FBQ0g7QUFDSjs7QUFDRCxXQUFPazNCLE9BQVA7QUFDSCxHQXRCRCxDQTdENkMsQ0FvRjdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBNHhCLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEIwc0QsV0FBMUIsR0FBd0MsVUFBVWhoQyxVQUFWLEVBQXNCNUMsU0FBdEIsRUFBaUM2akMsVUFBakMsRUFBNkM7QUFDakYsUUFBSXp4QyxHQUFHLEdBQUd3USxVQUFVLENBQUN4USxHQUFyQjtBQUFBLFFBQTBCRSxRQUFRLEdBQUdzUSxVQUFVLENBQUN0USxRQUFoRDtBQUNBLFdBQU8sS0FBS3d4QyxZQUFMLENBQWtCeHhDLFFBQVEsQ0FBQ3hFLEtBQVQsQ0FBZTlaLEtBQWpDLEVBQXdDb2UsR0FBRyxDQUFDbU4sTUFBSixHQUFhak4sUUFBUSxDQUFDeEUsS0FBVCxDQUFlN1osR0FBNUIsR0FBa0MsSUFBMUUsRUFBZ0ZtZSxHQUFHLENBQUN6QyxNQUFwRixFQUE0RnFRLFNBQTVGLEVBQXVHNmpDLFVBQXZHLEVBQW1IdnhDLFFBQVEsQ0FBQzJOLGNBQTVILEVBQTRJM04sUUFBUSxDQUFDNE4sWUFBckosQ0FBUDtBQUNILEdBSEQ7O0FBSUFzaUMsaUJBQWUsQ0FBQ3RyRCxTQUFoQixDQUEwQjRzRCxZQUExQixHQUF5QyxVQUFVOXZELEtBQVYsRUFBaUJDLEdBQWpCLEVBQXNCMGIsTUFBdEIsRUFBOEJxUSxTQUE5QixFQUF5QzZqQyxVQUF6QyxFQUFxRDVqQyxjQUFyRCxFQUFxRUMsWUFBckUsRUFBbUY7QUFDeEgsUUFBSS9SLE9BQU8sR0FBRyxLQUFLOUIsT0FBTCxDQUFhOEIsT0FBM0I7O0FBQ0EsUUFBSTZSLFNBQVMsSUFBSSxJQUFqQixFQUF1QjtBQUNuQkEsZUFBUyxHQUFHLEtBQUtrakMsZUFBakI7QUFDSDs7QUFDRCxRQUFJVyxVQUFVLElBQUksSUFBbEIsRUFBd0I7QUFDcEJBLGdCQUFVLEdBQUcsS0FBS1osZUFBbEI7QUFDSDs7QUFDRCxRQUFJLEtBQUtELGdCQUFMLElBQXlCLENBQUNyekMsTUFBOUIsRUFBc0M7QUFDbEMsVUFBSWswQyxVQUFVLElBQUk1dkQsR0FBbEIsRUFBdUI7QUFDbkIsZUFBT2thLE9BQU8sQ0FBQzZKLFdBQVIsQ0FBb0Joa0IsS0FBcEIsRUFBMkJDLEdBQTNCLEVBQWdDK3JCLFNBQWhDLEVBQTJDO0FBQzlDQyx3QkFBYyxFQUFFQSxjQUQ4QjtBQUU5Q0Msc0JBQVksRUFBRUE7QUFGZ0MsU0FBM0MsQ0FBUDtBQUlILE9BTEQsTUFNSztBQUNELGVBQU8vUixPQUFPLENBQUM0SixNQUFSLENBQWUvakIsS0FBZixFQUFzQmdzQixTQUF0QixFQUFpQztBQUNwQ0csbUJBQVMsRUFBRUY7QUFEeUIsU0FBakMsQ0FBUDtBQUdIO0FBQ0o7O0FBQ0QsV0FBTyxFQUFQO0FBQ0gsR0F0QkQ7O0FBdUJBdWlDLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEJpc0Qsc0JBQTFCLEdBQW1ELFlBQVk7QUFDM0QsV0FBTztBQUNIcjlDLFVBQUksRUFBRSxTQURIO0FBRUhFLFlBQU0sRUFBRSxTQUZMO0FBR0g0USxvQkFBYyxFQUFFO0FBSGIsS0FBUDtBQUtILEdBTkQ7O0FBT0E0ckMsaUJBQWUsQ0FBQ3RyRCxTQUFoQixDQUEwQmtzRCx1QkFBMUIsR0FBb0QsWUFBWTtBQUM1RCxXQUFPLElBQVA7QUFDSCxHQUZEOztBQUdBWixpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCbXNELHNCQUExQixHQUFtRCxZQUFZO0FBQzNELFdBQU8sSUFBUDtBQUNILEdBRkQsQ0E5SDZDLENBaUk3Qzs7O0FBQ0FiLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEI2c0QsVUFBMUIsR0FBdUMsVUFBVXpsQyxFQUFWLEVBQWM7QUFDakQsV0FBTztBQUNILDBCQUFvQkEsRUFBRSxDQUFDQyxlQURwQjtBQUVILHNCQUFnQkQsRUFBRSxDQUFDRSxXQUZoQjtBQUdIdHFCLFdBQUssRUFBRW9xQixFQUFFLENBQUN1QztBQUhQLEtBQVA7QUFLSCxHQU5EOztBQU9BMmhDLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEI4c0QsYUFBMUIsR0FBMEMsVUFBVTNoQyxJQUFWLEVBQWdCO0FBQ3RELFFBQUl0WSxLQUFLLEdBQUcsS0FBS3NDLE9BQUwsQ0FBYStWLElBQWIsQ0FBa0I2OUIsZUFBOUI7QUFDQSxRQUFJZ0UsSUFBSSxHQUFHNWhDLElBQUksQ0FBQy9pQixHQUFMLENBQVM0a0Qsa0JBQVQsQ0FBWDtBQUNBRCxRQUFJLENBQUNsdkMsSUFBTCxDQUFVLFVBQVV0SyxJQUFWLEVBQWdCQyxJQUFoQixFQUFzQjtBQUM1QixhQUFPRixtQkFBbUIsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWFYLEtBQWIsQ0FBMUI7QUFDSCxLQUZEO0FBR0EsV0FBT2s2QyxJQUFJLENBQUMza0QsR0FBTCxDQUFTLFVBQVU2a0QsQ0FBVixFQUFhO0FBQ3pCLGFBQU9BLENBQUMsQ0FBQ0MsSUFBVDtBQUNILEtBRk0sQ0FBUDtBQUdILEdBVEQ7O0FBVUE1QixpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCbXRELFlBQTFCLEdBQXlDLFVBQVVDLEtBQVYsRUFBaUI7QUFDdEQsUUFBSUEsS0FBSyxJQUFJLEtBQUtySixXQUFsQixFQUErQjtBQUMzQixXQUFLc0osZUFBTCxDQUFxQixLQUFLbGlDLElBQTFCO0FBQ0g7QUFDSixHQUpEOztBQUtBbWdDLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEJzdEQsV0FBMUIsR0FBd0MsVUFBVUYsS0FBVixFQUFpQjtBQUNyRCxRQUFJQSxLQUFLLElBQUksS0FBS3JKLFdBQWxCLEVBQStCO0FBQzNCLFdBQUt3SixjQUFMLENBQW9CLEtBQUtwaUMsSUFBekI7QUFDQSxXQUFLNDRCLFdBQUwsR0FBbUIsS0FBbkI7QUFDSDtBQUNKLEdBTEQ7O0FBTUF1SCxpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCcXRELGVBQTFCLEdBQTRDLFVBQVVsaUMsSUFBVixFQUFnQixDQUMzRCxDQUREOztBQUVBbWdDLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEJ1dEQsY0FBMUIsR0FBMkMsVUFBVXBpQyxJQUFWLEVBQWdCLENBQzFELENBREQsQ0FoSzZDLENBa0s3Qzs7O0FBQ0FtZ0MsaUJBQWUsQ0FBQ3RyRCxTQUFoQixDQUEwQnd0RCxVQUExQixHQUF1QyxVQUFVM3pDLElBQVYsRUFBZ0I7QUFDbkQsUUFBSUEsSUFBSixFQUFVO0FBQ04sV0FBSyxJQUFJaEYsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLa2QsSUFBM0IsRUFBaUN0VyxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUF6QyxFQUFpRHVVLEVBQUUsRUFBbkQsRUFBdUQ7QUFDbkQsWUFBSTBXLEdBQUcsR0FBR3RkLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBWjs7QUFDQSxZQUFJZ0YsSUFBSSxDQUFDMFIsR0FBRyxDQUFDRyxVQUFKLENBQWV0USxRQUFmLENBQXdCRSxVQUF6QixDQUFSLEVBQThDO0FBQzFDaVEsYUFBRyxDQUFDOXZCLEVBQUosQ0FBTzZILEtBQVAsQ0FBYW1xRCxVQUFiLEdBQTBCLFFBQTFCO0FBQ0g7QUFDSjtBQUNKO0FBQ0osR0FURDs7QUFVQW5DLGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEIwdEQsVUFBMUIsR0FBdUMsVUFBVTd6QyxJQUFWLEVBQWdCO0FBQ25ELFFBQUlBLElBQUosRUFBVTtBQUNOLFdBQUssSUFBSWhGLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcsS0FBS2tkLElBQTNCLEVBQWlDdFcsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBekMsRUFBaUR1VSxFQUFFLEVBQW5ELEVBQXVEO0FBQ25ELFlBQUkwVyxHQUFHLEdBQUd0ZCxFQUFFLENBQUM0RyxFQUFELENBQVo7O0FBQ0EsWUFBSWdGLElBQUksQ0FBQzBSLEdBQUcsQ0FBQ0csVUFBSixDQUFldFEsUUFBZixDQUF3QkUsVUFBekIsQ0FBUixFQUE4QztBQUMxQ2lRLGFBQUcsQ0FBQzl2QixFQUFKLENBQU82SCxLQUFQLENBQWFtcUQsVUFBYixHQUEwQixFQUExQjtBQUNIO0FBQ0o7QUFDSjtBQUNKLEdBVEQ7O0FBVUFuQyxpQkFBZSxDQUFDdHJELFNBQWhCLENBQTBCMnRELGtCQUExQixHQUErQyxVQUFVcnlDLFVBQVYsRUFBc0I7QUFDakUsUUFBSUEsVUFBSixFQUFnQjtBQUNaLFdBQUssSUFBSXpHLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcsS0FBS2tkLElBQTNCLEVBQWlDdFcsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBekMsRUFBaUR1VSxFQUFFLEVBQW5ELEVBQXVEO0FBQ25ELFlBQUkwVyxHQUFHLEdBQUd0ZCxFQUFFLENBQUM0RyxFQUFELENBQVo7QUFDQSxZQUFJaVksYUFBYSxHQUFHdkIsR0FBRyxDQUFDRyxVQUFKLENBQWV0USxRQUFuQzs7QUFDQSxZQUFJMFIsYUFBYSxJQUFJQSxhQUFhLENBQUN4UixVQUFkLEtBQTZCQSxVQUE5QyxJQUNBaVEsR0FBRyxDQUFDOXZCLEVBRFIsQ0FDVztBQURYLFVBRUU7QUFDRTh2QixlQUFHLENBQUM5dkIsRUFBSixDQUFPc0gsU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsYUFBckI7QUFDSDtBQUNKO0FBQ0o7QUFDSixHQVpEOztBQWFBc29ELGlCQUFlLENBQUN0ckQsU0FBaEIsQ0FBMEI0dEQsb0JBQTFCLEdBQWlELFVBQVV0eUMsVUFBVixFQUFzQjtBQUNuRSxRQUFJQSxVQUFKLEVBQWdCO0FBQ1osV0FBSyxJQUFJekcsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLa2QsSUFBM0IsRUFBaUN0VyxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUF6QyxFQUFpRHVVLEVBQUUsRUFBbkQsRUFBdUQ7QUFDbkQsWUFBSTBXLEdBQUcsR0FBR3RkLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBWjs7QUFDQSxZQUFJMFcsR0FBRyxDQUFDOXZCLEVBQVIsRUFBWTtBQUFFO0FBQ1Y4dkIsYUFBRyxDQUFDOXZCLEVBQUosQ0FBT3NILFNBQVAsQ0FBaUJyRSxNQUFqQixDQUF3QixhQUF4QjtBQUNIO0FBQ0o7QUFDSjtBQUNKLEdBVEQ7O0FBVUEsU0FBTzRzRCxlQUFQO0FBQ0gsQ0EvTW9DLEVBQXJDLEMsQ0FnTkE7OztBQUNBLFNBQVMwQixrQkFBVCxDQUE0QnpoQyxHQUE1QixFQUFpQztBQUM3QixNQUFJeFMsUUFBUSxHQUFHd1MsR0FBRyxDQUFDRyxVQUFKLENBQWV4USxHQUE5QjtBQUNBLE1BQUl0RSxLQUFLLEdBQUcyVSxHQUFHLENBQUNHLFVBQUosQ0FBZXRRLFFBQWYsQ0FBd0J4RSxLQUFwQztBQUNBLE1BQUk5WixLQUFLLEdBQUc4WixLQUFLLENBQUM5WixLQUFOLEdBQWM4WixLQUFLLENBQUM5WixLQUFOLENBQVl5TixPQUFaLEVBQWQsR0FBc0MsQ0FBbEQsQ0FINkIsQ0FHd0I7O0FBQ3JELE1BQUl4TixHQUFHLEdBQUc2WixLQUFLLENBQUM3WixHQUFOLEdBQVk2WixLQUFLLENBQUM3WixHQUFOLENBQVV3TixPQUFWLEVBQVosR0FBa0MsQ0FBNUMsQ0FKNkIsQ0FJa0I7O0FBQy9DLFNBQU91TixRQUFRLENBQUMsRUFBRCxFQUFLaUIsUUFBUSxDQUFDMk8sYUFBZCxFQUE2QjNPLFFBQTdCLEVBQXVDO0FBQUUvYyxNQUFFLEVBQUUrYyxRQUFRLENBQUNzTixRQUFmO0FBQXlCdnBCLFNBQUssRUFBRUEsS0FBaEM7QUFDbERDLE9BQUcsRUFBRUEsR0FENkM7QUFDeEM0YixZQUFRLEVBQUU1YixHQUFHLEdBQUdELEtBRHdCO0FBQ2pCMmIsVUFBTSxFQUFFeEMsTUFBTSxDQUFDOEMsUUFBUSxDQUFDTixNQUFWLENBREc7QUFDZ0J5MEMsUUFBSSxFQUFFM2hDLEdBRHRCLENBQzBCOztBQUQxQixHQUF2QyxDQUFmO0FBR0g7O0FBRUQsSUFBSXNpQyxZQUFZO0FBQUc7QUFBZSxZQUFZO0FBQzFDLFdBQVNBLFlBQVQsQ0FBc0IxNEMsT0FBdEIsRUFBK0I7QUFDM0IsU0FBSzI0QyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUs1NEMsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBSzY0QyxrQkFBTCxHQUEwQixFQUExQjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFDSDs7QUFDREosY0FBWSxDQUFDN3RELFNBQWIsQ0FBdUJrdUQsYUFBdkIsR0FBdUMsVUFBVXR5RCxJQUFWLEVBQWdCO0FBQ25ELFdBQU8sS0FBS3F5RCxVQUFMLENBQWdCcnlELElBQWhCLEtBQXlCLEVBQWhDO0FBQ0gsR0FGRDs7QUFHQWl5RCxjQUFZLENBQUM3dEQsU0FBYixDQUF1QnVyRCxVQUF2QixHQUFvQyxVQUFVM3ZELElBQVYsRUFBZ0J1dkIsSUFBaEIsRUFBc0I7QUFDdEQsUUFBSWxkLEVBQUo7O0FBQ0EsUUFBSWtnRCxZQUFZLEdBQUcsS0FBS3pDLFlBQUwsQ0FBa0I5dkQsSUFBbEIsRUFBd0J1dkIsSUFBeEIsQ0FBbkIsQ0FGc0QsQ0FFSjs7QUFDbEQsUUFBSWlqQyxZQUFZLEdBQUcsS0FBS3pDLFVBQUwsQ0FBZ0IvdkQsSUFBaEIsRUFBc0J1eUQsWUFBdEIsQ0FBbkI7O0FBQ0EsUUFBSUMsWUFBSixFQUFrQjtBQUNkLE9BQUNuZ0QsRUFBRSxHQUFJLEtBQUsrL0Msa0JBQUwsQ0FBd0JweUQsSUFBeEIsTUFBa0MsS0FBS295RCxrQkFBTCxDQUF3QnB5RCxJQUF4QixJQUFnQyxFQUFsRSxDQUFQLEVBQStFNEcsSUFBL0UsQ0FBb0ZtTCxLQUFwRixDQUEwRk0sRUFBMUYsRUFBOEZtZ0QsWUFBOUY7QUFDSDs7QUFDRCxTQUFLSCxVQUFMLENBQWdCcnlELElBQWhCLElBQXdCdXlELFlBQXhCOztBQUNBLFFBQUl2eUQsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDcEIsV0FBS3VaLE9BQUwsQ0FBYStWLElBQWIsQ0FBa0I4VixtQkFBbEIsQ0FBc0NtdEIsWUFBdEMsRUFBb0QsS0FBcEQsRUFEb0IsQ0FDd0M7QUFDL0Q7O0FBQ0QsU0FBS0osY0FBTCxDQUFvQm55RCxJQUFwQixJQUE0QixJQUE1QjtBQUNILEdBWkQsQ0FYMEMsQ0F3QjFDOzs7QUFDQWl5RCxjQUFZLENBQUM3dEQsU0FBYixDQUF1QjQxQixRQUF2QixHQUFrQyxVQUFVaDZCLElBQVYsRUFBZ0I7QUFDOUMsUUFBSXV2QixJQUFJLEdBQUcsS0FBSzhpQyxVQUFMLENBQWdCcnlELElBQWhCLENBQVg7O0FBQ0EsUUFBSXV2QixJQUFKLEVBQVU7QUFDTixVQUFJdnZCLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3BCLGFBQUt1WixPQUFMLENBQWErVixJQUFiLENBQWtCbVcscUJBQWxCLENBQXdDbFcsSUFBeEMsRUFBOEMsS0FBOUMsRUFEb0IsQ0FDa0M7QUFDekQ7O0FBQ0QsV0FBSzBnQyxVQUFMLENBQWdCandELElBQWhCLEVBQXNCdXZCLElBQXRCO0FBQ0g7QUFDSixHQVJELENBekIwQyxDQWtDMUM7QUFDQTs7O0FBQ0EwaUMsY0FBWSxDQUFDN3RELFNBQWIsQ0FBdUIwckQsWUFBdkIsR0FBc0MsVUFBVTl2RCxJQUFWLEVBQWdCdXZCLElBQWhCLEVBQXNCO0FBQ3hELFFBQUk2TCxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJdDNCLElBQUksR0FBRyxFQUFYO0FBQ0EsUUFBSXJCLENBQUo7O0FBQ0EsUUFBSThzQixJQUFJLENBQUM3cUIsTUFBVCxFQUFpQjtBQUNiO0FBQ0EsV0FBS2pDLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRzhzQixJQUFJLENBQUM3cUIsTUFBckIsRUFBNkJqQyxDQUFDLEVBQTlCLEVBQWtDO0FBQzlCcUIsWUFBSSxJQUFJLEtBQUswc0QsYUFBTCxDQUFtQnh3RCxJQUFuQixFQUF5QnV2QixJQUFJLENBQUM5c0IsQ0FBRCxDQUE3QixDQUFSO0FBQ0gsT0FKWSxDQUtiO0FBQ0E7OztBQUNBeUIsb0JBQWMsQ0FBQ0osSUFBRCxDQUFkLENBQXFCOEosT0FBckIsQ0FBNkIsVUFBVS9OLEVBQVYsRUFBYzRDLENBQWQsRUFBaUI7QUFDMUMsWUFBSWt0QixHQUFHLEdBQUdKLElBQUksQ0FBQzlzQixDQUFELENBQWQ7O0FBQ0EsWUFBSTVDLEVBQUosRUFBUTtBQUNKOHZCLGFBQUcsQ0FBQzl2QixFQUFKLEdBQVNBLEVBQVQ7QUFDSDtBQUNKLE9BTEQ7O0FBTUEsVUFBSUcsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDcEJ1dkIsWUFBSSxHQUFHRixnQkFBZ0IsQ0FBQyxLQUFLOVYsT0FBTCxDQUFhK1YsSUFBZCxFQUFvQkMsSUFBcEIsRUFBMEIsS0FBMUIsQ0FBZ0M7QUFBaEMsU0FBdkI7QUFFSCxPQWhCWSxDQWlCYjs7O0FBQ0FBLFVBQUksR0FBR0EsSUFBSSxDQUFDRyxNQUFMLENBQVksVUFBVUMsR0FBVixFQUFlO0FBQzlCLGVBQU96cEIsY0FBYyxDQUFDeXBCLEdBQUcsQ0FBQzl2QixFQUFMLEVBQVN1N0IsS0FBSyxDQUFDODJCLFVBQWYsQ0FBckI7QUFDSCxPQUZNLENBQVA7QUFHSDs7QUFDRCxXQUFPM2lDLElBQVA7QUFDSCxHQTNCRCxDQXBDMEMsQ0FnRTFDOzs7QUFDQTBpQyxjQUFZLENBQUM3dEQsU0FBYixDQUF1Qm9zRCxhQUF2QixHQUF1QyxVQUFVeHdELElBQVYsRUFBZ0IydkIsR0FBaEIsRUFBcUI7QUFDeEQsUUFBSXQ0QixHQUFHLEdBQUcsSUFBVjtBQUNBLFFBQUkyMkIsVUFBVSxHQUFHLEVBQWpCOztBQUNBLFFBQUlodUIsSUFBSSxLQUFLLFdBQVQsSUFBd0JBLElBQUksS0FBSyxlQUFyQyxFQUFzRDtBQUNsRDNJLFNBQUcsR0FBRztBQUNGLDRCQUFvQnM0QixHQUFHLENBQUNHLFVBQUosQ0FBZXRFLEVBQWYsQ0FBa0JDO0FBRHBDLE9BQU47QUFHSDs7QUFDRCxRQUFJenJCLElBQUksS0FBSyxXQUFiLEVBQTBCO0FBQ3RCZ3VCLGdCQUFVLEdBQUdBLFVBQVUsQ0FBQ3ZoQixNQUFYLENBQWtCa2pCLEdBQUcsQ0FBQ0csVUFBSixDQUFldEUsRUFBZixDQUFrQndDLFVBQXBDLENBQWI7QUFDSDs7QUFDRCxRQUFJaHVCLElBQUksS0FBSyxlQUFiLEVBQThCO0FBQzFCZ3VCLGdCQUFVLENBQUNwbkIsSUFBWCxDQUFnQixZQUFoQjtBQUNILEtBRkQsTUFHSztBQUNEb25CLGdCQUFVLENBQUNwbkIsSUFBWCxDQUFnQixRQUFRNUcsSUFBSSxDQUFDeXlELFdBQUwsRUFBeEI7QUFDSDs7QUFDRCxXQUFPLE1BQU0sS0FBS1AsVUFBWCxJQUNGbGtDLFVBQVUsQ0FBQ3RwQixNQUFYLEdBQW9CLGFBQWFzcEIsVUFBVSxDQUFDbEcsSUFBWCxDQUFnQixHQUFoQixDQUFiLEdBQW9DLEdBQXhELEdBQThELEVBRDVELEtBRUZ6d0IsR0FBRyxHQUFHLGFBQWFvL0IsUUFBUSxDQUFDcC9CLEdBQUQsQ0FBckIsR0FBNkIsR0FBaEMsR0FBc0MsRUFGdkMsSUFHSCxLQUhHLEdBR0ssS0FBSzY2RCxVQUhWLEdBR3VCLEdBSDlCO0FBSUgsR0FyQkQ7O0FBc0JBRCxjQUFZLENBQUM3dEQsU0FBYixDQUF1QjZyRCxVQUF2QixHQUFvQyxVQUFVandELElBQVYsRUFBZ0J1dkIsSUFBaEIsRUFBc0I7QUFDdEQsUUFBSWlqQyxZQUFZLEdBQUcsS0FBS0osa0JBQUwsQ0FBd0JweUQsSUFBeEIsQ0FBbkI7O0FBQ0EsUUFBSXd5RCxZQUFKLEVBQWtCO0FBQ2RBLGtCQUFZLENBQUM1a0QsT0FBYixDQUFxQnRJLGFBQXJCO0FBQ0EsYUFBTyxLQUFLOHNELGtCQUFMLENBQXdCcHlELElBQXhCLENBQVA7QUFDSDtBQUNKLEdBTkQ7O0FBT0FpeUQsY0FBWSxDQUFDN3RELFNBQWIsQ0FBdUJtdEQsWUFBdkIsR0FBc0MsVUFBVUMsS0FBVixFQUFpQjtBQUNuRCxTQUFLLElBQUl4eEQsSUFBVCxJQUFpQixLQUFLcXlELFVBQXRCLEVBQWtDO0FBQzlCLFVBQUliLEtBQUssSUFBSSxLQUFLVyxjQUFMLENBQW9CbnlELElBQXBCLENBQWIsRUFBd0M7QUFDcEMsYUFBS3l4RCxlQUFMLENBQXFCLEtBQUtZLFVBQUwsQ0FBZ0JyeUQsSUFBaEIsQ0FBckI7QUFDSDtBQUNKO0FBQ0osR0FORDs7QUFPQWl5RCxjQUFZLENBQUM3dEQsU0FBYixDQUF1QnN0RCxXQUF2QixHQUFxQyxVQUFVRixLQUFWLEVBQWlCO0FBQ2xELFNBQUssSUFBSXh4RCxJQUFULElBQWlCLEtBQUtxeUQsVUFBdEIsRUFBa0M7QUFDOUIsVUFBSWIsS0FBSyxJQUFJLEtBQUtXLGNBQUwsQ0FBb0JueUQsSUFBcEIsQ0FBYixFQUF3QztBQUNwQyxhQUFLMnhELGNBQUwsQ0FBb0IsS0FBS1UsVUFBTCxDQUFnQnJ5RCxJQUFoQixDQUFwQjtBQUNIO0FBQ0o7O0FBQ0QsU0FBS215RCxjQUFMLEdBQXNCLEVBQXRCO0FBQ0gsR0FQRDs7QUFRQUYsY0FBWSxDQUFDN3RELFNBQWIsQ0FBdUJxdEQsZUFBdkIsR0FBeUMsVUFBVWxpQyxJQUFWLEVBQWdCLENBQ3hELENBREQ7O0FBRUEwaUMsY0FBWSxDQUFDN3RELFNBQWIsQ0FBdUJ1dEQsY0FBdkIsR0FBd0MsVUFBVXBpQyxJQUFWLEVBQWdCLENBQ3ZELENBREQ7O0FBRUEsU0FBTzBpQyxZQUFQO0FBQ0gsQ0FsSGlDLEVBQWxDOztBQW9IQSxJQUFJUyxpQkFBaUI7QUFBRztBQUFlLFlBQVk7QUFDL0MsV0FBU0EsaUJBQVQsQ0FBMkJ4dUMsWUFBM0IsRUFBeUM7QUFDckMsU0FBS0EsWUFBTCxHQUFvQkEsWUFBcEI7QUFDSDs7QUFDRCxTQUFPd3VDLGlCQUFQO0FBQ0gsQ0FMc0MsRUFBdkM7QUFPQTs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsSUFBSUMsZUFBZTtBQUFHO0FBQWUsWUFBWTtBQUM3QyxXQUFTQSxlQUFULENBQXlCOXlELEVBQXpCLEVBQTZCO0FBQ3pCLFNBQUsreUQsT0FBTCxHQUFlLElBQUkzekIsWUFBSixFQUFmO0FBQ0g7O0FBQ0QwekIsaUJBQWUsQ0FBQ3Z1RCxTQUFoQixDQUEwQnkrQixPQUExQixHQUFvQyxZQUFZLENBQy9DLENBREQ7O0FBRUE4dkIsaUJBQWUsQ0FBQ3Z1RCxTQUFoQixDQUEwQnl1RCxrQkFBMUIsR0FBK0MsVUFBVTNyRCxJQUFWLEVBQWdCLENBQzNEO0FBQ0gsR0FGRDs7QUFHQXlyRCxpQkFBZSxDQUFDdnVELFNBQWhCLENBQTBCMHVELG9CQUExQixHQUFpRCxVQUFVNXJELElBQVYsRUFBZ0IsQ0FDN0Q7QUFDSCxHQUZEOztBQUdBeXJELGlCQUFlLENBQUN2dUQsU0FBaEIsQ0FBMEIydUQsb0JBQTFCLEdBQWlELFVBQVU3ckQsSUFBVixFQUFnQixDQUM3RDtBQUNILEdBRkQ7O0FBR0EsU0FBT3lyRCxlQUFQO0FBQ0gsQ0FoQm9DLEVBQXJDOztBQWtCQSxTQUFTbEosVUFBVCxDQUFvQnVKLFNBQXBCLEVBQStCdmhCLFFBQS9CLEVBQXlDO0FBQ3JDLE1BQUlBLFFBQVEsS0FBSyxLQUFLLENBQXRCLEVBQXlCO0FBQUVBLFlBQVEsR0FBRyxFQUFYO0FBQWdCOztBQUMzQyxNQUFJcDJCLE9BQU8sR0FBRzQzQyxjQUFjLENBQUN4aEIsUUFBRCxDQUE1QjtBQUNBLE1BQUl2a0IsU0FBUyxHQUFHOUQsZUFBZSxDQUFDcW9CLFFBQUQsQ0FBL0I7QUFDQSxNQUFJeWhCLFFBQVEsR0FBRzczQyxPQUFPLENBQUN3ZCxnQkFBUixDQUF5Qm02QixTQUF6QixDQUFmOztBQUNBLE1BQUksQ0FBQ0UsUUFBTCxFQUFlO0FBQUU7QUFDYixXQUFPLEVBQVA7QUFDSDs7QUFDRCxTQUFPNzNDLE9BQU8sQ0FBQzRKLE1BQVIsQ0FBZWl1QyxRQUFRLENBQUM3aUQsTUFBeEIsRUFBZ0M2YyxTQUFoQyxFQUEyQztBQUM5Q0csYUFBUyxFQUFFNmxDLFFBQVEsQ0FBQzdsQztBQUQwQixHQUEzQyxDQUFQO0FBR0g7O0FBQ0QsU0FBU25JLFdBQVQsQ0FBcUI4RyxVQUFyQixFQUFpQ08sUUFBakMsRUFBMkNrbEIsUUFBM0MsQ0FBb0Q7QUFBcEQsRUFDRTtBQUNFLE1BQUlwMkIsT0FBTyxHQUFHNDNDLGNBQWMsQ0FBQyxPQUFPeGhCLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0NBLFFBQWhDLEdBQTJDQSxRQUEzQyxHQUFzRCxFQUF2RCxDQUE1QixDQURGLENBQzBGOztBQUN4RixNQUFJdmtCLFNBQVMsR0FBRzlELGVBQWUsQ0FBQ3FvQixRQUFELEVBQVc3RixjQUFjLENBQUNDLHFCQUExQixDQUEvQjtBQUNBLE1BQUlwVCxTQUFTLEdBQUdwZCxPQUFPLENBQUN3ZCxnQkFBUixDQUF5QjdNLFVBQXpCLENBQWhCO0FBQ0EsTUFBSTJNLE9BQU8sR0FBR3RkLE9BQU8sQ0FBQ3dkLGdCQUFSLENBQXlCdE0sUUFBekIsQ0FBZDs7QUFDQSxNQUFJLENBQUNrTSxTQUFELElBQWMsQ0FBQ0UsT0FBbkIsRUFBNEI7QUFBRTtBQUMxQixXQUFPLEVBQVA7QUFDSDs7QUFDRCxTQUFPdGQsT0FBTyxDQUFDNkosV0FBUixDQUFvQnVULFNBQVMsQ0FBQ3BvQixNQUE5QixFQUFzQ3NvQixPQUFPLENBQUN0b0IsTUFBOUMsRUFBc0Q2YyxTQUF0RCxFQUFpRTtBQUNwRUMsa0JBQWMsRUFBRXNMLFNBQVMsQ0FBQ3BMLFNBRDBDO0FBRXBFRCxnQkFBWSxFQUFFdUwsT0FBTyxDQUFDdEwsU0FGOEM7QUFHcEV3bEIsa0JBQWMsRUFBRXBCLFFBQVEsQ0FBQ29CO0FBSDJDLEdBQWpFLENBQVA7QUFLSCxDLENBQ0Q7OztBQUNBLFNBQVNvZ0IsY0FBVCxDQUF3QnhoQixRQUF4QixFQUFrQztBQUM5QixNQUFJcHpDLE1BQU0sR0FBR3V4QyxXQUFXLENBQUM2QixRQUFRLENBQUNwekMsTUFBVCxJQUFtQixJQUFwQixFQUEwQjZ3QyxlQUFlLENBQUMsRUFBRCxDQUFmLENBQW9CMWlDLEdBQTlDLENBQXhCLENBRDhCLENBQzhDO0FBQzVFOztBQUNBaWxDLFVBQVEsR0FBR3YxQixRQUFRLENBQUM7QUFBRXBiLFlBQVEsRUFBRThxQyxjQUFjLENBQUM5cUMsUUFBM0I7QUFBcUN1a0Isa0JBQWMsRUFBRTtBQUFyRCxHQUFELEVBQW1Fb3NCLFFBQW5FLEVBQTZFO0FBQUVwekMsVUFBTSxFQUFFQTtBQUFWLEdBQTdFLENBQW5CO0FBQ0EsU0FBTyxJQUFJbXpDLE9BQUosQ0FBWUMsUUFBWixDQUFQO0FBQ0g7O0FBRUQsSUFBSTBoQixlQUFlLEdBQUc7QUFDbEJqNkIsV0FBUyxFQUFFL21CLGNBRE87QUFFbEI0SyxVQUFRLEVBQUU1SyxjQUZRO0FBR2xCOEosUUFBTSxFQUFFM0IsT0FIVTtBQUlsQnNFLFVBQVEsRUFBRXpHO0FBSlEsQ0FBdEI7QUFNQSxJQUFJaTdDLGtCQUFrQixHQUFHO0FBQ3JCbjNDLFFBQU0sRUFBRTtBQURhLENBQXpCOztBQUdBLFNBQVNvM0MsYUFBVCxDQUF1QnY4QixHQUF2QixFQUE0QjtBQUN4QixNQUFJOWMsYUFBYSxHQUFHLEVBQXBCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHTCxXQUFXLENBQUNrZCxHQUFELEVBQU1xOEIsZUFBTixFQUF1QkMsa0JBQXZCLEVBQTJDcDVDLGFBQTNDLENBQXpCO0FBQ0FDLFNBQU8sQ0FBQ0QsYUFBUixHQUF3QkEsYUFBeEI7QUFDQSxTQUFPQyxPQUFQO0FBQ0gsQyxDQUVEOzs7QUFDQSxTQUFTcTVDLDJCQUFULENBQXFDQyxvQkFBckMsRUFBMkQ5NEMsTUFBM0QsRUFBbUU7QUFDL0Q7QUFDQTtBQUNBLE1BQUksQ0FBQzg0QyxvQkFBRCxJQUF5Qjk0QyxNQUFNLEdBQUcsRUFBdEMsRUFBMEM7QUFDdEMsV0FBTztBQUFFMkosYUFBTyxFQUFFO0FBQVgsS0FBUCxDQURzQyxDQUNUO0FBQ2hDLEdBRkQsTUFHSyxJQUFJM0osTUFBTSxHQUFHLENBQWIsRUFBZ0I7QUFDakIsV0FBTztBQUFFMkosYUFBTyxFQUFFLE9BQVg7QUFBb0J4UixXQUFLLEVBQUUsU0FBM0I7QUFBc0NDLFNBQUcsRUFBRSxTQUEzQztBQUFzRG1SLGdCQUFVLEVBQUU7QUFBbEUsS0FBUCxDQURpQixDQUNnRTtBQUNwRixHQUZJLE1BR0E7QUFDRCxXQUFPO0FBQUVJLGFBQU8sRUFBRTtBQUFYLEtBQVAsQ0FEQyxDQUMyQjtBQUMvQjtBQUNKOztBQUNELFNBQVNvdkMsY0FBVCxDQUF3QnZhLFVBQXhCLEVBQW9Dem5CLFdBQXBDLEVBQWlEK2hDLG9CQUFqRCxFQUF1RUUsTUFBdkUsRUFBK0VDLGFBQS9FLEVBQThGbjZDLE9BQTlGLEVBQXVHbzZDLE9BQXZHLEVBQWdIQyxVQUFoSCxFQUE0SDtBQUN4SCxNQUFJdGtDLElBQUksR0FBRy9WLE9BQU8sQ0FBQytWLElBQW5CO0FBQUEsTUFBeUJqVSxPQUFPLEdBQUc5QixPQUFPLENBQUM4QixPQUEzQztBQUFBLE1BQW9Ed2lCLEtBQUssR0FBR3RrQixPQUFPLENBQUNza0IsS0FBcEU7QUFBQSxNQUEyRWxXLE9BQU8sR0FBR3BPLE9BQU8sQ0FBQ29PLE9BQTdGO0FBQ0EsTUFBSWtzQyxXQUFXLEdBQUdqeEMsbUJBQW1CLENBQUM0TyxXQUFXLENBQUNLLFdBQWIsRUFBMEJvbkIsVUFBMUIsQ0FBckMsQ0FGd0gsQ0FFNUM7O0FBQzVFLE1BQUlqckIsVUFBVSxHQUFHLENBQ2IsZUFEYSxFQUViNlAsS0FBSyxDQUFDTSxRQUFOLENBQWUsY0FBZixDQUZhLENBQWpCO0FBSUEsTUFBSWQsU0FBSjs7QUFDQSxNQUFJLE9BQU8xVixPQUFPLENBQUNtc0MsZ0JBQWYsS0FBb0MsVUFBeEMsRUFBb0Q7QUFDaER6MkIsYUFBUyxHQUFHMVYsT0FBTyxDQUFDbXNDLGdCQUFSLENBQXlCejRDLE9BQU8sQ0FBQ3FTLE1BQVIsQ0FBZXVyQixVQUFmLENBQXpCLENBQVo7QUFDSCxHQUZELE1BR0ssSUFBSSxPQUFPdHhCLE9BQU8sQ0FBQ29zQyxnQkFBZixLQUFvQyxVQUF4QyxFQUFvRDtBQUNyRDEyQixhQUFTLEdBQUc3RyxVQUFVLENBQUM3TyxPQUFPLENBQUNvc0MsZ0JBQVIsQ0FBeUIxNEMsT0FBTyxDQUFDcVMsTUFBUixDQUFldXJCLFVBQWYsQ0FBekIsQ0FBRCxDQUF0QjtBQUNILEdBRkksTUFHQTtBQUNENWIsYUFBUyxHQUFHN0csVUFBVSxDQUFDbmIsT0FBTyxDQUFDNEosTUFBUixDQUFlZzBCLFVBQWYsRUFBMkJ5YSxhQUEzQixDQUFELENBQXRCO0FBQ0gsR0FoQnVILENBaUJ4SDs7O0FBQ0EsTUFBSUgsb0JBQUosRUFBMEI7QUFDdEJ2bEMsY0FBVSxHQUFHQSxVQUFVLENBQUN2aEIsTUFBWCxFQUNiO0FBQ0E7QUFDQWt4QixpQkFBYSxDQUFDc2IsVUFBRCxFQUFhem5CLFdBQWIsRUFBMEJqWSxPQUExQixFQUFtQyxJQUFuQyxDQUhBLENBQWI7QUFJSCxHQUxELE1BTUs7QUFDRHlVLGNBQVUsQ0FBQ3BuQixJQUFYLENBQWdCLFFBQVFrSCxPQUFPLENBQUNtckMsVUFBVSxDQUFDL25DLFNBQVgsRUFBRCxDQUEvQixFQURDLENBQ3lEO0FBQzdEOztBQUNELFNBQU8sS0FDSCxhQURHLEdBQ2E4YyxVQUFVLENBQUNsRyxJQUFYLENBQWdCLEdBQWhCLENBRGIsR0FDb0MsR0FEcEMsSUFFRCtyQyxXQUFXLElBQUlOLG9CQUFoQixHQUNHLGlCQUFpQmw0QyxPQUFPLENBQUNtaUIsU0FBUixDQUFrQnliLFVBQWxCLEVBQThCO0FBQUV4YixZQUFRLEVBQUU7QUFBWixHQUE5QixDQUFqQixHQUFxRSxHQUR4RSxHQUVHLEVBSkQsS0FLRmsyQixPQUFPLEdBQUcsQ0FBVixHQUNHLGVBQWVBLE9BQWYsR0FBeUIsR0FENUIsR0FFRyxFQVBELEtBUUZDLFVBQVUsR0FDUCxNQUFNQSxVQURDLEdBRVAsRUFWRCxJQVdILEdBWEcsSUFZRkMsV0FBVyxHQUNSO0FBQ0EzMkIscUJBQW1CLENBQUM1TixJQUFELEVBQU87QUFBRXZ0QixRQUFJLEVBQUVrM0MsVUFBUjtBQUFvQjNiLFlBQVEsRUFBRSxDQUFDaTJCLG9CQUFELElBQXlCRSxNQUFNLEtBQUs7QUFBbEUsR0FBUCxFQUE4RXAyQixTQUE5RSxDQUZYLEdBR1I7QUFDQUEsV0FoQkQsSUFpQkgsT0FqQko7QUFrQkg7O0FBRUQsSUFBSTIyQixTQUFTO0FBQUc7QUFBZSxVQUFVOTBCLE1BQVYsRUFBa0I7QUFDN0NuakIsV0FBUyxDQUFDaTRDLFNBQUQsRUFBWTkwQixNQUFaLENBQVQ7O0FBQ0EsV0FBUzgwQixTQUFULENBQW1CejZDLE9BQW5CLEVBQTRCcW9DLFFBQTVCLEVBQXNDO0FBQ2xDLFFBQUl4bUIsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0Fxb0MsWUFBUSxDQUFDaitDLFNBQVQsR0FBcUIsRUFBckIsQ0FGa0MsQ0FFVDs7QUFDekJpK0MsWUFBUSxDQUFDajlDLFdBQVQsQ0FBcUJ5MkIsS0FBSyxDQUFDdjdCLEVBQU4sR0FBV2dFLGFBQWEsQ0FBQyx3QkFBd0J1M0IsS0FBSyxDQUFDeUMsS0FBTixDQUFZTSxRQUFaLENBQXFCLFdBQXJCLENBQXhCLEdBQTRELElBQTVELEdBQzFDLGdCQUQwQyxHQUN2Qi9DLEtBQUssQ0FBQ3lDLEtBQU4sQ0FBWU0sUUFBWixDQUFxQixXQUFyQixDQUR1QixHQUNhLElBRGIsR0FFMUMsaUJBRjBDLEdBRzFDLFVBSDBDLEdBSTFDLFFBSnlDLENBQTdDO0FBS0EvQyxTQUFLLENBQUM2NEIsS0FBTixHQUFjNzRCLEtBQUssQ0FBQ3Y3QixFQUFOLENBQVM0aUQsYUFBVCxDQUF1QixPQUF2QixDQUFkO0FBQ0EsV0FBT3JuQixLQUFQO0FBQ0g7O0FBQ0Q0NEIsV0FBUyxDQUFDNXZELFNBQVYsQ0FBb0J5K0IsT0FBcEIsR0FBOEIsWUFBWTtBQUN0Q3Y5QixpQkFBYSxDQUFDLEtBQUt6RixFQUFOLENBQWI7QUFDSCxHQUZEOztBQUdBbTBELFdBQVMsQ0FBQzV2RCxTQUFWLENBQW9CcEMsTUFBcEIsR0FBNkIsVUFBVXNGLEtBQVYsRUFBaUI7QUFDMUMsUUFBSTRzRCxLQUFLLEdBQUc1c0QsS0FBSyxDQUFDNHNELEtBQWxCO0FBQUEsUUFBeUJYLG9CQUFvQixHQUFHanNELEtBQUssQ0FBQ2lzRCxvQkFBdEQ7QUFDQSxRQUFJOXJDLEtBQUssR0FBRyxFQUFaOztBQUNBLFFBQUluZ0IsS0FBSyxDQUFDNnNELGVBQVYsRUFBMkI7QUFDdkIxc0MsV0FBSyxDQUFDN2dCLElBQU4sQ0FBV1UsS0FBSyxDQUFDNnNELGVBQU4sRUFBWDtBQUNIOztBQUNELFFBQUlULGFBQWEsR0FBR3RxQyxlQUFlLENBQUMsS0FBS3JJLEdBQUwsQ0FBUyxvQkFBVCxLQUNoQ3V5QywyQkFBMkIsQ0FBQ0Msb0JBQUQsRUFBdUJXLEtBQUssQ0FBQ3h2RCxNQUE3QixDQURJLENBQW5DOztBQUVBLFNBQUssSUFBSXVVLEVBQUUsR0FBRyxDQUFULEVBQVltN0MsT0FBTyxHQUFHRixLQUEzQixFQUFrQ2o3QyxFQUFFLEdBQUdtN0MsT0FBTyxDQUFDMXZELE1BQS9DLEVBQXVEdVUsRUFBRSxFQUF6RCxFQUE2RDtBQUN6RCxVQUFJbFgsSUFBSSxHQUFHcXlELE9BQU8sQ0FBQ243QyxFQUFELENBQWxCO0FBQ0F3TyxXQUFLLENBQUM3Z0IsSUFBTixDQUFXNHNELGNBQWMsQ0FBQ3p4RCxJQUFELEVBQU91RixLQUFLLENBQUNrcUIsV0FBYixFQUEwQitoQyxvQkFBMUIsRUFBZ0RXLEtBQUssQ0FBQ3h2RCxNQUF0RCxFQUE4RGd2RCxhQUE5RCxFQUE2RSxLQUFLbjZDLE9BQWxGLENBQXpCO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLcU8sS0FBVCxFQUFnQjtBQUNaSCxXQUFLLENBQUNJLE9BQU47QUFDSDs7QUFDRCxTQUFLb3NDLEtBQUwsQ0FBV3R3RCxTQUFYLEdBQXVCLFNBQVM4akIsS0FBSyxDQUFDSyxJQUFOLENBQVcsRUFBWCxDQUFULEdBQTBCLE9BQWpEO0FBQ0gsR0FoQkQ7O0FBaUJBLFNBQU9rc0MsU0FBUDtBQUNILENBbEM4QixDQWtDN0IvdkIsU0FsQzZCLENBQS9COztBQW9DQSxJQUFJb3dCLFNBQVM7QUFBRztBQUFlLFlBQVk7QUFDdkMsV0FBU0EsU0FBVCxDQUFtQnI1QyxLQUFuQixFQUEwQmlsQyxvQkFBMUIsRUFBZ0Q7QUFDNUMsUUFBSWwrQyxJQUFJLEdBQUdpWixLQUFLLENBQUM5WixLQUFqQjtBQUNBLFFBQUlDLEdBQUcsR0FBRzZaLEtBQUssQ0FBQzdaLEdBQWhCO0FBQ0EsUUFBSW16RCxPQUFPLEdBQUcsRUFBZDtBQUNBLFFBQUlKLEtBQUssR0FBRyxFQUFaO0FBQ0EsUUFBSUssUUFBUSxHQUFHLENBQUMsQ0FBaEI7O0FBQ0EsV0FBT3h5RCxJQUFJLEdBQUdaLEdBQWQsRUFBbUI7QUFBRTtBQUNqQixVQUFJOCtDLG9CQUFvQixDQUFDOUksV0FBckIsQ0FBaUNwMUMsSUFBakMsQ0FBSixFQUE0QztBQUN4Q3V5RCxlQUFPLENBQUMxdEQsSUFBUixDQUFhMnRELFFBQVEsR0FBRyxHQUF4QixFQUR3QyxDQUNWO0FBQ2pDLE9BRkQsTUFHSztBQUNEQSxnQkFBUTtBQUNSRCxlQUFPLENBQUMxdEQsSUFBUixDQUFhMnRELFFBQWI7QUFDQUwsYUFBSyxDQUFDdHRELElBQU4sQ0FBVzdFLElBQVg7QUFDSDs7QUFDREEsVUFBSSxHQUFHc00sT0FBTyxDQUFDdE0sSUFBRCxFQUFPLENBQVAsQ0FBZDtBQUNIOztBQUNELFNBQUtteUQsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0ksT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBSzNhLEdBQUwsR0FBV3VhLEtBQUssQ0FBQ3h2RCxNQUFqQjtBQUNIOztBQUNEMnZELFdBQVMsQ0FBQ2p3RCxTQUFWLENBQW9Cb3dELFVBQXBCLEdBQWlDLFVBQVV4NUMsS0FBVixFQUFpQjtBQUM5QyxRQUFJeTVDLFVBQVUsR0FBRyxLQUFLQyxlQUFMLENBQXFCMTVDLEtBQUssQ0FBQzlaLEtBQTNCLENBQWpCLENBRDhDLENBQ007O0FBQ3BELFFBQUl5ekQsU0FBUyxHQUFHLEtBQUtELGVBQUwsQ0FBcUJybUQsT0FBTyxDQUFDMk0sS0FBSyxDQUFDN1osR0FBUCxFQUFZLENBQUMsQ0FBYixDQUE1QixDQUFoQixDQUY4QyxDQUVnQjs7QUFDOUQsUUFBSXl6RCxpQkFBaUIsR0FBR3hzRCxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVlvc0QsVUFBWixDQUF4QjtBQUNBLFFBQUlJLGdCQUFnQixHQUFHenNELElBQUksQ0FBQ0UsR0FBTCxDQUFTLEtBQUtxeEMsR0FBTCxHQUFXLENBQXBCLEVBQXVCZ2IsU0FBdkIsQ0FBdkIsQ0FKOEMsQ0FLOUM7O0FBQ0FDLHFCQUFpQixHQUFHeHNELElBQUksQ0FBQzBzRCxJQUFMLENBQVVGLGlCQUFWLENBQXBCLENBTjhDLENBTUk7O0FBQ2xEQyxvQkFBZ0IsR0FBR3pzRCxJQUFJLENBQUM3TCxLQUFMLENBQVdzNEQsZ0JBQVgsQ0FBbkIsQ0FQOEMsQ0FPRzs7QUFDakQsUUFBSUQsaUJBQWlCLElBQUlDLGdCQUF6QixFQUEyQztBQUN2QyxhQUFPO0FBQ0hKLGtCQUFVLEVBQUVHLGlCQURUO0FBRUhELGlCQUFTLEVBQUVFLGdCQUZSO0FBR0hobUMsZUFBTyxFQUFFNGxDLFVBQVUsS0FBS0csaUJBSHJCO0FBSUg5bEMsYUFBSyxFQUFFNmxDLFNBQVMsS0FBS0U7QUFKbEIsT0FBUDtBQU1ILEtBUEQsTUFRSztBQUNELGFBQU8sSUFBUDtBQUNIO0FBQ0osR0FuQkQsQ0F0QnVDLENBMEN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQVIsV0FBUyxDQUFDandELFNBQVYsQ0FBb0Jzd0QsZUFBcEIsR0FBc0MsVUFBVTN5RCxJQUFWLEVBQWdCO0FBQ2xELFFBQUl1eUQsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsUUFBSVMsU0FBUyxHQUFHM3NELElBQUksQ0FBQzdMLEtBQUwsQ0FBV21TLFFBQVEsQ0FBQyxLQUFLd2xELEtBQUwsQ0FBVyxDQUFYLENBQUQsRUFBZ0JueUQsSUFBaEIsQ0FBbkIsQ0FBaEI7O0FBQ0EsUUFBSWd6RCxTQUFTLEdBQUcsQ0FBaEIsRUFBbUI7QUFDZixhQUFPVCxPQUFPLENBQUMsQ0FBRCxDQUFQLEdBQWEsQ0FBcEI7QUFDSCxLQUZELE1BR0ssSUFBSVMsU0FBUyxJQUFJVCxPQUFPLENBQUM1dkQsTUFBekIsRUFBaUM7QUFDbEMsYUFBTzR2RCxPQUFPLENBQUNBLE9BQU8sQ0FBQzV2RCxNQUFSLEdBQWlCLENBQWxCLENBQVAsR0FBOEIsQ0FBckM7QUFDSCxLQUZJLE1BR0E7QUFDRCxhQUFPNHZELE9BQU8sQ0FBQ1MsU0FBRCxDQUFkO0FBQ0g7QUFDSixHQVpEOztBQWFBLFNBQU9WLFNBQVA7QUFDSCxDQTdEOEIsRUFBL0I7O0FBK0RBLElBQUlXLFFBQVE7QUFBRztBQUFlLFlBQVk7QUFDdEMsV0FBU0EsUUFBVCxDQUFrQkMsU0FBbEIsRUFBNkJDLFlBQTdCLEVBQTJDO0FBQ3ZDLFFBQUloQixLQUFLLEdBQUdlLFNBQVMsQ0FBQ2YsS0FBdEI7QUFDQSxRQUFJaUIsVUFBSjtBQUNBLFFBQUlyakIsUUFBSjtBQUNBLFFBQUlzakIsTUFBSjs7QUFDQSxRQUFJRixZQUFKLEVBQWtCO0FBQ2Q7QUFDQXBqQixjQUFRLEdBQUdvaUIsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTaGpELFNBQVQsRUFBWDs7QUFDQSxXQUFLaWtELFVBQVUsR0FBRyxDQUFsQixFQUFxQkEsVUFBVSxHQUFHakIsS0FBSyxDQUFDeHZELE1BQXhDLEVBQWdEeXdELFVBQVUsRUFBMUQsRUFBOEQ7QUFDMUQsWUFBSWpCLEtBQUssQ0FBQ2lCLFVBQUQsQ0FBTCxDQUFrQmprRCxTQUFsQixPQUFrQzRnQyxRQUF0QyxFQUFnRDtBQUM1QztBQUNIO0FBQ0o7O0FBQ0RzakIsWUFBTSxHQUFHaHRELElBQUksQ0FBQzBzRCxJQUFMLENBQVVaLEtBQUssQ0FBQ3h2RCxNQUFOLEdBQWV5d0QsVUFBekIsQ0FBVDtBQUNILEtBVEQsTUFVSztBQUNEQyxZQUFNLEdBQUcsQ0FBVDtBQUNBRCxnQkFBVSxHQUFHakIsS0FBSyxDQUFDeHZELE1BQW5CO0FBQ0g7O0FBQ0QsU0FBSzB3RCxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLM0IsTUFBTCxHQUFjMEIsVUFBZDtBQUNBLFNBQUtGLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0ksS0FBTCxHQUFhLEtBQUtDLFVBQUwsRUFBYjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsS0FBS0MsZ0JBQUwsRUFBbkI7QUFDSDs7QUFDRFIsVUFBUSxDQUFDNXdELFNBQVQsQ0FBbUJreEQsVUFBbkIsR0FBZ0MsWUFBWTtBQUN4QyxRQUFJRyxJQUFJLEdBQUcsRUFBWDs7QUFDQSxTQUFLLElBQUlDLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUcsS0FBS04sTUFBN0IsRUFBcUNNLEdBQUcsRUFBeEMsRUFBNEM7QUFDeEMsVUFBSUwsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsV0FBSyxJQUFJTSxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHLEtBQUtsQyxNQUE3QixFQUFxQ2tDLEdBQUcsRUFBeEMsRUFBNEM7QUFDeENOLGFBQUssQ0FBQ3p1RCxJQUFOLENBQVcsS0FBS2d2RCxTQUFMLENBQWVGLEdBQWYsRUFBb0JDLEdBQXBCLENBQVg7QUFDSDs7QUFDREYsVUFBSSxDQUFDN3VELElBQUwsQ0FBVXl1RCxLQUFWO0FBQ0g7O0FBQ0QsV0FBT0ksSUFBUDtBQUNILEdBVkQ7O0FBV0FULFVBQVEsQ0FBQzV3RCxTQUFULENBQW1Cd3hELFNBQW5CLEdBQStCLFVBQVVGLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUMvQyxXQUFPO0FBQ0g1ekQsVUFBSSxFQUFFLEtBQUtrekQsU0FBTCxDQUFlZixLQUFmLENBQXFCd0IsR0FBRyxHQUFHLEtBQUtqQyxNQUFYLEdBQW9Ca0MsR0FBekM7QUFESCxLQUFQO0FBR0gsR0FKRDs7QUFLQVgsVUFBUSxDQUFDNXdELFNBQVQsQ0FBbUJveEQsZ0JBQW5CLEdBQXNDLFlBQVk7QUFDOUMsUUFBSXRCLEtBQUssR0FBRyxFQUFaOztBQUNBLFNBQUssSUFBSXlCLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUcsS0FBS2xDLE1BQTdCLEVBQXFDa0MsR0FBRyxFQUF4QyxFQUE0QztBQUN4Q3pCLFdBQUssQ0FBQ3R0RCxJQUFOLENBQVcsS0FBS3l1RCxLQUFMLENBQVcsQ0FBWCxFQUFjTSxHQUFkLEVBQW1CNXpELElBQTlCO0FBQ0g7O0FBQ0QsV0FBT215RCxLQUFQO0FBQ0gsR0FORDs7QUFPQWMsVUFBUSxDQUFDNXdELFNBQVQsQ0FBbUJvd0QsVUFBbkIsR0FBZ0MsVUFBVXg1QyxLQUFWLEVBQWlCO0FBQzdDLFFBQUl5NEMsTUFBTSxHQUFHLEtBQUtBLE1BQWxCO0FBQ0EsUUFBSW9DLFNBQVMsR0FBRyxLQUFLWixTQUFMLENBQWVULFVBQWYsQ0FBMEJ4NUMsS0FBMUIsQ0FBaEI7QUFDQSxRQUFJdVUsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsUUFBSXNtQyxTQUFKLEVBQWU7QUFDWCxVQUFJcEIsVUFBVSxHQUFHb0IsU0FBUyxDQUFDcEIsVUFBM0I7QUFBQSxVQUF1Q0UsU0FBUyxHQUFHa0IsU0FBUyxDQUFDbEIsU0FBN0Q7QUFDQSxVQUFJbUIsS0FBSyxHQUFHckIsVUFBWjs7QUFDQSxhQUFPcUIsS0FBSyxJQUFJbkIsU0FBaEIsRUFBMkI7QUFDdkIsWUFBSWUsR0FBRyxHQUFHdHRELElBQUksQ0FBQzdMLEtBQUwsQ0FBV3U1RCxLQUFLLEdBQUdyQyxNQUFuQixDQUFWO0FBQ0EsWUFBSXNDLFNBQVMsR0FBRzN0RCxJQUFJLENBQUNFLEdBQUwsQ0FBUyxDQUFDb3RELEdBQUcsR0FBRyxDQUFQLElBQVlqQyxNQUFyQixFQUE2QmtCLFNBQVMsR0FBRyxDQUF6QyxDQUFoQjtBQUNBcGxDLFlBQUksQ0FBQzNvQixJQUFMLENBQVU7QUFDTjh1RCxhQUFHLEVBQUVBLEdBREM7QUFFTk0sa0JBQVEsRUFBRUYsS0FBSyxHQUFHckMsTUFGWjtBQUdOd0MsaUJBQU8sRUFBRSxDQUFDRixTQUFTLEdBQUcsQ0FBYixJQUFrQnRDLE1BSHJCO0FBSU41a0MsaUJBQU8sRUFBRWduQyxTQUFTLENBQUNobkMsT0FBVixJQUFxQmluQyxLQUFLLEtBQUtyQixVQUpsQztBQUtOM2xDLGVBQUssRUFBRSttQyxTQUFTLENBQUMvbUMsS0FBVixJQUFvQmluQyxTQUFTLEdBQUcsQ0FBYixLQUFvQnBCO0FBTHhDLFNBQVY7QUFPQW1CLGFBQUssR0FBR0MsU0FBUjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT3htQyxJQUFQO0FBQ0gsR0FyQkQ7O0FBc0JBLFNBQU95bEMsUUFBUDtBQUNILENBeEU2QixFQUE5Qjs7QUEwRUEsSUFBSWtCLE1BQU07QUFBRztBQUFlLFlBQVk7QUFDcEMsV0FBU0EsTUFBVCxHQUFrQjtBQUNkLFNBQUtDLGtCQUFMLEdBQTBCN3lDLE9BQU8sQ0FBQyxLQUFLOHlDLG1CQUFOLENBQWpDO0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIveUMsT0FBTyxDQUFDLEtBQUtnekMsY0FBTixDQUFqQztBQUNBLFNBQUtyb0MsZUFBTCxHQUF1QjNLLE9BQU8sQ0FBQyxLQUFLaXpDLGdCQUFOLENBQTlCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQmx6QyxPQUFPLENBQUMsS0FBS216QyxpQkFBTixDQUE3QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCcHpDLE9BQU8sQ0FBQyxLQUFLbXpDLGlCQUFOLENBQS9CO0FBQ0g7O0FBQ0RQLFFBQU0sQ0FBQzl4RCxTQUFQLENBQWlCdXlELFVBQWpCLEdBQThCLFVBQVVydkQsS0FBVixFQUFpQmtxQixXQUFqQixFQUE4QjdXLGdCQUE5QixFQUFnRHdpQixTQUFoRCxFQUEyRDtBQUNyRixRQUFJeTVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUkzOUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDMjlDLGVBQVMsQ0FBQzM5QyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJaVYsWUFBWSxHQUFHNW1CLEtBQUssQ0FBQzRtQixZQUF6QjtBQUNBLFFBQUkyb0MsU0FBUyxHQUFHLEtBQUs1b0MsZUFBTCxDQUFxQmxjLEtBQXJCLENBQTJCLElBQTNCLEVBQWlDLENBQUN6SyxLQUFLLENBQUN3WCxVQUFQLEVBQW1Cb1AsWUFBbkIsRUFBaUNzRCxXQUFqQyxFQUE4QzdXLGdCQUE5QyxFQUFnRXdpQixTQUFoRSxFQUEyRTF3QixNQUEzRSxDQUFrRm1xRCxTQUFsRixDQUFqQyxDQUFoQjtBQUNBLFdBQU87QUFDSEUsdUJBQWlCLEVBQUUsS0FBS1Qsa0JBQUwsQ0FBd0J0a0QsS0FBeEIsQ0FBOEIsSUFBOUIsRUFBb0MsQ0FBQ3pLLEtBQUssQ0FBQ3lyQixhQUFQLEVBQXNCN0UsWUFBdEIsRUFBb0NpUCxTQUFwQyxFQUErQzF3QixNQUEvQyxDQUFzRG1xRCxTQUF0RCxDQUFwQyxDQURoQjtBQUVIRyxzQkFBZ0IsRUFBRSxLQUFLWixrQkFBTCxDQUF3QnBrRCxLQUF4QixDQUE4QixJQUE5QixFQUFvQyxDQUFDekssS0FBSyxDQUFDMnJCLGFBQVAsRUFBc0J6QixXQUF0QixFQUFtQzdXLGdCQUFuQyxFQUFxRHdpQixTQUFyRCxFQUFnRTF3QixNQUFoRSxDQUF1RW1xRCxTQUF2RSxDQUFwQyxDQUZmO0FBR0hJLGlCQUFXLEVBQUVILFNBQVMsQ0FBQzFuQyxFQUhwQjtBQUlIOG5DLGlCQUFXLEVBQUVKLFNBQVMsQ0FBQzNuQyxFQUpwQjtBQUtIMkQsZUFBUyxFQUFFLEtBQUsyakMsY0FBTCxDQUFvQnprRCxLQUFwQixDQUEwQixJQUExQixFQUFnQyxDQUFDekssS0FBSyxDQUFDdXJCLFNBQVAsRUFBa0IzRSxZQUFsQixFQUFnQ3NELFdBQWhDLEVBQTZDN1csZ0JBQTdDLEVBQStEd2lCLFNBQS9ELEVBQTBFMXdCLE1BQTFFLENBQWlGbXFELFNBQWpGLENBQWhDLENBTFI7QUFNSHpqQyxpQkFBVyxFQUFFLEtBQUt1akMsZ0JBQUwsQ0FBc0Iza0QsS0FBdEIsQ0FBNEIsSUFBNUIsRUFBa0MsQ0FBQ3pLLEtBQUssQ0FBQzZyQixXQUFQLEVBQW9CakYsWUFBcEIsRUFBa0NzRCxXQUFsQyxFQUErQzdXLGdCQUEvQyxFQUFpRXdpQixTQUFqRSxFQUE0RTF3QixNQUE1RSxDQUFtRm1xRCxTQUFuRixDQUFsQyxDQU5WO0FBT0gxakMsb0JBQWMsRUFBRTVyQixLQUFLLENBQUM0ckI7QUFQbkIsS0FBUCxDQVBxRixDQWVsRjtBQUNOLEdBaEJEOztBQWlCQWdqQyxRQUFNLENBQUM5eEQsU0FBUCxDQUFpQjh5RCxZQUFqQixHQUFnQyxXQUFVO0FBQzFDbjFELE1BRGdDLEVBQzFCbzdCLFNBRDBCLEVBQ2Y7QUFDYixRQUFJeTVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUkzOUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDMjlDLGVBQVMsQ0FBQzM5QyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxXQUFPLEtBQUtxOUMsY0FBTCxDQUFvQnZrRCxLQUFwQixDQUEwQixJQUExQixFQUFnQyxDQUFDO0FBQUVpSixXQUFLLEVBQUU7QUFBRTlaLGFBQUssRUFBRWEsSUFBVDtBQUFlWixXQUFHLEVBQUVtTixLQUFLLENBQUN2TSxJQUFELEVBQU8sQ0FBUDtBQUF6QixPQUFUO0FBQStDOGEsWUFBTSxFQUFFO0FBQXZELEtBQUQsRUFDbkMsRUFEbUMsRUFFbkNzZ0IsU0FGbUMsRUFFeEIxd0IsTUFGd0IsQ0FFakJtcUQsU0FGaUIsQ0FBaEMsQ0FBUDtBQUdILEdBVEQ7O0FBVUFWLFFBQU0sQ0FBQzl4RCxTQUFQLENBQWlCZ3lELG1CQUFqQixHQUF1QyxVQUFVbmpDLGFBQVYsRUFBeUJ6QixXQUF6QixFQUFzQzdXLGdCQUF0QyxFQUF3RHdpQixTQUF4RCxFQUFtRTtBQUN0RyxRQUFJeTVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUkzOUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDMjlDLGVBQVMsQ0FBQzM5QyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJLENBQUNnYSxhQUFMLEVBQW9CO0FBQ2hCLGFBQU8sRUFBUDtBQUNIOztBQUNELFdBQU8sS0FBS3NqQyxnQkFBTCxDQUFzQnhrRCxLQUF0QixDQUE0QixJQUE1QixFQUFrQyxDQUFDNE4sZUFBZSxDQUFDc1QsYUFBRCxFQUFnQmtrQyxrQkFBa0IsQ0FBQzNsQyxXQUFELEVBQWNsWCxPQUFPLENBQUNLLGdCQUFELENBQXJCLENBQWxDLEVBQTRFd2lCLFNBQVMsQ0FBQ3gvQixRQUF0RixDQUFoQixFQUNyQyxFQURxQyxFQUVyQzZ6QixXQUZxQyxFQUdyQzdXLGdCQUhxQyxFQUlyQ3dpQixTQUpxQyxFQUkxQjF3QixNQUowQixDQUluQm1xRCxTQUptQixDQUFsQyxFQUkyQjFuQyxFQUpsQztBQUtILEdBYkQ7O0FBY0FnbkMsUUFBTSxDQUFDOXhELFNBQVAsQ0FBaUJteUQsZ0JBQWpCLEdBQW9DLFVBQVV6M0MsVUFBVixFQUFzQm9QLFlBQXRCLEVBQW9Dc0QsV0FBcEMsRUFBaUQ3VyxnQkFBakQsRUFBbUV3aUIsU0FBbkUsRUFBOEU7QUFDOUcsUUFBSXk1QixTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsU0FBSyxJQUFJMzlDLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdDLFNBQVMsQ0FBQ3hVLE1BQWhDLEVBQXdDdVUsRUFBRSxFQUExQyxFQUE4QztBQUMxQzI5QyxlQUFTLENBQUMzOUMsRUFBRSxHQUFHLENBQU4sQ0FBVCxHQUFvQkMsU0FBUyxDQUFDRCxFQUFELENBQTdCO0FBQ0g7O0FBQ0QsUUFBSTZGLFVBQUosRUFBZ0I7QUFDWixVQUFJczRDLFFBQVEsR0FBR25wQyxlQUFlLENBQUNuUCxVQUFELEVBQWFvUCxZQUFiLEVBQTJCaXBDLGtCQUFrQixDQUFDM2xDLFdBQUQsRUFBY2xYLE9BQU8sQ0FBQ0ssZ0JBQUQsQ0FBckIsQ0FBN0MsRUFBdUZBLGdCQUF2RixDQUE5QjtBQUNBLGFBQU87QUFDSHVVLFVBQUUsRUFBRSxLQUFLbW9DLGdCQUFMLENBQXNCRCxRQUFRLENBQUNsb0MsRUFBL0IsRUFBbUNpTyxTQUFuQyxFQUE4Q3k1QixTQUE5QyxDQUREO0FBRUh6bkMsVUFBRSxFQUFFLEtBQUtrb0MsZ0JBQUwsQ0FBc0JELFFBQVEsQ0FBQ2pvQyxFQUEvQixFQUFtQ2dPLFNBQW5DLEVBQThDeTVCLFNBQTlDO0FBRkQsT0FBUDtBQUlILEtBTkQsTUFPSztBQUNELGFBQU87QUFBRTFuQyxVQUFFLEVBQUUsRUFBTjtBQUFVQyxVQUFFLEVBQUU7QUFBZCxPQUFQO0FBQ0g7QUFDSixHQWZEOztBQWdCQSttQyxRQUFNLENBQUM5eEQsU0FBUCxDQUFpQnF5RCxpQkFBakIsR0FBcUMsVUFBVTlqQyxXQUFWLEVBQXVCekUsWUFBdkIsRUFBcUNzRCxXQUFyQyxFQUFrRDdXLGdCQUFsRCxFQUFvRXdpQixTQUFwRSxFQUErRTtBQUNoSCxRQUFJeTVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUkzOUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDMjlDLGVBQVMsQ0FBQzM5QyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJLENBQUMwWixXQUFMLEVBQWtCO0FBQ2QsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsUUFBSXlrQyxRQUFRLEdBQUducEMsZUFBZSxDQUFDMEUsV0FBVyxDQUFDZSxhQUFiLEVBQTRCeEYsWUFBNUIsRUFBMENpcEMsa0JBQWtCLENBQUMzbEMsV0FBRCxFQUFjbFgsT0FBTyxDQUFDSyxnQkFBRCxDQUFyQixDQUE1RCxFQUFzR0EsZ0JBQXRHLENBQTlCO0FBQ0EsV0FBTztBQUNINFUsVUFBSSxFQUFFLEtBQUs4bkMsZ0JBQUwsQ0FBc0JELFFBQVEsQ0FBQ2pvQyxFQUEvQixFQUFtQ2dPLFNBQW5DLEVBQThDeTVCLFNBQTlDLENBREg7QUFFSFUsdUJBQWlCLEVBQUUza0MsV0FBVyxDQUFDc0IsY0FBWixDQUEyQnhVLFNBRjNDO0FBR0hxVSxhQUFPLEVBQUVuQixXQUFXLENBQUNtQixPQUhsQjtBQUlIeWpDLGVBQVMsRUFBRTVrQyxXQUFXLENBQUNrSztBQUpwQixLQUFQO0FBTUgsR0FmRDs7QUFnQkFxNUIsUUFBTSxDQUFDOXhELFNBQVAsQ0FBaUJreUQsY0FBakIsR0FBa0MsVUFBVXQ2QixRQUFWLEVBQW9COU4sWUFBcEIsRUFBa0NpUCxTQUFsQyxFQUE2QztBQUMzRSxRQUFJeTVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUkzOUMsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDMjlDLGVBQVMsQ0FBQzM5QyxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJLENBQUMraUIsUUFBTCxFQUFlO0FBQ1gsYUFBTyxFQUFQO0FBQ0g7O0FBQ0QsUUFBSWxNLFVBQVUsR0FBR3lxQixtQkFBbUIsQ0FBQ3ZlLFFBQUQsRUFBVzlOLFlBQVgsRUFBeUJpUCxTQUFTLENBQUN4L0IsUUFBbkMsQ0FBcEM7QUFDQSxRQUFJNHhCLElBQUksR0FBRyxLQUFLaWxDLFVBQUwsQ0FBZ0J6aUQsS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEIsQ0FBQ2lxQixRQUFRLENBQUNoaEIsS0FBVixFQUFpQnZPLE1BQWpCLENBQXdCbXFELFNBQXhCLENBQTVCLENBQVg7O0FBQ0EsU0FBSyxJQUFJdmtELEVBQUUsR0FBRyxDQUFULEVBQVkwZCxNQUFNLEdBQUdSLElBQTFCLEVBQWdDbGQsRUFBRSxHQUFHMGQsTUFBTSxDQUFDcnJCLE1BQTVDLEVBQW9EMk4sRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxVQUFJc2QsR0FBRyxHQUFHSSxNQUFNLENBQUMxZCxFQUFELENBQWhCO0FBQ0FzZCxTQUFHLENBQUN3TixTQUFKLEdBQWdCQSxTQUFoQjtBQUNBeE4sU0FBRyxDQUFDRyxVQUFKLEdBQWlCQSxVQUFqQjtBQUNIOztBQUNELFdBQU9QLElBQVA7QUFDSCxHQWhCRDtBQWlCQTs7Ozs7QUFHQTJtQyxRQUFNLENBQUM5eEQsU0FBUCxDQUFpQml6RCxnQkFBakIsR0FBb0MsVUFBVUcsV0FBVixFQUF1QnI2QixTQUF2QixFQUFrQztBQUN0RXk1QixXQURvQyxFQUN6QjtBQUNQLFFBQUlybkMsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJdFcsRUFBRSxHQUFHLENBQVQsRUFBWXcrQyxhQUFhLEdBQUdELFdBQWpDLEVBQThDditDLEVBQUUsR0FBR3crQyxhQUFhLENBQUMveUQsTUFBakUsRUFBeUV1VSxFQUFFLEVBQTNFLEVBQStFO0FBQzNFLFVBQUk2VyxVQUFVLEdBQUcybkMsYUFBYSxDQUFDeCtDLEVBQUQsQ0FBOUI7QUFDQXNXLFVBQUksQ0FBQzNvQixJQUFMLENBQVVtTCxLQUFWLENBQWdCd2QsSUFBaEIsRUFBc0IsS0FBS21vQyxlQUFMLENBQXFCNW5DLFVBQXJCLEVBQWlDcU4sU0FBakMsRUFBNEN5NUIsU0FBNUMsQ0FBdEI7QUFDSDs7QUFDRCxXQUFPcm5DLElBQVA7QUFDSCxHQVJEO0FBU0E7Ozs7O0FBR0EybUMsUUFBTSxDQUFDOXhELFNBQVAsQ0FBaUJzekQsZUFBakIsR0FBbUMsVUFBVTVuQyxVQUFWLEVBQXNCcU4sU0FBdEIsRUFBaUM7QUFDcEV5NUIsV0FEbUMsRUFDeEI7QUFDUCxRQUFJcm5DLElBQUksR0FBRyxLQUFLaWxDLFVBQUwsQ0FBZ0J6aUQsS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEIsQ0FBQytkLFVBQVUsQ0FBQzlVLEtBQVosRUFBbUJ2TyxNQUFuQixDQUEwQm1xRCxTQUExQixDQUE1QixDQUFYOztBQUNBLFNBQUssSUFBSTM5QyxFQUFFLEdBQUcsQ0FBVCxFQUFZeXNCLE1BQU0sR0FBR25XLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHeXNCLE1BQU0sQ0FBQ2hoQyxNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsVUFBSTBXLEdBQUcsR0FBRytWLE1BQU0sQ0FBQ3pzQixFQUFELENBQWhCO0FBQ0EwVyxTQUFHLENBQUN3TixTQUFKLEdBQWdCQSxTQUFoQjtBQUNBeE4sU0FBRyxDQUFDRyxVQUFKLEdBQWlCQSxVQUFqQjtBQUNBSCxTQUFHLENBQUNkLE9BQUosR0FBY2lCLFVBQVUsQ0FBQ2pCLE9BQVgsSUFBc0JjLEdBQUcsQ0FBQ2QsT0FBeEM7QUFDQWMsU0FBRyxDQUFDYixLQUFKLEdBQVlnQixVQUFVLENBQUNoQixLQUFYLElBQW9CYSxHQUFHLENBQUNiLEtBQXBDO0FBQ0g7O0FBQ0QsV0FBT1MsSUFBUDtBQUNILEdBWEQ7O0FBWUEsU0FBTzJtQyxNQUFQO0FBQ0gsQ0E5SDJCLEVBQTVCO0FBK0hBOzs7Ozs7O0FBS0EsU0FBU2lCLGtCQUFULENBQTRCM2xDLFdBQTVCLEVBQXlDbW1DLGlCQUF6QyxFQUE0RDtBQUN4RCxNQUFJMzhDLEtBQUssR0FBR3dXLFdBQVcsQ0FBQ0ssV0FBeEI7O0FBQ0EsTUFBSThsQyxpQkFBSixFQUF1QjtBQUNuQixXQUFPMzhDLEtBQVA7QUFDSDs7QUFDRCxTQUFPO0FBQ0g5WixTQUFLLEVBQUVvTixLQUFLLENBQUMwTSxLQUFLLENBQUM5WixLQUFQLEVBQWNzd0IsV0FBVyxDQUFDNGEsT0FBWixDQUFvQjk4QixZQUFsQyxDQURUO0FBRUhuTyxPQUFHLEVBQUVtTixLQUFLLENBQUMwTSxLQUFLLENBQUM3WixHQUFQLEVBQVlxd0IsV0FBVyxDQUFDNmEsT0FBWixDQUFvQi84QixZQUFwQixHQUFtQyxLQUEvQyxDQUZQLENBRTZEOztBQUY3RCxHQUFQO0FBSUgsQyxDQUVEO0FBQ0E7OztBQUNBLElBQUlzb0QsT0FBTyxHQUFHLE9BQWQ7Ozs7Ozs7Ozs7Ozs7QUMzMlFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBRUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOztBQUVBLElBQUluOEMsYUFBYSxHQUFHLFVBQVNqTSxDQUFULEVBQVkwSSxDQUFaLEVBQWU7QUFDL0J1RCxlQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBUCxJQUNYO0FBQUVDLGFBQVMsRUFBRTtBQUFiLGVBQTZCelgsS0FBN0IsSUFBc0MsVUFBVXFMLENBQVYsRUFBYTBJLENBQWIsRUFBZ0I7QUFBRTFJLEtBQUMsQ0FBQ29NLFNBQUYsR0FBYzFELENBQWQ7QUFBa0IsR0FEL0QsSUFFWixVQUFVMUksQ0FBVixFQUFhMEksQ0FBYixFQUFnQjtBQUFFLFNBQUssSUFBSTJELENBQVQsSUFBYzNELENBQWQsRUFBaUIsSUFBSUEsQ0FBQyxDQUFDNEQsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QnJNLENBQUMsQ0FBQ3FNLENBQUQsQ0FBRCxHQUFPM0QsQ0FBQyxDQUFDMkQsQ0FBRCxDQUFSO0FBQWMsR0FGOUU7O0FBR0EsU0FBT0osYUFBYSxDQUFDak0sQ0FBRCxFQUFJMEksQ0FBSixDQUFwQjtBQUNILENBTEQ7O0FBT0EsU0FBUzZELFNBQVQsQ0FBbUJ2TSxDQUFuQixFQUFzQjBJLENBQXRCLEVBQXlCO0FBQ3JCdUQsZUFBYSxDQUFDak0sQ0FBRCxFQUFJMEksQ0FBSixDQUFiOztBQUNBLFdBQVN0Z0IsRUFBVCxHQUFjO0FBQUUsU0FBS29rQixXQUFMLEdBQW1CeE0sQ0FBbkI7QUFBdUI7O0FBQ3ZDQSxHQUFDLENBQUNwTCxTQUFGLEdBQWM4VCxDQUFDLEtBQUssSUFBTixHQUFhd0QsTUFBTSxDQUFDTyxNQUFQLENBQWMvRCxDQUFkLENBQWIsSUFBaUN0Z0IsRUFBRSxDQUFDd00sU0FBSCxHQUFlOFQsQ0FBQyxDQUFDOVQsU0FBakIsRUFBNEIsSUFBSXhNLEVBQUosRUFBN0QsQ0FBZDtBQUNIOztBQUVELElBQUlza0IsUUFBUSxHQUFHLFlBQVc7QUFDdEJBLFVBQVEsR0FBR1IsTUFBTSxDQUFDUyxNQUFQLElBQWlCLFNBQVNELFFBQVQsQ0FBa0JFLENBQWxCLEVBQXFCO0FBQzdDLFNBQUssSUFBSTVKLENBQUosRUFBTy9QLENBQUMsR0FBRyxDQUFYLEVBQWN3TCxDQUFDLEdBQUdpTCxTQUFTLENBQUN4VSxNQUFqQyxFQUF5Q2pDLENBQUMsR0FBR3dMLENBQTdDLEVBQWdEeEwsQ0FBQyxFQUFqRCxFQUFxRDtBQUNqRCtQLE9BQUMsR0FBRzBHLFNBQVMsQ0FBQ3pXLENBQUQsQ0FBYjs7QUFDQSxXQUFLLElBQUlvWixDQUFULElBQWNySixDQUFkLEVBQWlCLElBQUlrSixNQUFNLENBQUN0WCxTQUFQLENBQWlCMFgsY0FBakIsQ0FBZ0N4WCxJQUFoQyxDQUFxQ2tPLENBQXJDLEVBQXdDcUosQ0FBeEMsQ0FBSixFQUFnRE8sQ0FBQyxDQUFDUCxDQUFELENBQUQsR0FBT3JKLENBQUMsQ0FBQ3FKLENBQUQsQ0FBUjtBQUNwRTs7QUFDRCxXQUFPTyxDQUFQO0FBQ0gsR0FORDs7QUFPQSxTQUFPRixRQUFRLENBQUNuSyxLQUFULENBQWUsSUFBZixFQUFxQm1ILFNBQXJCLENBQVA7QUFDSCxDQVREOztBQVdBeXlCLHlEQUFNLENBQUNrc0Isb0JBQVAsR0FBOEIsR0FBOUI7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBRyxDQUF2QjtBQUNBLElBQUlDLFdBQVcsR0FBRyxDQUFsQjtBQUNBLElBQUlDLDBCQUEwQixHQUFHLEtBQWpDO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FBYUEsSUFBSUMsZUFBZTtBQUFHO0FBQWUsWUFBWTtBQUM3QyxXQUFTQSxlQUFULENBQXlCQyxXQUF6QixFQUFzQztBQUNsQyxRQUFJOThCLEtBQUssR0FBRyxJQUFaOztBQUNBLFNBQUsrOEIsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLE1BQUwsR0FBYyxJQUFkLENBSGtDLENBSWxDOztBQUNBLFNBQUtyeUQsUUFBTCxHQUFnQixFQUFoQixDQUxrQyxDQUtkOztBQUNwQixTQUFLc3lELGNBQUwsR0FBc0IsRUFBdEI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QixLQUF4QjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLElBQXpCLENBUmtDLENBUUg7QUFDL0I7O0FBQ0EsU0FBSzNILFVBQUwsR0FBa0IsS0FBbEI7QUFDQSxTQUFLNEgsZUFBTCxHQUF1QixLQUF2QjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsS0FBdEIsQ0Faa0MsQ0FhbEM7QUFDQTs7QUFDQSxTQUFLQyxlQUFMLEdBQXVCLFVBQVV4aEUsRUFBVixFQUFjO0FBQ2pDLFVBQUksQ0FBQ2trQyxLQUFLLENBQUN1OUIsaUJBQU4sRUFBRCxJQUNBQyxvQkFBb0IsQ0FBQzFoRSxFQUFELENBRHBCLElBRUFra0MsS0FBSyxDQUFDeTlCLFFBQU4sQ0FBZTNoRSxFQUFmLENBRkosRUFFd0I7QUFDcEIsWUFBSXF6RCxHQUFHLEdBQUdudkIsS0FBSyxDQUFDMDlCLG9CQUFOLENBQTJCNWhFLEVBQTNCLEVBQStCLElBQS9CLENBQVY7O0FBQ0Fra0MsYUFBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLGFBQXRCLEVBQXFDbXpELEdBQXJDOztBQUNBbnZCLGFBQUssQ0FBQzI5QixlQUFOLENBQXNCeE8sR0FBdEI7O0FBQ0EsWUFBSSxDQUFDbnZCLEtBQUssQ0FBQ2s5QixnQkFBWCxFQUE2QjtBQUN6QnJnRSxrQkFBUSxDQUFDNkgsZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUNzN0IsS0FBSyxDQUFDNDlCLGVBQTdDO0FBQ0g7O0FBQ0QvZ0UsZ0JBQVEsQ0FBQzZILGdCQUFULENBQTBCLFNBQTFCLEVBQXFDczdCLEtBQUssQ0FBQzY5QixhQUEzQztBQUNIO0FBQ0osS0FaRDs7QUFhQSxTQUFLRCxlQUFMLEdBQXVCLFVBQVU5aEUsRUFBVixFQUFjO0FBQ2pDLFVBQUlxekQsR0FBRyxHQUFHbnZCLEtBQUssQ0FBQzA5QixvQkFBTixDQUEyQjVoRSxFQUEzQixDQUFWOztBQUNBa2tDLFdBQUssQ0FBQzg5QixZQUFOLENBQW1CM08sR0FBbkI7O0FBQ0FudkIsV0FBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLGFBQXRCLEVBQXFDbXpELEdBQXJDO0FBQ0gsS0FKRDs7QUFLQSxTQUFLME8sYUFBTCxHQUFxQixVQUFVL2hFLEVBQVYsRUFBYztBQUMvQmUsY0FBUSxDQUFDaVYsbUJBQVQsQ0FBNkIsV0FBN0IsRUFBMENrdUIsS0FBSyxDQUFDNDlCLGVBQWhEO0FBQ0EvZ0UsY0FBUSxDQUFDaVYsbUJBQVQsQ0FBNkIsU0FBN0IsRUFBd0NrdUIsS0FBSyxDQUFDNjlCLGFBQTlDOztBQUNBNzlCLFdBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixXQUF0QixFQUFtQ2drQyxLQUFLLENBQUMwOUIsb0JBQU4sQ0FBMkI1aEUsRUFBM0IsQ0FBbkM7O0FBQ0Fra0MsV0FBSyxDQUFDKzlCLE9BQU4sR0FKK0IsQ0FJZDs7QUFDcEIsS0FMRCxDQWpDa0MsQ0F1Q2xDO0FBQ0E7OztBQUNBLFNBQUtDLGdCQUFMLEdBQXdCLFVBQVVsaUUsRUFBVixFQUFjO0FBQ2xDLFVBQUlra0MsS0FBSyxDQUFDeTlCLFFBQU4sQ0FBZTNoRSxFQUFmLENBQUosRUFBd0I7QUFDcEJra0MsYUFBSyxDQUFDbzlCLGVBQU4sR0FBd0IsSUFBeEI7O0FBQ0EsWUFBSWpPLEdBQUcsR0FBR252QixLQUFLLENBQUNpK0Isb0JBQU4sQ0FBMkJuaUUsRUFBM0IsRUFBK0IsSUFBL0IsQ0FBVjs7QUFDQWtrQyxhQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsYUFBdEIsRUFBcUNtekQsR0FBckM7O0FBQ0FudkIsYUFBSyxDQUFDMjlCLGVBQU4sQ0FBc0J4TyxHQUF0QixFQUpvQixDQUtwQjtBQUNBOzs7QUFDQSxZQUFJdDlDLE1BQU0sR0FBRy9WLEVBQUUsQ0FBQytWLE1BQWhCOztBQUNBLFlBQUksQ0FBQ211QixLQUFLLENBQUNrOUIsZ0JBQVgsRUFBNkI7QUFDekJyckQsZ0JBQU0sQ0FBQ25OLGdCQUFQLENBQXdCLFdBQXhCLEVBQXFDczdCLEtBQUssQ0FBQ2srQixlQUEzQztBQUNIOztBQUNEcnNELGNBQU0sQ0FBQ25OLGdCQUFQLENBQXdCLFVBQXhCLEVBQW9DczdCLEtBQUssQ0FBQ20rQixjQUExQztBQUNBdHNELGNBQU0sQ0FBQ25OLGdCQUFQLENBQXdCLGFBQXhCLEVBQXVDczdCLEtBQUssQ0FBQ20rQixjQUE3QyxFQVpvQixDQVkwQztBQUM5RDtBQUNBO0FBQ0E7O0FBQ0F2dkQsY0FBTSxDQUFDbEssZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0NzN0IsS0FBSyxDQUFDbytCLGlCQUF4QyxFQUEyRCxJQUEzRCxDQUFnRTtBQUFoRTtBQUVIO0FBQ0osS0FwQkQ7O0FBcUJBLFNBQUtGLGVBQUwsR0FBdUIsVUFBVXBpRSxFQUFWLEVBQWM7QUFDakMsVUFBSXF6RCxHQUFHLEdBQUdudkIsS0FBSyxDQUFDaStCLG9CQUFOLENBQTJCbmlFLEVBQTNCLENBQVY7O0FBQ0Fra0MsV0FBSyxDQUFDODlCLFlBQU4sQ0FBbUIzTyxHQUFuQjs7QUFDQW52QixXQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsYUFBdEIsRUFBcUNtekQsR0FBckM7QUFDSCxLQUpEOztBQUtBLFNBQUtnUCxjQUFMLEdBQXNCLFVBQVVyaUUsRUFBVixFQUFjO0FBQ2hDLFVBQUlra0MsS0FBSyxDQUFDdzFCLFVBQVYsRUFBc0I7QUFBRTtBQUNwQixZQUFJM2pELE1BQU0sR0FBRy9WLEVBQUUsQ0FBQytWLE1BQWhCO0FBQ0FBLGNBQU0sQ0FBQ0MsbUJBQVAsQ0FBMkIsV0FBM0IsRUFBd0NrdUIsS0FBSyxDQUFDaytCLGVBQTlDO0FBQ0Fyc0QsY0FBTSxDQUFDQyxtQkFBUCxDQUEyQixVQUEzQixFQUF1Q2t1QixLQUFLLENBQUNtK0IsY0FBN0M7QUFDQXRzRCxjQUFNLENBQUNDLG1CQUFQLENBQTJCLGFBQTNCLEVBQTBDa3VCLEtBQUssQ0FBQ20rQixjQUFoRDtBQUNBdnZELGNBQU0sQ0FBQ2tELG1CQUFQLENBQTJCLFFBQTNCLEVBQXFDa3VCLEtBQUssQ0FBQ28rQixpQkFBM0MsRUFBOEQsSUFBOUQsRUFMa0IsQ0FLbUQ7O0FBQ3JFcCtCLGFBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixXQUF0QixFQUFtQ2drQyxLQUFLLENBQUNpK0Isb0JBQU4sQ0FBMkJuaUUsRUFBM0IsQ0FBbkM7O0FBQ0Fra0MsYUFBSyxDQUFDKzlCLE9BQU4sR0FQa0IsQ0FPRDs7O0FBQ2pCLzlCLGFBQUssQ0FBQ285QixlQUFOLEdBQXdCLEtBQXhCO0FBQ0FpQiwwQkFBa0I7QUFDckI7QUFDSixLQVpEOztBQWFBLFNBQUtELGlCQUFMLEdBQXlCLFlBQVk7QUFDakNwK0IsV0FBSyxDQUFDcTlCLGNBQU4sR0FBdUIsSUFBdkI7QUFDSCxLQUZEOztBQUdBLFNBQUtpQixZQUFMLEdBQW9CLFVBQVV4aUUsRUFBVixFQUFjO0FBQzlCLFVBQUksQ0FBQ2trQyxLQUFLLENBQUNrOUIsZ0JBQVgsRUFBNkI7QUFDekIsWUFBSXFCLEtBQUssR0FBSTN2RCxNQUFNLENBQUMyQixXQUFQLEdBQXFCeXZCLEtBQUssQ0FBQ3crQixXQUE1QixHQUEyQ3grQixLQUFLLENBQUN5K0IsU0FBN0Q7QUFDQSxZQUFJQyxLQUFLLEdBQUk5dkQsTUFBTSxDQUFDNEIsV0FBUCxHQUFxQnd2QixLQUFLLENBQUMyK0IsV0FBNUIsR0FBMkMzK0IsS0FBSyxDQUFDNCtCLFNBQTdEOztBQUNBNStCLGFBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixhQUF0QixFQUFxQztBQUNqQ3F6RCxtQkFBUyxFQUFFdnpELEVBRHNCO0FBRWpDK2lFLGlCQUFPLEVBQUU3K0IsS0FBSyxDQUFDbzlCLGVBRmtCO0FBR2pDTCxtQkFBUyxFQUFFLzhCLEtBQUssQ0FBQys4QixTQUhnQjtBQUlqQ3dCLGVBQUssRUFBRUEsS0FKMEI7QUFLakNHLGVBQUssRUFBRUEsS0FMMEI7QUFNakN0eEQsZ0JBQU0sRUFBRW14RCxLQUFLLEdBQUd2K0IsS0FBSyxDQUFDOCtCLFNBTlc7QUFPakN6eEQsZ0JBQU0sRUFBRXF4RCxLQUFLLEdBQUcxK0IsS0FBSyxDQUFDKytCO0FBUFcsU0FBckM7QUFTSDtBQUNKLEtBZEQ7O0FBZUEsU0FBS2pDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS3RGLE9BQUwsR0FBZSxJQUFJM3pCLCtEQUFKLEVBQWY7QUFDQWk1QixlQUFXLENBQUNwNEQsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBMEMsS0FBSzQ0RCxlQUEvQztBQUNBUixlQUFXLENBQUNwNEQsZ0JBQVosQ0FBNkIsWUFBN0IsRUFBMkMsS0FBS3M1RCxnQkFBaEQsRUFBa0U7QUFBRWdCLGFBQU8sRUFBRTtBQUFYLEtBQWxFO0FBQ0FDLG1CQUFlO0FBQ2xCOztBQUNEcEMsaUJBQWUsQ0FBQzd6RCxTQUFoQixDQUEwQnkrQixPQUExQixHQUFvQyxZQUFZO0FBQzVDLFNBQUtxMUIsV0FBTCxDQUFpQmhyRCxtQkFBakIsQ0FBcUMsV0FBckMsRUFBa0QsS0FBS3dyRCxlQUF2RDtBQUNBLFNBQUtSLFdBQUwsQ0FBaUJockQsbUJBQWpCLENBQXFDLFlBQXJDLEVBQW1ELEtBQUtrc0QsZ0JBQXhELEVBQTBFO0FBQUVnQixhQUFPLEVBQUU7QUFBWCxLQUExRTtBQUNBRSxxQkFBaUI7QUFDcEIsR0FKRDs7QUFLQXJDLGlCQUFlLENBQUM3ekQsU0FBaEIsQ0FBMEJ5MEQsUUFBMUIsR0FBcUMsVUFBVTNoRSxFQUFWLEVBQWM7QUFDL0MsUUFBSWloRSxTQUFTLEdBQUcsS0FBS29DLGNBQUwsQ0FBb0JyakUsRUFBcEIsQ0FBaEI7QUFDQSxRQUFJa2hFLE1BQU0sR0FBR2xoRSxFQUFFLENBQUMrVixNQUFoQjs7QUFDQSxRQUFJa3JELFNBQVMsS0FDUixDQUFDLEtBQUtFLGNBQU4sSUFBd0JoeUQseUVBQWMsQ0FBQyt4RCxNQUFELEVBQVMsS0FBS0MsY0FBZCxDQUQ5QixDQUFiLEVBQzJFO0FBQ3ZFLFdBQUtGLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsV0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsV0FBS3hILFVBQUwsR0FBa0IsSUFBbEIsQ0FIdUUsQ0FHL0M7O0FBQ3hCLFdBQUs2SCxjQUFMLEdBQXNCLEtBQXRCO0FBQ0EsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsV0FBTyxLQUFQO0FBQ0gsR0FaRDs7QUFhQVIsaUJBQWUsQ0FBQzd6RCxTQUFoQixDQUEwQiswRCxPQUExQixHQUFvQyxZQUFZO0FBQzVDbkIsOEJBQTBCLEdBQUcsS0FBN0I7QUFDQSxTQUFLcEgsVUFBTCxHQUFrQixLQUFsQjtBQUNBLFNBQUt1SCxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjLElBQWQsQ0FKNEMsQ0FLNUM7O0FBQ0EsU0FBS29DLGtCQUFMO0FBQ0gsR0FQRDs7QUFRQXZDLGlCQUFlLENBQUM3ekQsU0FBaEIsQ0FBMEJtMkQsY0FBMUIsR0FBMkMsVUFBVXJqRSxFQUFWLEVBQWM7QUFDckQsUUFBSSxLQUFLNk8sUUFBVCxFQUFtQjtBQUNmLGFBQU9NLHlFQUFjLENBQUNuUCxFQUFFLENBQUMrVixNQUFKLEVBQVksS0FBS2xILFFBQWpCLENBQXJCO0FBQ0gsS0FGRCxNQUdLO0FBQ0QsYUFBTyxLQUFLbXlELFdBQVo7QUFDSDtBQUNKLEdBUEQ7O0FBUUFELGlCQUFlLENBQUM3ekQsU0FBaEIsQ0FBMEJ1MEQsaUJBQTFCLEdBQThDLFlBQVk7QUFDdEQsV0FBT2IsZ0JBQWdCLElBQUksS0FBS1UsZUFBaEM7QUFDSCxHQUZELENBM0k2QyxDQThJN0M7OztBQUNBUCxpQkFBZSxDQUFDN3pELFNBQWhCLENBQTBCcTJELGlCQUExQixHQUE4QyxZQUFZO0FBQ3RELFFBQUksS0FBSzdKLFVBQVQsRUFBcUI7QUFDakJvSCxnQ0FBMEIsR0FBRyxJQUE3QjtBQUNIO0FBQ0osR0FKRCxDQS9JNkMsQ0FvSjdDO0FBQ0E7OztBQUNBQyxpQkFBZSxDQUFDN3pELFNBQWhCLENBQTBCMjBELGVBQTFCLEdBQTRDLFVBQVU3aEUsRUFBVixFQUFjO0FBQ3RELFFBQUksS0FBS3FoRSxpQkFBVCxFQUE0QjtBQUN4QixXQUFLVyxZQUFMLENBQWtCaGlFLEVBQWxCO0FBQ0E4UyxZQUFNLENBQUNsSyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxLQUFLNDVELFlBQXZDLEVBQXFELElBQXJELEVBRndCLENBRW9DO0FBQy9EO0FBQ0osR0FMRDs7QUFNQXpCLGlCQUFlLENBQUM3ekQsU0FBaEIsQ0FBMEI4MEQsWUFBMUIsR0FBeUMsVUFBVWhpRSxFQUFWLEVBQWM7QUFDbkQsUUFBSSxLQUFLcWhFLGlCQUFULEVBQTRCO0FBQ3hCLFdBQUtzQixTQUFMLEdBQWlCM2lFLEVBQUUsQ0FBQ3lpRSxLQUFwQjtBQUNBLFdBQUtLLFNBQUwsR0FBaUI5aUUsRUFBRSxDQUFDNGlFLEtBQXBCO0FBQ0EsV0FBS0YsV0FBTCxHQUFtQjV2RCxNQUFNLENBQUMyQixXQUExQjtBQUNBLFdBQUtvdUQsV0FBTCxHQUFtQi92RCxNQUFNLENBQUM0QixXQUExQjtBQUNIO0FBQ0osR0FQRDs7QUFRQXFzRCxpQkFBZSxDQUFDN3pELFNBQWhCLENBQTBCbzJELGtCQUExQixHQUErQyxZQUFZO0FBQ3ZELFFBQUksS0FBS2pDLGlCQUFULEVBQTRCO0FBQ3hCdnVELFlBQU0sQ0FBQ2tELG1CQUFQLENBQTJCLFFBQTNCLEVBQXFDLEtBQUt3c0QsWUFBMUMsRUFBd0QsSUFBeEQsRUFEd0IsQ0FDdUM7QUFDbEU7QUFDSixHQUpELENBcEs2QyxDQXlLN0M7QUFDQTs7O0FBQ0F6QixpQkFBZSxDQUFDN3pELFNBQWhCLENBQTBCMDBELG9CQUExQixHQUFpRCxVQUFVNWhFLEVBQVYsRUFBY3dqRSxPQUFkLEVBQXVCO0FBQ3BFLFFBQUlseUQsTUFBTSxHQUFHLENBQWI7QUFDQSxRQUFJQyxNQUFNLEdBQUcsQ0FBYixDQUZvRSxDQUdwRTs7QUFDQSxRQUFJaXlELE9BQUosRUFBYTtBQUNULFdBQUtSLFNBQUwsR0FBaUJoakUsRUFBRSxDQUFDeWlFLEtBQXBCO0FBQ0EsV0FBS1EsU0FBTCxHQUFpQmpqRSxFQUFFLENBQUM0aUUsS0FBcEI7QUFDSCxLQUhELE1BSUs7QUFDRHR4RCxZQUFNLEdBQUd0UixFQUFFLENBQUN5aUUsS0FBSCxHQUFXLEtBQUtPLFNBQXpCO0FBQ0F6eEQsWUFBTSxHQUFHdlIsRUFBRSxDQUFDNGlFLEtBQUgsR0FBVyxLQUFLSyxTQUF6QjtBQUNIOztBQUNELFdBQU87QUFDSDFQLGVBQVMsRUFBRXZ6RCxFQURSO0FBRUgraUUsYUFBTyxFQUFFLEtBRk47QUFHSDlCLGVBQVMsRUFBRSxLQUFLQSxTQUhiO0FBSUh3QixXQUFLLEVBQUV6aUUsRUFBRSxDQUFDeWlFLEtBSlA7QUFLSEcsV0FBSyxFQUFFNWlFLEVBQUUsQ0FBQzRpRSxLQUxQO0FBTUh0eEQsWUFBTSxFQUFFQSxNQU5MO0FBT0hDLFlBQU0sRUFBRUE7QUFQTCxLQUFQO0FBU0gsR0FyQkQ7O0FBc0JBd3ZELGlCQUFlLENBQUM3ekQsU0FBaEIsQ0FBMEJpMUQsb0JBQTFCLEdBQWlELFVBQVVuaUUsRUFBVixFQUFjd2pFLE9BQWQsRUFBdUI7QUFDcEUsUUFBSUMsT0FBTyxHQUFHempFLEVBQUUsQ0FBQ3lqRSxPQUFqQjtBQUNBLFFBQUloQixLQUFKO0FBQ0EsUUFBSUcsS0FBSjtBQUNBLFFBQUl0eEQsTUFBTSxHQUFHLENBQWI7QUFDQSxRQUFJQyxNQUFNLEdBQUcsQ0FBYixDQUxvRSxDQU1wRTtBQUNBOztBQUNBLFFBQUlreUQsT0FBTyxJQUFJQSxPQUFPLENBQUNqMkQsTUFBdkIsRUFBK0I7QUFDM0JpMUQsV0FBSyxHQUFHZ0IsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXaEIsS0FBbkI7QUFDQUcsV0FBSyxHQUFHYSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdiLEtBQW5CO0FBQ0gsS0FIRCxNQUlLO0FBQ0RILFdBQUssR0FBR3ppRSxFQUFFLENBQUN5aUUsS0FBWDtBQUNBRyxXQUFLLEdBQUc1aUUsRUFBRSxDQUFDNGlFLEtBQVg7QUFDSCxLQWZtRSxDQWdCcEU7OztBQUNBLFFBQUlZLE9BQUosRUFBYTtBQUNULFdBQUtSLFNBQUwsR0FBaUJQLEtBQWpCO0FBQ0EsV0FBS1EsU0FBTCxHQUFpQkwsS0FBakI7QUFDSCxLQUhELE1BSUs7QUFDRHR4RCxZQUFNLEdBQUdteEQsS0FBSyxHQUFHLEtBQUtPLFNBQXRCO0FBQ0F6eEQsWUFBTSxHQUFHcXhELEtBQUssR0FBRyxLQUFLSyxTQUF0QjtBQUNIOztBQUNELFdBQU87QUFDSDFQLGVBQVMsRUFBRXZ6RCxFQURSO0FBRUgraUUsYUFBTyxFQUFFLElBRk47QUFHSDlCLGVBQVMsRUFBRSxLQUFLQSxTQUhiO0FBSUh3QixXQUFLLEVBQUVBLEtBSko7QUFLSEcsV0FBSyxFQUFFQSxLQUxKO0FBTUh0eEQsWUFBTSxFQUFFQSxNQU5MO0FBT0hDLFlBQU0sRUFBRUE7QUFQTCxLQUFQO0FBU0gsR0FsQ0Q7O0FBbUNBLFNBQU93dkQsZUFBUDtBQUNILENBck9vQyxFQUFyQyxDLENBc09BOzs7QUFDQSxTQUFTVyxvQkFBVCxDQUE4QjFoRSxFQUE5QixFQUFrQztBQUM5QixTQUFPQSxFQUFFLENBQUN3c0QsTUFBSCxLQUFjLENBQWQsSUFBbUIsQ0FBQ3hzRCxFQUFFLENBQUMwakUsT0FBOUI7QUFDSCxDLENBQ0Q7QUFDQTs7O0FBQ0EsU0FBU25CLGtCQUFULEdBQThCO0FBQzFCM0Isa0JBQWdCO0FBQ2hCNTFELFlBQVUsQ0FBQyxZQUFZO0FBQ25CNDFELG9CQUFnQjtBQUNuQixHQUZTLEVBRVBuc0IseURBQU0sQ0FBQ2tzQixvQkFGQSxDQUFWO0FBR0gsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVN3QyxlQUFULEdBQTJCO0FBQ3ZCLE1BQUksQ0FBRXRDLFdBQVcsRUFBakIsRUFBc0I7QUFDbEIvdEQsVUFBTSxDQUFDbEssZ0JBQVAsQ0FBd0IsV0FBeEIsRUFBcUMrNkQsaUJBQXJDLEVBQXdEO0FBQUVULGFBQU8sRUFBRTtBQUFYLEtBQXhEO0FBQ0g7QUFDSjs7QUFDRCxTQUFTRSxpQkFBVCxHQUE2QjtBQUN6QixNQUFJLENBQUUsR0FBRXZDLFdBQVIsRUFBc0I7QUFDbEIvdEQsVUFBTSxDQUFDa0QsbUJBQVAsQ0FBMkIsV0FBM0IsRUFBd0MydEQsaUJBQXhDLEVBQTJEO0FBQUVULGFBQU8sRUFBRTtBQUFYLEtBQTNEO0FBQ0g7QUFDSjs7QUFDRCxTQUFTUyxpQkFBVCxDQUEyQjNqRSxFQUEzQixFQUErQjtBQUMzQixNQUFJOGdFLDBCQUFKLEVBQWdDO0FBQzVCOWdFLE1BQUUsQ0FBQ0MsY0FBSDtBQUNIO0FBQ0o7QUFFRDs7Ozs7OztBQUtBLElBQUkyakUsYUFBYTtBQUFHO0FBQWUsWUFBWTtBQUMzQyxXQUFTQSxhQUFULEdBQXlCO0FBQ3JCLFNBQUtDLFNBQUwsR0FBaUIsS0FBakIsQ0FEcUIsQ0FDRzs7QUFDeEIsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLElBQXBCLENBSnFCLENBSUs7QUFDMUI7O0FBQ0EsU0FBSy8xRCxVQUFMLEdBQWtCbE4sUUFBUSxDQUFDdVIsSUFBM0I7QUFDQSxTQUFLMnhELE1BQUwsR0FBYyxJQUFkO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixDQUF0QjtBQUNIOztBQUNETixlQUFhLENBQUMxMkQsU0FBZCxDQUF3QmxELEtBQXhCLEdBQWdDLFVBQVU4NUQsUUFBVixFQUFvQnJCLEtBQXBCLEVBQTJCRyxLQUEzQixFQUFrQztBQUM5RCxTQUFLa0IsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLRSxZQUFMLEdBQW9CLEtBQUtGLFFBQUwsQ0FBY3R4RCxxQkFBZCxFQUFwQjtBQUNBLFNBQUsyeEQsV0FBTCxHQUFtQjFCLEtBQUssR0FBRzN2RCxNQUFNLENBQUMyQixXQUFsQztBQUNBLFNBQUsydkQsV0FBTCxHQUFtQnhCLEtBQUssR0FBRzl2RCxNQUFNLENBQUM0QixXQUFsQztBQUNBLFNBQUtwRCxNQUFMLEdBQWMsQ0FBZDtBQUNBLFNBQUtDLE1BQUwsR0FBYyxDQUFkO0FBQ0EsU0FBSzh5RCxnQkFBTDtBQUNILEdBUkQ7O0FBU0FULGVBQWEsQ0FBQzEyRCxTQUFkLENBQXdCbzNELFVBQXhCLEdBQXFDLFVBQVU3QixLQUFWLEVBQWlCRyxLQUFqQixFQUF3QjtBQUN6RCxTQUFLdHhELE1BQUwsR0FBZW14RCxLQUFLLEdBQUczdkQsTUFBTSxDQUFDMkIsV0FBaEIsR0FBK0IsS0FBSzB2RCxXQUFsRDtBQUNBLFNBQUs1eUQsTUFBTCxHQUFlcXhELEtBQUssR0FBRzl2RCxNQUFNLENBQUM0QixXQUFoQixHQUErQixLQUFLMHZELFdBQWxEO0FBQ0EsU0FBS0MsZ0JBQUw7QUFDSCxHQUpELENBcEIyQyxDQXlCM0M7OztBQUNBVCxlQUFhLENBQUMxMkQsU0FBZCxDQUF3QnEzRCxZQUF4QixHQUF1QyxVQUFVdjBELElBQVYsRUFBZ0I7QUFDbkQsUUFBSUEsSUFBSixFQUFVO0FBQ04sVUFBSSxDQUFDLEtBQUs2ekQsU0FBVixFQUFxQjtBQUNqQixZQUFJLEtBQUtFLFFBQVQsRUFBbUI7QUFDZixlQUFLQSxRQUFMLENBQWN2ekQsS0FBZCxDQUFvQjhmLE9BQXBCLEdBQThCLEVBQTlCO0FBQ0g7O0FBQ0QsYUFBS3V6QyxTQUFMLEdBQWlCN3pELElBQWpCLENBSmlCLENBSU07O0FBQ3ZCLGFBQUtxMEQsZ0JBQUwsR0FMaUIsQ0FLUTtBQUM1QjtBQUNKLEtBUkQsTUFTSztBQUNELFVBQUksS0FBS1IsU0FBVCxFQUFvQjtBQUNoQixZQUFJLEtBQUtFLFFBQVQsRUFBbUI7QUFDZixlQUFLQSxRQUFMLENBQWN2ekQsS0FBZCxDQUFvQjhmLE9BQXBCLEdBQThCLE1BQTlCO0FBQ0g7O0FBQ0QsYUFBS3V6QyxTQUFMLEdBQWlCN3pELElBQWpCO0FBQ0g7QUFDSjtBQUNKLEdBbEJELENBMUIyQyxDQTZDM0M7OztBQUNBNHpELGVBQWEsQ0FBQzEyRCxTQUFkLENBQXdCczNELElBQXhCLEdBQStCLFVBQVVDLG9CQUFWLEVBQWdDanVELFFBQWhDLEVBQTBDO0FBQ3JFLFFBQUkwdEIsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSXdnQyxJQUFJLEdBQUcsWUFBWTtBQUNuQnhnQyxXQUFLLENBQUMrOUIsT0FBTjs7QUFDQXpyRCxjQUFRO0FBQ1gsS0FIRDs7QUFJQSxRQUFJaXVELG9CQUFvQixJQUNwQixLQUFLVixRQURMLElBRUEsS0FBS0YsU0FGTCxJQUdBLEtBQUtLLGNBSEwsTUFHdUI7QUFDdEIsU0FBSzV5RCxNQUFMLElBQWUsS0FBS0MsTUFKckIsQ0FBSixDQUlpQztBQUpqQyxNQUtFO0FBQ0UsYUFBS296RCxpQkFBTCxDQUF1QkQsSUFBdkIsRUFBNkIsS0FBS1IsY0FBbEM7QUFDSCxPQVBELE1BUUs7QUFDRGw1RCxnQkFBVSxDQUFDMDVELElBQUQsRUFBTyxDQUFQLENBQVY7QUFDSDtBQUNKLEdBakJEOztBQWtCQWQsZUFBYSxDQUFDMTJELFNBQWQsQ0FBd0J5M0QsaUJBQXhCLEdBQTRDLFVBQVVudUQsUUFBVixFQUFvQjB0RCxjQUFwQixFQUFvQztBQUM1RSxRQUFJSCxRQUFRLEdBQUcsS0FBS0EsUUFBcEI7QUFDQSxRQUFJYSxpQkFBaUIsR0FBRyxLQUFLZCxRQUFMLENBQWN0eEQscUJBQWQsRUFBeEIsQ0FGNEUsQ0FFYjs7QUFDL0R1eEQsWUFBUSxDQUFDdnpELEtBQVQsQ0FBZXEwRCxVQUFmLEdBQ0ksU0FBU1gsY0FBVCxHQUEwQixLQUExQixHQUNJLE9BREosR0FDY0EsY0FEZCxHQUMrQixJQUZuQztBQUdBMzNELHlFQUFVLENBQUN3M0QsUUFBRCxFQUFXO0FBQ2pCMThELFVBQUksRUFBRXU5RCxpQkFBaUIsQ0FBQ3Y5RCxJQURQO0FBRWpCdUosU0FBRyxFQUFFZzBELGlCQUFpQixDQUFDaDBEO0FBRk4sS0FBWCxDQUFWO0FBSUEyRixpRkFBa0IsQ0FBQ3d0RCxRQUFELEVBQVcsWUFBWTtBQUNyQ0EsY0FBUSxDQUFDdnpELEtBQVQsQ0FBZXEwRCxVQUFmLEdBQTRCLEVBQTVCO0FBQ0FydUQsY0FBUTtBQUNYLEtBSGlCLENBQWxCO0FBSUgsR0FkRDs7QUFlQW90RCxlQUFhLENBQUMxMkQsU0FBZCxDQUF3QiswRCxPQUF4QixHQUFrQyxZQUFZO0FBQzFDLFFBQUksS0FBSzhCLFFBQVQsRUFBbUI7QUFDZjMxRCw4RUFBYSxDQUFDLEtBQUsyMUQsUUFBTixDQUFiO0FBQ0EsV0FBS0EsUUFBTCxHQUFnQixJQUFoQjtBQUNIOztBQUNELFNBQUtELFFBQUwsR0FBZ0IsSUFBaEI7QUFDSCxHQU5EOztBQU9BRixlQUFhLENBQUMxMkQsU0FBZCxDQUF3Qm0zRCxnQkFBeEIsR0FBMkMsWUFBWTtBQUNuRCxRQUFJLEtBQUtQLFFBQUwsSUFBaUIsS0FBS0QsU0FBMUIsRUFBcUM7QUFDakN0M0QsMkVBQVUsQ0FBQyxLQUFLdTRELFdBQUwsRUFBRCxFQUFxQjtBQUMzQno5RCxZQUFJLEVBQUUsS0FBSzI4RCxZQUFMLENBQWtCMzhELElBQWxCLEdBQXlCLEtBQUtpSyxNQURUO0FBRTNCVixXQUFHLEVBQUUsS0FBS296RCxZQUFMLENBQWtCcHpELEdBQWxCLEdBQXdCLEtBQUtXO0FBRlAsT0FBckIsQ0FBVjtBQUlIO0FBQ0osR0FQRDs7QUFRQXF5RCxlQUFhLENBQUMxMkQsU0FBZCxDQUF3QjQzRCxXQUF4QixHQUFzQyxZQUFZO0FBQzlDLFFBQUlkLFlBQVksR0FBRyxLQUFLQSxZQUF4QjtBQUNBLFFBQUlELFFBQVEsR0FBRyxLQUFLQSxRQUFwQjs7QUFDQSxRQUFJLENBQUNBLFFBQUwsRUFBZTtBQUNYQSxjQUFRLEdBQUcsS0FBS0EsUUFBTCxHQUFnQixLQUFLRCxRQUFMLENBQWNpQixTQUFkLENBQXdCLElBQXhCLENBQTNCLENBRFcsQ0FDK0M7QUFDMUQ7QUFDQTs7QUFDQWhCLGNBQVEsQ0FBQzl6RCxTQUFULENBQW1CQyxHQUFuQixDQUF1QixpQkFBdkI7QUFDQTZ6RCxjQUFRLENBQUM5ekQsU0FBVCxDQUFtQkMsR0FBbkIsQ0FBdUIsYUFBdkI7QUFDQTNELDJFQUFVLENBQUN3M0QsUUFBRCxFQUFXO0FBQ2pCOXhELGdCQUFRLEVBQUUsT0FETztBQUVqQmd5RCxjQUFNLEVBQUUsS0FBS0EsTUFGSTtBQUdqQnRKLGtCQUFVLEVBQUUsRUFISztBQUlqQnFLLGlCQUFTLEVBQUUsWUFKTTtBQUtqQjk4RCxhQUFLLEVBQUU4N0QsWUFBWSxDQUFDejhELEtBQWIsR0FBcUJ5OEQsWUFBWSxDQUFDMzhELElBTHhCO0FBTWpCd04sY0FBTSxFQUFFbXZELFlBQVksQ0FBQ256RCxNQUFiLEdBQXNCbXpELFlBQVksQ0FBQ3B6RCxHQU4xQjtBQU9qQnJKLGFBQUssRUFBRSxNQVBVO0FBUWpCc0osY0FBTSxFQUFFLE1BUlM7QUFTakJvMEQsY0FBTSxFQUFFO0FBVFMsT0FBWCxDQUFWO0FBV0EsV0FBS2gzRCxVQUFMLENBQWdCUixXQUFoQixDQUE0QnMyRCxRQUE1QjtBQUNIOztBQUNELFdBQU9BLFFBQVA7QUFDSCxHQXZCRDs7QUF3QkEsU0FBT0gsYUFBUDtBQUNILENBdkhrQyxFQUFuQztBQXlIQTs7Ozs7Ozs7OztBQVFBLElBQUlzQixlQUFlO0FBQUc7QUFBZSxVQUFVbDlCLE1BQVYsRUFBa0I7QUFDbkRuakIsV0FBUyxDQUFDcWdELGVBQUQsRUFBa0JsOUIsTUFBbEIsQ0FBVDs7QUFDQSxXQUFTazlCLGVBQVQsQ0FBeUJDLGdCQUF6QixFQUEyQ0MsYUFBM0MsRUFBMEQ7QUFDdEQsUUFBSWxoQyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosS0FBcUIsSUFBakM7O0FBQ0E4MkIsU0FBSyxDQUFDcytCLFlBQU4sR0FBcUIsWUFBWTtBQUM3QnQrQixXQUFLLENBQUM2RyxTQUFOLEdBQWtCN0csS0FBSyxDQUFDaWhDLGdCQUFOLENBQXVCMTZCLFlBQXZCLEVBQWxCO0FBQ0F2RyxXQUFLLENBQUM4RyxVQUFOLEdBQW1COUcsS0FBSyxDQUFDaWhDLGdCQUFOLENBQXVCdjZCLGFBQXZCLEVBQW5COztBQUNBMUcsV0FBSyxDQUFDbWhDLGtCQUFOO0FBQ0gsS0FKRDs7QUFLQW5oQyxTQUFLLENBQUNpaEMsZ0JBQU4sR0FBeUJBLGdCQUF6QjtBQUNBamhDLFNBQUssQ0FBQ2toQyxhQUFOLEdBQXNCQSxhQUF0QjtBQUNBbGhDLFNBQUssQ0FBQzZHLFNBQU4sR0FBa0I3RyxLQUFLLENBQUNvaEMsYUFBTixHQUFzQkgsZ0JBQWdCLENBQUMxNkIsWUFBakIsRUFBeEM7QUFDQXZHLFNBQUssQ0FBQzhHLFVBQU4sR0FBbUI5RyxLQUFLLENBQUNxaEMsY0FBTixHQUF1QkosZ0JBQWdCLENBQUN2NkIsYUFBakIsRUFBMUM7QUFDQTFHLFNBQUssQ0FBQ2lILFdBQU4sR0FBb0JnNkIsZ0JBQWdCLENBQUMvNkIsY0FBakIsRUFBcEI7QUFDQWxHLFNBQUssQ0FBQ2tILFlBQU4sR0FBcUIrNUIsZ0JBQWdCLENBQUNsN0IsZUFBakIsRUFBckI7QUFDQS9GLFNBQUssQ0FBQ3h3QixXQUFOLEdBQW9CeXhELGdCQUFnQixDQUFDOTZCLGNBQWpCLEVBQXBCO0FBQ0FuRyxTQUFLLENBQUNyd0IsWUFBTixHQUFxQnN4RCxnQkFBZ0IsQ0FBQ2o3QixlQUFqQixFQUFyQjtBQUNBaEcsU0FBSyxDQUFDc2hDLFVBQU4sR0FBbUJ0aEMsS0FBSyxDQUFDdWhDLGlCQUFOLEVBQW5CLENBZnNELENBZVI7O0FBQzlDLFFBQUl2aEMsS0FBSyxDQUFDa2hDLGFBQVYsRUFBeUI7QUFDckJsaEMsV0FBSyxDQUFDd2hDLGNBQU4sR0FBdUI5OEQsZ0JBQXZCLENBQXdDLFFBQXhDLEVBQWtEczdCLEtBQUssQ0FBQ3MrQixZQUF4RDtBQUNIOztBQUNELFdBQU90K0IsS0FBUDtBQUNIOztBQUNEZ2hDLGlCQUFlLENBQUNoNEQsU0FBaEIsQ0FBMEJ5K0IsT0FBMUIsR0FBb0MsWUFBWTtBQUM1QyxRQUFJLEtBQUt5NUIsYUFBVCxFQUF3QjtBQUNwQixXQUFLTSxjQUFMLEdBQXNCMXZELG1CQUF0QixDQUEwQyxRQUExQyxFQUFvRCxLQUFLd3NELFlBQXpEO0FBQ0g7QUFDSixHQUpEOztBQUtBMEMsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQnU5QixZQUExQixHQUF5QyxZQUFZO0FBQ2pELFdBQU8sS0FBS00sU0FBWjtBQUNILEdBRkQ7O0FBR0FtNkIsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQjA5QixhQUExQixHQUEwQyxZQUFZO0FBQ2xELFdBQU8sS0FBS0ksVUFBWjtBQUNILEdBRkQ7O0FBR0FrNkIsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQis5QixZQUExQixHQUF5QyxVQUFVcjZCLEdBQVYsRUFBZTtBQUNwRCxTQUFLdTBELGdCQUFMLENBQXNCbDZCLFlBQXRCLENBQW1DcjZCLEdBQW5DOztBQUNBLFFBQUksQ0FBQyxLQUFLdzBELGFBQVYsRUFBeUI7QUFDckI7QUFDQTtBQUNBLFdBQUtyNkIsU0FBTCxHQUFpQjc1QixJQUFJLENBQUNDLEdBQUwsQ0FBU0QsSUFBSSxDQUFDRSxHQUFMLENBQVNSLEdBQVQsRUFBYyxLQUFLbzVCLGVBQUwsRUFBZCxDQUFULEVBQWdELENBQWhELENBQWpCO0FBQ0EsV0FBS3E3QixrQkFBTDtBQUNIO0FBQ0osR0FSRDs7QUFTQUgsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQmcrQixhQUExQixHQUEwQyxVQUFVdDZCLEdBQVYsRUFBZTtBQUNyRCxTQUFLdTBELGdCQUFMLENBQXNCajZCLGFBQXRCLENBQW9DdDZCLEdBQXBDOztBQUNBLFFBQUksQ0FBQyxLQUFLdzBELGFBQVYsRUFBeUI7QUFDckI7QUFDQTtBQUNBLFdBQUtwNkIsVUFBTCxHQUFrQjk1QixJQUFJLENBQUNDLEdBQUwsQ0FBU0QsSUFBSSxDQUFDRSxHQUFMLENBQVNSLEdBQVQsRUFBYyxLQUFLdTVCLGdCQUFMLEVBQWQsQ0FBVCxFQUFpRCxDQUFqRCxDQUFsQjtBQUNBLFdBQUtrN0Isa0JBQUw7QUFDSDtBQUNKLEdBUkQ7O0FBU0FILGlCQUFlLENBQUNoNEQsU0FBaEIsQ0FBMEJtOUIsY0FBMUIsR0FBMkMsWUFBWTtBQUNuRCxXQUFPLEtBQUszMkIsV0FBWjtBQUNILEdBRkQ7O0FBR0F3eEQsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQmc5QixlQUExQixHQUE0QyxZQUFZO0FBQ3BELFdBQU8sS0FBS3IyQixZQUFaO0FBQ0gsR0FGRDs7QUFHQXF4RCxpQkFBZSxDQUFDaDRELFNBQWhCLENBQTBCazlCLGNBQTFCLEdBQTJDLFlBQVk7QUFDbkQsV0FBTyxLQUFLZSxXQUFaO0FBQ0gsR0FGRDs7QUFHQSs1QixpQkFBZSxDQUFDaDRELFNBQWhCLENBQTBCKzhCLGVBQTFCLEdBQTRDLFlBQVk7QUFDcEQsV0FBTyxLQUFLbUIsWUFBWjtBQUNILEdBRkQ7O0FBR0E4NUIsaUJBQWUsQ0FBQ2g0RCxTQUFoQixDQUEwQm00RCxrQkFBMUIsR0FBK0MsWUFBWSxDQUMxRCxDQUREOztBQUVBLFNBQU9ILGVBQVA7QUFDSCxDQW5Fb0MsQ0FtRW5DbjdCLG1FQW5FbUMsQ0FBckM7O0FBb0VBLElBQUk0N0Isc0JBQXNCO0FBQUc7QUFBZSxVQUFVMzlCLE1BQVYsRUFBa0I7QUFDMURuakIsV0FBUyxDQUFDOGdELHNCQUFELEVBQXlCMzlCLE1BQXpCLENBQVQ7O0FBQ0EsV0FBUzI5QixzQkFBVCxDQUFnQ2g5RCxFQUFoQyxFQUFvQ3k4RCxhQUFwQyxFQUFtRDtBQUMvQyxXQUFPcDlCLE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQixJQUFJMDlCLDBFQUFKLENBQTRCbmlDLEVBQTVCLENBQWxCLEVBQW1EeThELGFBQW5ELEtBQXFFLElBQTVFO0FBQ0g7O0FBQ0RPLHdCQUFzQixDQUFDejRELFNBQXZCLENBQWlDdzRELGNBQWpDLEdBQWtELFlBQVk7QUFDMUQsV0FBTyxLQUFLUCxnQkFBTCxDQUFzQng4RCxFQUE3QjtBQUNILEdBRkQ7O0FBR0FnOUQsd0JBQXNCLENBQUN6NEQsU0FBdkIsQ0FBaUN1NEQsaUJBQWpDLEdBQXFELFlBQVk7QUFDN0QsV0FBT3J4RCwyRUFBZ0IsQ0FBQyxLQUFLK3dELGdCQUFMLENBQXNCeDhELEVBQXZCLENBQXZCO0FBQ0gsR0FGRDs7QUFHQSxTQUFPZzlELHNCQUFQO0FBQ0gsQ0FaMkMsQ0FZMUNULGVBWjBDLENBQTVDOztBQWFBLElBQUlVLHFCQUFxQjtBQUFHO0FBQWUsVUFBVTU5QixNQUFWLEVBQWtCO0FBQ3pEbmpCLFdBQVMsQ0FBQytnRCxxQkFBRCxFQUF3QjU5QixNQUF4QixDQUFUOztBQUNBLFdBQVM0OUIscUJBQVQsQ0FBK0JSLGFBQS9CLEVBQThDO0FBQzFDLFdBQU9wOUIsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCLElBQUlpK0IseUVBQUosRUFBbEIsRUFBZ0QrNUIsYUFBaEQsS0FBa0UsSUFBekU7QUFDSDs7QUFDRFEsdUJBQXFCLENBQUMxNEQsU0FBdEIsQ0FBZ0N3NEQsY0FBaEMsR0FBaUQsWUFBWTtBQUN6RCxXQUFPNXlELE1BQVA7QUFDSCxHQUZEOztBQUdBOHlELHVCQUFxQixDQUFDMTRELFNBQXRCLENBQWdDdTRELGlCQUFoQyxHQUFvRCxZQUFZO0FBQzVELFdBQU87QUFDSHArRCxVQUFJLEVBQUUsS0FBSzJqQyxVQURSO0FBRUh6akMsV0FBSyxFQUFFLEtBQUt5akMsVUFBTCxHQUFrQixLQUFLdDNCLFdBRjNCO0FBR0g5QyxTQUFHLEVBQUUsS0FBS202QixTQUhQO0FBSUhsNkIsWUFBTSxFQUFFLEtBQUtrNkIsU0FBTCxHQUFpQixLQUFLbDNCO0FBSjNCLEtBQVA7QUFNSCxHQVBELENBUnlELENBZ0J6RDtBQUNBOzs7QUFDQSt4RCx1QkFBcUIsQ0FBQzE0RCxTQUF0QixDQUFnQ200RCxrQkFBaEMsR0FBcUQsWUFBWTtBQUM3RCxTQUFLRyxVQUFMLEdBQWtCLEtBQUtDLGlCQUFMLEVBQWxCO0FBQ0gsR0FGRDs7QUFHQSxTQUFPRyxxQkFBUDtBQUNILENBdEIwQyxDQXNCekNWLGVBdEJ5QyxDQUEzQyxDLENBd0JBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBSVcsT0FBTyxHQUFHLE9BQU9DLFdBQVAsS0FBdUIsVUFBdkIsR0FBb0NBLFdBQVcsQ0FBQ3pjLEdBQWhELEdBQXNEM3VDLElBQUksQ0FBQzJ1QyxHQUF6RTtBQUNBOzs7Ozs7O0FBTUEsSUFBSTBjLFlBQVk7QUFBRztBQUFlLFlBQVk7QUFDMUMsV0FBU0EsWUFBVCxHQUF3QjtBQUNwQixRQUFJN2hDLEtBQUssR0FBRyxJQUFaLENBRG9CLENBRXBCOzs7QUFDQSxTQUFLOGhDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLENBQUNuekQsTUFBRCxFQUFTLGNBQVQsQ0FBbkI7QUFDQSxTQUFLb3pELGFBQUwsR0FBcUIsRUFBckIsQ0FMb0IsQ0FLSzs7QUFDekIsU0FBS0MsV0FBTCxHQUFtQixHQUFuQixDQU5vQixDQU1JO0FBQ3hCOztBQUNBLFNBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLElBQXRCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFuQjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsSUFBcEIsQ0FYb0IsQ0FZcEI7O0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFuQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEtBQXJCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixLQUF0Qjs7QUFDQSxTQUFLQyxPQUFMLEdBQWUsWUFBWTtBQUN2QixVQUFJMWlDLEtBQUssQ0FBQ29pQyxXQUFWLEVBQXVCO0FBQUU7QUFDckIsWUFBSU8sSUFBSSxHQUFHM2lDLEtBQUssQ0FBQzRpQyxlQUFOLENBQXNCNWlDLEtBQUssQ0FBQ2tpQyxjQUFOLEdBQXVCdHpELE1BQU0sQ0FBQzJCLFdBQXBELEVBQWlFeXZCLEtBQUssQ0FBQ21pQyxjQUFOLEdBQXVCdnpELE1BQU0sQ0FBQzRCLFdBQS9GLENBQVg7O0FBQ0EsWUFBSW15RCxJQUFKLEVBQVU7QUFDTixjQUFJeGQsR0FBRyxHQUFHd2MsT0FBTyxFQUFqQjs7QUFDQTNoQyxlQUFLLENBQUM2aUMsVUFBTixDQUFpQkYsSUFBakIsRUFBdUIsQ0FBQ3hkLEdBQUcsR0FBR25sQixLQUFLLENBQUM4aUMsY0FBYixJQUErQixJQUF0RDs7QUFDQTlpQyxlQUFLLENBQUMraUMsZ0JBQU4sQ0FBdUI1ZCxHQUF2QjtBQUNILFNBSkQsTUFLSztBQUNEbmxCLGVBQUssQ0FBQ29pQyxXQUFOLEdBQW9CLEtBQXBCLENBREMsQ0FDMEI7QUFDOUI7QUFDSjtBQUNKLEtBWkQ7QUFhSDs7QUFDRFAsY0FBWSxDQUFDNzRELFNBQWIsQ0FBdUJsRCxLQUF2QixHQUErQixVQUFVeTRELEtBQVYsRUFBaUJHLEtBQWpCLEVBQXdCO0FBQ25ELFFBQUksS0FBS29ELFNBQVQsRUFBb0I7QUFDaEIsV0FBS08sWUFBTCxHQUFvQixLQUFLVyxXQUFMLEVBQXBCO0FBQ0EsV0FBS2QsY0FBTCxHQUFzQixJQUF0QjtBQUNBLFdBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDQSxXQUFLRyxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsV0FBS0MsYUFBTCxHQUFxQixLQUFyQjtBQUNBLFdBQUtDLGFBQUwsR0FBcUIsS0FBckI7QUFDQSxXQUFLQyxjQUFMLEdBQXNCLEtBQXRCO0FBQ0EsV0FBS3JDLFVBQUwsQ0FBZ0I3QixLQUFoQixFQUF1QkcsS0FBdkI7QUFDSDtBQUNKLEdBWEQ7O0FBWUFtRCxjQUFZLENBQUM3NEQsU0FBYixDQUF1Qm8zRCxVQUF2QixHQUFvQyxVQUFVN0IsS0FBVixFQUFpQkcsS0FBakIsRUFBd0I7QUFDeEQsUUFBSSxLQUFLb0QsU0FBVCxFQUFvQjtBQUNoQixVQUFJSSxjQUFjLEdBQUczRCxLQUFLLEdBQUczdkQsTUFBTSxDQUFDMkIsV0FBcEM7QUFDQSxVQUFJNHhELGNBQWMsR0FBR3pELEtBQUssR0FBRzl2RCxNQUFNLENBQUM0QixXQUFwQztBQUNBLFVBQUl5eUQsTUFBTSxHQUFHLEtBQUtkLGNBQUwsS0FBd0IsSUFBeEIsR0FBK0IsQ0FBL0IsR0FBbUNBLGNBQWMsR0FBRyxLQUFLQSxjQUF0RTtBQUNBLFVBQUllLE1BQU0sR0FBRyxLQUFLaEIsY0FBTCxLQUF3QixJQUF4QixHQUErQixDQUEvQixHQUFtQ0EsY0FBYyxHQUFHLEtBQUtBLGNBQXRFOztBQUNBLFVBQUllLE1BQU0sR0FBRyxDQUFiLEVBQWdCO0FBQ1osYUFBS1gsV0FBTCxHQUFtQixJQUFuQjtBQUNILE9BRkQsTUFHSyxJQUFJVyxNQUFNLEdBQUcsQ0FBYixFQUFnQjtBQUNqQixhQUFLVixhQUFMLEdBQXFCLElBQXJCO0FBQ0g7O0FBQ0QsVUFBSVcsTUFBTSxHQUFHLENBQWIsRUFBZ0I7QUFDWixhQUFLVixhQUFMLEdBQXFCLElBQXJCO0FBQ0gsT0FGRCxNQUdLLElBQUlVLE1BQU0sR0FBRyxDQUFiLEVBQWdCO0FBQ2pCLGFBQUtULGNBQUwsR0FBc0IsSUFBdEI7QUFDSDs7QUFDRCxXQUFLUCxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBLFdBQUtDLGNBQUwsR0FBc0JBLGNBQXRCOztBQUNBLFVBQUksQ0FBQyxLQUFLQyxXQUFWLEVBQXVCO0FBQ25CLGFBQUtBLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxhQUFLVyxnQkFBTCxDQUFzQnBCLE9BQU8sRUFBN0I7QUFDSDtBQUNKO0FBQ0osR0F6QkQ7O0FBMEJBRSxjQUFZLENBQUM3NEQsU0FBYixDQUF1QnMzRCxJQUF2QixHQUE4QixZQUFZO0FBQ3RDLFFBQUksS0FBS3dCLFNBQVQsRUFBb0I7QUFDaEIsV0FBS00sV0FBTCxHQUFtQixLQUFuQixDQURnQixDQUNVOztBQUMxQixXQUFLLElBQUl2a0QsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLb3JELFlBQTNCLEVBQXlDeGtELEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQWpELEVBQXlEdVUsRUFBRSxFQUEzRCxFQUErRDtBQUMzRCxZQUFJc2xELFdBQVcsR0FBR2xzRCxFQUFFLENBQUM0RyxFQUFELENBQXBCO0FBQ0FzbEQsbUJBQVcsQ0FBQzE3QixPQUFaO0FBQ0g7O0FBQ0QsV0FBSzQ2QixZQUFMLEdBQW9CLElBQXBCO0FBQ0g7QUFDSixHQVREOztBQVVBUixjQUFZLENBQUM3NEQsU0FBYixDQUF1Qis1RCxnQkFBdkIsR0FBMEMsVUFBVTVkLEdBQVYsRUFBZTtBQUNyRCxTQUFLMmQsY0FBTCxHQUFzQjNkLEdBQXRCO0FBQ0FpZSx5QkFBcUIsQ0FBQyxLQUFLVixPQUFOLENBQXJCO0FBQ0gsR0FIRDs7QUFJQWIsY0FBWSxDQUFDNzRELFNBQWIsQ0FBdUI2NUQsVUFBdkIsR0FBb0MsVUFBVUYsSUFBVixFQUFnQjVxRCxPQUFoQixFQUF5QjtBQUN6RCxRQUFJb3JELFdBQVcsR0FBR1IsSUFBSSxDQUFDUSxXQUF2QjtBQUNBLFFBQUluQixhQUFhLEdBQUcsS0FBS0EsYUFBekI7QUFDQSxRQUFJcUIsV0FBVyxHQUFHckIsYUFBYSxHQUFHVyxJQUFJLENBQUNXLFFBQXZDO0FBQ0EsUUFBSUMsUUFBUSxHQUFHO0FBQ2JGLGVBQVcsR0FBR0EsV0FBZixJQUErQnJCLGFBQWEsR0FBR0EsYUFBL0MsSUFBZ0U7QUFDN0QsU0FBS0MsV0FEUixHQUNzQmxxRCxPQUZ2QjtBQUdBLFFBQUlULElBQUksR0FBRyxDQUFYOztBQUNBLFlBQVFxckQsSUFBSSxDQUFDdDJELElBQWI7QUFDSSxXQUFLLE1BQUw7QUFDSWlMLFlBQUksR0FBRyxDQUFDLENBQVI7QUFDSjs7QUFDQSxXQUFLLE9BQUw7QUFDSTZyRCxtQkFBVyxDQUFDbjhCLGFBQVosQ0FBMEJtOEIsV0FBVyxDQUFDejhCLGFBQVosS0FBOEI2OEIsUUFBUSxHQUFHanNELElBQW5FO0FBQ0E7O0FBQ0osV0FBSyxLQUFMO0FBQ0lBLFlBQUksR0FBRyxDQUFDLENBQVI7QUFDSjs7QUFDQSxXQUFLLFFBQUw7QUFDSTZyRCxtQkFBVyxDQUFDcDhCLFlBQVosQ0FBeUJvOEIsV0FBVyxDQUFDNThCLFlBQVosS0FBNkJnOUIsUUFBUSxHQUFHanNELElBQWpFO0FBQ0E7QUFaUjtBQWNILEdBdEJELENBcEYwQyxDQTJHMUM7OztBQUNBdXFELGNBQVksQ0FBQzc0RCxTQUFiLENBQXVCNDVELGVBQXZCLEdBQXlDLFVBQVV6L0QsSUFBVixFQUFnQnVKLEdBQWhCLEVBQXFCO0FBQzFELFFBQUlzMUQsYUFBYSxHQUFHLEtBQUtBLGFBQXpCO0FBQ0EsUUFBSXdCLFFBQVEsR0FBRyxJQUFmOztBQUNBLFNBQUssSUFBSTNsRCxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUtvckQsWUFBM0IsRUFBeUN4a0QsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBakQsRUFBeUR1VSxFQUFFLEVBQTNELEVBQStEO0FBQzNELFVBQUlzbEQsV0FBVyxHQUFHbHNELEVBQUUsQ0FBQzRHLEVBQUQsQ0FBcEI7QUFDQSxVQUFJcFIsSUFBSSxHQUFHMDJELFdBQVcsQ0FBQzdCLFVBQXZCO0FBQ0EsVUFBSW1DLFFBQVEsR0FBR3RnRSxJQUFJLEdBQUdzSixJQUFJLENBQUN0SixJQUEzQjtBQUNBLFVBQUl1Z0UsU0FBUyxHQUFHajNELElBQUksQ0FBQ3BKLEtBQUwsR0FBYUYsSUFBN0I7QUFDQSxVQUFJd2dFLE9BQU8sR0FBR2ozRCxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBekI7QUFDQSxVQUFJazNELFVBQVUsR0FBR24zRCxJQUFJLENBQUNFLE1BQUwsR0FBY0QsR0FBL0IsQ0FOMkQsQ0FPM0Q7O0FBQ0EsVUFBSSsyRCxRQUFRLElBQUksQ0FBWixJQUFpQkMsU0FBUyxJQUFJLENBQTlCLElBQW1DQyxPQUFPLElBQUksQ0FBOUMsSUFBbURDLFVBQVUsSUFBSSxDQUFyRSxFQUF3RTtBQUNwRSxZQUFJRCxPQUFPLElBQUkzQixhQUFYLElBQTRCLEtBQUtNLFdBQWpDLElBQWdEYSxXQUFXLENBQUM3OEIsV0FBWixFQUFoRCxLQUNDLENBQUNrOUIsUUFBRCxJQUFhQSxRQUFRLENBQUNGLFFBQVQsR0FBb0JLLE9BRGxDLENBQUosRUFDZ0Q7QUFDNUNILGtCQUFRLEdBQUc7QUFBRUwsdUJBQVcsRUFBRUEsV0FBZjtBQUE0QjkyRCxnQkFBSSxFQUFFLEtBQWxDO0FBQXlDaTNELG9CQUFRLEVBQUVLO0FBQW5ELFdBQVg7QUFDSDs7QUFDRCxZQUFJQyxVQUFVLElBQUk1QixhQUFkLElBQStCLEtBQUtPLGFBQXBDLElBQXFEWSxXQUFXLENBQUMzOEIsYUFBWixFQUFyRCxLQUNDLENBQUNnOUIsUUFBRCxJQUFhQSxRQUFRLENBQUNGLFFBQVQsR0FBb0JNLFVBRGxDLENBQUosRUFDbUQ7QUFDL0NKLGtCQUFRLEdBQUc7QUFBRUwsdUJBQVcsRUFBRUEsV0FBZjtBQUE0QjkyRCxnQkFBSSxFQUFFLFFBQWxDO0FBQTRDaTNELG9CQUFRLEVBQUVNO0FBQXRELFdBQVg7QUFDSDs7QUFDRCxZQUFJSCxRQUFRLElBQUl6QixhQUFaLElBQTZCLEtBQUtRLGFBQWxDLElBQW1EVyxXQUFXLENBQUMxOEIsYUFBWixFQUFuRCxLQUNDLENBQUMrOEIsUUFBRCxJQUFhQSxRQUFRLENBQUNGLFFBQVQsR0FBb0JHLFFBRGxDLENBQUosRUFDaUQ7QUFDN0NELGtCQUFRLEdBQUc7QUFBRUwsdUJBQVcsRUFBRUEsV0FBZjtBQUE0QjkyRCxnQkFBSSxFQUFFLE1BQWxDO0FBQTBDaTNELG9CQUFRLEVBQUVHO0FBQXBELFdBQVg7QUFDSDs7QUFDRCxZQUFJQyxTQUFTLElBQUkxQixhQUFiLElBQThCLEtBQUtTLGNBQW5DLElBQXFEVSxXQUFXLENBQUN4OEIsY0FBWixFQUFyRCxLQUNDLENBQUM2OEIsUUFBRCxJQUFhQSxRQUFRLENBQUNGLFFBQVQsR0FBb0JJLFNBRGxDLENBQUosRUFDa0Q7QUFDOUNGLGtCQUFRLEdBQUc7QUFBRUwsdUJBQVcsRUFBRUEsV0FBZjtBQUE0QjkyRCxnQkFBSSxFQUFFLE9BQWxDO0FBQTJDaTNELG9CQUFRLEVBQUVJO0FBQXJELFdBQVg7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsV0FBT0YsUUFBUDtBQUNILEdBL0JEOztBQWdDQTNCLGNBQVksQ0FBQzc0RCxTQUFiLENBQXVCZzZELFdBQXZCLEdBQXFDLFlBQVk7QUFDN0MsV0FBTyxLQUFLYSxjQUFMLEdBQXNCenlELEdBQXRCLENBQTBCLFVBQVUzTSxFQUFWLEVBQWM7QUFDM0MsVUFBSUEsRUFBRSxLQUFLbUssTUFBWCxFQUFtQjtBQUNmLGVBQU8sSUFBSTh5RCxxQkFBSixDQUEwQixLQUExQixDQUFQLENBRGUsQ0FDMEI7QUFDNUMsT0FGRCxNQUdLO0FBQ0QsZUFBTyxJQUFJRCxzQkFBSixDQUEyQmg5RCxFQUEzQixFQUErQixLQUEvQixDQUFQLENBREMsQ0FDNkM7QUFDakQ7QUFDSixLQVBNLENBQVA7QUFRSCxHQVREOztBQVVBbzlELGNBQVksQ0FBQzc0RCxTQUFiLENBQXVCNjZELGNBQXZCLEdBQXdDLFlBQVk7QUFDaEQsUUFBSTc1RCxHQUFHLEdBQUcsRUFBVjs7QUFDQSxTQUFLLElBQUk2VCxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUs4cUQsV0FBM0IsRUFBd0Nsa0QsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBaEQsRUFBd0R1VSxFQUFFLEVBQTFELEVBQThEO0FBQzFELFVBQUlpbUQsS0FBSyxHQUFHN3NELEVBQUUsQ0FBQzRHLEVBQUQsQ0FBZDs7QUFDQSxVQUFJLE9BQU9pbUQsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQjk1RCxXQUFHLENBQUN3QixJQUFKLENBQVNzNEQsS0FBVDtBQUNILE9BRkQsTUFHSztBQUNEOTVELFdBQUcsQ0FBQ3dCLElBQUosQ0FBU21MLEtBQVQsQ0FBZTNNLEdBQWYsRUFBb0JqQixLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQnJNLFFBQVEsQ0FBQ3lPLGdCQUFULENBQTBCdzRELEtBQTFCLENBQTNCLENBQXBCO0FBQ0g7QUFDSjs7QUFDRCxXQUFPOTVELEdBQVA7QUFDSCxHQVpEOztBQWFBLFNBQU82M0QsWUFBUDtBQUNILENBcEtpQyxFQUFsQztBQXNLQTs7Ozs7Ozs7QUFNQSxJQUFJa0MseUJBQXlCO0FBQUc7QUFBZSxVQUFVamdDLE1BQVYsRUFBa0I7QUFDN0RuakIsV0FBUyxDQUFDb2pELHlCQUFELEVBQTRCamdDLE1BQTVCLENBQVQ7O0FBQ0EsV0FBU2lnQyx5QkFBVCxDQUFtQ2pILFdBQW5DLEVBQWdEO0FBQzVDLFFBQUk5OEIsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCNHpELFdBQWxCLEtBQWtDLElBQTlDLENBRDRDLENBRTVDO0FBQ0E7OztBQUNBOThCLFNBQUssQ0FBQ3F6QixLQUFOLEdBQWMsSUFBZDtBQUNBcnpCLFNBQUssQ0FBQ2drQyxXQUFOLEdBQW9CLENBQXBCO0FBQ0Foa0MsU0FBSyxDQUFDaWtDLGtCQUFOLEdBQTJCLElBQTNCLENBTjRDLENBTVg7O0FBQ2pDamtDLFNBQUssQ0FBQ2trQyxpQkFBTixHQUEwQixLQUExQjtBQUNBbGtDLFNBQUssQ0FBQ21rQyxhQUFOLEdBQXNCLEtBQXRCLENBUjRDLENBUWY7O0FBQzdCbmtDLFNBQUssQ0FBQ3cxQixVQUFOLEdBQW1CLEtBQW5CLENBVDRDLENBU2xCOztBQUMxQngxQixTQUFLLENBQUNva0MsWUFBTixHQUFxQixLQUFyQjtBQUNBcGtDLFNBQUssQ0FBQ3FrQyxtQkFBTixHQUE0QixLQUE1QjtBQUNBcmtDLFNBQUssQ0FBQ3NrQyxjQUFOLEdBQXVCLElBQXZCOztBQUNBdGtDLFNBQUssQ0FBQ3VrQyxhQUFOLEdBQXNCLFVBQVV6b0UsRUFBVixFQUFjO0FBQ2hDLFVBQUksQ0FBQ2trQyxLQUFLLENBQUN3MUIsVUFBWCxFQUF1QjtBQUFFO0FBQ3JCeDFCLGFBQUssQ0FBQ21rQyxhQUFOLEdBQXNCLElBQXRCO0FBQ0Fua0MsYUFBSyxDQUFDb2tDLFlBQU4sR0FBcUIsS0FBckI7QUFDQXBrQyxhQUFLLENBQUNxa0MsbUJBQU4sR0FBNEIsS0FBNUI7QUFDQTdvRCxtRkFBZ0IsQ0FBQzNlLFFBQVEsQ0FBQ3VSLElBQVYsQ0FBaEI7QUFDQXNOLHFGQUFrQixDQUFDN2UsUUFBUSxDQUFDdVIsSUFBVixDQUFsQixDQUxtQixDQU1uQjtBQUNBO0FBQ0E7O0FBQ0EsWUFBSSxDQUFDdFMsRUFBRSxDQUFDK2lFLE9BQVIsRUFBaUI7QUFDYi9pRSxZQUFFLENBQUN1ekQsU0FBSCxDQUFhdHpELGNBQWI7QUFDSDs7QUFDRGlrQyxhQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsYUFBdEIsRUFBcUNGLEVBQXJDOztBQUNBLFlBQUksQ0FBQ2trQyxLQUFLLENBQUN3a0MsT0FBTixDQUFjdEgsZ0JBQW5CLEVBQXFDO0FBQ2pDO0FBQ0FsOUIsZUFBSyxDQUFDeWtDLE1BQU4sQ0FBYXBFLFlBQWIsQ0FBMEIsS0FBMUIsRUFGaUMsQ0FFQzs7O0FBQ2xDcmdDLGVBQUssQ0FBQ3lrQyxNQUFOLENBQWEzK0QsS0FBYixDQUFtQmhLLEVBQUUsQ0FBQ2loRSxTQUF0QixFQUFpQ2poRSxFQUFFLENBQUN5aUUsS0FBcEMsRUFBMkN6aUUsRUFBRSxDQUFDNGlFLEtBQTlDLEVBSGlDLENBR3FCOzs7QUFDdEQxK0IsZUFBSyxDQUFDMGtDLFVBQU4sQ0FBaUI1b0UsRUFBakI7O0FBQ0EsY0FBSSxDQUFDa2tDLEtBQUssQ0FBQ2drQyxXQUFYLEVBQXdCO0FBQ3BCaGtDLGlCQUFLLENBQUMya0MsdUJBQU4sQ0FBOEI3b0UsRUFBOUI7QUFDSDtBQUNKO0FBQ0o7QUFDSixLQXhCRDs7QUF5QkFra0MsU0FBSyxDQUFDNGtDLGFBQU4sR0FBc0IsVUFBVTlvRSxFQUFWLEVBQWM7QUFDaEMsVUFBSWtrQyxLQUFLLENBQUNta0MsYUFBVixFQUF5QjtBQUFFO0FBQ3ZCbmtDLGFBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixhQUF0QixFQUFxQ0YsRUFBckM7O0FBQ0EsWUFBSSxDQUFDa2tDLEtBQUssQ0FBQ3FrQyxtQkFBWCxFQUFnQztBQUM1QixjQUFJTCxXQUFXLEdBQUdoa0MsS0FBSyxDQUFDZ2tDLFdBQXhCO0FBQ0EsY0FBSWEsVUFBVSxHQUFHLEtBQUssQ0FBdEIsQ0FGNEIsQ0FFSDs7QUFDekIsY0FBSXozRCxNQUFNLEdBQUd0UixFQUFFLENBQUNzUixNQUFoQjtBQUFBLGNBQXdCQyxNQUFNLEdBQUd2UixFQUFFLENBQUN1UixNQUFwQztBQUNBdzNELG9CQUFVLEdBQUd6M0QsTUFBTSxHQUFHQSxNQUFULEdBQWtCQyxNQUFNLEdBQUdBLE1BQXhDOztBQUNBLGNBQUl3M0QsVUFBVSxJQUFJYixXQUFXLEdBQUdBLFdBQWhDLEVBQTZDO0FBQUU7QUFDM0Noa0MsaUJBQUssQ0FBQzJrQyx1QkFBTixDQUE4QjdvRSxFQUE5QjtBQUNIO0FBQ0o7O0FBQ0QsWUFBSWtrQyxLQUFLLENBQUN3MUIsVUFBVixFQUFzQjtBQUNsQjtBQUNBLGNBQUkxNUQsRUFBRSxDQUFDdXpELFNBQUgsQ0FBYXpxRCxJQUFiLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2hDbzdCLGlCQUFLLENBQUN5a0MsTUFBTixDQUFhckUsVUFBYixDQUF3QnRrRSxFQUFFLENBQUN5aUUsS0FBM0IsRUFBa0N6aUUsRUFBRSxDQUFDNGlFLEtBQXJDOztBQUNBMStCLGlCQUFLLENBQUM4a0MsWUFBTixDQUFtQjFFLFVBQW5CLENBQThCdGtFLEVBQUUsQ0FBQ3lpRSxLQUFqQyxFQUF3Q3ppRSxFQUFFLENBQUM0aUUsS0FBM0M7QUFDSDs7QUFDRDErQixlQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsVUFBdEIsRUFBa0NGLEVBQWxDO0FBQ0g7QUFDSjtBQUNKLEtBckJEOztBQXNCQWtrQyxTQUFLLENBQUMra0MsV0FBTixHQUFvQixVQUFVanBFLEVBQVYsRUFBYztBQUM5QixVQUFJa2tDLEtBQUssQ0FBQ21rQyxhQUFWLEVBQXlCO0FBQUU7QUFDdkJua0MsYUFBSyxDQUFDbWtDLGFBQU4sR0FBc0IsS0FBdEI7QUFDQTFvRCxpRkFBYyxDQUFDNWUsUUFBUSxDQUFDdVIsSUFBVixDQUFkO0FBQ0F1TixtRkFBZ0IsQ0FBQzllLFFBQVEsQ0FBQ3VSLElBQVYsQ0FBaEI7O0FBQ0E0eEIsYUFBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLFdBQXRCLEVBQW1DRixFQUFuQyxFQUpxQixDQUltQjs7O0FBQ3hDLFlBQUlra0MsS0FBSyxDQUFDdzFCLFVBQVYsRUFBc0I7QUFDbEJ4MUIsZUFBSyxDQUFDOGtDLFlBQU4sQ0FBbUJ4RSxJQUFuQjs7QUFDQXRnQyxlQUFLLENBQUNnbEMsV0FBTixDQUFrQmxwRSxFQUFsQixFQUZrQixDQUVLOztBQUMxQjs7QUFDRCxZQUFJa2tDLEtBQUssQ0FBQ3NrQyxjQUFWLEVBQTBCO0FBQ3RCdlEsc0JBQVksQ0FBQy96QixLQUFLLENBQUNza0MsY0FBUCxDQUFaO0FBQ0F0a0MsZUFBSyxDQUFDc2tDLGNBQU4sR0FBdUIsSUFBdkI7QUFDSDtBQUNKO0FBQ0osS0FmRDs7QUFnQkEsUUFBSUUsT0FBTyxHQUFHeGtDLEtBQUssQ0FBQ3drQyxPQUFOLEdBQWdCLElBQUkzSCxlQUFKLENBQW9CQyxXQUFwQixDQUE5QjtBQUNBMEgsV0FBTyxDQUFDaE4sT0FBUixDQUFnQmp3RCxFQUFoQixDQUFtQixhQUFuQixFQUFrQ3k0QixLQUFLLENBQUN1a0MsYUFBeEM7QUFDQUMsV0FBTyxDQUFDaE4sT0FBUixDQUFnQmp3RCxFQUFoQixDQUFtQixhQUFuQixFQUFrQ3k0QixLQUFLLENBQUM0a0MsYUFBeEM7QUFDQUosV0FBTyxDQUFDaE4sT0FBUixDQUFnQmp3RCxFQUFoQixDQUFtQixXQUFuQixFQUFnQ3k0QixLQUFLLENBQUMra0MsV0FBdEM7QUFDQS9rQyxTQUFLLENBQUN5a0MsTUFBTixHQUFlLElBQUkvRSxhQUFKLEVBQWY7QUFDQTEvQixTQUFLLENBQUM4a0MsWUFBTixHQUFxQixJQUFJakQsWUFBSixFQUFyQjtBQUNBLFdBQU83aEMsS0FBUDtBQUNIOztBQUNEK2pDLDJCQUF5QixDQUFDLzZELFNBQTFCLENBQW9DeStCLE9BQXBDLEdBQThDLFlBQVk7QUFDdEQsU0FBSys4QixPQUFMLENBQWEvOEIsT0FBYjtBQUNILEdBRkQ7O0FBR0FzOEIsMkJBQXlCLENBQUMvNkQsU0FBMUIsQ0FBb0MwN0QsVUFBcEMsR0FBaUQsVUFBVTVvRSxFQUFWLEVBQWM7QUFDM0QsUUFBSWtrQyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJLE9BQU8sS0FBS3F6QixLQUFaLEtBQXNCLFFBQTFCLEVBQW9DO0FBQ2hDLFdBQUtpUixjQUFMLEdBQXNCeDlELFVBQVUsQ0FBQyxZQUFZO0FBQ3pDazVCLGFBQUssQ0FBQ3NrQyxjQUFOLEdBQXVCLElBQXZCOztBQUNBdGtDLGFBQUssQ0FBQ2lsQyxjQUFOLENBQXFCbnBFLEVBQXJCO0FBQ0gsT0FIK0IsRUFHN0IsS0FBS3UzRCxLQUh3QixDQUFoQyxDQURnQyxDQUloQjtBQUNuQixLQUxELE1BTUs7QUFDRCxXQUFLNFIsY0FBTCxDQUFvQm5wRSxFQUFwQjtBQUNIO0FBQ0osR0FYRDs7QUFZQWlvRSwyQkFBeUIsQ0FBQy82RCxTQUExQixDQUFvQ2k4RCxjQUFwQyxHQUFxRCxVQUFVbnBFLEVBQVYsRUFBYztBQUMvRCxTQUFLc29FLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxTQUFLYyxZQUFMLENBQWtCcHBFLEVBQWxCO0FBQ0gsR0FIRDs7QUFJQWlvRSwyQkFBeUIsQ0FBQy82RCxTQUExQixDQUFvQzI3RCx1QkFBcEMsR0FBOEQsVUFBVTdvRSxFQUFWLEVBQWM7QUFDeEUsU0FBS3VvRSxtQkFBTCxHQUEyQixJQUEzQjtBQUNBLFNBQUthLFlBQUwsQ0FBa0JwcEUsRUFBbEI7QUFDSCxHQUhEOztBQUlBaW9FLDJCQUF5QixDQUFDLzZELFNBQTFCLENBQW9DazhELFlBQXBDLEdBQW1ELFVBQVVwcEUsRUFBVixFQUFjO0FBQzdELFFBQUksS0FBS3NvRSxZQUFMLElBQXFCLEtBQUtDLG1CQUE5QixFQUFtRDtBQUMvQyxVQUFJLENBQUMsS0FBS0csT0FBTCxDQUFhbkgsY0FBZCxJQUFnQyxLQUFLNEcsa0JBQXpDLEVBQTZEO0FBQ3pELGFBQUt6TyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsYUFBSzBPLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsYUFBS1ksWUFBTCxDQUFrQmgvRCxLQUFsQixDQUF3QmhLLEVBQUUsQ0FBQ3lpRSxLQUEzQixFQUFrQ3ppRSxFQUFFLENBQUM0aUUsS0FBckM7QUFDQSxhQUFLbEgsT0FBTCxDQUFheDdELE9BQWIsQ0FBcUIsV0FBckIsRUFBa0NGLEVBQWxDOztBQUNBLFlBQUksS0FBS21vRSxrQkFBTCxLQUE0QixLQUFoQyxFQUF1QztBQUNuQyxlQUFLTyxPQUFMLENBQWFuRixpQkFBYjtBQUNIO0FBQ0o7QUFDSjtBQUNKLEdBWkQ7O0FBYUEwRSwyQkFBeUIsQ0FBQy82RCxTQUExQixDQUFvQ2c4RCxXQUFwQyxHQUFrRCxVQUFVbHBFLEVBQVYsRUFBYztBQUM1RDtBQUNBO0FBQ0EsU0FBSzJvRSxNQUFMLENBQVluRSxJQUFaLENBQWlCLEtBQUs0RCxpQkFBdEIsRUFBeUMsS0FBS2lCLFFBQUwsQ0FBY2o0QixJQUFkLENBQW1CLElBQW5CLEVBQXlCcHhDLEVBQXpCLENBQXpDLENBQXNFO0FBQXRFO0FBRUgsR0FMRDs7QUFNQWlvRSwyQkFBeUIsQ0FBQy82RCxTQUExQixDQUFvQ204RCxRQUFwQyxHQUErQyxVQUFVcnBFLEVBQVYsRUFBYztBQUN6RCxTQUFLMDVELFVBQUwsR0FBa0IsS0FBbEI7QUFDQSxTQUFLZ0MsT0FBTCxDQUFheDdELE9BQWIsQ0FBcUIsU0FBckIsRUFBZ0NGLEVBQWhDO0FBQ0gsR0FIRCxDQWhJNkQsQ0FvSTdEOzs7QUFDQWlvRSwyQkFBeUIsQ0FBQy82RCxTQUExQixDQUFvQ284RCxhQUFwQyxHQUFvRCxVQUFVdDVELElBQVYsRUFBZ0I7QUFDaEUsU0FBSzA0RCxPQUFMLENBQWF0SCxnQkFBYixHQUFnQ3B4RCxJQUFoQztBQUNILEdBRkQ7O0FBR0FpNEQsMkJBQXlCLENBQUMvNkQsU0FBMUIsQ0FBb0N5dUQsa0JBQXBDLEdBQXlELFVBQVUzckQsSUFBVixFQUFnQjtBQUNyRSxTQUFLMjRELE1BQUwsQ0FBWXBFLFlBQVosQ0FBeUJ2MEQsSUFBekI7QUFDSCxHQUZEOztBQUdBaTRELDJCQUF5QixDQUFDLzZELFNBQTFCLENBQW9DMHVELG9CQUFwQyxHQUEyRCxVQUFVNXJELElBQVYsRUFBZ0I7QUFDdkUsU0FBS280RCxpQkFBTCxHQUF5QnA0RCxJQUF6QjtBQUNILEdBRkQ7O0FBR0FpNEQsMkJBQXlCLENBQUMvNkQsU0FBMUIsQ0FBb0MydUQsb0JBQXBDLEdBQTJELFVBQVU3ckQsSUFBVixFQUFnQjtBQUN2RSxTQUFLZzVELFlBQUwsQ0FBa0JoRCxTQUFsQixHQUE4QmgyRCxJQUE5QjtBQUNILEdBRkQ7O0FBR0EsU0FBT2k0RCx5QkFBUDtBQUNILENBbEo4QyxDQWtKN0N4TSxrRUFsSjZDLENBQS9DO0FBb0pBOzs7Ozs7Ozs7O0FBUUEsSUFBSThOLGFBQWE7QUFBRztBQUFlLFlBQVk7QUFDM0MsV0FBU0EsYUFBVCxDQUF1QjVnRSxFQUF2QixFQUEyQjtBQUN2QixTQUFLNmdFLFFBQUwsR0FBZ0JqMUQsc0VBQVcsQ0FBQzVMLEVBQUQsQ0FBM0IsQ0FEdUIsQ0FFdkI7O0FBQ0EsU0FBSzQ5RCxZQUFMLEdBQW9CcnhELDZFQUFrQixDQUFDdk0sRUFBRCxDQUFsQixDQUF1QjJNLEdBQXZCLENBQTJCLFVBQVUzTSxFQUFWLEVBQWM7QUFDekQsYUFBTyxJQUFJZzlELHNCQUFKLENBQTJCaDlELEVBQTNCLEVBQStCLElBQS9CLENBQVAsQ0FEeUQsQ0FDWjtBQUNoRCxLQUZtQixDQUFwQjtBQUdIOztBQUNENGdFLGVBQWEsQ0FBQ3I4RCxTQUFkLENBQXdCeStCLE9BQXhCLEdBQWtDLFlBQVk7QUFDMUMsU0FBSyxJQUFJNXBCLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcsS0FBS29yRCxZQUEzQixFQUF5Q3hrRCxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUFqRCxFQUF5RHVVLEVBQUUsRUFBM0QsRUFBK0Q7QUFDM0QsVUFBSXNsRCxXQUFXLEdBQUdsc0QsRUFBRSxDQUFDNEcsRUFBRCxDQUFwQjtBQUNBc2xELGlCQUFXLENBQUMxN0IsT0FBWjtBQUNIO0FBQ0osR0FMRDs7QUFNQTQ5QixlQUFhLENBQUNyOEQsU0FBZCxDQUF3QnU4RCxXQUF4QixHQUFzQyxZQUFZO0FBQzlDLFFBQUlwaUUsSUFBSSxHQUFHLEtBQUttaUUsUUFBTCxDQUFjbmlFLElBQXpCOztBQUNBLFNBQUssSUFBSTBhLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcsS0FBS29yRCxZQUEzQixFQUF5Q3hrRCxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUFqRCxFQUF5RHVVLEVBQUUsRUFBM0QsRUFBK0Q7QUFDM0QsVUFBSXNsRCxXQUFXLEdBQUdsc0QsRUFBRSxDQUFDNEcsRUFBRCxDQUFwQjtBQUNBMWEsVUFBSSxJQUFJZ2dFLFdBQVcsQ0FBQzlCLGNBQVosR0FBNkI4QixXQUFXLENBQUN6OEIsYUFBWixFQUFyQztBQUNIOztBQUNELFdBQU92akMsSUFBUDtBQUNILEdBUEQ7O0FBUUFraUUsZUFBYSxDQUFDcjhELFNBQWQsQ0FBd0J3OEQsVUFBeEIsR0FBcUMsWUFBWTtBQUM3QyxRQUFJOTRELEdBQUcsR0FBRyxLQUFLNDRELFFBQUwsQ0FBYzU0RCxHQUF4Qjs7QUFDQSxTQUFLLElBQUltUixFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUtvckQsWUFBM0IsRUFBeUN4a0QsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBakQsRUFBeUR1VSxFQUFFLEVBQTNELEVBQStEO0FBQzNELFVBQUlzbEQsV0FBVyxHQUFHbHNELEVBQUUsQ0FBQzRHLEVBQUQsQ0FBcEI7QUFDQW5SLFNBQUcsSUFBSXkyRCxXQUFXLENBQUMvQixhQUFaLEdBQTRCK0IsV0FBVyxDQUFDNThCLFlBQVosRUFBbkM7QUFDSDs7QUFDRCxXQUFPNzVCLEdBQVA7QUFDSCxHQVBEOztBQVFBMjRELGVBQWEsQ0FBQ3I4RCxTQUFkLENBQXdCeThELGdCQUF4QixHQUEyQyxVQUFVbEgsS0FBVixFQUFpQkcsS0FBakIsRUFBd0I7QUFDL0QsUUFBSWx5RCxLQUFLLEdBQUc7QUFBRXJKLFVBQUksRUFBRW83RCxLQUFSO0FBQWU3eEQsU0FBRyxFQUFFZ3lEO0FBQXBCLEtBQVo7O0FBQ0EsU0FBSyxJQUFJN2dELEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUcsS0FBS29yRCxZQUEzQixFQUF5Q3hrRCxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUFqRCxFQUF5RHVVLEVBQUUsRUFBM0QsRUFBK0Q7QUFDM0QsVUFBSXNsRCxXQUFXLEdBQUdsc0QsRUFBRSxDQUFDNEcsRUFBRCxDQUFwQjs7QUFDQSxVQUFJLENBQUM2bkQsaUJBQWlCLENBQUN2QyxXQUFXLENBQUMzQixjQUFaLEVBQUQsQ0FBbEIsSUFDQSxDQUFDajFELDBFQUFlLENBQUNDLEtBQUQsRUFBUTIyRCxXQUFXLENBQUM3QixVQUFwQixDQURwQixFQUNxRDtBQUNqRCxlQUFPLEtBQVA7QUFDSDtBQUNKOztBQUNELFdBQU8sSUFBUDtBQUNILEdBVkQ7O0FBV0EsU0FBTytELGFBQVA7QUFDSCxDQTFDa0MsRUFBbkMsQyxDQTJDQTtBQUNBOzs7QUFDQSxTQUFTSyxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUM7QUFDN0IsTUFBSTE5RCxPQUFPLEdBQUcwOUQsSUFBSSxDQUFDMTlELE9BQW5CO0FBQ0EsU0FBT0EsT0FBTyxLQUFLLE1BQVosSUFBc0JBLE9BQU8sS0FBSyxNQUF6QztBQUNIO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OztBQWFBLElBQUkyOUQsV0FBVztBQUFHO0FBQWUsWUFBWTtBQUN6QyxXQUFTQSxXQUFULENBQXFCQyxRQUFyQixFQUErQkMsY0FBL0IsRUFBK0M7QUFDM0MsUUFBSTlsQyxLQUFLLEdBQUcsSUFBWixDQUQyQyxDQUUzQzs7O0FBQ0EsU0FBSytsQyxnQkFBTCxHQUF3QixLQUF4QjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsSUFBdEIsQ0FKMkMsQ0FJZjs7QUFDNUIsU0FBS0MsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLElBQWhCLENBUDJDLENBT3JCOztBQUN0QixTQUFLQyxpQkFBTCxHQUF5QixVQUFVdHFFLEVBQVYsRUFBYztBQUNuQyxVQUFJK3BFLFFBQVEsR0FBRzdsQyxLQUFLLENBQUM2bEMsUUFBckI7QUFDQTdsQyxXQUFLLENBQUNpbUMsVUFBTixHQUFtQixJQUFuQjtBQUNBam1DLFdBQUssQ0FBQ2ttQyxTQUFOLEdBQWtCLElBQWxCO0FBQ0FsbUMsV0FBSyxDQUFDbW1DLFFBQU4sR0FBaUIsSUFBakI7O0FBQ0FubUMsV0FBSyxDQUFDcW1DLFdBQU47O0FBQ0FybUMsV0FBSyxDQUFDc21DLGlCQUFOLENBQXdCeHFFLEVBQXhCOztBQUNBLFVBQUlra0MsS0FBSyxDQUFDaW1DLFVBQU4sSUFBb0IsQ0FBQ2ptQyxLQUFLLENBQUNnbUMsY0FBL0IsRUFBK0M7QUFDM0NILGdCQUFRLENBQUNULGFBQVQsQ0FBdUIsS0FBdkI7O0FBQ0FwbEMsYUFBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLGFBQXRCLEVBQXFDRixFQUFyQyxFQUYyQyxDQUVEOztBQUM3QyxPQUhELE1BSUs7QUFDRCtwRSxnQkFBUSxDQUFDVCxhQUFULENBQXVCLElBQXZCO0FBQ0g7QUFDSixLQWREOztBQWVBLFNBQUttQixlQUFMLEdBQXVCLFVBQVV6cUUsRUFBVixFQUFjO0FBQ2pDa2tDLFdBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixXQUF0QixFQUFtQ0YsRUFBbkM7O0FBQ0Fra0MsV0FBSyxDQUFDb2dDLFVBQU4sQ0FBaUJ0a0UsRUFBakIsRUFBcUIsSUFBckIsRUFGaUMsQ0FFTDs7QUFDL0IsS0FIRDs7QUFJQSxTQUFLMHFFLGNBQUwsR0FBc0IsVUFBVTFxRSxFQUFWLEVBQWM7QUFDaENra0MsV0FBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLFVBQXRCLEVBQWtDRixFQUFsQzs7QUFDQWtrQyxXQUFLLENBQUNvZ0MsVUFBTixDQUFpQnRrRSxFQUFqQjtBQUNILEtBSEQ7O0FBSUEsU0FBSzJxRSxlQUFMLEdBQXVCLFVBQVUzcUUsRUFBVixFQUFjO0FBQ2pDa2tDLFdBQUssQ0FBQzBtQyxXQUFOOztBQUNBMW1DLFdBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixXQUF0QixFQUFtQ0YsRUFBbkM7QUFDSCxLQUhEOztBQUlBLFNBQUs2cUUsYUFBTCxHQUFxQixVQUFVN3FFLEVBQVYsRUFBYztBQUMvQixVQUFJa2tDLEtBQUssQ0FBQ2ttQyxTQUFWLEVBQXFCO0FBQ2pCbG1DLGFBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixXQUF0QixFQUFtQyxJQUFuQyxFQUF5QyxJQUF6QyxFQUErQ0YsRUFBL0M7QUFDSDs7QUFDRGtrQyxXQUFLLENBQUNtbUMsUUFBTixHQUFpQm5tQyxLQUFLLENBQUNrbUMsU0FBdkI7QUFDQWxtQyxXQUFLLENBQUNrbUMsU0FBTixHQUFrQixJQUFsQjs7QUFDQWxtQyxXQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsU0FBdEIsRUFBaUNGLEVBQWpDO0FBQ0gsS0FQRDs7QUFRQSxTQUFLZ3FFLGNBQUwsR0FBc0JBLGNBQXRCO0FBQ0FELFlBQVEsQ0FBQ3JPLE9BQVQsQ0FBaUJqd0QsRUFBakIsQ0FBb0IsYUFBcEIsRUFBbUMsS0FBSzYrRCxpQkFBeEM7QUFDQVAsWUFBUSxDQUFDck8sT0FBVCxDQUFpQmp3RCxFQUFqQixDQUFvQixXQUFwQixFQUFpQyxLQUFLZy9ELGVBQXRDO0FBQ0FWLFlBQVEsQ0FBQ3JPLE9BQVQsQ0FBaUJqd0QsRUFBakIsQ0FBb0IsVUFBcEIsRUFBZ0MsS0FBS2kvRCxjQUFyQztBQUNBWCxZQUFRLENBQUNyTyxPQUFULENBQWlCandELEVBQWpCLENBQW9CLFdBQXBCLEVBQWlDLEtBQUtrL0QsZUFBdEM7QUFDQVosWUFBUSxDQUFDck8sT0FBVCxDQUFpQmp3RCxFQUFqQixDQUFvQixTQUFwQixFQUErQixLQUFLby9ELGFBQXBDO0FBQ0EsU0FBS2QsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLck8sT0FBTCxHQUFlLElBQUkzekIsK0RBQUosRUFBZjtBQUNILEdBcER3QyxDQXFEekM7QUFDQTs7O0FBQ0EraEMsYUFBVyxDQUFDNThELFNBQVosQ0FBc0JzOUQsaUJBQXRCLEdBQTBDLFVBQVV4cUUsRUFBVixFQUFjO0FBQ3BELFFBQUk4cUUsU0FBUyxHQUFHO0FBQUV6akUsVUFBSSxFQUFFckgsRUFBRSxDQUFDeWlFLEtBQVg7QUFBa0I3eEQsU0FBRyxFQUFFNVEsRUFBRSxDQUFDNGlFO0FBQTFCLEtBQWhCO0FBQ0EsUUFBSW1JLGFBQWEsR0FBR0QsU0FBcEI7QUFDQSxRQUFJN0osU0FBUyxHQUFHamhFLEVBQUUsQ0FBQ2loRSxTQUFuQjtBQUNBLFFBQUkrSixXQUFKOztBQUNBLFFBQUkvSixTQUFTLEtBQUtsZ0UsUUFBbEIsRUFBNEI7QUFDeEJpcUUsaUJBQVcsR0FBR3oyRCxzRUFBVyxDQUFDMHNELFNBQUQsQ0FBekI7QUFDQThKLG1CQUFhLEdBQUd2NUQseUVBQWMsQ0FBQ3U1RCxhQUFELEVBQWdCQyxXQUFoQixDQUE5QjtBQUNIOztBQUNELFFBQUliLFVBQVUsR0FBRyxLQUFLQSxVQUFMLEdBQWtCLEtBQUtjLGlCQUFMLENBQXVCRixhQUFhLENBQUMxakUsSUFBckMsRUFBMkMwakUsYUFBYSxDQUFDbjZELEdBQXpELENBQW5DOztBQUNBLFFBQUl1NUQsVUFBSixFQUFnQjtBQUNaLFVBQUksS0FBS0YsZ0JBQUwsSUFBeUJlLFdBQTdCLEVBQTBDO0FBQ3RDLFlBQUlFLGlCQUFpQixHQUFHcDZELHlFQUFjLENBQUNrNkQsV0FBRCxFQUFjYixVQUFVLENBQUN4NUQsSUFBekIsQ0FBdEM7O0FBQ0EsWUFBSXU2RCxpQkFBSixFQUF1QjtBQUNuQkgsdUJBQWEsR0FBR3Q1RCx3RUFBYSxDQUFDeTVELGlCQUFELENBQTdCO0FBQ0g7QUFDSjs7QUFDRCxXQUFLQyxXQUFMLEdBQW1CejVELHFFQUFVLENBQUNxNUQsYUFBRCxFQUFnQkQsU0FBaEIsQ0FBN0I7QUFDSCxLQVJELE1BU0s7QUFDRCxXQUFLSyxXQUFMLEdBQW1CO0FBQUU5akUsWUFBSSxFQUFFLENBQVI7QUFBV3VKLFdBQUcsRUFBRTtBQUFoQixPQUFuQjtBQUNIO0FBQ0osR0F0QkQ7O0FBdUJBazVELGFBQVcsQ0FBQzU4RCxTQUFaLENBQXNCbzNELFVBQXRCLEdBQW1DLFVBQVV0a0UsRUFBVixFQUFjb3JFLFdBQWQsRUFBMkI7QUFDMUQsUUFBSUMsR0FBRyxHQUFHLEtBQUtKLGlCQUFMLENBQXVCanJFLEVBQUUsQ0FBQ3lpRSxLQUFILEdBQVcsS0FBSzBJLFdBQUwsQ0FBaUI5akUsSUFBbkQsRUFBeURySCxFQUFFLENBQUM0aUUsS0FBSCxHQUFXLEtBQUt1SSxXQUFMLENBQWlCdjZELEdBQXJGLENBQVY7O0FBQ0EsUUFBSXc2RCxXQUFXLElBQUksQ0FBQ0UsV0FBVyxDQUFDLEtBQUtsQixTQUFOLEVBQWlCaUIsR0FBakIsQ0FBL0IsRUFBc0Q7QUFDbEQsV0FBS2pCLFNBQUwsR0FBaUJpQixHQUFqQjtBQUNBLFdBQUszUCxPQUFMLENBQWF4N0QsT0FBYixDQUFxQixXQUFyQixFQUFrQ21yRSxHQUFsQyxFQUF1QyxLQUF2QyxFQUE4Q3JyRSxFQUE5QztBQUNIO0FBQ0osR0FORDs7QUFPQThwRSxhQUFXLENBQUM1OEQsU0FBWixDQUFzQnE5RCxXQUF0QixHQUFvQyxZQUFZO0FBQzVDLFNBQUtnQixjQUFMLEdBQXNCdGtELGtFQUFPLENBQUMsS0FBSytpRCxjQUFOLEVBQXNCLFVBQVV3QixtQkFBVixFQUErQjtBQUM5RUEseUJBQW1CLENBQUN2bEMsU0FBcEIsQ0FBOEJ5SCxtQkFBOUI7QUFDQSxhQUFPLElBQUk2N0IsYUFBSixDQUFrQmlDLG1CQUFtQixDQUFDN2lFLEVBQXRDLENBQVA7QUFDSCxLQUg0QixDQUE3QjtBQUlILEdBTEQ7O0FBTUFtaEUsYUFBVyxDQUFDNThELFNBQVosQ0FBc0IwOUQsV0FBdEIsR0FBb0MsWUFBWTtBQUM1QyxRQUFJVyxjQUFjLEdBQUcsS0FBS0EsY0FBMUI7O0FBQ0EsU0FBSyxJQUFJcmlFLEVBQVQsSUFBZXFpRSxjQUFmLEVBQStCO0FBQzNCQSxvQkFBYyxDQUFDcmlFLEVBQUQsQ0FBZCxDQUFtQnlpQyxPQUFuQjtBQUNIOztBQUNELFNBQUs0L0IsY0FBTCxHQUFzQixFQUF0QjtBQUNILEdBTkQ7O0FBT0F6QixhQUFXLENBQUM1OEQsU0FBWixDQUFzQis5RCxpQkFBdEIsR0FBMEMsVUFBVVEsVUFBVixFQUFzQkMsU0FBdEIsRUFBaUM7QUFDdkUsUUFBSXZ3RCxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWU2dUQsY0FBYyxHQUFHN3VELEVBQUUsQ0FBQzZ1RCxjQUFuQztBQUFBLFFBQW1EdUIsY0FBYyxHQUFHcHdELEVBQUUsQ0FBQ293RCxjQUF2RTs7QUFDQSxRQUFJSSxPQUFPLEdBQUcsSUFBZDs7QUFDQSxTQUFLLElBQUl6aUUsRUFBVCxJQUFlOGdFLGNBQWYsRUFBK0I7QUFDM0IsVUFBSS9qQyxTQUFTLEdBQUcrakMsY0FBYyxDQUFDOWdFLEVBQUQsQ0FBZCxDQUFtQis4QixTQUFuQztBQUNBLFVBQUkybEMsYUFBYSxHQUFHTCxjQUFjLENBQUNyaUUsRUFBRCxDQUFsQzs7QUFDQSxVQUFJMGlFLGFBQWEsQ0FBQ2pDLGdCQUFkLENBQStCOEIsVUFBL0IsRUFBMkNDLFNBQTNDLENBQUosRUFBMkQ7QUFDdkQsWUFBSUcsVUFBVSxHQUFHRCxhQUFhLENBQUNuQyxXQUFkLEVBQWpCO0FBQ0EsWUFBSXFDLFNBQVMsR0FBR0YsYUFBYSxDQUFDbEMsVUFBZCxFQUFoQjtBQUNBLFlBQUk5N0IsWUFBWSxHQUFHNjlCLFVBQVUsR0FBR0ksVUFBaEM7QUFDQSxZQUFJaCtCLFdBQVcsR0FBRzY5QixTQUFTLEdBQUdJLFNBQTlCO0FBQ0EsWUFBSXRDLFFBQVEsR0FBR29DLGFBQWEsQ0FBQ3BDLFFBQTdCO0FBQ0EsWUFBSXRoRSxLQUFLLEdBQUdzaEUsUUFBUSxDQUFDamlFLEtBQVQsR0FBaUJpaUUsUUFBUSxDQUFDbmlFLElBQXRDO0FBQ0EsWUFBSXdOLE1BQU0sR0FBRzIwRCxRQUFRLENBQUMzNEQsTUFBVCxHQUFrQjI0RCxRQUFRLENBQUM1NEQsR0FBeEM7O0FBQ0EsYUFDQTtBQUNBZzlCLG9CQUFZLElBQUksQ0FBaEIsSUFBcUJBLFlBQVksR0FBRzFsQyxLQUFwQyxJQUNJMmxDLFdBQVcsSUFBSSxDQURuQixJQUN3QkEsV0FBVyxHQUFHaDVCLE1BSHRDLEVBRzhDO0FBQzFDLGNBQUl3MkQsR0FBRyxHQUFHcGxDLFNBQVMsQ0FBQzBILFFBQVYsQ0FBbUJDLFlBQW5CLEVBQWlDQyxXQUFqQyxFQUE4QzNsQyxLQUE5QyxFQUFxRDJNLE1BQXJELENBQVY7O0FBQ0EsY0FBSXcyRCxHQUFHLE1BRUg7QUFDQSxXQUFDcGxDLFNBQVMsQ0FBQzcxQixLQUFWLENBQWdCa3FCLFdBQWpCLElBQWdDO0FBQzVCL08sdUZBQWtCLENBQUMwYSxTQUFTLENBQUM3MUIsS0FBVixDQUFnQmtxQixXQUFoQixDQUE0QkssV0FBN0IsRUFBMEMwd0MsR0FBRyxDQUFDdm1DLFFBQUosQ0FBYWhoQixLQUF2RCxDQUpuQixDQUFILEtBS0MsQ0FBQzZuRCxPQUFELElBQVlOLEdBQUcsQ0FBQ1UsS0FBSixHQUFZSixPQUFPLENBQUNJLEtBTGpDLENBQUosRUFLNkM7QUFDekM7QUFDQVYsZUFBRyxDQUFDMTZELElBQUosQ0FBU3RKLElBQVQsSUFBaUJ3a0UsVUFBakI7QUFDQVIsZUFBRyxDQUFDMTZELElBQUosQ0FBU3BKLEtBQVQsSUFBa0Jza0UsVUFBbEI7QUFDQVIsZUFBRyxDQUFDMTZELElBQUosQ0FBU0MsR0FBVCxJQUFnQms3RCxTQUFoQjtBQUNBVCxlQUFHLENBQUMxNkQsSUFBSixDQUFTRSxNQUFULElBQW1CaTdELFNBQW5CO0FBQ0FILG1CQUFPLEdBQUdOLEdBQVY7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFDRCxXQUFPTSxPQUFQO0FBQ0gsR0FwQ0Q7O0FBcUNBLFNBQU83QixXQUFQO0FBQ0gsQ0F4SWdDLEVBQWpDOztBQXlJQSxTQUFTd0IsV0FBVCxDQUFxQlUsSUFBckIsRUFBMkJDLElBQTNCLEVBQWlDO0FBQzdCLE1BQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNDLElBQWQsRUFBb0I7QUFDaEIsV0FBTyxJQUFQO0FBQ0g7O0FBQ0QsTUFBSTdvRCxPQUFPLENBQUM0b0QsSUFBRCxDQUFQLEtBQWtCNW9ELE9BQU8sQ0FBQzZvRCxJQUFELENBQTdCLEVBQXFDO0FBQ2pDLFdBQU8sS0FBUDtBQUNIOztBQUNELFNBQU9scEIsMkVBQWdCLENBQUNpcEIsSUFBSSxDQUFDbG5DLFFBQU4sRUFBZ0JtbkMsSUFBSSxDQUFDbm5DLFFBQXJCLENBQXZCO0FBQ0g7QUFFRDs7Ozs7O0FBSUEsSUFBSW9uQyxZQUFZO0FBQUc7QUFBZSxVQUFVbGtDLE1BQVYsRUFBa0I7QUFDaERuakIsV0FBUyxDQUFDcW5ELFlBQUQsRUFBZWxrQyxNQUFmLENBQVQ7O0FBQ0EsV0FBU2trQyxZQUFULENBQXNCM3hCLFFBQXRCLEVBQWdDO0FBQzVCLFFBQUlyVyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JtdEMsUUFBbEIsS0FBK0IsSUFBM0M7O0FBQ0FyVyxTQUFLLENBQUNvbUMsaUJBQU4sR0FBMEIsVUFBVXRxRSxFQUFWLEVBQWM7QUFDcEMsVUFBSStwRSxRQUFRLEdBQUc3bEMsS0FBSyxDQUFDNmxDLFFBQXJCLENBRG9DLENBRXBDOztBQUNBQSxjQUFRLENBQUNULGFBQVQsQ0FBdUIsQ0FBQ3BsQyxLQUFLLENBQUMrQixTQUFOLENBQWdCNEksaUJBQWhCLENBQWtDazdCLFFBQVEsQ0FBQ3JCLE9BQVQsQ0FBaUJ4SCxNQUFuRCxDQUF4QjtBQUNILEtBSkQsQ0FGNEIsQ0FPNUI7OztBQUNBaDlCLFNBQUssQ0FBQzJtQyxhQUFOLEdBQXNCLFVBQVU3cUUsRUFBVixFQUFjO0FBQ2hDLFVBQUlpbUMsU0FBUyxHQUFHL0IsS0FBSyxDQUFDK0IsU0FBdEI7QUFDQSxVQUFJeWlDLE9BQU8sR0FBR3hrQyxLQUFLLENBQUM2bEMsUUFBTixDQUFlckIsT0FBN0I7O0FBQ0EsVUFBSSxDQUFDQSxPQUFPLENBQUNuSCxjQUFiLEVBQTZCO0FBQ3pCLFlBQUlwbUQsRUFBRSxHQUFHK29CLEtBQUssQ0FBQ2lvQyxXQUFmO0FBQUEsWUFBNEJoQyxVQUFVLEdBQUdodkQsRUFBRSxDQUFDZ3ZELFVBQTVDO0FBQUEsWUFBd0RFLFFBQVEsR0FBR2x2RCxFQUFFLENBQUNrdkQsUUFBdEU7O0FBQ0EsWUFBSUYsVUFBVSxJQUFJRSxRQUFkLElBQTBCaUIsV0FBVyxDQUFDbkIsVUFBRCxFQUFhRSxRQUFiLENBQXpDLEVBQWlFO0FBQzdEcGtDLG1CQUFTLENBQUN4L0IsUUFBVixDQUFtQitzRCxnQkFBbkIsQ0FBb0MyVyxVQUFVLENBQUNybEMsUUFBL0MsRUFBeURxbEMsVUFBVSxDQUFDMVcsS0FBcEUsRUFBMkV4dEIsU0FBUyxDQUFDN04sSUFBckYsRUFBMkZwNEIsRUFBRSxDQUFDdXpELFNBQTlGO0FBQ0g7QUFDSjtBQUNKLEtBVEQ7O0FBVUEsUUFBSXR0QixTQUFTLEdBQUdzVSxRQUFRLENBQUN0VSxTQUF6QixDQWxCNEIsQ0FtQjVCOztBQUNBL0IsU0FBSyxDQUFDNmxDLFFBQU4sR0FBaUIsSUFBSTlCLHlCQUFKLENBQThCaGlDLFNBQVMsQ0FBQ3Q5QixFQUF4QyxDQUFqQjtBQUNBdTdCLFNBQUssQ0FBQzZsQyxRQUFOLENBQWVmLFlBQWYsQ0FBNEJoRCxTQUE1QixHQUF3QyxLQUF4QztBQUNBLFFBQUltRyxXQUFXLEdBQUdqb0MsS0FBSyxDQUFDaW9DLFdBQU4sR0FBb0IsSUFBSXJDLFdBQUosQ0FBZ0I1bEMsS0FBSyxDQUFDNmxDLFFBQXRCLEVBQWdDN2UscUZBQTBCLENBQUMzUSxRQUFELENBQTFELENBQXRDO0FBQ0E0eEIsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixhQUF2QixFQUFzQ3k0QixLQUFLLENBQUNvbUMsaUJBQTVDO0FBQ0E2QixlQUFXLENBQUN6USxPQUFaLENBQW9CandELEVBQXBCLENBQXVCLFNBQXZCLEVBQWtDeTRCLEtBQUssQ0FBQzJtQyxhQUF4QztBQUNBLFdBQU8zbUMsS0FBUDtBQUNIOztBQUNEZ29DLGNBQVksQ0FBQ2gvRCxTQUFiLENBQXVCeStCLE9BQXZCLEdBQWlDLFlBQVk7QUFDekMsU0FBS28rQixRQUFMLENBQWNwK0IsT0FBZDtBQUNILEdBRkQ7O0FBR0EsU0FBT3VnQyxZQUFQO0FBQ0gsQ0FqQ2lDLENBaUNoQ25oQiw4REFqQ2dDLENBQWxDO0FBbUNBOzs7Ozs7QUFJQSxJQUFJcWhCLGFBQWE7QUFBRztBQUFlLFVBQVVwa0MsTUFBVixFQUFrQjtBQUNqRG5qQixXQUFTLENBQUN1bkQsYUFBRCxFQUFnQnBrQyxNQUFoQixDQUFUOztBQUNBLFdBQVNva0MsYUFBVCxDQUF1Qjd4QixRQUF2QixFQUFpQztBQUM3QixRQUFJclcsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCbXRDLFFBQWxCLEtBQStCLElBQTNDOztBQUNBclcsU0FBSyxDQUFDbW9DLGFBQU4sR0FBc0IsSUFBdEI7O0FBQ0Fub0MsU0FBSyxDQUFDb21DLGlCQUFOLEdBQTBCLFVBQVV0cUUsRUFBVixFQUFjO0FBQ3BDLFVBQUltYixFQUFFLEdBQUcrb0IsS0FBVDtBQUFBLFVBQWdCK0IsU0FBUyxHQUFHOXFCLEVBQUUsQ0FBQzhxQixTQUEvQjtBQUFBLFVBQTBDOGpDLFFBQVEsR0FBRzV1RCxFQUFFLENBQUM0dUQsUUFBeEQ7QUFDQSxVQUFJdUMsU0FBUyxHQUFHcm1DLFNBQVMsQ0FBQ3BjLEdBQVYsQ0FBYyxZQUFkLEtBQ1pvYyxTQUFTLENBQUM0SSxpQkFBVixDQUE0Qjd1QyxFQUFFLENBQUN1ekQsU0FBSCxDQUFheDlDLE1BQXpDLENBREosQ0FGb0MsQ0FJcEM7O0FBQ0FnMEQsY0FBUSxDQUFDVCxhQUFULENBQXVCLENBQUNnRCxTQUF4QixFQUxvQyxDQU1wQzs7QUFDQXZDLGNBQVEsQ0FBQ3hTLEtBQVQsR0FBaUJ2M0QsRUFBRSxDQUFDK2lFLE9BQUgsR0FBYXdKLHNCQUFzQixDQUFDdG1DLFNBQUQsQ0FBbkMsR0FBaUQsSUFBbEU7QUFDSCxLQVJEOztBQVNBL0IsU0FBSyxDQUFDdW1DLGVBQU4sR0FBd0IsVUFBVXpxRSxFQUFWLEVBQWM7QUFDbENra0MsV0FBSyxDQUFDK0IsU0FBTixDQUFnQngvQixRQUFoQixDQUF5QnNyRCxRQUF6QixDQUFrQy94RCxFQUFsQyxFQURrQyxDQUNLOztBQUMxQyxLQUZEOztBQUdBa2tDLFNBQUssQ0FBQ3NvQyxlQUFOLEdBQXdCLFVBQVVuQixHQUFWLEVBQWVvQixPQUFmLEVBQXdCO0FBQzVDLFVBQUlobUUsUUFBUSxHQUFHeTlCLEtBQUssQ0FBQytCLFNBQU4sQ0FBZ0J4L0IsUUFBL0I7QUFDQSxVQUFJNGxFLGFBQWEsR0FBRyxJQUFwQjtBQUNBLFVBQUlLLFNBQVMsR0FBRyxLQUFoQjs7QUFDQSxVQUFJckIsR0FBSixFQUFTO0FBQ0xnQixxQkFBYSxHQUFHTSxxQkFBcUIsQ0FBQ3pvQyxLQUFLLENBQUNpb0MsV0FBTixDQUFrQmhDLFVBQW5CLEVBQStCa0IsR0FBL0IsRUFBb0M1a0UsUUFBUSxDQUFDb2lCLFlBQVQsQ0FBc0JDLEtBQXRCLENBQTRCeW1CLHlCQUFoRSxDQUFyQzs7QUFDQSxZQUFJLENBQUM4OEIsYUFBRCxJQUFrQixDQUFDbm9DLEtBQUssQ0FBQytCLFNBQU4sQ0FBZ0JySyxvQkFBaEIsQ0FBcUN5d0MsYUFBckMsQ0FBdkIsRUFBNEU7QUFDeEVLLG1CQUFTLEdBQUcsSUFBWjtBQUNBTCx1QkFBYSxHQUFHLElBQWhCO0FBQ0g7QUFDSjs7QUFDRCxVQUFJQSxhQUFKLEVBQW1CO0FBQ2Y1bEUsZ0JBQVEsQ0FBQ3lzQixRQUFULENBQWtCO0FBQUVwcUIsY0FBSSxFQUFFLGNBQVI7QUFBd0J5MUIsbUJBQVMsRUFBRTh0QztBQUFuQyxTQUFsQjtBQUNILE9BRkQsTUFHSyxJQUFJLENBQUNJLE9BQUwsRUFBYztBQUFFO0FBQ2pCaG1FLGdCQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUFFcHFCLGNBQUksRUFBRTtBQUFSLFNBQWxCO0FBQ0g7O0FBQ0QsVUFBSSxDQUFDNGpFLFNBQUwsRUFBZ0I7QUFDWnR1RCwrRUFBWTtBQUNmLE9BRkQsTUFHSztBQUNERCxnRkFBYTtBQUNoQjs7QUFDRCxVQUFJLENBQUNzdUQsT0FBTCxFQUFjO0FBQ1Z2b0MsYUFBSyxDQUFDbW9DLGFBQU4sR0FBc0JBLGFBQXRCLENBRFUsQ0FDMkI7QUFDeEM7QUFDSixLQTFCRDs7QUEyQkFub0MsU0FBSyxDQUFDeW1DLGVBQU4sR0FBd0IsVUFBVXRYLEdBQVYsRUFBZTtBQUNuQyxVQUFJbnZCLEtBQUssQ0FBQ21vQyxhQUFWLEVBQXlCO0FBQ3JCO0FBQ0Fub0MsYUFBSyxDQUFDK0IsU0FBTixDQUFnQngvQixRQUFoQixDQUF5QjJzRCxpQkFBekIsQ0FBMkNsdkIsS0FBSyxDQUFDbW9DLGFBQWpELEVBQWdFaFosR0FBaEU7O0FBQ0FudkIsYUFBSyxDQUFDbW9DLGFBQU4sR0FBc0IsSUFBdEI7QUFDSDtBQUNKLEtBTkQ7O0FBT0EsUUFBSXBtQyxTQUFTLEdBQUdzVSxRQUFRLENBQUN0VSxTQUF6QjtBQUNBLFFBQUk4akMsUUFBUSxHQUFHN2xDLEtBQUssQ0FBQzZsQyxRQUFOLEdBQWlCLElBQUk5Qix5QkFBSixDQUE4QmhpQyxTQUFTLENBQUN0OUIsRUFBeEMsQ0FBaEM7QUFDQW9oRSxZQUFRLENBQUM1QixrQkFBVCxHQUE4QixLQUE5QjtBQUNBNEIsWUFBUSxDQUFDN0IsV0FBVCxHQUF1QmppQyxTQUFTLENBQUNwYyxHQUFWLENBQWMsbUJBQWQsS0FBc0MsQ0FBN0Q7QUFDQWtnRCxZQUFRLENBQUNmLFlBQVQsQ0FBc0JoRCxTQUF0QixHQUFrQy8vQixTQUFTLENBQUNwYyxHQUFWLENBQWMsWUFBZCxDQUFsQztBQUNBLFFBQUlzaUQsV0FBVyxHQUFHam9DLEtBQUssQ0FBQ2lvQyxXQUFOLEdBQW9CLElBQUlyQyxXQUFKLENBQWdCNWxDLEtBQUssQ0FBQzZsQyxRQUF0QixFQUFnQzdlLHFGQUEwQixDQUFDM1EsUUFBRCxDQUExRCxDQUF0QztBQUNBNHhCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsYUFBdkIsRUFBc0N5NEIsS0FBSyxDQUFDb21DLGlCQUE1QztBQUNBNkIsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixXQUF2QixFQUFvQ3k0QixLQUFLLENBQUN1bUMsZUFBMUM7QUFDQTBCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsV0FBdkIsRUFBb0N5NEIsS0FBSyxDQUFDc29DLGVBQTFDO0FBQ0FMLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsV0FBdkIsRUFBb0N5NEIsS0FBSyxDQUFDeW1DLGVBQTFDO0FBQ0EsV0FBT3ptQyxLQUFQO0FBQ0g7O0FBQ0Rrb0MsZUFBYSxDQUFDbC9ELFNBQWQsQ0FBd0J5K0IsT0FBeEIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLbytCLFFBQUwsQ0FBY3ArQixPQUFkO0FBQ0gsR0FGRDs7QUFHQSxTQUFPeWdDLGFBQVA7QUFDSCxDQW5Fa0MsQ0FtRWpDcmhCLDhEQW5FaUMsQ0FBbkM7O0FBb0VBLFNBQVN3aEIsc0JBQVQsQ0FBZ0N0bUMsU0FBaEMsRUFBMkM7QUFDdkMsTUFBSXN4QixLQUFLLEdBQUd0eEIsU0FBUyxDQUFDcGMsR0FBVixDQUFjLHNCQUFkLENBQVo7O0FBQ0EsTUFBSTB0QyxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNmQSxTQUFLLEdBQUd0eEIsU0FBUyxDQUFDcGMsR0FBVixDQUFjLGdCQUFkLENBQVI7QUFDSDs7QUFDRCxTQUFPMHRDLEtBQVA7QUFDSDs7QUFDRCxTQUFTb1YscUJBQVQsQ0FBK0JYLElBQS9CLEVBQXFDQyxJQUFyQyxFQUEyQzE4Qix5QkFBM0MsRUFBc0U7QUFDbEUsTUFBSXE5QixTQUFTLEdBQUdaLElBQUksQ0FBQ2xuQyxRQUFyQjtBQUNBLE1BQUkrbkMsU0FBUyxHQUFHWixJQUFJLENBQUNubkMsUUFBckI7QUFDQSxNQUFJMW9CLEVBQUUsR0FBRyxDQUNMd3dELFNBQVMsQ0FBQzlvRCxLQUFWLENBQWdCOVosS0FEWCxFQUVMNGlFLFNBQVMsQ0FBQzlvRCxLQUFWLENBQWdCN1osR0FGWCxFQUdMNGlFLFNBQVMsQ0FBQy9vRCxLQUFWLENBQWdCOVosS0FIWCxFQUlMNmlFLFNBQVMsQ0FBQy9vRCxLQUFWLENBQWdCN1osR0FKWCxDQUFUO0FBTUFtUyxJQUFFLENBQUMyTyxJQUFILENBQVF2SixpRUFBUjtBQUNBLE1BQUlwUixLQUFLLEdBQUcsRUFBWjs7QUFDQSxPQUFLLElBQUkyUixFQUFFLEdBQUcsQ0FBVCxFQUFZK3FELDJCQUEyQixHQUFHdjlCLHlCQUEvQyxFQUEwRXh0QixFQUFFLEdBQUcrcUQsMkJBQTJCLENBQUN0L0QsTUFBM0csRUFBbUh1VSxFQUFFLEVBQXJILEVBQXlIO0FBQ3JILFFBQUlnb0MsV0FBVyxHQUFHK2lCLDJCQUEyQixDQUFDL3FELEVBQUQsQ0FBN0M7QUFDQSxRQUFJOVEsR0FBRyxHQUFHODRDLFdBQVcsQ0FBQ2lpQixJQUFELEVBQU9DLElBQVAsQ0FBckI7O0FBQ0EsUUFBSWg3RCxHQUFHLEtBQUssS0FBWixFQUFtQjtBQUNmLGFBQU8sSUFBUDtBQUNILEtBRkQsTUFHSyxJQUFJQSxHQUFKLEVBQVM7QUFDVitULGNBQVEsQ0FBQzVVLEtBQUQsRUFBUWEsR0FBUixDQUFSO0FBQ0g7QUFDSjs7QUFDRGIsT0FBSyxDQUFDMFQsS0FBTixHQUFjO0FBQUU5WixTQUFLLEVBQUVvUyxFQUFFLENBQUMsQ0FBRCxDQUFYO0FBQWdCblMsT0FBRyxFQUFFbVMsRUFBRSxDQUFDLENBQUQ7QUFBdkIsR0FBZDtBQUNBaE0sT0FBSyxDQUFDdVYsTUFBTixHQUFlaW5ELFNBQVMsQ0FBQ2puRCxNQUF6QjtBQUNBLFNBQU92VixLQUFQO0FBQ0g7O0FBRUQsSUFBSTI4RCxhQUFhO0FBQUc7QUFBZSxVQUFVL2tDLE1BQVYsRUFBa0I7QUFDakRuakIsV0FBUyxDQUFDa29ELGFBQUQsRUFBZ0Iva0MsTUFBaEIsQ0FBVDs7QUFDQSxXQUFTK2tDLGFBQVQsQ0FBdUJ4eUIsUUFBdkIsRUFBaUM7QUFDN0IsUUFBSXJXLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQm10QyxRQUFsQixLQUErQixJQUEzQyxDQUQ2QixDQUU3Qjs7O0FBQ0FyVyxTQUFLLENBQUM4b0MsVUFBTixHQUFtQixJQUFuQixDQUg2QixDQUdKOztBQUN6QjlvQyxTQUFLLENBQUN3MUIsVUFBTixHQUFtQixLQUFuQjtBQUNBeDFCLFNBQUssQ0FBQ3RMLFVBQU4sR0FBbUIsSUFBbkI7QUFDQXNMLFNBQUssQ0FBQytvQyxjQUFOLEdBQXVCLElBQXZCLENBTjZCLENBTUE7O0FBQzdCL29DLFNBQUssQ0FBQ2dwQyxpQkFBTixHQUEwQixJQUExQjtBQUNBaHBDLFNBQUssQ0FBQ2lwQyxhQUFOLEdBQXNCLElBQXRCO0FBQ0FqcEMsU0FBSyxDQUFDa3BDLHFCQUFOLEdBQThCLElBQTlCOztBQUNBbHBDLFNBQUssQ0FBQ29tQyxpQkFBTixHQUEwQixVQUFVdHFFLEVBQVYsRUFBYztBQUNwQyxVQUFJcXRFLFVBQVUsR0FBR3J0RSxFQUFFLENBQUN1ekQsU0FBSCxDQUFheDlDLE1BQTlCO0FBQ0EsVUFBSW9GLEVBQUUsR0FBRytvQixLQUFUO0FBQUEsVUFBZ0IrQixTQUFTLEdBQUc5cUIsRUFBRSxDQUFDOHFCLFNBQS9CO0FBQUEsVUFBMEM4akMsUUFBUSxHQUFHNXVELEVBQUUsQ0FBQzR1RCxRQUF4RDtBQUNBLFVBQUlwQixNQUFNLEdBQUdvQixRQUFRLENBQUNwQixNQUF0QjtBQUNBLFVBQUkyRSxlQUFlLEdBQUdybkMsU0FBUyxDQUFDeC9CLFFBQWhDO0FBQ0EsVUFBSXVtRSxVQUFVLEdBQUc5b0MsS0FBSyxDQUFDOG9DLFVBQU4sR0FBbUJoMEMsbUVBQVEsQ0FBQ2g1QixFQUFFLENBQUNpaEUsU0FBSixDQUE1QztBQUNBLFVBQUlyb0MsVUFBVSxHQUFHc0wsS0FBSyxDQUFDdEwsVUFBTixHQUFtQm8wQyxVQUFVLENBQUNwMEMsVUFBL0M7QUFDQSxVQUFJd3BCLGVBQWUsR0FBR3hwQixVQUFVLENBQUN0USxRQUFYLENBQW9CRSxVQUExQztBQUNBMGIsV0FBSyxDQUFDK29DLGNBQU4sR0FBdUJoa0QsNEVBQWlCLENBQUNxa0QsZUFBZSxDQUFDaDNDLEtBQWhCLENBQXNCMU8sVUFBdkIsRUFBbUN3NkIsZUFBbkMsQ0FBeEM7QUFDQTJuQixjQUFRLENBQUM3QixXQUFULEdBQXVCbG9FLEVBQUUsQ0FBQytpRSxPQUFILEdBQWEsQ0FBYixHQUFpQjk4QixTQUFTLENBQUNwYyxHQUFWLENBQWMsc0JBQWQsQ0FBeEM7QUFDQWtnRCxjQUFRLENBQUN4UyxLQUFULEdBQ0k7QUFDQ3YzRCxRQUFFLENBQUMraUUsT0FBSCxJQUFjM2dCLGVBQWUsS0FBS25jLFNBQVMsQ0FBQzcxQixLQUFWLENBQWdCNHJCLGNBQW5ELEdBQ0l1eEMsd0JBQXdCLENBQUN0bkMsU0FBRCxDQUQ1QixHQUVJLElBSlI7QUFLQTBpQyxZQUFNLENBQUMxNkQsVUFBUCxHQUFvQnEvRCxlQUFlLENBQUMza0UsRUFBcEM7QUFDQWdnRSxZQUFNLENBQUN6RSxjQUFQLEdBQXdCaitCLFNBQVMsQ0FBQ3BjLEdBQVYsQ0FBYyxvQkFBZCxDQUF4QjtBQUNBLFVBQUlnMUIsT0FBTyxHQUFHNVksU0FBUyxDQUFDeUksZ0JBQVYsQ0FBMkIyK0IsVUFBM0IsS0FDVixDQUFDbCtELHlFQUFjLENBQUNrK0QsVUFBRCxFQUFhLGFBQWIsQ0FEbkIsQ0FqQm9DLENBa0JZOztBQUNoRHRELGNBQVEsQ0FBQ1QsYUFBVCxDQUF1QixDQUFDenFCLE9BQXhCLEVBbkJvQyxDQW9CcEM7QUFDQTs7QUFDQTNhLFdBQUssQ0FBQ3cxQixVQUFOLEdBQW1CN2EsT0FBTyxJQUN0QjcrQyxFQUFFLENBQUNpaEUsU0FBSCxDQUFhaHhELFNBQWIsQ0FBdUJsQixRQUF2QixDQUFnQyxjQUFoQyxDQURKO0FBRUgsS0F4QkQ7O0FBeUJBbTFCLFNBQUssQ0FBQ3VtQyxlQUFOLEdBQXdCLFVBQVV6cUUsRUFBVixFQUFjO0FBQ2xDLFVBQUlzdEUsZUFBZSxHQUFHcHBDLEtBQUssQ0FBQytCLFNBQU4sQ0FBZ0J4L0IsUUFBdEM7QUFDQSxVQUFJbXlCLFVBQVUsR0FBR3NMLEtBQUssQ0FBQ3RMLFVBQXZCO0FBQ0EsVUFBSXdwQixlQUFlLEdBQUd4cEIsVUFBVSxDQUFDdFEsUUFBWCxDQUFvQkUsVUFBMUM7O0FBQ0EsVUFBSXhvQixFQUFFLENBQUMraUUsT0FBUCxFQUFnQjtBQUNaO0FBQ0EsWUFBSTNnQixlQUFlLEtBQUtsZSxLQUFLLENBQUMrQixTQUFOLENBQWdCNzFCLEtBQWhCLENBQXNCNHJCLGNBQTlDLEVBQThEO0FBQzFEc3hDLHlCQUFlLENBQUNwNkMsUUFBaEIsQ0FBeUI7QUFBRXBxQixnQkFBSSxFQUFFLGNBQVI7QUFBd0JzNUMsMkJBQWUsRUFBRUE7QUFBekMsV0FBekI7QUFDSDtBQUNKLE9BTEQsTUFNSztBQUNEO0FBQ0FrckIsdUJBQWUsQ0FBQ3A2QyxRQUFoQixDQUF5QjtBQUFFcHFCLGNBQUksRUFBRTtBQUFSLFNBQXpCO0FBQ0g7O0FBQ0QsVUFBSW83QixLQUFLLENBQUN3MUIsVUFBVixFQUFzQjtBQUNsQjRULHVCQUFlLENBQUN2YixRQUFoQixDQUF5Qi94RCxFQUF6QixFQURrQixDQUNZOztBQUM5QnN0RSx1QkFBZSxDQUFDMzBDLGVBQWhCLENBQWdDLGdCQUFoQyxFQUFrRCxDQUM5QztBQUNJaHdCLFlBQUUsRUFBRXU3QixLQUFLLENBQUM4b0MsVUFBTixDQUFpQnJrRSxFQUR6QjtBQUVJMEIsZUFBSyxFQUFFLElBQUlzcEIsMkRBQUosQ0FBYTI1QyxlQUFiLEVBQThCMTBDLFVBQVUsQ0FBQ3hRLEdBQXpDLEVBQThDd1EsVUFBVSxDQUFDdFEsUUFBekQsQ0FGWDtBQUdJbWpDLGlCQUFPLEVBQUV6ckQsRUFBRSxDQUFDdXpELFNBSGhCO0FBSUluN0IsY0FBSSxFQUFFOEwsS0FBSyxDQUFDK0IsU0FBTixDQUFnQjdOO0FBSjFCLFNBRDhDLENBQWxEO0FBUUg7QUFDSixLQXpCRDs7QUEwQkE4TCxTQUFLLENBQUNzb0MsZUFBTixHQUF3QixVQUFVbkIsR0FBVixFQUFlb0IsT0FBZixFQUF3QjtBQUM1QyxVQUFJLENBQUN2b0MsS0FBSyxDQUFDdzFCLFVBQVgsRUFBdUI7QUFDbkI7QUFDSDs7QUFDRCxVQUFJdVQsY0FBYyxHQUFHL29DLEtBQUssQ0FBQytvQyxjQUEzQjtBQUNBLFVBQUk5QyxVQUFVLEdBQUdqbUMsS0FBSyxDQUFDaW9DLFdBQU4sQ0FBa0JoQyxVQUFuQztBQUNBLFVBQUltRCxlQUFlLEdBQUdwcEMsS0FBSyxDQUFDK0IsU0FBTixDQUFnQngvQixRQUF0QyxDQU40QyxDQU81Qzs7QUFDQSxVQUFJeW1FLGlCQUFpQixHQUFHLElBQXhCO0FBQ0EsVUFBSTkyQyxRQUFRLEdBQUcsSUFBZjtBQUNBLFVBQUlnM0MscUJBQXFCLEdBQUcsSUFBNUI7QUFDQSxVQUFJVixTQUFTLEdBQUcsS0FBaEI7QUFDQSxVQUFJanhDLFdBQVcsR0FBRztBQUNkc0Isc0JBQWMsRUFBRWt3QyxjQURGO0FBRWR6d0MscUJBQWEsRUFBRTNVLGdGQUFxQixFQUZ0QjtBQUdkK1UsZUFBTyxFQUFFLElBSEs7QUFJZCtJLGVBQU8sRUFBRXpCLEtBQUssQ0FBQzhvQztBQUpELE9BQWxCOztBQU1BLFVBQUkzQixHQUFKLEVBQVM7QUFDTCxZQUFJbUMsa0JBQWtCLEdBQUduQyxHQUFHLENBQUNwbEMsU0FBN0I7QUFDQWluQyx5QkFBaUIsR0FBR00sa0JBQWtCLENBQUMvbUUsUUFBdkM7O0FBQ0EsWUFBSTZtRSxlQUFlLEtBQUtKLGlCQUFwQixJQUNBTSxrQkFBa0IsQ0FBQzNqRCxHQUFuQixDQUF1QixVQUF2QixLQUFzQzJqRCxrQkFBa0IsQ0FBQzNqRCxHQUFuQixDQUF1QixXQUF2QixDQUQxQyxFQUMrRTtBQUMzRXVNLGtCQUFRLEdBQUdxM0Msb0JBQW9CLENBQUN0RCxVQUFELEVBQWFrQixHQUFiLEVBQWtCNkIsaUJBQWlCLENBQUNya0QsWUFBbEIsQ0FBK0JDLEtBQS9CLENBQXFDd21CLDBCQUF2RCxDQUEvQjs7QUFDQSxjQUFJbFosUUFBSixFQUFjO0FBQ1ZnM0MsaUNBQXFCLEdBQUcvekMsb0ZBQXlCLENBQUM0ekMsY0FBRCxFQUFpQkMsaUJBQWlCLENBQUNsMkMsWUFBbkMsRUFBaURaLFFBQWpELEVBQTJEODJDLGlCQUEzRCxDQUFqRDtBQUNBenhDLHVCQUFXLENBQUNlLGFBQVosR0FBNEI0d0MscUJBQTVCOztBQUNBLGdCQUFJLENBQUNJLGtCQUFrQixDQUFDaHlDLGtCQUFuQixDQUFzQ0MsV0FBdEMsQ0FBTCxFQUF5RDtBQUNyRGl4Qyx1QkFBUyxHQUFHLElBQVo7QUFDQXQyQyxzQkFBUSxHQUFHLElBQVg7QUFDQWczQyxtQ0FBcUIsR0FBRyxJQUF4QjtBQUNBM3hDLHlCQUFXLENBQUNlLGFBQVosR0FBNEIzVSxnRkFBcUIsRUFBakQ7QUFDSDtBQUNKO0FBQ0osU0FiRCxNQWNLO0FBQ0RxbEQsMkJBQWlCLEdBQUcsSUFBcEI7QUFDSDtBQUNKOztBQUNEaHBDLFdBQUssQ0FBQ3dwQyxXQUFOLENBQWtCUixpQkFBbEIsRUFBcUN6eEMsV0FBckM7O0FBQ0EsVUFBSSxDQUFDaXhDLFNBQUwsRUFBZ0I7QUFDWnR1RCwrRUFBWTtBQUNmLE9BRkQsTUFHSztBQUNERCxnRkFBYTtBQUNoQjs7QUFDRCxVQUFJLENBQUNzdUQsT0FBTCxFQUFjO0FBQ1YsWUFBSWEsZUFBZSxLQUFLSixpQkFBcEIsSUFBeUM7QUFDekM1QixtQkFBVyxDQUFDbkIsVUFBRCxFQUFha0IsR0FBYixDQURmLEVBQ2tDO0FBQzlCajFDLGtCQUFRLEdBQUcsSUFBWDtBQUNIOztBQUNEOE4sYUFBSyxDQUFDNmxDLFFBQU4sQ0FBZW5PLG9CQUFmLENBQW9DLENBQUN4bEMsUUFBckMsRUFMVSxDQU1WO0FBQ0E7OztBQUNBOE4sYUFBSyxDQUFDNmxDLFFBQU4sQ0FBZXBPLGtCQUFmLENBQWtDLENBQUMwUCxHQUFELElBQVEsQ0FBQ3RxRSxRQUFRLENBQUN3cUQsYUFBVCxDQUF1QixZQUF2QixDQUEzQyxFQVJVLENBU1Y7OztBQUNBcm5CLGFBQUssQ0FBQ2dwQyxpQkFBTixHQUEwQkEsaUJBQTFCO0FBQ0FocEMsYUFBSyxDQUFDaXBDLGFBQU4sR0FBc0IvMkMsUUFBdEI7QUFDQThOLGFBQUssQ0FBQ2twQyxxQkFBTixHQUE4QkEscUJBQTlCO0FBQ0g7QUFDSixLQTVERDs7QUE2REFscEMsU0FBSyxDQUFDeW1DLGVBQU4sR0FBd0IsWUFBWTtBQUNoQyxVQUFJLENBQUN6bUMsS0FBSyxDQUFDdzFCLFVBQVgsRUFBdUI7QUFDbkJ4MUIsYUFBSyxDQUFDKzlCLE9BQU4sR0FEbUIsQ0FDRjs7QUFDcEI7QUFDSixLQUpEOztBQUtBLzlCLFNBQUssQ0FBQzJtQyxhQUFOLEdBQXNCLFVBQVU3cUUsRUFBVixFQUFjO0FBQ2hDLFVBQUlra0MsS0FBSyxDQUFDdzFCLFVBQVYsRUFBc0I7QUFDbEIsWUFBSWlVLGlCQUFpQixHQUFHenBDLEtBQUssQ0FBQytCLFNBQU4sQ0FBZ0J4L0IsUUFBeEM7QUFDQSxZQUFJbW5FLFdBQVcsR0FBRzFwQyxLQUFLLENBQUMrQixTQUFOLENBQWdCN04sSUFBbEM7QUFDQSxZQUFJamQsRUFBRSxHQUFHK29CLEtBQVQ7QUFBQSxZQUFnQmdwQyxpQkFBaUIsR0FBRy94RCxFQUFFLENBQUMreEQsaUJBQXZDO0FBQUEsWUFBMERDLGFBQWEsR0FBR2h5RCxFQUFFLENBQUNneUQsYUFBN0U7QUFDQSxZQUFJbG5ELFFBQVEsR0FBR2llLEtBQUssQ0FBQ3RMLFVBQU4sQ0FBaUJ4USxHQUFoQztBQUNBLFlBQUk0UixhQUFhLEdBQUdrSyxLQUFLLENBQUN0TCxVQUFOLENBQWlCdFEsUUFBckM7QUFDQSxZQUFJNFYsUUFBUSxHQUFHLElBQUl2SywyREFBSixDQUFhZzZDLGlCQUFiLEVBQWdDMW5ELFFBQWhDLEVBQTBDK1QsYUFBMUMsQ0FBZjtBQUNBLFlBQUk2ekMsZ0JBQWdCLEdBQUczcEMsS0FBSyxDQUFDK29DLGNBQTdCO0FBQ0EsWUFBSUcscUJBQXFCLEdBQUdscEMsS0FBSyxDQUFDa3BDLHFCQUFsQztBQUNBLFlBQUkvQyxRQUFRLEdBQUdubUMsS0FBSyxDQUFDaW9DLFdBQU4sQ0FBa0I5QixRQUFqQzs7QUFDQW5tQyxhQUFLLENBQUM0cEMsU0FBTixHQVZrQixDQVVDOzs7QUFDbkJILHlCQUFpQixDQUFDaDFDLGVBQWxCLENBQWtDLGVBQWxDLEVBQW1ELENBQy9DO0FBQ0lod0IsWUFBRSxFQUFFdTdCLEtBQUssQ0FBQzhvQyxVQUFOLENBQWlCcmtFLEVBRHpCO0FBRUkwQixlQUFLLEVBQUU2ekIsUUFGWDtBQUdJdXRCLGlCQUFPLEVBQUV6ckQsRUFBRSxDQUFDdXpELFNBSGhCO0FBSUluN0IsY0FBSSxFQUFFdzFDO0FBSlYsU0FEK0MsQ0FBbkQ7O0FBUUEsWUFBSVQsYUFBSixFQUFtQjtBQUNmO0FBQ0EsY0FBSUQsaUJBQWlCLEtBQUtTLGlCQUExQixFQUE2QztBQUN6Q0EsNkJBQWlCLENBQUN6NkMsUUFBbEIsQ0FBMkI7QUFDdkJwcUIsa0JBQUksRUFBRSxjQURpQjtBQUV2QjhlLHdCQUFVLEVBQUV3bEQ7QUFGVyxhQUEzQjtBQUlBLGdCQUFJVyxXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsaUJBQUssSUFBSWhzRCxFQUFFLEdBQUcsQ0FBVCxFQUFZaVMsRUFBRSxHQUFHMjVDLGlCQUFpQixDQUFDOWtELFlBQWxCLENBQStCQyxLQUEvQixDQUFxQ2luQixxQkFBM0QsRUFBa0ZodUIsRUFBRSxHQUFHaVMsRUFBRSxDQUFDeG1CLE1BQTFGLEVBQWtHdVUsRUFBRSxFQUFwRyxFQUF3RztBQUNwRyxrQkFBSWdvQyxXQUFXLEdBQUcvMUIsRUFBRSxDQUFDalMsRUFBRCxDQUFwQjs7QUFDQWlELHNCQUFRLENBQUMrb0QsV0FBRCxFQUFjaGtCLFdBQVcsQ0FBQ29qQixhQUFELEVBQWdCUSxpQkFBaEIsQ0FBekIsQ0FBUjtBQUNIOztBQUNELGdCQUFJSyxZQUFZLEdBQUdocEQsUUFBUSxDQUFDLEVBQUQsRUFBSytvRCxXQUFMLEVBQWtCO0FBQUVwbEUsZ0JBQUUsRUFBRTNJLEVBQUUsQ0FBQ2loRSxTQUFUO0FBQW9CdHJDLG1CQUFLLEVBQUV3M0MsYUFBYSxDQUFDaDRDLFVBQXpDO0FBQXFEODRDLHNCQUFRLEVBQUUvdkMsUUFBL0Q7QUFBeUU3ekIsbUJBQUssRUFBRSxJQUFJc3BCLDJEQUFKLEVBQWE7QUFDdElnNkMsK0JBRHlILEVBQ3RHUCxxQkFBcUIsQ0FBQ2psRCxJQUF0QixDQUEyQmxDLFFBQVEsQ0FBQ29DLEtBQXBDLENBRHNHLEVBQzFEMlIsYUFBYSxHQUFHb3pDLHFCQUFxQixDQUFDN2tELFNBQXRCLENBQWdDeVIsYUFBYSxDQUFDeFIsVUFBOUMsQ0FBSCxHQUErRCxJQURsQixDQUFoRjtBQUN5RzBsRCxvQkFBTSxFQUFFLFlBQVk7QUFDbEtQLGlDQUFpQixDQUFDejZDLFFBQWxCLENBQTJCO0FBQ3ZCcHFCLHNCQUFJLEVBQUUsY0FEaUI7QUFFdkI4ZSw0QkFBVSxFQUFFaW1EO0FBRlcsaUJBQTNCO0FBSUgsZUFOd0M7QUFNdENwaUIscUJBQU8sRUFBRXpyRCxFQUFFLENBQUN1ekQsU0FOMEI7QUFNZm43QixrQkFBSSxFQUFFdzFDO0FBTlMsYUFBbEIsQ0FBM0I7O0FBT0FELDZCQUFpQixDQUFDaDFDLGVBQWxCLENBQWtDLFdBQWxDLEVBQStDLENBQUNxMUMsWUFBRCxDQUEvQyxFQWpCeUMsQ0FrQnpDO0FBQ0gsV0FuQkQsTUFvQkssSUFBSWQsaUJBQUosRUFBdUI7QUFDeEJTLDZCQUFpQixDQUFDaDFDLGVBQWxCLENBQWtDLFlBQWxDLEVBQWdELENBQzVDO0FBQ0l3MUMsdUJBQVMsRUFBRW51RSxFQUFFLENBQUNpaEUsU0FEbEI7QUFFSTUyRCxtQkFBSyxFQUFFNnpCLFFBRlg7QUFHSTlGLGtCQUFJLEVBQUV3MUM7QUFIVixhQUQ0QyxDQUFoRDtBQU9BRCw2QkFBaUIsQ0FBQ3o2QyxRQUFsQixDQUEyQjtBQUN2QnBxQixrQkFBSSxFQUFFLHdCQURpQjtBQUV2QnlmLHVCQUFTLEVBQUUyYixLQUFLLENBQUNrcEMscUJBQU4sQ0FBNEI3a0Q7QUFGaEIsYUFBM0I7QUFJQTJrRCw2QkFBaUIsQ0FBQ2g2QyxRQUFsQixDQUEyQjtBQUN2QnBxQixrQkFBSSxFQUFFLGNBRGlCO0FBRXZCOGUsd0JBQVUsRUFBRXNjLEtBQUssQ0FBQ2twQztBQUZLLGFBQTNCOztBQUlBLGdCQUFJcHRFLEVBQUUsQ0FBQytpRSxPQUFQLEVBQWdCO0FBQ1ptSywrQkFBaUIsQ0FBQ2g2QyxRQUFsQixDQUEyQjtBQUN2QnBxQixvQkFBSSxFQUFFLGNBRGlCO0FBRXZCczVDLCtCQUFlLEVBQUVwb0IsYUFBYSxDQUFDeFI7QUFGUixlQUEzQjtBQUlIOztBQUNELGdCQUFJNGxELE9BQU8sR0FBR3BwRCxRQUFRLENBQUMsRUFBRCxFQUFLa29ELGlCQUFpQixDQUFDL3BCLGlCQUFsQixDQUFvQ2tuQixRQUFRLENBQUN2bEMsUUFBN0MsQ0FBTCxFQUE2RDtBQUFFcXBDLHVCQUFTLEVBQUVudUUsRUFBRSxDQUFDaWhFLFNBQWhCO0FBQTJCeFYscUJBQU8sRUFBRXpyRCxFQUFFLENBQUN1ekQsU0FBdkM7QUFBa0RuN0Isa0JBQUksRUFBRWl5QyxRQUFRLENBQUNwa0MsU0FBakUsQ0FBMkU7O0FBQTNFLGFBQTdELENBQXRCOztBQUVBaW5DLDZCQUFpQixDQUFDdjBDLGVBQWxCLENBQWtDLE1BQWxDLEVBQTBDLENBQUN5MUMsT0FBRCxDQUExQztBQUNBbEIsNkJBQWlCLENBQUN2MEMsZUFBbEIsQ0FBa0MsY0FBbEMsRUFBa0QsQ0FDOUM7QUFDSXcxQyx1QkFBUyxFQUFFbnVFLEVBQUUsQ0FBQ2loRSxTQURsQjtBQUVJNTJELG1CQUFLLEVBQUUsSUFBSXNwQiwyREFBSixFQUFhO0FBQ3BCdTVDLCtCQURPLEVBQ1lFLHFCQUFxQixDQUFDamxELElBQXRCLENBQTJCbEMsUUFBUSxDQUFDb0MsS0FBcEMsQ0FEWixFQUN3RCtrRCxxQkFBcUIsQ0FBQzdrRCxTQUF0QixDQUFnQ3lSLGFBQWEsQ0FBQ3hSLFVBQTlDLENBRHhELENBRlg7QUFJSTRQLGtCQUFJLEVBQUVpeUMsUUFBUSxDQUFDcGtDLFNBSm5CLENBSTZCOztBQUo3QixhQUQ4QyxDQUFsRDtBQVFIO0FBQ0osU0F4REQsTUF5REs7QUFDRDBuQywyQkFBaUIsQ0FBQ2gxQyxlQUFsQixDQUFrQyxjQUFsQztBQUNIO0FBQ0o7O0FBQ0R1TCxXQUFLLENBQUMrOUIsT0FBTjtBQUNILEtBbEZEOztBQW1GQSxRQUFJaDhCLFNBQVMsR0FBRy9CLEtBQUssQ0FBQytCLFNBQXRCO0FBQ0EsUUFBSThqQyxRQUFRLEdBQUc3bEMsS0FBSyxDQUFDNmxDLFFBQU4sR0FBaUIsSUFBSTlCLHlCQUFKLENBQThCaGlDLFNBQVMsQ0FBQ3Q5QixFQUF4QyxDQUFoQztBQUNBb2hFLFlBQVEsQ0FBQ3JCLE9BQVQsQ0FBaUI3NUQsUUFBakIsR0FBNEJrK0QsYUFBYSxDQUFDc0IsUUFBMUM7QUFDQXRFLFlBQVEsQ0FBQzVCLGtCQUFULEdBQThCLEtBQTlCO0FBQ0E0QixZQUFRLENBQUNmLFlBQVQsQ0FBc0JoRCxTQUF0QixHQUFrQy8vQixTQUFTLENBQUNwYyxHQUFWLENBQWMsWUFBZCxDQUFsQztBQUNBLFFBQUlzaUQsV0FBVyxHQUFHam9DLEtBQUssQ0FBQ2lvQyxXQUFOLEdBQW9CLElBQUlyQyxXQUFKLENBQWdCNWxDLEtBQUssQ0FBQzZsQyxRQUF0QixFQUFnQzVlLDJFQUFoQyxDQUF0QztBQUNBZ2hCLGVBQVcsQ0FBQ2xDLGdCQUFaLEdBQStCMXZCLFFBQVEsQ0FBQzBRLGNBQXhDO0FBQ0FraEIsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixhQUF2QixFQUFzQ3k0QixLQUFLLENBQUNvbUMsaUJBQTVDO0FBQ0E2QixlQUFXLENBQUN6USxPQUFaLENBQW9CandELEVBQXBCLENBQXVCLFdBQXZCLEVBQW9DeTRCLEtBQUssQ0FBQ3VtQyxlQUExQztBQUNBMEIsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixXQUF2QixFQUFvQ3k0QixLQUFLLENBQUNzb0MsZUFBMUM7QUFDQUwsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixXQUF2QixFQUFvQ3k0QixLQUFLLENBQUN5bUMsZUFBMUM7QUFDQXdCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsU0FBdkIsRUFBa0N5NEIsS0FBSyxDQUFDMm1DLGFBQXhDO0FBQ0EsV0FBTzNtQyxLQUFQO0FBQ0g7O0FBQ0Q2b0MsZUFBYSxDQUFDNy9ELFNBQWQsQ0FBd0J5K0IsT0FBeEIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLbytCLFFBQUwsQ0FBY3ArQixPQUFkO0FBQ0gsR0FGRCxDQWxPaUQsQ0FxT2pEOzs7QUFDQW9oQyxlQUFhLENBQUM3L0QsU0FBZCxDQUF3QndnRSxXQUF4QixHQUFzQyxVQUFVWSxZQUFWLEVBQXdCaDRDLEtBQXhCLEVBQStCO0FBQ2pFLFFBQUlnM0MsZUFBZSxHQUFHLEtBQUtybkMsU0FBTCxDQUFleC9CLFFBQXJDO0FBQ0EsUUFBSThuRSxZQUFZLEdBQUcsS0FBS3JCLGlCQUF4QixDQUZpRSxDQUdqRTs7QUFDQSxRQUFJcUIsWUFBWSxJQUFJQSxZQUFZLEtBQUtELFlBQXJDLEVBQW1EO0FBQy9DO0FBQ0E7QUFDQSxVQUFJQyxZQUFZLEtBQUtqQixlQUFyQixFQUFzQztBQUNsQ2lCLG9CQUFZLENBQUNyN0MsUUFBYixDQUFzQjtBQUNsQnBxQixjQUFJLEVBQUUsZ0JBRFk7QUFFbEJ3dEIsZUFBSyxFQUFFO0FBQ0h5RywwQkFBYyxFQUFFekcsS0FBSyxDQUFDeUcsY0FEbkI7QUFFSFAseUJBQWEsRUFBRTNVLGdGQUFxQixFQUZqQztBQUdIK1UsbUJBQU8sRUFBRSxJQUhOO0FBSUgrSSxtQkFBTyxFQUFFclAsS0FBSyxDQUFDcVA7QUFKWjtBQUZXLFNBQXRCLEVBRGtDLENBVWxDO0FBQ0gsT0FYRCxNQVlLO0FBQ0Q0b0Msb0JBQVksQ0FBQ3I3QyxRQUFiLENBQXNCO0FBQUVwcUIsY0FBSSxFQUFFO0FBQVIsU0FBdEI7QUFDSDtBQUNKOztBQUNELFFBQUl3bEUsWUFBSixFQUFrQjtBQUNkQSxrQkFBWSxDQUFDcDdDLFFBQWIsQ0FBc0I7QUFBRXBxQixZQUFJLEVBQUUsZ0JBQVI7QUFBMEJ3dEIsYUFBSyxFQUFFQTtBQUFqQyxPQUF0QjtBQUNIO0FBQ0osR0ExQkQ7O0FBMkJBeTJDLGVBQWEsQ0FBQzcvRCxTQUFkLENBQXdCNGdFLFNBQXhCLEdBQW9DLFlBQVk7QUFDNUMsUUFBSVIsZUFBZSxHQUFHLEtBQUtybkMsU0FBTCxDQUFleC9CLFFBQXJDO0FBQ0EsUUFBSXltRSxpQkFBaUIsR0FBRyxLQUFLQSxpQkFBN0I7O0FBQ0EsUUFBSUEsaUJBQUosRUFBdUI7QUFDbkJBLHVCQUFpQixDQUFDaDZDLFFBQWxCLENBQTJCO0FBQUVwcUIsWUFBSSxFQUFFO0FBQVIsT0FBM0I7QUFDSCxLQUwyQyxDQU01Qzs7O0FBQ0EsUUFBSXdrRSxlQUFlLEtBQUtKLGlCQUF4QixFQUEyQztBQUN2Q0kscUJBQWUsQ0FBQ3A2QyxRQUFoQixDQUF5QjtBQUFFcHFCLFlBQUksRUFBRTtBQUFSLE9BQXpCO0FBQ0g7QUFDSixHQVZEOztBQVdBaWtFLGVBQWEsQ0FBQzcvRCxTQUFkLENBQXdCKzBELE9BQXhCLEdBQWtDLFlBQVk7QUFDMUMsU0FBSytLLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxTQUFLdFQsVUFBTCxHQUFrQixLQUFsQjtBQUNBLFNBQUs5Z0MsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFNBQUtxMEMsY0FBTCxHQUFzQixJQUF0QjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLElBQXpCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixJQUFyQjtBQUNBLFNBQUtDLHFCQUFMLEdBQTZCLElBQTdCO0FBQ0gsR0FSRDs7QUFTQUwsZUFBYSxDQUFDc0IsUUFBZCxHQUF5Qiw4QkFBekIsQ0FyUmlELENBcVJROztBQUN6RCxTQUFPdEIsYUFBUDtBQUNILENBdlJrQyxDQXVSakNoaUIsOERBdlJpQyxDQUFuQzs7QUF3UkEsU0FBUzBpQixvQkFBVCxDQUE4QnpCLElBQTlCLEVBQW9DQyxJQUFwQyxFQUEwQ3VDLFNBQTFDLEVBQXFEO0FBQ2pELE1BQUk1QixTQUFTLEdBQUdaLElBQUksQ0FBQ2xuQyxRQUFyQjtBQUNBLE1BQUkrbkMsU0FBUyxHQUFHWixJQUFJLENBQUNubkMsUUFBckI7QUFDQSxNQUFJN2dCLEtBQUssR0FBRzJvRCxTQUFTLENBQUM5b0QsS0FBVixDQUFnQjlaLEtBQTVCO0FBQ0EsTUFBSWthLEtBQUssR0FBRzJvRCxTQUFTLENBQUMvb0QsS0FBVixDQUFnQjlaLEtBQTVCO0FBQ0EsTUFBSW9xQixhQUFhLEdBQUcsRUFBcEI7O0FBQ0EsTUFBSXc0QyxTQUFTLENBQUNqbkQsTUFBVixLQUFxQmtuRCxTQUFTLENBQUNsbkQsTUFBbkMsRUFBMkM7QUFDdkN5TyxpQkFBYSxDQUFDek8sTUFBZCxHQUF1QmtuRCxTQUFTLENBQUNsbkQsTUFBakM7QUFDQXlPLGlCQUFhLENBQUNtQixNQUFkLEdBQXVCMDJDLElBQUksQ0FBQ2htQyxTQUFMLENBQWVwYyxHQUFmLENBQW1CLHdCQUFuQixDQUF2Qjs7QUFDQSxRQUFJZ2pELFNBQVMsQ0FBQ2xuRCxNQUFkLEVBQXNCO0FBQ2xCO0FBQ0E7QUFDQTFCLFdBQUssR0FBR2xNLHFFQUFVLENBQUNrTSxLQUFELENBQWxCO0FBQ0g7QUFDSjs7QUFDRCxNQUFJMFIsS0FBSyxHQUFHM1Isb0VBQVMsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLEVBQWU4bkQsSUFBSSxDQUFDL2xDLFNBQUwsQ0FBZTloQixPQUE5QixFQUF1QzZuRCxJQUFJLENBQUMvbEMsU0FBTCxLQUFtQmdtQyxJQUFJLENBQUNobUMsU0FBeEIsR0FDeEQrbEMsSUFBSSxDQUFDL2xDLFNBQUwsQ0FBZTdoQixTQUR5QyxHQUV4RCxJQUZpQixDQUFyQjs7QUFHQSxNQUFJdVIsS0FBSyxDQUFDdmQsWUFBVixFQUF3QjtBQUFFO0FBQ3RCZ2MsaUJBQWEsQ0FBQ3pPLE1BQWQsR0FBdUIsS0FBdkI7QUFDSDs7QUFDRCxNQUFJeVEsUUFBUSxHQUFHO0FBQ1hqQixjQUFVLEVBQUVRLEtBREQ7QUFFWHZCLGlCQUFhLEVBQUVBO0FBRkosR0FBZjs7QUFJQSxPQUFLLElBQUlyUyxFQUFFLEdBQUcsQ0FBVCxFQUFZMHNELFdBQVcsR0FBR0QsU0FBL0IsRUFBMEN6c0QsRUFBRSxHQUFHMHNELFdBQVcsQ0FBQ2poRSxNQUEzRCxFQUFtRXVVLEVBQUUsRUFBckUsRUFBeUU7QUFDckUsUUFBSTJzRCxRQUFRLEdBQUdELFdBQVcsQ0FBQzFzRCxFQUFELENBQTFCO0FBQ0Eyc0QsWUFBUSxDQUFDdDRDLFFBQUQsRUFBVzQxQyxJQUFYLEVBQWlCQyxJQUFqQixDQUFSO0FBQ0g7O0FBQ0QsU0FBTzcxQyxRQUFQO0FBQ0g7O0FBQ0QsU0FBU20zQyx3QkFBVCxDQUFrQ3RuQyxTQUFsQyxFQUE2QztBQUN6QyxNQUFJc3hCLEtBQUssR0FBR3R4QixTQUFTLENBQUNwYyxHQUFWLENBQWMscUJBQWQsQ0FBWjs7QUFDQSxNQUFJMHRDLEtBQUssSUFBSSxJQUFiLEVBQW1CO0FBQ2ZBLFNBQUssR0FBR3R4QixTQUFTLENBQUNwYyxHQUFWLENBQWMsZ0JBQWQsQ0FBUjtBQUNIOztBQUNELFNBQU8wdEMsS0FBUDtBQUNIOztBQUVELElBQUlvWCxlQUFlO0FBQUc7QUFBZSxVQUFVM21DLE1BQVYsRUFBa0I7QUFDbkRuakIsV0FBUyxDQUFDa29ELGFBQUQsRUFBZ0Iva0MsTUFBaEIsQ0FBVDs7QUFDQSxXQUFTK2tDLGFBQVQsQ0FBdUJ4eUIsUUFBdkIsRUFBaUM7QUFDN0IsUUFBSXJXLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQm10QyxRQUFsQixLQUErQixJQUEzQyxDQUQ2QixDQUU3Qjs7O0FBQ0FyVyxTQUFLLENBQUMwcUMsV0FBTixHQUFvQixJQUFwQixDQUg2QixDQUdIOztBQUMxQjFxQyxTQUFLLENBQUN0TCxVQUFOLEdBQW1CLElBQW5CO0FBQ0FzTCxTQUFLLENBQUMrb0MsY0FBTixHQUF1QixJQUF2QjtBQUNBL29DLFNBQUssQ0FBQ2lwQyxhQUFOLEdBQXNCLElBQXRCO0FBQ0FqcEMsU0FBSyxDQUFDa3BDLHFCQUFOLEdBQThCLElBQTlCOztBQUNBbHBDLFNBQUssQ0FBQ29tQyxpQkFBTixHQUEwQixVQUFVdHFFLEVBQVYsRUFBYztBQUNwQyxVQUFJaW1DLFNBQVMsR0FBRy9CLEtBQUssQ0FBQytCLFNBQXRCOztBQUNBLFVBQUl4TixHQUFHLEdBQUd5TCxLQUFLLENBQUMycUMsUUFBTixDQUFlN3VFLEVBQWYsQ0FBVjs7QUFDQSxVQUFJNDRCLFVBQVUsR0FBR3NMLEtBQUssQ0FBQ3RMLFVBQU4sR0FBbUJILEdBQUcsQ0FBQ0csVUFBeEM7QUFDQXNMLFdBQUssQ0FBQzZsQyxRQUFOLENBQWU3QixXQUFmLEdBQTZCamlDLFNBQVMsQ0FBQ3BjLEdBQVYsQ0FBYyxzQkFBZCxDQUE3QixDQUpvQyxDQUtwQzs7QUFDQXFhLFdBQUssQ0FBQzZsQyxRQUFOLENBQWVULGFBQWYsQ0FBNkIsQ0FBQ3BsQyxLQUFLLENBQUMrQixTQUFOLENBQWdCeUksZ0JBQWhCLENBQWlDMXVDLEVBQUUsQ0FBQ3V6RCxTQUFILENBQWF4OUMsTUFBOUMsQ0FBRCxJQUN4Qi9WLEVBQUUsQ0FBQytpRSxPQUFILElBQWM3K0IsS0FBSyxDQUFDK0IsU0FBTixDQUFnQjcxQixLQUFoQixDQUFzQjRyQixjQUF0QixLQUF5Q3BELFVBQVUsQ0FBQ3RRLFFBQVgsQ0FBb0JFLFVBRGhGO0FBRUgsS0FSRDs7QUFTQTBiLFNBQUssQ0FBQ3VtQyxlQUFOLEdBQXdCLFVBQVV6cUUsRUFBVixFQUFjO0FBQ2xDLFVBQUl5RyxRQUFRLEdBQUd5OUIsS0FBSyxDQUFDK0IsU0FBTixDQUFnQngvQixRQUEvQjtBQUNBLFVBQUlteUIsVUFBVSxHQUFHc0wsS0FBSyxDQUFDdEwsVUFBdkI7QUFDQXNMLFdBQUssQ0FBQytvQyxjQUFOLEdBQXVCaGtELDRFQUFpQixDQUFDeGlCLFFBQVEsQ0FBQzZ2QixLQUFULENBQWUxTyxVQUFoQixFQUE0QnNjLEtBQUssQ0FBQ3RMLFVBQU4sQ0FBaUJ0USxRQUFqQixDQUEwQkUsVUFBdEQsQ0FBeEM7QUFDQTBiLFdBQUssQ0FBQzBxQyxXQUFOLEdBQW9CMXFDLEtBQUssQ0FBQzJxQyxRQUFOLENBQWU3dUUsRUFBZixDQUFwQjtBQUNBeUcsY0FBUSxDQUFDc3JELFFBQVQ7QUFDQXRyRCxjQUFRLENBQUNreUIsZUFBVCxDQUF5QixrQkFBekIsRUFBNkMsQ0FDekM7QUFDSWh3QixVQUFFLEVBQUV1N0IsS0FBSyxDQUFDMHFDLFdBQU4sQ0FBa0JqbUUsRUFEMUI7QUFFSTBCLGFBQUssRUFBRSxJQUFJc3BCLDJEQUFKLENBQWFsdEIsUUFBYixFQUF1Qm15QixVQUFVLENBQUN4USxHQUFsQyxFQUF1Q3dRLFVBQVUsQ0FBQ3RRLFFBQWxELENBRlg7QUFHSW1qQyxlQUFPLEVBQUV6ckQsRUFBRSxDQUFDdXpELFNBSGhCO0FBSUluN0IsWUFBSSxFQUFFOEwsS0FBSyxDQUFDK0IsU0FBTixDQUFnQjdOO0FBSjFCLE9BRHlDLENBQTdDO0FBUUgsS0FkRDs7QUFlQThMLFNBQUssQ0FBQ3NvQyxlQUFOLEdBQXdCLFVBQVVuQixHQUFWLEVBQWVvQixPQUFmLEVBQXdCenNFLEVBQXhCLEVBQTRCO0FBQ2hELFVBQUl5RyxRQUFRLEdBQUd5OUIsS0FBSyxDQUFDK0IsU0FBTixDQUFnQngvQixRQUEvQjtBQUNBLFVBQUl3bUUsY0FBYyxHQUFHL29DLEtBQUssQ0FBQytvQyxjQUEzQjtBQUNBLFVBQUk5QyxVQUFVLEdBQUdqbUMsS0FBSyxDQUFDaW9DLFdBQU4sQ0FBa0JoQyxVQUFuQztBQUNBLFVBQUlud0MsYUFBYSxHQUFHa0ssS0FBSyxDQUFDdEwsVUFBTixDQUFpQnRRLFFBQXJDO0FBQ0EsVUFBSThOLFFBQVEsR0FBRyxJQUFmO0FBQ0EsVUFBSWczQyxxQkFBcUIsR0FBRyxJQUE1QjtBQUNBLFVBQUlWLFNBQVMsR0FBRyxLQUFoQjtBQUNBLFVBQUlqeEMsV0FBVyxHQUFHO0FBQ2RzQixzQkFBYyxFQUFFa3dDLGNBREY7QUFFZHp3QyxxQkFBYSxFQUFFM1UsZ0ZBQXFCLEVBRnRCO0FBR2QrVSxlQUFPLEVBQUUsSUFISztBQUlkK0ksZUFBTyxFQUFFekIsS0FBSyxDQUFDMHFDO0FBSkQsT0FBbEI7O0FBTUEsVUFBSXZELEdBQUosRUFBUztBQUNMajFDLGdCQUFRLEdBQUcwNEMsZUFBZSxDQUFDM0UsVUFBRCxFQUFha0IsR0FBYixFQUFrQnJyRSxFQUFFLENBQUNpaEUsU0FBSCxDQUFhaHhELFNBQWIsQ0FBdUJsQixRQUF2QixDQUFnQyxrQkFBaEMsQ0FBbEIsRUFBdUVpckIsYUFBYSxDQUFDbFcsS0FBckYsRUFBNEZyZCxRQUFRLENBQUNvaUIsWUFBVCxDQUFzQkMsS0FBdEIsQ0FBNEIrbUIseUJBQXhILENBQTFCO0FBQ0g7O0FBQ0QsVUFBSXpaLFFBQUosRUFBYztBQUNWZzNDLDZCQUFxQixHQUFHL3pDLG9GQUF5QixDQUFDNHpDLGNBQUQsRUFBaUJ4bUUsUUFBUSxDQUFDdXdCLFlBQTFCLEVBQXdDWixRQUF4QyxFQUFrRDN2QixRQUFsRCxDQUFqRDtBQUNBZzFCLG1CQUFXLENBQUNlLGFBQVosR0FBNEI0d0MscUJBQTVCOztBQUNBLFlBQUksQ0FBQ2xwQyxLQUFLLENBQUMrQixTQUFOLENBQWdCekssa0JBQWhCLENBQW1DQyxXQUFuQyxDQUFMLEVBQXNEO0FBQ2xEaXhDLG1CQUFTLEdBQUcsSUFBWjtBQUNBdDJDLGtCQUFRLEdBQUcsSUFBWDtBQUNBZzNDLCtCQUFxQixHQUFHLElBQXhCO0FBQ0EzeEMscUJBQVcsQ0FBQ2UsYUFBWixHQUE0QixJQUE1QjtBQUNIO0FBQ0o7O0FBQ0QsVUFBSTR3QyxxQkFBSixFQUEyQjtBQUN2QjNtRSxnQkFBUSxDQUFDeXNCLFFBQVQsQ0FBa0I7QUFDZHBxQixjQUFJLEVBQUUsa0JBRFE7QUFFZHd0QixlQUFLLEVBQUVtRjtBQUZPLFNBQWxCO0FBSUgsT0FMRCxNQU1LO0FBQ0RoMUIsZ0JBQVEsQ0FBQ3lzQixRQUFULENBQWtCO0FBQUVwcUIsY0FBSSxFQUFFO0FBQVIsU0FBbEI7QUFDSDs7QUFDRCxVQUFJLENBQUM0akUsU0FBTCxFQUFnQjtBQUNadHVELCtFQUFZO0FBQ2YsT0FGRCxNQUdLO0FBQ0RELGdGQUFhO0FBQ2hCOztBQUNELFVBQUksQ0FBQ3N1RCxPQUFMLEVBQWM7QUFDVixZQUFJcjJDLFFBQVEsSUFBSWsxQyxXQUFXLENBQUNuQixVQUFELEVBQWFrQixHQUFiLENBQTNCLEVBQThDO0FBQzFDajFDLGtCQUFRLEdBQUcsSUFBWDtBQUNIOztBQUNEOE4sYUFBSyxDQUFDaXBDLGFBQU4sR0FBc0IvMkMsUUFBdEI7QUFDQThOLGFBQUssQ0FBQ2twQyxxQkFBTixHQUE4QkEscUJBQTlCO0FBQ0g7QUFDSixLQWpERDs7QUFrREFscEMsU0FBSyxDQUFDMm1DLGFBQU4sR0FBc0IsVUFBVTdxRSxFQUFWLEVBQWM7QUFDaEMsVUFBSXlHLFFBQVEsR0FBR3k5QixLQUFLLENBQUMrQixTQUFOLENBQWdCeC9CLFFBQS9CO0FBQ0EsVUFBSTJ4QixJQUFJLEdBQUc4TCxLQUFLLENBQUMrQixTQUFOLENBQWdCN04sSUFBM0I7QUFDQSxVQUFJblMsUUFBUSxHQUFHaWUsS0FBSyxDQUFDdEwsVUFBTixDQUFpQnhRLEdBQWhDO0FBQ0EsVUFBSTRSLGFBQWEsR0FBR2tLLEtBQUssQ0FBQ3RMLFVBQU4sQ0FBaUJ0USxRQUFyQztBQUNBLFVBQUk0VixRQUFRLEdBQUcsSUFBSXZLLDJEQUFKLENBQWFsdEIsUUFBYixFQUF1QndmLFFBQXZCLEVBQWlDK1QsYUFBakMsQ0FBZjtBQUNBLFVBQUlpekMsY0FBYyxHQUFHL29DLEtBQUssQ0FBQytvQyxjQUEzQjtBQUNBLFVBQUlHLHFCQUFxQixHQUFHbHBDLEtBQUssQ0FBQ2twQyxxQkFBbEM7QUFDQTNtRSxjQUFRLENBQUNreUIsZUFBVCxDQUF5QixpQkFBekIsRUFBNEMsQ0FDeEM7QUFDSWh3QixVQUFFLEVBQUV1N0IsS0FBSyxDQUFDMHFDLFdBQU4sQ0FBa0JqbUUsRUFEMUI7QUFFSTBCLGFBQUssRUFBRTZ6QixRQUZYO0FBR0l1dEIsZUFBTyxFQUFFenJELEVBQUUsQ0FBQ3V6RCxTQUhoQjtBQUlJbjdCLFlBQUksRUFBRUE7QUFKVixPQUR3QyxDQUE1Qzs7QUFRQSxVQUFJOEwsS0FBSyxDQUFDaXBDLGFBQVYsRUFBeUI7QUFDckIxbUUsZ0JBQVEsQ0FBQ3lzQixRQUFULENBQWtCO0FBQ2RwcUIsY0FBSSxFQUFFLGNBRFE7QUFFZDhlLG9CQUFVLEVBQUV3bEQ7QUFGRSxTQUFsQjtBQUlBM21FLGdCQUFRLENBQUNreUIsZUFBVCxDQUF5QixhQUF6QixFQUF3QyxDQUNwQztBQUNJaHdCLFlBQUUsRUFBRXU3QixLQUFLLENBQUMwcUMsV0FBTixDQUFrQmptRSxFQUQxQjtBQUVJcXNCLG9CQUFVLEVBQUVrUCxLQUFLLENBQUNpcEMsYUFBTixDQUFvQm40QyxVQUFwQixJQUFrQy9aLHlFQUFjLENBQUMsQ0FBRCxDQUZoRTtBQUdJcWEsa0JBQVEsRUFBRTRPLEtBQUssQ0FBQ2lwQyxhQUFOLENBQW9CNzNDLFFBQXBCLElBQWdDcmEseUVBQWMsQ0FBQyxDQUFELENBSDVEO0FBSUk4ekQsbUJBQVMsRUFBRTd3QyxRQUpmO0FBS0k3ekIsZUFBSyxFQUFFLElBQUlzcEIsMkRBQUosRUFBYTtBQUNwQmx0QixrQkFETyxFQUNHMm1FLHFCQUFxQixDQUFDamxELElBQXRCLENBQTJCbEMsUUFBUSxDQUFDb0MsS0FBcEMsQ0FESCxFQUMrQzJSLGFBQWEsR0FBR296QyxxQkFBcUIsQ0FBQzdrRCxTQUF0QixDQUFnQ3lSLGFBQWEsQ0FBQ3hSLFVBQTlDLENBQUgsR0FBK0QsSUFEM0gsQ0FMWDtBQU9JMGxELGdCQUFNLEVBQUUsWUFBWTtBQUNoQnpuRSxvQkFBUSxDQUFDeXNCLFFBQVQsQ0FBa0I7QUFDZHBxQixrQkFBSSxFQUFFLGNBRFE7QUFFZDhlLHdCQUFVLEVBQUVxbEQ7QUFGRSxhQUFsQjtBQUlILFdBWkw7QUFhSXhoQixpQkFBTyxFQUFFenJELEVBQUUsQ0FBQ3V6RCxTQWJoQjtBQWNJbjdCLGNBQUksRUFBRUE7QUFkVixTQURvQyxDQUF4QztBQWtCSCxPQXZCRCxNQXdCSztBQUNEM3hCLGdCQUFRLENBQUNreUIsZUFBVCxDQUF5QixnQkFBekI7QUFDSCxPQTFDK0IsQ0EyQ2hDOzs7QUFDQXVMLFdBQUssQ0FBQzBxQyxXQUFOLEdBQW9CLElBQXBCO0FBQ0ExcUMsV0FBSyxDQUFDK29DLGNBQU4sR0FBdUIsSUFBdkI7QUFDQS9vQyxXQUFLLENBQUNpcEMsYUFBTixHQUFzQixJQUF0QixDQTlDZ0MsQ0ErQ2hDO0FBQ0gsS0FoREQ7O0FBaURBLFFBQUlsbkMsU0FBUyxHQUFHc1UsUUFBUSxDQUFDdFUsU0FBekI7QUFDQSxRQUFJOGpDLFFBQVEsR0FBRzdsQyxLQUFLLENBQUM2bEMsUUFBTixHQUFpQixJQUFJOUIseUJBQUosQ0FBOEJoaUMsU0FBUyxDQUFDdDlCLEVBQXhDLENBQWhDO0FBQ0FvaEUsWUFBUSxDQUFDckIsT0FBVCxDQUFpQjc1RCxRQUFqQixHQUE0QixhQUE1QjtBQUNBazdELFlBQVEsQ0FBQzVCLGtCQUFULEdBQThCLEtBQTlCO0FBQ0E0QixZQUFRLENBQUNmLFlBQVQsQ0FBc0JoRCxTQUF0QixHQUFrQy8vQixTQUFTLENBQUNwYyxHQUFWLENBQWMsWUFBZCxDQUFsQztBQUNBLFFBQUlzaUQsV0FBVyxHQUFHam9DLEtBQUssQ0FBQ2lvQyxXQUFOLEdBQW9CLElBQUlyQyxXQUFKLENBQWdCNWxDLEtBQUssQ0FBQzZsQyxRQUF0QixFQUFnQzdlLHFGQUEwQixDQUFDM1EsUUFBRCxDQUExRCxDQUF0QztBQUNBNHhCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsYUFBdkIsRUFBc0N5NEIsS0FBSyxDQUFDb21DLGlCQUE1QztBQUNBNkIsZUFBVyxDQUFDelEsT0FBWixDQUFvQmp3RCxFQUFwQixDQUF1QixXQUF2QixFQUFvQ3k0QixLQUFLLENBQUN1bUMsZUFBMUM7QUFDQTBCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsV0FBdkIsRUFBb0N5NEIsS0FBSyxDQUFDc29DLGVBQTFDO0FBQ0FMLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsU0FBdkIsRUFBa0N5NEIsS0FBSyxDQUFDMm1DLGFBQXhDO0FBQ0EsV0FBTzNtQyxLQUFQO0FBQ0g7O0FBQ0Q2b0MsZUFBYSxDQUFDNy9ELFNBQWQsQ0FBd0J5K0IsT0FBeEIsR0FBa0MsWUFBWTtBQUMxQyxTQUFLbytCLFFBQUwsQ0FBY3ArQixPQUFkO0FBQ0gsR0FGRDs7QUFHQW9oQyxlQUFhLENBQUM3L0QsU0FBZCxDQUF3QjJoRSxRQUF4QixHQUFtQyxVQUFVN3VFLEVBQVYsRUFBYztBQUM3QyxXQUFPZzVCLG1FQUFRLENBQUM3cEIseUVBQWMsQ0FBQ25QLEVBQUUsQ0FBQ2loRSxTQUFKLEVBQWUsS0FBS2g3QixTQUFMLENBQWU4SSxhQUE5QixDQUFmLENBQWY7QUFDSCxHQUZEOztBQUdBLFNBQU9nK0IsYUFBUDtBQUNILENBeEpvQyxDQXdKbkNoaUIsOERBeEptQyxDQUFyQzs7QUF5SkEsU0FBUytqQixlQUFULENBQXlCOUMsSUFBekIsRUFBK0JDLElBQS9CLEVBQXFDK0MsV0FBckMsRUFBa0RqNkMsYUFBbEQsRUFBaUVrNkMsVUFBakUsRUFBNkU7QUFDekUsTUFBSTlxRCxPQUFPLEdBQUc2bkQsSUFBSSxDQUFDL2xDLFNBQUwsQ0FBZTloQixPQUE3QjtBQUNBLE1BQUlGLEtBQUssR0FBRytuRCxJQUFJLENBQUNsbkMsUUFBTCxDQUFjaGhCLEtBQWQsQ0FBb0I5WixLQUFoQztBQUNBLE1BQUlrYSxLQUFLLEdBQUcrbkQsSUFBSSxDQUFDbm5DLFFBQUwsQ0FBY2hoQixLQUFkLENBQW9COVosS0FBaEM7QUFDQSxNQUFJMnJCLEtBQUssR0FBRzNSLG9FQUFTLENBQUNDLEtBQUQsRUFBUUMsS0FBUixFQUFlQyxPQUFmLEVBQXdCNm5ELElBQUksQ0FBQy9sQyxTQUFMLENBQWU3aEIsU0FBdkMsQ0FBckI7QUFDQSxNQUFJaFUsS0FBSyxHQUFHLEVBQVo7O0FBQ0EsT0FBSyxJQUFJMlIsRUFBRSxHQUFHLENBQVQsRUFBWW10RCxZQUFZLEdBQUdELFVBQWhDLEVBQTRDbHRELEVBQUUsR0FBR210RCxZQUFZLENBQUMxaEUsTUFBOUQsRUFBc0V1VSxFQUFFLEVBQXhFLEVBQTRFO0FBQ3hFLFFBQUlpb0MsU0FBUyxHQUFHa2xCLFlBQVksQ0FBQ250RCxFQUFELENBQTVCO0FBQ0EsUUFBSTlRLEdBQUcsR0FBRys0QyxTQUFTLENBQUNnaUIsSUFBRCxFQUFPQyxJQUFQLENBQW5COztBQUNBLFFBQUloN0QsR0FBRyxLQUFLLEtBQVosRUFBbUI7QUFDZixhQUFPLElBQVA7QUFDSCxLQUZELE1BR0ssSUFBSUEsR0FBSixFQUFTO0FBQ1YrVCxjQUFRLENBQUM1VSxLQUFELEVBQVFhLEdBQVIsQ0FBUjtBQUNIO0FBQ0o7O0FBQ0QsTUFBSSs5RCxXQUFKLEVBQWlCO0FBQ2IsUUFBSTdxRCxPQUFPLENBQUNqVSxHQUFSLENBQVk2a0IsYUFBYSxDQUFDL3FCLEtBQTFCLEVBQWlDMnJCLEtBQWpDLElBQTBDWixhQUFhLENBQUM5cUIsR0FBNUQsRUFBaUU7QUFDN0RtRyxXQUFLLENBQUM0a0IsVUFBTixHQUFtQlcsS0FBbkI7QUFDQSxhQUFPdmxCLEtBQVA7QUFDSDtBQUNKLEdBTEQsTUFNSztBQUNELFFBQUkrVCxPQUFPLENBQUNqVSxHQUFSLENBQVk2a0IsYUFBYSxDQUFDOXFCLEdBQTFCLEVBQStCMHJCLEtBQS9CLElBQXdDWixhQUFhLENBQUMvcUIsS0FBMUQsRUFBaUU7QUFDN0RvRyxXQUFLLENBQUNrbEIsUUFBTixHQUFpQkssS0FBakI7QUFDQSxhQUFPdmxCLEtBQVA7QUFDSDtBQUNKOztBQUNELFNBQU8sSUFBUDtBQUNIOztBQUVELElBQUkrK0QsWUFBWTtBQUFHO0FBQWUsWUFBWTtBQUMxQyxXQUFTQSxZQUFULENBQXNCMW9FLFFBQXRCLEVBQWdDO0FBQzVCLFFBQUl5OUIsS0FBSyxHQUFHLElBQVo7O0FBQ0EsU0FBS2tyQyx5QkFBTCxHQUFpQyxLQUFqQyxDQUY0QixDQUVZOztBQUN4QyxTQUFLQyxRQUFMLEdBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDbEMsVUFBSUEsVUFBVSxDQUFDN2pCLE9BQWYsRUFBd0I7QUFDcEJ2bkIsYUFBSyxDQUFDa3JDLHlCQUFOLEdBQWtDLElBQWxDO0FBQ0g7QUFDSixLQUpEOztBQUtBLFNBQUtHLG1CQUFMLEdBQTJCLFVBQVVsYyxHQUFWLEVBQWU7QUFDdEMsVUFBSWw0QyxFQUFFLEdBQUcrb0IsS0FBVDtBQUFBLFVBQWdCejlCLFFBQVEsR0FBRzBVLEVBQUUsQ0FBQzFVLFFBQTlCO0FBQUEsVUFBd0Mrb0UsZUFBZSxHQUFHcjBELEVBQUUsQ0FBQ3EwRCxlQUE3RDtBQUNBLFVBQUlsNUMsS0FBSyxHQUFHN3ZCLFFBQVEsQ0FBQzZ2QixLQUFyQixDQUZzQyxDQUd0Qzs7QUFDQSxVQUFJLENBQUNrNUMsZUFBZSxDQUFDak8sY0FBckIsRUFBcUM7QUFDakMsWUFBSWpyQyxLQUFLLENBQUN1RixhQUFOLElBQXVCO0FBQ3ZCLFNBQUNxSSxLQUFLLENBQUNrckMseUJBRFgsQ0FDcUM7QUFEckMsVUFFRTtBQUNFLGdCQUFJeDVCLFlBQVksR0FBR252QyxRQUFRLENBQUN5b0QsT0FBVCxDQUFpQixjQUFqQixDQUFuQjtBQUNBLGdCQUFJdWdCLGNBQWMsR0FBR2hwRSxRQUFRLENBQUN5b0QsT0FBVCxDQUFpQixnQkFBakIsQ0FBckI7O0FBQ0EsZ0JBQUl0WixZQUFZLEtBQUssQ0FBQ0EsWUFBRCxJQUFpQixDQUFDem1DLHlFQUFjLENBQUNxZ0UsZUFBZSxDQUFDdE8sTUFBakIsRUFBeUJ1TyxjQUF6QixDQUFyQyxDQUFoQixFQUFnRztBQUM1RmhwRSxzQkFBUSxDQUFDc3JELFFBQVQsQ0FBa0JzQixHQUFsQjtBQUNIO0FBQ0o7O0FBQ0QsWUFBSS84QixLQUFLLENBQUMwRixjQUFOLElBQXdCO0FBQ3hCLFNBQUM3c0IseUVBQWMsQ0FBQ3FnRSxlQUFlLENBQUN0TyxNQUFqQixFQUF5QjZMLGFBQWEsQ0FBQ3NCLFFBQXZDLENBRG5CLENBQ29FO0FBRHBFLFVBRUU7QUFDRTVuRSxvQkFBUSxDQUFDeXNCLFFBQVQsQ0FBa0I7QUFBRXBxQixrQkFBSSxFQUFFO0FBQVIsYUFBbEI7QUFDSDtBQUNKOztBQUNEbzdCLFdBQUssQ0FBQ2tyQyx5QkFBTixHQUFrQyxLQUFsQztBQUNILEtBckJEOztBQXNCQSxTQUFLM29FLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsUUFBSStvRSxlQUFlLEdBQUcsS0FBS0EsZUFBTCxHQUF1QixJQUFJek8sZUFBSixDQUFvQmhnRSxRQUFwQixDQUE3QztBQUNBeXVFLG1CQUFlLENBQUNwTyxnQkFBaEIsR0FBbUMsSUFBbkM7QUFDQW9PLG1CQUFlLENBQUNuTyxpQkFBaEIsR0FBb0MsS0FBcEM7QUFDQW1PLG1CQUFlLENBQUM5VCxPQUFoQixDQUF3Qmp3RCxFQUF4QixDQUEyQixXQUEzQixFQUF3QyxLQUFLOGpFLG1CQUE3QztBQUNBOzs7O0FBR0E5b0UsWUFBUSxDQUFDZ0YsRUFBVCxDQUFZLFFBQVosRUFBc0IsS0FBSzRqRSxRQUEzQjtBQUNIOztBQUNERixjQUFZLENBQUNqaUUsU0FBYixDQUF1QnkrQixPQUF2QixHQUFpQyxZQUFZO0FBQ3pDLFNBQUtsbEMsUUFBTCxDQUFjNGhDLEdBQWQsQ0FBa0IsUUFBbEIsRUFBNEIsS0FBS2duQyxRQUFqQztBQUNBLFNBQUtHLGVBQUwsQ0FBcUI3akMsT0FBckI7QUFDSCxHQUhEOztBQUlBLFNBQU93akMsWUFBUDtBQUNILENBOUNpQyxFQUFsQztBQWdEQTs7Ozs7OztBQUtBLElBQUlPLHVCQUF1QjtBQUFHO0FBQWUsWUFBWTtBQUNyRCxXQUFTQSx1QkFBVCxDQUFpQzNGLFFBQWpDLEVBQTJDNEYsZ0JBQTNDLEVBQTZEO0FBQ3pELFFBQUl6ckMsS0FBSyxHQUFHLElBQVo7O0FBQ0EsU0FBS2dwQyxpQkFBTCxHQUF5QixJQUF6QjtBQUNBLFNBQUswQyxjQUFMLEdBQXNCLElBQXRCLENBSHlELENBRzdCOztBQUM1QixTQUFLRCxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLFNBQUtFLFFBQUwsR0FBZ0IsSUFBaEI7O0FBQ0EsU0FBS3BGLGVBQUwsR0FBdUIsVUFBVXpxRSxFQUFWLEVBQWM7QUFDakNra0MsV0FBSyxDQUFDMnJDLFFBQU4sR0FBaUIzckMsS0FBSyxDQUFDNHJDLGFBQU4sQ0FBb0I5dkUsRUFBRSxDQUFDaWhFLFNBQXZCLENBQWpCO0FBQ0gsS0FGRDs7QUFHQSxTQUFLdUwsZUFBTCxHQUF1QixVQUFVbkIsR0FBVixFQUFlb0IsT0FBZixFQUF3QnpzRSxFQUF4QixFQUE0QjtBQUMvQyxVQUFJK3BFLFFBQVEsR0FBRzdsQyxLQUFLLENBQUNpb0MsV0FBTixDQUFrQnBDLFFBQWpDO0FBQ0EsVUFBSW1ELGlCQUFpQixHQUFHLElBQXhCO0FBQ0EsVUFBSTBDLGNBQWMsR0FBRyxJQUFyQjtBQUNBLFVBQUlsRCxTQUFTLEdBQUcsS0FBaEI7QUFDQSxVQUFJanhDLFdBQVcsR0FBRztBQUNkc0Isc0JBQWMsRUFBRWxWLGdGQUFxQixFQUR2QjtBQUVkMlUscUJBQWEsRUFBRTNVLGdGQUFxQixFQUZ0QjtBQUdkK1UsZUFBTyxFQUFFc0gsS0FBSyxDQUFDMnJDLFFBQU4sQ0FBZTlxRCxNQUhWO0FBSWQ0Z0IsZUFBTyxFQUFFO0FBSkssT0FBbEI7O0FBTUEsVUFBSTBsQyxHQUFKLEVBQVM7QUFDTDZCLHlCQUFpQixHQUFHN0IsR0FBRyxDQUFDcGxDLFNBQUosQ0FBY3gvQixRQUFsQzs7QUFDQSxZQUFJeTlCLEtBQUssQ0FBQzZyQyxtQkFBTixDQUEwQi92RSxFQUFFLENBQUNpaEUsU0FBN0IsRUFBd0NpTSxpQkFBeEMsQ0FBSixFQUFnRTtBQUM1RDBDLHdCQUFjLEdBQUdJLHVCQUF1QixDQUFDM0UsR0FBRyxDQUFDdm1DLFFBQUwsRUFBZVosS0FBSyxDQUFDMnJDLFFBQXJCLEVBQStCM0MsaUJBQS9CLENBQXhDO0FBQ0F6eEMscUJBQVcsQ0FBQ2UsYUFBWixHQUE0QnRVLDRFQUFpQixDQUFDMG5ELGNBQUQsQ0FBN0M7QUFDQWxELG1CQUFTLEdBQUcsQ0FBQ2x4Qyw2RUFBa0IsQ0FBQ0MsV0FBRCxFQUFjeXhDLGlCQUFkLENBQS9COztBQUNBLGNBQUlSLFNBQUosRUFBZTtBQUNYanhDLHVCQUFXLENBQUNlLGFBQVosR0FBNEIzVSxnRkFBcUIsRUFBakQ7QUFDQStuRCwwQkFBYyxHQUFHLElBQWpCO0FBQ0g7QUFDSjtBQUNKOztBQUNEMXJDLFdBQUssQ0FBQ3dwQyxXQUFOLENBQWtCUixpQkFBbEIsRUFBcUN6eEMsV0FBckMsRUF2QitDLENBd0IvQztBQUNBOzs7QUFDQXN1QyxjQUFRLENBQUNwTyxrQkFBVCxDQUE0QjhRLE9BQU8sSUFBSSxDQUFDbUQsY0FBWixJQUE4QixDQUFDN3VFLFFBQVEsQ0FBQ3dxRCxhQUFULENBQXVCLFlBQXZCLENBQTNEOztBQUNBLFVBQUksQ0FBQ21oQixTQUFMLEVBQWdCO0FBQ1p0dUQsK0VBQVk7QUFDZixPQUZELE1BR0s7QUFDREQsZ0ZBQWE7QUFDaEI7O0FBQ0QsVUFBSSxDQUFDc3VELE9BQUwsRUFBYztBQUNWMUMsZ0JBQVEsQ0FBQ25PLG9CQUFULENBQThCLENBQUNnVSxjQUEvQjtBQUNBMXJDLGFBQUssQ0FBQ2dwQyxpQkFBTixHQUEwQkEsaUJBQTFCO0FBQ0FocEMsYUFBSyxDQUFDMHJDLGNBQU4sR0FBdUJBLGNBQXZCO0FBQ0g7QUFDSixLQXRDRDs7QUF1Q0EsU0FBSy9FLGFBQUwsR0FBcUIsVUFBVXhYLEdBQVYsRUFBZTtBQUNoQyxVQUFJbDRDLEVBQUUsR0FBRytvQixLQUFUO0FBQUEsVUFBZ0JncEMsaUJBQWlCLEdBQUcveEQsRUFBRSxDQUFDK3hELGlCQUF2QztBQUFBLFVBQTBEMEMsY0FBYyxHQUFHejBELEVBQUUsQ0FBQ3kwRCxjQUE5RTs7QUFDQTFyQyxXQUFLLENBQUM0cEMsU0FBTjs7QUFDQSxVQUFJWixpQkFBaUIsSUFBSTBDLGNBQXpCLEVBQXlDO0FBQ3JDLFlBQUl2RixRQUFRLEdBQUdubUMsS0FBSyxDQUFDaW9DLFdBQU4sQ0FBa0I5QixRQUFqQztBQUNBLFlBQUk0RixTQUFTLEdBQUc1RixRQUFRLENBQUNwa0MsU0FBVCxDQUFtQjdOLElBQW5DO0FBQ0EsWUFBSXkzQyxRQUFRLEdBQUczckMsS0FBSyxDQUFDMnJDLFFBQXJCOztBQUNBLFlBQUl0bEUsR0FBRyxHQUFHeWEsUUFBUSxDQUFDLEVBQUQsRUFBS2tvRCxpQkFBaUIsQ0FBQy9wQixpQkFBbEIsQ0FBb0NrbkIsUUFBUSxDQUFDdmxDLFFBQTdDLENBQUwsRUFBNkQ7QUFBRXFwQyxtQkFBUyxFQUFFOWEsR0FBRyxDQUFDNE4sU0FBakI7QUFBNEJ4VixpQkFBTyxFQUFFNEgsR0FBRyxDQUFDRSxTQUF6QztBQUFvRG43QixjQUFJLEVBQUU2M0M7QUFBMUQsU0FBN0QsQ0FBbEI7O0FBQ0EvQyx5QkFBaUIsQ0FBQ3YwQyxlQUFsQixDQUFrQyxNQUFsQyxFQUEwQyxDQUFDcHVCLEdBQUQsQ0FBMUM7O0FBQ0EsWUFBSXNsRSxRQUFRLENBQUM5cUQsTUFBYixFQUFxQjtBQUNqQm1vRCwyQkFBaUIsQ0FBQ2g2QyxRQUFsQixDQUEyQjtBQUN2QnBxQixnQkFBSSxFQUFFLGNBRGlCO0FBRXZCOGUsc0JBQVUsRUFBRU0sNEVBQWlCLENBQUMwbkQsY0FBRDtBQUZOLFdBQTNCOztBQUlBLGNBQUl2YyxHQUFHLENBQUMwUCxPQUFSLEVBQWlCO0FBQ2JtSyw2QkFBaUIsQ0FBQ2g2QyxRQUFsQixDQUEyQjtBQUN2QnBxQixrQkFBSSxFQUFFLGNBRGlCO0FBRXZCczVDLDZCQUFlLEVBQUV3dEIsY0FBYyxDQUFDdG5ELFFBQWYsQ0FBd0JFO0FBRmxCLGFBQTNCO0FBSUgsV0FWZ0IsQ0FXakI7OztBQUNBMGtELDJCQUFpQixDQUFDdjBDLGVBQWxCLENBQWtDLGNBQWxDLEVBQWtELENBQzlDO0FBQ0l3MUMscUJBQVMsRUFBRTlhLEdBQUcsQ0FBQzROLFNBRG5CO0FBRUk1MkQsaUJBQUssRUFBRSxJQUFJc3BCLDJEQUFKLENBQWF1NUMsaUJBQWIsRUFBZ0MwQyxjQUFjLENBQUN4bkQsR0FBL0MsRUFBb0R3bkQsY0FBYyxDQUFDdG5ELFFBQW5FLENBRlg7QUFHSThQLGdCQUFJLEVBQUU2M0M7QUFIVixXQUQ4QyxDQUFsRDtBQU9IO0FBQ0o7O0FBQ0QvckMsV0FBSyxDQUFDZ3BDLGlCQUFOLEdBQTBCLElBQTFCO0FBQ0FocEMsV0FBSyxDQUFDMHJDLGNBQU4sR0FBdUIsSUFBdkI7QUFDSCxLQWhDRDs7QUFpQ0EsUUFBSXpELFdBQVcsR0FBRyxLQUFLQSxXQUFMLEdBQW1CLElBQUlyQyxXQUFKLENBQWdCQyxRQUFoQixFQUEwQjVlLDJFQUExQixDQUFyQztBQUNBZ2hCLGVBQVcsQ0FBQ2pDLGNBQVosR0FBNkIsS0FBN0IsQ0FsRnlELENBa0ZyQjs7QUFDcENpQyxlQUFXLENBQUN6USxPQUFaLENBQW9CandELEVBQXBCLENBQXVCLFdBQXZCLEVBQW9DLEtBQUtnL0QsZUFBekM7QUFDQTBCLGVBQVcsQ0FBQ3pRLE9BQVosQ0FBb0Jqd0QsRUFBcEIsQ0FBdUIsV0FBdkIsRUFBb0MsS0FBSytnRSxlQUF6QztBQUNBTCxlQUFXLENBQUN6USxPQUFaLENBQW9CandELEVBQXBCLENBQXVCLFNBQXZCLEVBQWtDLEtBQUtvL0QsYUFBdkM7QUFDQSxTQUFLOEUsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNIOztBQUNERCx5QkFBdUIsQ0FBQ3hpRSxTQUF4QixDQUFrQzRpRSxhQUFsQyxHQUFrRCxVQUFVN08sU0FBVixFQUFxQjtBQUNuRSxRQUFJLE9BQU8sS0FBSzBPLGdCQUFaLEtBQWlDLFFBQXJDLEVBQStDO0FBQzNDLGFBQU94VCx3RUFBYSxDQUFDLEtBQUt3VCxnQkFBTixDQUFwQjtBQUNILEtBRkQsTUFHSyxJQUFJLE9BQU8sS0FBS0EsZ0JBQVosS0FBaUMsVUFBckMsRUFBaUQ7QUFDbEQsYUFBT3hULHdFQUFhLENBQUMsS0FBS3dULGdCQUFMLENBQXNCMU8sU0FBdEIsQ0FBRCxDQUFwQjtBQUNILEtBRkksTUFHQTtBQUNELGFBQU9pUCxpQkFBaUIsQ0FBQ2pQLFNBQUQsQ0FBeEI7QUFDSDtBQUNKLEdBVkQ7O0FBV0F5Tyx5QkFBdUIsQ0FBQ3hpRSxTQUF4QixDQUFrQ3dnRSxXQUFsQyxHQUFnRCxVQUFVWSxZQUFWLEVBQXdCaDRDLEtBQXhCLEVBQStCO0FBQzNFLFFBQUlpNEMsWUFBWSxHQUFHLEtBQUtyQixpQkFBeEI7O0FBQ0EsUUFBSXFCLFlBQVksSUFBSUEsWUFBWSxLQUFLRCxZQUFyQyxFQUFtRDtBQUMvQ0Msa0JBQVksQ0FBQ3I3QyxRQUFiLENBQXNCO0FBQUVwcUIsWUFBSSxFQUFFO0FBQVIsT0FBdEI7QUFDSDs7QUFDRCxRQUFJd2xFLFlBQUosRUFBa0I7QUFDZEEsa0JBQVksQ0FBQ3A3QyxRQUFiLENBQXNCO0FBQUVwcUIsWUFBSSxFQUFFLGdCQUFSO0FBQTBCd3RCLGFBQUssRUFBRUE7QUFBakMsT0FBdEI7QUFDSDtBQUNKLEdBUkQ7O0FBU0FvNUMseUJBQXVCLENBQUN4aUUsU0FBeEIsQ0FBa0M0Z0UsU0FBbEMsR0FBOEMsWUFBWTtBQUN0RCxRQUFJLEtBQUtaLGlCQUFULEVBQTRCO0FBQ3hCLFdBQUtBLGlCQUFMLENBQXVCaDZDLFFBQXZCLENBQWdDO0FBQUVwcUIsWUFBSSxFQUFFO0FBQVIsT0FBaEM7QUFDSDtBQUNKLEdBSkQ7O0FBS0E0bUUseUJBQXVCLENBQUN4aUUsU0FBeEIsQ0FBa0M2aUUsbUJBQWxDLEdBQXdELFVBQVVwbkUsRUFBVixFQUFjdWtFLGlCQUFkLEVBQWlDO0FBQ3JGLFFBQUlyM0IsVUFBVSxHQUFHcTNCLGlCQUFpQixDQUFDcmpELEdBQWxCLENBQXNCLFlBQXRCLENBQWpCOztBQUNBLFFBQUksT0FBT2dzQixVQUFQLEtBQXNCLFVBQTFCLEVBQXNDO0FBQ2xDLGFBQU9BLFVBQVUsQ0FBQ2x0QyxFQUFELENBQWpCO0FBQ0gsS0FGRCxNQUdLLElBQUksT0FBT2t0QyxVQUFQLEtBQXNCLFFBQXRCLElBQWtDQSxVQUF0QyxFQUFrRDtBQUNuRCxhQUFPenlCLE9BQU8sQ0FBQ3BVLHlFQUFjLENBQUNyRyxFQUFELEVBQUtrdEMsVUFBTCxDQUFmLENBQWQ7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVREOztBQVVBLFNBQU82NUIsdUJBQVA7QUFDSCxDQTdINEMsRUFBN0MsQyxDQThIQTtBQUNBOzs7QUFDQSxTQUFTTSx1QkFBVCxDQUFpQ2xyQyxRQUFqQyxFQUEyQytxQyxRQUEzQyxFQUFxRHBwRSxRQUFyRCxFQUErRDtBQUMzRCxNQUFJMHBFLFFBQVEsR0FBR25yRCxRQUFRLENBQUMsRUFBRCxFQUFLNnFELFFBQVEsQ0FBQy9zRCxhQUFkLENBQXZCOztBQUNBLE9BQUssSUFBSWYsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRzFVLFFBQVEsQ0FBQ29pQixZQUFULENBQXNCQyxLQUF0QixDQUE0QjhtQixxQkFBbEQsRUFBeUU3dEIsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBakYsRUFBeUZ1VSxFQUFFLEVBQTNGLEVBQStGO0FBQzNGLFFBQUlpb0MsU0FBUyxHQUFHN3VDLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBbEI7O0FBQ0FpRCxZQUFRLENBQUNtckQsUUFBRCxFQUFXbm1CLFNBQVMsQ0FBQ2xsQixRQUFELEVBQVcrcUMsUUFBWCxDQUFwQixDQUFSO0FBQ0g7O0FBQ0QsTUFBSXpuRCxHQUFHLEdBQUd5WSx3RUFBYSxDQUFDc3ZDLFFBQUQsRUFBV04sUUFBUSxDQUFDbm9ELFFBQXBCLEVBQThCb2QsUUFBUSxDQUFDbmYsTUFBdkMsRUFBK0NsZixRQUFRLENBQUNvakIsR0FBVCxDQUFhLG9CQUFiLEtBQXNDekcsT0FBTyxDQUFDeXNELFFBQVEsQ0FBQ2hxRCxRQUFWLENBQTVGLEVBQWlIO0FBQ3hJcGYsVUFEdUIsQ0FBdkI7QUFFQSxNQUFJdUQsS0FBSyxHQUFHODZCLFFBQVEsQ0FBQ2hoQixLQUFULENBQWU5WixLQUEzQixDQVIyRCxDQVMzRDtBQUNBOztBQUNBLE1BQUk4NkIsUUFBUSxDQUFDbmYsTUFBVCxJQUFtQmtxRCxRQUFRLENBQUM3dEMsU0FBaEMsRUFBMkM7QUFDdkNoNEIsU0FBSyxHQUFHdkQsUUFBUSxDQUFDMGQsT0FBVCxDQUFpQmpVLEdBQWpCLENBQXFCbEcsS0FBckIsRUFBNEI2bEUsUUFBUSxDQUFDN3RDLFNBQXJDLENBQVI7QUFDSDs7QUFDRCxNQUFJLzNCLEdBQUcsR0FBRzRsRSxRQUFRLENBQUNocUQsUUFBVCxHQUNOcGYsUUFBUSxDQUFDMGQsT0FBVCxDQUFpQmpVLEdBQWpCLENBQXFCbEcsS0FBckIsRUFBNEI2bEUsUUFBUSxDQUFDaHFELFFBQXJDLENBRE0sR0FFTnBmLFFBQVEsQ0FBQzB6QixrQkFBVCxDQUE0QjJLLFFBQVEsQ0FBQ25mLE1BQXJDLEVBQTZDM2IsS0FBN0MsQ0FGSjtBQUdBLE1BQUlzZSxRQUFRLEdBQUdVLDhFQUFtQixDQUFDWixHQUFHLENBQUNDLEtBQUwsRUFBWTtBQUFFcmUsU0FBSyxFQUFFQSxLQUFUO0FBQWdCQyxPQUFHLEVBQUVBO0FBQXJCLEdBQVosQ0FBbEM7QUFDQSxTQUFPO0FBQUVtZSxPQUFHLEVBQUVBLEdBQVA7QUFBWUUsWUFBUSxFQUFFQTtBQUF0QixHQUFQO0FBQ0gsQyxDQUNEO0FBQ0E7OztBQUNBLFNBQVM0bkQsaUJBQVQsQ0FBMkJ2bkUsRUFBM0IsRUFBK0I7QUFDM0IsTUFBSXlZLEdBQUcsR0FBR2d2RCxpQkFBaUIsQ0FBQ3puRSxFQUFELEVBQUssT0FBTCxDQUEzQjtBQUNBLE1BQUk4UyxHQUFHLEdBQUcyRixHQUFHLEdBQ1RoVyxJQUFJLENBQUNzYSxLQUFMLENBQVd0RSxHQUFYLENBRFMsR0FFVDtBQUFFMkQsVUFBTSxFQUFFO0FBQVYsR0FGSixDQUYyQixDQUlKOztBQUN2QixTQUFPbzNDLHdFQUFhLENBQUMxZ0QsR0FBRCxDQUFwQjtBQUNIOztBQUNEZzVCLHlEQUFNLENBQUM0N0IsY0FBUCxHQUF3QixFQUF4Qjs7QUFDQSxTQUFTRCxpQkFBVCxDQUEyQnpuRSxFQUEzQixFQUErQjRILElBQS9CLEVBQXFDO0FBQ2pDLE1BQUl5dkIsTUFBTSxHQUFHeVUseURBQU0sQ0FBQzQ3QixjQUFwQjtBQUNBLE1BQUlDLFlBQVksR0FBRyxDQUFDdHdDLE1BQU0sR0FBR0EsTUFBTSxHQUFHLEdBQVosR0FBa0IsRUFBekIsSUFBK0J6dkIsSUFBbEQ7QUFDQSxTQUFPNUgsRUFBRSxDQUFDcW1ELFlBQUgsQ0FBZ0IsVUFBVXNoQixZQUExQixLQUEyQyxFQUFsRDtBQUNIO0FBRUQ7Ozs7Ozs7QUFLQSxJQUFJQyxpQkFBaUI7QUFBRztBQUFlLFlBQVk7QUFDL0MsV0FBU0EsaUJBQVQsQ0FBMkI1bkUsRUFBM0IsRUFBK0I0eEMsUUFBL0IsRUFBeUM7QUFDckMsUUFBSXJXLEtBQUssR0FBRyxJQUFaOztBQUNBLFFBQUlxVyxRQUFRLEtBQUssS0FBSyxDQUF0QixFQUF5QjtBQUFFQSxjQUFRLEdBQUcsRUFBWDtBQUFnQjs7QUFDM0MsU0FBSyt2QixpQkFBTCxHQUF5QixVQUFVdHFFLEVBQVYsRUFBYztBQUNuQyxVQUFJK3BFLFFBQVEsR0FBRzdsQyxLQUFLLENBQUM2bEMsUUFBckI7QUFDQSxVQUFJNXVELEVBQUUsR0FBRytvQixLQUFLLENBQUNxVyxRQUFmO0FBQUEsVUFBeUIydEIsV0FBVyxHQUFHL3NELEVBQUUsQ0FBQytzRCxXQUExQztBQUFBLFVBQXVEOXhCLGNBQWMsR0FBR2o3QixFQUFFLENBQUNpN0IsY0FBM0U7QUFDQTJ6QixjQUFRLENBQUM3QixXQUFULEdBQ0lBLFdBQVcsSUFBSSxJQUFmLEdBQ0lBLFdBREosR0FFS2xvRSxFQUFFLENBQUMraUUsT0FBSCxHQUFhLENBQWIsR0FBaUJydUIsaUVBQWMsQ0FBQzJCLG9CQUh6QztBQUlBMHpCLGNBQVEsQ0FBQ3hTLEtBQVQsR0FDSXYzRCxFQUFFLENBQUMraUUsT0FBSCxHQUFhO0FBQ1Izc0Isb0JBQWMsSUFBSSxJQUFsQixHQUF5QkEsY0FBekIsR0FBMEMxQixpRUFBYyxDQUFDMEIsY0FEOUQsR0FFSSxDQUhSO0FBSUgsS0FYRDs7QUFZQSxTQUFLcTBCLGVBQUwsR0FBdUIsVUFBVXpxRSxFQUFWLEVBQWM7QUFDakMsVUFBSUEsRUFBRSxDQUFDK2lFLE9BQUgsSUFDQTcrQixLQUFLLENBQUM2bEMsUUFBTixDQUFleFMsS0FEZixJQUVBdjNELEVBQUUsQ0FBQ2loRSxTQUFILENBQWFoeEQsU0FBYixDQUF1QmxCLFFBQXZCLENBQWdDLFVBQWhDLENBRkosRUFFaUQ7QUFDN0NtMUIsYUFBSyxDQUFDNmxDLFFBQU4sQ0FBZXBCLE1BQWYsQ0FBc0I3RCxXQUF0QixHQUFvQzcwRCxTQUFwQyxDQUE4Q0MsR0FBOUMsQ0FBa0QsYUFBbEQ7QUFDSDtBQUNKLEtBTkQ7O0FBT0EsU0FBS3FxQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFFBQUl3dkIsUUFBUSxHQUFHLEtBQUtBLFFBQUwsR0FBZ0IsSUFBSTlCLHlCQUFKLENBQThCdC9ELEVBQTlCLENBQS9CO0FBQ0FvaEUsWUFBUSxDQUFDNUIsa0JBQVQsR0FBOEIsS0FBOUI7O0FBQ0EsUUFBSTV0QixRQUFRLENBQUNpMkIsWUFBVCxJQUF5QixJQUE3QixFQUFtQztBQUMvQnpHLGNBQVEsQ0FBQ3JCLE9BQVQsQ0FBaUI3NUQsUUFBakIsR0FBNEIwckMsUUFBUSxDQUFDaTJCLFlBQXJDO0FBQ0g7O0FBQ0QsUUFBSWoyQixRQUFRLENBQUNrMkIsUUFBVCxJQUFxQixJQUF6QixFQUErQjtBQUMzQjFHLGNBQVEsQ0FBQ3BCLE1BQVQsQ0FBZ0IxNkQsVUFBaEIsR0FBNkJzc0MsUUFBUSxDQUFDazJCLFFBQXRDLENBRDJCLENBQ3FCO0FBQ25EOztBQUNEMUcsWUFBUSxDQUFDck8sT0FBVCxDQUFpQmp3RCxFQUFqQixDQUFvQixhQUFwQixFQUFtQyxLQUFLNitELGlCQUF4QztBQUNBUCxZQUFRLENBQUNyTyxPQUFULENBQWlCandELEVBQWpCLENBQW9CLFdBQXBCLEVBQWlDLEtBQUtnL0QsZUFBdEM7QUFDQSxRQUFJaUYsdUJBQUosQ0FBNEIzRixRQUE1QixFQUFzQ3h2QixRQUFRLENBQUNtMkIsU0FBL0M7QUFDSDs7QUFDREgsbUJBQWlCLENBQUNyakUsU0FBbEIsQ0FBNEJ5K0IsT0FBNUIsR0FBc0MsWUFBWTtBQUM5QyxTQUFLbytCLFFBQUwsQ0FBY3ArQixPQUFkO0FBQ0gsR0FGRDs7QUFHQSxTQUFPNGtDLGlCQUFQO0FBQ0gsQ0F4Q3NDLEVBQXZDO0FBMENBOzs7Ozs7OztBQU1BLElBQUlJLHVCQUF1QjtBQUFHO0FBQWUsVUFBVTNvQyxNQUFWLEVBQWtCO0FBQzNEbmpCLFdBQVMsQ0FBQzhyRCx1QkFBRCxFQUEwQjNvQyxNQUExQixDQUFUOztBQUNBLFdBQVMyb0MsdUJBQVQsQ0FBaUMzUCxXQUFqQyxFQUE4QztBQUMxQyxRQUFJOThCLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQjR6RCxXQUFsQixLQUFrQyxJQUE5Qzs7QUFDQTk4QixTQUFLLENBQUNrOUIsZ0JBQU4sR0FBeUIsS0FBekI7QUFDQWw5QixTQUFLLENBQUMwc0MsY0FBTixHQUF1QixFQUF2QjtBQUNBMXNDLFNBQUssQ0FBQzJzQyxlQUFOLEdBQXdCLElBQXhCOztBQUNBM3NDLFNBQUssQ0FBQ29tQyxpQkFBTixHQUEwQixVQUFVdHFFLEVBQVYsRUFBYztBQUNwQ2trQyxXQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsYUFBdEIsRUFBcUNGLEVBQXJDOztBQUNBLFVBQUksQ0FBQ2trQyxLQUFLLENBQUNrOUIsZ0JBQVgsRUFBNkI7QUFDekI7QUFDQWw5QixhQUFLLENBQUN3M0IsT0FBTixDQUFjeDdELE9BQWQsQ0FBc0IsV0FBdEIsRUFBbUNGLEVBQW5DO0FBQ0g7QUFDSixLQU5EOztBQU9Ba2tDLFNBQUssQ0FBQzRzQyxpQkFBTixHQUEwQixVQUFVOXdFLEVBQVYsRUFBYztBQUNwQyxVQUFJLENBQUNra0MsS0FBSyxDQUFDazlCLGdCQUFYLEVBQTZCO0FBQ3pCbDlCLGFBQUssQ0FBQ3czQixPQUFOLENBQWN4N0QsT0FBZCxDQUFzQixVQUF0QixFQUFrQ0YsRUFBbEM7QUFDSDtBQUNKLEtBSkQ7O0FBS0Fra0MsU0FBSyxDQUFDeW1DLGVBQU4sR0FBd0IsVUFBVTNxRSxFQUFWLEVBQWM7QUFDbENra0MsV0FBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLFdBQXRCLEVBQW1DRixFQUFuQzs7QUFDQSxVQUFJLENBQUNra0MsS0FBSyxDQUFDazlCLGdCQUFYLEVBQTZCO0FBQ3pCO0FBQ0FsOUIsYUFBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLFNBQXRCLEVBQWlDRixFQUFqQztBQUNIO0FBQ0osS0FORDs7QUFPQSxRQUFJMG9FLE9BQU8sR0FBR3hrQyxLQUFLLENBQUN3a0MsT0FBTixHQUFnQixJQUFJM0gsZUFBSixDQUFvQkMsV0FBcEIsQ0FBOUI7QUFDQTBILFdBQU8sQ0FBQ2hOLE9BQVIsQ0FBZ0Jqd0QsRUFBaEIsQ0FBbUIsYUFBbkIsRUFBa0N5NEIsS0FBSyxDQUFDb21DLGlCQUF4QztBQUNBNUIsV0FBTyxDQUFDaE4sT0FBUixDQUFnQmp3RCxFQUFoQixDQUFtQixhQUFuQixFQUFrQ3k0QixLQUFLLENBQUM0c0MsaUJBQXhDO0FBQ0FwSSxXQUFPLENBQUNoTixPQUFSLENBQWdCandELEVBQWhCLENBQW1CLFdBQW5CLEVBQWdDeTRCLEtBQUssQ0FBQ3ltQyxlQUF0QztBQUNBLFdBQU96bUMsS0FBUDtBQUNIOztBQUNEeXNDLHlCQUF1QixDQUFDempFLFNBQXhCLENBQWtDeStCLE9BQWxDLEdBQTRDLFlBQVk7QUFDcEQsU0FBSys4QixPQUFMLENBQWEvOEIsT0FBYjtBQUNILEdBRkQ7O0FBR0FnbEMseUJBQXVCLENBQUN6akUsU0FBeEIsQ0FBa0NvOEQsYUFBbEMsR0FBa0QsVUFBVXQ1RCxJQUFWLEVBQWdCO0FBQzlELFNBQUtveEQsZ0JBQUwsR0FBd0JweEQsSUFBeEI7QUFDSCxHQUZEOztBQUdBMmdFLHlCQUF1QixDQUFDempFLFNBQXhCLENBQWtDeXVELGtCQUFsQyxHQUF1RCxVQUFVM3JELElBQVYsRUFBZ0I7QUFDbkUsUUFBSUEsSUFBSixFQUFVO0FBQ047QUFDQTtBQUNBLFVBQUksS0FBSzZnRSxlQUFULEVBQTBCO0FBQ3RCLGFBQUtBLGVBQUwsQ0FBcUJyZ0UsS0FBckIsQ0FBMkJtcUQsVUFBM0IsR0FBd0MsRUFBeEM7QUFDQSxhQUFLa1csZUFBTCxHQUF1QixJQUF2QjtBQUNIO0FBQ0osS0FQRCxNQVFLO0FBQ0QsVUFBSTlNLFFBQVEsR0FBRyxLQUFLNk0sY0FBTCxHQUNYN3ZFLFFBQVEsQ0FBQ3dxRCxhQUFULENBQXVCLEtBQUtxbEIsY0FBNUIsQ0FEVyxHQUVYLElBRko7O0FBR0EsVUFBSTdNLFFBQUosRUFBYztBQUNWLGFBQUs4TSxlQUFMLEdBQXVCOU0sUUFBdkI7QUFDQUEsZ0JBQVEsQ0FBQ3Z6RCxLQUFULENBQWVtcUQsVUFBZixHQUE0QixRQUE1QjtBQUNIO0FBQ0o7QUFDSixHQWxCRDs7QUFtQkEsU0FBT2dXLHVCQUFQO0FBQ0gsQ0ExRDRDLENBMEQzQ2xWLGtFQTFEMkMsQ0FBN0M7QUE0REE7Ozs7OztBQUlBLElBQUlzVixtQkFBbUI7QUFBRztBQUFlLFlBQVk7QUFDakQsV0FBU0EsbUJBQVQsQ0FBNkJDLG1CQUE3QixFQUFrRHoyQixRQUFsRCxFQUE0RDtBQUN4RCxRQUFJeW1CLFdBQVcsR0FBR2pnRSxRQUFsQjs7QUFDQSxTQUNBO0FBQ0Fpd0UsdUJBQW1CLEtBQUtqd0UsUUFBeEIsSUFDSWl3RSxtQkFBbUIsWUFBWXppRSxPQUhuQyxFQUc0QztBQUN4Q3l5RCxpQkFBVyxHQUFHZ1EsbUJBQWQ7QUFDQXoyQixjQUFRLEdBQUdBLFFBQVEsSUFBSSxFQUF2QjtBQUNILEtBTkQsTUFPSztBQUNEQSxjQUFRLEdBQUl5MkIsbUJBQW1CLElBQUksRUFBbkM7QUFDSDs7QUFDRCxRQUFJakgsUUFBUSxHQUFHLEtBQUtBLFFBQUwsR0FBZ0IsSUFBSTRHLHVCQUFKLENBQTRCM1AsV0FBNUIsQ0FBL0I7O0FBQ0EsUUFBSSxPQUFPem1CLFFBQVEsQ0FBQ2kyQixZQUFoQixLQUFpQyxRQUFyQyxFQUErQztBQUMzQ3pHLGNBQVEsQ0FBQ3JCLE9BQVQsQ0FBaUI3NUQsUUFBakIsR0FBNEIwckMsUUFBUSxDQUFDaTJCLFlBQXJDO0FBQ0gsS0FGRCxNQUdLLElBQUl4UCxXQUFXLEtBQUtqZ0UsUUFBcEIsRUFBOEI7QUFDL0JncEUsY0FBUSxDQUFDckIsT0FBVCxDQUFpQjc1RCxRQUFqQixHQUE0QixjQUE1QjtBQUNIOztBQUNELFFBQUksT0FBTzByQyxRQUFRLENBQUNxMkIsY0FBaEIsS0FBbUMsUUFBdkMsRUFBaUQ7QUFDN0M3RyxjQUFRLENBQUM2RyxjQUFULEdBQTBCcjJCLFFBQVEsQ0FBQ3EyQixjQUFuQztBQUNIOztBQUNELFFBQUlsQix1QkFBSixDQUE0QjNGLFFBQTVCLEVBQXNDeHZCLFFBQVEsQ0FBQ20yQixTQUEvQztBQUNIOztBQUNESyxxQkFBbUIsQ0FBQzdqRSxTQUFwQixDQUE4QnkrQixPQUE5QixHQUF3QyxZQUFZO0FBQ2hELFNBQUtvK0IsUUFBTCxDQUFjcCtCLE9BQWQ7QUFDSCxHQUZEOztBQUdBLFNBQU9vbEMsbUJBQVA7QUFDSCxDQTdCd0MsRUFBekM7O0FBK0JBLElBQUlFLElBQUksR0FBRy9oQyx1RUFBWSxDQUFDO0FBQ3BCYyx1QkFBcUIsRUFBRSxDQUFDazhCLFlBQUQsRUFBZUUsYUFBZixFQUE4QlcsYUFBOUIsRUFBNkM0QixlQUE3QyxDQURIO0FBRXBCMStCLHNCQUFvQixFQUFFLENBQUNrL0IsWUFBRCxDQUZGO0FBR3BCOStCLHFCQUFtQixFQUFFNDNCO0FBSEQsQ0FBRCxDQUF2QjtBQU1lZ0osbUVBQWY7Ozs7Ozs7Ozs7Ozs7QUNsbEVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBRUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOztBQUVBLElBQUkxc0QsYUFBYSxHQUFHLFVBQVNqTSxDQUFULEVBQVkwSSxDQUFaLEVBQWU7QUFDL0J1RCxlQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBUCxJQUNYO0FBQUVDLGFBQVMsRUFBRTtBQUFiLGVBQTZCelgsS0FBN0IsSUFBc0MsVUFBVXFMLENBQVYsRUFBYTBJLENBQWIsRUFBZ0I7QUFBRTFJLEtBQUMsQ0FBQ29NLFNBQUYsR0FBYzFELENBQWQ7QUFBa0IsR0FEL0QsSUFFWixVQUFVMUksQ0FBVixFQUFhMEksQ0FBYixFQUFnQjtBQUFFLFNBQUssSUFBSTJELENBQVQsSUFBYzNELENBQWQsRUFBaUIsSUFBSUEsQ0FBQyxDQUFDNEQsY0FBRixDQUFpQkQsQ0FBakIsQ0FBSixFQUF5QnJNLENBQUMsQ0FBQ3FNLENBQUQsQ0FBRCxHQUFPM0QsQ0FBQyxDQUFDMkQsQ0FBRCxDQUFSO0FBQWMsR0FGOUU7O0FBR0EsU0FBT0osYUFBYSxDQUFDak0sQ0FBRCxFQUFJMEksQ0FBSixDQUFwQjtBQUNILENBTEQ7O0FBT0EsU0FBUzZELFNBQVQsQ0FBbUJ2TSxDQUFuQixFQUFzQjBJLENBQXRCLEVBQXlCO0FBQ3JCdUQsZUFBYSxDQUFDak0sQ0FBRCxFQUFJMEksQ0FBSixDQUFiOztBQUNBLFdBQVN0Z0IsRUFBVCxHQUFjO0FBQUUsU0FBS29rQixXQUFMLEdBQW1CeE0sQ0FBbkI7QUFBdUI7O0FBQ3ZDQSxHQUFDLENBQUNwTCxTQUFGLEdBQWM4VCxDQUFDLEtBQUssSUFBTixHQUFhd0QsTUFBTSxDQUFDTyxNQUFQLENBQWMvRCxDQUFkLENBQWIsSUFBaUN0Z0IsRUFBRSxDQUFDd00sU0FBSCxHQUFlOFQsQ0FBQyxDQUFDOVQsU0FBakIsRUFBNEIsSUFBSXhNLEVBQUosRUFBN0QsQ0FBZDtBQUNIOztBQUVELElBQUlza0IsUUFBUSxHQUFHLFlBQVc7QUFDdEJBLFVBQVEsR0FBR1IsTUFBTSxDQUFDUyxNQUFQLElBQWlCLFNBQVNELFFBQVQsQ0FBa0JFLENBQWxCLEVBQXFCO0FBQzdDLFNBQUssSUFBSTVKLENBQUosRUFBTy9QLENBQUMsR0FBRyxDQUFYLEVBQWN3TCxDQUFDLEdBQUdpTCxTQUFTLENBQUN4VSxNQUFqQyxFQUF5Q2pDLENBQUMsR0FBR3dMLENBQTdDLEVBQWdEeEwsQ0FBQyxFQUFqRCxFQUFxRDtBQUNqRCtQLE9BQUMsR0FBRzBHLFNBQVMsQ0FBQ3pXLENBQUQsQ0FBYjs7QUFDQSxXQUFLLElBQUlvWixDQUFULElBQWNySixDQUFkLEVBQWlCLElBQUlrSixNQUFNLENBQUN0WCxTQUFQLENBQWlCMFgsY0FBakIsQ0FBZ0N4WCxJQUFoQyxDQUFxQ2tPLENBQXJDLEVBQXdDcUosQ0FBeEMsQ0FBSixFQUFnRE8sQ0FBQyxDQUFDUCxDQUFELENBQUQsR0FBT3JKLENBQUMsQ0FBQ3FKLENBQUQsQ0FBUjtBQUNwRTs7QUFDRCxXQUFPTyxDQUFQO0FBQ0gsR0FORDs7QUFPQSxTQUFPRixRQUFRLENBQUNuSyxLQUFULENBQWUsSUFBZixFQUFxQm1ILFNBQXJCLENBQVA7QUFDSCxDQVREOztBQVdBLFNBQVNrdkQsd0JBQVQsQ0FBa0NDLGFBQWxDLEVBQWlEbkYsSUFBakQsRUFBdURDLElBQXZELEVBQTZEO0FBQ3pELE1BQUltRixTQUFTLEdBQUdwRixJQUFJLENBQUNsbkMsUUFBTCxDQUFjaDdCLFVBQTlCO0FBQ0EsTUFBSXVuRSxTQUFTLEdBQUdwRixJQUFJLENBQUNubkMsUUFBTCxDQUFjaDdCLFVBQTlCOztBQUNBLE1BQUlzbkUsU0FBUyxJQUFJQyxTQUFiLElBQ0FELFNBQVMsS0FBS0MsU0FEbEIsRUFDNkI7QUFDekJGLGlCQUFhLENBQUNHLGdCQUFkLEdBQWlDO0FBQzdCQyxxQkFBZSxFQUFFSCxTQURZO0FBRTdCSSxtQkFBYSxFQUFFSDtBQUZjLEtBQWpDO0FBSUg7QUFDSjtBQUNEOzs7OztBQUdBLFNBQVNJLHFCQUFULENBQStCeHJELFFBQS9CLEVBQXlDbVEsUUFBekMsRUFBbUQzdkIsUUFBbkQsRUFBNkQ7QUFDekQsTUFBSTZxRSxnQkFBZ0IsR0FBR2w3QyxRQUFRLENBQUNrN0MsZ0JBQWhDOztBQUNBLE1BQUlBLGdCQUFnQixJQUFJSSx1QkFBdUIsQ0FBQ3pyRCxRQUFELEVBQVd4ZixRQUFYLENBQS9DLEVBQXFFO0FBQ2pFLFFBQUltNEQsS0FBSyxHQUFHMzRDLFFBQVEsQ0FBQzByRCxXQUFULENBQXFCcmdELE9BQXJCLENBQTZCZ2dELGdCQUFnQixDQUFDQyxlQUE5QyxDQUFaOztBQUNBLFFBQUkzUyxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2QsVUFBSStTLFdBQVcsR0FBRzFyRCxRQUFRLENBQUMwckQsV0FBVCxDQUFxQnhrRSxLQUFyQixFQUFsQixDQURjLENBQ2tDOztBQUNoRHdrRSxpQkFBVyxDQUFDM2xELE1BQVosQ0FBbUI0eUMsS0FBbkIsRUFBMEIsQ0FBMUIsRUFGYyxDQUVnQjs7QUFDOUIsVUFBSStTLFdBQVcsQ0FBQ3JnRCxPQUFaLENBQW9CZ2dELGdCQUFnQixDQUFDRSxhQUFyQyxNQUF3RCxDQUFDLENBQTdELEVBQWdFO0FBQUU7QUFDOURHLG1CQUFXLENBQUNqaUUsSUFBWixDQUFpQjRoRSxnQkFBZ0IsQ0FBQ0UsYUFBbEMsRUFENEQsQ0FDVjtBQUNyRDs7QUFDRHZyRCxjQUFRLENBQUMwckQsV0FBVCxHQUF1QkEsV0FBdkI7QUFDSDtBQUNKO0FBQ0o7QUFDRDs7Ozs7O0FBSUEsU0FBU0QsdUJBQVQsQ0FBaUN6ckQsUUFBakMsRUFBMkN4ZixRQUEzQyxFQUFxRDtBQUNqRCxNQUFJbXJFLGdCQUFnQixHQUFHM3JELFFBQVEsQ0FBQzJyRCxnQkFBaEM7O0FBQ0EsTUFBSUEsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDMUIsUUFBSTl2QyxNQUFNLEdBQUc3YixRQUFRLENBQUN5QixRQUFULElBQXFCamhCLFFBQVEsQ0FBQzZ2QixLQUFULENBQWVDLFlBQWYsQ0FBNEJ0USxRQUFRLENBQUN5QixRQUFyQyxDQUFsQzs7QUFDQSxRQUFJb2EsTUFBSixFQUFZO0FBQ1I4dkMsc0JBQWdCLEdBQUc5dkMsTUFBTSxDQUFDbE4sYUFBUCxDQUFxQmc5QyxnQkFBeEMsQ0FEUSxDQUNrRDtBQUM3RDs7QUFDRCxRQUFJQSxnQkFBZ0IsSUFBSSxJQUF4QixFQUE4QjtBQUMxQkEsc0JBQWdCLEdBQUduckUsUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSx1QkFBYixDQUFuQjs7QUFDQSxVQUFJK25ELGdCQUFnQixJQUFJLElBQXhCLEVBQThCO0FBQzFCQSx3QkFBZ0IsR0FBR25yRSxRQUFRLENBQUNvakIsR0FBVCxDQUFhLFVBQWIsQ0FBbkIsQ0FEMEIsQ0FDbUI7QUFDaEQ7QUFDSjtBQUNKOztBQUNELFNBQU8rbkQsZ0JBQVA7QUFDSDs7QUFDRCxTQUFTQyxrQkFBVCxDQUE0Qno3QyxRQUE1QixFQUFzQzN2QixRQUF0QyxFQUFnRDtBQUM1QyxNQUFJNnFFLGdCQUFnQixHQUFHbDdDLFFBQVEsQ0FBQ2s3QyxnQkFBaEM7O0FBQ0EsTUFBSUEsZ0JBQUosRUFBc0I7QUFDbEIsV0FBTztBQUNIUSxpQkFBVyxFQUFFcnJFLFFBQVEsQ0FBQ3NyRSxlQUFULENBQXlCVCxnQkFBZ0IsQ0FBQ0MsZUFBMUMsQ0FEVjtBQUVIUyxpQkFBVyxFQUFFdnJFLFFBQVEsQ0FBQ3NyRSxlQUFULENBQXlCVCxnQkFBZ0IsQ0FBQ0UsYUFBMUM7QUFGVixLQUFQO0FBSUgsR0FMRCxNQU1LO0FBQ0QsV0FBTztBQUNITSxpQkFBVyxFQUFFLElBRFY7QUFFSEUsaUJBQVcsRUFBRTtBQUZWLEtBQVA7QUFJSDtBQUNKOztBQUVELElBQUlDLGlCQUFpQjtBQUFHO0FBQWUsWUFBWTtBQUMvQyxXQUFTQSxpQkFBVCxHQUE2QjtBQUN6QixTQUFLQyxlQUFMLEdBQXVCOWxELGtFQUFPLENBQUM4bEQsZUFBRCxDQUE5QjtBQUNIOztBQUNERCxtQkFBaUIsQ0FBQy9rRSxTQUFsQixDQUE0Qjg4QyxTQUE1QixHQUF3QyxVQUFVSixTQUFWLEVBQXFCN0wsUUFBckIsRUFBK0JvMEIsYUFBL0IsRUFBOEMvNUMsSUFBOUMsRUFBb0Q7QUFDeEYsUUFBSTJsQixRQUFRLENBQUM0QixLQUFULENBQWV5eUIsaUJBQW5CLEVBQXNDO0FBQ2xDLGFBQU87QUFDSEMscUJBQWEsRUFBRSxLQUFLSCxlQUFMLENBQXFCQyxhQUFhLENBQUNFLGFBQW5DLEVBQWtEajZDLElBQUksQ0FBQ3ZPLEdBQUwsQ0FBUywyQkFBVCxDQUFsRCxFQUF5RnNvRCxhQUFhLENBQUN2cUQsVUFBdkcsRUFBbUh1cUQsYUFBYSxDQUFDNzNDLFdBQWQsQ0FBMEJLLFdBQTdJLENBRFo7QUFFSDIzQyxnQ0FBd0IsRUFBRUgsYUFBYSxDQUFDRztBQUZyQyxPQUFQO0FBSUg7QUFDSixHQVBEOztBQVFBLFNBQU9MLGlCQUFQO0FBQ0gsQ0Fic0MsRUFBdkM7O0FBY0EsU0FBU0MsZUFBVCxDQUF5QkcsYUFBekIsRUFBd0NFLDJCQUF4QyxFQUFxRTNxRCxVQUFyRSxFQUFpRitTLFdBQWpGLEVBQThGO0FBQzFGLE1BQUk0M0MsMkJBQUosRUFBaUM7QUFDN0IsUUFBSUMsZ0JBQWdCLEdBQUdDLDJCQUEyQixDQUFDN3FELFVBQVUsQ0FBQ1csU0FBWixFQUF1Qm9TLFdBQXZCLENBQWxEO0FBQ0EsUUFBSSszQyxXQUFXLEdBQUdDLGdCQUFnQixDQUFDSCxnQkFBRCxFQUFtQjVxRCxVQUFVLENBQUNPLElBQTlCLENBQWxDOztBQUNBbkQsWUFBUSxDQUFDMHRELFdBQUQsRUFBY0Usd0JBQXdCLENBQUNGLFdBQUQsRUFBY0wsYUFBZCxDQUF0QyxDQUFSOztBQUNBLFdBQU92ckQscUVBQVUsQ0FBQ3VyRCxhQUFELEVBQWdCLFVBQVVwcEUsUUFBVixFQUFvQmEsVUFBcEIsRUFBZ0M7QUFDN0QsYUFBTzRvRSxXQUFXLENBQUM1b0UsVUFBRCxDQUFsQjtBQUNILEtBRmdCLENBQWpCO0FBR0gsR0FQRCxNQVFLO0FBQ0QsV0FBT3VvRSxhQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFTSSwyQkFBVCxDQUFxQ0ksY0FBckMsRUFBcURsNEMsV0FBckQsRUFBa0U7QUFDOUQsU0FBTzdULHFFQUFVLENBQUMrckQsY0FBRCxFQUFpQixVQUFVNzRDLGFBQVYsRUFBeUI7QUFDdkQsV0FBTzFPLDBFQUFlLENBQUMwTyxhQUFhLENBQUNsVyxLQUFmLEVBQXNCNlcsV0FBdEIsQ0FBdEI7QUFDSCxHQUZnQixDQUFqQjtBQUdIOztBQUNELFNBQVNnNEMsZ0JBQVQsQ0FBMEJFLGNBQTFCLEVBQTBDNTVDLFNBQTFDLEVBQXFEO0FBQ2pELE1BQUk2NUMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLE9BQUssSUFBSXRxRCxVQUFULElBQXVCcXFELGNBQXZCLEVBQXVDO0FBQ25DLFFBQUl2cUQsUUFBUSxHQUFHdXFELGNBQWMsQ0FBQ3JxRCxVQUFELENBQTdCOztBQUNBLFNBQUssSUFBSXpHLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUc4ZCxTQUFTLENBQUMzUSxRQUFRLENBQUNELEtBQVYsQ0FBVCxDQUEwQnNwRCxXQUFoRCxFQUE2RDV2RCxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUFyRSxFQUE2RXVVLEVBQUUsRUFBL0UsRUFBbUY7QUFDL0UsVUFBSWpZLFVBQVUsR0FBR3FSLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBbkI7QUFDQSt3RCxlQUFTLENBQUNocEUsVUFBRCxDQUFULEdBQXdCLElBQXhCO0FBQ0g7QUFDSjs7QUFDRCxTQUFPZ3BFLFNBQVA7QUFDSDtBQUNEOzs7Ozs7QUFJQSxTQUFTRix3QkFBVCxDQUFrQ0UsU0FBbEMsRUFBNkNULGFBQTdDLEVBQTREO0FBQ3hELE1BQUlwaEUsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsT0FBSyxJQUFJbkgsVUFBVCxJQUF1QmdwRSxTQUF2QixFQUFrQztBQUM5QixRQUFJN3BFLFFBQVEsR0FBRyxLQUFLLENBQXBCOztBQUNBLFdBQVFBLFFBQVEsR0FBR29wRSxhQUFhLENBQUN2b0UsVUFBRCxDQUFoQyxFQUErQztBQUMzQ0EsZ0JBQVUsR0FBR2IsUUFBUSxDQUFDOHBFLFFBQXRCLENBRDJDLENBQ1g7O0FBQ2hDLFVBQUlqcEUsVUFBSixFQUFnQjtBQUNabUgsV0FBRyxDQUFDbkgsVUFBRCxDQUFILEdBQWtCLElBQWxCO0FBQ0gsT0FGRCxNQUdLO0FBQ0Q7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBT21ILEdBQVA7QUFDSCxDLENBQ0Q7OztBQUNBLElBQUkraEUsd0JBQXdCO0FBQUc7QUFBZSxZQUFZO0FBQ3RELFdBQVNBLHdCQUFULEdBQW9DO0FBQ2hDLFNBQUtDLHFCQUFMLEdBQTZCM21ELHdFQUFhLENBQUMybUQscUJBQUQsRUFBd0IxckQsK0RBQXhCLENBQTFDO0FBQ0EsU0FBSzJyRCxzQkFBTCxHQUE4QjltRCxrRUFBTyxDQUFDOG1ELHNCQUFELENBQXJDO0FBQ0g7O0FBQ0RGLDBCQUF3QixDQUFDOWxFLFNBQXpCLENBQW1DODhDLFNBQW5DLEdBQStDLFVBQVVKLFNBQVYsRUFBcUI3TCxRQUFyQixFQUErQm8wQixhQUEvQixFQUE4QztBQUN6RixRQUFJLENBQUNwMEIsUUFBUSxDQUFDNEIsS0FBVCxDQUFleXlCLGlCQUFwQixFQUF1QztBQUFFO0FBQ3JDLGFBQU87QUFDSHA3QyxvQkFBWSxFQUFFLEtBQUtrOEMsc0JBQUwsQ0FBNEJ0cEIsU0FBUyxDQUFDNXlCLFlBQXRDLEVBQW9ENHlCLFNBQVMsQ0FBQ2hpQyxVQUFWLENBQXFCTyxJQUF6RSxFQUErRSxLQUFLOHFELHFCQUFMLENBQTJCZCxhQUFhLENBQUNFLGFBQXpDLENBQS9FO0FBRFgsT0FBUDtBQUdIO0FBQ0osR0FORDs7QUFPQSxTQUFPVyx3QkFBUDtBQUNILENBYjZDLEVBQTlDOztBQWNBLFNBQVNDLHFCQUFULENBQStCWixhQUEvQixFQUE4QztBQUMxQyxTQUFPcHJELGtFQUFPLENBQUNvckQsYUFBRCxFQUFnQixVQUFVcHBFLFFBQVYsRUFBb0I7QUFDOUMsV0FBT0EsUUFBUSxDQUFDcXJCLEVBQWhCO0FBQ0gsR0FGYSxDQUFkO0FBR0g7O0FBQ0QsU0FBUzQrQyxzQkFBVCxDQUFnQ2w4QyxZQUFoQyxFQUE4Q2lDLFNBQTlDLEVBQXlEazZDLGdCQUF6RCxFQUEyRTtBQUN2RSxTQUFPbHNELGtFQUFPLENBQUMrUCxZQUFELEVBQWUsVUFBVTYvQixPQUFWLEVBQW1CeHVDLEtBQW5CLEVBQTBCO0FBQ25ELFFBQUlBLEtBQUosRUFBVztBQUFFO0FBQ1QsYUFBTytxRCxxQkFBcUIsQ0FBQ3ZjLE9BQUQsRUFBVTU5QixTQUFTLENBQUM1USxLQUFELENBQW5CLEVBQTRCOHFELGdCQUE1QixDQUE1QjtBQUNILEtBRkQsTUFHSztBQUNELGFBQU90YyxPQUFQO0FBQ0g7QUFDSixHQVBhLENBQWQ7QUFRSDs7QUFDRCxTQUFTdWMscUJBQVQsQ0FBK0JDLFdBQS9CLEVBQTRDcHRELFFBQTVDLEVBQXNEa3RELGdCQUF0RCxFQUF3RTtBQUNwRSxNQUFJNWlELEtBQUssR0FBRyxFQUFaLENBRG9FLENBRXBFOztBQUNBLE9BQUssSUFBSXhPLEVBQUUsR0FBRyxDQUFULEVBQVk1RyxFQUFFLEdBQUc4SyxRQUFRLENBQUMwckQsV0FBL0IsRUFBNEM1dkQsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBcEQsRUFBNER1VSxFQUFFLEVBQTlELEVBQWtFO0FBQzlELFFBQUlqWSxVQUFVLEdBQUdxUixFQUFFLENBQUM0RyxFQUFELENBQW5COztBQUNBLFFBQUlveEQsZ0JBQWdCLENBQUNycEUsVUFBRCxDQUFwQixFQUFrQztBQUM5QnltQixXQUFLLENBQUMxSixPQUFOLENBQWNzc0QsZ0JBQWdCLENBQUNycEUsVUFBRCxDQUE5QjtBQUNIO0FBQ0o7O0FBQ0R5bUIsT0FBSyxDQUFDMUosT0FBTixDQUFjd3NELFdBQWQ7QUFDQSxTQUFPajZDLDBFQUFlLENBQUM3SSxLQUFELENBQXRCO0FBQ0gsQyxDQUNEOzs7QUFDQSxTQUFTK2lELG9CQUFULENBQThCL3ZFLEdBQTlCLEVBQW1DMGlCLFFBQW5DLEVBQTZDNHdDLE9BQTdDLEVBQXNEeitCLElBQXRELEVBQTREO0FBQ3hELE1BQUksQ0FBQzcwQixHQUFMLEVBQVU7QUFDTixRQUFJNjBCLElBQUksQ0FBQzJsQixRQUFMLENBQWM0QixLQUFkLENBQW9CeXlCLGlCQUF4QixFQUEyQztBQUN2QyxVQUFJVix1QkFBdUIsQ0FBQ3pyRCxRQUFELEVBQVdtUyxJQUFJLENBQUMzeEIsUUFBaEIsQ0FBM0IsRUFBc0Q7QUFDbEQsZUFBTyxJQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUNELFNBQU9sRCxHQUFQO0FBQ0g7O0FBRUQsSUFBSWd3RSxxQkFBcUIsR0FBRztBQUN4QnJxRSxJQUFFLEVBQUUrWDtBQURvQixDQUE1QjtBQUdBLElBQUlrSCxJQUFJLEdBQUcsRUFBWDtBQUNBLElBQUlzWSxHQUFHLEdBQUcsQ0FBVjs7QUFDQSxTQUFTK3lDLHlCQUFULENBQW1DcHJELEdBQW5DLEVBQXdDO0FBQ3BDRCxNQUFJLENBQUN6WSxJQUFMLENBQVUwWSxHQUFWO0FBQ0g7O0FBQ0QsU0FBU3FyRCxvQkFBVCxDQUE4QnZxRSxFQUE5QixFQUFrQztBQUM5QixTQUFPaWYsSUFBSSxDQUFDamYsRUFBRCxDQUFYO0FBQ0g7O0FBQ0QsU0FBU3dxRSxxQkFBVCxDQUErQjV4QyxNQUEvQixFQUF1QztBQUNuQyxTQUFPMWUsT0FBTyxDQUFDK0UsSUFBSSxDQUFDMlosTUFBTSxDQUFDc2EsV0FBUixDQUFKLENBQXlCckwsV0FBMUIsQ0FBZDtBQUNIOztBQUNELFNBQVM0aUMsbUJBQVQsQ0FBNkI3dEUsS0FBN0IsRUFBb0M7QUFDaEMsT0FBSyxJQUFJeUYsQ0FBQyxHQUFHNGMsSUFBSSxDQUFDM2EsTUFBTCxHQUFjLENBQTNCLEVBQThCakMsQ0FBQyxJQUFJLENBQW5DLEVBQXNDQSxDQUFDLEVBQXZDLEVBQTJDO0FBQUU7QUFDekMsUUFBSTZjLEdBQUcsR0FBR0QsSUFBSSxDQUFDNWMsQ0FBRCxDQUFkO0FBQ0EsUUFBSW1vQixJQUFJLEdBQUd0TCxHQUFHLENBQUM0b0IsU0FBSixDQUFjbHJDLEtBQWQsQ0FBWDs7QUFDQSxRQUFJNHRCLElBQUosRUFBVTtBQUNOLFVBQUl6aUIsR0FBRyxHQUFHMmlFLHdCQUF3QixDQUFFLE9BQU85dEUsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBOUIsR0FBdUNBLEtBQXZDLEdBQStDLEVBQWhELEVBQW9ENHRCLElBQXBELEVBQTBEbm9CLENBQTFELENBQWxDO0FBQ0EwRixTQUFHLENBQUNpakMsSUFBSixHQUFXcHVDLEtBQVg7QUFDQSxhQUFPbUwsR0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxJQUFQO0FBQ0g7O0FBQ0QsU0FBUzJpRSx3QkFBVCxDQUFrQzl0RSxLQUFsQyxFQUF5QzR0QixJQUF6QyxFQUErQzBvQixXQUEvQyxFQUE0RDtBQUN4RCxNQUFJaHNDLEtBQUssR0FBR3NTLHNFQUFXLENBQUM1YyxLQUFELEVBQVF5dEUscUJBQVIsQ0FBdkI7QUFDQW5qRSxPQUFLLENBQUNzWCxRQUFOLEdBQWlCekcsTUFBTSxDQUFDd2YsR0FBRyxFQUFKLENBQXZCO0FBQ0Fyd0IsT0FBSyxDQUFDZ3NDLFdBQU4sR0FBb0JBLFdBQXBCO0FBQ0Foc0MsT0FBSyxDQUFDc2pCLElBQU4sR0FBYUEsSUFBYjtBQUNBdGpCLE9BQUssQ0FBQ21qQixRQUFOLEdBQWlCbmpCLEtBQUssQ0FBQ2xILEVBQXZCO0FBQ0FrSCxPQUFLLENBQUNtc0MsVUFBTixHQUFtQixLQUFuQjtBQUNBbnNDLE9BQUssQ0FBQzZxQixhQUFOLEdBQXNCLEVBQXRCO0FBQ0E3cUIsT0FBSyxDQUFDcXFCLFVBQU4sR0FBbUIsSUFBbkI7QUFDQSxTQUFPcnFCLEtBQUssQ0FBQ2xILEVBQWI7QUFDQSxTQUFPa0gsS0FBUDtBQUNIOztBQUVELFNBQVN5akUsb0JBQVQsQ0FBK0IveEMsTUFBL0IsRUFBdUN6SCxNQUF2QyxFQUErQ0MsV0FBL0MsRUFBNEQ3ekIsUUFBNUQsRUFBc0U7QUFDbEUsVUFBUTR6QixNQUFNLENBQUN2eEIsSUFBZjtBQUNJLFNBQUssTUFBTDtBQUNJLGFBQU9nckUsWUFBWSxDQUFDcnRFLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsV0FBYixDQUFELEVBQTRCcGpCLFFBQTVCLENBQW5COztBQUNKLFNBQUssdUJBQUw7QUFDSSxhQUFPcXRFLFlBQVksQ0FBQ3o1QyxNQUFNLENBQUMwNUMsbUJBQVIsRUFBNkJ0dEUsUUFBN0IsRUFBdUMsSUFBdkMsQ0FBbkI7O0FBQ0osU0FBSyxNQUFMLENBTEosQ0FLaUI7O0FBQ2IsU0FBSyxNQUFMO0FBQ0EsU0FBSyxVQUFMO0FBQ0EsU0FBSyxlQUFMO0FBQ0ksYUFBT3V0RSxXQUFXLENBQUNseUMsTUFBRCxFQUFTeEgsV0FBVyxDQUFDSyxXQUFyQixFQUFrQ2wwQixRQUFsQyxDQUFsQjs7QUFDSixTQUFLLG1CQUFMO0FBQ0EsU0FBSyx3QkFBTDtBQUNJLGFBQU9zMkMsZUFBZSxDQUFDamIsTUFBRCxFQUFTekgsTUFBTSxDQUFDRyxPQUFoQixFQUF5QkgsTUFBTSxDQUFDSSxVQUFoQyxDQUF0Qjs7QUFDSixTQUFLLG1CQUFMO0FBQ0ksYUFBTytpQixXQUFXLENBQUMxYixNQUFELEVBQVN4SCxXQUFXLENBQUNLLFdBQXJCLEVBQWtDbDBCLFFBQWxDLENBQWxCOztBQUNKO0FBQ0ksYUFBT3E3QixNQUFQO0FBaEJSO0FBa0JIOztBQUNELElBQUltTixLQUFLLEdBQUcsQ0FBWjs7QUFDQSxTQUFTNmtDLFlBQVQsQ0FBc0JodUUsS0FBdEIsRUFBNkJXLFFBQTdCLEVBQXVDd3RFLFVBQXZDLEVBQW1EO0FBQy9DLE1BQUludUUsS0FBSixFQUFXO0FBQ1AsUUFBSWc4QixNQUFNLEdBQUc2eEMsbUJBQW1CLENBQUM3dEUsS0FBRCxDQUFoQzs7QUFDQSxRQUFJbXVFLFVBQVUsSUFBSSxDQUFDeHRFLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsNEJBQWIsQ0FBbkIsRUFBK0Q7QUFBRTtBQUM3RGlZLFlBQU0sR0FBRzBiLFdBQVcsQ0FBQzFiLE1BQUQsRUFBUyxJQUFULEVBQWVyN0IsUUFBZixDQUFwQjtBQUNIOztBQUNELFdBQU9xN0IsTUFBUDtBQUNIOztBQUNELFNBQU8sSUFBUDtBQUNIOztBQUNELFNBQVNreUMsV0FBVCxDQUFxQmx5QyxNQUFyQixFQUE2Qm5ILFdBQTdCLEVBQTBDbDBCLFFBQTFDLEVBQW9EO0FBQ2hELE1BQUlBLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsNEJBQWIsS0FDQSxDQUFDNnBELHFCQUFxQixDQUFDNXhDLE1BQUQsQ0FEdEIsS0FFQyxDQUFDQSxNQUFNLENBQUNySCxVQUFSLElBQXNCLENBQUNwUCxzRUFBVyxDQUFDeVcsTUFBTSxDQUFDckgsVUFBUixFQUFvQkUsV0FBcEIsQ0FGbkMsQ0FBSixFQUUwRTtBQUN0RSxXQUFPNmlCLFdBQVcsQ0FBQzFiLE1BQUQsRUFBU25ILFdBQVQsRUFBc0JsMEIsUUFBdEIsQ0FBbEI7QUFDSCxHQUpELE1BS0s7QUFDRCxXQUFPcTdCLE1BQVA7QUFDSDtBQUNKOztBQUNELFNBQVMwYixXQUFULENBQXFCMWIsTUFBckIsRUFBNkJySCxVQUE3QixFQUF5Q2gwQixRQUF6QyxFQUFtRDtBQUMvQyxNQUFJZzNDLFNBQVMsR0FBR2cyQixvQkFBb0IsQ0FBQzN4QyxNQUFNLENBQUNzYSxXQUFSLENBQXBDO0FBQ0EsTUFBSTVoQixPQUFPLEdBQUd2WixNQUFNLENBQUNndUIsS0FBSyxFQUFOLENBQXBCO0FBQ0F3TyxXQUFTLENBQUN4TSxLQUFWLENBQWdCO0FBQ1ppakMsa0JBQWMsRUFBRXB5QyxNQURKO0FBRVpyN0IsWUFBUSxFQUFFQSxRQUZFO0FBR1pxZCxTQUFLLEVBQUUyVztBQUhLLEdBQWhCLEVBSUcsVUFBVXhwQixHQUFWLEVBQWU7QUFDZDtBQUNBO0FBQ0F4SyxZQUFRLENBQUM0bkMsbUJBQVQsQ0FBNkI4bEMsa0JBQTdCLEdBQWtELENBQUMsSUFBRCxDQUFsRCxDQUhjLENBRzRDOztBQUMxRDF0RSxZQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUNkcHFCLFVBQUksRUFBRSxtQkFEUTtBQUVkMHhCLGFBQU8sRUFBRUEsT0FGSztBQUdkQyxnQkFBVSxFQUFFQSxVQUhFO0FBSWQyNUMsa0JBQVksRUFBRW5qRSxHQUFHLENBQUNtakU7QUFKSixLQUFsQjtBQU1ILEdBZEQsRUFjRyxVQUFVOXFFLEtBQVYsRUFBaUI7QUFDaEI3QyxZQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUNkcHFCLFVBQUksRUFBRSx3QkFEUTtBQUVkMHhCLGFBQU8sRUFBRUEsT0FGSztBQUdkQyxnQkFBVSxFQUFFQSxVQUhFO0FBSWRueEIsV0FBSyxFQUFFQTtBQUpPLEtBQWxCO0FBTUgsR0FyQkQ7QUFzQkEsU0FBTzBiLFFBQVEsQ0FBQyxFQUFELEVBQUs4YyxNQUFMLEVBQWE7QUFBRXlhLGNBQVUsRUFBRSxJQUFkO0FBQW9CdGhCLGlCQUFhLEVBQUVUO0FBQW5DLEdBQWIsQ0FBZjtBQUNIOztBQUNELFNBQVN1aUIsZUFBVCxDQUF5QmpiLE1BQXpCLEVBQWlDdEgsT0FBakMsRUFBMENDLFVBQTFDLEVBQXNEO0FBQ2xELE1BQUlELE9BQU8sS0FBS3NILE1BQU0sQ0FBQzdHLGFBQXZCLEVBQXNDO0FBQ2xDLFdBQU9qVyxRQUFRLENBQUMsRUFBRCxFQUFLOGMsTUFBTCxFQUFhO0FBQUV5YSxnQkFBVSxFQUFFLEtBQWQ7QUFBcUI5aEIsZ0JBQVUsRUFBRUE7QUFBakMsS0FBYixDQUFmO0FBQ0g7O0FBQ0QsU0FBT3FILE1BQVA7QUFDSDs7QUFFRCxJQUFJdXlDLGNBQWMsR0FBRztBQUNqQm5yRSxJQUFFLEVBQUUrWCxNQURhO0FBRWpCbFgsT0FBSyxFQUFFa1gsTUFGVTtBQUdqQjh4RCxVQUFRLEVBQUU5eEQsTUFITztBQUlqQjhhLGVBQWEsRUFBRSxJQUpFO0FBS2pCbHNCLFVBQVEsRUFBRSxJQUxPO0FBTWpCK2tCLGVBQWEsRUFBRTtBQU5FLENBQXJCO0FBUUEsSUFBSTAvQyxpQkFBaUIsR0FBRyxNQUF4QjtBQUNBLElBQUlwNEIsS0FBSyxHQUFHLENBQVo7QUFDQTs7OztBQUdBLFNBQVNxNEIsYUFBVCxDQUF1Qnp1RSxLQUF2QixFQUE4Qml0RSxRQUE5QixFQUF3Q3lCLEtBQXhDLEVBQStDL3RFLFFBQS9DLEVBQXlEO0FBQ3JELE1BQUlzc0UsUUFBUSxLQUFLLEtBQUssQ0FBdEIsRUFBeUI7QUFBRUEsWUFBUSxHQUFHLEVBQVg7QUFBZ0I7O0FBQzNDLE1BQUlweUMsVUFBVSxHQUFHLEVBQWpCO0FBQ0EsTUFBSXZ3QixLQUFLLEdBQUdzUyxzRUFBVyxDQUFDNWMsS0FBRCxFQUFRdXVFLGNBQVIsRUFBd0IsRUFBeEIsRUFBNEIxekMsVUFBNUIsQ0FBdkI7QUFDQSxNQUFJRyxVQUFVLEdBQUcsRUFBakI7QUFDQSxNQUFJeE0sRUFBRSxHQUFHeUwsK0VBQW9CLENBQUMsT0FBRCxFQUFVWSxVQUFWLEVBQXNCbDZCLFFBQXRCLEVBQWdDcTZCLFVBQWhDLENBQTdCOztBQUNBLE1BQUksQ0FBQzF3QixLQUFLLENBQUNsSCxFQUFYLEVBQWU7QUFDWGtILFNBQUssQ0FBQ2xILEVBQU4sR0FBV29yRSxpQkFBaUIsR0FBSXA0QixLQUFLLEVBQXJDO0FBQ0g7O0FBQ0QsTUFBSSxDQUFDOXJDLEtBQUssQ0FBQzJpRSxRQUFYLEVBQXFCO0FBQUU7QUFDbkIzaUUsU0FBSyxDQUFDMmlFLFFBQU4sR0FBaUJBLFFBQWpCO0FBQ0g7O0FBQ0QzaUUsT0FBSyxDQUFDMnJCLGFBQU4sR0FBc0IzckIsS0FBSyxDQUFDMnJCLGFBQU4sR0FBc0JvRyw2RUFBa0IsQ0FBQy94QixLQUFLLENBQUMyckIsYUFBUCxFQUFzQnQxQixRQUF0QixDQUF4QyxHQUEwRSxJQUFoRztBQUNBMkosT0FBSyxDQUFDa2tCLEVBQU4sR0FBV0EsRUFBWDtBQUNBbGtCLE9BQUssQ0FBQ3drQixhQUFOLEdBQXNCNVAsUUFBUSxDQUFDLEVBQUQsRUFBSzhiLFVBQUwsRUFBaUIxd0IsS0FBSyxDQUFDd2tCLGFBQXZCLENBQTlCLENBZHFELENBZXJEOztBQUNBcFEsUUFBTSxDQUFDNmMsTUFBUCxDQUFjL00sRUFBRSxDQUFDd0MsVUFBakI7QUFDQXRTLFFBQU0sQ0FBQzZjLE1BQVAsQ0FBY2p4QixLQUFLLENBQUN3a0IsYUFBcEI7QUFDQSxNQUFJNC9DLEtBQUssQ0FBQ3BrRSxLQUFLLENBQUNsSCxFQUFQLENBQVQsRUFBcUIsQ0FBckIsS0FDSztBQUNEc3JFLFNBQUssQ0FBQ3BrRSxLQUFLLENBQUNsSCxFQUFQLENBQUwsR0FBa0JrSCxLQUFsQjs7QUFDQSxRQUFJQSxLQUFLLENBQUNQLFFBQVYsRUFBb0I7QUFDaEIsV0FBSyxJQUFJa1MsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRy9LLEtBQUssQ0FBQ1AsUUFBNUIsRUFBc0NrUyxFQUFFLEdBQUc1RyxFQUFFLENBQUMzTixNQUE5QyxFQUFzRHVVLEVBQUUsRUFBeEQsRUFBNEQ7QUFDeEQsWUFBSTB5RCxVQUFVLEdBQUd0NUQsRUFBRSxDQUFDNEcsRUFBRCxDQUFuQjtBQUNBd3lELHFCQUFhLENBQUNFLFVBQUQsRUFBYXJrRSxLQUFLLENBQUNsSCxFQUFuQixFQUF1QnNyRSxLQUF2QixFQUE4Qi90RSxRQUE5QixDQUFiO0FBQ0g7O0FBQ0QsYUFBTzJKLEtBQUssQ0FBQ1AsUUFBYjtBQUNIO0FBQ0o7QUFDRCxTQUFPTyxLQUFQO0FBQ0g7QUFDRDs7Ozs7QUFHQSxTQUFTc2tFLFdBQVQsQ0FBcUJ4ckUsRUFBckIsRUFBeUI7QUFDckIsTUFBSUEsRUFBRSxDQUFDb29CLE9BQUgsQ0FBV2dqRCxpQkFBWCxNQUFrQyxDQUF0QyxFQUF5QztBQUNyQyxXQUFPLEVBQVA7QUFDSDs7QUFDRCxTQUFPcHJFLEVBQVA7QUFDSDs7QUFFRCxTQUFTeXJFLG1CQUFULENBQThCSCxLQUE5QixFQUFxQ242QyxNQUFyQyxFQUE2Q3lILE1BQTdDLEVBQXFEcjdCLFFBQXJELEVBQStEO0FBQzNELFVBQVE0ekIsTUFBTSxDQUFDdnhCLElBQWY7QUFDSSxTQUFLLE1BQUw7QUFDSSxhQUFPLEVBQVA7O0FBQ0osU0FBSyxtQkFBTDtBQUNJLGFBQU84ckUsbUJBQW1CLENBQUNKLEtBQUQsRUFBUW42QyxNQUFNLENBQUMrNUMsWUFBZixFQUE2Qi81QyxNQUFNLENBQUNHLE9BQXBDLEVBQTZDc0gsTUFBN0MsRUFBcURyN0IsUUFBckQsQ0FBMUI7O0FBQ0osU0FBSyxjQUFMO0FBQ0ksYUFBT291RSxXQUFXLENBQUNMLEtBQUQsRUFBUW42QyxNQUFNLENBQUN5NkMsWUFBZixDQUFsQjs7QUFDSixTQUFLLGlCQUFMO0FBQ0ksYUFBT0MsY0FBYyxDQUFDUCxLQUFELEVBQVFuNkMsTUFBTSxDQUFDdndCLFVBQWYsQ0FBckI7O0FBQ0osU0FBSyxtQkFBTDtBQUNJLGFBQU9rckUsZUFBZSxDQUFDUixLQUFELEVBQVFuNkMsTUFBTSxDQUFDdndCLFVBQWYsRUFBMkJ1d0IsTUFBTSxDQUFDaHFCLFFBQWxDLEVBQTRDZ3FCLE1BQU0sQ0FBQzQ2QyxTQUFuRCxDQUF0Qjs7QUFDSixTQUFLLGlCQUFMO0FBQ0k7QUFDQSxhQUFPaHVELGtFQUFPLENBQUN1dEQsS0FBRCxFQUFRLFVBQVV2ckUsUUFBVixFQUFvQjtBQUN0QyxlQUFPK2IsUUFBUSxDQUFDLEVBQUQsRUFBSy9iLFFBQUwsQ0FBZjtBQUNILE9BRmEsQ0FBZDs7QUFHSjtBQUNJLGFBQU91ckUsS0FBUDtBQWpCUjtBQW1CSDs7QUFDRCxTQUFTSSxtQkFBVCxDQUE2Qk0sYUFBN0IsRUFBNENyaEMsTUFBNUMsRUFBb0RyWixPQUFwRCxFQUE2RHNILE1BQTdELEVBQXFFcjdCLFFBQXJFLEVBQStFO0FBQzNFLE1BQUlxN0IsTUFBTSxDQUFDN0csYUFBUCxLQUF5QlQsT0FBN0IsRUFBc0M7QUFDbEMsUUFBSTI2QyxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsU0FBSyxJQUFJcHpELEVBQUUsR0FBRyxDQUFULEVBQVlpeUIsUUFBUSxHQUFHSCxNQUE1QixFQUFvQzl4QixFQUFFLEdBQUdpeUIsUUFBUSxDQUFDeG1DLE1BQWxELEVBQTBEdVUsRUFBRSxFQUE1RCxFQUFnRTtBQUM1RCxVQUFJamMsS0FBSyxHQUFHa3VDLFFBQVEsQ0FBQ2p5QixFQUFELENBQXBCO0FBQ0F3eUQsbUJBQWEsQ0FBQ3p1RSxLQUFELEVBQVEsRUFBUixFQUFZcXZFLFNBQVosRUFBdUIxdUUsUUFBdkIsQ0FBYjtBQUNIOztBQUNELFdBQU8wdUUsU0FBUDtBQUNILEdBUEQsTUFRSztBQUNELFdBQU9ELGFBQVA7QUFDSDtBQUNKOztBQUNELFNBQVNMLFdBQVQsQ0FBcUJLLGFBQXJCLEVBQW9DRSxTQUFwQyxFQUErQztBQUMzQztBQUNBLFNBQU9wd0QsUUFBUSxDQUFDLEVBQUQsRUFBS2t3RCxhQUFMLEVBQW9CRSxTQUFwQixDQUFmO0FBQ0g7O0FBQ0QsU0FBU0wsY0FBVCxDQUF3QkcsYUFBeEIsRUFBdUNwckUsVUFBdkMsRUFBbUQ7QUFDL0MsTUFBSXFmLFFBQVEsR0FBR25FLFFBQVEsQ0FBQyxFQUFELEVBQUtrd0QsYUFBTCxDQUF2Qjs7QUFDQSxTQUFPL3JELFFBQVEsQ0FBQ3JmLFVBQUQsQ0FBZixDQUYrQyxDQUcvQzs7QUFDQSxPQUFLLElBQUl1ckUsZUFBVCxJQUE0QmxzRCxRQUE1QixFQUFzQztBQUFFO0FBQ3BDLFFBQUlBLFFBQVEsQ0FBQ2tzRCxlQUFELENBQVIsQ0FBMEJ0QyxRQUExQixLQUF1Q2pwRSxVQUEzQyxFQUF1RDtBQUNuRHFmLGNBQVEsQ0FBQ2tzRCxlQUFELENBQVIsR0FBNEJyd0QsUUFBUSxDQUFDLEVBQUQsRUFBS21FLFFBQVEsQ0FBQ2tzRCxlQUFELENBQWIsRUFBZ0M7QUFBRXRDLGdCQUFRLEVBQUU7QUFBWixPQUFoQyxDQUFwQztBQUNIO0FBQ0o7O0FBQ0QsU0FBTzVwRCxRQUFQO0FBQ0g7O0FBQ0QsU0FBUzZyRCxlQUFULENBQXlCRSxhQUF6QixFQUF3Q3ByRSxVQUF4QyxFQUFvRHlHLElBQXBELEVBQTBEcU4sS0FBMUQsRUFBaUU7QUFDN0QsTUFBSXpDLEVBQUosRUFBUTZZLEVBQVI7O0FBQ0EsTUFBSXNoRCxnQkFBZ0IsR0FBR0osYUFBYSxDQUFDcHJFLFVBQUQsQ0FBcEMsQ0FGNkQsQ0FHN0Q7O0FBQ0EsTUFBSXdyRSxnQkFBSixFQUFzQjtBQUNsQixXQUFPdHdELFFBQVEsQ0FBQyxFQUFELEVBQUtrd0QsYUFBTCxHQUFxQi81RCxFQUFFLEdBQUcsRUFBTCxFQUFTQSxFQUFFLENBQUNyUixVQUFELENBQUYsR0FBaUJrYixRQUFRLENBQUMsRUFBRCxFQUFLc3dELGdCQUFMLEdBQXdCdGhELEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQ3pqQixJQUFELENBQUYsR0FBV3FOLEtBQXBCLEVBQTJCb1csRUFBbkQsRUFBbEMsRUFBMkY3WSxFQUFoSCxFQUFmO0FBQ0gsR0FGRCxNQUdLO0FBQ0QsV0FBTys1RCxhQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTSyw4QkFBVCxDQUF3Q0MsVUFBeEMsRUFBb0RuN0MsTUFBcEQsRUFBNEQ7QUFDeEQsTUFBSWxmLEVBQUo7O0FBQ0EsVUFBUWtmLE1BQU0sQ0FBQ3Z4QixJQUFmO0FBQ0ksU0FBSyxNQUFMO0FBQ0ksYUFBTyxFQUFQOztBQUNKLFNBQUssOEJBQUw7QUFDSSxhQUFPa2MsUUFBUSxDQUFDLEVBQUQsRUFBS3d3RCxVQUFMLEdBQWtCcjZELEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQ2tmLE1BQU0sQ0FBQ254QixFQUFSLENBQUYsR0FBZ0JteEIsTUFBTSxDQUFDbzdDLFVBQWhDLEVBQTRDdDZELEVBQTlELEVBQWY7O0FBQ0o7QUFDSSxhQUFPcTZELFVBQVA7QUFOUjtBQVFIOztBQUVELFNBQVNFLGlCQUFULENBQTRCcC9DLEtBQTVCLEVBQW1DK0QsTUFBbkMsRUFBMkM1ekIsUUFBM0MsRUFBcUQ7QUFDakQsTUFBSXl0RSxjQUFjLEdBQUdMLG9CQUFvQixDQUFDdjlDLEtBQUssQ0FBQzQ5QyxjQUFQLEVBQXVCNzVDLE1BQXZCLEVBQStCL0QsS0FBSyxDQUFDZ0UsV0FBckMsRUFBa0Q3ekIsUUFBbEQsQ0FBekM7QUFDQSxNQUFJNHJFLGFBQWEsR0FBR3NDLG1CQUFtQixDQUFDcitDLEtBQUssQ0FBQys3QyxhQUFQLEVBQXNCaDRDLE1BQXRCLEVBQThCNjVDLGNBQTlCLEVBQThDenRFLFFBQTlDLENBQXZDO0FBQ0EsTUFBSTZyRSx3QkFBd0IsR0FBR2lELDhCQUE4QixDQUFDai9DLEtBQUssQ0FBQ2c4Qyx3QkFBUCxFQUFpQ2o0QyxNQUFqQyxDQUE3RDtBQUNBLFNBQU9yVixRQUFRLENBQUMsRUFBRCxFQUFLc1IsS0FBTCxFQUFZO0FBQUU0OUMsa0JBQWMsRUFBRUEsY0FBbEI7QUFDdkI3QixpQkFBYSxFQUFFQSxhQURRO0FBRXZCQyw0QkFBd0IsRUFBRUE7QUFGSCxHQUFaLENBQWY7QUFHSDs7QUFFRCxJQUFJcUQsc0JBQXNCLEdBQUc7QUFDekI3ckUsWUFBVSxFQUFFbVgsTUFEYTtBQUV6QjB3RCxhQUFXLEVBQUUsVUFBVWlFLEtBQVYsRUFBaUI7QUFDMUIsV0FBTyxDQUFDQSxLQUFLLElBQUksRUFBVixFQUFjdGdFLEdBQWQsQ0FBa0IsVUFBVStSLElBQVYsRUFBZ0I7QUFDckMsYUFBT3BHLE1BQU0sQ0FBQ29HLElBQUQsQ0FBYjtBQUNILEtBRk0sQ0FBUDtBQUdILEdBTndCO0FBT3pCdXFELGtCQUFnQixFQUFFeHVEO0FBUE8sQ0FBN0I7O0FBU0EsU0FBU3lkLGFBQVQsQ0FBdUJ6WSxHQUF2QixFQUE0QmhZLEtBQTVCLEVBQW1DbVYsU0FBbkMsRUFBOEM7QUFDMUMsTUFBSXN3RCxvQkFBb0IsR0FBR256RCxzRUFBVyxDQUFDdFMsS0FBRCxFQUFRdWxFLHNCQUFSLEVBQWdDLEVBQWhDLEVBQW9DcHdELFNBQXBDLENBQXRDO0FBQ0EsTUFBSW9zRCxXQUFXLEdBQUdrRSxvQkFBb0IsQ0FBQ2xFLFdBQXZDOztBQUNBLE1BQUlrRSxvQkFBb0IsQ0FBQy9yRSxVQUF6QixFQUFxQztBQUNqQzZuRSxlQUFXLENBQUNqaUUsSUFBWixDQUFpQm1tRSxvQkFBb0IsQ0FBQy9yRSxVQUF0QztBQUNIOztBQUNEc2UsS0FBRyxDQUFDdXBELFdBQUosR0FBa0JBLFdBQWxCO0FBQ0F2cEQsS0FBRyxDQUFDd3BELGdCQUFKLEdBQXVCaUUsb0JBQW9CLENBQUNqRSxnQkFBNUM7QUFDSDs7QUFFRCxTQUFTa0UsMEJBQVQsQ0FBb0M5SixJQUFwQyxFQUEwQ0MsSUFBMUMsRUFBZ0Q7QUFDNUMsTUFBSThKLFdBQVcsR0FBRy9KLElBQUksQ0FBQ2xuQyxRQUFMLENBQWNoN0IsVUFBaEM7QUFDQSxNQUFJa3NFLFdBQVcsR0FBRy9KLElBQUksQ0FBQ25uQyxRQUFMLENBQWNoN0IsVUFBaEM7O0FBQ0EsTUFBSWlzRSxXQUFXLElBQUlDLFdBQW5CLEVBQWdDO0FBQzVCLFFBQUloSyxJQUFJLENBQUMvbEMsU0FBTCxDQUFlZ3dDLG9CQUFmLEtBQXdDLEtBQXhDLElBQ0FGLFdBQVcsS0FBS0MsV0FEcEIsRUFDaUM7QUFDN0IsYUFBTyxLQUFQO0FBQ0gsS0FIRCxNQUlLO0FBQ0QsYUFBTztBQUFFbHNFLGtCQUFVLEVBQUVpc0U7QUFBZCxPQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUVELElBQUlHLFdBQVc7QUFBRztBQUFlLFlBQVk7QUFDekMsV0FBU0EsV0FBVCxDQUFxQnp2RSxRQUFyQixFQUErQjB2RSxXQUEvQixFQUE0QztBQUN4QyxTQUFLdmlELFNBQUwsR0FBaUJudEIsUUFBakI7QUFDQSxTQUFLMnZFLFNBQUwsR0FBaUJELFdBQWpCO0FBQ0g7O0FBQ0RELGFBQVcsQ0FBQ2hwRSxTQUFaLENBQXNCNm1CLE9BQXRCLEdBQWdDLFVBQVV4akIsSUFBVixFQUFnQnFOLEtBQWhCLEVBQXVCO0FBQ25ELFNBQUtnVyxTQUFMLENBQWVWLFFBQWYsQ0FBd0I7QUFDcEJwcUIsVUFBSSxFQUFFLG1CQURjO0FBRXBCZ0IsZ0JBQVUsRUFBRSxLQUFLc3NFLFNBQUwsQ0FBZWx0RSxFQUZQO0FBR3BCbUgsY0FBUSxFQUFFRSxJQUhVO0FBSXBCMGtFLGVBQVMsRUFBRXIzRDtBQUpTLEtBQXhCO0FBTUgsR0FQRDs7QUFRQXM0RCxhQUFXLENBQUNocEUsU0FBWixDQUFzQnRCLE1BQXRCLEdBQStCLFlBQVk7QUFDdkMsU0FBS2dvQixTQUFMLENBQWVWLFFBQWYsQ0FBd0I7QUFDcEJwcUIsVUFBSSxFQUFFLGlCQURjO0FBRXBCZ0IsZ0JBQVUsRUFBRSxLQUFLc3NFLFNBQUwsQ0FBZWx0RTtBQUZQLEtBQXhCO0FBSUgsR0FMRDs7QUFNQWd0RSxhQUFXLENBQUNocEUsU0FBWixDQUFzQm1wRSxTQUF0QixHQUFrQyxZQUFZO0FBQzFDLFFBQUk1dkUsUUFBUSxHQUFHLEtBQUttdEIsU0FBcEI7QUFDQSxRQUFJbS9DLFFBQVEsR0FBRyxLQUFLcUQsU0FBTCxDQUFlckQsUUFBOUI7O0FBQ0EsUUFBSUEsUUFBSixFQUFjO0FBQ1YsYUFBTyxJQUFJbUQsV0FBSixDQUFnQnp2RSxRQUFoQixFQUEwQkEsUUFBUSxDQUFDNnZCLEtBQVQsQ0FBZTQ5QyxjQUFmLENBQThCbkIsUUFBOUIsQ0FBMUIsQ0FBUDtBQUNILEtBRkQsTUFHSztBQUNELGFBQU8sSUFBUDtBQUNIO0FBQ0osR0FURDs7QUFVQW1ELGFBQVcsQ0FBQ2hwRSxTQUFaLENBQXNCb3BFLFdBQXRCLEdBQW9DLFlBQVk7QUFDNUMsUUFBSUMsY0FBYyxHQUFHLEtBQUtILFNBQUwsQ0FBZWx0RSxFQUFwQztBQUNBLFFBQUl6QyxRQUFRLEdBQUcsS0FBS210QixTQUFwQjtBQUNBLFFBQUl5K0MsYUFBYSxHQUFHNXJFLFFBQVEsQ0FBQzZ2QixLQUFULENBQWUrN0MsYUFBbkM7QUFDQSxRQUFJbUUsU0FBUyxHQUFHLEVBQWhCOztBQUNBLFNBQUssSUFBSTFzRSxVQUFULElBQXVCdW9FLGFBQXZCLEVBQXNDO0FBQ2xDLFVBQUlBLGFBQWEsQ0FBQ3ZvRSxVQUFELENBQWIsQ0FBMEJpcEUsUUFBMUIsS0FBdUN3RCxjQUEzQyxFQUEyRDtBQUN2REMsaUJBQVMsQ0FBQzltRSxJQUFWLENBQWUsSUFBSXdtRSxXQUFKLENBQWdCenZFLFFBQWhCLEVBQTBCNHJFLGFBQWEsQ0FBQ3ZvRSxVQUFELENBQXZDLENBQWY7QUFDSDtBQUNKOztBQUNELFdBQU8wc0UsU0FBUDtBQUNILEdBWEQ7QUFZQTs7Ozs7O0FBSUFOLGFBQVcsQ0FBQ2hwRSxTQUFaLENBQXNCNG1ELFNBQXRCLEdBQWtDLFlBQVk7QUFDMUMsUUFBSXlpQixjQUFjLEdBQUcsS0FBS0gsU0FBTCxDQUFlbHRFLEVBQXBDO0FBQ0EsUUFBSXpDLFFBQVEsR0FBRyxLQUFLbXRCLFNBQXBCO0FBQ0EsUUFBSXpZLEVBQUUsR0FBRzFVLFFBQVEsQ0FBQzZ2QixLQUFULENBQWUxTyxVQUF4QjtBQUFBLFFBQW9DTyxJQUFJLEdBQUdoTixFQUFFLENBQUNnTixJQUE5QztBQUFBLFFBQW9ESSxTQUFTLEdBQUdwTixFQUFFLENBQUNvTixTQUFuRTtBQUNBLFFBQUl3ckMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLFNBQUssSUFBSXZyQyxVQUFULElBQXVCRCxTQUF2QixFQUFrQztBQUM5QixVQUFJRCxRQUFRLEdBQUdDLFNBQVMsQ0FBQ0MsVUFBRCxDQUF4QjtBQUNBLFVBQUlKLEdBQUcsR0FBR0QsSUFBSSxDQUFDRyxRQUFRLENBQUNELEtBQVYsQ0FBZDs7QUFDQSxVQUFJRCxHQUFHLENBQUN1cEQsV0FBSixDQUFnQnJnRCxPQUFoQixDQUF3QmlsRCxjQUF4QixNQUE0QyxDQUFDLENBQWpELEVBQW9EO0FBQUU7QUFDbER4aUIsaUJBQVMsQ0FBQ3JrRCxJQUFWLENBQWUsSUFBSWlrQiwyREFBSixDQUFhbHRCLFFBQWIsRUFBdUIyaEIsR0FBdkIsRUFBNEJFLFFBQTVCLENBQWY7QUFDSDtBQUNKOztBQUNELFdBQU95ckMsU0FBUDtBQUNILEdBYkQ7O0FBY0F2dkMsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQjZpRCxXQUFXLENBQUNocEUsU0FBbEMsRUFBNkMsSUFBN0MsRUFBbUQ7QUFDL0NvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUs4aUQsU0FBTCxDQUFlbHRFLEVBQXRCO0FBQTJCLEtBREM7QUFFL0NzcUIsY0FBVSxFQUFFLElBRm1DO0FBRy9DQyxnQkFBWSxFQUFFO0FBSGlDLEdBQW5EO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCNmlELFdBQVcsQ0FBQ2hwRSxTQUFsQyxFQUE2QyxPQUE3QyxFQUFzRDtBQUNsRG9tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBSzhpRCxTQUFMLENBQWVyc0UsS0FBdEI7QUFBOEIsS0FEQztBQUVsRHlwQixjQUFVLEVBQUUsSUFGc0M7QUFHbERDLGdCQUFZLEVBQUU7QUFIb0MsR0FBdEQ7QUFLQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0I2aUQsV0FBVyxDQUFDaHBFLFNBQWxDLEVBQTZDLGlCQUE3QyxFQUFnRTtBQUM1RG9tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBSzhpRCxTQUFMLENBQWU5aEQsRUFBZixDQUFrQm9DLFdBQWxCLENBQThCLENBQTlCLEtBQW9DLElBQTNDO0FBQWtELEtBRFQ7QUFFNURsRCxjQUFVLEVBQUUsSUFGZ0Q7QUFHNURDLGdCQUFZLEVBQUU7QUFIOEMsR0FBaEU7QUFLQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0I2aUQsV0FBVyxDQUFDaHBFLFNBQWxDLEVBQTZDLGNBQTdDLEVBQTZEO0FBQ3pEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLOGlELFNBQUwsQ0FBZTloRCxFQUFmLENBQWtCcUMsT0FBekI7QUFBbUMsS0FERztBQUV6RG5ELGNBQVUsRUFBRSxJQUY2QztBQUd6REMsZ0JBQVksRUFBRTtBQUgyQyxHQUE3RDtBQUtBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQjZpRCxXQUFXLENBQUNocEUsU0FBbEMsRUFBNkMsWUFBN0MsRUFBMkQ7QUFDdkRvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUs4aUQsU0FBTCxDQUFlOWhELEVBQWYsQ0FBa0JzQyxNQUFsQixDQUF5QixDQUF6QixLQUErQixJQUF0QztBQUE2QyxLQURUO0FBRXZEcEQsY0FBVSxFQUFFLElBRjJDO0FBR3ZEQyxnQkFBWSxFQUFFO0FBSHlDLEdBQTNEO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCNmlELFdBQVcsQ0FBQ2hwRSxTQUFsQyxFQUE2QyxzQkFBN0MsRUFBcUU7QUFDakVvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUs4aUQsU0FBTCxDQUFlOWhELEVBQWYsQ0FBa0JDLGVBQXpCO0FBQTJDLEtBREc7QUFFakVmLGNBQVUsRUFBRSxJQUZxRDtBQUdqRUMsZ0JBQVksRUFBRTtBQUhtRCxHQUFyRTtBQUtBalAsUUFBTSxDQUFDNk8sY0FBUCxDQUFzQjZpRCxXQUFXLENBQUNocEUsU0FBbEMsRUFBNkMsa0JBQTdDLEVBQWlFO0FBQzdEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLOGlELFNBQUwsQ0FBZTloRCxFQUFmLENBQWtCRSxXQUF6QjtBQUF1QyxLQURHO0FBRTdEaEIsY0FBVSxFQUFFLElBRmlEO0FBRzdEQyxnQkFBWSxFQUFFO0FBSCtDLEdBQWpFO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCNmlELFdBQVcsQ0FBQ2hwRSxTQUFsQyxFQUE2QyxnQkFBN0MsRUFBK0Q7QUFDM0RvbUIsT0FBRyxFQUFFLFlBQVk7QUFBRSxhQUFPLEtBQUs4aUQsU0FBTCxDQUFlOWhELEVBQWYsQ0FBa0J1QyxTQUF6QjtBQUFxQyxLQURHO0FBRTNEckQsY0FBVSxFQUFFLElBRitDO0FBRzNEQyxnQkFBWSxFQUFFO0FBSDZDLEdBQS9EO0FBS0FqUCxRQUFNLENBQUM2TyxjQUFQLENBQXNCNmlELFdBQVcsQ0FBQ2hwRSxTQUFsQyxFQUE2QyxpQkFBN0MsRUFBZ0U7QUFDNUQ7QUFDQW9tQixPQUFHLEVBQUUsWUFBWTtBQUFFLGFBQU8sS0FBSzhpRCxTQUFMLENBQWU5aEQsRUFBZixDQUFrQndDLFVBQXpCO0FBQXNDLEtBRkc7QUFHNUR0RCxjQUFVLEVBQUUsSUFIZ0Q7QUFJNURDLGdCQUFZLEVBQUU7QUFKOEMsR0FBaEU7QUFNQWpQLFFBQU0sQ0FBQzZPLGNBQVAsQ0FBc0I2aUQsV0FBVyxDQUFDaHBFLFNBQWxDLEVBQTZDLGVBQTdDLEVBQThEO0FBQzFEb21CLE9BQUcsRUFBRSxZQUFZO0FBQUUsYUFBTyxLQUFLOGlELFNBQUwsQ0FBZXhoRCxhQUF0QjtBQUFzQyxLQURDO0FBRTFEcEIsY0FBVSxFQUFFLElBRjhDO0FBRzFEQyxnQkFBWSxFQUFFO0FBSDRDLEdBQTlEO0FBS0EsU0FBT3lpRCxXQUFQO0FBQ0gsQ0EvR2dDLEVBQWpDOztBQWlIQXh2RSwyREFBUSxDQUFDd0csU0FBVCxDQUFtQjJuRSxXQUFuQixHQUFpQyxVQUFVL3VFLEtBQVYsRUFBaUIyd0UsUUFBakIsRUFBMkI7QUFDeEQsTUFBSXQ3RCxFQUFKOztBQUNBLE1BQUlzN0QsUUFBUSxLQUFLLEtBQUssQ0FBdEIsRUFBeUI7QUFBRUEsWUFBUSxHQUFHLElBQVg7QUFBa0I7O0FBQzdDLE1BQUkzQixZQUFKO0FBQ0EsTUFBSTdyRSxRQUFKOztBQUNBLE1BQUluRCxLQUFLLFlBQVlvd0UsV0FBckIsRUFBa0M7QUFDOUJqdEUsWUFBUSxHQUFHbkQsS0FBSyxDQUFDc3dFLFNBQWpCO0FBQ0F0QixnQkFBWSxJQUFJMzVELEVBQUUsR0FBRyxFQUFMLEVBQVNBLEVBQUUsQ0FBQ2xTLFFBQVEsQ0FBQ0MsRUFBVixDQUFGLEdBQWtCRCxRQUEzQixFQUFxQ2tTLEVBQXpDLENBQVo7QUFDSCxHQUhELE1BSUs7QUFDRDI1RCxnQkFBWSxHQUFHLEVBQWY7QUFDQTdyRSxZQUFRLEdBQUdzckUsYUFBYSxDQUFDenVFLEtBQUQsRUFBUSxFQUFSLEVBQVlndkUsWUFBWixFQUEwQixJQUExQixDQUF4QjtBQUNILEdBWnVELENBYXhEOzs7QUFDQSxNQUFJMkIsUUFBSixFQUFjO0FBQ1YsU0FBS3h3QyxTQUFMLENBQWU3TixJQUFmLENBQW9Cc3hCLFNBQXBCLENBQThCO0FBQUVndEIsaUJBQVcsRUFBRXp0RSxRQUFRLENBQUNDO0FBQXhCLEtBQTlCO0FBQ0g7O0FBQ0QsT0FBS2dxQixRQUFMLENBQWM7QUFDVnBxQixRQUFJLEVBQUUsY0FESTtBQUVWZ3NFLGdCQUFZLEVBQUVBO0FBRkosR0FBZDtBQUlBLFNBQU8sSUFBSW9CLFdBQUosQ0FBZ0IsSUFBaEIsRUFBc0JqdEUsUUFBdEIsQ0FBUDtBQUNILENBdEJEOztBQXVCQXZDLDJEQUFRLENBQUN3RyxTQUFULENBQW1CNmtFLGVBQW5CLEdBQXFDLFVBQVU3b0UsRUFBVixFQUFjO0FBQy9DQSxJQUFFLEdBQUcrWCxNQUFNLENBQUMvWCxFQUFELENBQVg7O0FBQ0EsTUFBSSxLQUFLb3RCLEtBQUwsQ0FBVys3QyxhQUFmLEVBQThCO0FBQUU7QUFDNUIsUUFBSThELFdBQVcsR0FBRyxLQUFLNy9DLEtBQUwsQ0FBVys3QyxhQUFYLENBQXlCbnBFLEVBQXpCLENBQWxCOztBQUNBLFFBQUlpdEUsV0FBSixFQUFpQjtBQUNiLGFBQU8sSUFBSUQsV0FBSixDQUFnQixJQUFoQixFQUFzQkMsV0FBdEIsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxJQUFQO0FBQ0gsQ0FURDs7QUFVQXp2RSwyREFBUSxDQUFDd0csU0FBVCxDQUFtQnlwRSxZQUFuQixHQUFrQyxZQUFZO0FBQzFDLE1BQUl0RSxhQUFhLEdBQUcsS0FBSy83QyxLQUFMLENBQVcrN0MsYUFBL0I7QUFDQSxNQUFJdUUsWUFBWSxHQUFHLEVBQW5COztBQUNBLE1BQUl2RSxhQUFKLEVBQW1CO0FBQUU7QUFDakIsU0FBSyxJQUFJdm9FLFVBQVQsSUFBdUJ1b0UsYUFBdkIsRUFBc0M7QUFDbEN1RSxrQkFBWSxDQUFDbG5FLElBQWIsQ0FBa0IsSUFBSXdtRSxXQUFKLENBQWdCLElBQWhCLEVBQXNCN0QsYUFBYSxDQUFDdm9FLFVBQUQsQ0FBbkMsQ0FBbEI7QUFDSDtBQUNKOztBQUNELFNBQU84c0UsWUFBUDtBQUNILENBVEQ7O0FBVUFsd0UsMkRBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUIycEUsb0JBQW5CLEdBQTBDLFlBQVk7QUFDbEQsTUFBSXhFLGFBQWEsR0FBRyxLQUFLLzdDLEtBQUwsQ0FBVys3QyxhQUEvQjtBQUNBLE1BQUl1RSxZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsTUFBSXZFLGFBQUosRUFBbUI7QUFBRTtBQUNqQixTQUFLLElBQUl2b0UsVUFBVCxJQUF1QnVvRSxhQUF2QixFQUFzQztBQUNsQyxVQUFJLENBQUNBLGFBQWEsQ0FBQ3ZvRSxVQUFELENBQWIsQ0FBMEJpcEUsUUFBL0IsRUFBeUM7QUFDckM2RCxvQkFBWSxDQUFDbG5FLElBQWIsQ0FBa0IsSUFBSXdtRSxXQUFKLENBQWdCLElBQWhCLEVBQXNCN0QsYUFBYSxDQUFDdm9FLFVBQUQsQ0FBbkMsQ0FBbEI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsU0FBTzhzRSxZQUFQO0FBQ0gsQ0FYRDs7QUFZQWx3RSwyREFBUSxDQUFDd0csU0FBVCxDQUFtQjRwRSxpQkFBbkIsR0FBdUMsWUFBWTtBQUMvQyxPQUFLNWpELFFBQUwsQ0FBYztBQUNWcHFCLFFBQUksRUFBRTtBQURJLEdBQWQ7QUFHSCxDQUpEOztBQUtBcEMsMkRBQVEsQ0FBQ3dHLFNBQVQsQ0FBbUI2cEUsZ0JBQW5CLEdBQXNDLFlBQVk7QUFDOUMsT0FBSzdqRCxRQUFMLENBQWM7QUFDVnBxQixRQUFJLEVBQUU7QUFESSxHQUFkO0FBR0gsQ0FKRDs7QUFLQSxTQUFTa3VFLGtCQUFULENBQTRCbHlDLFFBQTVCLEVBQXNDcitCLFFBQXRDLEVBQWdEO0FBQzVDLFNBQU9xK0IsUUFBUSxDQUFDaDdCLFVBQVQsR0FDSDtBQUFFYixZQUFRLEVBQUV4QyxRQUFRLENBQUNzckUsZUFBVCxDQUF5Qmp0QyxRQUFRLENBQUNoN0IsVUFBbEM7QUFBWixHQURHLEdBRUgsRUFGSjtBQUdIOztBQUNELFNBQVNtdEUsaUJBQVQsQ0FBMkJueUMsUUFBM0IsRUFBcUNyK0IsUUFBckMsRUFBK0M7QUFDM0MsU0FBT3ErQixRQUFRLENBQUNoN0IsVUFBVCxHQUNIO0FBQUViLFlBQVEsRUFBRXhDLFFBQVEsQ0FBQ3NyRSxlQUFULENBQXlCanRDLFFBQVEsQ0FBQ2g3QixVQUFsQztBQUFaLEdBREcsR0FFSCxFQUZKO0FBR0g7QUFFRDs7Ozs7O0FBSUEsSUFBSW90RSxnQkFBZ0I7QUFBRztBQUFlLFVBQVVsdkMsTUFBVixFQUFrQjtBQUNwRG5qQixXQUFTLENBQUNxeUQsZ0JBQUQsRUFBbUJsdkMsTUFBbkIsQ0FBVDs7QUFDQSxXQUFTa3ZDLGdCQUFULEdBQTRCO0FBQ3hCLFdBQU9sdkMsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQ250QixLQUFQLENBQWEsSUFBYixFQUFtQm1ILFNBQW5CLENBQW5CLElBQW9ELElBQTNEO0FBQ0g7O0FBQ0RrMUQsa0JBQWdCLENBQUNocUUsU0FBakIsQ0FBMkJrM0IsVUFBM0IsR0FBd0MsVUFBVWgwQixLQUFWLEVBQWlCO0FBQ3JELFdBQU80VSxRQUFRLENBQUM7QUFBRSxVQUFJO0FBQU4sS0FBRCxFQUFhNVUsS0FBSyxDQUFDaWlFLGFBQW5CLENBQWlDO0FBQWpDLEtBQWY7QUFFSCxHQUhEOztBQUlBNkUsa0JBQWdCLENBQUNocUUsU0FBakIsQ0FBMkI4M0Isa0JBQTNCLEdBQWdELFVBQVVGLFFBQVYsRUFBb0I7QUFDaEUsV0FBTyxDQUFDQSxRQUFRLENBQUNoN0IsVUFBVCxJQUF1QixFQUF4QixDQUFQO0FBQ0gsR0FGRDs7QUFHQW90RSxrQkFBZ0IsQ0FBQ2hxRSxTQUFqQixDQUEyQmc0QixrQkFBM0IsR0FBZ0QsVUFBVWpmLFFBQVYsRUFBb0I7QUFDaEUsUUFBSTByRCxXQUFXLEdBQUcxckQsUUFBUSxDQUFDMHJELFdBQTNCOztBQUNBLFFBQUksQ0FBQ0EsV0FBVyxDQUFDbmtFLE1BQWpCLEVBQXlCO0FBQ3JCLGFBQU8sQ0FBQyxFQUFELENBQVA7QUFDSDs7QUFDRCxXQUFPbWtFLFdBQVA7QUFDSCxHQU5EOztBQU9BLFNBQU91RixnQkFBUDtBQUNILENBcEJxQyxDQW9CcEM5ekMsMkRBcEJvQyxDQUF0Qzs7QUFzQkEsU0FBUyt6Qyx5QkFBVCxDQUFtQy9tRSxLQUFuQyxFQUEwQzNKLFFBQTFDLEVBQW9EO0FBQ2hELE1BQUkyd0UsUUFBUSxHQUFHLElBQUlGLGdCQUFKLEVBQWY7QUFDQSxNQUFJRyxJQUFJLEdBQUdELFFBQVEsQ0FBQ256QyxVQUFULENBQW9CamYsUUFBUSxDQUFDLEVBQUQsRUFBSzVVLEtBQUwsRUFBWTtBQUFFaWlFLGlCQUFhLEVBQUU1ckUsUUFBUSxDQUFDNnZCLEtBQVQsQ0FBZSs3QztBQUFoQyxHQUFaLENBQTVCLENBQVg7O0FBQ0EsT0FBSyxJQUFJdm9FLFVBQVQsSUFBdUJ1dEUsSUFBdkIsRUFBNkI7QUFDekIsUUFBSUMsT0FBTyxHQUFHRCxJQUFJLENBQUN2dEUsVUFBRCxDQUFsQixDQUR5QixDQUV6Qjs7QUFDQSxRQUFJQSxVQUFVLElBQUl1dEUsSUFBSSxDQUFDLEVBQUQsQ0FBdEIsRUFBNEI7QUFBRTtBQUMxQkMsYUFBTyxHQUFHdHlELFFBQVEsQ0FBQyxFQUFELEVBQUtzeUQsT0FBTCxFQUFjO0FBQUUxdkQsa0JBQVUsRUFBRXdDLDJFQUFnQixDQUFDaXRELElBQUksQ0FBQyxFQUFELENBQUosQ0FBU3p2RCxVQUFWLEVBQXNCMHZELE9BQU8sQ0FBQzF2RCxVQUE5QixDQUE5QjtBQUF5RW9QLG9CQUFZLEVBQUVoUyxRQUFRLENBQUMsRUFBRCxFQUFLcXlELElBQUksQ0FBQyxFQUFELENBQUosQ0FBU3JnRCxZQUFkLEVBQTRCc2dELE9BQU8sQ0FBQ3RnRCxZQUFwQztBQUEvRixPQUFkLENBQWxCO0FBQ0g7O0FBQ0QsUUFBSSxDQUFDa0YsdUVBQVksQ0FBQ283QyxPQUFELEVBQVU3d0UsUUFBVixFQUFvQjtBQUFFcUQsZ0JBQVUsRUFBRUE7QUFBZCxLQUFwQixFQUFnRHN5QixZQUFZLENBQUNnVixJQUFiLENBQWtCLElBQWxCLEVBQXdCdG5DLFVBQXhCLENBQWhELENBQWpCLEVBQXVHO0FBQ25HLGFBQU8sS0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxJQUFQO0FBQ0g7O0FBQ0QsU0FBU3N5QixZQUFULENBQXNCdHlCLFVBQXRCLEVBQWtDMnFDLE1BQWxDLEVBQTBDO0FBQ3RDLFNBQU96dkIsUUFBUSxDQUFDLEVBQUQsRUFBS3l2QixNQUFMLEVBQWE7QUFBRS9kLGVBQVcsRUFBRTZnRCxpQkFBaUIsQ0FBQ3p0RSxVQUFELEVBQWEycUMsTUFBTSxDQUFDL2QsV0FBcEI7QUFBaEMsR0FBYixDQUFmO0FBQ0g7O0FBQ0QsU0FBUzZnRCxpQkFBVCxDQUEyQnp0RSxVQUEzQixFQUF1QzRzQixXQUF2QyxFQUFvRDtBQUNoRCxTQUFPQSxXQUFXLENBQUNwaEIsR0FBWixDQUFnQixVQUFVeXBCLFVBQVYsRUFBc0I7QUFDekMsUUFBSTVXLElBQUksR0FBRzRXLFVBQVUsQ0FBQzVXLElBQXRCOztBQUNBLFFBQUlBLElBQUosRUFBVTtBQUFFO0FBQ1I7QUFDQTtBQUNBLFdBQUssSUFBSUUsS0FBVCxJQUFrQkYsSUFBbEIsRUFBd0I7QUFDcEIsWUFBSXdwRCxXQUFXLEdBQUd4cEQsSUFBSSxDQUFDRSxLQUFELENBQUosQ0FBWXNwRCxXQUE5Qjs7QUFDQSxZQUFJQSxXQUFXLENBQUNua0UsTUFBWixJQUFzQm1rRSxXQUFXLENBQUNyZ0QsT0FBWixDQUFvQnhuQixVQUFwQixNQUFvQyxDQUFDLENBQS9ELEVBQWtFO0FBQUU7QUFDaEUsaUJBQU8sS0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxXQUFPaTFCLFVBQVA7QUFDSCxHQWJNLENBQVA7QUFjSDs7QUFFRCxTQUFTeTRDLG9CQUFULENBQThCMXlDLFFBQTlCLEVBQXdDO0FBQ3BDLFNBQU9BLFFBQVEsQ0FBQ2g3QixVQUFULEdBQ0g7QUFBRUEsY0FBVSxFQUFFZzdCLFFBQVEsQ0FBQ2g3QjtBQUF2QixHQURHLEdBRUgsRUFGSjtBQUdIOztBQUVELFNBQVMydEUsd0JBQVQsQ0FBa0N6TCxJQUFsQyxFQUF3Q0MsSUFBeEMsRUFBOEM7QUFDMUMsTUFBSWhtQyxTQUFTLEdBQUcrbEMsSUFBSSxDQUFDL2xDLFNBQXJCOztBQUNBLE1BQUlBLFNBQVMsQ0FBQ2d3QyxvQkFBVixLQUFtQyxLQUFuQyxJQUNBakssSUFBSSxDQUFDbG5DLFFBQUwsQ0FBY2g3QixVQUFkLEtBQTZCbWlFLElBQUksQ0FBQ25uQyxRQUFMLENBQWNoN0IsVUFEL0MsRUFDMkQ7QUFDdkQsV0FBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRDZwQiwyREFBUSxDQUFDem1CLFNBQVQsQ0FBbUJ5cEUsWUFBbkIsR0FBa0MsWUFBWTtBQUMxQyxNQUFJbHdFLFFBQVEsR0FBRyxLQUFLbXRCLFNBQXBCO0FBQ0EsU0FBTyxLQUFLQyxJQUFMLENBQVU4OUMsV0FBVixDQUFzQnI4RCxHQUF0QixDQUEwQixVQUFVeEwsVUFBVixFQUFzQjtBQUNuRCxXQUFPckQsUUFBUSxDQUFDc3JFLGVBQVQsQ0FBeUJqb0UsVUFBekIsQ0FBUDtBQUNILEdBRk0sQ0FBUDtBQUdILENBTEQ7O0FBTUE2cEIsMkRBQVEsQ0FBQ3ptQixTQUFULENBQW1Cd3FFLFlBQW5CLEdBQWtDLFVBQVV0dkUsU0FBVixFQUFxQjtBQUNuRCxNQUFJdXBFLFdBQVcsR0FBRyxFQUFsQixDQURtRCxDQUVuRDs7QUFDQSxPQUFLLElBQUk1dkQsRUFBRSxHQUFHLENBQVQsRUFBWTQxRCxXQUFXLEdBQUd2dkUsU0FBL0IsRUFBMEMyWixFQUFFLEdBQUc0MUQsV0FBVyxDQUFDbnFFLE1BQTNELEVBQW1FdVUsRUFBRSxFQUFyRSxFQUF5RTtBQUNyRSxRQUFJOVksUUFBUSxHQUFHMHVFLFdBQVcsQ0FBQzUxRCxFQUFELENBQTFCO0FBQ0EsUUFBSWpZLFVBQVUsR0FBRyxJQUFqQjs7QUFDQSxRQUFJLE9BQU9iLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDOUJhLGdCQUFVLEdBQUdiLFFBQWI7QUFDSCxLQUZELE1BR0ssSUFBSSxPQUFPQSxRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ25DYSxnQkFBVSxHQUFHbVgsTUFBTSxDQUFDaFksUUFBRCxDQUFuQjtBQUNILEtBRkksTUFHQSxJQUFJQSxRQUFRLFlBQVlpdEUsV0FBeEIsRUFBcUM7QUFDdENwc0UsZ0JBQVUsR0FBR2IsUUFBUSxDQUFDQyxFQUF0QixDQURzQyxDQUNaO0FBQzdCLEtBRkksTUFHQTtBQUNENUksYUFBTyxDQUFDKzJDLElBQVIsQ0FBYSw0QkFBNEJwdUMsUUFBekM7QUFDSDs7QUFDRCxRQUFJYSxVQUFKLEVBQWdCO0FBQ1o2bkUsaUJBQVcsQ0FBQ2ppRSxJQUFaLENBQWlCNUYsVUFBakI7QUFDSDtBQUNKOztBQUNELE9BQUtxcUIsTUFBTCxDQUFZO0FBQ1JDLGlCQUFhLEVBQUU7QUFDWHU5QyxpQkFBVyxFQUFFQTtBQURGO0FBRFAsR0FBWjtBQUtILENBM0JEOztBQTZCQSxJQUFJaUcsWUFBWSxHQUFHLFlBQW5CLEMsQ0FBaUM7O0FBQ2pDLElBQUlDLGNBQWMsR0FBRyxNQUFNLENBQTNCLEMsQ0FBOEI7O0FBQzlCLElBQUlDLGdCQUFnQixHQUFHLDJDQUF2QjtBQUNBLElBQUlDLG1CQUFtQixHQUFHLENBQ3RCLCtCQURzQixFQUV0Qiw0Q0FGc0IsQ0FBMUI7QUFJQSxJQUFJQyxHQUFHLEdBQUc7QUFDTi9sRSxVQUFRLEVBQUUsVUFESjtBQUVOLGFBQVcsS0FGTDtBQUdOcEIsUUFBTSxFQUFFLEtBSEY7QUFJTnhKLE1BQUksRUFBRSxLQUpBO0FBS040d0UsWUFBVSxFQUFFLE1BTE47QUFNTixrQkFBZ0IsTUFOVjtBQU9OLGtCQUFnQixPQVBWO0FBUU4sa0JBQWdCLGFBUlY7QUFTTjlsRSxTQUFPLEVBQUUsU0FUSDtBQVVOLGVBQWEsTUFWUDtBQVdOLDZCQUEyQjtBQVhyQixDQUFWOztBQWFBLFNBQVMrbEUsb0JBQVQsQ0FBOEJsWCxXQUE5QixFQUEyQ3Y2RCxRQUEzQyxFQUFxRDtBQUNqRCxNQUFJdWMsR0FBRyxHQUFHdmMsUUFBUSxDQUFDb2pCLEdBQVQsQ0FBYSxxQkFBYixDQUFWOztBQUNBLE1BQUksQ0FBQ3N1RCxXQUFXLENBQUNybEUsTUFBTSxDQUFDMVMsUUFBUCxDQUFnQm9yRCxJQUFqQixDQUFaLElBQXNDLENBQUM0c0IsVUFBVSxDQUFDcDFELEdBQUQsQ0FBckQsRUFBNEQ7QUFDeER0Vyw4RUFBZSxDQUFDczBELFdBQUQsRUFBYyw0Q0FBNEMxaEMscUVBQVUsQ0FBQ0MsbUVBQVEsQ0FBQ3k0QyxHQUFELENBQVQsQ0FBdEQsR0FBd0UsSUFBeEUsR0FDekIsMkNBRHlCLEdBQ3FCRixnQkFEckIsR0FDd0MsaUJBRHhDLEdBRXpCLFFBRlcsQ0FBZjtBQUdIO0FBQ0o7QUFDRDs7Ozs7QUFHQSxTQUFTTSxVQUFULENBQW9CcDFELEdBQXBCLEVBQXlCO0FBQ3JCLE1BQUkrMEQsbUJBQW1CLENBQUN6bUQsT0FBcEIsQ0FBNEJ0TyxHQUE1QixNQUFxQyxDQUFDLENBQTFDLEVBQTZDO0FBQ3pDLFdBQU8sSUFBUDtBQUNIOztBQUNELE1BQUl1TixLQUFLLEdBQUcsQ0FBQ3ZOLEdBQUcsSUFBSSxFQUFSLEVBQVlxMUQsS0FBWixDQUFrQixxQkFBbEIsQ0FBWjs7QUFDQSxNQUFJOW5ELEtBQUssSUFBS0EsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTL2lCLE1BQVQsS0FBb0IsRUFBbEMsRUFBdUM7QUFDbkMsUUFBSThxRSxZQUFZLEdBQUcsSUFBSTU5RCxJQUFKLENBQVNuVixRQUFRLENBQUNnckIsS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXLEVBQVgsQ0FBUixHQUF5QixJQUFsQyxDQUFuQjtBQUNBLFFBQUlnb0QsV0FBVyxHQUFHLElBQUk3OUQsSUFBSixDQUFTKzVCLHlEQUFNLENBQUMrakMsd0JBQVAsSUFBbUNaLFlBQTVDLENBQWxCOztBQUNBLFFBQUk5OEQsc0VBQVcsQ0FBQ3k5RCxXQUFELENBQWYsRUFBOEI7QUFBRTtBQUM1QixVQUFJRSxlQUFlLEdBQUd0aEUsa0VBQU8sQ0FBQ29oRSxXQUFELEVBQWMsQ0FBQ1YsY0FBZixDQUE3Qjs7QUFDQSxVQUFJWSxlQUFlLEdBQUdILFlBQXRCLEVBQW9DO0FBQ2hDLGVBQU8sSUFBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxTQUFPLEtBQVA7QUFDSDs7QUFDRCxTQUFTSCxXQUFULENBQXFCOXZFLEdBQXJCLEVBQTBCO0FBQ3RCLFNBQU8sd0RBQXdEbEYsSUFBeEQsQ0FBNkRrRixHQUE3RCxDQUFQO0FBQ0g7O0FBRUQsSUFBSWlvQyxvQkFBb0IsR0FBRztBQUN2QmxvQyxXQUFTLEVBQUVzd0U7QUFEWSxDQUEzQjs7QUFHQSxTQUFTQSxlQUFULENBQXlCQyxjQUF6QixFQUF5Q2x5RSxRQUF6QyxFQUFtRGl0QyxTQUFuRCxFQUE4RDtBQUMxRCxNQUFJa2xDLGNBQWMsR0FBR255RSxRQUFRLENBQUM2dkIsS0FBVCxDQUFlNDlDLGNBQWYsQ0FBOEJoZ0MsSUFBbkQ7O0FBQ0EsTUFBSSxDQUFDUixTQUFTLENBQUNrbEMsY0FBRCxFQUFpQkQsY0FBakIsQ0FBZCxFQUFnRDtBQUM1Q2x5RSxZQUFRLENBQUN5c0IsUUFBVCxDQUFrQjtBQUNkcHFCLFVBQUksRUFBRSx1QkFEUTtBQUVkaXJFLHlCQUFtQixFQUFFNEU7QUFGUCxLQUFsQjtBQUlIO0FBQ0o7O0FBRURuRix5QkFBeUIsQ0FBQztBQUN0QnppQyxhQUFXLEVBQUUsSUFEUztBQUV0QkMsV0FBUyxFQUFFLFVBQVVwUixHQUFWLEVBQWU7QUFDdEIsUUFBSTN5QixLQUFLLENBQUNrVCxPQUFOLENBQWN5ZixHQUFkLENBQUosRUFBd0I7QUFDcEIsYUFBT0EsR0FBUDtBQUNILEtBRkQsTUFHSyxJQUFJM3lCLEtBQUssQ0FBQ2tULE9BQU4sQ0FBY3lmLEdBQUcsQ0FBQ3gzQixTQUFsQixDQUFKLEVBQWtDO0FBQ25DLGFBQU93M0IsR0FBRyxDQUFDeDNCLFNBQVg7QUFDSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQVZxQjtBQVd0QjZvQyxPQUFLLEVBQUUsVUFBVTFtQyxHQUFWLEVBQWVpbkMsZUFBZixFQUFnQztBQUNuQ0EsbUJBQWUsQ0FBQztBQUNaNGlDLGtCQUFZLEVBQUU3cEUsR0FBRyxDQUFDMnBFLGNBQUosQ0FBbUJ4Z0Q7QUFEckIsS0FBRCxDQUFmO0FBR0g7QUFmcUIsQ0FBRCxDQUF6QjtBQWtCQTgvQyx5QkFBeUIsQ0FBQztBQUN0QnhpQyxXQUFTLEVBQUUsVUFBVXBSLEdBQVYsRUFBZTtBQUN0QixRQUFJLE9BQU9BLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUMzQixhQUFPQSxHQUFQO0FBQ0gsS0FGRCxNQUdLLElBQUksT0FBT0EsR0FBRyxDQUFDeDNCLFNBQVgsS0FBeUIsVUFBN0IsRUFBeUM7QUFDMUMsYUFBT3czQixHQUFHLENBQUN4M0IsU0FBWDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNILEdBVHFCO0FBVXRCNm9DLE9BQUssRUFBRSxVQUFVMW1DLEdBQVYsRUFBZXBCLE9BQWYsRUFBd0JnK0IsT0FBeEIsRUFBaUM7QUFDcEMsUUFBSWhqQixPQUFPLEdBQUc1WixHQUFHLENBQUM5RCxRQUFKLENBQWEwZCxPQUEzQjtBQUNBLFFBQUk1RCxJQUFJLEdBQUdoVyxHQUFHLENBQUMycEUsY0FBSixDQUFtQnhnRCxJQUE5QjtBQUNBLFFBQUltbEQsU0FBUyxHQUFHLEVBQWhCOztBQUNBLFFBQUl0dUUsR0FBRyxDQUFDdVosS0FBUixFQUFlO0FBQ1grMEQsZUFBUyxHQUFHO0FBQ1I3dUUsYUFBSyxFQUFFbWEsT0FBTyxDQUFDcVMsTUFBUixDQUFlanNCLEdBQUcsQ0FBQ3VaLEtBQUosQ0FBVTlaLEtBQXpCLENBREM7QUFFUkMsV0FBRyxFQUFFa2EsT0FBTyxDQUFDcVMsTUFBUixDQUFlanNCLEdBQUcsQ0FBQ3VaLEtBQUosQ0FBVTdaLEdBQXpCLENBRkc7QUFHUlMsZ0JBQVEsRUFBRXlaLE9BQU8sQ0FBQ21pQixTQUFSLENBQWtCLzdCLEdBQUcsQ0FBQ3VaLEtBQUosQ0FBVTlaLEtBQTVCLENBSEY7QUFJUlcsY0FBTSxFQUFFd1osT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0IvN0IsR0FBRyxDQUFDdVosS0FBSixDQUFVN1osR0FBNUIsQ0FKQTtBQUtSTCxnQkFBUSxFQUFFdWEsT0FBTyxDQUFDdmE7QUFMVixPQUFaO0FBT0gsS0FabUMsQ0FhcEM7QUFDQTs7O0FBQ0FzOUIsMEVBQVcsQ0FBQzNtQixJQUFJLENBQUM2d0IsSUFBTCxDQUFVLElBQVYsRUFBZ0J5bkMsU0FBaEIsQ0FBRCxFQUE2QixVQUFVekUsWUFBVixFQUF3QjtBQUM1RGpyRSxhQUFPLENBQUM7QUFBRWlyRSxvQkFBWSxFQUFFQTtBQUFoQixPQUFELENBQVAsQ0FENEQsQ0FDbkI7QUFDNUMsS0FGVSxFQUVSanRDLE9BRlEsQ0FFQTtBQUZBLEtBQVg7QUFJSDtBQTdCcUIsQ0FBRCxDQUF6QjtBQWdDQXFzQyx5QkFBeUIsQ0FBQztBQUN0QnhpQyxXQUFTLEVBQUUsVUFBVXBSLEdBQVYsRUFBZTtBQUN0QixRQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUN6QkEsU0FBRyxHQUFHO0FBQUV2M0IsV0FBRyxFQUFFdTNCO0FBQVAsT0FBTjtBQUNILEtBRkQsTUFHSyxJQUFJLENBQUNBLEdBQUQsSUFBUSxPQUFPQSxHQUFQLEtBQWUsUUFBdkIsSUFBbUMsQ0FBQ0EsR0FBRyxDQUFDdjNCLEdBQTVDLEVBQWlEO0FBQ2xELGFBQU8sSUFBUDtBQUNIOztBQUNELFdBQU87QUFDSEEsU0FBRyxFQUFFdTNCLEdBQUcsQ0FBQ3YzQixHQUROO0FBRUhHLFlBQU0sRUFBRSxDQUFDbzNCLEdBQUcsQ0FBQ3AzQixNQUFKLElBQWMsS0FBZixFQUFzQjZZLFdBQXRCLEVBRkw7QUFHSGd4QixpQkFBVyxFQUFFelMsR0FBRyxDQUFDeVM7QUFIZCxLQUFQO0FBS0gsR0FicUI7QUFjdEJwQixPQUFLLEVBQUUsVUFBVTFtQyxHQUFWLEVBQWVpbkMsZUFBZixFQUFnQ0MsZUFBaEMsRUFBaUQ7QUFDcEQsUUFBSS9kLElBQUksR0FBR25wQixHQUFHLENBQUMycEUsY0FBSixDQUFtQnhnRCxJQUE5QjtBQUNBLFFBQUkrZSxhQUFhLEdBQUdDLGtCQUFrQixDQUFDaGYsSUFBRCxFQUFPbnBCLEdBQUcsQ0FBQ3VaLEtBQVgsRUFBa0J2WixHQUFHLENBQUM5RCxRQUF0QixDQUF0QztBQUNBNnFDLDBFQUFXLENBQUM1ZCxJQUFJLENBQUNsckIsTUFBTixFQUFja3JCLElBQUksQ0FBQ3JyQixHQUFuQixFQUF3Qm9xQyxhQUF4QixFQUF1QyxVQUFVMmhDLFlBQVYsRUFBd0IzcUUsR0FBeEIsRUFBNkI7QUFDM0UrbkMscUJBQWUsQ0FBQztBQUFFNGlDLG9CQUFZLEVBQUVBLFlBQWhCO0FBQThCM3FFLFdBQUcsRUFBRUE7QUFBbkMsT0FBRCxDQUFmO0FBQ0gsS0FGVSxFQUVSLFVBQVUxRCxPQUFWLEVBQW1CMEQsR0FBbkIsRUFBd0I7QUFDdkJnb0MscUJBQWUsQ0FBQztBQUFFMXJDLGVBQU8sRUFBRUEsT0FBWDtBQUFvQjBELFdBQUcsRUFBRUE7QUFBekIsT0FBRCxDQUFmO0FBQ0gsS0FKVSxDQUFYO0FBS0g7QUF0QnFCLENBQUQsQ0FBekIsQyxDQXdCQTs7QUFDQSxTQUFTaXBDLGtCQUFULENBQTRCaGYsSUFBNUIsRUFBa0M1UCxLQUFsQyxFQUF5Q3JkLFFBQXpDLEVBQW1EO0FBQy9DLE1BQUkwZCxPQUFPLEdBQUcxZCxRQUFRLENBQUMwZCxPQUF2QjtBQUNBLE1BQUltdUIsVUFBSjtBQUNBLE1BQUlDLFFBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSUssbUJBQUo7QUFDQSxNQUFJdEIsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsTUFBSXp0QixLQUFKLEVBQVc7QUFDUDtBQUNBO0FBQ0F3dUIsY0FBVSxHQUFHN3JDLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsWUFBYixDQUFiLENBSE8sQ0FJUDtBQUNBO0FBQ0E7O0FBQ0Ewb0IsWUFBUSxHQUFHOXJDLFFBQVEsQ0FBQ29qQixHQUFULENBQWEsVUFBYixDQUFYLENBUE8sQ0FRUDtBQUNBO0FBQ0E7O0FBQ0Eyb0IsaUJBQWEsR0FBRy9yQyxRQUFRLENBQUNvakIsR0FBVCxDQUFhLGVBQWIsQ0FBaEIsQ0FYTyxDQVlQOztBQUNBMG5CLFVBQU0sQ0FBQ2UsVUFBRCxDQUFOLEdBQXFCbnVCLE9BQU8sQ0FBQ21pQixTQUFSLENBQWtCeGlCLEtBQUssQ0FBQzlaLEtBQXhCLENBQXJCO0FBQ0F1bkMsVUFBTSxDQUFDZ0IsUUFBRCxDQUFOLEdBQW1CcHVCLE9BQU8sQ0FBQ21pQixTQUFSLENBQWtCeGlCLEtBQUssQ0FBQzdaLEdBQXhCLENBQW5COztBQUNBLFFBQUlrYSxPQUFPLENBQUN2YSxRQUFSLEtBQXFCLE9BQXpCLEVBQWtDO0FBQzlCMm5DLFlBQU0sQ0FBQ2lCLGFBQUQsQ0FBTixHQUF3QnJ1QixPQUFPLENBQUN2YSxRQUFoQztBQUNIO0FBQ0osR0F6QjhDLENBMEIvQzs7O0FBQ0EsTUFBSSxPQUFPOHBCLElBQUksQ0FBQzJlLFdBQVosS0FBNEIsVUFBaEMsRUFBNEM7QUFDeEM7QUFDQVEsdUJBQW1CLEdBQUduZixJQUFJLENBQUMyZSxXQUFMLEVBQXRCO0FBQ0gsR0FIRCxNQUlLO0FBQ0Q7QUFDQVEsdUJBQW1CLEdBQUduZixJQUFJLENBQUMyZSxXQUFMLElBQW9CLEVBQTFDO0FBQ0g7O0FBQ0RydEIsVUFBUSxDQUFDdXNCLE1BQUQsRUFBU3NCLG1CQUFULENBQVI7O0FBQ0EsU0FBT3RCLE1BQVA7QUFDSDs7QUFFRCxTQUFTdW5DLHFCQUFULENBQStCQyxtQkFBL0IsRUFBb0R0eUUsUUFBcEQsRUFBOEQ7QUFDMUQsTUFBSSxPQUFPc3lFLG1CQUFQLEtBQStCLFVBQW5DLEVBQStDO0FBQzNDLFdBQU8sVUFBVTl2RSxRQUFWLEVBQW9CO0FBQ3ZCLGFBQU84dkUsbUJBQW1CLENBQUMsSUFBSTdDLFdBQUosQ0FBZ0J6dkUsUUFBaEIsRUFBMEJ3QyxRQUExQixDQUFELENBQTFCO0FBQ0gsS0FGRDtBQUdILEdBSkQsTUFLSztBQUNELFdBQU8sVUFBVUEsUUFBVixFQUFvQjtBQUN2QixhQUFPQSxRQUFRLENBQUNjLEtBQVQsSUFBa0IycUUsV0FBVyxDQUFDenJFLFFBQVEsQ0FBQ0MsRUFBVixDQUFwQztBQUNILEtBRkQ7QUFHSDtBQUNKOztBQUVELElBQUk4dkUsaUJBQWlCO0FBQUc7QUFBZSxVQUFVaHhDLE1BQVYsRUFBa0I7QUFDckRuakIsV0FBUyxDQUFDbTBELGlCQUFELEVBQW9CaHhDLE1BQXBCLENBQVQ7O0FBQ0EsV0FBU2d4QyxpQkFBVCxDQUEyQjMyRCxPQUEzQixFQUFvQ3FvQyxRQUFwQyxFQUE4QztBQUMxQyxRQUFJeG1CLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEtBQThCLElBQTFDOztBQUNBNmhCLFNBQUssQ0FBQyswQyxtQkFBTixHQUE0Qi8wQyxLQUFLLENBQUNyYSxHQUFOLENBQVUscUJBQVYsQ0FBNUI7QUFDQXFhLFNBQUssQ0FBQ2cxQyxnQkFBTixHQUF5QkoscUJBQXFCLENBQUM1MEMsS0FBSyxDQUFDcmEsR0FBTixDQUFVLGNBQVYsQ0FBRCxFQUE0QnFhLEtBQUssQ0FBQ3o5QixRQUFsQyxDQUE5QztBQUNBaWtELFlBQVEsQ0FBQ2orQyxTQUFULEdBQXFCLEVBQXJCLENBSjBDLENBSWpCOztBQUN6QmkrQyxZQUFRLENBQUNqOUMsV0FBVCxDQUFxQnkyQixLQUFLLENBQUN2N0IsRUFBTixHQUFXZ0Usd0VBQWEsQ0FBQyx3QkFBd0J1M0IsS0FBSyxDQUFDeUMsS0FBTixDQUFZTSxRQUFaLENBQXFCLFdBQXJCLENBQXhCLEdBQTRELElBQTVELEdBQzFDLGdCQUQwQyxHQUN2Qi9DLEtBQUssQ0FBQ3lDLEtBQU4sQ0FBWU0sUUFBWixDQUFxQixXQUFyQixDQUR1QixHQUNhLElBRGIsR0FFMUMsaUJBRjBDLEdBRzFDLFVBSDBDLEdBSTFDLFFBSnlDLENBQTdDO0FBS0EvQyxTQUFLLENBQUM2NEIsS0FBTixHQUFjNzRCLEtBQUssQ0FBQ3Y3QixFQUFOLENBQVM0aUQsYUFBVCxDQUF1QixPQUF2QixDQUFkO0FBQ0EsV0FBT3JuQixLQUFQO0FBQ0g7O0FBQ0Q4MEMsbUJBQWlCLENBQUM5ckUsU0FBbEIsQ0FBNEJ5K0IsT0FBNUIsR0FBc0MsWUFBWTtBQUM5Q3Y5Qiw0RUFBYSxDQUFDLEtBQUt6RixFQUFOLENBQWI7QUFDSCxHQUZEOztBQUdBcXdFLG1CQUFpQixDQUFDOXJFLFNBQWxCLENBQTRCcEMsTUFBNUIsR0FBcUMsVUFBVXNGLEtBQVYsRUFBaUI7QUFDbEQsUUFBSXhELElBQUo7QUFDQSxTQUFLdXNFLFVBQUwsR0FBa0JqbkQsMEVBQWUsQ0FBQyxLQUFLckksR0FBTCxDQUFTLG9CQUFULEtBQzlCdXlDLHNGQUEyQixDQUFDaHNELEtBQUssQ0FBQ2lzRCxvQkFBUCxFQUE2QmpzRCxLQUFLLENBQUM0c0QsS0FBTixDQUFZeHZELE1BQXpDLENBREUsQ0FBakM7O0FBRUEsUUFBSTRDLEtBQUssQ0FBQzRzRCxLQUFOLENBQVl4dkQsTUFBWixLQUF1QixDQUEzQixFQUE4QjtBQUMxQlosVUFBSSxHQUFHLEtBQUt3c0UsaUJBQUwsQ0FBdUJocEUsS0FBSyxDQUFDaEksU0FBN0IsQ0FBUDtBQUNILEtBRkQsTUFHSztBQUNELFVBQUksS0FBSzZ3RSxtQkFBVCxFQUE4QjtBQUMxQnJzRSxZQUFJLEdBQUcsS0FBS3lzRSx3QkFBTCxDQUE4QmpwRSxLQUFLLENBQUM0c0QsS0FBcEMsRUFBMkM1c0QsS0FBSyxDQUFDaEksU0FBakQsQ0FBUDtBQUNILE9BRkQsTUFHSztBQUNEd0UsWUFBSSxHQUFHLEtBQUswc0Usd0JBQUwsQ0FBOEJscEUsS0FBSyxDQUFDaEksU0FBcEMsRUFBK0NnSSxLQUFLLENBQUM0c0QsS0FBckQsQ0FBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBS0QsS0FBTCxDQUFXdHdELFNBQVgsR0FBdUJHLElBQXZCO0FBQ0EsU0FBSzJzRSxrQkFBTCxDQUF3Qm5wRSxLQUFLLENBQUNoSSxTQUE5QjtBQUNILEdBakJEOztBQWtCQTR3RSxtQkFBaUIsQ0FBQzlyRSxTQUFsQixDQUE0QmtzRSxpQkFBNUIsR0FBZ0QsVUFBVWh4RSxTQUFWLEVBQXFCO0FBQ2pFLFFBQUk4N0IsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSXMxQyxTQUFTLEdBQUdweEUsU0FBUyxDQUFDa04sR0FBVixDQUFjLFVBQVVyTSxRQUFWLEVBQW9CO0FBQzlDLGFBQU9pN0IsS0FBSyxDQUFDdTFDLGtCQUFOLENBQXlCeHdFLFFBQXpCLEVBQW1DLENBQW5DLENBQVA7QUFDSCxLQUZlLENBQWhCO0FBR0EsV0FBTyxLQUFLeXdFLE9BQUwsQ0FBYUYsU0FBYixDQUFQO0FBQ0gsR0FORDs7QUFPQVIsbUJBQWlCLENBQUM5ckUsU0FBbEIsQ0FBNEJtc0Usd0JBQTVCLEdBQXVELFVBQVVyYyxLQUFWLEVBQWlCNTBELFNBQWpCLEVBQTRCO0FBQy9FLFFBQUl1eEUsU0FBUyxHQUFHLEVBQWhCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHLEVBQXBCOztBQUNBLFNBQUssSUFBSTczRCxFQUFFLEdBQUcsQ0FBVCxFQUFZbTdDLE9BQU8sR0FBR0YsS0FBM0IsRUFBa0NqN0MsRUFBRSxHQUFHbTdDLE9BQU8sQ0FBQzF2RCxNQUEvQyxFQUF1RHVVLEVBQUUsRUFBekQsRUFBNkQ7QUFDekQsVUFBSWxYLElBQUksR0FBR3F5RCxPQUFPLENBQUNuN0MsRUFBRCxDQUFsQjtBQUNBNDNELGVBQVMsQ0FBQ2pxRSxJQUFWLENBQWUsS0FBSzRzRCxjQUFMLENBQW9CenhELElBQXBCLEVBQTBCekMsU0FBUyxDQUFDb0YsTUFBcEMsQ0FBZjs7QUFDQSxXQUFLLElBQUkyTixFQUFFLEdBQUcsQ0FBVCxFQUFZdzhELFdBQVcsR0FBR3Z2RSxTQUEvQixFQUEwQytTLEVBQUUsR0FBR3c4RCxXQUFXLENBQUNucUUsTUFBM0QsRUFBbUUyTixFQUFFLEVBQXJFLEVBQXlFO0FBQ3JFLFlBQUlsUyxRQUFRLEdBQUcwdUUsV0FBVyxDQUFDeDhELEVBQUQsQ0FBMUI7QUFDQXkrRCxxQkFBYSxDQUFDbHFFLElBQWQsQ0FBbUIsS0FBSytwRSxrQkFBTCxDQUF3Qnh3RSxRQUF4QixFQUFrQyxDQUFsQyxFQUFxQzRCLElBQXJDLENBQW5CO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQUs2dUUsT0FBTCxDQUFhQyxTQUFiLElBQ0gsS0FBS0QsT0FBTCxDQUFhRSxhQUFiLENBREo7QUFFSCxHQWJEOztBQWNBWixtQkFBaUIsQ0FBQzlyRSxTQUFsQixDQUE0Qm9zRSx3QkFBNUIsR0FBdUQsVUFBVWx4RSxTQUFWLEVBQXFCNDBELEtBQXJCLEVBQTRCO0FBQy9FLFFBQUk0YyxhQUFhLEdBQUcsRUFBcEI7QUFDQSxRQUFJRCxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsU0FBSyxJQUFJNTNELEVBQUUsR0FBRyxDQUFULEVBQVk4M0QsV0FBVyxHQUFHenhFLFNBQS9CLEVBQTBDMlosRUFBRSxHQUFHODNELFdBQVcsQ0FBQ3JzRSxNQUEzRCxFQUFtRXVVLEVBQUUsRUFBckUsRUFBeUU7QUFDckUsVUFBSTlZLFFBQVEsR0FBRzR3RSxXQUFXLENBQUM5M0QsRUFBRCxDQUExQjtBQUNBNjNELG1CQUFhLENBQUNscUUsSUFBZCxDQUFtQixLQUFLK3BFLGtCQUFMLENBQXdCeHdFLFFBQXhCLEVBQWtDK3pELEtBQUssQ0FBQ3h2RCxNQUF4QyxDQUFuQjs7QUFDQSxXQUFLLElBQUkyTixFQUFFLEdBQUcsQ0FBVCxFQUFZMitELE9BQU8sR0FBRzljLEtBQTNCLEVBQWtDN2hELEVBQUUsR0FBRzIrRCxPQUFPLENBQUN0c0UsTUFBL0MsRUFBdUQyTixFQUFFLEVBQXpELEVBQTZEO0FBQ3pELFlBQUl0USxJQUFJLEdBQUdpdkUsT0FBTyxDQUFDMytELEVBQUQsQ0FBbEI7QUFDQXcrRCxpQkFBUyxDQUFDanFFLElBQVYsQ0FBZSxLQUFLNHNELGNBQUwsQ0FBb0J6eEQsSUFBcEIsRUFBMEIsQ0FBMUIsRUFBNkI1QixRQUE3QixDQUFmO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLEtBQUt5d0UsT0FBTCxDQUFhRSxhQUFiLElBQ0gsS0FBS0YsT0FBTCxDQUFhQyxTQUFiLENBREo7QUFFSCxHQWJELENBekRxRCxDQXVFckQ7QUFDQTtBQUNBOzs7QUFDQVgsbUJBQWlCLENBQUM5ckUsU0FBbEIsQ0FBNEJ1c0Usa0JBQTVCLEdBQWlELFVBQVV4d0UsUUFBVixFQUFvQnd6RCxPQUFwQixFQUE2QjV4RCxJQUE3QixFQUFtQztBQUNoRixRQUFJc1osT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsV0FBTyxpQ0FDSCxxQkFERyxHQUNxQmxiLFFBQVEsQ0FBQ0MsRUFEOUIsR0FDbUMsR0FEbkMsSUFFRjJCLElBQUksR0FDRCxpQkFBaUJzWixPQUFPLENBQUNtaUIsU0FBUixDQUFrQno3QixJQUFsQixFQUF3QjtBQUFFMDdCLGNBQVEsRUFBRTtBQUFaLEtBQXhCLENBQWpCLEdBQStELEdBRDlELEdBRUQsRUFKRCxLQUtGazJCLE9BQU8sR0FBRyxDQUFWLEdBQ0csZUFBZUEsT0FBZixHQUF5QixHQUQ1QixHQUVHLEVBUEQsSUFRSCxHQVJHLEdBU0huOUIscUVBQVUsQ0FBQyxLQUFLNDVDLGdCQUFMLENBQXNCandFLFFBQXRCLENBQUQsQ0FUUCxHQVVILE9BVko7QUFXSCxHQWJELENBMUVxRCxDQXdGckQ7OztBQUNBK3ZFLG1CQUFpQixDQUFDOXJFLFNBQWxCLENBQTRCb3ZELGNBQTVCLEdBQTZDLFVBQVV6eEQsSUFBVixFQUFnQjR4RCxPQUFoQixFQUF5Qnh6RCxRQUF6QixFQUFtQztBQUM1RSxRQUFJbUgsS0FBSyxHQUFHLEtBQUtBLEtBQWpCO0FBQ0EsV0FBT2tzRCx5RUFBYyxDQUFDenhELElBQUQsRUFBT3VGLEtBQUssQ0FBQ2txQixXQUFiLEVBQTBCbHFCLEtBQUssQ0FBQ2lzRCxvQkFBaEMsRUFBc0Rqc0QsS0FBSyxDQUFDNHNELEtBQU4sQ0FBWXh2RCxNQUFaLEdBQXFCNEMsS0FBSyxDQUFDaEksU0FBTixDQUFnQm9GLE1BQTNGLEVBQW1HLEtBQUsyckUsVUFBeEcsRUFBb0gsS0FBSzkyRCxPQUF6SCxFQUFrSW82QyxPQUFsSSxFQUEySXh6RCxRQUFRLEdBQUcsdUJBQXVCQSxRQUFRLENBQUNDLEVBQWhDLEdBQXFDLEdBQXhDLEdBQThDLEVBQWpNLENBQXJCO0FBQ0gsR0FIRDs7QUFJQTh2RSxtQkFBaUIsQ0FBQzlyRSxTQUFsQixDQUE0QndzRSxPQUE1QixHQUFzQyxVQUFVRixTQUFWLEVBQXFCO0FBQ3ZELFFBQUksQ0FBQ0EsU0FBUyxDQUFDaHNFLE1BQWYsRUFBdUI7QUFDbkJnc0UsZUFBUyxHQUFHLENBQUMsaUJBQUQsQ0FBWjtBQUNIOztBQUNELFFBQUksS0FBS3BwRSxLQUFMLENBQVc2c0QsZUFBZixFQUFnQztBQUM1QnVjLGVBQVMsR0FBRyxDQUFDLEtBQUtwcEUsS0FBTCxDQUFXNnNELGVBQVgsRUFBRCxFQUErQjFuRCxNQUEvQixDQUFzQ2lrRSxTQUF0QyxDQUFaO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLOW9ELEtBQVQsRUFBZ0I7QUFDWjhvRCxlQUFTLENBQUM3b0QsT0FBVjtBQUNIOztBQUNELFdBQU8sU0FDSDZvRCxTQUFTLENBQUM1b0QsSUFBVixDQUFlLEVBQWYsQ0FERyxHQUVILE9BRko7QUFHSCxHQWJELENBN0ZxRCxDQTJHckQ7QUFDQTtBQUNBOzs7QUFDQW9vRCxtQkFBaUIsQ0FBQzlyRSxTQUFsQixDQUE0QnFzRSxrQkFBNUIsR0FBaUQsVUFBVW54RSxTQUFWLEVBQXFCO0FBQ2xFLFFBQUk4N0IsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSTlMLElBQUksR0FBRyxLQUFLQSxJQUFoQjtBQUNBaHBCLDJFQUFZLENBQUMsS0FBSzJ0RCxLQUFOLEVBQWEsbUJBQWIsQ0FBWixDQUE4Q3JtRCxPQUE5QyxDQUFzRCxVQUFVbXpELElBQVYsRUFBZ0JwTCxHQUFoQixFQUFxQjtBQUN2RUEsU0FBRyxHQUFHQSxHQUFHLEdBQUdyMkQsU0FBUyxDQUFDb0YsTUFBdEI7O0FBQ0EsVUFBSTAyQixLQUFLLENBQUN4VCxLQUFWLEVBQWlCO0FBQ2IrdEMsV0FBRyxHQUFHcjJELFNBQVMsQ0FBQ29GLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUJpeEQsR0FBN0I7QUFDSDs7QUFDRCxVQUFJeDFELFFBQVEsR0FBR2IsU0FBUyxDQUFDcTJELEdBQUQsQ0FBeEI7QUFDQXJtQyxVQUFJLENBQUNPLGVBQUwsQ0FBcUIsZ0JBQXJCLEVBQXVDLENBQ25DO0FBQ0kxdkIsZ0JBQVEsRUFBRSxJQUFJaXRFLFdBQUosQ0FBZ0JoeUMsS0FBSyxDQUFDejlCLFFBQXRCLEVBQWdDd0MsUUFBaEMsQ0FEZDtBQUVJTixVQUFFLEVBQUVraEUsSUFGUjtBQUdJenhDLFlBQUksRUFBRUE7QUFIVixPQURtQyxDQUF2QztBQU9ILEtBYkQ7QUFjSCxHQWpCRDs7QUFrQkEsU0FBTzRnRCxpQkFBUDtBQUNILENBaklzQyxDQWlJckNqc0MsNERBaklxQyxDQUF2Qzs7QUFtSUEsSUFBSWd0Qyx3QkFBd0I7QUFBRztBQUFlLFlBQVk7QUFDdEQsV0FBU0Esd0JBQVQsQ0FBa0NDLFFBQWxDLEVBQTRDNXhFLFNBQTVDLEVBQXVEO0FBQ25ELFNBQUs0eEUsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLNXhFLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBSzZ4RSxhQUFMLEdBQXFCLElBQUlDLGFBQUosQ0FBa0I5eEUsU0FBbEIsQ0FBckI7QUFDQSxTQUFLODFELE1BQUwsR0FBYzhiLFFBQVEsQ0FBQzliLE1BQXZCO0FBQ0EsU0FBSzNCLE1BQUwsR0FBY3lkLFFBQVEsQ0FBQ3pkLE1BQVQsR0FBa0JuMEQsU0FBUyxDQUFDb0YsTUFBMUM7QUFDQSxTQUFLMndELEtBQUwsR0FBYSxLQUFLQyxVQUFMLEVBQWI7QUFDSDs7QUFDRDJiLDBCQUF3QixDQUFDN3NFLFNBQXpCLENBQW1Da3hELFVBQW5DLEdBQWdELFlBQVk7QUFDeEQsUUFBSWpqRCxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWUraUQsTUFBTSxHQUFHL2lELEVBQUUsQ0FBQytpRCxNQUEzQjtBQUFBLFFBQW1DOGIsUUFBUSxHQUFHNytELEVBQUUsQ0FBQzYrRCxRQUFqRDtBQUFBLFFBQTJENXhFLFNBQVMsR0FBRytTLEVBQUUsQ0FBQy9TLFNBQTFFOztBQUNBLFFBQUltMkQsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJQyxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHTixNQUF4QixFQUFnQ00sR0FBRyxFQUFuQyxFQUF1QztBQUNuQyxVQUFJMmIsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsV0FBSyxJQUFJQyxPQUFPLEdBQUcsQ0FBbkIsRUFBc0JBLE9BQU8sR0FBR0osUUFBUSxDQUFDemQsTUFBekMsRUFBaUQ2ZCxPQUFPLEVBQXhELEVBQTREO0FBQ3hELGFBQUssSUFBSUMsV0FBVyxHQUFHLENBQXZCLEVBQTBCQSxXQUFXLEdBQUdqeUUsU0FBUyxDQUFDb0YsTUFBbEQsRUFBMEQ2c0UsV0FBVyxFQUFyRSxFQUF5RTtBQUNyRSxjQUFJcHhFLFFBQVEsR0FBR2IsU0FBUyxDQUFDaXlFLFdBQUQsQ0FBeEI7QUFDQSxjQUFJQyxTQUFTLEdBQUcsdUJBQXVCcnhFLFFBQVEsQ0FBQ0MsRUFBaEMsR0FBcUMsR0FBckQ7QUFDQWl4RSxrQkFBUSxDQUFDLEtBQUtJLFVBQUwsQ0FBZ0JILE9BQWhCLEVBQXlCQyxXQUF6QixDQUFELENBQVIsR0FBa0Q7QUFDOUN4dkUsZ0JBQUksRUFBRW12RSxRQUFRLENBQUM3YixLQUFULENBQWVLLEdBQWYsRUFBb0I0YixPQUFwQixFQUE2QnZ2RSxJQURXO0FBRTlDNUIsb0JBQVEsRUFBRUEsUUFGb0M7QUFHOUNxeEUscUJBQVMsRUFBRUE7QUFIbUMsV0FBbEQ7QUFLSDtBQUNKOztBQUNEL2IsVUFBSSxDQUFDN3VELElBQUwsQ0FBVXlxRSxRQUFWO0FBQ0g7O0FBQ0QsV0FBTzViLElBQVA7QUFDSCxHQW5CRDs7QUFvQkEsU0FBT3diLHdCQUFQO0FBQ0gsQ0E5QjZDLEVBQTlDO0FBK0JBOzs7OztBQUdBLElBQUlTLGdCQUFnQjtBQUFHO0FBQWUsVUFBVXh5QyxNQUFWLEVBQWtCO0FBQ3BEbmpCLFdBQVMsQ0FBQzIxRCxnQkFBRCxFQUFtQnh5QyxNQUFuQixDQUFUOztBQUNBLFdBQVN3eUMsZ0JBQVQsR0FBNEI7QUFDeEIsV0FBT3h5QyxNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDbnRCLEtBQVAsQ0FBYSxJQUFiLEVBQW1CbUgsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRHc0RCxrQkFBZ0IsQ0FBQ3R0RSxTQUFqQixDQUEyQnF0RSxVQUEzQixHQUF3QyxVQUFVRSxLQUFWLEVBQWlCQyxTQUFqQixFQUE0QjtBQUNoRSxXQUFPQSxTQUFTLEdBQUcsS0FBS1YsUUFBTCxDQUFjemQsTUFBMUIsR0FBbUNrZSxLQUExQztBQUNILEdBRkQ7QUFHQTs7Ozs7QUFHQUQsa0JBQWdCLENBQUN0dEUsU0FBakIsQ0FBMkJ5dEUsZ0JBQTNCLEdBQThDLFVBQVVDLFVBQVYsRUFBc0JDLFFBQXRCLEVBQWdDSCxTQUFoQyxFQUEyQztBQUNyRixXQUFPLENBQ0g7QUFDSTViLGNBQVEsRUFBRSxLQUFLeWIsVUFBTCxDQUFnQkssVUFBaEIsRUFBNEJGLFNBQTVCLENBRGQ7QUFFSTNiLGFBQU8sRUFBRSxLQUFLd2IsVUFBTCxDQUFnQk0sUUFBaEIsRUFBMEJILFNBQTFCLENBRmI7QUFHSS9pRCxhQUFPLEVBQUUsSUFIYjtBQUlJQyxXQUFLLEVBQUU7QUFKWCxLQURHLENBQVA7QUFRSCxHQVREOztBQVVBLFNBQU80aUQsZ0JBQVA7QUFDSCxDQXRCcUMsQ0FzQnBDVCx3QkF0Qm9DLENBQXRDO0FBdUJBOzs7OztBQUdBLElBQUllLGdCQUFnQjtBQUFHO0FBQWUsVUFBVTl5QyxNQUFWLEVBQWtCO0FBQ3BEbmpCLFdBQVMsQ0FBQ2kyRCxnQkFBRCxFQUFtQjl5QyxNQUFuQixDQUFUOztBQUNBLFdBQVM4eUMsZ0JBQVQsR0FBNEI7QUFDeEIsV0FBTzl5QyxNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDbnRCLEtBQVAsQ0FBYSxJQUFiLEVBQW1CbUgsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRDg0RCxrQkFBZ0IsQ0FBQzV0RSxTQUFqQixDQUEyQnF0RSxVQUEzQixHQUF3QyxVQUFVRSxLQUFWLEVBQWlCQyxTQUFqQixFQUE0QjtBQUNoRSxXQUFPRCxLQUFLLEdBQUcsS0FBS3J5RSxTQUFMLENBQWVvRixNQUF2QixHQUFnQ2t0RSxTQUF2QztBQUNILEdBRkQ7QUFHQTs7Ozs7QUFHQUksa0JBQWdCLENBQUM1dEUsU0FBakIsQ0FBMkJ5dEUsZ0JBQTNCLEdBQThDLFVBQVVDLFVBQVYsRUFBc0JDLFFBQXRCLEVBQWdDSCxTQUFoQyxFQUEyQztBQUNyRixRQUFJcmlELElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSTlzQixDQUFDLEdBQUdxdkUsVUFBYixFQUF5QnJ2RSxDQUFDLElBQUlzdkUsUUFBOUIsRUFBd0N0dkUsQ0FBQyxFQUF6QyxFQUE2QztBQUN6QyxVQUFJa3pELEdBQUcsR0FBRyxLQUFLOGIsVUFBTCxDQUFnQmh2RSxDQUFoQixFQUFtQm12RSxTQUFuQixDQUFWO0FBQ0FyaUQsVUFBSSxDQUFDM29CLElBQUwsQ0FBVTtBQUNOb3ZELGdCQUFRLEVBQUVMLEdBREo7QUFFTk0sZUFBTyxFQUFFTixHQUZIO0FBR045bUMsZUFBTyxFQUFFcHNCLENBQUMsS0FBS3F2RSxVQUhUO0FBSU5oakQsYUFBSyxFQUFFcnNCLENBQUMsS0FBS3N2RTtBQUpQLE9BQVY7QUFNSDs7QUFDRCxXQUFPeGlELElBQVA7QUFDSCxHQVpEOztBQWFBLFNBQU95aUQsZ0JBQVA7QUFDSCxDQXpCcUMsQ0F5QnBDZix3QkF6Qm9DLENBQXRDOztBQTBCQSxJQUFJRyxhQUFhO0FBQUc7QUFBZSxZQUFZO0FBQzNDLFdBQVNBLGFBQVQsQ0FBdUI5eEUsU0FBdkIsRUFBa0M7QUFDOUIsUUFBSTJ5RSxXQUFXLEdBQUcsRUFBbEI7QUFDQSxRQUFJQyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxTQUFLLElBQUl6dkUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR25ELFNBQVMsQ0FBQ29GLE1BQTlCLEVBQXNDakMsQ0FBQyxFQUF2QyxFQUEyQztBQUN2QyxVQUFJckMsRUFBRSxHQUFHZCxTQUFTLENBQUNtRCxDQUFELENBQVQsQ0FBYXJDLEVBQXRCO0FBQ0E4eEUsU0FBRyxDQUFDdHJFLElBQUosQ0FBU3hHLEVBQVQ7QUFDQTZ4RSxpQkFBVyxDQUFDN3hFLEVBQUQsQ0FBWCxHQUFrQnFDLENBQWxCO0FBQ0g7O0FBQ0QsU0FBS3l2RSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLRCxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFNBQUt2dEUsTUFBTCxHQUFjcEYsU0FBUyxDQUFDb0YsTUFBeEI7QUFDSDs7QUFDRCxTQUFPMHNFLGFBQVA7QUFDSCxDQWRrQyxFQUFuQztBQWVBOzs7OztBQUdBLElBQUllLGlCQUFpQjtBQUFHO0FBQWUsVUFBVWp6QyxNQUFWLEVBQWtCO0FBQ3JEbmpCLFdBQVMsQ0FBQ28yRCxpQkFBRCxFQUFvQmp6QyxNQUFwQixDQUFUOztBQUNBLFdBQVNpekMsaUJBQVQsR0FBNkI7QUFDekIsV0FBT2p6QyxNQUFNLEtBQUssSUFBWCxJQUFtQkEsTUFBTSxDQUFDbnRCLEtBQVAsQ0FBYSxJQUFiLEVBQW1CbUgsU0FBbkIsQ0FBbkIsSUFBb0QsSUFBM0Q7QUFDSDs7QUFDRGk1RCxtQkFBaUIsQ0FBQy90RSxTQUFsQixDQUE0QmszQixVQUE1QixHQUF5QyxVQUFVaDBCLEtBQVYsRUFBaUI7QUFDdEQsUUFBSThxRSxnQkFBZ0IsR0FBRzlxRSxLQUFLLENBQUM4cUUsZ0JBQTdCO0FBQ0EsUUFBSW4wRCxJQUFJLEdBQUdFLGtFQUFPLENBQUNpMEQsZ0JBQWdCLENBQUNqQixhQUFqQixDQUErQmMsV0FBaEMsRUFBNkMsVUFBVXh2RSxDQUFWLEVBQWE7QUFDeEUsYUFBTzJ2RSxnQkFBZ0IsQ0FBQzl5RSxTQUFqQixDQUEyQm1ELENBQTNCLENBQVAsQ0FEd0UsQ0FDbEM7QUFDekMsS0FGaUIsQ0FBbEIsQ0FGc0QsQ0FJbEQ7O0FBQ0p3YixRQUFJLENBQUMsRUFBRCxDQUFKLEdBQVcsRUFBWDtBQUNBLFdBQU9BLElBQVA7QUFDSCxHQVBEOztBQVFBazBELG1CQUFpQixDQUFDL3RFLFNBQWxCLENBQTRCODNCLGtCQUE1QixHQUFpRCxVQUFVRixRQUFWLEVBQW9CO0FBQ2pFLFdBQU8sQ0FBQ0EsUUFBUSxDQUFDaDdCLFVBQVQsSUFBdUIsRUFBeEIsQ0FBUDtBQUNILEdBRkQ7O0FBR0FteEUsbUJBQWlCLENBQUMvdEUsU0FBbEIsQ0FBNEJnNEIsa0JBQTVCLEdBQWlELFVBQVVqZixRQUFWLEVBQW9CO0FBQ2pFLFFBQUkwckQsV0FBVyxHQUFHMXJELFFBQVEsQ0FBQzByRCxXQUEzQjs7QUFDQSxRQUFJLENBQUNBLFdBQVcsQ0FBQ25rRSxNQUFqQixFQUF5QjtBQUNyQixhQUFPLENBQUMsRUFBRCxDQUFQO0FBQ0g7O0FBQ0QsV0FBT21rRSxXQUFQO0FBQ0gsR0FORDs7QUFPQSxTQUFPc0osaUJBQVA7QUFDSCxDQXhCc0MsQ0F3QnJDNzNDLDJEQXhCcUMsQ0FBdkMsQyxDQXlCQTs7O0FBQ0EsSUFBSSszQyxPQUFPLEdBQUcsRUFBZCxDLENBQWtCOztBQUNsQixJQUFJQyxlQUFlO0FBQUc7QUFBZSxZQUFZO0FBQzdDLFdBQVNBLGVBQVQsR0FBMkI7QUFDdkIsU0FBS0MsaUJBQUwsR0FBeUJqdkQsa0VBQU8sQ0FBQyxLQUFLa3ZELFFBQU4sQ0FBaEM7QUFDQSxTQUFLQyxpQkFBTCxHQUF5Qm52RCxrRUFBTyxDQUFDLEtBQUtrdkQsUUFBTixDQUFoQztBQUNBLFNBQUtFLFlBQUwsR0FBb0JwdkQsa0VBQU8sQ0FBQyxLQUFLa3ZELFFBQU4sQ0FBM0I7QUFDQSxTQUFLRyxZQUFMLEdBQW9CcnZELGtFQUFPLENBQUMsS0FBS2t2RCxRQUFOLENBQTNCO0FBQ0EsU0FBS0ksY0FBTCxHQUFzQnR2RCxrRUFBTyxDQUFDLEtBQUt1dkQsZ0JBQU4sQ0FBN0I7QUFDQSxTQUFLQyxnQkFBTCxHQUF3Qnh2RCxrRUFBTyxDQUFDLEtBQUt1dkQsZ0JBQU4sQ0FBL0I7QUFDSDtBQUNEOzs7OztBQUdBUCxpQkFBZSxDQUFDbHVFLFNBQWhCLENBQTBCMnVFLFNBQTFCLEdBQXNDLFVBQVVDLFFBQVYsRUFBb0JaLGdCQUFwQixFQUFzQztBQUN4RSxRQUFJYSxpQkFBaUIsR0FBRyxFQUF4QjtBQUNBLFFBQUlDLGlCQUFpQixHQUFHLEVBQXhCO0FBQ0EsUUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsUUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsUUFBSXozQyxVQUFVLEdBQUcsRUFBakI7QUFDQSxRQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFDQSxRQUFJMUksY0FBYyxHQUFHLEVBQXJCO0FBQ0EsUUFBSTlNLElBQUksR0FBR2dzRCxnQkFBZ0IsQ0FBQ2pCLGFBQWpCLENBQStCZSxHQUEvQixDQUFtQ3psRSxNQUFuQyxDQUEwQyxDQUFDLEVBQUQsQ0FBMUMsQ0FBWCxDQVJ3RSxDQVFaOztBQUM1RCxTQUFLLElBQUl3TSxFQUFFLEdBQUcsQ0FBVCxFQUFZa2pCLE1BQU0sR0FBRy9WLElBQTFCLEVBQWdDbk4sRUFBRSxHQUFHa2pCLE1BQU0sQ0FBQ3ozQixNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsVUFBSWlCLEdBQUcsR0FBR2lpQixNQUFNLENBQUNsakIsRUFBRCxDQUFoQjtBQUNBLFVBQUkzUixLQUFLLEdBQUcwckUsUUFBUSxDQUFDOTRELEdBQUQsQ0FBcEI7QUFDQSs0RCx1QkFBaUIsQ0FBQ3JzRSxJQUFsQixDQUF1QlUsS0FBSyxDQUFDd3ZELGlCQUE3QjtBQUNBb2MsdUJBQWlCLENBQUN0c0UsSUFBbEIsQ0FBdUJzVCxHQUFHLEdBQUc1UyxLQUFLLENBQUN5dkQsZ0JBQVQsR0FBNEJzYixPQUF0RCxFQUpzRCxDQUlVOztBQUNoRWMsaUJBQVcsQ0FBQ3ZzRSxJQUFaLENBQWlCc1QsR0FBRyxHQUFHNVMsS0FBSyxDQUFDMHZELFdBQVQsR0FBdUJxYixPQUEzQyxFQUxzRCxDQUtEOztBQUNyRGUsaUJBQVcsQ0FBQ3hzRSxJQUFaLENBQWlCVSxLQUFLLENBQUMydkQsV0FBdkI7QUFDQXQ3QixnQkFBVSxDQUFDLzBCLElBQVgsQ0FBZ0JVLEtBQUssQ0FBQ3VyQixTQUF0QjtBQUNBK0ksa0JBQVksQ0FBQ2gxQixJQUFiLENBQWtCVSxLQUFLLENBQUM2ckIsV0FBeEI7QUFDQUQsb0JBQWMsR0FBR0EsY0FBYyxJQUFJNXJCLEtBQUssQ0FBQzRyQixjQUF6QztBQUNIOztBQUNELFdBQU87QUFDSDRqQyx1QkFBaUIsRUFBRSxLQUFLeWIsaUJBQUwsQ0FBdUJ4Z0UsS0FBdkIsQ0FBNkIsSUFBN0IsRUFBbUMsQ0FBQ3FnRSxnQkFBRCxFQUFtQjNsRSxNQUFuQixDQUEwQndtRSxpQkFBMUIsQ0FBbkMsQ0FEaEI7QUFFSGxjLHNCQUFnQixFQUFFLEtBQUswYixpQkFBTCxDQUF1QjFnRSxLQUF2QixDQUE2QixJQUE3QixFQUFtQyxDQUFDcWdFLGdCQUFELEVBQW1CM2xFLE1BQW5CLENBQTBCeW1FLGlCQUExQixDQUFuQyxDQUZmO0FBR0hsYyxpQkFBVyxFQUFFLEtBQUswYixZQUFMLENBQWtCM2dFLEtBQWxCLENBQXdCLElBQXhCLEVBQThCLENBQUNxZ0UsZ0JBQUQsRUFBbUIzbEUsTUFBbkIsQ0FBMEIwbUUsV0FBMUIsQ0FBOUIsQ0FIVjtBQUlIbGMsaUJBQVcsRUFBRSxLQUFLMGIsWUFBTCxDQUFrQjVnRSxLQUFsQixDQUF3QixJQUF4QixFQUE4QixDQUFDcWdFLGdCQUFELEVBQW1CM2xFLE1BQW5CLENBQTBCMm1FLFdBQTFCLENBQTlCLENBSlY7QUFLSHZnRCxlQUFTLEVBQUUsS0FBSysvQyxjQUFMLENBQW9CN2dFLEtBQXBCLENBQTBCLElBQTFCLEVBQWdDLENBQUNxZ0UsZ0JBQUQsRUFBbUIzbEUsTUFBbkIsQ0FBMEJrdkIsVUFBMUIsQ0FBaEMsQ0FMUjtBQU1IeEksaUJBQVcsRUFBRSxLQUFLMi9DLGdCQUFMLENBQXNCL2dFLEtBQXRCLENBQTRCLElBQTVCLEVBQWtDLENBQUNxZ0UsZ0JBQUQsRUFBbUIzbEUsTUFBbkIsQ0FBMEJtdkIsWUFBMUIsQ0FBbEMsQ0FOVjtBQU9IMUksb0JBQWMsRUFBRUE7QUFQYixLQUFQO0FBU0gsR0E3QkQ7O0FBOEJBby9DLGlCQUFlLENBQUNsdUUsU0FBaEIsQ0FBMEJvdUUsUUFBMUIsR0FBcUMsVUFBVUosZ0JBQVYsRUFBNEI7QUFDN0QsUUFBSWlCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUlwNkQsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR0MsU0FBUyxDQUFDeFUsTUFBaEMsRUFBd0N1VSxFQUFFLEVBQTFDLEVBQThDO0FBQzFDbzZELGVBQVMsQ0FBQ3A2RCxFQUFFLEdBQUcsQ0FBTixDQUFULEdBQW9CQyxTQUFTLENBQUNELEVBQUQsQ0FBN0I7QUFDSDs7QUFDRCxRQUFJcTZELFdBQVcsR0FBR2xCLGdCQUFnQixDQUFDOXlFLFNBQWpCLENBQTJCb0YsTUFBN0M7QUFDQSxRQUFJNnVFLGVBQWUsR0FBRyxFQUF0Qjs7QUFDQSxTQUFLLElBQUk5d0UsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZ3RSxXQUFwQixFQUFpQzd3RSxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFdBQUssSUFBSTRQLEVBQUUsR0FBRyxDQUFULEVBQVk2WSxFQUFFLEdBQUdtb0QsU0FBUyxDQUFDNXdFLENBQUQsQ0FBL0IsRUFBb0M0UCxFQUFFLEdBQUc2WSxFQUFFLENBQUN4bUIsTUFBNUMsRUFBb0QyTixFQUFFLEVBQXRELEVBQTBEO0FBQ3RELFlBQUlzZCxHQUFHLEdBQUd6RSxFQUFFLENBQUM3WSxFQUFELENBQVo7QUFDQWtoRSx1QkFBZSxDQUFDM3NFLElBQWhCLENBQXFCbUwsS0FBckIsQ0FBMkJ3aEUsZUFBM0IsRUFBNEMsS0FBS0MsWUFBTCxDQUFrQjdqRCxHQUFsQixFQUF1QnlpRCxnQkFBdkIsRUFBeUMzdkUsQ0FBekMsQ0FBNUM7QUFDSDs7QUFDRCxXQUFLLElBQUk2NUIsRUFBRSxHQUFHLENBQVQsRUFBWW0zQyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0MsV0FBRCxDQUEvQixFQUE4Q2gzQyxFQUFFLEdBQUdtM0MsRUFBRSxDQUFDL3VFLE1BQXRELEVBQThENDNCLEVBQUUsRUFBaEUsRUFBb0U7QUFBRTtBQUNsRSxZQUFJM00sR0FBRyxHQUFHOGpELEVBQUUsQ0FBQ24zQyxFQUFELENBQVo7QUFDQWkzQyx1QkFBZSxDQUFDM3NFLElBQWhCLENBQXFCbUwsS0FBckIsRUFBMkI7QUFDM0J3aEUsdUJBREEsRUFDaUIsS0FBS0MsWUFBTCxDQUFrQjdqRCxHQUFsQixFQUF1QnlpRCxnQkFBdkIsRUFBeUMzdkUsQ0FBekMsQ0FEakI7QUFFSDtBQUNKOztBQUNELFdBQU84d0UsZUFBUDtBQUNILEdBbkJEO0FBb0JBOzs7Ozs7O0FBS0FqQixpQkFBZSxDQUFDbHVFLFNBQWhCLENBQTBCc3ZFLFVBQTFCLEdBQXVDLFVBQVV0QixnQkFBVixFQUE0QjdpRCxJQUE1QixFQUFrQztBQUNyRSxRQUFJK2pELFdBQVcsR0FBR2xCLGdCQUFnQixDQUFDOXlFLFNBQWpCLENBQTJCb0YsTUFBN0M7QUFDQSxRQUFJNnVFLGVBQWUsR0FBRyxFQUF0Qjs7QUFDQSxTQUFLLElBQUk5d0UsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZ3RSxXQUFwQixFQUFpQzd3RSxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFdBQUssSUFBSXdXLEVBQUUsR0FBRyxDQUFULEVBQVk4VyxNQUFNLEdBQUdSLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHOFcsTUFBTSxDQUFDcnJCLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxZQUFJMFcsR0FBRyxHQUFHSSxNQUFNLENBQUM5VyxFQUFELENBQWhCO0FBQ0FzNkQsdUJBQWUsQ0FBQzNzRSxJQUFoQixDQUFxQm1MLEtBQXJCLENBQTJCd2hFLGVBQTNCLEVBQTRDLEtBQUtDLFlBQUwsQ0FBa0I3akQsR0FBbEIsRUFBdUJ5aUQsZ0JBQXZCLEVBQXlDM3ZFLENBQXpDLENBQTVDO0FBQ0g7QUFDSjs7QUFDRCxXQUFPOHdFLGVBQVA7QUFDSCxHQVZEOztBQVdBakIsaUJBQWUsQ0FBQ2x1RSxTQUFoQixDQUEwQnl1RSxnQkFBMUIsR0FBNkMsVUFBVVQsZ0JBQVYsRUFBNEI7QUFDckUsUUFBSXJvQixZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSyxJQUFJOXdDLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdDLFNBQVMsQ0FBQ3hVLE1BQWhDLEVBQXdDdVUsRUFBRSxFQUExQyxFQUE4QztBQUMxQzh3QyxrQkFBWSxDQUFDOXdDLEVBQUUsR0FBRyxDQUFOLENBQVosR0FBdUJDLFNBQVMsQ0FBQ0QsRUFBRCxDQUFoQztBQUNIOztBQUNELFFBQUlxNkQsV0FBVyxHQUFHbEIsZ0JBQWdCLENBQUM5eUUsU0FBakIsQ0FBMkJvRixNQUE3QztBQUNBLFFBQUk0eUQsaUJBQWlCLEdBQUcsRUFBeEI7QUFDQSxRQUFJaWMsZUFBZSxHQUFHLEVBQXRCO0FBQ0EsUUFBSXovQyxPQUFPLEdBQUcsS0FBZDtBQUNBLFFBQUl5akMsU0FBUyxHQUFHLElBQWhCOztBQUNBLFNBQUssSUFBSTkwRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNndFLFdBQXBCLEVBQWlDN3dFLENBQUMsRUFBbEMsRUFBc0M7QUFDbEMsVUFBSWt3QixXQUFXLEdBQUdvM0IsWUFBWSxDQUFDdG5ELENBQUQsQ0FBOUI7O0FBQ0EsVUFBSWt3QixXQUFKLEVBQWlCO0FBQ2IsYUFBSyxJQUFJdGdCLEVBQUUsR0FBRyxDQUFULEVBQVk2WSxFQUFFLEdBQUd5SCxXQUFXLENBQUNwRCxJQUFsQyxFQUF3Q2xkLEVBQUUsR0FBRzZZLEVBQUUsQ0FBQ3htQixNQUFoRCxFQUF3RDJOLEVBQUUsRUFBMUQsRUFBOEQ7QUFDMUQsY0FBSXNkLEdBQUcsR0FBR3pFLEVBQUUsQ0FBQzdZLEVBQUQsQ0FBWjtBQUNBa2hFLHlCQUFlLENBQUMzc0UsSUFBaEIsQ0FBcUJtTCxLQUFyQixDQUEyQndoRSxlQUEzQixFQUE0QyxLQUFLQyxZQUFMLENBQWtCN2pELEdBQWxCLEVBQXVCeWlELGdCQUF2QixFQUF5QzN2RSxDQUF6QyxDQUE1QyxDQUF3RjtBQUF4RjtBQUVIOztBQUNEeVosZ0JBQVEsQ0FBQ283QyxpQkFBRCxFQUFvQjNrQyxXQUFXLENBQUMya0MsaUJBQWhDLENBQVI7O0FBQ0F4akMsZUFBTyxHQUFHQSxPQUFPLElBQUluQixXQUFXLENBQUNtQixPQUFqQztBQUNBeWpDLGlCQUFTLEdBQUdBLFNBQVMsSUFBSTVrQyxXQUFXLENBQUM0a0MsU0FBckM7QUFDSDs7QUFDRCxVQUFJeE4sWUFBWSxDQUFDdXBCLFdBQUQsQ0FBaEIsRUFBK0I7QUFBRTtBQUM3QixhQUFLLElBQUloM0MsRUFBRSxHQUFHLENBQVQsRUFBWW0zQyxFQUFFLEdBQUcxcEIsWUFBWSxDQUFDdXBCLFdBQUQsQ0FBWixDQUEwQi9qRCxJQUFoRCxFQUFzRCtNLEVBQUUsR0FBR20zQyxFQUFFLENBQUMvdUUsTUFBOUQsRUFBc0U0M0IsRUFBRSxFQUF4RSxFQUE0RTtBQUN4RSxjQUFJM00sR0FBRyxHQUFHOGpELEVBQUUsQ0FBQ24zQyxFQUFELENBQVo7QUFDQWkzQyx5QkFBZSxDQUFDM3NFLElBQWhCLENBQXFCbUwsS0FBckIsQ0FBMkJ3aEUsZUFBM0IsRUFBNEMsS0FBS0MsWUFBTCxDQUFrQjdqRCxHQUFsQixFQUF1QnlpRCxnQkFBdkIsRUFBeUMzdkUsQ0FBekMsQ0FBNUMsQ0FBd0Y7QUFBeEY7QUFFSDtBQUNKO0FBQ0o7O0FBQ0QsV0FBTztBQUNINjBELHVCQUFpQixFQUFFQSxpQkFEaEI7QUFFSC9uQyxVQUFJLEVBQUVna0QsZUFGSDtBQUdIei9DLGFBQU8sRUFBRUEsT0FITjtBQUlIeWpDLGVBQVMsRUFBRUE7QUFKUixLQUFQO0FBTUgsR0FwQ0Q7O0FBcUNBLFNBQU8rYSxlQUFQO0FBQ0gsQ0FwSG9DLEVBQXJDO0FBc0hBOzs7OztBQUdBLFNBQVNxQixnQkFBVCxDQUEwQnBLLGFBQTFCLEVBQXlDcUssVUFBekMsRUFBcUQ7QUFDakQsU0FBT0MsYUFBYSxDQUFDdEssYUFBRCxFQUFnQixFQUFoQixFQUFvQnFLLFVBQXBCLEVBQWdDLEtBQWhDLEVBQXVDLEVBQXZDLEVBQTJDLElBQTNDLENBQWIsQ0FDRnBuRSxHQURFLENBQ0UsVUFBVXUwRCxJQUFWLEVBQWdCO0FBQ3JCLFdBQU9BLElBQUksQ0FBQzVnRSxRQUFaO0FBQ0gsR0FITSxDQUFQO0FBSUg7O0FBQ0QsU0FBUzB6RSxhQUFULENBQXVCdEssYUFBdkIsRUFBc0N1SyxVQUF0QyxFQUFrREYsVUFBbEQsRUFBOERHLFdBQTlELEVBQTJFckgsVUFBM0UsRUFBdUZzSCxnQkFBdkYsRUFBeUc7QUFDckcsTUFBSUMsWUFBWSxHQUFHQyxjQUFjLENBQUMzSyxhQUFELEVBQWdCd0ssV0FBVyxHQUFHLENBQUMsQ0FBSixHQUFRLENBQW5DLEVBQXNDRCxVQUF0QyxFQUFrREYsVUFBbEQsQ0FBakM7QUFDQSxNQUFJTyxTQUFTLEdBQUcsRUFBaEI7QUFDQUMsY0FBWSxDQUFDSCxZQUFELEVBQWVFLFNBQWYsRUFBMEJKLFdBQTFCLEVBQXVDLEVBQXZDLEVBQTJDLENBQTNDLEVBQThDckgsVUFBOUMsRUFBMERzSCxnQkFBMUQsQ0FBWjtBQUNBLFNBQU9HLFNBQVA7QUFDSDs7QUFDRCxTQUFTQyxZQUFULENBQXNCSCxZQUF0QixFQUFvQzlyRSxHQUFwQyxFQUF5QzRyRSxXQUF6QyxFQUFzRE0sUUFBdEQsRUFBZ0VDLEtBQWhFLEVBQXVFNUgsVUFBdkUsRUFBbUZzSCxnQkFBbkYsRUFBcUc7QUFDakcsT0FBSyxJQUFJdnhFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd3eEUsWUFBWSxDQUFDdnZFLE1BQWpDLEVBQXlDakMsQ0FBQyxFQUExQyxFQUE4QztBQUMxQyxRQUFJOHhFLFdBQVcsR0FBR04sWUFBWSxDQUFDeHhFLENBQUQsQ0FBOUI7QUFDQSxRQUFJK3hFLEtBQUssR0FBR0QsV0FBVyxDQUFDQyxLQUF4Qjs7QUFDQSxRQUFJQSxLQUFKLEVBQVc7QUFDUCxVQUFJVCxXQUFKLEVBQWlCO0FBQ2IsWUFBSVUsYUFBYSxHQUFHdHNFLEdBQUcsQ0FBQ3pELE1BQXhCO0FBQ0EsWUFBSWd3RSxZQUFZLEdBQUdMLFFBQVEsQ0FBQzN2RSxNQUE1QjtBQUNBMHZFLG9CQUFZLENBQUNHLFdBQVcsQ0FBQ3h0RSxRQUFiLEVBQXVCb0IsR0FBdkIsRUFBNEI0ckUsV0FBNUIsRUFBeUNNLFFBQVEsQ0FBQzVuRSxNQUFULENBQWdCLENBQWhCLENBQXpDLEVBQTZENm5FLEtBQTdELEVBQW9FNUgsVUFBcEUsRUFBZ0ZzSCxnQkFBaEYsQ0FBWjs7QUFDQSxZQUFJUyxhQUFhLEdBQUd0c0UsR0FBRyxDQUFDekQsTUFBeEIsRUFBZ0M7QUFDNUIsY0FBSWl3RSxRQUFRLEdBQUd4c0UsR0FBRyxDQUFDc3NFLGFBQUQsQ0FBbEI7QUFDQSxjQUFJRyxhQUFhLEdBQUdELFFBQVEsQ0FBQ04sUUFBVCxHQUFvQk0sUUFBUSxDQUFDTixRQUFULENBQWtCaHdFLEtBQWxCLEVBQXhDO0FBQ0F1d0UsdUJBQWEsQ0FBQ0YsWUFBRCxDQUFiLEdBQThCdnNFLEdBQUcsQ0FBQ3pELE1BQUosR0FBYSt2RSxhQUEzQztBQUNIO0FBQ0osT0FURCxNQVVLO0FBQ0QsWUFBSXIwRSxFQUFFLEdBQUdvMEUsS0FBSyxDQUFDdHJCLElBQU4sQ0FBVy9wRCxLQUFYLEdBQW1CLEdBQW5CLEdBQXlCcTFFLEtBQUssQ0FBQzEvRCxLQUF4QztBQUNBLFlBQUk2M0QsVUFBVSxHQUFHRCxVQUFVLENBQUN0c0UsRUFBRCxDQUFWLElBQWtCLElBQWxCLEdBQXlCc3NFLFVBQVUsQ0FBQ3RzRSxFQUFELENBQW5DLEdBQTBDNHpFLGdCQUEzRDtBQUNBN3JFLFdBQUcsQ0FBQ3ZCLElBQUosQ0FBUztBQUFFeEcsWUFBRSxFQUFFQSxFQUFOO0FBQVVvMEUsZUFBSyxFQUFFQSxLQUFqQjtBQUF3QjdILG9CQUFVLEVBQUVBO0FBQXBDLFNBQVQ7O0FBQ0EsWUFBSUEsVUFBSixFQUFnQjtBQUNaeUgsc0JBQVksQ0FBQ0csV0FBVyxDQUFDeHRFLFFBQWIsRUFBdUJvQixHQUF2QixFQUE0QjRyRSxXQUE1QixFQUF5Q00sUUFBekMsRUFBbURDLEtBQUssR0FBRyxDQUEzRCxFQUE4RDVILFVBQTlELEVBQTBFc0gsZ0JBQTFFLENBQVo7QUFDSDtBQUNKO0FBQ0osS0FuQkQsTUFvQkssSUFBSU8sV0FBVyxDQUFDcDBFLFFBQWhCLEVBQTBCO0FBQzNCLFVBQUlDLEVBQUUsR0FBR20wRSxXQUFXLENBQUNwMEUsUUFBWixDQUFxQkMsRUFBOUI7QUFDQSxVQUFJdXNFLFVBQVUsR0FBR0QsVUFBVSxDQUFDdHNFLEVBQUQsQ0FBVixJQUFrQixJQUFsQixHQUF5QnNzRSxVQUFVLENBQUN0c0UsRUFBRCxDQUFuQyxHQUEwQzR6RSxnQkFBM0Q7QUFDQTdyRSxTQUFHLENBQUN2QixJQUFKLENBQVM7QUFDTHhHLFVBQUUsRUFBRUEsRUFEQztBQUVMaTBFLGdCQUFRLEVBQUVBLFFBRkw7QUFHTEMsYUFBSyxFQUFFQSxLQUhGO0FBSUwzSCxrQkFBVSxFQUFFQSxVQUpQO0FBS0xrSSxtQkFBVyxFQUFFdjZELE9BQU8sQ0FBQ2k2RCxXQUFXLENBQUN4dEUsUUFBWixDQUFxQnJDLE1BQXRCLENBTGY7QUFNTHZFLGdCQUFRLEVBQUVvMEUsV0FBVyxDQUFDcDBFLFFBTmpCO0FBT0wyMEUsc0JBQWMsRUFBRVAsV0FBVyxDQUFDTztBQVB2QixPQUFUOztBQVNBLFVBQUluSSxVQUFKLEVBQWdCO0FBQ1p5SCxvQkFBWSxDQUFDRyxXQUFXLENBQUN4dEUsUUFBYixFQUF1Qm9CLEdBQXZCLEVBQTRCNHJFLFdBQTVCLEVBQXlDTSxRQUF6QyxFQUFtREMsS0FBSyxHQUFHLENBQTNELEVBQThENUgsVUFBOUQsRUFBMEVzSCxnQkFBMUUsQ0FBWjtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUNELFNBQVNFLGNBQVQsQ0FBd0IzSyxhQUF4QixFQUF1Q3dMLFFBQXZDLEVBQWlEakIsVUFBakQsRUFBNkRGLFVBQTdELEVBQXlFO0FBQ3JFLE1BQUlvQixhQUFhLEdBQUdDLGtCQUFrQixDQUFDMUwsYUFBRCxFQUFnQnFLLFVBQWhCLENBQXRDO0FBQ0EsTUFBSXNCLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxPQUFLLElBQUlsMEUsVUFBVCxJQUF1QmcwRSxhQUF2QixFQUFzQztBQUNsQyxRQUFJRyxZQUFZLEdBQUdILGFBQWEsQ0FBQ2gwRSxVQUFELENBQWhDOztBQUNBLFFBQUksQ0FBQ20wRSxZQUFZLENBQUNoMUUsUUFBYixDQUFzQjhwRSxRQUEzQixFQUFxQztBQUNqQ21MLHdCQUFrQixDQUFDRCxZQUFELEVBQWVELFVBQWYsRUFBMkJwQixVQUEzQixFQUF1QyxDQUF2QyxFQUEwQ2lCLFFBQTFDLEVBQW9EbkIsVUFBcEQsQ0FBbEI7QUFDSDtBQUNKOztBQUNELFNBQU9zQixVQUFQO0FBQ0g7O0FBQ0QsU0FBU0Qsa0JBQVQsQ0FBNEIxTCxhQUE1QixFQUEyQ3FLLFVBQTNDLEVBQXVEO0FBQ25ELE1BQUl5QixRQUFRLEdBQUcsRUFBZjs7QUFDQSxPQUFLLElBQUlyMEUsVUFBVCxJQUF1QnVvRSxhQUF2QixFQUFzQztBQUNsQyxRQUFJcHBFLFFBQVEsR0FBR29wRSxhQUFhLENBQUN2b0UsVUFBRCxDQUE1QjtBQUNBcTBFLFlBQVEsQ0FBQ3IwRSxVQUFELENBQVIsR0FBdUI7QUFDbkJiLGNBQVEsRUFBRUEsUUFEUztBQUVuQjIwRSxvQkFBYyxFQUFFUSxtQkFBbUIsQ0FBQ24xRSxRQUFELENBRmhCO0FBR25CNEcsY0FBUSxFQUFFO0FBSFMsS0FBdkI7QUFLSDs7QUFDRCxPQUFLLElBQUkvRixVQUFULElBQXVCdW9FLGFBQXZCLEVBQXNDO0FBQ2xDLFFBQUlwcEUsUUFBUSxHQUFHb3BFLGFBQWEsQ0FBQ3ZvRSxVQUFELENBQTVCOztBQUNBLFFBQUliLFFBQVEsQ0FBQzhwRSxRQUFiLEVBQXVCO0FBQ25CLFVBQUk5a0UsVUFBVSxHQUFHa3dFLFFBQVEsQ0FBQ2wxRSxRQUFRLENBQUM4cEUsUUFBVixDQUF6Qjs7QUFDQSxVQUFJOWtFLFVBQUosRUFBZ0I7QUFDWm93RSxvQ0FBNEIsQ0FBQ0YsUUFBUSxDQUFDcjBFLFVBQUQsQ0FBVCxFQUF1Qm1FLFVBQVUsQ0FBQzRCLFFBQWxDLEVBQTRDNnNFLFVBQTVDLENBQTVCO0FBQ0g7QUFDSjtBQUNKOztBQUNELFNBQU95QixRQUFQO0FBQ0g7O0FBQ0QsU0FBU0Qsa0JBQVQsQ0FBNEJELFlBQTVCLEVBQTBDSyxLQUExQyxFQUFpRDFCLFVBQWpELEVBQTZEUSxLQUE3RCxFQUFvRVMsUUFBcEUsRUFBOEVuQixVQUE5RSxFQUEwRjtBQUN0RixNQUFJRSxVQUFVLENBQUNwdkUsTUFBWCxLQUFzQnF3RSxRQUFRLEtBQUssQ0FBQyxDQUFkLElBQW1CVCxLQUFLLElBQUlTLFFBQWxELENBQUosRUFBaUU7QUFDN0QsUUFBSVUsU0FBUyxHQUFHQyxnQkFBZ0IsQ0FBQ1AsWUFBRCxFQUFlSyxLQUFmLEVBQXNCMUIsVUFBVSxDQUFDLENBQUQsQ0FBaEMsQ0FBaEM7QUFDQXNCLHNCQUFrQixDQUFDRCxZQUFELEVBQWVNLFNBQVMsQ0FBQzF1RSxRQUF6QixFQUFtQytzRSxVQUFVLENBQUN6dkUsS0FBWCxDQUFpQixDQUFqQixDQUFuQyxFQUF3RGl3RSxLQUFLLEdBQUcsQ0FBaEUsRUFBbUVTLFFBQW5FLEVBQTZFbkIsVUFBN0UsQ0FBbEI7QUFDSCxHQUhELE1BSUs7QUFDRDJCLGdDQUE0QixDQUFDSixZQUFELEVBQWVLLEtBQWYsRUFBc0I1QixVQUF0QixDQUE1QjtBQUNIO0FBQ0o7O0FBQ0QsU0FBUzhCLGdCQUFULENBQTBCUCxZQUExQixFQUF3Q0ssS0FBeEMsRUFBK0NHLFNBQS9DLEVBQTBEO0FBQ3RELE1BQUlDLFVBQVUsR0FBR1QsWUFBWSxDQUFDTCxjQUFiLENBQTRCYSxTQUFTLENBQUN4MkUsS0FBdEMsQ0FBakI7QUFDQSxNQUFJczJFLFNBQUo7QUFDQSxNQUFJSSxhQUFKLENBSHNELENBSXREOztBQUNBLE1BQUlGLFNBQVMsQ0FBQ24rRCxLQUFkLEVBQXFCO0FBQ2pCLFNBQUtxK0QsYUFBYSxHQUFHLENBQXJCLEVBQXdCQSxhQUFhLEdBQUdMLEtBQUssQ0FBQzl3RSxNQUE5QyxFQUFzRG14RSxhQUFhLEVBQW5FLEVBQXVFO0FBQ25FLFVBQUk5VSxJQUFJLEdBQUd5VSxLQUFLLENBQUNLLGFBQUQsQ0FBaEI7O0FBQ0EsVUFBSTlVLElBQUksQ0FBQ3lULEtBQVQsRUFBZ0I7QUFDWixZQUFJMThELEdBQUcsR0FBR0csMEVBQWUsQ0FBQzI5RCxVQUFELEVBQWE3VSxJQUFJLENBQUN5VCxLQUFMLENBQVcxL0QsS0FBeEIsQ0FBZixHQUFnRDZnRSxTQUFTLENBQUNuK0QsS0FBcEU7O0FBQ0EsWUFBSU0sR0FBRyxLQUFLLENBQVosRUFBZTtBQUNYMjlELG1CQUFTLEdBQUcxVSxJQUFaO0FBQ0E7QUFDSCxTQUhELE1BSUssSUFBSWpwRCxHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQ2Q7QUFDSDtBQUNKO0FBQ0o7QUFDSixHQWRELE1BZUs7QUFBRTtBQUNILFNBQUsrOUQsYUFBYSxHQUFHLENBQXJCLEVBQXdCQSxhQUFhLEdBQUdMLEtBQUssQ0FBQzl3RSxNQUE5QyxFQUFzRG14RSxhQUFhLEVBQW5FLEVBQXVFO0FBQ25FLFVBQUk5VSxJQUFJLEdBQUd5VSxLQUFLLENBQUNLLGFBQUQsQ0FBaEI7O0FBQ0EsVUFBSTlVLElBQUksQ0FBQ3lULEtBQUwsSUFBY29CLFVBQVUsS0FBSzdVLElBQUksQ0FBQ3lULEtBQUwsQ0FBVzEvRCxLQUE1QyxFQUFtRDtBQUMvQzJnRSxpQkFBUyxHQUFHMVUsSUFBWjtBQUNBO0FBQ0g7QUFDSjtBQUNKOztBQUNELE1BQUksQ0FBQzBVLFNBQUwsRUFBZ0I7QUFDWkEsYUFBUyxHQUFHO0FBQ1JqQixXQUFLLEVBQUU7QUFDSDEvRCxhQUFLLEVBQUU4Z0UsVUFESjtBQUVIMXNCLFlBQUksRUFBRXlzQjtBQUZILE9BREM7QUFLUjV1RSxjQUFRLEVBQUU7QUFMRixLQUFaO0FBT0F5dUUsU0FBSyxDQUFDdHlELE1BQU4sQ0FBYTJ5RCxhQUFiLEVBQTRCLENBQTVCLEVBQStCSixTQUEvQjtBQUNIOztBQUNELFNBQU9BLFNBQVA7QUFDSDs7QUFDRCxTQUFTRiw0QkFBVCxDQUFzQ0osWUFBdEMsRUFBb0RXLFFBQXBELEVBQThEbEMsVUFBOUQsRUFBMEU7QUFDdEUsTUFBSW54RSxDQUFKOztBQUNBLE9BQUtBLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR3F6RSxRQUFRLENBQUNweEUsTUFBekIsRUFBaUNqQyxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFFBQUlxVixHQUFHLEdBQUdKLDhFQUFtQixDQUFDbytELFFBQVEsQ0FBQ3J6RSxDQUFELENBQVIsQ0FBWXF5RSxjQUFiLEVBQTZCSyxZQUFZLENBQUNMLGNBQTFDLEVBQTBEbEIsVUFBMUQsQ0FBN0I7O0FBQ0EsUUFBSTk3RCxHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQUU7QUFDWDtBQUNIO0FBQ0o7O0FBQ0RnK0QsVUFBUSxDQUFDNXlELE1BQVQsQ0FBZ0J6Z0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IweUUsWUFBdEI7QUFDSDs7QUFDRCxTQUFTRyxtQkFBVCxDQUE2Qm4xRSxRQUE3QixFQUF1QztBQUNuQyxNQUFJd1MsR0FBRyxHQUFHdUosUUFBUSxDQUFDLEVBQUQsRUFBSy9iLFFBQVEsQ0FBQzJyQixhQUFkLEVBQTZCM3JCLFFBQVEsQ0FBQ3FyQixFQUF0QyxFQUEwQ3JyQixRQUExQyxDQUFsQjs7QUFDQSxTQUFPd1MsR0FBRyxDQUFDNlksRUFBWDtBQUNBLFNBQU83WSxHQUFHLENBQUNtWixhQUFYO0FBQ0EsU0FBT25aLEdBQVA7QUFDSDs7QUFDRCxTQUFTb2pFLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxNQUEvQixFQUF1QztBQUNuQyxTQUFPRCxNQUFNLENBQUM5c0IsSUFBUCxLQUFnQitzQixNQUFNLENBQUMvc0IsSUFBdkIsSUFBK0I4c0IsTUFBTSxDQUFDbGhFLEtBQVAsS0FBaUJtaEUsTUFBTSxDQUFDbmhFLEtBQTlEO0FBQ0g7O0FBRUQsSUFBSXF6RCxJQUFJLEdBQUcvaEMsdUVBQVksQ0FBQztBQUNwQkUsVUFBUSxFQUFFLENBQUNzbUMsaUJBQUQsQ0FEVTtBQUVwQngwQyxpQkFBZSxFQUFFLENBQUNMLGFBQUQsQ0FGRztBQUdwQndPLHlCQUF1QixFQUFFLENBQUNpa0Msb0JBQUQsQ0FITDtBQUlwQmhrQyw0QkFBMEIsRUFBRSxDQUFDNGhDLHdCQUFELENBSlI7QUFLcEJ6M0MsMEJBQXdCLEVBQUUsQ0FBQ2c0QyxxQkFBRCxDQUxOO0FBTXBCbGlDLDJCQUF5QixFQUFFLENBQUN1bUMsMEJBQUQsQ0FOUDtBQU9wQnRtQyxxQkFBbUIsRUFBRSxDQUFDd25DLGtCQUFELENBUEQ7QUFRcEJ2bkMsb0JBQWtCLEVBQUUsQ0FBQ3duQyxpQkFBRCxDQVJBO0FBU3BCdG5DLHVCQUFxQixFQUFFLENBQUNzaUMsaUJBQUQsRUFBb0JlLHdCQUFwQixDQVRIO0FBVXBCOTJDLGNBQVksRUFBRWk3Qyx5QkFWTTtBQVdwQnZuQyx1QkFBcUIsRUFBRSxDQUFDNG5DLG9CQUFELENBWEg7QUFZcEIzbkMsMkJBQXlCLEVBQUUsQ0FBQzRuQyx3QkFBRCxDQVpQO0FBYXBCM25DLHdCQUFzQixFQUFFLENBQUNvb0Msb0JBQUQsQ0FiSjtBQWNwQm5vQyx1QkFBcUIsRUFBRSxDQUFDOGhDLGtCQUFELENBZEg7QUFlcEJ2aEMsc0JBQW9CLEVBQUVBO0FBZkYsQ0FBRCxDQUF2QjtBQWtCZTJnQyxtRUFBZjs7Ozs7Ozs7Ozs7OztBQ3hoREE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7QUFFQSxJQUFJMXNELGFBQWEsR0FBRyxVQUFTak0sQ0FBVCxFQUFZMEksQ0FBWixFQUFlO0FBQy9CdUQsZUFBYSxHQUFHQyxNQUFNLENBQUNDLGNBQVAsSUFDWDtBQUFFQyxhQUFTLEVBQUU7QUFBYixlQUE2QnpYLEtBQTdCLElBQXNDLFVBQVVxTCxDQUFWLEVBQWEwSSxDQUFiLEVBQWdCO0FBQUUxSSxLQUFDLENBQUNvTSxTQUFGLEdBQWMxRCxDQUFkO0FBQWtCLEdBRC9ELElBRVosVUFBVTFJLENBQVYsRUFBYTBJLENBQWIsRUFBZ0I7QUFBRSxTQUFLLElBQUkyRCxDQUFULElBQWMzRCxDQUFkLEVBQWlCLElBQUlBLENBQUMsQ0FBQzRELGNBQUYsQ0FBaUJELENBQWpCLENBQUosRUFBeUJyTSxDQUFDLENBQUNxTSxDQUFELENBQUQsR0FBTzNELENBQUMsQ0FBQzJELENBQUQsQ0FBUjtBQUFjLEdBRjlFOztBQUdBLFNBQU9KLGFBQWEsQ0FBQ2pNLENBQUQsRUFBSTBJLENBQUosQ0FBcEI7QUFDSCxDQUxEOztBQU9BLFNBQVM2RCxTQUFULENBQW1Cdk0sQ0FBbkIsRUFBc0IwSSxDQUF0QixFQUF5QjtBQUNyQnVELGVBQWEsQ0FBQ2pNLENBQUQsRUFBSTBJLENBQUosQ0FBYjs7QUFDQSxXQUFTdGdCLEVBQVQsR0FBYztBQUFFLFNBQUtva0IsV0FBTCxHQUFtQnhNLENBQW5CO0FBQXVCOztBQUN2Q0EsR0FBQyxDQUFDcEwsU0FBRixHQUFjOFQsQ0FBQyxLQUFLLElBQU4sR0FBYXdELE1BQU0sQ0FBQ08sTUFBUCxDQUFjL0QsQ0FBZCxDQUFiLElBQWlDdGdCLEVBQUUsQ0FBQ3dNLFNBQUgsR0FBZThULENBQUMsQ0FBQzlULFNBQWpCLEVBQTRCLElBQUl4TSxFQUFKLEVBQTdELENBQWQ7QUFDSDs7QUFFRCxJQUFJc2tCLFFBQVEsR0FBRyxZQUFXO0FBQ3RCQSxVQUFRLEdBQUdSLE1BQU0sQ0FBQ1MsTUFBUCxJQUFpQixTQUFTRCxRQUFULENBQWtCRSxDQUFsQixFQUFxQjtBQUM3QyxTQUFLLElBQUk1SixDQUFKLEVBQU8vUCxDQUFDLEdBQUcsQ0FBWCxFQUFjd0wsQ0FBQyxHQUFHaUwsU0FBUyxDQUFDeFUsTUFBakMsRUFBeUNqQyxDQUFDLEdBQUd3TCxDQUE3QyxFQUFnRHhMLENBQUMsRUFBakQsRUFBcUQ7QUFDakQrUCxPQUFDLEdBQUcwRyxTQUFTLENBQUN6VyxDQUFELENBQWI7O0FBQ0EsV0FBSyxJQUFJb1osQ0FBVCxJQUFjckosQ0FBZCxFQUFpQixJQUFJa0osTUFBTSxDQUFDdFgsU0FBUCxDQUFpQjBYLGNBQWpCLENBQWdDeFgsSUFBaEMsQ0FBcUNrTyxDQUFyQyxFQUF3Q3FKLENBQXhDLENBQUosRUFBZ0RPLENBQUMsQ0FBQ1AsQ0FBRCxDQUFELEdBQU9ySixDQUFDLENBQUNxSixDQUFELENBQVI7QUFDcEU7O0FBQ0QsV0FBT08sQ0FBUDtBQUNILEdBTkQ7O0FBT0EsU0FBT0YsUUFBUSxDQUFDbkssS0FBVCxDQUFlLElBQWYsRUFBcUJtSCxTQUFyQixDQUFQO0FBQ0gsQ0FURDs7QUFXQSxJQUFJZzlELEdBQUc7QUFBRztBQUFlLFVBQVVoM0MsTUFBVixFQUFrQjtBQUN2Q25qQixXQUFTLENBQUNtNkQsR0FBRCxFQUFNaDNDLE1BQU4sQ0FBVDs7QUFDQSxXQUFTZzNDLEdBQVQsQ0FBYTM4RCxPQUFiLEVBQXNCNDhELGlCQUF0QixFQUF5Q0Msc0JBQXpDLEVBQWlFQyxjQUFqRSxFQUFpRkMsbUJBQWpGLEVBQXNHO0FBQ2xHLFFBQUlsN0MsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDK3NCLFdBQU4sR0FBb0IsS0FBcEI7QUFDQWd1QixxQkFBaUIsQ0FBQ3B4RSxZQUFsQixDQUErQnEyQixLQUFLLENBQUNtN0MsYUFBTixHQUFzQnQrRSxRQUFRLENBQUNtTCxhQUFULENBQXVCLElBQXZCLENBQXJELEVBQW1GZ3pFLHNCQUFuRjtBQUNBQyxrQkFBYyxDQUFDdHhFLFlBQWYsQ0FBNEJxMkIsS0FBSyxDQUFDbzdDLFVBQU4sR0FBbUJ2K0UsUUFBUSxDQUFDbUwsYUFBVCxDQUF1QixJQUF2QixDQUEvQyxFQUE2RWt6RSxtQkFBN0U7QUFDQSxXQUFPbDdDLEtBQVA7QUFDSDs7QUFDRDg2QyxLQUFHLENBQUM5eEUsU0FBSixDQUFjeStCLE9BQWQsR0FBd0IsWUFBWTtBQUNoQ3Y5Qiw0RUFBYSxDQUFDLEtBQUtpeEUsYUFBTixDQUFiO0FBQ0FqeEUsNEVBQWEsQ0FBQyxLQUFLa3hFLFVBQU4sQ0FBYjs7QUFDQXQzQyxVQUFNLENBQUM5NkIsU0FBUCxDQUFpQnkrQixPQUFqQixDQUF5QnYrQixJQUF6QixDQUE4QixJQUE5QjtBQUNILEdBSkQ7O0FBS0E0eEUsS0FBRyxDQUFDOXhFLFNBQUosQ0FBYys3QyxVQUFkLEdBQTJCLFVBQVVnQixRQUFWLEVBQW9CO0FBQzNDLFNBQUtnSCxXQUFMLEdBQW1CLEtBQW5CO0FBQ0gsR0FGRDs7QUFHQSxTQUFPK3RCLEdBQVA7QUFDSCxDQWxCd0IsQ0FrQnZCanlDLDREQWxCdUIsQ0FBekI7O0FBb0JBLFNBQVN3eUMsa0JBQVQsQ0FBNEI1MkUsRUFBNUIsRUFBZ0M4c0UsVUFBaEMsRUFBNEM7QUFDeEMsTUFBSXhsRSxTQUFTLEdBQUd0SCxFQUFFLENBQUNzSCxTQUFuQjs7QUFDQSxNQUFJd2xFLFVBQUosRUFBZ0I7QUFDWnhsRSxhQUFTLENBQUNyRSxNQUFWLENBQWlCLHFCQUFqQjtBQUNBcUUsYUFBUyxDQUFDQyxHQUFWLENBQWMsc0JBQWQ7QUFDSCxHQUhELE1BSUs7QUFDREQsYUFBUyxDQUFDckUsTUFBVixDQUFpQixzQkFBakI7QUFDQXFFLGFBQVMsQ0FBQ0MsR0FBVixDQUFjLHFCQUFkO0FBQ0g7QUFDSjs7QUFDRCxTQUFTc3ZFLGlCQUFULENBQTJCNzJFLEVBQTNCLEVBQStCO0FBQzNCLE1BQUlzSCxTQUFTLEdBQUd0SCxFQUFFLENBQUNzSCxTQUFuQjtBQUNBQSxXQUFTLENBQUNyRSxNQUFWLENBQWlCLHNCQUFqQjtBQUNBcUUsV0FBUyxDQUFDckUsTUFBVixDQUFpQixxQkFBakI7QUFDSDs7QUFDRCxTQUFTNnpFLGtCQUFULENBQTRCQyxFQUE1QixFQUFnQzUxRSxVQUFoQyxFQUE0QztBQUN4QzQxRSxJQUFFLENBQUNsekUsWUFBSCxDQUFnQixrQkFBaEIsRUFBb0MxQyxVQUFwQztBQUNIOztBQUVELElBQUk2MUUsUUFBUTtBQUFHO0FBQWUsVUFBVTMzQyxNQUFWLEVBQWtCO0FBQzVDbmpCLFdBQVMsQ0FBQzg2RCxRQUFELEVBQVczM0MsTUFBWCxDQUFUOztBQUNBLFdBQVMyM0MsUUFBVCxHQUFvQjtBQUNoQixRQUFJejdDLEtBQUssR0FBRzhELE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNudEIsS0FBUCxDQUFhLElBQWIsRUFBbUJtSCxTQUFuQixDQUFuQixJQUFvRCxJQUFoRTs7QUFDQWtpQixTQUFLLENBQUMwN0MsWUFBTixHQUFxQnI5QywyRUFBZ0IsQ0FBQzJCLEtBQUssQ0FBQzI3QyxXQUFQLEVBQW9CMzdDLEtBQUssQ0FBQzQ3QyxhQUExQixDQUFyQztBQUNBNTdDLFNBQUssQ0FBQzY3QyxtQkFBTixHQUE0Qng5QywyRUFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ3E3QyxrQkFBUCxFQUEyQixJQUEzQixFQUFpQyxDQUFDcjdDLEtBQUssQ0FBQzA3QyxZQUFQLENBQWpDLENBQTVDOztBQUNBMTdDLFNBQUssQ0FBQzg3QyxlQUFOLEdBQXdCLFVBQVVoZ0YsRUFBVixFQUFjO0FBQ2xDLFVBQUlvUSxLQUFLLEdBQUc4ekIsS0FBSyxDQUFDOXpCLEtBQWxCOztBQUNBOHpCLFdBQUssQ0FBQ3o5QixRQUFOLENBQWV5c0IsUUFBZixDQUF3QjtBQUNwQnBxQixZQUFJLEVBQUUsOEJBRGM7QUFFcEJJLFVBQUUsRUFBRWtILEtBQUssQ0FBQ2xILEVBRlU7QUFHcEJ1c0Usa0JBQVUsRUFBRSxDQUFDcmxFLEtBQUssQ0FBQ3FsRTtBQUhDLE9BQXhCO0FBS0gsS0FQRDs7QUFRQSxXQUFPdnhDLEtBQVA7QUFDSDs7QUFDRHk3QyxVQUFRLENBQUN6eUUsU0FBVCxDQUFtQnBDLE1BQW5CLEdBQTRCLFVBQVVzRixLQUFWLEVBQWlCO0FBQ3pDLFNBQUt3dkUsWUFBTCxDQUFrQnh2RSxLQUFLLENBQUNrdEUsS0FBeEIsRUFBK0JsdEUsS0FBSyxDQUFDNnZFLGlCQUFyQzs7QUFDQSxTQUFLRixtQkFBTCxDQUF5QjN2RSxLQUFLLENBQUNxbEUsVUFBL0I7O0FBQ0EsU0FBS3hrQixXQUFMLEdBQW1CLElBQW5CO0FBQ0gsR0FKRDs7QUFLQTB1QixVQUFRLENBQUN6eUUsU0FBVCxDQUFtQnkrQixPQUFuQixHQUE2QixZQUFZO0FBQ3JDM0QsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7O0FBQ0EsU0FBS3d5RSxZQUFMLENBQWtCOThDLFFBQWxCLEdBRnFDLENBRVA7O0FBQ2pDLEdBSEQ7O0FBSUE2OEMsVUFBUSxDQUFDenlFLFNBQVQsQ0FBbUIyeUUsV0FBbkIsR0FBaUMsVUFBVXZDLEtBQVYsRUFBaUIyQyxpQkFBakIsRUFBb0M7QUFDakUsUUFBSUMsb0JBQW9CLEdBQUcsS0FBS0Msd0JBQUwsQ0FBOEI3QyxLQUE5QixDQUEzQjtBQUNBLFNBQUsrQixhQUFMLENBQW1CNXhFLFdBQW5CLENBQStCdkIsd0VBQWEsQ0FBQyxJQUFELEVBQU87QUFDL0NKLGVBQVMsRUFBRSxZQURvQztBQUUvQ0MsYUFBTyxFQUFFazBFLGlCQUZzQyxDQUVwQjs7QUFGb0IsS0FBUCxFQUd6QyxLQUFLRyxtQkFBTCxHQUEyQmwwRSx3RUFBYSxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWNnMEUsb0JBQWQsQ0FIQyxDQUE1QyxDQUdnRjtBQUhoRjtBQUtBLFNBQUtHLGNBQUwsR0FBc0JILG9CQUFvQixDQUFDMzBCLGFBQXJCLENBQW1DLFVBQW5DLENBQXRCO0FBQ0EsU0FBSzgwQixjQUFMLENBQW9CcHhFLGFBQXBCLENBQWtDckcsZ0JBQWxDLENBQW1ELE9BQW5ELEVBQTRELEtBQUtvM0UsZUFBakUsRUFSaUUsQ0FTakU7QUFDQTs7QUFDQSxTQUFLVixVQUFMLENBQWdCN3hFLFdBQWhCLENBQTRCdkIsd0VBQWEsQ0FBQyxJQUFELEVBQU87QUFBRUosZUFBUyxFQUFFO0FBQWIsS0FBUCxFQUFvQyxLQUFLdzBFLGdCQUFMLEdBQXdCdi9FLFFBQVEsQ0FBQ21MLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBNUQsQ0FBekM7QUFDSCxHQVpEOztBQWFBeXpFLFVBQVEsQ0FBQ3p5RSxTQUFULENBQW1CNHlFLGFBQW5CLEdBQW1DLFlBQVk7QUFDM0MsU0FBS1QsYUFBTCxDQUFtQjV5RSxTQUFuQixHQUErQixFQUEvQjtBQUNBLFNBQUs2eUUsVUFBTCxDQUFnQjd5RSxTQUFoQixHQUE0QixFQUE1QjtBQUNILEdBSEQ7QUFJQTs7Ozs7QUFHQWt6RSxVQUFRLENBQUN6eUUsU0FBVCxDQUFtQml6RSx3QkFBbkIsR0FBOEMsVUFBVTdDLEtBQVYsRUFBaUI7QUFDM0QsUUFBSWozRSxJQUFJLEdBQUcsS0FBS2s2RSxjQUFMLENBQW9CakQsS0FBcEIsQ0FBWDtBQUNBLFFBQUkvMEIsU0FBUyxHQUFHNTdDLHdFQUFhLENBQUMsa0NBQzFCLDRCQUQwQixHQUUxQiwrQkFGMEIsR0FHMUIsU0FIMEIsR0FJMUIsNkJBSjBCLElBS3pCdEcsSUFBSSxHQUFHaTVCLHFFQUFVLENBQUNqNUIsSUFBRCxDQUFiLEdBQXNCLFFBTEQsSUFNMUIsU0FOMEIsR0FPMUIsUUFQeUIsQ0FBN0I7QUFRQSxRQUFJbXlCLE1BQU0sR0FBRzhrRCxLQUFLLENBQUN0ckIsSUFBTixDQUFXbG5ELE1BQXhCOztBQUNBLFFBQUksT0FBTzB0QixNQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQzlCK3ZCLGVBQVMsR0FBRy92QixNQUFNLENBQUMrdkIsU0FBRCxFQUFZKzBCLEtBQUssQ0FBQzEvRCxLQUFsQixDQUFOLElBQWtDMnFDLFNBQTlDO0FBQ0g7O0FBQ0QsV0FBT0EsU0FBUDtBQUNILEdBZkQ7O0FBZ0JBbzNCLFVBQVEsQ0FBQ3p5RSxTQUFULENBQW1CcXpFLGNBQW5CLEdBQW9DLFVBQVVqRCxLQUFWLEVBQWlCO0FBQ2pELFFBQUlqM0UsSUFBSSxHQUFHaTNFLEtBQUssQ0FBQzEvRCxLQUFOLElBQWUsRUFBMUIsQ0FEaUQsQ0FDbkI7O0FBQzlCLFFBQUk0YSxNQUFNLEdBQUc4a0QsS0FBSyxDQUFDdHJCLElBQU4sQ0FBVzNyRCxJQUF4Qjs7QUFDQSxRQUFJLE9BQU9teUIsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5Qm55QixVQUFJLEdBQUdteUIsTUFBTSxDQUFDbnlCLElBQUQsQ0FBTixJQUFnQkEsSUFBdkI7QUFDSDs7QUFDRCxXQUFPQSxJQUFQO0FBQ0gsR0FQRDs7QUFRQXM1RSxVQUFRLENBQUN6eUUsU0FBVCxDQUFtQnN6RSxZQUFuQixHQUFrQyxZQUFZO0FBQzFDLFdBQU8sQ0FBQyxLQUFLSixtQkFBTixFQUEyQixLQUFLRSxnQkFBaEMsQ0FBUDtBQUNILEdBRkQ7O0FBR0FYLFVBQVEsQ0FBQ3p5RSxTQUFULENBQW1CcXlFLGtCQUFuQixHQUF3QyxVQUFVOUosVUFBVixFQUFzQjtBQUMxRDhKLHNCQUFrQixDQUFDLEtBQUtjLGNBQU4sRUFBc0I1SyxVQUF0QixDQUFsQjtBQUNILEdBRkQ7O0FBR0EsU0FBT2tLLFFBQVA7QUFDSCxDQTVFNkIsQ0E0RTVCWCxHQTVFNEIsQ0FBOUI7O0FBNkVBVyxRQUFRLENBQUMxeUMsZ0JBQVQsQ0FBMEI7QUFDdEJxd0MsT0FBSyxFQUFFdUIsMkVBRGUsQ0FDRDs7QUFEQyxDQUExQjs7QUFJQSxJQUFJNEIsY0FBYztBQUFHO0FBQWUsVUFBVXo0QyxNQUFWLEVBQWtCO0FBQ2xEbmpCLFdBQVMsQ0FBQzQ3RCxjQUFELEVBQWlCejRDLE1BQWpCLENBQVQ7O0FBQ0EsV0FBU3k0QyxjQUFULENBQXdCcCtELE9BQXhCLEVBQWlDcTlELEVBQWpDLEVBQXFDO0FBQ2pDLFFBQUl4N0MsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDdzhDLFVBQU4sR0FBbUJuK0MsMkVBQWdCLENBQUMyQixLQUFLLENBQUN5OEMsU0FBUCxFQUFrQno4QyxLQUFLLENBQUMwOEMsV0FBeEIsQ0FBbkM7QUFDQTE4QyxTQUFLLENBQUMyOEMsbUJBQU4sR0FBNEJ0K0MsMkVBQWdCLENBQUNrOUMsa0JBQUQsRUFBcUIsSUFBckIsRUFBMkIsQ0FBQ3Y3QyxLQUFLLENBQUN3OEMsVUFBUCxDQUEzQixDQUE1QztBQUNBeDhDLFNBQUssQ0FBQzY3QyxtQkFBTixHQUE0Qng5QywyRUFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ3E3QyxrQkFBUCxFQUEyQixJQUEzQixFQUFpQyxDQUFDcjdDLEtBQUssQ0FBQ3c4QyxVQUFQLENBQWpDLENBQTVDOztBQUNBeDhDLFNBQUssQ0FBQzg3QyxlQUFOLEdBQXdCLFVBQVVoZ0YsRUFBVixFQUFjO0FBQ2xDLFVBQUlvUSxLQUFLLEdBQUc4ekIsS0FBSyxDQUFDOXpCLEtBQWxCOztBQUNBOHpCLFdBQUssQ0FBQ3o5QixRQUFOLENBQWV5c0IsUUFBZixDQUF3QjtBQUNwQnBxQixZQUFJLEVBQUUsOEJBRGM7QUFFcEJJLFVBQUUsRUFBRWtILEtBQUssQ0FBQ2xILEVBRlU7QUFHcEJ1c0Usa0JBQVUsRUFBRSxDQUFDcmxFLEtBQUssQ0FBQ3FsRTtBQUhDLE9BQXhCO0FBS0gsS0FQRDs7QUFRQXZ4QyxTQUFLLENBQUN3N0MsRUFBTixHQUFXQSxFQUFYO0FBQ0EsV0FBT3g3QyxLQUFQO0FBQ0g7O0FBQ0R1OEMsZ0JBQWMsQ0FBQ3Z6RSxTQUFmLENBQXlCcEMsTUFBekIsR0FBa0MsVUFBVXNGLEtBQVYsRUFBaUI7QUFDL0MsU0FBS3N3RSxVQUFMLENBQWdCdHdFLEtBQUssQ0FBQ25ILFFBQXRCLEVBQWdDbUgsS0FBSyxDQUFDK3NFLFFBQXRDLEVBQWdEL3NFLEtBQUssQ0FBQ2d0RSxLQUF0RCxFQUE2RGh0RSxLQUFLLENBQUMwd0UsUUFBbkU7O0FBQ0EsU0FBS0QsbUJBQUwsQ0FBeUIsS0FBS25CLEVBQTlCLEVBQWtDdHZFLEtBQUssQ0FBQ25ILFFBQU4sQ0FBZUMsRUFBakQsRUFGK0MsQ0FFTzs7O0FBQ3RELFNBQUs2MkUsbUJBQUwsQ0FBeUIzdkUsS0FBSyxDQUFDdXRFLFdBQS9CLEVBQTRDdnRFLEtBQUssQ0FBQ3FsRSxVQUFsRDtBQUNILEdBSkQ7O0FBS0FnTCxnQkFBYyxDQUFDdnpFLFNBQWYsQ0FBeUJ5K0IsT0FBekIsR0FBbUMsWUFBWTtBQUMzQzNELFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCOztBQUNBLFNBQUtzekUsVUFBTCxDQUFnQjU5QyxRQUFoQixHQUYyQyxDQUVmOztBQUMvQixHQUhEOztBQUlBMjlDLGdCQUFjLENBQUN2ekUsU0FBZixDQUF5Qnl6RSxTQUF6QixHQUFxQyxVQUFVMTNFLFFBQVYsRUFBb0JrMEUsUUFBcEIsRUFBOEJDLEtBQTlCLEVBQXFDMEQsUUFBckMsRUFBK0M7QUFDaEYsUUFBSTNsRSxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWV1a0UsRUFBRSxHQUFHdmtFLEVBQUUsQ0FBQ3VrRSxFQUF2QjtBQUFBLFFBQTJCLzRDLEtBQUssR0FBR3hyQixFQUFFLENBQUN3ckIsS0FBdEM7QUFBQSxRQUE2Q2xnQyxRQUFRLEdBQUcwVSxFQUFFLENBQUMxVSxRQUEzRDtBQUFBLFFBQXFFMnhCLElBQUksR0FBR2pkLEVBQUUsQ0FBQ2lkLElBQS9FOztBQUNBLFFBQUl3bEQsY0FBYyxHQUFHUSx5RkFBbUIsQ0FBQ24xRSxRQUFELENBQXhDLENBRmdGLENBRTVCOztBQUNwRCxRQUFJODNFLE1BQUo7O0FBQ0EsU0FBSyxJQUFJeDFFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd1MUUsUUFBUSxDQUFDdHpFLE1BQTdCLEVBQXFDakMsQ0FBQyxFQUF0QyxFQUEwQztBQUN0QyxVQUFJeTFFLE9BQU8sR0FBR0YsUUFBUSxDQUFDdjFFLENBQUQsQ0FBdEI7QUFDQSxVQUFJUyxPQUFPLEdBQUdteEUsUUFBUSxDQUFDNXhFLENBQUQsQ0FBdEI7O0FBQ0EsVUFBSVMsT0FBTyxLQUFLLENBQWhCLEVBQW1CO0FBQUU7QUFDakI7QUFDSCxPQUZELE1BR0ssSUFBSUEsT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDdEJBLGVBQU8sR0FBRyxDQUFWO0FBQ0g7O0FBQ0QsVUFBSTNGLElBQUksR0FBRyxLQUFLLENBQWhCOztBQUNBLFVBQUkyNkUsT0FBTyxDQUFDLzRFLEtBQVosRUFBbUI7QUFDZjVCLFlBQUksR0FBR3UzRSxjQUFjLENBQUNvRCxPQUFPLENBQUMvNEUsS0FBVCxDQUFyQjtBQUNILE9BRkQsTUFHSztBQUNENUIsWUFBSSxHQUFHeXlFLDJGQUFxQixDQUFDa0ksT0FBTyxDQUFDMzZFLElBQVQsRUFBZUksUUFBZixDQUFyQixDQUE4Q3dDLFFBQTlDLENBQVA7QUFDSDs7QUFDRCxVQUFJcy9DLFNBQVMsR0FBRzU3Qyx3RUFBYSxDQUFDLG1DQUN6QnEwRSxPQUFPLENBQUNDLE1BQVIsR0FBaUJDLGNBQWMsQ0FBQzlELEtBQUQsQ0FBL0IsR0FBeUMsRUFEaEIsSUFFMUIsNkJBRjBCLElBR3pCLzJFLElBQUksR0FBR2k1QixxRUFBVSxDQUFDajVCLElBQUQsQ0FBYixHQUFzQixRQUhELElBSTFCLFNBSjBCLEdBSzFCLFFBTHlCLENBQTdCOztBQU1BLFVBQUksT0FBTzI2RSxPQUFPLENBQUNsMkUsTUFBZixLQUEwQixVQUE5QixFQUEwQztBQUFFO0FBQ3hDeTlDLGlCQUFTLEdBQUd5NEIsT0FBTyxDQUFDbDJFLE1BQVIsQ0FBZSxJQUFJb3JFLHlFQUFKLENBQWdCenZFLFFBQWhCLEVBQTBCd0MsUUFBMUIsQ0FBZixFQUFvRHMvQyxTQUFwRCxLQUFrRUEsU0FBOUU7QUFDSDs7QUFDRCxVQUFJdjhDLE9BQU8sR0FBRyxDQUFkLEVBQWlCO0FBQ2J1OEMsaUJBQVMsQ0FBQ3Q0QyxTQUFWLENBQW9CQyxHQUFwQixDQUF3QixXQUF4QjtBQUNIOztBQUNELFVBQUlpeEUsRUFBRSxHQUFHajFFLHdFQUFhLENBQUMsSUFBRCxFQUFPO0FBQ3pCSixpQkFBUyxFQUFFNjZCLEtBQUssQ0FBQ00sUUFBTixDQUFlLGVBQWYsQ0FEYztBQUV6Qm02QyxlQUFPLEVBQUVwMUU7QUFGZ0IsT0FBUCxFQUduQnU4QyxTQUhtQixDQUF0QixDQTVCc0MsQ0FnQ3RDOztBQUNBLFVBQUl5NEIsT0FBTyxDQUFDQyxNQUFaLEVBQW9CO0FBQ2hCRSxVQUFFLENBQUMxekUsV0FBSCxDQUFlLEtBQUs0ekUsUUFBTCxHQUFnQm4xRSx3RUFBYSxDQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWNpMUUsRUFBRSxDQUFDN3pFLFVBQWpCLENBQTVDLENBQXlFO0FBQXpFO0FBRUF5ekUsY0FBTSxHQUFHSSxFQUFUO0FBQ0g7O0FBQ0R6QixRQUFFLENBQUNqeUUsV0FBSCxDQUFlMHpFLEVBQWY7QUFDSDs7QUFDRCxTQUFLZCxjQUFMLEdBQXNCWCxFQUFFLENBQUNuMEIsYUFBSCxDQUFpQiw2QkFBakIsQ0FBdEIsQ0E1Q2dGLENBNkNoRjs7QUFDQW56QixRQUFJLENBQUNPLGVBQUwsQ0FBcUIsZ0JBQXJCLEVBQXVDLENBQ25DO0FBQ0kxdkIsY0FBUSxFQUFFLElBQUlpdEUseUVBQUosQ0FBZ0J6dkUsUUFBaEIsRUFBMEJ3QyxRQUExQixDQURkO0FBRUlOLFFBQUUsRUFBRW80RSxNQUZSO0FBR0kzb0QsVUFBSSxFQUFFQTtBQUhWLEtBRG1DLENBQXZDO0FBT0gsR0FyREQ7O0FBc0RBcW9ELGdCQUFjLENBQUN2ekUsU0FBZixDQUF5QjB6RSxXQUF6QixHQUF1QyxZQUFZO0FBQy9DLFNBQUtsQixFQUFMLENBQVFqekUsU0FBUixHQUFvQixFQUFwQjtBQUNILEdBRkQ7O0FBR0FnMEUsZ0JBQWMsQ0FBQ3Z6RSxTQUFmLENBQXlCcXlFLGtCQUF6QixHQUE4QyxVQUFVNUIsV0FBVixFQUF1QmxJLFVBQXZCLEVBQW1DO0FBQzdFLFFBQUk0SyxjQUFjLEdBQUcsS0FBS0EsY0FBMUI7QUFDQSxRQUFJaUIsVUFBVSxHQUFHakIsY0FBYyxDQUFDcHhFLGFBQWhDOztBQUNBLFFBQUlveEUsY0FBYyxJQUNkaUIsVUFESixDQUNlO0FBRGYsTUFFRTtBQUNFLFlBQUkzRCxXQUFKLEVBQWlCO0FBQ2IyRCxvQkFBVSxDQUFDMTRFLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLEtBQUtvM0UsZUFBMUM7QUFDQXNCLG9CQUFVLENBQUNyeEUsU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsYUFBekI7QUFDQXF2RSw0QkFBa0IsQ0FBQ2MsY0FBRCxFQUFpQjVLLFVBQWpCLENBQWxCO0FBQ0gsU0FKRCxNQUtLO0FBQ0Q2TCxvQkFBVSxDQUFDdHJFLG1CQUFYLENBQStCLE9BQS9CLEVBQXdDLEtBQUtncUUsZUFBN0M7QUFDQXNCLG9CQUFVLENBQUNyeEUsU0FBWCxDQUFxQnJFLE1BQXJCLENBQTRCLGFBQTVCO0FBQ0E0ekUsMkJBQWlCLENBQUNhLGNBQUQsQ0FBakI7QUFDSDtBQUNKO0FBQ0osR0FqQkQ7O0FBa0JBLFNBQU9JLGNBQVA7QUFDSCxDQXZHbUMsQ0F1R2xDMXpDLDREQXZHa0MsQ0FBcEM7QUF3R0E7Ozs7OztBQUlBLFNBQVNtMEMsY0FBVCxDQUF3QjlELEtBQXhCLEVBQStCO0FBQzNCLE1BQUl4d0UsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsT0FBSyxJQUFJckIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZ4RSxLQUFwQixFQUEyQjd4RSxDQUFDLEVBQTVCLEVBQWdDO0FBQzVCcUIsUUFBSSxJQUFJLCtCQUFSO0FBQ0g7O0FBQ0RBLE1BQUksSUFDQSxxQ0FDSSwrQkFESixHQUVJLFNBSFI7QUFJQSxTQUFPQSxJQUFQO0FBQ0g7O0FBRUQsSUFBSTIwRSxXQUFXO0FBQUc7QUFBZSxVQUFVdjVDLE1BQVYsRUFBa0I7QUFDL0NuakIsV0FBUyxDQUFDMDhELFdBQUQsRUFBY3Y1QyxNQUFkLENBQVQ7O0FBQ0EsV0FBU3U1QyxXQUFULENBQXFCbC9ELE9BQXJCLEVBQThCckwsQ0FBOUIsRUFBaUNnSyxDQUFqQyxFQUFvQ201QyxDQUFwQyxFQUF1QzdoRCxDQUF2QyxFQUEwQ2twRSxRQUExQyxFQUFvRDtBQUNoRCxRQUFJdDlDLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEVBQTJCckwsQ0FBM0IsRUFBOEJnSyxDQUE5QixFQUFpQ201QyxDQUFqQyxFQUFvQzdoRCxDQUFwQyxLQUEwQyxJQUF0RDs7QUFDQTRyQixTQUFLLENBQUMyOEMsbUJBQU4sR0FBNEJ0K0MsMkVBQWdCLENBQUNrOUMsa0JBQUQsQ0FBNUM7QUFDQXY3QyxTQUFLLENBQUN1OUMsY0FBTixHQUF1QixJQUFJaEIsY0FBSixDQUFtQnArRCxPQUFuQixFQUE0QjZoQixLQUFLLENBQUNtN0MsYUFBbEMsQ0FBdkI7O0FBQ0FuN0MsU0FBSyxDQUFDbzdDLFVBQU4sQ0FBaUI3eEUsV0FBakIsQ0FBNkJ2Qix3RUFBYSxDQUFDLElBQUQsRUFBTztBQUFFSixlQUFTLEVBQUVvNEIsS0FBSyxDQUFDeUMsS0FBTixDQUFZTSxRQUFaLENBQXFCLGVBQXJCO0FBQWIsS0FBUCxFQUE2RC9DLEtBQUssQ0FBQ3c5QyxnQkFBTixHQUF5QjNnRixRQUFRLENBQUNtTCxhQUFULENBQXVCLEtBQXZCLENBQXRGLENBQTFDOztBQUNBZzRCLFNBQUssQ0FBQ3k5QyxJQUFOLEdBQWEsSUFBSUMsbUVBQUosQ0FBaUJ2L0QsT0FBakIsRUFBMEI2aEIsS0FBSyxDQUFDdzlDLGdCQUFoQyxFQUFrRHg5QyxLQUFLLENBQUN3OUMsZ0JBQXhELEVBQTBFRixRQUExRSxDQUFiO0FBQ0EsV0FBT3Q5QyxLQUFQO0FBQ0g7O0FBQ0RxOUMsYUFBVyxDQUFDcjBFLFNBQVosQ0FBc0J5K0IsT0FBdEIsR0FBZ0MsWUFBWTtBQUN4QyxTQUFLODFDLGNBQUwsQ0FBb0I5MUMsT0FBcEI7QUFDQSxTQUFLZzJDLElBQUwsQ0FBVWgyQyxPQUFWOztBQUNBM0QsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7QUFDSCxHQUpEOztBQUtBbTBFLGFBQVcsQ0FBQ3IwRSxTQUFaLENBQXNCcEMsTUFBdEIsR0FBK0IsVUFBVXNGLEtBQVYsRUFBaUI7QUFDNUM7QUFDQSxTQUFLcXhFLGNBQUwsQ0FBb0JyMEMsWUFBcEIsQ0FBaUM7QUFDN0IwekMsY0FBUSxFQUFFMXdFLEtBQUssQ0FBQzB3RSxRQURhO0FBRTdCNTNFLFFBQUUsRUFBRWtILEtBQUssQ0FBQ2xILEVBRm1CO0FBRzdCaTBFLGNBQVEsRUFBRS9zRSxLQUFLLENBQUMrc0UsUUFIYTtBQUk3QkMsV0FBSyxFQUFFaHRFLEtBQUssQ0FBQ2d0RSxLQUpnQjtBQUs3QjNILGdCQUFVLEVBQUVybEUsS0FBSyxDQUFDcWxFLFVBTFc7QUFNN0JrSSxpQkFBVyxFQUFFdnRFLEtBQUssQ0FBQ3V0RSxXQU5VO0FBTzdCMTBFLGNBQVEsRUFBRW1ILEtBQUssQ0FBQ25IO0FBUGEsS0FBakM7O0FBU0EsU0FBSzQzRSxtQkFBTCxDQUF5QixLQUFLdkIsVUFBOUIsRUFBMENsdkUsS0FBSyxDQUFDbkgsUUFBTixDQUFlQyxFQUF6RDs7QUFDQSxTQUFLeTRFLElBQUwsQ0FBVXYwQyxZQUFWLENBQXVCO0FBQ25COVMsaUJBQVcsRUFBRWxxQixLQUFLLENBQUNrcUIsV0FEQTtBQUVuQjdXLHNCQUFnQixFQUFFclQsS0FBSyxDQUFDcVQsZ0JBRkw7QUFHbkJzWSxtQkFBYSxFQUFFM3JCLEtBQUssQ0FBQzJyQixhQUhGO0FBSW5CblUsZ0JBQVUsRUFBRXhYLEtBQUssQ0FBQ3dYLFVBSkM7QUFLbkJvUCxrQkFBWSxFQUFFNW1CLEtBQUssQ0FBQzRtQixZQUxEO0FBTW5CNkUsbUJBQWEsRUFBRXpyQixLQUFLLENBQUN5ckIsYUFORjtBQU9uQkcsb0JBQWMsRUFBRTVyQixLQUFLLENBQUM0ckIsY0FQSDtBQVFuQkwsZUFBUyxFQUFFdnJCLEtBQUssQ0FBQ3VyQixTQVJFO0FBU25CTSxpQkFBVyxFQUFFN3JCLEtBQUssQ0FBQzZyQjtBQVRBLEtBQXZCO0FBV0EsU0FBS2cxQixXQUFMLEdBQW1CLElBQW5CO0FBQ0gsR0F4QkQ7O0FBeUJBc3dCLGFBQVcsQ0FBQ3IwRSxTQUFaLENBQXNCKzdDLFVBQXRCLEdBQW1DLFVBQVVnQixRQUFWLEVBQW9CO0FBQ25EamlCLFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCKzdDLFVBQWpCLENBQTRCNzdDLElBQTVCLENBQWlDLElBQWpDLEVBQXVDNjhDLFFBQXZDOztBQUNBLFNBQUswM0IsSUFBTCxDQUFVMTRCLFVBQVYsQ0FBcUJnQixRQUFyQjtBQUNILEdBSEQ7O0FBSUFzM0IsYUFBVyxDQUFDcjBFLFNBQVosQ0FBc0JzekUsWUFBdEIsR0FBcUMsWUFBWTtBQUM3QyxXQUFPLENBQUMsS0FBS2lCLGNBQUwsQ0FBb0JKLFFBQXJCLEVBQStCLEtBQUtLLGdCQUFwQyxDQUFQO0FBQ0gsR0FGRDs7QUFHQSxTQUFPSCxXQUFQO0FBQ0gsQ0FoRGdDLENBZ0QvQnZDLEdBaEQrQixDQUFqQzs7QUFpREF1QyxXQUFXLENBQUN0MEMsZ0JBQVosQ0FBNkI7QUFDekJrd0MsVUFBUSxFQUFFbHhELGdFQURlLENBQ0Q7O0FBREMsQ0FBN0I7QUFJQSxJQUFJNDFELGFBQWEsR0FBRyxFQUFwQjs7QUFDQSxJQUFJQyxpQkFBaUI7QUFBRztBQUFlLFVBQVU5NUMsTUFBVixFQUFrQjtBQUNyRG5qQixXQUFTLENBQUNpOUQsaUJBQUQsRUFBb0I5NUMsTUFBcEIsQ0FBVDs7QUFDQSxXQUFTODVDLGlCQUFULENBQTJCei9ELE9BQTNCLEVBQW9DcW9DLFFBQXBDLEVBQThDO0FBQzFDLFFBQUl4bUIsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDNjlDLFVBQU4sR0FBbUIsRUFBbkI7QUFDQTc5QyxTQUFLLENBQUM4OUMsU0FBTixHQUFrQixFQUFsQjtBQUNBOTlDLFNBQUssQ0FBQ3czQixPQUFOLEdBQWdCLElBQUkzekIsK0RBQUosRUFBaEI7QUFDQTJpQixZQUFRLENBQUNqOUMsV0FBVCxDQUFxQnkyQixLQUFLLENBQUMrOUMsT0FBTixHQUFnQi8xRSx3RUFBYSxDQUFDLE9BQUQsRUFBVTtBQUN4REosZUFBUyxFQUFFbzRCLEtBQUssQ0FBQ3lDLEtBQU4sQ0FBWU0sUUFBWixDQUFxQixXQUFyQjtBQUQ2QyxLQUFWLENBQWxEO0FBR0EsV0FBTy9DLEtBQVA7QUFDSDs7QUFDRDQ5QyxtQkFBaUIsQ0FBQzUwRSxTQUFsQixDQUE0QnkrQixPQUE1QixHQUFzQyxZQUFZO0FBQzlDLFNBQUssSUFBSTVwQixFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUs0bUUsVUFBM0IsRUFBdUNoZ0UsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBL0MsRUFBdUR1VSxFQUFFLEVBQXpELEVBQTZEO0FBQ3pELFVBQUltZ0UsU0FBUyxHQUFHL21FLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBbEI7QUFDQW1nRSxlQUFTLENBQUN2MkMsT0FBVjtBQUNIOztBQUNEdjlCLDRFQUFhLENBQUMsS0FBSzZ6RSxPQUFOLENBQWI7O0FBQ0FqNkMsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7QUFDSCxHQVBEOztBQVFBMDBFLG1CQUFpQixDQUFDNTBFLFNBQWxCLENBQTRCcEMsTUFBNUIsR0FBcUMsVUFBVXNGLEtBQVYsRUFBaUI7QUFDbEQsUUFBSXUyQixLQUFLLEdBQUcsS0FBS0EsS0FBakI7QUFDQSxRQUFJbTZDLFFBQVEsR0FBRzF3RSxLQUFLLENBQUMwd0UsUUFBckI7QUFDQSxRQUFJbDBFLElBQUksR0FBRyxlQUFld0QsS0FBSyxDQUFDK3hFLE9BQXJCLEdBQStCLGFBQS9CLEdBQ1AsU0FESjs7QUFFQSxRQUFJL3hFLEtBQUssQ0FBQ2d5RSxlQUFWLEVBQTJCO0FBQ3ZCeDFFLFVBQUksSUFDQSwwQkFDSSxhQURKLEdBQ29CKzVCLEtBQUssQ0FBQ00sUUFBTixDQUFlLGNBQWYsQ0FEcEIsR0FDcUQsYUFEckQsR0FDcUU2NUMsUUFBUSxDQUFDdHpFLE1BRDlFLEdBQ3VGLElBRHZGLEdBRUksK0JBRkosR0FHSSw2QkFISixHQUlJOHhCLHFFQUFVLENBQUNsdkIsS0FBSyxDQUFDZ3lFLGVBQVAsQ0FKZCxHQUtJLFNBTEosR0FNSSxRQU5KLEdBT0ksT0FQSixHQVFJLE9BVFI7QUFVSDs7QUFDRHgxRSxRQUFJLElBQUksTUFBUjs7QUFDQSxTQUFLLElBQUlyQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdTFFLFFBQVEsQ0FBQ3R6RSxNQUE3QixFQUFxQ2pDLENBQUMsRUFBdEMsRUFBMEM7QUFDdEMsVUFBSTgyRSxDQUFDLEdBQUd2QixRQUFRLENBQUN2MUUsQ0FBRCxDQUFoQjtBQUNBLFVBQUkrMkUsTUFBTSxHQUFHLzJFLENBQUMsS0FBTXUxRSxRQUFRLENBQUN0ekUsTUFBVCxHQUFrQixDQUF0QztBQUNBWixVQUFJLElBQ0EsaUJBQWlCKzVCLEtBQUssQ0FBQ00sUUFBTixDQUFlLGNBQWYsQ0FBakIsR0FBa0QsS0FBbEQsR0FDSSxPQURKLEdBRUksK0JBRkosSUFHS283QyxDQUFDLENBQUNwQixNQUFGLEdBQ0cscUNBQ0ksK0JBREosR0FFSSxTQUhQLEdBSUcsRUFQUixJQVFJLDZCQVJKLEdBU0kzaEQscUVBQVUsQ0FBQytpRCxDQUFDLENBQUNyNkUsU0FBRixJQUFlLEVBQWhCLENBVGQsR0FTb0M7QUFDaEMsZUFWSixHQVdJLFFBWEosSUFZSyxDQUFDczZFLE1BQUQsR0FBVSxvQ0FBVixHQUFpRCxFQVp0RCxJQWFJLFFBYkosR0FjSSxPQWZSO0FBZ0JIOztBQUNEMTFFLFFBQUksSUFBSSxPQUFSO0FBQ0FBLFFBQUksSUFBSSxVQUFSO0FBQ0EsU0FBS3ExRSxPQUFMLENBQWF4MUUsU0FBYixHQUF5QkcsSUFBekI7QUFDQSxTQUFLMjFFLEtBQUwsR0FBYXQxRSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQixLQUFLNjBFLE9BQUwsQ0FBYXp5RSxnQkFBYixDQUE4QixJQUE5QixDQUEzQixDQUFiO0FBQ0EsU0FBS2d6RSxNQUFMLEdBQWN2MUUsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkIsS0FBSzYwRSxPQUFMLENBQWF6eUUsZ0JBQWIsQ0FBOEIsS0FBOUIsQ0FBM0IsQ0FBZDtBQUNBLFNBQUtpekUsVUFBTCxHQUFrQngxRSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQixLQUFLNjBFLE9BQUwsQ0FBYXp5RSxnQkFBYixDQUE4QixpQkFBOUIsQ0FBM0IsQ0FBbEI7QUFDQSxTQUFLa3pFLGVBQUw7QUFDSCxHQTdDRDs7QUE4Q0FaLG1CQUFpQixDQUFDNTBFLFNBQWxCLENBQTRCdzFFLGVBQTVCLEdBQThDLFlBQVk7QUFDdEQsUUFBSXgrQyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxRQUFJeStDLG1CQUFtQixHQUFHLEtBQUtsOEUsUUFBTCxDQUFjb2lCLFlBQWQsQ0FBMkJDLEtBQTNCLENBQWlDdW5CLG1CQUEzRDs7QUFDQSxRQUFJc3lDLG1CQUFKLEVBQXlCO0FBQ3JCLFdBQUtaLFVBQUwsR0FBa0IsS0FBS1UsVUFBTCxDQUFnQm50RSxHQUFoQixDQUFvQixVQUFVc3RFLFFBQVYsRUFBb0JDLFFBQXBCLEVBQThCO0FBQ2hFLFlBQUk5WSxRQUFRLEdBQUcsSUFBSTRZLG1CQUFKLENBQXdCQyxRQUF4QixDQUFmO0FBQ0EsWUFBSUUsVUFBSjtBQUNBL1ksZ0JBQVEsQ0FBQ3JPLE9BQVQsQ0FBaUJqd0QsRUFBakIsQ0FBb0IsV0FBcEIsRUFBaUMsWUFBWTtBQUN6Q3EzRSxvQkFBVSxHQUFHNStDLEtBQUssQ0FBQzg5QyxTQUFOLENBQWdCYSxRQUFoQixDQUFiOztBQUNBLGNBQUksT0FBT0MsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNoQ0Esc0JBQVUsR0FBRzUrQyxLQUFLLENBQUNxK0MsS0FBTixDQUFZTSxRQUFaLEVBQXNCcndFLHFCQUF0QixHQUE4Q3RLLEtBQTNEO0FBQ0g7QUFDSixTQUxEO0FBTUE2aEUsZ0JBQVEsQ0FBQ3JPLE9BQVQsQ0FBaUJqd0QsRUFBakIsQ0FBb0IsVUFBcEIsRUFBZ0MsVUFBVTRuRCxHQUFWLEVBQWU7QUFDM0NudkIsZUFBSyxDQUFDODlDLFNBQU4sQ0FBZ0JhLFFBQWhCLElBQTRCM3hFLElBQUksQ0FBQ0MsR0FBTCxDQUFTMnhFLFVBQVUsR0FBR3p2QixHQUFHLENBQUMvaEQsTUFBSixJQUFjNHlCLEtBQUssQ0FBQ3hULEtBQU4sR0FBYyxDQUFDLENBQWYsR0FBbUIsQ0FBakMsQ0FBdEIsRUFBMkRteEQsYUFBM0QsQ0FBNUI7O0FBQ0EzOUMsZUFBSyxDQUFDdzNCLE9BQU4sQ0FBY3g3RCxPQUFkLENBQXNCLGdCQUF0QixFQUF3Q2drQyxLQUFLLENBQUM4OUMsU0FBOUM7QUFDSCxTQUhEO0FBSUFqWSxnQkFBUSxDQUFDbE8sb0JBQVQsQ0FBOEIsS0FBOUIsRUFiZ0UsQ0FhMUI7O0FBQ3RDLGVBQU9rTyxRQUFQO0FBQ0gsT0FmaUIsQ0FBbEI7QUFnQkg7QUFDSixHQXJCRDs7QUFzQkEsU0FBTytYLGlCQUFQO0FBQ0gsQ0F6RnNDLENBeUZyQy8wQyw0REF6RnFDLENBQXZDOztBQTJGQSxJQUFJZzJDLFdBQVc7QUFBRztBQUFlLFVBQVUvNkMsTUFBVixFQUFrQjtBQUMvQ25qQixXQUFTLENBQUNrK0QsV0FBRCxFQUFjLzZDLE1BQWQsQ0FBVDs7QUFDQSxXQUFTKzZDLFdBQVQsQ0FBcUIxZ0UsT0FBckIsRUFBOEIyZ0UsWUFBOUIsRUFBNENDLFlBQTVDLEVBQTBEO0FBQ3RELFFBQUkvK0MsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDMDdDLFlBQU4sR0FBcUJyOUMsMkVBQWdCLENBQUMyQixLQUFLLENBQUMyN0MsV0FBUCxFQUFvQjM3QyxLQUFLLENBQUM0N0MsYUFBMUIsQ0FBckM7QUFDQTU3QyxTQUFLLENBQUNvaUIsTUFBTixHQUFlLElBQUk0OEIsdUVBQUosQ0FBcUJGLFlBQXJCLEVBQW1DQyxZQUFuQyxFQUFpRCxnQkFBakQsQ0FBZjtBQUNBLFFBQUlFLHNCQUFzQixHQUFHai9DLEtBQUssQ0FBQ29pQixNQUFOLENBQWE4OEIsY0FBYixDQUE0QkMsY0FBekQ7QUFDQSxRQUFJQyxvQkFBb0IsR0FBR3AvQyxLQUFLLENBQUNvaUIsTUFBTixDQUFhaTlCLFlBQWIsQ0FBMEJGLGNBQXJEO0FBQ0FuL0MsU0FBSyxDQUFDOThCLE1BQU4sR0FBZSxJQUFJMDZFLGlCQUFKLENBQXNCei9ELE9BQXRCLEVBQStCOGdFLHNCQUFzQixDQUFDSyxNQUF2QixDQUE4Qmo3QixTQUE3RCxDQUFmOztBQUNBcmtCLFNBQUssQ0FBQzk4QixNQUFOLENBQWFzMEQsT0FBYixDQUFxQmp3RCxFQUFyQixDQUF3QixnQkFBeEIsRUFBMEMsVUFBVXUyRSxTQUFWLEVBQXFCO0FBQzNEOTlDLFdBQUssQ0FBQ3UvQyxjQUFOLENBQXFCekIsU0FBckI7QUFDSCxLQUZEOztBQUdBc0Isd0JBQW9CLENBQUNFLE1BQXJCLENBQTRCajdCLFNBQTVCLENBQ0s5NkMsV0FETCxDQUNpQnkyQixLQUFLLENBQUN3L0MsZUFBTixHQUF3QngzRSx3RUFBYSxDQUFDLEtBQUQsRUFBUTtBQUFFSixlQUFTLEVBQUU7QUFBYixLQUFSLEVBQWtDLFlBQ3BGLGNBRG9GLEdBRXBGLFdBRm9GLEdBR3BGLFVBSGtELENBRHREO0FBS0FvNEIsU0FBSyxDQUFDeS9DLFlBQU4sR0FBcUJ6L0MsS0FBSyxDQUFDdy9DLGVBQU4sQ0FBc0JuNEIsYUFBdEIsQ0FBb0MsVUFBcEMsQ0FBckI7QUFDQXJuQixTQUFLLENBQUMwL0MsU0FBTixHQUFrQjEvQyxLQUFLLENBQUN3L0MsZUFBTixDQUFzQm40QixhQUF0QixDQUFvQyxPQUFwQyxDQUFsQjtBQUNBLFdBQU9ybkIsS0FBUDtBQUNIOztBQUNENitDLGFBQVcsQ0FBQzcxRSxTQUFaLENBQXNCeStCLE9BQXRCLEdBQWdDLFlBQVk7QUFDeEMsU0FBS3ZrQyxNQUFMLENBQVl1a0MsT0FBWjtBQUNBLFNBQUsyYSxNQUFMLENBQVkzYSxPQUFaOztBQUNBLFNBQUtpMEMsWUFBTCxDQUFrQjk4QyxRQUFsQjs7QUFDQWtGLFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCO0FBQ0gsR0FMRDs7QUFNQTIxRSxhQUFXLENBQUM3MUUsU0FBWixDQUFzQnBDLE1BQXRCLEdBQStCLFVBQVVzRixLQUFWLEVBQWlCO0FBQzVDLFNBQUt3dkUsWUFBTCxDQUFrQnh2RSxLQUFLLENBQUNneUUsZUFBeEIsRUFBeUNoeUUsS0FBSyxDQUFDMHdFLFFBQS9DO0FBQ0gsR0FGRDs7QUFHQWlDLGFBQVcsQ0FBQzcxRSxTQUFaLENBQXNCMnlFLFdBQXRCLEdBQW9DLFVBQVV1QyxlQUFWLEVBQTJCdEIsUUFBM0IsRUFBcUM7QUFDckUsUUFBSXFCLE9BQU8sR0FBRyxLQUFLMEIsYUFBTCxDQUFtQi9DLFFBQW5CLENBQWQ7QUFDQSxTQUFLMTVFLE1BQUwsQ0FBWWdtQyxZQUFaLENBQXlCO0FBQ3JCZzFDLHFCQUFlLEVBQUVBLGVBREk7QUFFckJ0QixjQUFRLEVBQUVBLFFBRlc7QUFHckJxQixhQUFPLEVBQUVBO0FBSFksS0FBekI7QUFLQSxTQUFLd0IsWUFBTCxDQUFrQmwzRSxTQUFsQixHQUE4QjAxRSxPQUE5QjtBQUNBLFNBQUsyQixVQUFMLEdBQWtCNzJFLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCLEtBQUt1MkUsWUFBTCxDQUFrQm4wRSxnQkFBbEIsQ0FBbUMsS0FBbkMsQ0FBM0IsQ0FBbEI7QUFDQSxTQUFLaTBFLGNBQUwsQ0FBb0IzQyxRQUFRLENBQUN4ckUsR0FBVCxDQUFhLFVBQVUwckUsT0FBVixFQUFtQjtBQUFFLGFBQU9BLE9BQU8sQ0FBQzk0RSxLQUFmO0FBQXVCLEtBQXpELENBQXBCO0FBQ0gsR0FWRDs7QUFXQTY2RSxhQUFXLENBQUM3MUUsU0FBWixDQUFzQjR5RSxhQUF0QixHQUFzQyxZQUFZO0FBQzlDLFNBQUs2RCxZQUFMLENBQWtCbDNFLFNBQWxCLEdBQThCLEVBQTlCO0FBQ0gsR0FGRDs7QUFHQXMyRSxhQUFXLENBQUM3MUUsU0FBWixDQUFzQjIyRSxhQUF0QixHQUFzQyxVQUFVL0MsUUFBVixFQUFvQjtBQUN0RCxRQUFJbDBFLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSW1WLEVBQUUsR0FBRyxDQUFULEVBQVlnaUUsVUFBVSxHQUFHakQsUUFBOUIsRUFBd0MvK0QsRUFBRSxHQUFHZ2lFLFVBQVUsQ0FBQ3YyRSxNQUF4RCxFQUFnRXVVLEVBQUUsRUFBbEUsRUFBc0U7QUFDbEUsVUFBSXNnRSxDQUFDLEdBQUcwQixVQUFVLENBQUNoaUUsRUFBRCxDQUFsQjs7QUFDQSxVQUFJc2dFLENBQUMsQ0FBQ3BCLE1BQU4sRUFBYztBQUNWcjBFLFlBQUksSUFBSSw0QkFBUjtBQUNILE9BRkQsTUFHSztBQUNEQSxZQUFJLElBQUksUUFBUjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT0EsSUFBUDtBQUNILEdBWkQ7O0FBYUFtMkUsYUFBVyxDQUFDNzFFLFNBQVosQ0FBc0IrN0MsVUFBdEIsR0FBbUMsVUFBVWdCLFFBQVYsRUFBb0IrNUIsV0FBcEIsRUFBaUM3dEIsTUFBakMsRUFBeUM7QUFDeEUsU0FBSzdQLE1BQUwsQ0FBWTVhLFNBQVosQ0FBc0JzNEMsV0FBdEIsRUFBbUM3dEIsTUFBbkM7QUFDSCxHQUZEOztBQUdBNHNCLGFBQVcsQ0FBQzcxRSxTQUFaLENBQXNCdTJFLGNBQXRCLEdBQXVDLFVBQVV6QixTQUFWLEVBQXFCO0FBQ3hELFFBQUk5OUMsS0FBSyxHQUFHLElBQVo7O0FBQ0E4OUMsYUFBUyxDQUFDdHJFLE9BQVYsQ0FBa0IsVUFBVXV0RSxRQUFWLEVBQW9CcEIsUUFBcEIsRUFBOEI7QUFDNUMsVUFBSXFCLE1BQU0sR0FBR2hnRCxLQUFLLENBQUM5OEIsTUFBTixDQUFhbzdFLE1BQWIsQ0FBb0JLLFFBQXBCLENBQWIsQ0FENEMsQ0FDQTs7QUFDNUMsVUFBSXNCLE1BQU0sR0FBR2pnRCxLQUFLLENBQUM0L0MsVUFBTixDQUFpQmpCLFFBQWpCLENBQWI7QUFDQSxVQUFJdUIsUUFBSjs7QUFDQSxVQUFJLE9BQU9ILFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDOUJHLGdCQUFRLEdBQUdILFFBQVEsR0FBRyxJQUF0QjtBQUNILE9BRkQsTUFHSyxJQUFJLE9BQU9BLFFBQVAsSUFBbUIsSUFBdkIsRUFBNkI7QUFDOUJHLGdCQUFRLEdBQUcsRUFBWDtBQUNIOztBQUNERixZQUFNLENBQUMxekUsS0FBUCxDQUFhdEksS0FBYixHQUFxQmk4RSxNQUFNLENBQUMzekUsS0FBUCxDQUFhdEksS0FBYixHQUFxQms4RSxRQUExQztBQUNILEtBWEQ7QUFZSCxHQWREOztBQWVBLFNBQU9yQixXQUFQO0FBQ0gsQ0E1RWdDLENBNEUvQmgyQyw0REE1RStCLENBQWpDOztBQThFQSxJQUFJczNDLHVCQUF1QixHQUFHLEVBQTlCLEMsQ0FBa0M7O0FBQ2xDLElBQUlDLG9CQUFvQjtBQUFHO0FBQWUsVUFBVXQ4QyxNQUFWLEVBQWtCO0FBQ3hEbmpCLFdBQVMsQ0FBQ3kvRCxvQkFBRCxFQUF1QnQ4QyxNQUF2QixDQUFUOztBQUNBLFdBQVNzOEMsb0JBQVQsQ0FBOEJqaUUsT0FBOUIsRUFBdUMwN0IsUUFBdkMsRUFBaURnTCxvQkFBakQsRUFBdUUyQixRQUF2RSxFQUFpRjtBQUM3RSxRQUFJeG1CLEtBQUssR0FBRzhELE1BQU0sQ0FBQzU2QixJQUFQLENBQVksSUFBWixFQUFrQmlWLE9BQWxCLEVBQTJCMDdCLFFBQTNCLEVBQXFDZ0wsb0JBQXJDLEVBQTJEMkIsUUFBM0QsS0FBd0UsSUFBcEY7O0FBQ0F4bUIsU0FBSyxDQUFDcWdELG1CQUFOLEdBQTRCLEtBQTVCO0FBQ0FyZ0QsU0FBSyxDQUFDc2dELFFBQU4sR0FBaUIsRUFBakI7QUFDQXRnRCxTQUFLLENBQUN1Z0QsYUFBTixHQUFzQixFQUF0QjtBQUNBdmdELFNBQUssQ0FBQ3dnRCxpQkFBTixHQUEwQixFQUExQjtBQUNBeGdELFNBQUssQ0FBQ3lnRCwwQkFBTixHQUFtQyxFQUFuQztBQUNBemdELFNBQUssQ0FBQ2t6QyxRQUFOLEdBQWlCLElBQUlGLDhFQUFKLEVBQWpCLENBUDZFLENBT3BDOztBQUN6Q2h6QyxTQUFLLENBQUMwZ0Qsd0JBQU4sR0FBaUN4NEQsa0VBQU8sQ0FBQ3c0RCx3QkFBRCxDQUF4QztBQUNBMWdELFNBQUssQ0FBQ3k0QyxhQUFOLEdBQXNCdndELGtFQUFPLENBQUN1d0QsMkVBQUQsQ0FBN0I7QUFDQXo0QyxTQUFLLENBQUMyZ0QsVUFBTixHQUFtQno0RCxrRUFBTyxDQUFDeTRELFVBQUQsQ0FBMUI7QUFDQTNnRCxTQUFLLENBQUM0Z0QsaUJBQU4sR0FBMEJ2aUQsMkVBQWdCLENBQUMyQixLQUFLLENBQUM2Z0QsZ0JBQVAsQ0FBMUM7QUFDQSxRQUFJQyxXQUFXLEdBQUc5Z0QsS0FBSyxDQUFDcmEsR0FBTixDQUFVLGlCQUFWLEtBQWdDLEVBQWxEOztBQUNBLFFBQUk3aEIsU0FBUyxHQUFHazhCLEtBQUssQ0FBQ3JhLEdBQU4sQ0FBVSxtQkFBVixDQUFoQixDQWI2RSxDQWE3Qjs7O0FBQ2hELFFBQUlvN0QsZ0JBQWdCLEdBQUcsV0FBdkIsQ0FkNkUsQ0FjekM7O0FBQ3BDLFFBQUk3QyxlQUFlLEdBQUcsSUFBdEI7O0FBQ0EsUUFBSSxDQUFDNEMsV0FBVyxDQUFDeDNFLE1BQWpCLEVBQXlCO0FBQ3JCdzNFLGlCQUFXLENBQUN0MUUsSUFBWixDQUFpQjtBQUNiMUgsaUJBQVMsRUFBRUEsU0FBUyxJQUFJaTlFLGdCQURYO0FBRWI1K0UsWUFBSSxFQUFFeXlFLDJGQUFxQixDQUFDNTBDLEtBQUssQ0FBQ3JhLEdBQU4sQ0FBVSxjQUFWLENBQUQsRUFBNEJxYSxLQUFLLENBQUN6OUIsUUFBbEM7QUFGZCxPQUFqQjtBQUlILEtBTEQsTUFNSztBQUNEMjdFLHFCQUFlLEdBQUdwNkUsU0FBbEI7QUFDSDs7QUFDRCxRQUFJazlFLGFBQWEsR0FBRyxFQUFwQjtBQUNBLFFBQUlDLGFBQWEsR0FBRyxFQUFwQjtBQUNBLFFBQUl2SSxVQUFVLEdBQUcsRUFBakI7QUFDQSxRQUFJQyxXQUFXLEdBQUcsS0FBbEI7QUFDQSxRQUFJdUksV0FBVyxHQUFHLEtBQWxCOztBQUNBLFNBQUssSUFBSXJqRSxFQUFFLEdBQUcsQ0FBVCxFQUFZc2pFLGFBQWEsR0FBR0wsV0FBakMsRUFBOENqakUsRUFBRSxHQUFHc2pFLGFBQWEsQ0FBQzczRSxNQUFqRSxFQUF5RXVVLEVBQUUsRUFBM0UsRUFBK0U7QUFDM0UsVUFBSWkvRCxPQUFPLEdBQUdxRSxhQUFhLENBQUN0akUsRUFBRCxDQUEzQjs7QUFDQSxVQUFJaS9ELE9BQU8sQ0FBQzFELEtBQVosRUFBbUI7QUFDZjZILHFCQUFhLENBQUN6MUUsSUFBZCxDQUFtQnN4RSxPQUFuQjtBQUNILE9BRkQsTUFHSztBQUNEa0UscUJBQWEsQ0FBQ3gxRSxJQUFkLENBQW1Cc3hFLE9BQW5CO0FBQ0g7QUFDSjs7QUFDRGtFLGlCQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCakUsTUFBakIsR0FBMEIsSUFBMUI7O0FBQ0EsUUFBSWtFLGFBQWEsQ0FBQzMzRSxNQUFsQixFQUEwQjtBQUN0Qm92RSxnQkFBVSxHQUFHdUksYUFBYjtBQUNBdEksaUJBQVcsR0FBRyxJQUFkO0FBQ0gsS0FIRCxNQUlLO0FBQ0QsVUFBSXlJLFdBQVcsR0FBR3BoRCxLQUFLLENBQUNyYSxHQUFOLENBQVUsb0JBQVYsQ0FBbEI7O0FBQ0EsVUFBSXk3RCxXQUFKLEVBQWlCO0FBQ2JGLG1CQUFXLEdBQUcsSUFBZDtBQUNBeEksa0JBQVUsQ0FBQ2x0RSxJQUFYLENBQWdCO0FBQ1p6SCxlQUFLLEVBQUVxOUUsV0FESztBQUVaai9FLGNBQUksRUFBRTY5QixLQUFLLENBQUNyYSxHQUFOLENBQVUsbUJBQVYsQ0FGTTtBQUdaL2UsZ0JBQU0sRUFBRW81QixLQUFLLENBQUNyYSxHQUFOLENBQVUscUJBQVY7QUFISSxTQUFoQjtBQUtIO0FBQ0o7O0FBQ0QsUUFBSTA3RCxhQUFhLEdBQUd6bEUsMEVBQWUsQ0FBQ29rQixLQUFLLENBQUNyYSxHQUFOLENBQVUsZUFBVixDQUFELENBQW5DO0FBQ0EsUUFBSTI3RCxlQUFlLEdBQUcsRUFBdEI7O0FBQ0EsU0FBSyxJQUFJcnFFLEVBQUUsR0FBRyxDQUFULEVBQVlzcUUsZUFBZSxHQUFHRixhQUFuQyxFQUFrRHBxRSxFQUFFLEdBQUdzcUUsZUFBZSxDQUFDajRFLE1BQXZFLEVBQStFMk4sRUFBRSxFQUFqRixFQUFxRjtBQUNqRixVQUFJdXFFLFNBQVMsR0FBR0QsZUFBZSxDQUFDdHFFLEVBQUQsQ0FBL0I7QUFDQSxVQUFJd3FFLE9BQU8sR0FBRyxLQUFkOztBQUNBLFdBQUssSUFBSTN4RCxFQUFFLEdBQUcsQ0FBVCxFQUFZNHhELFlBQVksR0FBR2hKLFVBQWhDLEVBQTRDNW9ELEVBQUUsR0FBRzR4RCxZQUFZLENBQUNwNEUsTUFBOUQsRUFBc0V3bUIsRUFBRSxFQUF4RSxFQUE0RTtBQUN4RSxZQUFJeXFELFNBQVMsR0FBR21ILFlBQVksQ0FBQzV4RCxFQUFELENBQTVCOztBQUNBLFlBQUl5cUQsU0FBUyxDQUFDeDJFLEtBQVYsS0FBb0J5OUUsU0FBUyxDQUFDejlFLEtBQWxDLEVBQXlDO0FBQ3JDdzJFLG1CQUFTLENBQUNuK0QsS0FBVixHQUFrQm9sRSxTQUFTLENBQUNwbEUsS0FBNUIsQ0FEcUMsQ0FDRjs7QUFDbkNxbEUsaUJBQU8sR0FBRyxJQUFWO0FBQ0E7QUFDSDtBQUNKOztBQUNELFVBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1ZILHVCQUFlLENBQUM5MUUsSUFBaEIsQ0FBcUJnMkUsU0FBckI7QUFDSDtBQUNKOztBQUNEeGhELFNBQUssQ0FBQ2srQyxlQUFOLEdBQXdCQSxlQUF4QjtBQUNBbCtDLFNBQUssQ0FBQzI0QyxXQUFOLEdBQW9CQSxXQUFwQjtBQUNBMzRDLFNBQUssQ0FBQ2toRCxXQUFOLEdBQW9CQSxXQUFwQjtBQUNBbGhELFNBQUssQ0FBQzA0QyxVQUFOLEdBQW1CQSxVQUFuQjtBQUNBMTRDLFNBQUssQ0FBQzQ4QyxRQUFOLEdBQWlCcUUsYUFBYSxDQUFDNXZFLE1BQWQsQ0FBcUIydkUsYUFBckIsQ0FBakI7QUFDQWhoRCxTQUFLLENBQUN3NEMsVUFBTixHQUFtQjhJLGVBQW5CLENBN0U2RSxDQThFN0U7O0FBQ0F0aEQsU0FBSyxDQUFDdjdCLEVBQU4sQ0FBU3NILFNBQVQsQ0FBbUJDLEdBQW5CLENBQXVCLGFBQXZCOztBQUNBLFFBQUlnMEIsS0FBSyxDQUFDcmEsR0FBTixDQUFVLGNBQVYsTUFBOEIsS0FBbEMsRUFBeUM7QUFDckNxYSxXQUFLLENBQUN2N0IsRUFBTixDQUFTc0gsU0FBVCxDQUFtQkMsR0FBbkIsQ0FBdUIsZUFBdkI7QUFDSDs7QUFDRGcwQixTQUFLLENBQUN2N0IsRUFBTixDQUFTOEQsU0FBVCxHQUFxQnkzQixLQUFLLENBQUMyaEQsa0JBQU4sRUFBckI7QUFDQTNoRCxTQUFLLENBQUM0aEQsa0JBQU4sR0FBMkI1aEQsS0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzRpRCxhQUFULENBQXVCLHlCQUF2QixDQUEzQjs7QUFDQXJuQixTQUFLLENBQUM2aEQsb0JBQU4sQ0FBMkI3aEQsS0FBSyxDQUFDcmEsR0FBTixDQUFVLG1CQUFWLENBQTNCOztBQUNBcWEsU0FBSyxDQUFDOGhELDZCQUFOOztBQUNBOWhELFNBQUssQ0FBQytoRCxVQUFOLEdBQW1CL2hELEtBQUssQ0FBQ3Y3QixFQUFOLENBQVM2SixxQkFBVCxHQUFpQ3FDLE1BQXBEO0FBQ0FxdkIsU0FBSyxDQUFDZ2lELFdBQU4sR0FBb0IsSUFBSW5ELFdBQUosQ0FBZ0I3K0MsS0FBSyxDQUFDN2hCLE9BQXRCLEVBQStCNmhCLEtBQUssQ0FBQzRoRCxrQkFBckMsRUFBeUQ1aEQsS0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzRpRCxhQUFULENBQXVCLHlCQUF2QixDQUF6RCxDQUFwQjtBQUNBcm5CLFNBQUssQ0FBQ3M5QyxRQUFOLEdBQWlCLElBQUkyRSwrREFBSixDQUFhamlELEtBQUssQ0FBQzdoQixPQUFuQixFQUE0QjZoQixLQUFLLENBQUN2N0IsRUFBTixDQUFTNGlELGFBQVQsQ0FBdUIscUJBQXZCLENBQTVCLEVBQTJFcm5CLEtBQUssQ0FBQ3Y3QixFQUFOLENBQVM0aUQsYUFBVCxDQUF1QixxQkFBdkIsQ0FBM0UsQ0FBakI7QUFDQSxRQUFJNjZCLG9CQUFvQixHQUFHbDZFLHdFQUFhLENBQUMsS0FBRCxFQUFRO0FBQUVKLGVBQVMsRUFBRTtBQUFiLEtBQVIsRUFBa0MsMEJBQWxDLENBQXhDOztBQUNBbzRCLFNBQUssQ0FBQ3M5QyxRQUFOLENBQWVsN0IsTUFBZixDQUFzQmk5QixZQUF0QixDQUFtQ0YsY0FBbkMsQ0FBa0RHLE1BQWxELENBQXlEajdCLFNBQXpELENBQW1FOTZDLFdBQW5FLENBQStFMjRFLG9CQUEvRTs7QUFDQWxpRCxTQUFLLENBQUNtaUQsYUFBTixHQUFzQkQsb0JBQW9CLENBQUM3NkIsYUFBckIsQ0FBbUMsT0FBbkMsQ0FBdEI7QUFDQXJuQixTQUFLLENBQUN5OUMsSUFBTixHQUFhLElBQUlDLG1FQUFKLENBQWlCMTlDLEtBQUssQ0FBQzdoQixPQUF2QixFQUFnQyxJQUFoQyxFQUFzQzZoQixLQUFLLENBQUNzOUMsUUFBTixDQUFlbDdCLE1BQWYsQ0FBc0JpOUIsWUFBdEIsQ0FBbUNGLGNBQW5DLENBQWtERyxNQUFsRCxDQUF5RDhDLElBQS9GLEVBQXFHcGlELEtBQUssQ0FBQ3M5QyxRQUEzRyxDQUFiO0FBQ0F0OUMsU0FBSyxDQUFDcWlELGdCQUFOLEdBQXlCLElBQUlDLG1FQUFKLENBQWlCLFVBQWpCLEVBQTZCLENBQ2xEdGlELEtBQUssQ0FBQ2dpRCxXQUFOLENBQWtCNS9CLE1BQWxCLENBQXlCaTlCLFlBRHlCLEVBRWxEci9DLEtBQUssQ0FBQ3M5QyxRQUFOLENBQWVsN0IsTUFBZixDQUFzQmk5QixZQUY0QixDQUE3QixDQUF6QixDQTlGNkUsQ0FrRzdFOztBQUNBci9DLFNBQUssQ0FBQ3VpRCw2QkFBTixHQUFzQyxJQUFJQyxxRUFBSixDQUFtQnhpRCxLQUFLLENBQUNnaUQsV0FBTixDQUFrQjUvQixNQUFsQixDQUF5Qmk5QixZQUF6QixDQUFzQ0YsY0FBekQsRUFBeUVuL0MsS0FBSyxDQUFDeFQsS0FBL0UsRUFBc0YsSUFBdEYsQ0FBMkY7QUFBM0YsS0FBdEM7O0FBRUF3VCxTQUFLLENBQUNnaUQsV0FBTixDQUFrQjk0QyxZQUFsQixDQUErQjtBQUMzQmcxQyxxQkFBZSxFQUFFbCtDLEtBQUssQ0FBQ2srQyxlQURJO0FBRTNCdEIsY0FBUSxFQUFFNThDLEtBQUssQ0FBQzQ4QztBQUZXLEtBQS9CLEVBckc2RSxDQXlHN0U7OztBQUNBeitELFdBQU8sQ0FBQzViLFFBQVIsQ0FBaUJnc0QsNEJBQWpCLENBQThDdnVCLEtBQTlDLEVBQXFEO0FBQ2pEdjdCLFFBQUUsRUFBRXU3QixLQUFLLENBQUNzOUMsUUFBTixDQUFlbUYsS0FBZixDQUFxQmgrRTtBQUR3QixLQUFyRDtBQUdBLFdBQU91N0IsS0FBUDtBQUNIOztBQUNEb2dELHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCMjRFLGtCQUEvQixHQUFvRCxZQUFZO0FBQzVELFFBQUlsL0MsS0FBSyxHQUFHLEtBQUtBLEtBQWpCO0FBQ0EsV0FBTyxvQkFBb0JBLEtBQUssQ0FBQ00sUUFBTixDQUFlLFdBQWYsQ0FBcEIsR0FBa0Qsa0VBQWxELEdBQXVITixLQUFLLENBQUNNLFFBQU4sQ0FBZSxjQUFmLENBQXZILEdBQXdKLGlEQUF4SixHQUE0TU4sS0FBSyxDQUFDTSxRQUFOLENBQWUsY0FBZixDQUE1TSxHQUE2TyxvQ0FBN08sR0FBb1JOLEtBQUssQ0FBQ00sUUFBTixDQUFlLGNBQWYsQ0FBcFIsR0FBcVQsc0ZBQXJULEdBQThZTixLQUFLLENBQUNNLFFBQU4sQ0FBZSxlQUFmLENBQTlZLEdBQWdiLGlEQUFoYixHQUFvZU4sS0FBSyxDQUFDTSxRQUFOLENBQWUsY0FBZixDQUFwZSxHQUFxZ0Isb0NBQXJnQixHQUE0aUJOLEtBQUssQ0FBQ00sUUFBTixDQUFlLGVBQWYsQ0FBNWlCLEdBQThrQixrQ0FBcmxCO0FBQ0gsR0FIRDs7QUFJQXE5QyxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQnBDLE1BQS9CLEdBQXdDLFVBQVVzRixLQUFWLEVBQWlCO0FBQ3JENDNCLFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCcEMsTUFBakIsQ0FBd0JzQyxJQUF4QixDQUE2QixJQUE3QixFQUFtQ2dELEtBQW5DOztBQUNBLFFBQUk2ekIsVUFBVSxHQUFHLEtBQUttekMsUUFBTCxDQUFjbnpDLFVBQWQsQ0FBeUI3ekIsS0FBekIsQ0FBakI7QUFDQSxRQUFJdzBFLHdCQUF3QixHQUFHLEtBQUtBLHdCQUFMLENBQThCeDBFLEtBQUssQ0FBQ2lpRSxhQUFwQyxDQUEvQjtBQUNBLFNBQUttUCxRQUFMLENBQWNwMEMsWUFBZCxDQUEyQjtBQUN2QjlTLGlCQUFXLEVBQUVscUIsS0FBSyxDQUFDa3FCO0FBREksS0FBM0IsRUFKcUQsQ0FPckQ7O0FBQ0EsU0FBS3FuRCxJQUFMLENBQVV2MEMsWUFBVixDQUF1QnBvQixRQUFRLENBQUMsRUFBRCxFQUFLaWYsVUFBVSxDQUFDLEVBQUQsQ0FBZixFQUFxQjtBQUFFM0osaUJBQVcsRUFBRWxxQixLQUFLLENBQUNrcUIsV0FBckI7QUFBa0M3VyxzQkFBZ0IsRUFBRSxLQUFLQSxnQkFBekQ7QUFBMkVzWSxtQkFBYSxFQUFFNm9ELHdCQUF3QixHQUFHLElBQUgsR0FBVXgwRSxLQUFLLENBQUMyckI7QUFBbEksS0FBckIsQ0FBL0I7QUFDQSxRQUFJNnFELFdBQVcsR0FBRyxLQUFLakssYUFBTCxDQUFtQnZzRSxLQUFLLENBQUNpaUUsYUFBekIsRUFBd0MsS0FBS3VLLFVBQTdDLEVBQXlELEtBQUtGLFVBQTlELEVBQTBFLEtBQUtHLFdBQS9FLEVBQTRGenNFLEtBQUssQ0FBQ2tpRSx3QkFBbEcsRUFBNEgsS0FBS3pvRCxHQUFMLENBQVMsNEJBQVQsQ0FBNUgsQ0FBbEI7O0FBQ0EsU0FBS2k3RCxpQkFBTCxDQUF1QixLQUFLRCxVQUFMLENBQWdCK0IsV0FBaEIsQ0FBdkI7O0FBQ0EsU0FBS0MsUUFBTCxDQUFjRCxXQUFkO0FBQ0EsU0FBS0UsVUFBTCxDQUFnQjEyRSxLQUFLLENBQUNrcUIsV0FBdEIsRUFBbUNzcUQsd0JBQXdCLEdBQUd4MEUsS0FBSyxDQUFDMnJCLGFBQVQsR0FBeUIsSUFBcEYsRUFBMEY7QUFDMUZrSSxjQURBO0FBRUgsR0FkRDs7QUFlQXFnRCxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjYzRSxnQkFBL0IsR0FBa0QsVUFBVWdDLFNBQVYsRUFBcUI7QUFDbkUsUUFBSTkyRSxTQUFTLEdBQUcsS0FBS3RILEVBQUwsQ0FBUXNILFNBQXhCOztBQUNBLFFBQUk4MkUsU0FBSixFQUFlO0FBQ1g5MkUsZUFBUyxDQUFDckUsTUFBVixDQUFpQixTQUFqQjtBQUNILEtBRkQsTUFHSztBQUNEcUUsZUFBUyxDQUFDQyxHQUFWLENBQWMsU0FBZDtBQUNIO0FBQ0osR0FSRDs7QUFTQW8wRSxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjI1RSxRQUEvQixHQUEwQyxVQUFVRyxRQUFWLEVBQW9CO0FBQzFELFFBQUlDLFFBQVEsR0FBRyxLQUFLekMsUUFBcEI7QUFDQSxRQUFJMEMsTUFBTSxHQUFHRCxRQUFRLENBQUN6NUUsTUFBdEI7QUFDQSxRQUFJMjVFLFlBQVksR0FBRyxFQUFuQixDQUgwRCxDQUduQzs7QUFDdkIsUUFBSUMsSUFBSSxHQUFHLENBQVg7QUFDQSxRQUFJQyxJQUFJLEdBQUcsQ0FBWDs7QUFDQSxTQUFLRCxJQUFJLEdBQUcsQ0FBWixFQUFlQSxJQUFJLEdBQUdGLE1BQXRCLEVBQThCRSxJQUFJLEVBQWxDLEVBQXNDO0FBQ2xDRCxrQkFBWSxDQUFDRixRQUFRLENBQUNHLElBQUQsQ0FBUixDQUFlbCtFLEVBQWhCLENBQVosR0FBa0NrK0UsSUFBbEM7QUFDSCxLQVJ5RCxDQVMxRDs7O0FBQ0EsU0FBS0EsSUFBSSxHQUFHLENBQVAsRUFBVUMsSUFBSSxHQUFHLENBQXRCLEVBQXlCQSxJQUFJLEdBQUdMLFFBQVEsQ0FBQ3g1RSxNQUF6QyxFQUFpRDY1RSxJQUFJLEVBQXJELEVBQXlEO0FBQ3JELFVBQUlDLE9BQU8sR0FBR04sUUFBUSxDQUFDSyxJQUFELENBQXRCO0FBQ0EsVUFBSUUsU0FBUyxHQUFHSixZQUFZLENBQUNHLE9BQU8sQ0FBQ3ArRSxFQUFULENBQTVCOztBQUNBLFVBQUlxK0UsU0FBUyxJQUFJLElBQWIsSUFBcUJBLFNBQVMsSUFBSUgsSUFBdEMsRUFBNEM7QUFDeEMsYUFBS0ksVUFBTCxDQUFnQkgsSUFBaEIsRUFBc0JFLFNBQVMsR0FBR0gsSUFBbEMsRUFBd0NILFFBQXhDLEVBRHdDLENBQ1c7O0FBQ25ERyxZQUFJLEdBQUdHLFNBQVMsR0FBRyxDQUFuQjtBQUNILE9BSEQsTUFJSztBQUNELGFBQUtFLE1BQUwsQ0FBWUosSUFBWixFQUFrQkMsT0FBbEI7QUFDSDtBQUNKLEtBcEJ5RCxDQXFCMUQ7OztBQUNBLFNBQUtFLFVBQUwsQ0FBZ0JILElBQWhCLEVBQXNCSCxNQUFNLEdBQUdFLElBQS9CLEVBQXFDSCxRQUFyQyxFQXRCMEQsQ0FzQlY7O0FBQ2hELFNBQUt6QyxRQUFMLEdBQWdCd0MsUUFBaEI7QUFDSCxHQXhCRDtBQXlCQTs7Ozs7QUFHQTFDLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCdTZFLE1BQS9CLEdBQXdDLFVBQVU3b0IsS0FBVixFQUFpQjhvQixPQUFqQixFQUEwQjtBQUM5RCxRQUFJdnNFLEVBQUUsR0FBRyxJQUFUO0FBQUEsUUFBZXNwRSxhQUFhLEdBQUd0cEUsRUFBRSxDQUFDc3BFLGFBQWxDO0FBQUEsUUFBaURDLGlCQUFpQixHQUFHdnBFLEVBQUUsQ0FBQ3VwRSxpQkFBeEU7O0FBQ0EsUUFBSWlELGFBQWEsR0FBR2xELGFBQWEsQ0FBQzdsQixLQUFELENBQWpDO0FBQ0EsUUFBSWdwQixZQUFZLEdBQUcsS0FBS0MsbUJBQUwsQ0FBeUJILE9BQXpCLEVBQWtDLEtBQUt4QixXQUFMLENBQWlCdEMsU0FBbkQsRUFBOEQrRCxhQUFhLEdBQUdBLGFBQWEsQ0FBQ3RJLGFBQWpCLEdBQWlDLElBQTVHLEVBQWtILEtBQUtnSCxhQUF2SCxFQUFzSXNCLGFBQWEsR0FBR0EsYUFBYSxDQUFDckksVUFBakIsR0FBOEIsSUFBakwsQ0FBbkI7QUFDQW1GLGlCQUFhLENBQUN6NEQsTUFBZCxDQUFxQjR5QyxLQUFyQixFQUE0QixDQUE1QixFQUErQmdwQixZQUEvQjtBQUNBbEQscUJBQWlCLENBQUNnRCxPQUFPLENBQUN4K0UsRUFBVCxDQUFqQixHQUFnQzArRSxZQUFoQztBQUNILEdBTkQ7O0FBT0F0RCxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQnM2RSxVQUEvQixHQUE0QyxVQUFVTSxVQUFWLEVBQXNCdm1FLEdBQXRCLEVBQTJCd21FLFdBQTNCLEVBQXdDO0FBQ2hGLFFBQUl4bUUsR0FBSixFQUFTO0FBQ0wsVUFBSXBHLEVBQUUsR0FBRyxJQUFUO0FBQUEsVUFBZXNwRSxhQUFhLEdBQUd0cEUsRUFBRSxDQUFDc3BFLGFBQWxDO0FBQUEsVUFBaURDLGlCQUFpQixHQUFHdnBFLEVBQUUsQ0FBQ3VwRSxpQkFBeEU7O0FBQ0EsV0FBSyxJQUFJbjVFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdnVyxHQUFwQixFQUF5QmhXLENBQUMsRUFBMUIsRUFBOEI7QUFDMUIsWUFBSXk4RSxZQUFZLEdBQUd2RCxhQUFhLENBQUNxRCxVQUFVLEdBQUd2OEUsQ0FBZCxDQUFoQztBQUNBeThFLG9CQUFZLENBQUNyOEMsT0FBYjtBQUNBLGVBQU8rNEMsaUJBQWlCLENBQUNxRCxXQUFXLENBQUN4OEUsQ0FBRCxDQUFYLENBQWVyQyxFQUFoQixDQUF4QjtBQUNIOztBQUNEdTdFLG1CQUFhLENBQUN6NEQsTUFBZCxDQUFxQjg3RCxVQUFyQixFQUFpQ3ZtRSxHQUFqQztBQUNIO0FBQ0osR0FWRDs7QUFXQStpRSxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjI2RSxtQkFBL0IsR0FBcUQsVUFBVWhlLElBQVYsRUFBZ0JvZSxnQkFBaEIsRUFBa0NDLGVBQWxDLEVBQW1EN0IsYUFBbkQsRUFBa0U4QixZQUFsRSxFQUFnRjtBQUNqSSxRQUFJdGUsSUFBSSxDQUFDeVQsS0FBVCxFQUFnQjtBQUNaLGFBQU8sSUFBSXFDLFFBQUosQ0FBYSxLQUFLdDlELE9BQWxCLEVBQTJCNGxFLGdCQUEzQixFQUE2Q0MsZUFBN0MsRUFBOEQ3QixhQUE5RCxFQUE2RThCLFlBQTdFLENBQVA7QUFDSCxLQUZELE1BR0ssSUFBSXRlLElBQUksQ0FBQzVnRSxRQUFULEVBQW1CO0FBQ3BCLGFBQU8sSUFBSXM0RSxXQUFKLENBQWdCLEtBQUtsL0QsT0FBckIsRUFBOEI0bEUsZ0JBQTlCLEVBQWdEQyxlQUFoRCxFQUFpRTdCLGFBQWpFLEVBQWdGOEIsWUFBaEYsRUFBOEYsS0FBSzNHLFFBQW5HLENBQVA7QUFDSDtBQUNKLEdBUEQ7O0FBUUE4QyxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjQ1RSxVQUEvQixHQUE0QyxVQUFVeHNELFdBQVYsRUFBdUI4dEQscUJBQXZCLEVBQThDbmtELFVBQTlDLEVBQTBEO0FBQ2xHLFFBQUk5b0IsRUFBRSxHQUFHLElBQVQ7QUFBQSxRQUFlcXBFLFFBQVEsR0FBR3JwRSxFQUFFLENBQUNxcEUsUUFBN0I7QUFBQSxRQUF1Q0MsYUFBYSxHQUFHdHBFLEVBQUUsQ0FBQ3NwRSxhQUExRDs7QUFDQSxTQUFLLElBQUlsNUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2k1RSxRQUFRLENBQUNoM0UsTUFBN0IsRUFBcUNqQyxDQUFDLEVBQXRDLEVBQTBDO0FBQ3RDLFVBQUltOEUsT0FBTyxHQUFHbEQsUUFBUSxDQUFDajVFLENBQUQsQ0FBdEI7QUFDQSxVQUFJeThFLFlBQVksR0FBR3ZELGFBQWEsQ0FBQ2w1RSxDQUFELENBQWhDOztBQUNBLFVBQUltOEUsT0FBTyxDQUFDcEssS0FBWixFQUFtQjtBQUNmMEssb0JBQVksQ0FBQzU2QyxZQUFiLENBQTBCO0FBQ3RCNnlDLDJCQUFpQixFQUFFLEtBQUthLFFBQUwsQ0FBY3R6RSxNQURYO0FBRXRCdEUsWUFBRSxFQUFFdytFLE9BQU8sQ0FBQ3grRSxFQUZVO0FBR3RCdXNFLG9CQUFVLEVBQUVpUyxPQUFPLENBQUNqUyxVQUhFO0FBSXRCNkgsZUFBSyxFQUFFb0ssT0FBTyxDQUFDcEs7QUFKTyxTQUExQjtBQU1ILE9BUEQsTUFRSztBQUNELFlBQUlyMEUsUUFBUSxHQUFHeStFLE9BQU8sQ0FBQ3orRSxRQUF2QjtBQUNBKytFLG9CQUFZLENBQUM1NkMsWUFBYixDQUEwQnBvQixRQUFRLENBQUMsRUFBRCxFQUFLaWYsVUFBVSxDQUFDaDdCLFFBQVEsQ0FBQ0MsRUFBVixDQUFmLEVBQThCO0FBQUVveEIscUJBQVcsRUFBRUEsV0FBZjtBQUE0QjdXLDBCQUFnQixFQUFFLEtBQUtBLGdCQUFuRDtBQUFxRXNZLHVCQUFhLEVBQUU5eUIsUUFBUSxDQUFDOHlCLGFBQVQsSUFBMEJxc0QscUJBQTlHO0FBQXFJdEgsa0JBQVEsRUFBRSxLQUFLQSxRQUFwSjtBQUE4SjUzRSxZQUFFLEVBQUV3K0UsT0FBTyxDQUFDeCtFLEVBQTFLO0FBQThLaTBFLGtCQUFRLEVBQUV1SyxPQUFPLENBQUN2SyxRQUFoTTtBQUEwTUMsZUFBSyxFQUFFc0ssT0FBTyxDQUFDdEssS0FBek47QUFBZ08zSCxvQkFBVSxFQUFFaVMsT0FBTyxDQUFDalMsVUFBcFA7QUFBZ1FrSSxxQkFBVyxFQUFFK0osT0FBTyxDQUFDL0osV0FBclI7QUFBa1MxMEUsa0JBQVEsRUFBRXkrRSxPQUFPLENBQUN6K0U7QUFBcFQsU0FBOUIsQ0FBbEM7QUFDSDtBQUNKO0FBQ0osR0FsQkQ7O0FBbUJBcTdFLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCKzdDLFVBQS9CLEdBQTRDLFVBQVVnQixRQUFWLEVBQW9CRyxVQUFwQixFQUFnQytMLE1BQWhDLEVBQXdDO0FBQ2hGO0FBQ0EsUUFBSTF2RCxRQUFRLEdBQUcsS0FBS0EsUUFBcEI7QUFDQSxRQUFJNGhGLFlBQVksR0FBR3ArQixRQUFRLElBQUl4akQsUUFBUSxDQUFDdW5ELGFBQXJCLElBQXNDdm5ELFFBQVEsQ0FBQ3duRCxjQUEvQyxJQUFpRXhuRCxRQUFRLENBQUN5bkQsZUFBN0Y7O0FBQ0EsUUFBSW02QixZQUFKLEVBQWtCO0FBQ2QsV0FBS0MsZUFBTDtBQUNBLFdBQUs5RyxRQUFMLENBQWN2NEIsVUFBZCxDQUF5QmdCLFFBQXpCLEVBQW1DRyxVQUFVLEdBQUcsS0FBSzY3QixVQUFyRCxFQUFpRTl2QixNQUFqRTtBQUNBLFdBQUsrdkIsV0FBTCxDQUFpQmo5QixVQUFqQixDQUE0QmdCLFFBQTVCLEVBQXNDRyxVQUFVLEdBQUcsS0FBSzY3QixVQUF4RCxFQUFvRTl2QixNQUFwRTtBQUNIOztBQUNELFFBQUlveUIsWUFBWSxHQUFHLEtBQUtDLGNBQUwsQ0FBb0J2K0IsUUFBcEIsQ0FBbkI7QUFDQSxTQUFLMDNCLElBQUwsQ0FBVTE0QixVQUFWLENBQXFCZ0IsUUFBckIsRUFWZ0YsQ0FVaEQ7O0FBQ2hDLFFBQUlvK0IsWUFBWSxJQUFJRSxZQUFwQixFQUFrQztBQUM5QixXQUFLaEMsZ0JBQUwsQ0FBc0JqdkIsTUFBdEI7QUFDQSxXQUFLa3FCLFFBQUwsQ0FBY2w3QixNQUFkLENBQXFCbWlDLFlBQXJCLENBQWtDbnhCLE1BQWxDLEdBRjhCLENBRWM7O0FBQzVDLFdBQUtveEIsWUFBTCxHQUFvQixJQUFJamdELGdFQUFKLENBQWtCLEtBQUsrNEMsUUFBTCxDQUFjbUYsS0FBZCxDQUFvQmgrRSxFQUF0QyxFQUEwQyxLQUFLODdFLGFBQUwsQ0FBbUJudkUsR0FBbkIsQ0FBdUIsVUFBVTB5RSxZQUFWLEVBQXdCO0FBQ3pHLGVBQU9BLFlBQVksQ0FBQzFJLFVBQXBCO0FBQ0gsT0FGNkQsQ0FBMUMsRUFFaEIsS0FGZ0IsRUFFVDtBQUNYLFVBSG9CLENBR2Y7QUFIZSxPQUFwQjtBQUtBLFdBQUtvSixZQUFMLENBQWtCNy9DLEtBQWxCO0FBQ0EsV0FBSzA3QyxtQkFBTCxHQUEyQixJQUEzQjtBQUNIO0FBQ0osR0F0QkQ7O0FBdUJBRCxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQm83RSxlQUEvQixHQUFpRCxZQUFZO0FBQ3pELFFBQUlLLGlCQUFpQixHQUFHLEtBQUt6QyxXQUFMLENBQWlCOStFLE1BQWpCLENBQXdCNjZFLE9BQWhEO0FBQ0EsUUFBSTJHLGNBQWMsR0FBRyxLQUFLcEgsUUFBTCxDQUFjcDZFLE1BQWQsQ0FBcUI2NkUsT0FBMUM7QUFDQTBHLHFCQUFpQixDQUFDbjRFLEtBQWxCLENBQXdCcUUsTUFBeEIsR0FBaUMsRUFBakM7QUFDQSt6RSxrQkFBYyxDQUFDcDRFLEtBQWYsQ0FBcUJxRSxNQUFyQixHQUE4QixFQUE5QjtBQUNBLFFBQUkxRCxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBTCxDQUFTdzNFLGlCQUFpQixDQUFDbjJFLHFCQUFsQixHQUEwQ3FDLE1BQW5ELEVBQTJEK3pFLGNBQWMsQ0FBQ3AyRSxxQkFBZixHQUF1Q3FDLE1BQWxHLENBQVY7QUFDQTh6RSxxQkFBaUIsQ0FBQ240RSxLQUFsQixDQUF3QnFFLE1BQXhCLEdBQ0krekUsY0FBYyxDQUFDcDRFLEtBQWYsQ0FBcUJxRSxNQUFyQixHQUE4QjFELEdBQUcsR0FBRyxJQUR4QztBQUVILEdBUkQ7O0FBU0FtekUsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0JzN0UsY0FBL0IsR0FBZ0QsVUFBVXYrQixRQUFWLEVBQW9CO0FBQ2hFLFFBQUk0K0Isa0JBQWtCLEdBQUcsS0FBS3BFLGFBQTlCOztBQUNBLFFBQUksQ0FBQ3g2QixRQUFMLEVBQWU7QUFDWDQrQix3QkFBa0IsR0FBR0Esa0JBQWtCLENBQUNyd0QsTUFBbkIsQ0FBMEIsVUFBVXd2RCxZQUFWLEVBQXdCO0FBQ25FLGVBQU9BLFlBQVksQ0FBQy8yQixXQUFwQjtBQUNILE9BRm9CLENBQXJCO0FBR0g7O0FBQ0QsUUFBSTYzQixRQUFRLEdBQUdELGtCQUFrQixDQUFDdnpFLEdBQW5CLENBQXVCLFVBQVUweUUsWUFBVixFQUF3QjtBQUMxRCxhQUFPQSxZQUFZLENBQUN4SCxZQUFiLEVBQVA7QUFDSCxLQUZjLENBQWYsQ0FQZ0UsQ0FVaEU7O0FBQ0EsU0FBSyxJQUFJeitELEVBQUUsR0FBRyxDQUFULEVBQVlnbkUsVUFBVSxHQUFHRCxRQUE5QixFQUF3Qy9tRSxFQUFFLEdBQUdnbkUsVUFBVSxDQUFDdjdFLE1BQXhELEVBQWdFdVUsRUFBRSxFQUFsRSxFQUFzRTtBQUNsRSxVQUFJaW5FLE9BQU8sR0FBR0QsVUFBVSxDQUFDaG5FLEVBQUQsQ0FBeEI7O0FBQ0EsV0FBSyxJQUFJNUcsRUFBRSxHQUFHLENBQVQsRUFBWTh0RSxTQUFTLEdBQUdELE9BQTdCLEVBQXNDN3RFLEVBQUUsR0FBRzh0RSxTQUFTLENBQUN6N0UsTUFBckQsRUFBNkQyTixFQUFFLEVBQS9ELEVBQW1FO0FBQy9ELFlBQUl4UyxFQUFFLEdBQUdzZ0YsU0FBUyxDQUFDOXRFLEVBQUQsQ0FBbEI7QUFDQXhTLFVBQUUsQ0FBQzZILEtBQUgsQ0FBU3FFLE1BQVQsR0FBa0IsRUFBbEI7QUFDSDtBQUNKLEtBakIrRCxDQWtCaEU7OztBQUNBLFNBQUssSUFBSW1mLEVBQUUsR0FBRyxDQUFULEVBQVlrMUQsb0JBQW9CLEdBQUdMLGtCQUF4QyxFQUE0RDcwRCxFQUFFLEdBQUdrMUQsb0JBQW9CLENBQUMxN0UsTUFBdEYsRUFBOEZ3bUIsRUFBRSxFQUFoRyxFQUFvRztBQUNoRyxVQUFJZzBELFlBQVksR0FBR2tCLG9CQUFvQixDQUFDbDFELEVBQUQsQ0FBdkM7QUFDQWcwRCxrQkFBWSxDQUFDLytCLFVBQWIsQ0FBd0JnQixRQUF4QixFQUZnRyxDQUU3RDtBQUN0Qzs7QUFDRCxRQUFJay9CLFVBQVUsR0FBR0wsUUFBUSxDQUFDeHpFLEdBQVQsQ0FBYSxVQUFVMHpFLE9BQVYsRUFBbUI7QUFDN0MsVUFBSUksU0FBUyxHQUFHLElBQWhCOztBQUNBLFdBQUssSUFBSXJuRSxFQUFFLEdBQUcsQ0FBVCxFQUFZc25FLFNBQVMsR0FBR0wsT0FBN0IsRUFBc0NqbkUsRUFBRSxHQUFHc25FLFNBQVMsQ0FBQzc3RSxNQUFyRCxFQUE2RHVVLEVBQUUsRUFBL0QsRUFBbUU7QUFDL0QsWUFBSXBaLEVBQUUsR0FBRzBnRixTQUFTLENBQUN0bkUsRUFBRCxDQUFsQjtBQUNBLFlBQUlsTixNQUFNLEdBQUdsTSxFQUFFLENBQUM2SixxQkFBSCxHQUEyQnFDLE1BQXhDOztBQUNBLFlBQUl1MEUsU0FBUyxLQUFLLElBQWQsSUFBc0J2MEUsTUFBTSxHQUFHdTBFLFNBQW5DLEVBQThDO0FBQzFDQSxtQkFBUyxHQUFHdjBFLE1BQVo7QUFDSDtBQUNKOztBQUNELGFBQU91MEUsU0FBUDtBQUNILEtBVmdCLENBQWpCOztBQVdBLFNBQUssSUFBSTc5RSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdTlFLFFBQVEsQ0FBQ3Q3RSxNQUE3QixFQUFxQ2pDLENBQUMsRUFBdEMsRUFBMEM7QUFDdEMsV0FBSyxJQUFJNjVCLEVBQUUsR0FBRyxDQUFULEVBQVltM0MsRUFBRSxHQUFHdU0sUUFBUSxDQUFDdjlFLENBQUQsQ0FBOUIsRUFBbUM2NUIsRUFBRSxHQUFHbTNDLEVBQUUsQ0FBQy91RSxNQUEzQyxFQUFtRDQzQixFQUFFLEVBQXJELEVBQXlEO0FBQ3JELFlBQUl6OEIsRUFBRSxHQUFHNHpFLEVBQUUsQ0FBQ24zQyxFQUFELENBQVg7QUFDQXo4QixVQUFFLENBQUM2SCxLQUFILENBQVNxRSxNQUFULEdBQWtCczBFLFVBQVUsQ0FBQzU5RSxDQUFELENBQVYsR0FBZ0IsSUFBbEM7QUFDSDtBQUNKOztBQUNELFdBQU9zOUUsa0JBQWtCLENBQUNyN0UsTUFBMUI7QUFDSCxHQXpDRDs7QUEwQ0E4MkUsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0J5K0IsT0FBL0IsR0FBeUMsWUFBWTtBQUNqRCxTQUFLLElBQUk1cEIsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLc3BFLGFBQTNCLEVBQTBDMWlFLEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQWxELEVBQTBEdVUsRUFBRSxFQUE1RCxFQUFnRTtBQUM1RCxVQUFJaW1FLFlBQVksR0FBRzdzRSxFQUFFLENBQUM0RyxFQUFELENBQXJCO0FBQ0FpbUUsa0JBQVksQ0FBQ3I4QyxPQUFiO0FBQ0g7O0FBQ0QsU0FBSzY0QyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixFQUFyQjtBQUNBLFNBQUt5QixXQUFMLENBQWlCdjZDLE9BQWpCO0FBQ0EsU0FBSzYxQyxRQUFMLENBQWM3MUMsT0FBZDs7QUFDQSxTQUFLLElBQUkzWCxFQUFFLEdBQUcsQ0FBVCxFQUFZb1IsRUFBRSxHQUFHLEtBQUt1L0MsMEJBQTNCLEVBQXVEM3dELEVBQUUsR0FBR29SLEVBQUUsQ0FBQzUzQixNQUEvRCxFQUF1RXdtQixFQUFFLEVBQXpFLEVBQTZFO0FBQ3pFLFVBQUlzMUQseUJBQXlCLEdBQUdsa0QsRUFBRSxDQUFDcFIsRUFBRCxDQUFsQztBQUNBczFELCtCQUF5QixDQUFDMzlDLE9BQTFCO0FBQ0g7O0FBQ0QsU0FBSzg2Qyw2QkFBTCxDQUFtQzk2QyxPQUFuQzs7QUFDQTNELFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCOztBQUNBLFNBQUszRyxRQUFMLENBQWNzc0QsOEJBQWQsQ0FBNkMsSUFBN0M7QUFDSCxHQWhCRCxDQWhTd0QsQ0FpVHhEO0FBQ0E7OztBQUNBdXhCLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCc3FELG1CQUEvQixHQUFxRCxVQUFVbDlCLFdBQVYsRUFBdUI7QUFDeEUsV0FBTyxLQUFLa25ELFFBQUwsQ0FBY2hxQixtQkFBZCxDQUFrQ2w5QixXQUFsQyxDQUFQO0FBQ0gsR0FGRDs7QUFHQWdxRCxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjZxRCxrQkFBL0IsR0FBb0QsVUFBVWx0RCxJQUFWLEVBQWdCO0FBQ2hFLFNBQUsyMkUsUUFBTCxDQUFjenBCLGtCQUFkLENBQWlDbHRELElBQWpDO0FBQ0gsR0FGRDs7QUFHQXk1RSxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjRxRCxvQkFBL0IsR0FBc0QsWUFBWTtBQUM5RCxTQUFLMHBCLFFBQUwsQ0FBYzFwQixvQkFBZDtBQUNILEdBRkQsQ0F6VHdELENBNFR4RDtBQUNBO0FBQ0E7OztBQUNBd3NCLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCeThDLFdBQS9CLEdBQTZDLFlBQVk7QUFDckQsUUFBSXJlLE1BQU0sR0FBR3RELE1BQU0sQ0FBQzk2QixTQUFQLENBQWlCeThDLFdBQWpCLENBQTZCdjhDLElBQTdCLENBQWtDLElBQWxDLENBQWI7O0FBQ0EsUUFBSSxLQUFLZ0QsS0FBTCxDQUFXaWlFLGFBQWYsRUFBOEI7QUFDMUJydEQsY0FBUSxDQUFDc21CLE1BQUQsRUFBUyxLQUFLaStDLG1CQUFMLEVBQVQsQ0FBUjtBQUNIOztBQUNELFdBQU9qK0MsTUFBUDtBQUNILEdBTkQ7O0FBT0FnNUMsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0JxakQsV0FBL0IsR0FBNkMsVUFBVWpsQixNQUFWLEVBQWtCMmUsUUFBbEIsRUFBNEI7QUFDckVqaUIsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJxakQsV0FBakIsQ0FBNkJuakQsSUFBN0IsQ0FBa0MsSUFBbEMsRUFBd0NrK0IsTUFBeEMsRUFBZ0QyZSxRQUFoRDs7QUFDQSxRQUFJLEtBQUs3NUMsS0FBTCxDQUFXaWlFLGFBQWYsRUFBOEI7QUFDMUIsV0FBS21YLG1CQUFMLENBQXlCbCtDLE1BQXpCO0FBQ0gsS0FKb0UsQ0FLckU7OztBQUNBLFFBQUkyZSxRQUFRLElBQUksS0FBS3M2QixtQkFBckIsRUFBMEM7QUFDdEMsV0FBS0EsbUJBQUwsR0FBMkIsS0FBM0I7QUFDQSxXQUFLa0MsNkJBQUwsQ0FBbUN4OUIsVUFBbkM7QUFDQSxXQUFLdTRCLFFBQUwsQ0FBY2lJLHFCQUFkO0FBQ0g7QUFDSixHQVhEOztBQVlBbkYsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0JvckQsaUJBQS9CLEdBQW1ELFVBQVV6eUMsUUFBVixFQUFvQjtBQUNuRSxXQUFPLEtBQUsyN0QsUUFBTCxDQUFjbHBCLGlCQUFkLENBQWdDenlDLFFBQWhDLENBQVA7QUFDSCxHQUZEOztBQUdBeStELHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCbXJELGVBQS9CLEdBQWlELFlBQVk7QUFDekQsV0FBTyxLQUFLbXBCLFFBQUwsQ0FBY25wQixlQUFkLEVBQVA7QUFDSCxHQUZEOztBQUdBaXNCLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCcXJELGVBQS9CLEdBQWlELFVBQVVqdEIsTUFBVixFQUFrQjtBQUMvRCxTQUFLazJDLFFBQUwsQ0FBY2pwQixlQUFkLENBQThCanRCLE1BQTlCO0FBQ0gsR0FGRDs7QUFHQWc1QyxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQnE4RSxtQkFBL0IsR0FBcUQsWUFBWTtBQUM3RCxRQUFJcHVFLEVBQUUsR0FBRyxJQUFUO0FBQUEsUUFBZXNwRSxhQUFhLEdBQUd0cEUsRUFBRSxDQUFDc3BFLGFBQWxDO0FBQUEsUUFBaURELFFBQVEsR0FBR3JwRSxFQUFFLENBQUNxcEUsUUFBL0Q7O0FBQ0EsUUFBSWw1QyxNQUFNLEdBQUcsRUFBYjtBQUNBLFFBQUlvK0MsV0FBVyxHQUFHLEtBQUtsSSxRQUFMLENBQWNsN0IsTUFBZCxDQUFxQmk5QixZQUFyQixDQUFrQzU2RSxFQUFsQyxDQUFxQzZKLHFCQUFyQyxHQUE2RDVCLEdBQS9FLENBSDZELENBR3VCOztBQUNwRixTQUFLLElBQUlyRixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHazVFLGFBQWEsQ0FBQ2ozRSxNQUFsQyxFQUEwQ2pDLENBQUMsRUFBM0MsRUFBK0M7QUFDM0MsVUFBSXk4RSxZQUFZLEdBQUd2RCxhQUFhLENBQUNsNUUsQ0FBRCxDQUFoQztBQUNBLFVBQUltOEUsT0FBTyxHQUFHbEQsUUFBUSxDQUFDajVFLENBQUQsQ0FBdEI7QUFDQSxVQUFJNUMsRUFBRSxHQUFHcS9FLFlBQVksQ0FBQzFJLFVBQXRCO0FBQ0EsVUFBSXFLLFFBQVEsR0FBR2hoRixFQUFFLENBQUM2SixxQkFBSCxHQUEyQjNCLE1BQTFDLENBSjJDLENBSU87O0FBQ2xELFVBQUk4NEUsUUFBUSxHQUFHRCxXQUFmLEVBQTRCO0FBQ3hCcCtDLGNBQU0sQ0FBQ3MrQyxLQUFQLEdBQWVsQyxPQUFPLENBQUN4K0UsRUFBdkI7QUFDQW9pQyxjQUFNLENBQUN6NkIsTUFBUCxHQUFnQjg0RSxRQUFRLEdBQUdELFdBQTNCO0FBQ0E7QUFDSDtBQUNKLEtBZDRELENBZTdEOzs7QUFDQSxXQUFPcCtDLE1BQVA7QUFDSCxHQWpCRDs7QUFrQkFnNUMsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0JzOEUsbUJBQS9CLEdBQXFELFVBQVVsK0MsTUFBVixFQUFrQjtBQUNuRSxRQUFJcytDLEtBQUssR0FBR3QrQyxNQUFNLENBQUNvckMsV0FBUCxJQUFzQnByQyxNQUFNLENBQUNzK0MsS0FBekM7O0FBQ0EsUUFBSUEsS0FBSixFQUFXO0FBQ1AsVUFBSTVCLFlBQVksR0FBRyxLQUFLdEQsaUJBQUwsQ0FBdUJrRixLQUF2QixDQUFuQjs7QUFDQSxVQUFJNUIsWUFBSixFQUFrQjtBQUNkLFlBQUlyL0UsRUFBRSxHQUFHcS9FLFlBQVksQ0FBQzFJLFVBQXRCOztBQUNBLFlBQUkzMkUsRUFBSixFQUFRO0FBQ0osY0FBSWtoRixRQUFRLEdBQUcsS0FBS3JJLFFBQUwsQ0FBY2w3QixNQUFkLENBQXFCaTlCLFlBQXJCLENBQWtDRixjQUFsQyxDQUFpREcsTUFBakQsQ0FBd0Q3NkUsRUFBeEQsQ0FBMkQ2SixxQkFBM0QsR0FBbUY1QixHQUFsRztBQUNBLGNBQUlrNUUsT0FBTyxHQUFHbmhGLEVBQUUsQ0FBQzZKLHFCQUFILEVBQWQ7QUFDQSxjQUFJdTRCLFNBQVMsR0FBRyxDQUFDTyxNQUFNLENBQUNvckMsV0FBUCxHQUNib1QsT0FBTyxDQUFDbDVFLEdBREssR0FDQztBQUNkazVFLGlCQUFPLENBQUNqNUUsTUFBUixHQUFpQnk2QixNQUFNLENBQUN6NkIsTUFGWixJQUVzQjtBQUNsQ2c1RSxrQkFISjtBQUlBLGVBQUtySSxRQUFMLENBQWNsN0IsTUFBZCxDQUFxQmk5QixZQUFyQixDQUFrQ0YsY0FBbEMsQ0FBaURwNEMsWUFBakQsQ0FBOERGLFNBQTlEO0FBQ0EsZUFBS203QyxXQUFMLENBQWlCNS9CLE1BQWpCLENBQXdCaTlCLFlBQXhCLENBQXFDRixjQUFyQyxDQUFvRHA0QyxZQUFwRCxDQUFpRUYsU0FBakU7QUFDSDtBQUNKO0FBQ0o7QUFDSixHQWxCRCxDQTdXd0QsQ0FnWXhEO0FBQ0E7QUFDQTs7O0FBQ0F1NUMsc0JBQW9CLENBQUNwM0UsU0FBckIsQ0FBK0J3Z0MsbUJBQS9CLEdBQXFELFlBQVk7QUFDN0QsU0FBSzh6QyxRQUFMLENBQWNtRixLQUFkLENBQW9CMTlCLFVBQXBCO0FBQ0EsU0FBS3kvQixZQUFMLENBQWtCNy9DLEtBQWxCO0FBQ0gsR0FIRDs7QUFJQXk3QyxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQnlnQyxRQUEvQixHQUEwQyxVQUFVQyxZQUFWLEVBQXdCQyxXQUF4QixFQUFxQztBQUMzRSxRQUFJNjZDLFlBQVksR0FBRyxLQUFLQSxZQUF4QjtBQUNBLFFBQUkvQixLQUFLLEdBQUcsS0FBS25GLFFBQUwsQ0FBY21GLEtBQTFCO0FBQ0EsUUFBSW9ELFFBQVEsR0FBR3JCLFlBQVksQ0FBQ2ovQyxVQUFiLENBQXdCb0UsV0FBeEIsQ0FBZjs7QUFDQSxRQUFJazhDLFFBQVEsSUFBSSxJQUFoQixFQUFzQjtBQUNsQixVQUFJOWdGLFFBQVEsR0FBRyxLQUFLdTdFLFFBQUwsQ0FBY3VGLFFBQWQsRUFBd0I5Z0YsUUFBdkM7O0FBQ0EsVUFBSUEsUUFBSixFQUFjO0FBQUU7QUFDWixZQUFJK2dGLE9BQU8sR0FBR3JELEtBQUssQ0FBQ3NELGFBQU4sQ0FBb0JyOEMsWUFBcEIsQ0FBZDs7QUFDQSxZQUFJbzhDLE9BQUosRUFBYTtBQUNULGlCQUFPO0FBQ0gvakQscUJBQVMsRUFBRSxJQURSO0FBRUhuQixvQkFBUSxFQUFFO0FBQ05oaEIsbUJBQUssRUFBRWttRSxPQUFPLENBQUNsbEQsUUFBUixDQUFpQmhoQixLQURsQjtBQUVONkIsb0JBQU0sRUFBRXFrRSxPQUFPLENBQUNsbEQsUUFBUixDQUFpQm5mLE1BRm5CO0FBR043Yix3QkFBVSxFQUFFYixRQUFRLENBQUNDO0FBSGYsYUFGUDtBQU9IeUgsZ0JBQUksRUFBRTtBQUNGdEosa0JBQUksRUFBRTJpRixPQUFPLENBQUMzaUYsSUFEWjtBQUVGRSxtQkFBSyxFQUFFeWlGLE9BQU8sQ0FBQ3ppRixLQUZiO0FBR0ZxSixpQkFBRyxFQUFFODNFLFlBQVksQ0FBQ3IvQyxJQUFiLENBQWtCMGdELFFBQWxCLENBSEg7QUFJRmw1RSxvQkFBTSxFQUFFNjNFLFlBQVksQ0FBQ3AvQyxPQUFiLENBQXFCeWdELFFBQXJCO0FBSk4sYUFQSDtBQWFIdDJCLGlCQUFLLEVBQUV1MkIsT0FBTyxDQUFDdjJCLEtBYlo7QUFjSHNZLGlCQUFLLEVBQUU7QUFkSixXQUFQO0FBZ0JIO0FBQ0o7QUFDSjtBQUNKLEdBNUJELENBdll3RCxDQW9heEQ7QUFDQTs7O0FBQ0F1WSxzQkFBb0IsQ0FBQ3AzRSxTQUFyQixDQUErQjY0RSxvQkFBL0IsR0FBc0QsVUFBVW1FLFFBQVYsRUFBb0I7QUFDdEUsU0FBS2xqRixpQkFBTCxHQUF5QmtqRixRQUF6QjtBQUNBNTVFLDZFQUFjLENBQUMsS0FBS3cxRSxrQkFBTixFQUEwQixPQUExQixFQUFtQ29FLFFBQVEsSUFBSSxFQUEvQyxDQUFkO0FBQ0gsR0FIRDs7QUFJQTVGLHNCQUFvQixDQUFDcDNFLFNBQXJCLENBQStCODRFLDZCQUEvQixHQUErRCxZQUFZO0FBQ3ZFLFFBQUk5aEQsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSWltRCxzQkFBc0IsR0FBR2w5RSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQixLQUFLekUsRUFBTCxDQUFRNkcsZ0JBQVIsQ0FBeUIsaUJBQXpCLENBQTNCLENBQTdCO0FBQ0EsUUFBSW16RSxtQkFBbUIsR0FBRyxLQUFLbDhFLFFBQUwsQ0FBY29pQixZQUFkLENBQTJCQyxLQUEzQixDQUFpQ3VuQixtQkFBM0Q7O0FBQ0EsUUFBSXN5QyxtQkFBSixFQUF5QjtBQUNyQixXQUFLZ0MsMEJBQUwsR0FBa0N3RixzQkFBc0IsQ0FBQzcwRSxHQUF2QixDQUEyQixVQUFVM00sRUFBVixFQUFjO0FBQ3ZFLFlBQUlvaEUsUUFBUSxHQUFHLElBQUk0WSxtQkFBSixDQUF3Qmg2RSxFQUF4QixDQUFmO0FBQ0EsWUFBSXloRixjQUFKO0FBQ0EsWUFBSUMsU0FBSjtBQUNBdGdCLGdCQUFRLENBQUNyTyxPQUFULENBQWlCandELEVBQWpCLENBQW9CLFdBQXBCLEVBQWlDLFlBQVk7QUFDekMyK0Usd0JBQWMsR0FBR2xtRCxLQUFLLENBQUNsOUIsaUJBQXZCOztBQUNBLGNBQUksT0FBT29qRixjQUFQLEtBQTBCLFFBQTlCLEVBQXdDO0FBQ3BDQSwwQkFBYyxHQUFHbG1ELEtBQUssQ0FBQzRoRCxrQkFBTixDQUF5QnR6RSxxQkFBekIsR0FBaUR0SyxLQUFsRTtBQUNIOztBQUNEbWlGLG1CQUFTLEdBQUdubUQsS0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzZKLHFCQUFULEdBQWlDdEssS0FBN0M7QUFDSCxTQU5EO0FBT0E2aEUsZ0JBQVEsQ0FBQ3JPLE9BQVQsQ0FBaUJqd0QsRUFBakIsQ0FBb0IsVUFBcEIsRUFBZ0MsVUFBVTRuRCxHQUFWLEVBQWU7QUFDM0MsY0FBSWkzQixRQUFRLEdBQUdGLGNBQWMsR0FBRy8yQixHQUFHLENBQUMvaEQsTUFBSixJQUFjNHlCLEtBQUssQ0FBQ3hULEtBQU4sR0FBYyxDQUFDLENBQWYsR0FBbUIsQ0FBakMsQ0FBaEM7QUFDQTQ1RCxrQkFBUSxHQUFHcDVFLElBQUksQ0FBQ0MsR0FBTCxDQUFTbTVFLFFBQVQsRUFBbUJqRyx1QkFBbkIsQ0FBWDtBQUNBaUcsa0JBQVEsR0FBR3A1RSxJQUFJLENBQUNFLEdBQUwsQ0FBU2s1RSxRQUFULEVBQW1CRCxTQUFTLEdBQUdoRyx1QkFBL0IsQ0FBWDs7QUFDQW5nRCxlQUFLLENBQUM2aEQsb0JBQU4sQ0FBMkJ1RSxRQUEzQjtBQUNILFNBTEQ7QUFNQXZnQixnQkFBUSxDQUFDbE8sb0JBQVQsQ0FBOEIsS0FBOUIsRUFqQnVFLENBaUJqQzs7QUFDdEMsZUFBT2tPLFFBQVA7QUFDSCxPQW5CaUMsQ0FBbEM7QUFvQkg7QUFDSixHQTFCRDs7QUEyQkF1YSxzQkFBb0IsQ0FBQ2xTLGlCQUFyQixHQUF5QyxJQUF6QyxDQXJjd0QsQ0FxY1Q7O0FBQy9DLFNBQU9rUyxvQkFBUDtBQUNILENBdmN5QyxDQXVjeEMzdkIsdURBdmN3QyxDQUExQzs7QUF3Y0EsU0FBU2l3Qix3QkFBVCxDQUFrQ3ZTLGFBQWxDLEVBQWlEO0FBQzdDLE9BQUssSUFBSXZvRSxVQUFULElBQXVCdW9FLGFBQXZCLEVBQXNDO0FBQ2xDLFFBQUlwcEUsUUFBUSxHQUFHb3BFLGFBQWEsQ0FBQ3ZvRSxVQUFELENBQTVCOztBQUNBLFFBQUliLFFBQVEsQ0FBQzh5QixhQUFiLEVBQTRCO0FBQ3hCLGFBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBQ0QsU0FBTyxLQUFQO0FBQ0g7O0FBQ0QsU0FBUzhvRCxVQUFULENBQW9CdkcsS0FBcEIsRUFBMkI7QUFDdkIsT0FBSyxJQUFJdjhELEVBQUUsR0FBRyxDQUFULEVBQVl3b0UsT0FBTyxHQUFHak0sS0FBM0IsRUFBa0N2OEQsRUFBRSxHQUFHd29FLE9BQU8sQ0FBQy84RSxNQUEvQyxFQUF1RHVVLEVBQUUsRUFBekQsRUFBNkQ7QUFDekQsUUFBSThuRCxJQUFJLEdBQUcwZ0IsT0FBTyxDQUFDeG9FLEVBQUQsQ0FBbEI7O0FBQ0EsUUFBSThuRCxJQUFJLENBQUN5VCxLQUFULEVBQWdCO0FBQ1osYUFBTyxJQUFQO0FBQ0gsS0FGRCxNQUdLLElBQUl6VCxJQUFJLENBQUM1Z0UsUUFBVCxFQUFtQjtBQUNwQixVQUFJNGdFLElBQUksQ0FBQzhULFdBQVQsRUFBc0I7QUFDbEIsZUFBTyxJQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUNELFNBQU8sS0FBUDtBQUNIOztBQUVELElBQUkxTSxJQUFJLEdBQUcvaEMsdUVBQVksQ0FBQztBQUNwQkMsTUFBSSxFQUFFLENBQUNxN0MscUVBQUQsRUFBdUJDLDhEQUF2QixDQURjO0FBRXBCOWlGLGFBQVcsRUFBRSxxQkFGTztBQUdwQituQyxPQUFLLEVBQUU7QUFDSGc3QyxvQkFBZ0IsRUFBRTtBQUNkL3FDLFdBQUssRUFBRTJrQyxvQkFETztBQUVkdDlFLHVCQUFpQixFQUFFLEtBRkw7QUFHZDJqRixnQ0FBMEIsRUFBRSxJQUhkO0FBSWRDLDZCQUF1QixFQUFFLElBSlgsQ0FJZ0I7O0FBSmhCLEtBRGY7QUFPSEMsdUJBQW1CLEVBQUU7QUFDakIvaEYsVUFBSSxFQUFFLGtCQURXO0FBRWpCK2MsY0FBUSxFQUFFO0FBQUUxTixZQUFJLEVBQUU7QUFBUjtBQUZPLEtBUGxCO0FBV0gyeUUsd0JBQW9CLEVBQUU7QUFDbEJoaUYsVUFBSSxFQUFFLGtCQURZO0FBRWxCK2MsY0FBUSxFQUFFO0FBQUV4SixhQUFLLEVBQUU7QUFBVDtBQUZRLEtBWG5CO0FBZUgwdUUseUJBQXFCLEVBQUU7QUFDbkJqaUYsVUFBSSxFQUFFLGtCQURhO0FBRW5CK2MsY0FBUSxFQUFFO0FBQUUzTixjQUFNLEVBQUU7QUFBVjtBQUZTLEtBZnBCO0FBbUJIOHlFLHdCQUFvQixFQUFFO0FBQ2xCbGlGLFVBQUksRUFBRSxrQkFEWTtBQUVsQitjLGNBQVEsRUFBRTtBQUFFNU4sYUFBSyxFQUFFO0FBQVQ7QUFGUTtBQW5CbkI7QUFIYSxDQUFELENBQXZCO0FBNkJlZzVELG1FQUFmOzs7Ozs7Ozs7Ozs7O0FDaGdDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBTUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7O0FBRUEsSUFBSTFzRCxhQUFhLEdBQUcsVUFBU2pNLENBQVQsRUFBWTBJLENBQVosRUFBZTtBQUMvQnVELGVBQWEsR0FBR0MsTUFBTSxDQUFDQyxjQUFQLElBQ1g7QUFBRUMsYUFBUyxFQUFFO0FBQWIsZUFBNkJ6WCxLQUE3QixJQUFzQyxVQUFVcUwsQ0FBVixFQUFhMEksQ0FBYixFQUFnQjtBQUFFMUksS0FBQyxDQUFDb00sU0FBRixHQUFjMUQsQ0FBZDtBQUFrQixHQUQvRCxJQUVaLFVBQVUxSSxDQUFWLEVBQWEwSSxDQUFiLEVBQWdCO0FBQUUsU0FBSyxJQUFJMkQsQ0FBVCxJQUFjM0QsQ0FBZCxFQUFpQixJQUFJQSxDQUFDLENBQUM0RCxjQUFGLENBQWlCRCxDQUFqQixDQUFKLEVBQXlCck0sQ0FBQyxDQUFDcU0sQ0FBRCxDQUFELEdBQU8zRCxDQUFDLENBQUMyRCxDQUFELENBQVI7QUFBYyxHQUY5RTs7QUFHQSxTQUFPSixhQUFhLENBQUNqTSxDQUFELEVBQUkwSSxDQUFKLENBQXBCO0FBQ0gsQ0FMRDs7QUFPQSxTQUFTNkQsU0FBVCxDQUFtQnZNLENBQW5CLEVBQXNCMEksQ0FBdEIsRUFBeUI7QUFDckJ1RCxlQUFhLENBQUNqTSxDQUFELEVBQUkwSSxDQUFKLENBQWI7O0FBQ0EsV0FBU3RnQixFQUFULEdBQWM7QUFBRSxTQUFLb2tCLFdBQUwsR0FBbUJ4TSxDQUFuQjtBQUF1Qjs7QUFDdkNBLEdBQUMsQ0FBQ3BMLFNBQUYsR0FBYzhULENBQUMsS0FBSyxJQUFOLEdBQWF3RCxNQUFNLENBQUNPLE1BQVAsQ0FBYy9ELENBQWQsQ0FBYixJQUFpQ3RnQixFQUFFLENBQUN3TSxTQUFILEdBQWU4VCxDQUFDLENBQUM5VCxTQUFqQixFQUE0QixJQUFJeE0sRUFBSixFQUE3RCxDQUFkO0FBQ0g7O0FBRUQsSUFBSXNrQixRQUFRLEdBQUcsWUFBVztBQUN0QkEsVUFBUSxHQUFHUixNQUFNLENBQUNTLE1BQVAsSUFBaUIsU0FBU0QsUUFBVCxDQUFrQkUsQ0FBbEIsRUFBcUI7QUFDN0MsU0FBSyxJQUFJNUosQ0FBSixFQUFPL1AsQ0FBQyxHQUFHLENBQVgsRUFBY3dMLENBQUMsR0FBR2lMLFNBQVMsQ0FBQ3hVLE1BQWpDLEVBQXlDakMsQ0FBQyxHQUFHd0wsQ0FBN0MsRUFBZ0R4TCxDQUFDLEVBQWpELEVBQXFEO0FBQ2pEK1AsT0FBQyxHQUFHMEcsU0FBUyxDQUFDelcsQ0FBRCxDQUFiOztBQUNBLFdBQUssSUFBSW9aLENBQVQsSUFBY3JKLENBQWQsRUFBaUIsSUFBSWtKLE1BQU0sQ0FBQ3RYLFNBQVAsQ0FBaUIwWCxjQUFqQixDQUFnQ3hYLElBQWhDLENBQXFDa08sQ0FBckMsRUFBd0NxSixDQUF4QyxDQUFKLEVBQWdETyxDQUFDLENBQUNQLENBQUQsQ0FBRCxHQUFPckosQ0FBQyxDQUFDcUosQ0FBRCxDQUFSO0FBQ3BFOztBQUNELFdBQU9PLENBQVA7QUFDSCxHQU5EOztBQU9BLFNBQU9GLFFBQVEsQ0FBQ25LLEtBQVQsQ0FBZSxJQUFmLEVBQXFCbUgsU0FBckIsQ0FBUDtBQUNILENBVEQ7QUFXQTs7Ozs7Ozs7QUFNQSxJQUFJaXBFLGNBQWM7QUFBRztBQUFlLFlBQVk7QUFDNUMsV0FBU0EsY0FBVCxHQUEwQjtBQUN0QixTQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQUt2aUYsRUFBTCxHQUFVZ0Usd0VBQWEsQ0FBQyx3R0FBRCxDQUF2QjtBQUNBLFNBQUs0N0MsU0FBTCxHQUFpQixLQUFLNS9DLEVBQUwsQ0FBUTRpRCxhQUFSLENBQXNCLGFBQXRCLENBQWpCO0FBQ0EsU0FBSys2QixJQUFMLEdBQVksS0FBSzM5RSxFQUFMLENBQVE0aUQsYUFBUixDQUFzQixRQUF0QixDQUFaO0FBQ0g7QUFDRDs7Ozs7QUFHQTAvQixnQkFBYyxDQUFDLzlFLFNBQWYsQ0FBeUJpK0UsVUFBekIsR0FBc0MsVUFBVUQsT0FBVixFQUFtQjtBQUNyRCxRQUFJLENBQUNBLE9BQUwsRUFBYztBQUNWLFdBQUtBLE9BQUwsR0FBZSxFQUFmO0FBQ0gsS0FGRCxNQUdLO0FBQ0RsbUUsY0FBUSxDQUFDLEtBQUtrbUUsT0FBTixFQUFlQSxPQUFmLENBQVI7QUFDSDs7QUFDRCxTQUFLamlDLFVBQUw7QUFDSCxHQVJEOztBQVNBZ2lDLGdCQUFjLENBQUMvOUUsU0FBZixDQUF5QmsrRSxRQUF6QixHQUFvQyxVQUFVbGpGLEtBQVYsRUFBaUI7QUFDakQsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBSytnRCxVQUFMO0FBQ0gsR0FIRDs7QUFJQWdpQyxnQkFBYyxDQUFDLzlFLFNBQWYsQ0FBeUJtK0UsV0FBekIsR0FBdUMsVUFBVUMsUUFBVixFQUFvQjtBQUN2RCxTQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtyaUMsVUFBTDtBQUNILEdBSEQ7O0FBSUFnaUMsZ0JBQWMsQ0FBQy85RSxTQUFmLENBQXlCcStFLFVBQXpCLEdBQXNDLFlBQVk7QUFDOUMsU0FBS3JqRixLQUFMLEdBQWEsSUFBYjtBQUNBLFNBQUtvakYsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUtyaUMsVUFBTDtBQUNILEdBSkQ7O0FBS0FnaUMsZ0JBQWMsQ0FBQy85RSxTQUFmLENBQXlCKzdDLFVBQXpCLEdBQXNDLFlBQVk7QUFDOUMsUUFBSTl0QyxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWUrdkUsT0FBTyxHQUFHL3ZFLEVBQUUsQ0FBQyt2RSxPQUE1QjtBQUFBLFFBQXFDdmlGLEVBQUUsR0FBR3dTLEVBQUUsQ0FBQ3hTLEVBQTdDLENBRDhDLENBRTlDOzs7QUFDQW9ILDZFQUFjLENBQUNwSCxFQUFELEVBQUssZ0JBQUwsRUFBdUJ1aUYsT0FBTyxDQUFDN2pGLElBQS9CLENBQWQ7QUFDQTBJLDZFQUFjLENBQUNwSCxFQUFELEVBQUssaUJBQUwsRUFBd0J1aUYsT0FBTyxDQUFDM2pGLEtBQWhDLENBQWQ7QUFDQXdJLDZFQUFjLENBQUNwSCxFQUFELEVBQUssZUFBTCxFQUFzQnVpRixPQUFPLENBQUN0NkUsR0FBOUIsQ0FBZDtBQUNBYiw2RUFBYyxDQUFDcEgsRUFBRCxFQUFLLGtCQUFMLEVBQXlCdWlGLE9BQU8sQ0FBQ3I2RSxNQUFqQyxDQUFkO0FBQ0F0RSx5RUFBVSxDQUFDNUQsRUFBRCxFQUFLO0FBQ1hxTCxpQkFBVyxFQUFFazNFLE9BQU8sQ0FBQzdqRixJQUFSLElBQWdCLEVBRGxCO0FBRVg0TSxrQkFBWSxFQUFFaTNFLE9BQU8sQ0FBQzNqRixLQUFSLElBQWlCLEVBRnBCO0FBR1gyTSxnQkFBVSxFQUFFZzNFLE9BQU8sQ0FBQ3Q2RSxHQUFSLElBQWUsRUFIaEI7QUFJWHVELG1CQUFhLEVBQUUrMkUsT0FBTyxDQUFDcjZFLE1BQVIsSUFBa0IsRUFKdEI7QUFLWDNJLFdBQUssRUFBRyxLQUFLQSxLQUFMLElBQWMsSUFBZixHQUNILEtBQUtBLEtBQUwsSUFBY2dqRixPQUFPLENBQUM3akYsSUFBUixJQUFnQixDQUE5QixLQUFvQzZqRixPQUFPLENBQUMzakYsS0FBUixJQUFpQixDQUFyRCxDQURHLEdBRUgsRUFQTztBQVFYK2pGLGNBQVEsRUFBRyxLQUFLQSxRQUFMLElBQWlCLElBQWxCLEdBQ04sS0FBS0EsUUFBTCxJQUFpQkosT0FBTyxDQUFDN2pGLElBQVIsSUFBZ0IsQ0FBakMsS0FBdUM2akYsT0FBTyxDQUFDM2pGLEtBQVIsSUFBaUIsQ0FBeEQsQ0FETSxHQUVOO0FBVk8sS0FBTCxDQUFWO0FBWUFnRix5RUFBVSxDQUFDLEtBQUsrNUUsSUFBTixFQUFZO0FBQ2xCai9FLFVBQUksRUFBRTZqRixPQUFPLENBQUM3akYsSUFBUixJQUFnQixFQURKO0FBRWxCRSxXQUFLLEVBQUUyakYsT0FBTyxDQUFDM2pGLEtBQVIsSUFBaUIsRUFGTjtBQUdsQnFKLFNBQUcsRUFBRXM2RSxPQUFPLENBQUN0NkUsR0FBUixJQUFlLEVBSEY7QUFJbEJDLFlBQU0sRUFBRXE2RSxPQUFPLENBQUNyNkUsTUFBUixJQUFrQjtBQUpSLEtBQVosQ0FBVjtBQU1ILEdBekJEOztBQTBCQSxTQUFPbzZFLGNBQVA7QUFDSCxDQTNEbUMsRUFBcEM7O0FBNkRBLElBQUlPLGdCQUFnQjtBQUFHO0FBQWUsVUFBVXhqRCxNQUFWLEVBQWtCO0FBQ3BEbmpCLFdBQVMsQ0FBQzJtRSxnQkFBRCxFQUFtQnhqRCxNQUFuQixDQUFUOztBQUNBLFdBQVN3akQsZ0JBQVQsQ0FBMEJwMkUsU0FBMUIsRUFBcUNELFNBQXJDLEVBQWdEO0FBQzVDLFFBQUkrdUIsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCZ0ksU0FBbEIsRUFBNkJELFNBQTdCLEtBQTJDLElBQXZELENBRDRDLENBRTVDO0FBQ0E7OztBQUNBK3VCLFNBQUssQ0FBQ3VuRCxZQUFOLEdBQXFCLFlBQVk7QUFDN0IsVUFBSSxDQUFDdm5ELEtBQUssQ0FBQ3duRCxXQUFYLEVBQXdCO0FBQ3BCeG5ELGFBQUssQ0FBQ3luRCxpQkFBTjtBQUNIOztBQUNEem5ELFdBQUssQ0FBQ2hrQyxPQUFOLENBQWMsUUFBZDs7QUFDQWdrQyxXQUFLLENBQUMwbkQsUUFBTixHQUFpQixJQUFqQjs7QUFDQTFuRCxXQUFLLENBQUMybkQsZ0JBQU47QUFDSCxLQVBEOztBQVFBM25ELFNBQUssQ0FBQ3luRCxpQkFBTixHQUEwQixZQUFZO0FBQ2xDLFVBQUksQ0FBQ3puRCxLQUFLLENBQUN3bkQsV0FBWCxFQUF3QjtBQUNwQnhuRCxhQUFLLENBQUN3bkQsV0FBTixHQUFvQixJQUFwQjs7QUFDQXhuRCxhQUFLLENBQUNoa0MsT0FBTixDQUFjLGFBQWQsRUFBNkJna0MsS0FBSyxDQUFDNG5ELFVBQW5DLEVBRm9CLENBRTRCOztBQUNuRDtBQUNKLEtBTEQsQ0FaNEMsQ0FrQjVDO0FBQ0E7QUFDQTs7O0FBQ0E1bkQsU0FBSyxDQUFDNm5ELGdCQUFOLEdBQXlCLFlBQVk7QUFDakM3bkQsV0FBSyxDQUFDNG5ELFVBQU4sR0FBbUIsSUFBbkI7QUFDSCxLQUZEOztBQUdBNW5ELFNBQUssQ0FBQzhuRCxjQUFOLEdBQXVCLFlBQVk7QUFDL0IsVUFBSTluRCxLQUFLLENBQUM0bkQsVUFBVixFQUFzQjtBQUNsQjVuRCxhQUFLLENBQUM0bkQsVUFBTixHQUFtQixLQUFuQixDQURrQixDQUVsQjtBQUNBOztBQUNBLFlBQUk1bkQsS0FBSyxDQUFDK25ELG9CQUFWLEVBQWdDO0FBQzVCL25ELGVBQUssQ0FBQ2dvRCx3QkFBTixHQUQ0QixDQUNNOztBQUNyQyxTQU5pQixDQU9sQjtBQUNBOzs7QUFDQSxZQUFJLENBQUNob0QsS0FBSyxDQUFDMG5ELFFBQVgsRUFBcUI7QUFDakIxbkQsZUFBSyxDQUFDaW9ELGVBQU4sR0FEaUIsQ0FDUTs7QUFDNUI7QUFDSjtBQUNKLEtBZEQ7O0FBZUFqb0QsU0FBSyxDQUFDd25ELFdBQU4sR0FBb0IsS0FBcEI7QUFDQXhuRCxTQUFLLENBQUM0bkQsVUFBTixHQUFtQixLQUFuQjtBQUNBNW5ELFNBQUssQ0FBQzBuRCxRQUFOLEdBQWlCLEtBQWpCO0FBQ0ExbkQsU0FBSyxDQUFDK25ELG9CQUFOLEdBQTZCLElBQTdCO0FBQ0EvbkQsU0FBSyxDQUFDMm5ELGdCQUFOLEdBQXlCM3BFLG1FQUFRLENBQUNnaUIsS0FBSyxDQUFDa29ELGVBQVAsRUFBd0IsR0FBeEIsQ0FBakM7QUFDQWxvRCxTQUFLLENBQUNzL0MsTUFBTixHQUFlLElBQUl5SCxjQUFKLEVBQWY7O0FBQ0EvbUQsU0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzhFLFdBQVQsQ0FBcUJ5MkIsS0FBSyxDQUFDcy9DLE1BQU4sQ0FBYTc2RSxFQUFsQzs7QUFDQXU3QixTQUFLLENBQUNzSCxhQUFOOztBQUNBdEgsU0FBSyxDQUFDd3FCLFlBQU47O0FBQ0EsV0FBT3hxQixLQUFQO0FBQ0g7O0FBQ0RzbkQsa0JBQWdCLENBQUN0K0UsU0FBakIsQ0FBMkJ5K0IsT0FBM0IsR0FBcUMsWUFBWTtBQUM3QzNELFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCOztBQUNBLFNBQUt5aEQsY0FBTDtBQUNILEdBSEQsQ0FwRG9ELENBd0RwRDtBQUNBOzs7QUFDQTI4QixrQkFBZ0IsQ0FBQ3QrRSxTQUFqQixDQUEyQm0vRSxrQkFBM0IsR0FBZ0QsWUFBWTtBQUN4RCxTQUFLSixvQkFBTCxHQUE0QixLQUE1QjtBQUNBLFNBQUtLLHNCQUFMLEdBRndELENBRXpCO0FBQ2xDLEdBSEQ7O0FBSUFkLGtCQUFnQixDQUFDdCtFLFNBQWpCLENBQTJCcS9FLGlCQUEzQixHQUErQyxZQUFZO0FBQ3ZELFNBQUtOLG9CQUFMLEdBQTRCLElBQTVCLENBRHVELENBRXZEO0FBQ0E7O0FBQ0EsUUFBSSxDQUFDLEtBQUtILFVBQVYsRUFBc0I7QUFDbEIsV0FBS0ksd0JBQUw7QUFDSDtBQUNKLEdBUEQ7O0FBUUFWLGtCQUFnQixDQUFDdCtFLFNBQWpCLENBQTJCby9FLHNCQUEzQixHQUFvRCxZQUFZO0FBQzVELFFBQUksQ0FBQyxLQUFLRSx5QkFBVixFQUFxQztBQUNqQyxXQUFLN2pGLEVBQUwsQ0FBUUMsZ0JBQVIsQ0FBeUIsV0FBekIsRUFBdUMsS0FBSzRqRix5QkFBTCxHQUFpQ3ZzRixpRUFBeEU7QUFDSDtBQUNKLEdBSkQ7O0FBS0F1ckYsa0JBQWdCLENBQUN0K0UsU0FBakIsQ0FBMkJnL0Usd0JBQTNCLEdBQXNELFlBQVk7QUFDOUQsUUFBSSxLQUFLTSx5QkFBVCxFQUFvQztBQUNoQyxXQUFLN2pGLEVBQUwsQ0FBUXFOLG1CQUFSLENBQTRCLFdBQTVCLEVBQXlDLEtBQUt3MkUseUJBQTlDO0FBQ0EsV0FBS0EseUJBQUwsR0FBaUMsSUFBakM7QUFDSDtBQUNKLEdBTEQsQ0EzRW9ELENBaUZwRDtBQUNBOzs7QUFDQWhCLGtCQUFnQixDQUFDdCtFLFNBQWpCLENBQTJCd2hELFlBQTNCLEdBQTBDLFlBQVk7QUFDbEQsU0FBSy9sRCxFQUFMLENBQVFDLGdCQUFSLENBQXlCLFFBQXpCLEVBQW1DLEtBQUs2aUYsWUFBeEM7QUFDQSxTQUFLOWlGLEVBQUwsQ0FBUUMsZ0JBQVIsQ0FBeUIsWUFBekIsRUFBdUMsS0FBS21qRixnQkFBNUMsRUFBOEQ7QUFBRTdvQixhQUFPLEVBQUU7QUFBWCxLQUE5RDtBQUNBLFNBQUt2NkQsRUFBTCxDQUFRQyxnQkFBUixDQUF5QixVQUF6QixFQUFxQyxLQUFLb2pGLGNBQTFDO0FBQ0gsR0FKRDs7QUFLQVIsa0JBQWdCLENBQUN0K0UsU0FBakIsQ0FBMkIyaEQsY0FBM0IsR0FBNEMsWUFBWTtBQUNwRCxTQUFLbG1ELEVBQUwsQ0FBUXFOLG1CQUFSLENBQTRCLFFBQTVCLEVBQXNDLEtBQUt5MUUsWUFBM0M7QUFDQSxTQUFLOWlGLEVBQUwsQ0FBUXFOLG1CQUFSLENBQTRCLFlBQTVCLEVBQTBDLEtBQUsrMUUsZ0JBQS9DLEVBQWlFO0FBQUU3b0IsYUFBTyxFQUFFO0FBQVgsS0FBakU7QUFDQSxTQUFLdjZELEVBQUwsQ0FBUXFOLG1CQUFSLENBQTRCLFVBQTVCLEVBQXdDLEtBQUtnMkUsY0FBN0M7QUFDSCxHQUpEOztBQUtBUixrQkFBZ0IsQ0FBQ3QrRSxTQUFqQixDQUEyQmsvRSxlQUEzQixHQUE2QyxZQUFZO0FBQ3JELFNBQUtSLFFBQUwsR0FBZ0IsS0FBaEIsQ0FEcUQsQ0FFckQ7QUFDQTs7QUFDQSxRQUFJLENBQUMsS0FBS0UsVUFBVixFQUFzQjtBQUNsQixXQUFLSyxlQUFMO0FBQ0g7QUFDSixHQVBEOztBQVFBWCxrQkFBZ0IsQ0FBQ3QrRSxTQUFqQixDQUEyQmkvRSxlQUEzQixHQUE2QyxZQUFZO0FBQ3JELFFBQUksS0FBS1QsV0FBVCxFQUFzQjtBQUNsQixXQUFLeHJGLE9BQUwsQ0FBYSxXQUFiO0FBQ0EsV0FBS3dyRixXQUFMLEdBQW1CLEtBQW5CO0FBQ0g7QUFDSixHQUxELENBckdvRCxDQTJHcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7Ozs7O0FBR0FGLGtCQUFnQixDQUFDdCtFLFNBQWpCLENBQTJCMDlCLGFBQTNCLEdBQTJDLFlBQVk7QUFDbkQsUUFBSWppQyxFQUFFLEdBQUcsS0FBS0EsRUFBZDtBQUNBLFFBQUkwSixTQUFTLEdBQUdTLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JwSyxFQUF4QixFQUE0QjBKLFNBQTVDO0FBQ0EsUUFBSTlPLEdBQUcsR0FBR29GLEVBQUUsQ0FBQ3FpQyxVQUFiOztBQUNBLFFBQUkzNEIsU0FBUyxLQUFLLEtBQWxCLEVBQXlCO0FBQ3JCLGNBQVFvNkUsa0JBQWtCLEVBQTFCO0FBQ0ksYUFBSyxVQUFMO0FBQ0lscEYsYUFBRyxHQUFJQSxHQUFHLEdBQUdvRixFQUFFLENBQUMrSyxXQUFWLEdBQXlCL0ssRUFBRSxDQUFDd2lDLFdBQWxDO0FBQ0E7O0FBQ0osYUFBSyxTQUFMO0FBQ0k1bkMsYUFBRyxHQUFHLENBQUNBLEdBQVA7QUFDQTtBQU5SO0FBUUg7O0FBQ0QsV0FBT0EsR0FBUDtBQUNILEdBZkQ7QUFnQkE7Ozs7O0FBR0Fpb0Ysa0JBQWdCLENBQUN0K0UsU0FBakIsQ0FBMkJnK0IsYUFBM0IsR0FBMkMsVUFBVTNuQyxHQUFWLEVBQWU7QUFDdEQsUUFBSW9GLEVBQUUsR0FBRyxLQUFLQSxFQUFkO0FBQ0EsUUFBSTBKLFNBQVMsR0FBR1MsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QnBLLEVBQXhCLEVBQTRCMEosU0FBNUM7O0FBQ0EsUUFBSUEsU0FBUyxLQUFLLEtBQWxCLEVBQXlCO0FBQ3JCLGNBQVFvNkUsa0JBQWtCLEVBQTFCO0FBQ0ksYUFBSyxVQUFMO0FBQ0lscEYsYUFBRyxHQUFJQSxHQUFHLEdBQUdvRixFQUFFLENBQUMrSyxXQUFWLEdBQXlCL0ssRUFBRSxDQUFDd2lDLFdBQWxDO0FBQ0E7O0FBQ0osYUFBSyxTQUFMO0FBQ0k1bkMsYUFBRyxHQUFHLENBQUNBLEdBQVA7QUFDQTtBQU5SO0FBUUg7O0FBQ0RvRixNQUFFLENBQUNxaUMsVUFBSCxHQUFnQnpuQyxHQUFoQjtBQUNILEdBZEQ7QUFlQTs7Ozs7O0FBSUFpb0Ysa0JBQWdCLENBQUN0K0UsU0FBakIsQ0FBMkJ3L0UsaUJBQTNCLEdBQStDLFlBQVk7QUFDdkQsUUFBSS9qRixFQUFFLEdBQUcsS0FBS0EsRUFBZDtBQUNBLFFBQUkwSixTQUFTLEdBQUdTLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JwSyxFQUF4QixFQUE0QjBKLFNBQTVDO0FBQ0EsUUFBSTlPLEdBQUcsR0FBR29GLEVBQUUsQ0FBQ3FpQyxVQUFiOztBQUNBLFFBQUkzNEIsU0FBUyxLQUFLLEtBQWxCLEVBQXlCO0FBQ3JCLGNBQVFvNkUsa0JBQWtCLEVBQTFCO0FBQ0ksYUFBSyxVQUFMO0FBQ0lscEYsYUFBRyxHQUFJQSxHQUFHLEdBQUdvRixFQUFFLENBQUMrSyxXQUFWLEdBQXlCL0ssRUFBRSxDQUFDd2lDLFdBQWxDO0FBQ0E7O0FBQ0osYUFBSyxTQUFMO0FBQ0k1bkMsYUFBRyxHQUFJLENBQUNBLEdBQUQsR0FBT29GLEVBQUUsQ0FBQytLLFdBQVgsR0FBMEIvSyxFQUFFLENBQUN3aUMsV0FBbkM7QUFDQTtBQU5SO0FBUUg7O0FBQ0QsV0FBTzVuQyxHQUFQO0FBQ0gsR0FmRDs7QUFnQkEsU0FBT2lvRixnQkFBUDtBQUNILENBektxQyxDQXlLcENqZ0Qsa0VBektvQyxDQUF0Qzs7QUEwS0F4RCwrREFBWSxDQUFDTixPQUFiLENBQXFCK2pELGdCQUFyQixFLENBQ0E7QUFDQTs7QUFDQSxJQUFJbUIsZ0JBQUo7O0FBQ0EsU0FBU0Ysa0JBQVQsR0FBOEI7QUFDMUIsU0FBT0UsZ0JBQWdCLEtBQUtBLGdCQUFnQixHQUFHQyxxQkFBcUIsRUFBN0MsQ0FBdkI7QUFDSDs7QUFDRCxTQUFTQSxxQkFBVCxHQUFpQztBQUM3QixNQUFJamtGLEVBQUUsR0FBR2dFLHdFQUFhLENBQUMseUlBQUQsQ0FBdEI7QUFDQTVMLFVBQVEsQ0FBQ3VSLElBQVQsQ0FBYzdFLFdBQWQsQ0FBMEI5RSxFQUExQjtBQUNBLE1BQUlra0YsTUFBSjs7QUFDQSxNQUFJbGtGLEVBQUUsQ0FBQ3FpQyxVQUFILEdBQWdCLENBQXBCLEVBQXVCO0FBQ25CNmhELFVBQU0sR0FBRyxVQUFUO0FBQ0gsR0FGRCxNQUdLO0FBQ0Rsa0YsTUFBRSxDQUFDcWlDLFVBQUgsR0FBZ0IsQ0FBaEI7O0FBQ0EsUUFBSXJpQyxFQUFFLENBQUNxaUMsVUFBSCxHQUFnQixDQUFwQixFQUF1QjtBQUNuQjZoRCxZQUFNLEdBQUcsU0FBVDtBQUNILEtBRkQsTUFHSztBQUNEQSxZQUFNLEdBQUcsVUFBVDtBQUNIO0FBQ0o7O0FBQ0R6K0UsMEVBQWEsQ0FBQ3pGLEVBQUQsQ0FBYjtBQUNBLFNBQU9ra0YsTUFBUDtBQUNIO0FBRUQ7Ozs7OztBQUlBLElBQUlDLGVBQWU7QUFBRztBQUFlLFlBQVk7QUFDN0M7Ozs7QUFJQSxXQUFTQSxlQUFULENBQXlCMTNFLFNBQXpCLEVBQW9DRCxTQUFwQyxFQUErQ3UxQyxRQUEvQyxFQUF5RDtBQUNyRCxTQUFLcWlDLG9CQUFMLEdBQTRCLEtBQTVCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBNUI7O0FBQ0EsUUFBSTUzRSxTQUFTLEtBQUssZ0JBQWxCLEVBQW9DO0FBQ2hDQSxlQUFTLEdBQUcsUUFBWjtBQUNBLFdBQUsyM0Usb0JBQUwsR0FBNEIsSUFBNUI7QUFDSDs7QUFDRCxRQUFJNTNFLFNBQVMsS0FBSyxnQkFBbEIsRUFBb0M7QUFDaENBLGVBQVMsR0FBRyxRQUFaO0FBQ0EsV0FBSzYzRSxvQkFBTCxHQUE0QixJQUE1QjtBQUNIOztBQUNELFNBQUszSixjQUFMLEdBQXNCLElBQUltSSxnQkFBSixDQUFxQnAyRSxTQUFyQixFQUFnQ0QsU0FBaEMsQ0FBdEI7QUFDQXUxQyxZQUFRLENBQUNqOUMsV0FBVCxDQUFxQixLQUFLOUUsRUFBTCxHQUFVdUQsd0VBQWEsQ0FBQyxLQUFELEVBQVE7QUFDaERKLGVBQVMsRUFBRTtBQURxQyxLQUFSLENBQTVDO0FBR0EsU0FBS25ELEVBQUwsQ0FBUThFLFdBQVIsQ0FBb0IsS0FBSzQxRSxjQUFMLENBQW9CMTZFLEVBQXhDO0FBQ0g7O0FBQ0Rta0YsaUJBQWUsQ0FBQzUvRSxTQUFoQixDQUEwQnkrQixPQUExQixHQUFvQyxZQUFZO0FBQzVDdjlCLDRFQUFhLENBQUMsS0FBS3pGLEVBQU4sQ0FBYjtBQUNILEdBRkQ7O0FBR0Fta0YsaUJBQWUsQ0FBQzUvRSxTQUFoQixDQUEwQis3QyxVQUExQixHQUF1QyxZQUFZO0FBQy9DLFFBQUlvNkIsY0FBYyxHQUFHLEtBQUtBLGNBQTFCO0FBQ0EsUUFBSTRKLFFBQVEsR0FBRzVKLGNBQWMsQ0FBQzE2RSxFQUE5QjtBQUNBLFFBQUk2TCxLQUFLLEdBQUc3Qix1RUFBWSxDQUFDczZFLFFBQUQsQ0FBeEI7QUFDQSxRQUFJenRELFFBQVEsR0FBRztBQUFFeGhCLGdCQUFVLEVBQUUsQ0FBZDtBQUFpQkMsaUJBQVcsRUFBRSxDQUE5QjtBQUFpQ2pKLGVBQVMsRUFBRSxDQUE1QztBQUErQ0Msa0JBQVksRUFBRTtBQUE3RCxLQUFmLENBSitDLENBSy9DO0FBQ0E7O0FBQ0EsUUFBSSxLQUFLKzNFLG9CQUFULEVBQStCO0FBQzNCeHRELGNBQVEsQ0FBQ3hoQixVQUFULEdBQXNCLENBQUN4SixLQUFLLENBQUNWLGFBQTdCO0FBQ0EwckIsY0FBUSxDQUFDdmhCLFdBQVQsR0FBdUIsQ0FBQ3pKLEtBQUssQ0FBQ1QsY0FBOUI7QUFDSDs7QUFDRCxRQUFJLEtBQUtnNUUsb0JBQVQsRUFBK0I7QUFDM0J2dEQsY0FBUSxDQUFDdnFCLFlBQVQsR0FBd0IsQ0FBQ1QsS0FBSyxDQUFDYixlQUEvQjtBQUNIOztBQUNEcEgseUVBQVUsQ0FBQzBnRixRQUFELEVBQVd6dEQsUUFBWCxDQUFWLENBZCtDLENBZS9DO0FBQ0E7O0FBQ0EsUUFBSSxDQUFDLEtBQUt1dEQsb0JBQUwsSUFBOEIxSixjQUFjLENBQUNqdUUsU0FBZixLQUE2QixRQUE1RCxPQUEwRTtBQUN6RSxTQUFLNDNFLG9CQUFMLElBQThCM0osY0FBYyxDQUFDbHVFLFNBQWYsS0FBNkIsUUFENUQsS0FDMEU7QUFDMUUsT0FBRztBQUNIWCxTQUFLLENBQUNWLGFBQU4sSUFDSVUsS0FBSyxDQUFDVCxjQURWLElBRUlTLEtBQUssQ0FBQ2IsZUFIVixDQUZKLEVBS2dDO0FBQzVCczVFLGNBQVEsQ0FBQ2g5RSxTQUFULENBQW1CQyxHQUFuQixDQUF1QixrQkFBdkI7QUFDSCxLQVBELE1BUUs7QUFDRCs4RSxjQUFRLENBQUNoOUUsU0FBVCxDQUFtQnJFLE1BQW5CLENBQTBCLGtCQUExQjtBQUNIO0FBQ0osR0E1QkQ7O0FBNkJBa2hGLGlCQUFlLENBQUM1L0UsU0FBaEIsQ0FBMEJ3K0IsU0FBMUIsR0FBc0MsVUFBVTcyQixNQUFWLEVBQWtCO0FBQ3BELFNBQUt3dUUsY0FBTCxDQUFvQjMzQyxTQUFwQixDQUE4QjcyQixNQUE5QjtBQUNILEdBRkQ7QUFHQTs7Ozs7QUFHQWk0RSxpQkFBZSxDQUFDNS9FLFNBQWhCLENBQTBCMitCLGtCQUExQixHQUErQyxZQUFZO0FBQ3ZELFFBQUlxaEQsTUFBTSxHQUFHLEtBQUs3SixjQUFMLENBQW9CeDNDLGtCQUFwQixFQUFiOztBQUNBLFFBQUksS0FBS21oRCxvQkFBVCxFQUErQjtBQUMzQkUsWUFBTSxDQUFDN2xGLElBQVAsR0FBYyxDQUFkO0FBQ0E2bEYsWUFBTSxDQUFDM2xGLEtBQVAsR0FBZSxDQUFmO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLd2xGLG9CQUFULEVBQStCO0FBQzNCRyxZQUFNLENBQUNyOEUsTUFBUCxHQUFnQixDQUFoQjtBQUNIOztBQUNELFdBQU9xOEUsTUFBUDtBQUNILEdBVkQ7O0FBV0EsU0FBT0osZUFBUDtBQUNILENBeEVvQyxFQUFyQzs7QUEwRUEsSUFBSXRHLFlBQVk7QUFBRztBQUFlLFlBQVk7QUFDMUMsV0FBU0EsWUFBVCxDQUFzQjJHLElBQXRCLEVBQTRCQyxTQUE1QixFQUF1QztBQUNuQyxTQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjs7QUFDQSxTQUFLLElBQUlyckUsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRyxLQUFLaXlFLFNBQTNCLEVBQXNDcnJFLEVBQUUsR0FBRzVHLEVBQUUsQ0FBQzNOLE1BQTlDLEVBQXNEdVUsRUFBRSxFQUF4RCxFQUE0RDtBQUN4RCxVQUFJc3JFLFFBQVEsR0FBR2x5RSxFQUFFLENBQUM0RyxFQUFELENBQWpCO0FBQ0EsV0FBS3VyRSxZQUFMLENBQWtCRCxRQUFsQjtBQUNIO0FBQ0o7O0FBQ0Q3RyxjQUFZLENBQUN0NUUsU0FBYixDQUF1Qm9nRixZQUF2QixHQUFzQyxVQUFVRCxRQUFWLEVBQW9CO0FBQ3RELFFBQUlucEQsS0FBSyxHQUFHLElBQVo7O0FBQ0EsUUFBSW0vQyxjQUFjLEdBQUdnSyxRQUFRLENBQUNoSyxjQUE5QixDQUZzRCxDQUd0RDtBQUNBOztBQUNBLFFBQUlrSyxRQUFRLEdBQUcsWUFBWTtBQUN2QnJwRCxXQUFLLENBQUNzcEQsb0JBQU4sQ0FBMkJILFFBQTNCO0FBQ0gsS0FGRDs7QUFHQSwwREFBc0RudEUsS0FBdEQsQ0FBNEQsR0FBNUQsRUFBaUV4SixPQUFqRSxDQUF5RSxVQUFVKzJFLE1BQVYsRUFBa0I7QUFDdkZwSyxvQkFBYyxDQUFDMTZFLEVBQWYsQ0FBa0JDLGdCQUFsQixDQUFtQzZrRixNQUFuQyxFQUEyQ0YsUUFBM0M7QUFDSCxLQUZEO0FBR0FsSyxrQkFBYyxDQUNUNTNFLEVBREwsQ0FDUSxhQURSLEVBQ3VCLFlBQVk7QUFDL0IsVUFBSSxDQUFDeTRCLEtBQUssQ0FBQ3dwRCxjQUFYLEVBQTJCO0FBQ3ZCeHBELGFBQUssQ0FBQ3NwRCxvQkFBTixDQUEyQkgsUUFBM0I7QUFDSDtBQUNKLEtBTEQsRUFNSzVoRixFQU5MLENBTVEsUUFOUixFQU1rQixZQUFZO0FBQzFCLFVBQUk0aEYsUUFBUSxLQUFLbnBELEtBQUssQ0FBQ3dwRCxjQUF2QixFQUF1QztBQUNuQyxhQUFLLElBQUkzckUsRUFBRSxHQUFHLENBQVQsRUFBWTVHLEVBQUUsR0FBRytvQixLQUFLLENBQUNrcEQsU0FBNUIsRUFBdUNyckUsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBL0MsRUFBdUR1VSxFQUFFLEVBQXpELEVBQTZEO0FBQ3pELGNBQUk0ckUsYUFBYSxHQUFHeHlFLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBdEI7O0FBQ0EsY0FBSTRyRSxhQUFhLEtBQUtOLFFBQXRCLEVBQWdDO0FBQzVCLG9CQUFRbnBELEtBQUssQ0FBQ2lwRCxJQUFkO0FBQ0ksbUJBQUssWUFBTDtBQUNJUSw2QkFBYSxDQUFDdEssY0FBZCxDQUE2QjE2RSxFQUE3QixDQUFnQ3FpQyxVQUFoQyxHQUE2Q3E0QyxjQUFjLENBQUMxNkUsRUFBZixDQUFrQnFpQyxVQUEvRDtBQUNBOztBQUNKLG1CQUFLLFVBQUw7QUFDSTJpRCw2QkFBYSxDQUFDdEssY0FBZCxDQUE2QnA0QyxZQUE3QixDQUEwQ280QyxjQUFjLENBQUM1NEMsWUFBZixFQUExQztBQUNBO0FBTlI7QUFRSDtBQUNKO0FBQ0o7QUFDSixLQXRCRCxFQXVCS2gvQixFQXZCTCxDQXVCUSxXQXZCUixFQXVCcUIsWUFBWTtBQUM3QixVQUFJNGhGLFFBQVEsS0FBS25wRCxLQUFLLENBQUN3cEQsY0FBdkIsRUFBdUM7QUFDbkN4cEQsYUFBSyxDQUFDMHBELHNCQUFOO0FBQ0g7QUFDSixLQTNCRDtBQTRCSCxHQXZDRDs7QUF3Q0FwSCxjQUFZLENBQUN0NUUsU0FBYixDQUF1QnNnRixvQkFBdkIsR0FBOEMsVUFBVUgsUUFBVixFQUFvQjtBQUM5RCxTQUFLTyxzQkFBTDtBQUNBLFNBQUtGLGNBQUwsR0FBc0JMLFFBQXRCOztBQUNBLFNBQUssSUFBSXRyRSxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUtpeUUsU0FBM0IsRUFBc0NyckUsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBOUMsRUFBc0R1VSxFQUFFLEVBQXhELEVBQTREO0FBQ3hELFVBQUk0ckUsYUFBYSxHQUFHeHlFLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBdEI7O0FBQ0EsVUFBSTRyRSxhQUFhLEtBQUtOLFFBQXRCLEVBQWdDO0FBQzVCTSxxQkFBYSxDQUFDdEssY0FBZCxDQUE2QmdKLGtCQUE3QjtBQUNIO0FBQ0o7QUFDSixHQVREOztBQVVBN0YsY0FBWSxDQUFDdDVFLFNBQWIsQ0FBdUIwZ0Ysc0JBQXZCLEdBQWdELFlBQVk7QUFDeEQsUUFBSSxLQUFLRixjQUFULEVBQXlCO0FBQ3JCLFdBQUssSUFBSTNyRSxFQUFFLEdBQUcsQ0FBVCxFQUFZNUcsRUFBRSxHQUFHLEtBQUtpeUUsU0FBM0IsRUFBc0NyckUsRUFBRSxHQUFHNUcsRUFBRSxDQUFDM04sTUFBOUMsRUFBc0R1VSxFQUFFLEVBQXhELEVBQTREO0FBQ3hELFlBQUk0ckUsYUFBYSxHQUFHeHlFLEVBQUUsQ0FBQzRHLEVBQUQsQ0FBdEI7QUFDQTRyRSxxQkFBYSxDQUFDdEssY0FBZCxDQUE2QmtKLGlCQUE3QjtBQUNIOztBQUNELFdBQUttQixjQUFMLEdBQXNCLElBQXRCO0FBQ0g7QUFDSixHQVJEOztBQVNBbEgsY0FBWSxDQUFDdDVFLFNBQWIsQ0FBdUJvcUQsTUFBdkIsR0FBZ0MsWUFBWTtBQUN4QyxRQUFJdTJCLFNBQVMsR0FBRyxLQUFLVCxTQUFMLENBQWU5M0UsR0FBZixDQUFtQixVQUFVKzNFLFFBQVYsRUFBb0I7QUFBRSxhQUFPQSxRQUFRLENBQUN4aEQsa0JBQVQsRUFBUDtBQUF1QyxLQUFoRixDQUFoQjtBQUNBLFFBQUlpaUQsT0FBTyxHQUFHLENBQWQ7QUFDQSxRQUFJQyxRQUFRLEdBQUcsQ0FBZjtBQUNBLFFBQUlDLE1BQU0sR0FBRyxDQUFiO0FBQ0EsUUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0EsUUFBSWYsTUFBSjtBQUNBLFFBQUkzaEYsQ0FBSjs7QUFDQSxTQUFLLElBQUl3VyxFQUFFLEdBQUcsQ0FBVCxFQUFZbXNFLFdBQVcsR0FBR0wsU0FBL0IsRUFBMEM5ckUsRUFBRSxHQUFHbXNFLFdBQVcsQ0FBQzFnRixNQUEzRCxFQUFtRXVVLEVBQUUsRUFBckUsRUFBeUU7QUFDckVtckUsWUFBTSxHQUFHZ0IsV0FBVyxDQUFDbnNFLEVBQUQsQ0FBcEI7QUFDQStyRSxhQUFPLEdBQUc1OEUsSUFBSSxDQUFDQyxHQUFMLENBQVMyOEUsT0FBVCxFQUFrQlosTUFBTSxDQUFDN2xGLElBQXpCLENBQVY7QUFDQTBtRixjQUFRLEdBQUc3OEUsSUFBSSxDQUFDQyxHQUFMLENBQVM0OEUsUUFBVCxFQUFtQmIsTUFBTSxDQUFDM2xGLEtBQTFCLENBQVg7QUFDQXltRixZQUFNLEdBQUc5OEUsSUFBSSxDQUFDQyxHQUFMLENBQVM2OEUsTUFBVCxFQUFpQmQsTUFBTSxDQUFDdDhFLEdBQXhCLENBQVQ7QUFDQXE5RSxlQUFTLEdBQUcvOEUsSUFBSSxDQUFDQyxHQUFMLENBQVM4OEUsU0FBVCxFQUFvQmYsTUFBTSxDQUFDcjhFLE1BQTNCLENBQVo7QUFDSDs7QUFDRCxTQUFLdEYsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHLEtBQUs2aEYsU0FBTCxDQUFlNS9FLE1BQS9CLEVBQXVDakMsQ0FBQyxFQUF4QyxFQUE0QztBQUN4QyxVQUFJOGhGLFFBQVEsR0FBRyxLQUFLRCxTQUFMLENBQWU3aEYsQ0FBZixDQUFmO0FBQ0EyaEYsWUFBTSxHQUFHVyxTQUFTLENBQUN0aUYsQ0FBRCxDQUFsQjtBQUNBOGhGLGNBQVEsQ0FBQ2hLLGNBQVQsQ0FBd0JHLE1BQXhCLENBQStCMkgsVUFBL0IsQ0FBMEMsS0FBS2dDLElBQUwsS0FBYyxZQUFkLEdBQ3RDO0FBQ0k5bEYsWUFBSSxFQUFFeW1GLE9BQU8sR0FBR1osTUFBTSxDQUFDN2xGLElBRDNCO0FBRUlFLGFBQUssRUFBRXdtRixRQUFRLEdBQUdiLE1BQU0sQ0FBQzNsRjtBQUY3QixPQURzQyxHQUt0QztBQUNJcUosV0FBRyxFQUFFbzlFLE1BQU0sR0FBR2QsTUFBTSxDQUFDdDhFLEdBRHpCO0FBRUlDLGNBQU0sRUFBRW85RSxTQUFTLEdBQUdmLE1BQU0sQ0FBQ3I4RTtBQUYvQixPQUxKO0FBU0g7QUFDSixHQTVCRDs7QUE2QkEsU0FBTzIxRSxZQUFQO0FBQ0gsQ0FsR2lDLEVBQWxDOztBQW9HQSxJQUFJdEQsZ0JBQWdCO0FBQUc7QUFBZSxZQUFZO0FBQzlDOzs7QUFHQSxXQUFTQSxnQkFBVCxDQUEwQmlMLGlCQUExQixFQUE2Q3pLLGVBQTdDLEVBQThEMEssY0FBOUQsRUFBOEU7QUFDMUUsU0FBS2hMLGNBQUwsR0FBc0IsSUFBSTBKLGVBQUosQ0FBb0IsZ0JBQXBCLEVBQXNDLFFBQXRDLEVBQWdEcUIsaUJBQWhELENBQXRCO0FBQ0EsU0FBSzVLLFlBQUwsR0FBb0IsSUFBSXVKLGVBQUosQ0FBb0IsTUFBcEIsRUFBNEJzQixjQUE1QixFQUE0QzFLLGVBQTVDLENBQXBCO0FBQ0EsU0FBSytFLFlBQUwsR0FBb0IsSUFBSWpDLFlBQUosQ0FBaUIsWUFBakIsRUFBK0IsQ0FDL0MsS0FBS3BELGNBRDBDLEVBRS9DLEtBQUtHLFlBRjBDLENBQS9CLENBQXBCO0FBSUg7O0FBQ0RMLGtCQUFnQixDQUFDaDJFLFNBQWpCLENBQTJCeStCLE9BQTNCLEdBQXFDLFlBQVk7QUFDN0MsU0FBS3kzQyxjQUFMLENBQW9CejNDLE9BQXBCO0FBQ0EsU0FBSzQzQyxZQUFMLENBQWtCNTNDLE9BQWxCO0FBQ0gsR0FIRDs7QUFJQXUzQyxrQkFBZ0IsQ0FBQ2gyRSxTQUFqQixDQUEyQncrQixTQUEzQixHQUF1QyxVQUFVczRDLFdBQVYsRUFBdUI3dEIsTUFBdkIsRUFBK0I7QUFDbEUsUUFBSWs0QixVQUFKOztBQUNBLFFBQUlsNEIsTUFBSixFQUFZO0FBQ1JrNEIsZ0JBQVUsR0FBRyxNQUFiO0FBQ0gsS0FGRCxNQUdLO0FBQ0RBLGdCQUFVLEdBQUdySyxXQUFXLEdBQUcsS0FBS3NLLGVBQUwsRUFBM0I7QUFDSDs7QUFDRCxTQUFLL0ssWUFBTCxDQUFrQjczQyxTQUFsQixDQUE0QjJpRCxVQUE1QjtBQUNBLFNBQUtqTCxjQUFMLENBQW9CbjZCLFVBQXBCLEdBVGtFLENBU2hDOztBQUNsQyxTQUFLczZCLFlBQUwsQ0FBa0J0NkIsVUFBbEIsR0FWa0UsQ0FVbEM7O0FBQ2hDLFNBQUt3L0IsWUFBTCxDQUFrQm54QixNQUFsQjtBQUNILEdBWkQ7O0FBYUE0ckIsa0JBQWdCLENBQUNoMkUsU0FBakIsQ0FBMkJvaEYsZUFBM0IsR0FBNkMsWUFBWTtBQUNyRCxXQUFPLEtBQUtsTCxjQUFMLENBQW9CQyxjQUFwQixDQUFtQ0csTUFBbkMsQ0FBMENqN0IsU0FBMUMsQ0FBb0QvMUMscUJBQXBELEdBQTRFcUMsTUFBbkY7QUFDSCxHQUZEOztBQUdBLFNBQU9xdUUsZ0JBQVA7QUFDSCxDQWpDcUMsRUFBdEM7O0FBbUNBLElBQUlxTCxjQUFjO0FBQUc7QUFBZSxVQUFVdm1ELE1BQVYsRUFBa0I7QUFDbERuakIsV0FBUyxDQUFDMHBFLGNBQUQsRUFBaUJ2bUQsTUFBakIsQ0FBVDs7QUFDQSxXQUFTdW1ELGNBQVQsQ0FBd0Jsc0UsT0FBeEIsRUFBaUNxb0MsUUFBakMsRUFBMkM7QUFDdkMsUUFBSXhtQixLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JpVixPQUFsQixLQUE4QixJQUExQzs7QUFDQXFvQyxZQUFRLENBQUNqOUMsV0FBVCxDQUFxQnkyQixLQUFLLENBQUMrOUMsT0FBTixHQUFnQi8xRSx3RUFBYSxDQUFDLE9BQUQsRUFBVTtBQUN4REosZUFBUyxFQUFFbzRCLEtBQUssQ0FBQ3lDLEtBQU4sQ0FBWU0sUUFBWixDQUFxQixXQUFyQjtBQUQ2QyxLQUFWLENBQWxEO0FBR0EsV0FBTy9DLEtBQVA7QUFDSDs7QUFDRHFxRCxnQkFBYyxDQUFDcmhGLFNBQWYsQ0FBeUJ5K0IsT0FBekIsR0FBbUMsWUFBWTtBQUMzQ3Y5Qiw0RUFBYSxDQUFDLEtBQUs2ekUsT0FBTixDQUFiOztBQUNBajZDLFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCO0FBQ0gsR0FIRDs7QUFJQW1oRixnQkFBYyxDQUFDcmhGLFNBQWYsQ0FBeUJwQyxNQUF6QixHQUFrQyxVQUFVc0YsS0FBVixFQUFpQjtBQUMvQyxTQUFLaW1ELFdBQUwsQ0FBaUJqbUQsS0FBSyxDQUFDbytFLFlBQXZCO0FBQ0gsR0FGRDs7QUFHQUQsZ0JBQWMsQ0FBQ3JoRixTQUFmLENBQXlCbXBELFdBQXpCLEdBQXVDLFVBQVVtNEIsWUFBVixFQUF3QjtBQUMzRCxRQUFJcnpFLEVBQUUsR0FBRyxJQUFUO0FBQUEsUUFBZWdKLE9BQU8sR0FBR2hKLEVBQUUsQ0FBQ2dKLE9BQTVCO0FBQUEsUUFBcUN3aUIsS0FBSyxHQUFHeHJCLEVBQUUsQ0FBQ3dyQixLQUFoRDs7QUFDQSxRQUFJOG5ELFFBQVEsR0FBR0QsWUFBWSxDQUFDQyxRQUE1QjtBQUNBLFFBQUlDLE9BQU8sR0FBR0QsUUFBUSxDQUFDQSxRQUFRLENBQUNqaEYsTUFBVCxHQUFrQixDQUFuQixDQUF0QjtBQUNBLFFBQUltaEYsUUFBUSxHQUFHenhFLG9FQUFTLENBQUNzeEUsWUFBWSxDQUFDSSxhQUFkLENBQVQsR0FBd0MxeEUsb0VBQVMsQ0FBQ3N4RSxZQUFZLENBQUN2bkYsWUFBZCxDQUFoRTtBQUNBLFFBQUk0bkYsTUFBTSxHQUFHbnlFLHNFQUFXLENBQUM4eEUsWUFBWSxDQUFDdm5GLFlBQWQsQ0FBeEI7QUFDQSxRQUFJMkYsSUFBSSxHQUFHLFlBQVgsQ0FOMkQsQ0FPM0Q7O0FBQ0EsU0FBSyxJQUFJckIsQ0FBQyxHQUFHaWpGLFlBQVksQ0FBQ00sT0FBYixHQUF1QixDQUFwQyxFQUF1Q3ZqRixDQUFDLElBQUksQ0FBNUMsRUFBK0NBLENBQUMsRUFBaEQsRUFBb0Q7QUFDaERxQixVQUFJLElBQUksUUFBUjtBQUNIOztBQUNEQSxRQUFJLElBQUksYUFBUjtBQUNBQSxRQUFJLElBQUksU0FBUjs7QUFDQSxTQUFLLElBQUltVixFQUFFLEdBQUcsQ0FBVCxFQUFZZ3RFLFVBQVUsR0FBR04sUUFBOUIsRUFBd0Mxc0UsRUFBRSxHQUFHZ3RFLFVBQVUsQ0FBQ3ZoRixNQUF4RCxFQUFnRXVVLEVBQUUsRUFBbEUsRUFBc0U7QUFDbEUsVUFBSW80RCxRQUFRLEdBQUc0VSxVQUFVLENBQUNodEUsRUFBRCxDQUF6QjtBQUNBLFVBQUl1Z0UsTUFBTSxHQUFHbkksUUFBUSxLQUFLdVUsT0FBMUI7QUFDQTloRixVQUFJLElBQUksU0FBUytoRixRQUFRLElBQUlyTSxNQUFaLEdBQXFCLG9CQUFyQixHQUE0QyxFQUFyRCxJQUEyRCxHQUFuRTs7QUFDQSxXQUFLLElBQUl0dUQsRUFBRSxHQUFHLENBQVQsRUFBWWc3RCxVQUFVLEdBQUc3VSxRQUE5QixFQUF3Q25tRCxFQUFFLEdBQUdnN0QsVUFBVSxDQUFDeGhGLE1BQXhELEVBQWdFd21CLEVBQUUsRUFBbEUsRUFBc0U7QUFDbEUsWUFBSWk3RCxJQUFJLEdBQUdELFVBQVUsQ0FBQ2g3RCxFQUFELENBQXJCO0FBQ0EsWUFBSWs3RCxvQkFBb0IsR0FBRyxDQUFDdm9ELEtBQUssQ0FBQ00sUUFBTixDQUFlLGNBQWYsQ0FBRCxDQUEzQjs7QUFDQSxZQUFJZ29ELElBQUksQ0FBQ0UsV0FBVCxFQUFzQjtBQUNsQkQsOEJBQW9CLENBQUN4L0UsSUFBckIsQ0FBMEIsWUFBMUI7QUFDSDs7QUFDRCxZQUFJbS9FLE1BQUosRUFBWTtBQUNSSyw4QkFBb0IsR0FBR0Esb0JBQW9CLENBQUMzNUUsTUFBckIsQ0FBNEJreEIsd0VBQWEsQ0FBQ3dvRCxJQUFJLENBQUNwa0YsSUFBTixFQUFZLEtBQUt1RixLQUFMLENBQVdrcUIsV0FBdkIsRUFBb0MsS0FBS2pZLE9BQXpDLEVBQWtELElBQWxELENBQXpDLENBQWlHO0FBQWpHLFdBQXZCO0FBRUg7O0FBQ0R6VixZQUFJLElBQ0EsZ0JBQWdCc2lGLG9CQUFvQixDQUFDdCtELElBQXJCLENBQTBCLEdBQTFCLENBQWhCLEdBQWlELEdBQWpELEdBQ0ksY0FESixHQUNxQnpNLE9BQU8sQ0FBQ21pQixTQUFSLENBQWtCMm9ELElBQUksQ0FBQ3BrRixJQUF2QixFQUE2QjtBQUFFMDdCLGtCQUFRLEVBQUUsQ0FBQ2lvRCxZQUFZLENBQUNZLFdBQTFCO0FBQXVDdnpDLDRCQUFrQixFQUFFO0FBQTNELFNBQTdCLENBRHJCLEdBQ3VILEdBRHZILElBRUtvekMsSUFBSSxDQUFDeHlCLE9BQUwsR0FBZSxDQUFmLEdBQW1CLGVBQWV3eUIsSUFBSSxDQUFDeHlCLE9BQXBCLEdBQThCLEdBQWpELEdBQXVELEVBRjVELElBR0ksR0FISixHQUlJLCtCQUpKLEdBS0l3eUIsSUFBSSxDQUFDSSxRQUxULEdBTUksUUFOSixHQU9JLE9BUlI7QUFTSDs7QUFDRHppRixVQUFJLElBQUksT0FBUjtBQUNIOztBQUNEQSxRQUFJLElBQUksVUFBUjtBQUNBLFNBQUtxMUUsT0FBTCxDQUFheDFFLFNBQWIsR0FBeUJHLElBQXpCLENBeEMyRCxDQXdDNUI7O0FBQy9CLFNBQUswaUYsVUFBTCxHQUFrQmxnRix1RUFBWSxDQUFDLEtBQUs2eUUsT0FBTixFQUFlLEtBQWYsQ0FBOUI7QUFDQSxTQUFLc04sUUFBTCxHQUFnQm5nRix1RUFBWSxDQUFDLEtBQUs2eUUsT0FBTCxDQUFhMTJCLGFBQWIsQ0FBMkIsZUFBM0IsQ0FBRCxFQUE4QztBQUMxRSxzQkFENEIsQ0FBNUI7QUFFQW44QywyRUFBWSxDQUFDLEtBQUs2eUUsT0FBTCxDQUFhenlFLGdCQUFiLENBQThCLHFCQUE5QixDQUFELEVBQXVEO0FBQ25FLHNCQURZLENBQVosQ0FDb0JrSCxPQURwQixDQUM0QixVQUFVbkUsT0FBVixFQUFtQjtBQUMzQ0EsYUFBTyxDQUFDdEMsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsV0FBdEI7QUFDSCxLQUhEO0FBSUgsR0FoREQ7O0FBaURBLFNBQU9xK0UsY0FBUDtBQUNILENBbEVtQyxDQWtFbEN4aEQsNERBbEVrQyxDQUFwQzs7QUFvRUEsSUFBSXlpRCxhQUFhO0FBQUc7QUFBZSxVQUFVeG5ELE1BQVYsRUFBa0I7QUFDakRuakIsV0FBUyxDQUFDMnFFLGFBQUQsRUFBZ0J4bkQsTUFBaEIsQ0FBVDs7QUFDQSxXQUFTd25ELGFBQVQsQ0FBdUJudEUsT0FBdkIsRUFBZ0Nxb0MsUUFBaEMsRUFBMEM7QUFDdEMsUUFBSXhtQixLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JpVixPQUFsQixLQUE4QixJQUExQzs7QUFDQXFvQyxZQUFRLENBQUNqOUMsV0FBVCxDQUFxQnkyQixLQUFLLENBQUN2N0IsRUFBTixHQUFXdUQsd0VBQWEsQ0FBQyxLQUFELEVBQVE7QUFBRUosZUFBUyxFQUFFO0FBQWIsS0FBUixDQUE3QztBQUNBLFdBQU9vNEIsS0FBUDtBQUNIOztBQUNEc3JELGVBQWEsQ0FBQ3RpRixTQUFkLENBQXdCeStCLE9BQXhCLEdBQWtDLFlBQVk7QUFDMUN2OUIsNEVBQWEsQ0FBQyxLQUFLekYsRUFBTixDQUFiOztBQUNBcS9CLFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCO0FBQ0gsR0FIRDs7QUFJQW9pRixlQUFhLENBQUN0aUYsU0FBZCxDQUF3QnBDLE1BQXhCLEdBQWlDLFVBQVVzRixLQUFWLEVBQWlCO0FBQzlDLFNBQUtpbUQsV0FBTCxDQUFpQmptRCxLQUFLLENBQUNvK0UsWUFBdkI7QUFDSCxHQUZEOztBQUdBZ0IsZUFBYSxDQUFDdGlGLFNBQWQsQ0FBd0JtcEQsV0FBeEIsR0FBc0MsVUFBVW00QixZQUFWLEVBQXdCO0FBQzFELFFBQUlyekUsRUFBRSxHQUFHLElBQVQ7QUFBQSxRQUFld3JCLEtBQUssR0FBR3hyQixFQUFFLENBQUN3ckIsS0FBMUI7QUFBQSxRQUFpQ3ZPLElBQUksR0FBR2pkLEVBQUUsQ0FBQ2lkLElBQTNDO0FBQUEsUUFBaURqVSxPQUFPLEdBQUdoSixFQUFFLENBQUNnSixPQUE5RDs7QUFDQSxRQUFJc3JFLFNBQVMsR0FBR2pCLFlBQVksQ0FBQ2lCLFNBQTdCO0FBQUEsUUFBd0NDLFlBQVksR0FBR2xCLFlBQVksQ0FBQ2tCLFlBQXBFO0FBQ0EsUUFBSTlpRixJQUFJLEdBQUcsbUJBQW1CKzVCLEtBQUssQ0FBQ00sUUFBTixDQUFlLFdBQWYsQ0FBbkIsR0FBaUQsSUFBakQsR0FDUCxZQURKOztBQUVBLFNBQUssSUFBSTE3QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa2tGLFNBQVMsQ0FBQ2ppRixNQUE5QixFQUFzQ2pDLENBQUMsRUFBdkMsRUFBMkM7QUFDdkNxQixVQUFJLElBQUksUUFBUjtBQUNIOztBQUNEQSxRQUFJLElBQUksYUFBUjtBQUNBQSxRQUFJLElBQUksYUFBUjs7QUFDQSxTQUFLLElBQUlyQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa2tGLFNBQVMsQ0FBQ2ppRixNQUE5QixFQUFzQ2pDLENBQUMsRUFBdkMsRUFBMkM7QUFDdkNxQixVQUFJLElBQUksS0FBSytpRixZQUFMLENBQWtCRixTQUFTLENBQUNsa0YsQ0FBRCxDQUEzQixFQUFnQ21rRixZQUFZLENBQUNua0YsQ0FBRCxDQUE1QyxFQUFpRGlqRixZQUFqRCxDQUFSO0FBQ0g7O0FBQ0Q1aEYsUUFBSSxJQUFJLHVCQUFSO0FBQ0EsU0FBS2pFLEVBQUwsQ0FBUThELFNBQVIsR0FBb0JHLElBQXBCO0FBQ0EsU0FBSzBpRixVQUFMLEdBQWtCbGdGLHVFQUFZLENBQUMsS0FBS3pHLEVBQU4sRUFBVSxLQUFWLENBQTlCO0FBQ0EsU0FBS2luRixPQUFMLEdBQWV4Z0YsdUVBQVksQ0FBQyxLQUFLekcsRUFBTixFQUFVLElBQVYsQ0FBM0I7O0FBQ0EsU0FBSyxJQUFJNEMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2trRixTQUFTLENBQUNqaUYsTUFBOUIsRUFBc0NqQyxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDNnNCLFVBQUksQ0FBQ08sZUFBTCxDQUFxQixXQUFyQixFQUFrQyxDQUM5QjtBQUNJOXRCLFlBQUksRUFBRXNaLE9BQU8sQ0FBQ3FTLE1BQVIsQ0FBZWk1RCxTQUFTLENBQUNsa0YsQ0FBRCxDQUF4QixDQURWO0FBRUk1QyxVQUFFLEVBQUUsS0FBS2luRixPQUFMLENBQWFya0YsQ0FBYixDQUZSO0FBR0k2c0IsWUFBSSxFQUFFQTtBQUhWLE9BRDhCLENBQWxDO0FBT0g7O0FBQ0QsU0FBS3kzRCxlQUFMLEdBQXVCLElBQUlwbkQsZ0VBQUosQ0FBa0IsS0FBSzkvQixFQUF2QixFQUEyQixLQUFLaW5GLE9BQWhDLEVBQXlDLElBQXpDLEVBQStDO0FBQ3RFLFNBRHVCLENBQ2pCO0FBRGlCLEtBQXZCLENBMUIwRCxDQTZCMUQ7QUFDQTs7QUFDQSxTQUFLRSxlQUFMLEdBQXVCLElBQUlybkQsZ0VBQUosQ0FBa0IsS0FBSzkvQixFQUF2QixFQUEyQmdILHVFQUFZLENBQUMsS0FBS2lnRixPQUFOLEVBQWUsS0FBZixDQUF2QyxFQUE4RCxJQUE5RCxFQUFvRTtBQUMzRixTQUR1QixDQUNqQjtBQURpQixLQUF2QjtBQUdILEdBbENEOztBQW1DQUosZUFBYSxDQUFDdGlGLFNBQWQsQ0FBd0J5aUYsWUFBeEIsR0FBdUMsVUFBVTlrRixJQUFWLEVBQWdCa2xGLElBQWhCLEVBQXNCdkIsWUFBdEIsRUFBb0M7QUFDdkUsUUFBSXJ6RSxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWV3ckIsS0FBSyxHQUFHeHJCLEVBQUUsQ0FBQ3dyQixLQUExQjtBQUFBLFFBQWlDeGlCLE9BQU8sR0FBR2hKLEVBQUUsQ0FBQ2dKLE9BQTlDOztBQUNBLFFBQUl5aUIsT0FBSjs7QUFDQSxRQUFJNG5ELFlBQVksQ0FBQ1ksV0FBakIsRUFBOEI7QUFDMUJ4b0QsYUFBTyxHQUFHLEVBQVY7QUFDQUEsYUFBTyxDQUFDbDNCLElBQVIsQ0FBYStOLGdFQUFLLENBQUMwRyxPQUFPLENBQUNpM0IscUJBQVIsQ0FBOEJvekMsWUFBWSxDQUFDd0IsZUFBYixDQUE2QmhtRixLQUEzRCxFQUFrRWEsSUFBbEUsRUFBd0UyakYsWUFBWSxDQUFDSSxhQUFyRixDQUFELENBQUwsR0FDVCxVQURTLEdBRVQsVUFGSjtBQUdILEtBTEQsTUFNSztBQUNEaG9ELGFBQU8sR0FBR0gsd0VBQWEsQ0FBQzU3QixJQUFELEVBQU8sS0FBS3VGLEtBQUwsQ0FBV2txQixXQUFsQixFQUErQixLQUFLalksT0FBcEMsQ0FBdkI7QUFDQXVrQixhQUFPLENBQUNsM0IsSUFBUixDQUFhLFFBQWI7QUFDSDs7QUFDRGszQixXQUFPLENBQUMvZixPQUFSLENBQWdCOGYsS0FBSyxDQUFDTSxRQUFOLENBQWUsZUFBZixDQUFoQjs7QUFDQSxRQUFJOG9ELElBQUosRUFBVTtBQUNObnBELGFBQU8sQ0FBQ2wzQixJQUFSLENBQWEsWUFBYjtBQUNIOztBQUNELFdBQU8sZ0JBQWdCazNCLE9BQU8sQ0FBQ2hXLElBQVIsQ0FBYSxHQUFiLENBQWhCLEdBQW9DLEdBQXBDLEdBQ0gsY0FERyxHQUNjek0sT0FBTyxDQUFDbWlCLFNBQVIsQ0FBa0J6N0IsSUFBbEIsRUFBd0I7QUFBRTA3QixjQUFRLEVBQUUsQ0FBQ2lvRCxZQUFZLENBQUNZLFdBQTFCO0FBQXVDdnpDLHdCQUFrQixFQUFFO0FBQTNELEtBQXhCLENBRGQsR0FDMkcsR0FEM0csR0FFSCxtQkFGSjtBQUdILEdBcEJEOztBQXFCQTJ6QyxlQUFhLENBQUN0aUYsU0FBZCxDQUF3Qis3QyxVQUF4QixHQUFxQyxZQUFZO0FBQzdDLFNBQUs0bUMsZUFBTCxDQUFxQmhuRCxLQUFyQjtBQUNBLFNBQUtpbkQsZUFBTCxDQUFxQmpuRCxLQUFyQjtBQUNILEdBSEQ7O0FBSUEybUQsZUFBYSxDQUFDdGlGLFNBQWQsQ0FBd0IrOEUsYUFBeEIsR0FBd0MsVUFBVXpnRCxZQUFWLEVBQXdCO0FBQzVELFFBQUlxbUQsZUFBZSxHQUFHLEtBQUtBLGVBQTNCO0FBQ0EsUUFBSXJCLFlBQVksR0FBRyxLQUFLcCtFLEtBQUwsQ0FBV28rRSxZQUE5QjtBQUNBLFFBQUl5QixTQUFTLEdBQUdKLGVBQWUsQ0FBQ3RtRCxXQUFoQixDQUE0QkMsWUFBNUIsQ0FBaEI7O0FBQ0EsUUFBSXltRCxTQUFTLElBQUksSUFBakIsRUFBdUI7QUFDbkI7QUFDQSxVQUFJQyxTQUFTLEdBQUdMLGVBQWUsQ0FBQ2xtRCxRQUFoQixDQUF5QnNtRCxTQUF6QixDQUFoQjtBQUNBLFVBQUlFLE9BQU8sR0FBRyxLQUFLei9ELEtBQUwsR0FDVixDQUFDbS9ELGVBQWUsQ0FBQzFtRCxNQUFoQixDQUF1QjhtRCxTQUF2QixJQUFvQ3ptRCxZQUFyQyxJQUFxRDBtRCxTQUQzQyxHQUVWLENBQUMxbUQsWUFBWSxHQUFHcW1ELGVBQWUsQ0FBQzNtRCxLQUFoQixDQUFzQittRCxTQUF0QixDQUFoQixJQUFvREMsU0FGeEQ7QUFHQSxVQUFJRSxjQUFjLEdBQUdsL0UsSUFBSSxDQUFDN0wsS0FBTCxDQUFXOHFGLE9BQU8sR0FBRzNCLFlBQVksQ0FBQzZCLFlBQWxDLENBQXJCO0FBQ0EsVUFBSXJtRixLQUFLLEdBQUcsS0FBS21hLE9BQUwsQ0FBYWpVLEdBQWIsQ0FBaUJzK0UsWUFBWSxDQUFDaUIsU0FBYixDQUF1QlEsU0FBdkIsQ0FBakIsRUFBb0RuekUsMkVBQWdCLENBQUMweEUsWUFBWSxDQUFDOEIsWUFBZCxFQUE0QkYsY0FBNUIsQ0FBcEUsQ0FBWjtBQUNBLFVBQUlubUYsR0FBRyxHQUFHLEtBQUtrYSxPQUFMLENBQWFqVSxHQUFiLENBQWlCbEcsS0FBakIsRUFBd0J3a0YsWUFBWSxDQUFDOEIsWUFBckMsQ0FBVjtBQUNBLGFBQU87QUFDSHhyRCxnQkFBUSxFQUFFO0FBQ05oaEIsZUFBSyxFQUFFO0FBQUU5WixpQkFBSyxFQUFFQSxLQUFUO0FBQWdCQyxlQUFHLEVBQUVBO0FBQXJCLFdBREQ7QUFFTjBiLGdCQUFNLEVBQUUsQ0FBQyxLQUFLdlYsS0FBTCxDQUFXbytFLFlBQVgsQ0FBd0JZO0FBRjNCLFNBRFA7QUFLSDM3QixhQUFLLEVBQUUsS0FBSzY3QixVQUFMLENBQWdCVyxTQUFoQixDQUxKO0FBTUg1b0YsWUFBSSxFQUFFd29GLGVBQWUsQ0FBQzNtRCxLQUFoQixDQUFzQittRCxTQUF0QixDQU5IO0FBT0gxb0YsYUFBSyxFQUFFc29GLGVBQWUsQ0FBQzFtRCxNQUFoQixDQUF1QjhtRCxTQUF2QjtBQVBKLE9BQVA7QUFTSDs7QUFDRCxXQUFPLElBQVA7QUFDSCxHQXhCRDs7QUF5QkEsU0FBT1QsYUFBUDtBQUNILENBcEdrQyxDQW9HakN6aUQsNERBcEdpQyxDQUFuQzs7QUFzR0EsSUFBSXdqRCxlQUFlLEdBQUcsRUFBdEIsQyxDQUEwQjs7QUFDMUIsSUFBSUMsd0JBQXdCLEdBQUcsQ0FBL0IsQyxDQUFrQzs7QUFDbEMsSUFBSUMsY0FBYyxHQUFHLEdBQXJCLEMsQ0FBMEI7O0FBQzFCaDhDLHlEQUFNLENBQUNpOEMsa0JBQVAsR0FBNEIsSUFBNUIsQyxDQUNBOztBQUNBLElBQUlDLG1CQUFtQixHQUFHLENBQ3RCO0FBQUUxNEUsT0FBSyxFQUFFO0FBQVQsQ0FEc0IsRUFFdEI7QUFBRUMsUUFBTSxFQUFFO0FBQVYsQ0FGc0IsRUFHdEI7QUFBRUMsTUFBSSxFQUFFO0FBQVIsQ0FIc0IsRUFJdEI7QUFBRTBELE9BQUssRUFBRTtBQUFULENBSnNCLEVBS3RCO0FBQUVFLFNBQU8sRUFBRTtBQUFYLENBTHNCLEVBTXRCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBTnNCLEVBT3RCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBUHNCLEVBUXRCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBUnNCLEVBU3RCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBVHNCLEVBVXRCO0FBQUVFLFNBQU8sRUFBRTtBQUFYLENBVnNCLEVBV3RCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBWHNCLEVBWXRCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBWnNCLEVBYXRCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBYnNCLEVBY3RCO0FBQUVBLFNBQU8sRUFBRTtBQUFYLENBZHNCLEVBZXRCO0FBQUU3RCxjQUFZLEVBQUU7QUFBaEIsQ0Fmc0IsRUFnQnRCO0FBQUVBLGNBQVksRUFBRTtBQUFoQixDQWhCc0IsRUFpQnRCO0FBQUVBLGNBQVksRUFBRTtBQUFoQixDQWpCc0IsRUFrQnRCO0FBQUVBLGNBQVksRUFBRTtBQUFoQixDQWxCc0IsQ0FBMUI7O0FBb0JBLFNBQVN3NEUsd0JBQVQsQ0FBa0N0MkQsV0FBbEMsRUFBK0NsQyxJQUEvQyxFQUFxRDtBQUNqRCxNQUFJalUsT0FBTyxHQUFHaVUsSUFBSSxDQUFDalUsT0FBbkI7QUFDQSxNQUFJcXFFLFlBQVksR0FBRztBQUNmSSxpQkFBYSxFQUFFaUMsbUJBQW1CLENBQUN6NEQsSUFBRCxFQUFPLG1CQUFQLENBRG5CO0FBRWZueEIsZ0JBQVksRUFBRTRwRixtQkFBbUIsQ0FBQ3o0RCxJQUFELEVBQU8sY0FBUDtBQUZsQixHQUFuQjtBQUlBMDRELHNCQUFvQixDQUFDdEMsWUFBRCxFQUFlbDBELFdBQWYsRUFBNEJuVyxPQUE1QixDQUFwQixDQU5pRCxDQU1TOztBQUMxRDRzRSxxQkFBbUIsQ0FBQ3ZDLFlBQUQsRUFBZWwwRCxXQUFmLEVBQTRCblcsT0FBNUIsQ0FBbkI7QUFDQTZzRSxvQkFBa0IsQ0FBQ3hDLFlBQUQsRUFBZWwwRCxXQUFmLEVBQTRCblcsT0FBNUIsQ0FBbEI7QUFDQSxNQUFJcmUsS0FBSyxHQUFHc3lCLElBQUksQ0FBQ3ZPLEdBQUwsQ0FBUyxpQkFBVCxDQUFaO0FBQ0EsTUFBSW9uRSxVQUFVLEdBQUdoa0YsS0FBSyxDQUFDa1QsT0FBTixDQUFjcmEsS0FBZCxJQUNiQSxLQURhLEdBRVZBLEtBQUssSUFBSSxJQUFWLEdBQ0UsQ0FBQ0EsS0FBRCxDQURGLEdBR01vckYsb0JBQW9CLENBQUMxQyxZQUFELEVBQWVsMEQsV0FBZixFQUE0Qm5XLE9BQTVCLEVBQXFDaVUsSUFBckMsQ0FMaEM7QUFNQW8yRCxjQUFZLENBQUMyQyxhQUFiLEdBQTZCRixVQUFVLENBQUMzN0UsR0FBWCxDQUFlLFVBQVU4N0UsU0FBVixFQUFxQjtBQUM3RCxXQUFPbC9ELDBFQUFlLENBQUNrL0QsU0FBRCxDQUF0QjtBQUNILEdBRjRCLENBQTdCO0FBR0E1QyxjQUFZLENBQUNZLFdBQWIsR0FBMkJoc0UsT0FBTyxDQUFDb3JFLFlBQVksQ0FBQ3ZuRixZQUFiLENBQTBCbVIsWUFBM0IsQ0FBbEM7QUFDQSxNQUFJZ00sU0FBUyxHQUFHLElBQWhCOztBQUNBLE1BQUksQ0FBQ29xRSxZQUFZLENBQUNZLFdBQWxCLEVBQStCO0FBQzNCLFFBQUlpQyxRQUFRLEdBQUczekUsc0ZBQTJCLENBQUM4d0UsWUFBWSxDQUFDdm5GLFlBQWQsQ0FBM0IsQ0FBdURpVSxJQUF0RTs7QUFDQSxRQUFJLGtCQUFrQi9YLElBQWxCLENBQXVCa3VGLFFBQXZCLENBQUosRUFBc0M7QUFDbENqdEUsZUFBUyxHQUFHaXRFLFFBQVo7QUFDSDtBQUNKOztBQUNEN0MsY0FBWSxDQUFDcHFFLFNBQWIsR0FBeUJBLFNBQXpCO0FBQ0FvcUUsY0FBWSxDQUFDOEMsY0FBYixHQUNJNTBFLHNFQUFXLENBQUM4eEUsWUFBWSxDQUFDdm5GLFlBQWQsQ0FBWCxJQUNJc3FGLGNBQWMsQ0FBQyxPQUFELEVBQVVqM0QsV0FBVixFQUF1Qm5XLE9BQXZCLENBQWQsSUFBaUQsQ0FEckQsSUFFSSxDQUFDaVUsSUFBSSxDQUFDdk8sR0FBTCxDQUFTLGVBQVQsQ0FIVDtBQUlBOzs7Ozs7OztBQU9BLE1BQUkybkUsZUFBZSxHQUFHcDVELElBQUksQ0FBQ3ZPLEdBQUwsQ0FBUyxjQUFULENBQXRCO0FBQ0EsTUFBSXltRSxZQUFKO0FBQ0EsTUFBSUQsWUFBSjs7QUFDQSxNQUFJbUIsZUFBSixFQUFxQjtBQUNqQmxCLGdCQUFZLEdBQUdyMUUseUVBQWMsQ0FBQ3UyRSxlQUFELENBQTdCO0FBQ0FuQixnQkFBWSxHQUFHaHpFLCtFQUFvQixDQUFDbXhFLFlBQVksQ0FBQ3ZuRixZQUFkLEVBQTRCcXBGLFlBQTVCLENBQW5DLENBRmlCLENBR2pCO0FBQ0g7O0FBQ0QsTUFBSUQsWUFBWSxJQUFJLElBQXBCLEVBQTBCO0FBQ3RCQyxnQkFBWSxHQUFHOUIsWUFBWSxDQUFDdm5GLFlBQTVCO0FBQ0FvcEYsZ0JBQVksR0FBRyxDQUFmO0FBQ0g7O0FBQ0Q3QixjQUFZLENBQUM4QixZQUFiLEdBQTRCQSxZQUE1QjtBQUNBOUIsY0FBWSxDQUFDNkIsWUFBYixHQUE0QkEsWUFBNUIsQ0FwRGlELENBcURqRDs7QUFDQSxNQUFJb0IsWUFBWSxHQUFHdjBFLG9FQUFTLENBQUNvZCxXQUFXLENBQUM2YSxPQUFiLENBQVQsR0FBaUNqNEIsb0VBQVMsQ0FBQ29kLFdBQVcsQ0FBQzRhLE9BQWIsQ0FBN0QsQ0F0RGlELENBdURqRDs7QUFDQSxNQUFJdzhDLGVBQWUsR0FBR0MsYUFBYSxDQUFDcjNELFdBQVcsQ0FBQ3NrQixXQUFaLENBQXdCNTBDLEtBQXpCLEVBQWdDd2tGLFlBQWhDLEVBQThDcnFFLE9BQTlDLENBQW5DO0FBQ0EsTUFBSXl0RSxhQUFhLEdBQUdELGFBQWEsQ0FBQ3IzRCxXQUFXLENBQUNza0IsV0FBWixDQUF3QjMwQyxHQUF6QixFQUE4QnVrRixZQUE5QixFQUE0Q3JxRSxPQUE1QyxDQUFqQyxDQXpEaUQsQ0EwRGpEO0FBQ0E7O0FBQ0EsTUFBSXFxRSxZQUFZLENBQUNZLFdBQWpCLEVBQThCO0FBQzFCc0MsbUJBQWUsR0FBR3Z0RSxPQUFPLENBQUNqVSxHQUFSLENBQVl3aEYsZUFBWixFQUE2QnAzRCxXQUFXLENBQUM0YSxPQUF6QyxDQUFsQjtBQUNBMDhDLGlCQUFhLEdBQUd6dEUsT0FBTyxDQUFDalUsR0FBUixDQUFZaUgsa0VBQU8sQ0FBQ3k2RSxhQUFELEVBQWdCLENBQUMsQ0FBakIsQ0FBbkIsRUFBd0N0M0QsV0FBVyxDQUFDNmEsT0FBcEQsQ0FBaEI7QUFDSDs7QUFDRHE1QyxjQUFZLENBQUNpRCxZQUFiLEdBQTRCQSxZQUE1QjtBQUNBakQsY0FBWSxDQUFDd0IsZUFBYixHQUErQjtBQUFFaG1GLFNBQUssRUFBRTBuRixlQUFUO0FBQTBCem5GLE9BQUcsRUFBRTJuRjtBQUEvQixHQUEvQjtBQUNBLE1BQUluQyxTQUFTLEdBQUcsRUFBaEI7QUFDQSxNQUFJNWtGLElBQUksR0FBRzZtRixlQUFYOztBQUNBLFNBQU83bUYsSUFBSSxHQUFHK21GLGFBQWQsRUFBNkI7QUFDekIsUUFBSTkyRSxXQUFXLENBQUNqUSxJQUFELEVBQU8yakYsWUFBUCxFQUFxQmwwRCxXQUFyQixFQUFrQ2xDLElBQWxDLENBQWYsRUFBd0Q7QUFDcERxM0QsZUFBUyxDQUFDLy9FLElBQVYsQ0FBZTdFLElBQWY7QUFDSDs7QUFDREEsUUFBSSxHQUFHc1osT0FBTyxDQUFDalUsR0FBUixDQUFZckYsSUFBWixFQUFrQjJqRixZQUFZLENBQUN2bkYsWUFBL0IsQ0FBUDtBQUNIOztBQUNEdW5GLGNBQVksQ0FBQ2lCLFNBQWIsR0FBeUJBLFNBQXpCLENBMUVpRCxDQTJFakQ7O0FBQ0EsTUFBSW9DLFNBQVMsR0FBRyxDQUFDLENBQWpCO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLENBQWYsQ0E3RWlELENBNkUvQjs7QUFDbEIsTUFBSUMsZUFBZSxHQUFHLEVBQXRCO0FBQ0EsTUFBSUMsZUFBZSxHQUFHLEVBQXRCO0FBQ0FubkYsTUFBSSxHQUFHNm1GLGVBQVA7O0FBQ0EsU0FBTzdtRixJQUFJLEdBQUcrbUYsYUFBZCxFQUE2QjtBQUN6QixRQUFJOTJFLFdBQVcsQ0FBQ2pRLElBQUQsRUFBTzJqRixZQUFQLEVBQXFCbDBELFdBQXJCLEVBQWtDbEMsSUFBbEMsQ0FBZixFQUF3RDtBQUNwRHk1RCxlQUFTO0FBQ1RFLHFCQUFlLENBQUNyaUYsSUFBaEIsQ0FBcUJtaUYsU0FBckI7QUFDQUcscUJBQWUsQ0FBQ3RpRixJQUFoQixDQUFxQm9pRixRQUFyQjtBQUNILEtBSkQsTUFLSztBQUNEQyxxQkFBZSxDQUFDcmlGLElBQWhCLENBQXFCbWlGLFNBQVMsR0FBRyxHQUFqQztBQUNIOztBQUNEaG5GLFFBQUksR0FBR3NaLE9BQU8sQ0FBQ2pVLEdBQVIsQ0FBWXJGLElBQVosRUFBa0IyakYsWUFBWSxDQUFDOEIsWUFBL0IsQ0FBUDtBQUNBd0IsWUFBUTtBQUNYOztBQUNEdEQsY0FBWSxDQUFDdUQsZUFBYixHQUErQkEsZUFBL0I7QUFDQXZELGNBQVksQ0FBQ3dELGVBQWIsR0FBK0JBLGVBQS9CO0FBQ0F4RCxjQUFZLENBQUN5RCxPQUFiLEdBQXVCSixTQUFTLEdBQUcsQ0FBbkMsQ0EvRmlELENBK0ZYOztBQUN0Q3JELGNBQVksQ0FBQ00sT0FBYixHQUF1Qk4sWUFBWSxDQUFDeUQsT0FBYixHQUF1QnpELFlBQVksQ0FBQzZCLFlBQTNELENBaEdpRCxDQWlHakQ7O0FBQ0E3QixjQUFZLENBQUNrQixZQUFiLEdBQTRCd0MsaUJBQWlCLENBQUMxRCxZQUFELEVBQWVycUUsT0FBZixDQUE3QztBQUNBcXFFLGNBQVksQ0FBQ0MsUUFBYixHQUF3QjBELGFBQWEsQ0FBQzNELFlBQUQsRUFBZXJxRSxPQUFmLEVBQXdCaVUsSUFBeEIsQ0FBckM7QUFDQSxTQUFPbzJELFlBQVA7QUFDSDtBQUNEOzs7OztBQUdBLFNBQVNtRCxhQUFULENBQXVCOW1GLElBQXZCLEVBQTZCMmpGLFlBQTdCLEVBQTJDcnFFLE9BQTNDLEVBQW9EO0FBQ2hELE1BQUlpdUUsVUFBVSxHQUFHdm5GLElBQWpCOztBQUNBLE1BQUksQ0FBQzJqRixZQUFZLENBQUNZLFdBQWxCLEVBQStCO0FBQzNCZ0QsY0FBVSxHQUFHcjZFLHFFQUFVLENBQUNxNkUsVUFBRCxDQUF2Qjs7QUFDQSxRQUFJNUQsWUFBWSxDQUFDcHFFLFNBQWpCLEVBQTRCO0FBQ3hCZ3VFLGdCQUFVLEdBQUdqdUUsT0FBTyxDQUFDazNCLE9BQVIsQ0FBZ0IrMkMsVUFBaEIsRUFBNEI1RCxZQUFZLENBQUNwcUUsU0FBekMsQ0FBYjtBQUNIO0FBQ0o7O0FBQ0QsU0FBT2d1RSxVQUFQO0FBQ0g7QUFDRDs7Ozs7QUFHQSxTQUFTQyxjQUFULENBQXdCdnVFLEtBQXhCLEVBQStCMHFFLFlBQS9CLEVBQTZDcnFFLE9BQTdDLEVBQXNEO0FBQ2xELE1BQUksQ0FBQ3FxRSxZQUFZLENBQUNZLFdBQWxCLEVBQStCO0FBQzNCdHJFLFNBQUssR0FBR04saUZBQXNCLENBQUNNLEtBQUQsQ0FBOUI7O0FBQ0EsUUFBSTBxRSxZQUFZLENBQUNwcUUsU0FBakIsRUFBNEI7QUFDeEIsVUFBSWt1RSxRQUFRLEdBQUd4dUUsS0FBZixDQUR3QixDQUNGOztBQUN0QkEsV0FBSyxHQUFHO0FBQ0o5WixhQUFLLEVBQUVtYSxPQUFPLENBQUNrM0IsT0FBUixDQUFnQnYzQixLQUFLLENBQUM5WixLQUF0QixFQUE2QndrRixZQUFZLENBQUNwcUUsU0FBMUMsQ0FESDtBQUVKbmEsV0FBRyxFQUFFa2EsT0FBTyxDQUFDazNCLE9BQVIsQ0FBZ0J2M0IsS0FBSyxDQUFDN1osR0FBdEIsRUFBMkJ1a0YsWUFBWSxDQUFDcHFFLFNBQXhDO0FBRkQsT0FBUixDQUZ3QixDQU14QjtBQUNBOztBQUNBLFVBQUlOLEtBQUssQ0FBQzdaLEdBQU4sQ0FBVXdOLE9BQVYsT0FBd0I2NkUsUUFBUSxDQUFDcm9GLEdBQVQsQ0FBYXdOLE9BQWIsRUFBeEIsSUFBa0RxTSxLQUFLLENBQUM3WixHQUFOLElBQWE2WixLQUFLLENBQUM5WixLQUF6RSxFQUFnRjtBQUM1RThaLGFBQUssR0FBRztBQUNKOVosZUFBSyxFQUFFOFosS0FBSyxDQUFDOVosS0FEVDtBQUVKQyxhQUFHLEVBQUVrYSxPQUFPLENBQUNqVSxHQUFSLENBQVk0VCxLQUFLLENBQUM3WixHQUFsQixFQUF1QnVrRixZQUFZLENBQUN2bkYsWUFBcEM7QUFGRCxTQUFSO0FBSUg7QUFDSjtBQUNKOztBQUNELFNBQU82YyxLQUFQO0FBQ0g7O0FBQ0QsU0FBU2hKLFdBQVQsQ0FBcUJqUSxJQUFyQixFQUEyQjJqRixZQUEzQixFQUF5Q2wwRCxXQUF6QyxFQUFzRGxDLElBQXRELEVBQTREO0FBQ3hELE1BQUlBLElBQUksQ0FBQzJ3QixvQkFBTCxDQUEwQjlJLFdBQTFCLENBQXNDcDFDLElBQXRDLENBQUosRUFBaUQ7QUFDN0MsV0FBTyxLQUFQO0FBQ0gsR0FGRCxNQUdLLElBQUkyakYsWUFBWSxDQUFDWSxXQUFqQixFQUE4QjtBQUMvQjtBQUNBLFFBQUl6ekUsR0FBRyxHQUFHNUQscUVBQVUsQ0FBQ2xOLElBQUQsQ0FBcEI7QUFDQSxRQUFJMG5GLE1BQU0sR0FBRzFuRixJQUFJLENBQUM0TSxPQUFMLEtBQWlCa0UsR0FBRyxDQUFDbEUsT0FBSixFQUE5QjtBQUNBLFFBQUkyRSxFQUFFLEdBQUdtMkUsTUFBTSxHQUFHcjFFLG9FQUFTLENBQUNvZCxXQUFXLENBQUM0YSxPQUFiLENBQTNCLENBSitCLENBSW1COztBQUNsRDk0QixNQUFFLEdBQUcsQ0FBRUEsRUFBRSxHQUFHLFFBQU4sR0FBa0IsUUFBbkIsSUFBK0IsUUFBcEMsQ0FMK0IsQ0FLZTs7QUFDOUMsV0FBT0EsRUFBRSxHQUFHb3lFLFlBQVksQ0FBQ2lELFlBQXpCLENBTitCLENBTVE7QUFDMUMsR0FQSSxNQVFBO0FBQ0QsV0FBTyxJQUFQO0FBQ0g7QUFDSjs7QUFDRCxTQUFTWixtQkFBVCxDQUE2Qno0RCxJQUE3QixFQUFtQzduQixJQUFuQyxFQUF5QztBQUNyQyxNQUFJekssS0FBSyxHQUFHc3lCLElBQUksQ0FBQ3ZPLEdBQUwsQ0FBU3RaLElBQVQsQ0FBWjs7QUFDQSxNQUFJekssS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDZixXQUFPbVYseUVBQWMsQ0FBQ25WLEtBQUQsQ0FBckI7QUFDSDtBQUNKOztBQUNELFNBQVNnckYsb0JBQVQsQ0FBOEJ0QyxZQUE5QixFQUE0Q2wwRCxXQUE1QyxFQUF5RG5XLE9BQXpELEVBQWtFO0FBQzlELE1BQUk0aUIsWUFBWSxHQUFHek0sV0FBVyxDQUFDeU0sWUFBL0IsQ0FEOEQsQ0FFOUQ7O0FBQ0EsTUFBSXluRCxZQUFZLENBQUNJLGFBQWpCLEVBQWdDO0FBQzVCLFFBQUk0RCxRQUFRLEdBQUdydUUsT0FBTyxDQUFDaTNCLHFCQUFSLENBQThCclUsWUFBWSxDQUFDLzhCLEtBQTNDLEVBQWtEKzhCLFlBQVksQ0FBQzk4QixHQUEvRCxFQUFvRXVrRixZQUFZLENBQUNJLGFBQWpGLENBQWY7O0FBQ0EsUUFBSTRELFFBQVEsR0FBRy85Qyx5REFBTSxDQUFDaThDLGtCQUF0QixFQUEwQztBQUN0Q3B3RixhQUFPLENBQUMrMkMsSUFBUixDQUFhLDZDQUFiO0FBQ0FtM0Msa0JBQVksQ0FBQ0ksYUFBYixHQUE2QixJQUE3QjtBQUNIO0FBQ0osR0FUNkQsQ0FVOUQ7OztBQUNBLE1BQUlKLFlBQVksQ0FBQ3ZuRixZQUFqQixFQUErQjtBQUMzQixRQUFJNm5GLE9BQU8sR0FBRzNxRSxPQUFPLENBQUNpM0IscUJBQVIsQ0FBOEJyVSxZQUFZLENBQUMvOEIsS0FBM0MsRUFBa0QrOEIsWUFBWSxDQUFDOThCLEdBQS9ELEVBQW9FdWtGLFlBQVksQ0FBQ3ZuRixZQUFqRixDQUFkOztBQUNBLFFBQUk2bkYsT0FBTyxHQUFHcjZDLHlEQUFNLENBQUNpOEMsa0JBQXJCLEVBQXlDO0FBQ3JDcHdGLGFBQU8sQ0FBQysyQyxJQUFSLENBQWEsd0NBQWI7QUFDQW0zQyxrQkFBWSxDQUFDdm5GLFlBQWIsR0FBNEIsSUFBNUI7QUFDSDtBQUNKLEdBakI2RCxDQWtCOUQ7OztBQUNBLE1BQUl1bkYsWUFBWSxDQUFDSSxhQUFiLElBQThCSixZQUFZLENBQUN2bkYsWUFBL0MsRUFBNkQ7QUFDekQsUUFBSXdyRixhQUFhLEdBQUdwMUUsK0VBQW9CLENBQUNteEUsWUFBWSxDQUFDSSxhQUFkLEVBQTZCSixZQUFZLENBQUN2bkYsWUFBMUMsQ0FBeEM7O0FBQ0EsUUFBSXdyRixhQUFhLEtBQUssSUFBbEIsSUFBMEJBLGFBQWEsR0FBRyxDQUE5QyxFQUFpRDtBQUM3Q255RixhQUFPLENBQUMrMkMsSUFBUixDQUFhLHNEQUFiO0FBQ0FtM0Msa0JBQVksQ0FBQ3ZuRixZQUFiLEdBQTRCLElBQTVCO0FBQ0g7QUFDSjtBQUNKOztBQUNELFNBQVM4cEYsbUJBQVQsQ0FBNkJ2QyxZQUE3QixFQUEyQ2wwRCxXQUEzQyxFQUF3RG5XLE9BQXhELEVBQWlFO0FBQzdELE1BQUk0aUIsWUFBWSxHQUFHek0sV0FBVyxDQUFDeU0sWUFBL0I7QUFDQSxNQUFJNm5ELGFBQWEsR0FBR0osWUFBWSxDQUFDSSxhQUFqQzs7QUFDQSxNQUFJLENBQUNBLGFBQUwsRUFBb0I7QUFDaEI7QUFDQTtBQUNBLFFBQUk5b0YsS0FBSyxHQUFHLEtBQUssQ0FBakI7O0FBQ0EsUUFBSTBvRixZQUFZLENBQUN2bkYsWUFBakIsRUFBK0I7QUFDM0IsV0FBSyxJQUFJOGEsRUFBRSxHQUFHLENBQVQsRUFBWTJ3RSxxQkFBcUIsR0FBRy9CLG1CQUF6QyxFQUE4RDV1RSxFQUFFLEdBQUcyd0UscUJBQXFCLENBQUNsbEYsTUFBekYsRUFBaUd1VSxFQUFFLEVBQW5HLEVBQXVHO0FBQ25HamMsYUFBSyxHQUFHNHNGLHFCQUFxQixDQUFDM3dFLEVBQUQsQ0FBN0I7QUFDQSxZQUFJNHdFLGdCQUFnQixHQUFHMTNFLHlFQUFjLENBQUNuVixLQUFELENBQXJDO0FBQ0EsWUFBSTJzRixhQUFhLEdBQUdwMUUsK0VBQW9CLENBQUNzMUUsZ0JBQUQsRUFBbUJuRSxZQUFZLENBQUN2bkYsWUFBaEMsQ0FBeEM7O0FBQ0EsWUFBSXdyRixhQUFhLEtBQUssSUFBbEIsSUFBMEJBLGFBQWEsSUFBSWpDLHdCQUEvQyxFQUF5RTtBQUNyRTVCLHVCQUFhLEdBQUcrRCxnQkFBaEI7QUFDQTtBQUNIO0FBQ0osT0FUMEIsQ0FVM0I7OztBQUNBLFVBQUksQ0FBQy9ELGFBQUwsRUFBb0I7QUFDaEJBLHFCQUFhLEdBQUdKLFlBQVksQ0FBQ3ZuRixZQUE3QjtBQUNILE9BYjBCLENBYzNCO0FBQ0E7O0FBQ0gsS0FoQkQsTUFpQks7QUFDRCxXQUFLLElBQUlrVSxFQUFFLEdBQUcsQ0FBVCxFQUFZeTNFLHFCQUFxQixHQUFHakMsbUJBQXpDLEVBQThEeDFFLEVBQUUsR0FBR3kzRSxxQkFBcUIsQ0FBQ3BsRixNQUF6RixFQUFpRzJOLEVBQUUsRUFBbkcsRUFBdUc7QUFDbkdyVixhQUFLLEdBQUc4c0YscUJBQXFCLENBQUN6M0UsRUFBRCxDQUE3QjtBQUNBeXpFLHFCQUFhLEdBQUczekUseUVBQWMsQ0FBQ25WLEtBQUQsQ0FBOUI7QUFDQSxZQUFJMHNGLFFBQVEsR0FBR3J1RSxPQUFPLENBQUNpM0IscUJBQVIsQ0FBOEJyVSxZQUFZLENBQUMvOEIsS0FBM0MsRUFBa0QrOEIsWUFBWSxDQUFDOThCLEdBQS9ELEVBQW9FMmtGLGFBQXBFLENBQWY7O0FBQ0EsWUFBSTRELFFBQVEsSUFBSWpDLGVBQWhCLEVBQWlDO0FBQzdCO0FBQ0g7QUFDSjtBQUNKOztBQUNEL0IsZ0JBQVksQ0FBQ0ksYUFBYixHQUE2QkEsYUFBN0I7QUFDSDs7QUFDRCxTQUFPQSxhQUFQO0FBQ0g7O0FBQ0QsU0FBU29DLGtCQUFULENBQTRCeEMsWUFBNUIsRUFBMENsMEQsV0FBMUMsRUFBdURuVyxPQUF2RCxFQUFnRTtBQUM1RCxNQUFJNGlCLFlBQVksR0FBR3pNLFdBQVcsQ0FBQ3lNLFlBQS9CO0FBQ0EsTUFBSTkvQixZQUFZLEdBQUd1bkYsWUFBWSxDQUFDdm5GLFlBQWhDOztBQUNBLE1BQUksQ0FBQ0EsWUFBTCxFQUFtQjtBQUNmLFFBQUkybkYsYUFBYSxHQUFHbUMsbUJBQW1CLENBQUN2QyxZQUFELEVBQWVsMEQsV0FBZixFQUE0Qm5XLE9BQTVCLENBQXZDLENBRGUsQ0FDOEQ7QUFDN0U7QUFDQTs7QUFDQSxTQUFLLElBQUlwQyxFQUFFLEdBQUcsQ0FBVCxFQUFZOHdFLHFCQUFxQixHQUFHbEMsbUJBQXpDLEVBQThENXVFLEVBQUUsR0FBRzh3RSxxQkFBcUIsQ0FBQ3JsRixNQUF6RixFQUFpR3VVLEVBQUUsRUFBbkcsRUFBdUc7QUFDbkcsVUFBSWpjLEtBQUssR0FBRytzRixxQkFBcUIsQ0FBQzl3RSxFQUFELENBQWpDO0FBQ0EsVUFBSSt3RSxlQUFlLEdBQUc3M0UseUVBQWMsQ0FBQ25WLEtBQUQsQ0FBcEM7QUFDQSxVQUFJMnNGLGFBQWEsR0FBR3AxRSwrRUFBb0IsQ0FBQ3V4RSxhQUFELEVBQWdCa0UsZUFBaEIsQ0FBeEM7O0FBQ0EsVUFBSUwsYUFBYSxLQUFLLElBQWxCLElBQTBCQSxhQUFhLEdBQUcsQ0FBMUMsSUFBK0NBLGFBQWEsSUFBSWpDLHdCQUFwRSxFQUE4RjtBQUMxRnZwRixvQkFBWSxHQUFHNnJGLGVBQWY7QUFDQTtBQUNIO0FBQ0osS0FaYyxDQWFmOzs7QUFDQSxRQUFJN3JGLFlBQUosRUFBa0I7QUFDZCxVQUFJNm5GLE9BQU8sR0FBRzNxRSxPQUFPLENBQUNpM0IscUJBQVIsQ0FBOEJyVSxZQUFZLENBQUMvOEIsS0FBM0MsRUFBa0QrOEIsWUFBWSxDQUFDOThCLEdBQS9ELEVBQW9FaEQsWUFBcEUsQ0FBZDs7QUFDQSxVQUFJNm5GLE9BQU8sR0FBRzJCLGNBQWQsRUFBOEI7QUFDMUJ4cEYsb0JBQVksR0FBRyxJQUFmO0FBQ0g7QUFDSixLQW5CYyxDQW9CZjs7O0FBQ0EsUUFBSSxDQUFDQSxZQUFMLEVBQW1CO0FBQ2ZBLGtCQUFZLEdBQUcybkYsYUFBZjtBQUNIOztBQUNESixnQkFBWSxDQUFDdm5GLFlBQWIsR0FBNEJBLFlBQTVCO0FBQ0g7O0FBQ0QsU0FBT0EsWUFBUDtBQUNIOztBQUNELFNBQVNpcUYsb0JBQVQsQ0FBOEIxQyxZQUE5QixFQUE0Q2wwRCxXQUE1QyxFQUF5RG5XLE9BQXpELEVBQWtFaVUsSUFBbEUsRUFBd0U7QUFDcEUsTUFBSTI2RCxPQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlwRSxhQUFhLEdBQUdKLFlBQVksQ0FBQ0ksYUFBakM7QUFDQSxNQUFJMXpFLElBQUksR0FBR3dDLHNGQUEyQixDQUFDa3hFLGFBQUQsQ0FBM0IsQ0FBMkMxekUsSUFBdEQ7QUFDQSxNQUFJKzNFLGtCQUFrQixHQUFHNzZELElBQUksQ0FBQ3ZPLEdBQUwsQ0FBUyxhQUFULENBQXpCO0FBQ0EsTUFBSXFwRSxPQUFPLEdBQUlILE9BQU8sR0FBSUMsT0FBTyxHQUFHLElBQXBDLENBTm9FLENBT3BFOztBQUNBLE1BQUs5M0UsSUFBSSxLQUFLLE1BQVYsSUFBcUIsQ0FBQyszRSxrQkFBMUIsRUFBOEM7QUFDMUMvM0UsUUFBSSxHQUFHLEtBQVA7QUFDSDs7QUFDRCxVQUFRQSxJQUFSO0FBQ0ksU0FBSyxNQUFMO0FBQ0lnNEUsYUFBTyxHQUFHO0FBQUV4NUUsWUFBSSxFQUFFO0FBQVIsT0FBVixDQURKLENBQ21DOztBQUMvQjs7QUFDSixTQUFLLE9BQUw7QUFDSSxVQUFJNjNFLGNBQWMsQ0FBQyxPQUFELEVBQVVqM0QsV0FBVixFQUF1Qm5XLE9BQXZCLENBQWQsR0FBZ0QsQ0FBcEQsRUFBdUQ7QUFDbkQrdUUsZUFBTyxHQUFHO0FBQUV4NUUsY0FBSSxFQUFFO0FBQVIsU0FBVixDQURtRCxDQUNwQjtBQUNsQzs7QUFDRHE1RSxhQUFPLEdBQUc7QUFBRXIzRSxhQUFLLEVBQUU7QUFBVCxPQUFWLENBSkosQ0FJa0M7O0FBQzlCOztBQUNKLFNBQUssTUFBTDtBQUNJLFVBQUk2MUUsY0FBYyxDQUFDLE9BQUQsRUFBVWozRCxXQUFWLEVBQXVCblcsT0FBdkIsQ0FBZCxHQUFnRCxDQUFwRCxFQUF1RDtBQUNuRCt1RSxlQUFPLEdBQUc7QUFBRXg1RSxjQUFJLEVBQUU7QUFBUixTQUFWLENBRG1ELENBQ3BCO0FBQ2xDOztBQUNEcTVFLGFBQU8sR0FBRztBQUFFejJFLFlBQUksRUFBRTtBQUFSLE9BQVYsQ0FKSixDQUlrQzs7QUFDOUI7O0FBQ0osU0FBSyxLQUFMO0FBQ0ksVUFBSWkxRSxjQUFjLENBQUMsT0FBRCxFQUFVajNELFdBQVYsRUFBdUJuVyxPQUF2QixDQUFkLEdBQWdELENBQXBELEVBQXVEO0FBQ25EK3VFLGVBQU8sR0FBRztBQUFFeDVFLGNBQUksRUFBRSxTQUFSO0FBQW1CZ0MsZUFBSyxFQUFFO0FBQTFCLFNBQVYsQ0FEbUQsQ0FDTDtBQUNqRCxPQUZELE1BR0ssSUFBSTYxRSxjQUFjLENBQUMsUUFBRCxFQUFXajNELFdBQVgsRUFBd0JuVyxPQUF4QixDQUFkLEdBQWlELENBQXJELEVBQXdEO0FBQ3pEK3VFLGVBQU8sR0FBRztBQUFFeDNFLGVBQUssRUFBRTtBQUFULFNBQVYsQ0FEeUQsQ0FDNUI7QUFDaEM7O0FBQ0QsVUFBSXUzRSxrQkFBSixFQUF3QjtBQUNwQkYsZUFBTyxHQUFHO0FBQUV6MkUsY0FBSSxFQUFFO0FBQVIsU0FBVixDQURvQixDQUNTO0FBQ2hDOztBQUNEMDJFLGFBQU8sR0FBRztBQUFFOWxFLGVBQU8sRUFBRSxRQUFYO0FBQXFCdlIsV0FBRyxFQUFFO0FBQTFCLE9BQVYsQ0FWSixDQVVxRDs7QUFDakQ7O0FBQ0osU0FBSyxNQUFMO0FBQ0ksVUFBSXMzRSxrQkFBSixFQUF3QjtBQUNwQkMsZUFBTyxHQUFHO0FBQUU1MkUsY0FBSSxFQUFFO0FBQVIsU0FBVixDQURvQixDQUNTO0FBQ2hDOztBQUNELFVBQUlpMUUsY0FBYyxDQUFDLE1BQUQsRUFBU2ozRCxXQUFULEVBQXNCblcsT0FBdEIsQ0FBZCxHQUErQyxDQUFuRCxFQUFzRDtBQUNsRDR1RSxlQUFPLEdBQUc7QUFBRTdsRSxpQkFBTyxFQUFFLE9BQVg7QUFBb0J2UixhQUFHLEVBQUUsU0FBekI7QUFBb0NELGVBQUssRUFBRSxTQUEzQztBQUFzRG9SLG9CQUFVLEVBQUU7QUFBbEUsU0FBVixDQURrRCxDQUNrQztBQUN2Rjs7QUFDRGttRSxhQUFPLEdBQUc7QUFDTmwzRSxZQUFJLEVBQUUsU0FEQTtBQUVORSxjQUFNLEVBQUUsU0FGRjtBQUdONFEsc0JBQWMsRUFBRSxJQUhWO0FBSU5DLGdCQUFRLEVBQUU7QUFKSixPQUFWO0FBTUE7O0FBQ0osU0FBSyxRQUFMO0FBQ0k7QUFDQSxVQUFLMVAseUVBQWMsQ0FBQ3l4RSxhQUFELENBQWQsR0FBZ0MsRUFBakMsSUFBd0M0Qix3QkFBNUMsRUFBc0U7QUFDbEUwQyxlQUFPLEdBQUc7QUFDTnAzRSxjQUFJLEVBQUUsU0FEQTtBQUVOK1Esa0JBQVEsRUFBRTtBQUZKLFNBQVY7O0FBSUFrbUUsZUFBTyxHQUFHLFVBQVV4aEQsTUFBVixFQUFrQjtBQUN4QixpQkFBTyxNQUFNandCLG1FQUFRLENBQUNpd0IsTUFBTSxDQUFDMW1DLElBQVAsQ0FBWW1SLE1BQWIsRUFBcUIsQ0FBckIsQ0FBckIsQ0FEd0IsQ0FDc0I7QUFDakQsU0FGRDtBQUdILE9BUkQsTUFTSztBQUNEazNFLGVBQU8sR0FBRztBQUNOcDNFLGNBQUksRUFBRSxTQURBO0FBRU5FLGdCQUFNLEVBQUUsU0FGRjtBQUdONlEsa0JBQVEsRUFBRTtBQUhKLFNBQVY7QUFLSDs7QUFDRDs7QUFDSixTQUFLLFFBQUw7QUFDSTtBQUNBLFVBQUt6UCx5RUFBYyxDQUFDd3hFLGFBQUQsQ0FBZCxHQUFnQyxFQUFqQyxJQUF3QzRCLHdCQUE1QyxFQUFzRTtBQUNsRTBDLGVBQU8sR0FBRztBQUFFcDNFLGNBQUksRUFBRSxTQUFSO0FBQW1CRSxnQkFBTSxFQUFFLFNBQTNCO0FBQXNDNlEsa0JBQVEsRUFBRTtBQUFoRCxTQUFWLENBRGtFLENBQ087O0FBQ3pFa21FLGVBQU8sR0FBRyxVQUFVeGhELE1BQVYsRUFBa0I7QUFDeEIsaUJBQU8sTUFBTWp3QixtRUFBUSxDQUFDaXdCLE1BQU0sQ0FBQzFtQyxJQUFQLENBQVlxUixNQUFiLEVBQXFCLENBQXJCLENBQXJCLENBRHdCLENBQ3NCO0FBQ2pELFNBRkQ7QUFHSCxPQUxELE1BTUs7QUFDRGczRSxlQUFPLEdBQUc7QUFBRXAzRSxjQUFJLEVBQUUsU0FBUjtBQUFtQkUsZ0JBQU0sRUFBRSxTQUEzQjtBQUFzQ0UsZ0JBQU0sRUFBRSxTQUE5QztBQUF5RDJRLGtCQUFRLEVBQUU7QUFBbkUsU0FBVixDQURDLENBQzJGO0FBQy9GOztBQUNEOztBQUNKLFNBQUssYUFBTDtBQUNJcW1FLGFBQU8sR0FBRztBQUFFcDNFLFlBQUksRUFBRSxTQUFSO0FBQW1CRSxjQUFNLEVBQUUsU0FBM0I7QUFBc0NFLGNBQU0sRUFBRSxTQUE5QztBQUF5RDJRLGdCQUFRLEVBQUU7QUFBbkUsT0FBVixDQURKLENBQ2dHOztBQUM1RmttRSxhQUFPLEdBQUcsVUFBVXhoRCxNQUFWLEVBQWtCO0FBQ3hCLGVBQU8sTUFBTWp3QixtRUFBUSxDQUFDaXdCLE1BQU0sQ0FBQ3AxQixXQUFSLEVBQXFCLENBQXJCLENBQXJCO0FBQ0gsT0FGRDs7QUFHQTtBQTlFUjs7QUFnRkEsU0FBTyxHQUFHNUcsTUFBSCxDQUFVMjlFLE9BQU8sSUFBSSxFQUFyQixFQUF5QkgsT0FBTyxJQUFJLEVBQXBDLEVBQXdDQyxPQUFPLElBQUksRUFBbkQsQ0FBUDtBQUNILEMsQ0FDRDtBQUNBO0FBQ0E7OztBQUNBLFNBQVN6QixjQUFULENBQXdCcjJFLElBQXhCLEVBQThCb2YsV0FBOUIsRUFBMkNuVyxPQUEzQyxFQUFvRDtBQUNoRCxNQUFJTCxLQUFLLEdBQUd3VyxXQUFXLENBQUN5TSxZQUF4QjtBQUNBLE1BQUk5MUIsR0FBRyxHQUFHLElBQVY7O0FBQ0EsTUFBSWlLLElBQUksS0FBSyxPQUFiLEVBQXNCO0FBQ2xCakssT0FBRyxHQUFHa1QsT0FBTyxDQUFDRSxjQUFSLENBQXVCUCxLQUFLLENBQUM5WixLQUE3QixFQUFvQzhaLEtBQUssQ0FBQzdaLEdBQTFDLENBQU47QUFDSCxHQUZELE1BR0ssSUFBSWlSLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQ3hCakssT0FBRyxHQUFHa1QsT0FBTyxDQUFDRyxlQUFSLENBQXdCUixLQUFLLENBQUM5WixLQUE5QixFQUFxQzhaLEtBQUssQ0FBQzdaLEdBQTNDLENBQU47QUFDSCxHQUZJLE1BR0EsSUFBSWlSLElBQUksS0FBSyxPQUFiLEVBQXNCO0FBQ3ZCakssT0FBRyxHQUFHa1QsT0FBTyxDQUFDRyxlQUFSLENBQXdCUixLQUFLLENBQUM5WixLQUE5QixFQUFxQzhaLEtBQUssQ0FBQzdaLEdBQTNDLENBQU47QUFDSCxHQUZJLE1BR0EsSUFBSWlSLElBQUksS0FBSyxNQUFiLEVBQXFCO0FBQ3RCakssT0FBRyxHQUFHc0gsd0VBQWEsQ0FBQ3VMLEtBQUssQ0FBQzlaLEtBQVAsRUFBYzhaLEtBQUssQ0FBQzdaLEdBQXBCLENBQW5CO0FBQ0g7O0FBQ0QsU0FBT2dILEdBQUcsSUFBSSxDQUFkO0FBQ0g7O0FBQ0QsU0FBU2loRixpQkFBVCxDQUEyQjFELFlBQTNCLEVBQXlDcnFFLE9BQXpDLEVBQWtEO0FBQzlDLE1BQUlzckUsU0FBUyxHQUFHakIsWUFBWSxDQUFDaUIsU0FBN0I7QUFBQSxNQUF3QzZCLGNBQWMsR0FBRzlDLFlBQVksQ0FBQzhDLGNBQXRFO0FBQ0EsTUFBSTZCLGNBQWMsR0FBRyxJQUFyQjtBQUNBLE1BQUl6RCxZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsT0FBSyxJQUFJM3RFLEVBQUUsR0FBRyxDQUFULEVBQVlxeEUsV0FBVyxHQUFHM0QsU0FBL0IsRUFBMEMxdEUsRUFBRSxHQUFHcXhFLFdBQVcsQ0FBQzVsRixNQUEzRCxFQUFtRXVVLEVBQUUsRUFBckUsRUFBeUU7QUFDckUsUUFBSXN4RSxRQUFRLEdBQUdELFdBQVcsQ0FBQ3J4RSxFQUFELENBQTFCO0FBQ0EsUUFBSXV4RSxVQUFVLEdBQUdudkUsT0FBTyxDQUFDbUwsaUJBQVIsQ0FBMEIrakUsUUFBMUIsQ0FBakI7QUFDQSxRQUFJbEUsV0FBVyxHQUFHbUMsY0FBYyxJQUFLNkIsY0FBYyxLQUFLLElBQXRDLElBQWdEQSxjQUFjLEtBQUtHLFVBQXJGO0FBQ0FILGtCQUFjLEdBQUdHLFVBQWpCO0FBQ0E1RCxnQkFBWSxDQUFDaGdGLElBQWIsQ0FBa0J5L0UsV0FBbEI7QUFDSDs7QUFDRCxTQUFPTyxZQUFQO0FBQ0g7O0FBQ0QsU0FBU3lDLGFBQVQsQ0FBdUIzRCxZQUF2QixFQUFxQ3JxRSxPQUFyQyxFQUE4Q2lVLElBQTlDLEVBQW9EO0FBQ2hELE1BQUlxM0QsU0FBUyxHQUFHakIsWUFBWSxDQUFDaUIsU0FBN0I7QUFDQSxNQUFJOEQsT0FBTyxHQUFHL0UsWUFBWSxDQUFDMkMsYUFBM0I7QUFDQSxNQUFJMUMsUUFBUSxHQUFHOEUsT0FBTyxDQUFDaitFLEdBQVIsQ0FBWSxVQUFVeVksTUFBVixFQUFrQjtBQUFFLFdBQU8sRUFBUDtBQUFZLEdBQTVDLENBQWYsQ0FIZ0QsQ0FHYztBQUM5RDs7QUFDQSxNQUFJeWxFLFFBQVEsR0FBR0QsT0FBTyxDQUFDaitFLEdBQVIsQ0FBWSxVQUFVeVksTUFBVixFQUFrQjtBQUN6QyxXQUFPQSxNQUFNLENBQUNpQixjQUFQLEdBQXdCakIsTUFBTSxDQUFDaUIsY0FBUCxFQUF4QixHQUFrRCxJQUF6RDtBQUNILEdBRmMsQ0FBZixDQUxnRCxDQVFoRDs7QUFDQSxPQUFLLElBQUl6akIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2trRixTQUFTLENBQUNqaUYsTUFBOUIsRUFBc0NqQyxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFFBQUlWLElBQUksR0FBRzRrRixTQUFTLENBQUNsa0YsQ0FBRCxDQUFwQjtBQUNBLFFBQUk0akYsV0FBVyxHQUFHWCxZQUFZLENBQUNrQixZQUFiLENBQTBCbmtGLENBQTFCLENBQWxCOztBQUNBLFNBQUssSUFBSWl6RCxHQUFHLEdBQUcsQ0FBZixFQUFrQkEsR0FBRyxHQUFHKzBCLE9BQU8sQ0FBQy9sRixNQUFoQyxFQUF3Q2d4RCxHQUFHLEVBQTNDLEVBQStDO0FBQzNDLFVBQUl6d0MsTUFBTSxHQUFHd2xFLE9BQU8sQ0FBQy8wQixHQUFELENBQXBCO0FBQ0EsVUFBSTJiLFFBQVEsR0FBR3NVLFFBQVEsQ0FBQ2p3QixHQUFELENBQXZCO0FBQ0EsVUFBSWkxQixXQUFXLEdBQUd0WixRQUFRLENBQUNBLFFBQVEsQ0FBQzNzRSxNQUFULEdBQWtCLENBQW5CLENBQTFCO0FBQ0EsVUFBSWttRixVQUFVLEdBQUlILE9BQU8sQ0FBQy9sRixNQUFSLEdBQWlCLENBQWxCLElBQXlCZ3hELEdBQUcsR0FBSSswQixPQUFPLENBQUMvbEYsTUFBUixHQUFpQixDQUFsRSxDQUoyQyxDQUk0Qjs7QUFDdkUsVUFBSW1tRixPQUFPLEdBQUcsSUFBZDs7QUFDQSxVQUFJRCxVQUFKLEVBQWdCO0FBQ1osWUFBSXJ0RixJQUFJLEdBQUc4ZCxPQUFPLENBQUM0SixNQUFSLENBQWVsakIsSUFBZixFQUFxQmtqQixNQUFyQixDQUFYOztBQUNBLFlBQUksQ0FBQzBsRSxXQUFELElBQWlCQSxXQUFXLENBQUNwdEYsSUFBWixLQUFxQkEsSUFBMUMsRUFBaUQ7QUFDN0NzdEYsaUJBQU8sR0FBR0MsZUFBZSxDQUFDL29GLElBQUQsRUFBT3hFLElBQVAsRUFBYW10RixRQUFRLENBQUNoMUIsR0FBRCxDQUFyQixFQUE0QnBtQyxJQUE1QixDQUF6QjtBQUNILFNBRkQsTUFHSztBQUNEcTdELHFCQUFXLENBQUNoM0IsT0FBWixJQUF1QixDQUF2QjtBQUNIO0FBQ0osT0FSRCxNQVNLO0FBQ0QsWUFBSSxDQUFDZzNCLFdBQUQsSUFDQWgyRSxnRUFBSyxDQUFDMEcsT0FBTyxDQUFDaTNCLHFCQUFSLENBQThCb3pDLFlBQVksQ0FBQ3dCLGVBQWIsQ0FBNkJobUYsS0FBM0QsRUFBa0VhLElBQWxFLEVBQXdFMmpGLFlBQVksQ0FBQ0ksYUFBckYsQ0FBRCxDQURULEVBQ2dIO0FBQzVHLGNBQUl2b0YsSUFBSSxHQUFHOGQsT0FBTyxDQUFDNEosTUFBUixDQUFlbGpCLElBQWYsRUFBcUJrakIsTUFBckIsQ0FBWDtBQUNBNGxFLGlCQUFPLEdBQUdDLGVBQWUsQ0FBQy9vRixJQUFELEVBQU94RSxJQUFQLEVBQWFtdEYsUUFBUSxDQUFDaDFCLEdBQUQsQ0FBckIsRUFBNEJwbUMsSUFBNUIsQ0FBekI7QUFDSCxTQUpELE1BS0s7QUFDRHE3RCxxQkFBVyxDQUFDaDNCLE9BQVosSUFBdUIsQ0FBdkI7QUFDSDtBQUNKOztBQUNELFVBQUlrM0IsT0FBSixFQUFhO0FBQ1RBLGVBQU8sQ0FBQ0UsU0FBUixHQUFvQjFFLFdBQXBCO0FBQ0FoVixnQkFBUSxDQUFDenFFLElBQVQsQ0FBY2lrRixPQUFkO0FBQ0g7QUFDSjtBQUNKOztBQUNELFNBQU9sRixRQUFQO0FBQ0g7O0FBQ0QsU0FBU21GLGVBQVQsQ0FBeUIvb0YsSUFBekIsRUFBK0J4RSxJQUEvQixFQUFxQ3l0RixPQUFyQyxFQUE4QzE3RCxJQUE5QyxFQUFvRDtBQUNoRCxNQUFJaTNELFFBQVEsR0FBR3JwRCw4RUFBbUIsQ0FBQzVOLElBQUQsRUFBTztBQUNyQ3Z0QixRQUFJLEVBQUVBLElBRCtCO0FBRXJDL0IsUUFBSSxFQUFFZ3JGLE9BRitCO0FBR3JDMXRELFlBQVEsRUFBRSxDQUFDMHREO0FBSDBCLEdBQVAsRUFJL0I7QUFDQyxhQUFTO0FBRFYsR0FKK0IsRUFNL0J4MEQscUVBQVUsQ0FBQ2o1QixJQUFELENBTnFCLENBQWxDO0FBT0EsU0FBTztBQUFFQSxRQUFJLEVBQUVBLElBQVI7QUFBY2dwRixZQUFRLEVBQUVBLFFBQXhCO0FBQWtDeGtGLFFBQUksRUFBRUEsSUFBeEM7QUFBOEM0eEQsV0FBTyxFQUFFLENBQXZEO0FBQTBEMHlCLGVBQVcsRUFBRTtBQUF2RSxHQUFQO0FBQ0g7O0FBRUQsSUFBSTRFLG9CQUFvQjtBQUFHO0FBQWUsWUFBWTtBQUNsRCxXQUFTQSxvQkFBVCxDQUE4QkMsVUFBOUIsRUFBMENDLFVBQTFDLEVBQXNEO0FBQ2xELFNBQUtELFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDSDs7QUFDREYsc0JBQW9CLENBQUM3bUYsU0FBckIsQ0FBK0JwQyxNQUEvQixHQUF3QyxVQUFVb3BGLEtBQVYsRUFBaUJ4akUsS0FBakIsRUFBd0I7QUFDNUQsUUFBSXlqRSxVQUFVLEdBQUd6akUsS0FBSyxHQUFHO0FBQUVucEIsV0FBSyxFQUFFLENBQUMyc0Y7QUFBVixLQUFILEdBQXVCO0FBQUU3c0YsVUFBSSxFQUFFNnNGO0FBQVIsS0FBN0M7QUFDQSxTQUFLRixVQUFMLENBQWdCdm1GLFdBQWhCLENBQTRCLEtBQUsybUYsT0FBTCxHQUFlbG9GLHdFQUFhLENBQUMsS0FBRCxFQUFRO0FBQzVESixlQUFTLEVBQUUseUNBRGlEO0FBRTVEMEUsV0FBSyxFQUFFMmpGO0FBRnFELEtBQVIsQ0FBeEQ7QUFJQSxTQUFLRixVQUFMLENBQWdCeG1GLFdBQWhCLENBQTRCLEtBQUs0bUYsTUFBTCxHQUFjbm9GLHdFQUFhLENBQUMsS0FBRCxFQUFRO0FBQzNESixlQUFTLEVBQUUsd0NBRGdEO0FBRTNEMEUsV0FBSyxFQUFFMmpGO0FBRm9ELEtBQVIsQ0FBdkQ7QUFJSCxHQVZEOztBQVdBSixzQkFBb0IsQ0FBQzdtRixTQUFyQixDQUErQjQxQixRQUEvQixHQUEwQyxZQUFZO0FBQ2xELFFBQUksS0FBS3N4RCxPQUFULEVBQWtCO0FBQ2RobUYsOEVBQWEsQ0FBQyxLQUFLZ21GLE9BQU4sQ0FBYjtBQUNIOztBQUNELFFBQUksS0FBS0MsTUFBVCxFQUFpQjtBQUNiam1GLDhFQUFhLENBQUMsS0FBS2ltRixNQUFOLENBQWI7QUFDSDtBQUNKLEdBUEQ7O0FBUUEsU0FBT04sb0JBQVA7QUFDSCxDQXpCeUMsRUFBMUM7O0FBMkJBLElBQUlPLGVBQWUsR0FBR0Msb0JBQW9CLEVBQTFDLEMsQ0FBOEM7O0FBQzlDLElBQUlDLFVBQVUsR0FBRyxPQUFPcnhGLElBQVAsQ0FBWXN4RixTQUFTLENBQUNDLFNBQXRCLENBQWpCO0FBQ0EsSUFBSUMsU0FBUyxHQUFHTCxlQUFlLEtBQUssZ0JBQXBDLEMsQ0FBc0Q7O0FBQ3RELElBQUlNLGdCQUFnQixHQUFHLFdBQXZCO0FBQ0E7Ozs7OztBQUtBLElBQUlsTyxjQUFjO0FBQUc7QUFBZSxZQUFZO0FBQzVDLFdBQVNBLGNBQVQsQ0FBd0IyRyxRQUF4QixFQUFrQzM4RCxLQUFsQyxFQUF5Q2tZLFVBQXpDLEVBQXFEO0FBQ2pELFFBQUkxRSxLQUFLLEdBQUcsSUFBWjs7QUFDQSxTQUFLMndELGFBQUwsR0FBcUIsSUFBckI7QUFDQTs7OztBQUdBLFNBQUs1ckMsVUFBTCxHQUFrQixZQUFZO0FBQzFCLFVBQUkvNkMsR0FBRyxHQUFHakIsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI4MkIsS0FBSyxDQUFDbXBELFFBQU4sQ0FBZTdKLE1BQWYsQ0FBc0I3NkUsRUFBdEIsQ0FBeUI2RyxnQkFBekIsQ0FBMEMsTUFBTW9sRixnQkFBaEQsQ0FBM0IsQ0FBVjs7QUFDQSxVQUFJRSxPQUFPLEdBQUc1d0QsS0FBSyxDQUFDNndELFlBQU4sQ0FBbUI3bUYsR0FBbkIsQ0FBZDs7QUFDQSxVQUFJOG1GLGFBQWEsR0FBRzl3RCxLQUFLLENBQUNtcEQsUUFBTixDQUFlMWtGLEVBQWYsQ0FBa0IrSyxXQUF0Qzs7QUFDQSxVQUFJd3dCLEtBQUssQ0FBQzJ3RCxhQUFWLEVBQXlCO0FBQ3JCLFlBQUlJLGNBQWMsR0FBRy93RCxLQUFLLENBQUNneEQscUJBQU4sQ0FBNEJKLE9BQTVCLEVBQXFDRSxhQUFyQyxDQUFyQixDQURxQixDQUNxRDs7O0FBQzFFRywrQkFBdUIsQ0FBQ2puRixHQUFELEVBQU00bUYsT0FBTixFQUFlRyxjQUFmLENBQXZCO0FBQ0gsT0FIRCxNQUlLO0FBQ0RHLDZCQUFxQixDQUFDbG5GLEdBQUQsRUFBTTRtRixPQUFOLEVBQWVFLGFBQWYsQ0FBckI7QUFDSDtBQUNKLEtBWEQ7O0FBWUEsU0FBSzNILFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS3dILGFBQUwsR0FDSSxDQUFDUCxlQUFELElBQW9CO0FBQ2ZFLGNBQVUsSUFBSTlqRSxLQURuQixJQUM2QjtBQUN4QixLQUFDOGpFLFVBQVUsSUFBSUcsU0FBZixLQUE2Qi9yRCxVQUh0QyxDQW5CaUQsQ0FzQkU7O0FBQ25ELFFBQUksS0FBS2lzRCxhQUFULEVBQXdCO0FBQ3BCeEgsY0FBUSxDQUFDNWhGLEVBQVQsQ0FBWSxXQUFaLEVBQXlCLEtBQUt3OUMsVUFBOUI7QUFDSDtBQUNKOztBQUNEeTlCLGdCQUFjLENBQUN4NUUsU0FBZixDQUF5QnkrQixPQUF6QixHQUFtQyxZQUFZO0FBQzNDLFNBQUswaEQsUUFBTCxDQUFjaGxELEdBQWQsQ0FBa0IsV0FBbEIsRUFBK0IsS0FBSzRnQixVQUFwQztBQUNILEdBRkQ7O0FBR0F5OUIsZ0JBQWMsQ0FBQ3g1RSxTQUFmLENBQXlCNm5GLFlBQXpCLEdBQXdDLFVBQVU3bUYsR0FBVixFQUFlO0FBQ25ELFFBQUltbkYsWUFBWSxHQUFHLEtBQUtoSSxRQUFMLENBQWM3SixNQUFkLENBQXFCNzZFLEVBQXJCLENBQXdCNkoscUJBQXhCLEVBQW5CO0FBQ0EsUUFBSXNpRixPQUFPLEdBQUcsRUFBZDs7QUFDQSxTQUFLLElBQUkveUUsRUFBRSxHQUFHLENBQVQsRUFBWXV6RSxLQUFLLEdBQUdwbkYsR0FBekIsRUFBOEI2VCxFQUFFLEdBQUd1ekUsS0FBSyxDQUFDOW5GLE1BQXpDLEVBQWlEdVUsRUFBRSxFQUFuRCxFQUF1RDtBQUNuRCxVQUFJcFosRUFBRSxHQUFHMnNGLEtBQUssQ0FBQ3Z6RSxFQUFELENBQWQ7QUFDQSxVQUFJd3pFLFdBQVcsR0FBR2xrRix3RUFBYSxDQUFDMUksRUFBRSxDQUFDc0YsVUFBSCxDQUFjdUUscUJBQWQsRUFBRCxFQUF3QyxDQUFDNmlGLFlBQVksQ0FBQ2h1RixJQUF0RCxFQUE0RCxDQUFDZ3VGLFlBQVksQ0FBQ3prRixHQUExRSxDQUEvQjtBQUNBLFVBQUk0a0YsTUFBTSxHQUFHN3NGLEVBQUUsQ0FBQzZKLHFCQUFILEVBQWI7QUFDQSxVQUFJaWpGLGNBQWMsR0FBRzNpRixNQUFNLENBQUNDLGdCQUFQLENBQXdCcEssRUFBeEIsQ0FBckI7QUFDQSxVQUFJK3NGLGlCQUFpQixHQUFHNWlGLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JwSyxFQUFFLENBQUNzRixVQUEzQixFQUF1QzBuRixTQUEvRCxDQUxtRCxDQUt1Qjs7QUFDMUUsVUFBSUMsaUJBQWlCLEdBQUdGLGlCQUF4QjtBQUNBLFVBQUlHLFlBQVksR0FBRyxJQUFuQjs7QUFDQSxVQUFJSixjQUFjLENBQUN4akYsUUFBZixLQUE0QixRQUFoQyxFQUEwQztBQUN0QzRqRixvQkFBWSxHQUFHeGtGLHdFQUFhLENBQUNta0YsTUFBRCxFQUFTLENBQUNILFlBQVksQ0FBQ2h1RixJQUFkLElBQXNCM0IsVUFBVSxDQUFDK3ZGLGNBQWMsQ0FBQ3B1RixJQUFoQixDQUFWLElBQW1DLENBQXpELENBQVQsRUFBc0U7QUFDbEcsU0FBQ2d1RixZQUFZLENBQUN6a0YsR0FBZCxJQUFxQmxMLFVBQVUsQ0FBQyt2RixjQUFjLENBQUM3a0YsR0FBaEIsQ0FBVixJQUFrQyxDQUF2RCxDQUQ0QixDQUE1QjtBQUVIOztBQUNELFVBQUlqSSxFQUFFLENBQUNtdEYsWUFBSCxDQUFnQixvQkFBaEIsQ0FBSixFQUEyQztBQUN2Q0YseUJBQWlCLEdBQUcsUUFBcEI7QUFDSDs7QUFDRGQsYUFBTyxDQUFDcGxGLElBQVIsQ0FBYTtBQUNUNmxGLG1CQUFXLEVBQUVBLFdBREo7QUFFVE0sb0JBQVksRUFBRUEsWUFGTDtBQUdUL25ELGVBQU8sRUFBRTBuRCxNQUFNLENBQUN0dEYsS0FIUDtBQUlUNmxDLGdCQUFRLEVBQUV5bkQsTUFBTSxDQUFDM2dGLE1BSlI7QUFLVDZnRix5QkFBaUIsRUFBRUEsaUJBTFY7QUFNVEUseUJBQWlCLEVBQUVBO0FBTlYsT0FBYjtBQVFIOztBQUNELFdBQU9kLE9BQVA7QUFDSCxHQTVCRDs7QUE2QkFwTyxnQkFBYyxDQUFDeDVFLFNBQWYsQ0FBeUJnb0YscUJBQXpCLEdBQWlELFVBQVVKLE9BQVYsRUFBbUJFLGFBQW5CLEVBQWtDO0FBQy9FLFFBQUllLFlBQVksR0FBRyxLQUFLMUksUUFBTCxDQUFjWCxpQkFBZCxFQUFuQjtBQUNBLFFBQUlzSixXQUFXLEdBQUcsS0FBSzNJLFFBQUwsQ0FBYzVpRCxZQUFkLEVBQWxCO0FBQ0EsUUFBSXdyRCxhQUFhLEdBQUdGLFlBQVksR0FBR2YsYUFBbkM7QUFDQSxXQUFPRixPQUFPLENBQUN4L0UsR0FBUixDQUFZLFVBQVU0Z0YsTUFBVixFQUFrQjtBQUNqQyxVQUFJcG9ELE9BQU8sR0FBR29vRCxNQUFNLENBQUNwb0QsT0FBckI7QUFBQSxVQUE4QkMsUUFBUSxHQUFHbW9ELE1BQU0sQ0FBQ25vRCxRQUFoRDtBQUFBLFVBQTBEd25ELFdBQVcsR0FBR1csTUFBTSxDQUFDWCxXQUEvRTtBQUFBLFVBQTRGTSxZQUFZLEdBQUdLLE1BQU0sQ0FBQ0wsWUFBbEg7QUFDQSxVQUFJTSxRQUFKLENBRmlDLENBRW5COztBQUNkLFVBQUlDLE9BQUosQ0FIaUMsQ0FHcEI7O0FBQ2IsY0FBUUYsTUFBTSxDQUFDTixpQkFBZjtBQUNJLGFBQUssTUFBTDtBQUNJTyxrQkFBUSxHQUFHSixZQUFYO0FBQ0E7O0FBQ0osYUFBSyxPQUFMO0FBQ0lJLGtCQUFRLEdBQUdGLGFBQWEsR0FBR25vRCxPQUEzQjtBQUNBOztBQUNKLGFBQUssUUFBTDtBQUNJcW9ELGtCQUFRLEdBQUcsQ0FBQ0osWUFBWSxHQUFHRSxhQUFoQixJQUFpQyxDQUFqQyxHQUFxQ25vRCxPQUFPLEdBQUcsQ0FBMUQ7QUFDQTtBQVRSOztBQVdBcW9ELGNBQVEsR0FBR2psRixJQUFJLENBQUNFLEdBQUwsQ0FBUytrRixRQUFULEVBQW1CWixXQUFXLENBQUNodUYsS0FBWixHQUFvQnVtQyxPQUF2QyxDQUFYO0FBQ0Fxb0QsY0FBUSxHQUFHamxGLElBQUksQ0FBQ0MsR0FBTCxDQUFTZ2xGLFFBQVQsRUFBbUJaLFdBQVcsQ0FBQ2x1RixJQUEvQixDQUFYO0FBQ0ErdUYsYUFBTyxHQUFHSixXQUFWO0FBQ0FJLGFBQU8sR0FBR2xsRixJQUFJLENBQUNFLEdBQUwsQ0FBU2dsRixPQUFULEVBQWtCYixXQUFXLENBQUMxa0YsTUFBWixHQUFxQms5QixRQUF2QyxDQUFWO0FBQ0Fxb0QsYUFBTyxHQUFHbGxGLElBQUksQ0FBQ0MsR0FBTCxDQUFTaWxGLE9BQVQsRUFBa0JQLFlBQVksQ0FBQ2psRixHQUEvQixDQUFWLENBbkJpQyxDQW1CYzs7QUFDL0MsYUFBTztBQUFFdkosWUFBSSxFQUFFOHVGLFFBQVI7QUFBa0J2bEYsV0FBRyxFQUFFd2xGO0FBQXZCLE9BQVA7QUFDSCxLQXJCTSxDQUFQO0FBc0JILEdBMUJEOztBQTJCQSxTQUFPMVAsY0FBUDtBQUNILENBeEZtQyxFQUFwQzs7QUF5RkEsU0FBU3lPLHVCQUFULENBQWlDam5GLEdBQWpDLEVBQXNDNG1GLE9BQXRDLEVBQStDRyxjQUEvQyxFQUErRDtBQUMzRC9tRixLQUFHLENBQUN3SSxPQUFKLENBQVksVUFBVS9OLEVBQVYsRUFBYzRDLENBQWQsRUFBaUI7QUFDekIsUUFBSXNxRixZQUFZLEdBQUdmLE9BQU8sQ0FBQ3ZwRixDQUFELENBQVAsQ0FBV3NxRixZQUE5QjtBQUNBdHBGLHlFQUFVLENBQUM1RCxFQUFELEVBQUs7QUFDWHNKLGNBQVEsRUFBRSxVQURDO0FBRVg1SyxVQUFJLEVBQUU0dEYsY0FBYyxDQUFDMXBGLENBQUQsQ0FBZCxDQUFrQmxFLElBQWxCLEdBQXlCd3VGLFlBQVksQ0FBQ3h1RixJQUZqQztBQUdYdUosU0FBRyxFQUFFcWtGLGNBQWMsQ0FBQzFwRixDQUFELENBQWQsQ0FBa0JxRixHQUFsQixHQUF3QmlsRixZQUFZLENBQUNqbEY7QUFIL0IsS0FBTCxDQUFWO0FBS0gsR0FQRDtBQVFIOztBQUNELFNBQVN3a0YscUJBQVQsQ0FBK0JsbkYsR0FBL0IsRUFBb0M0bUYsT0FBcEMsRUFBNkNFLGFBQTdDLEVBQTREO0FBQ3hEOW1GLEtBQUcsQ0FBQ3dJLE9BQUosQ0FBWSxVQUFVL04sRUFBVixFQUFjNEMsQ0FBZCxFQUFpQjtBQUN6QixRQUFJOHFGLFVBQVUsR0FBRyxDQUFqQjs7QUFDQSxRQUFJdkIsT0FBTyxDQUFDdnBGLENBQUQsQ0FBUCxDQUFXcXFGLGlCQUFYLEtBQWlDLFFBQXJDLEVBQStDO0FBQzNDUyxnQkFBVSxHQUFHLENBQUNyQixhQUFhLEdBQUdGLE9BQU8sQ0FBQ3ZwRixDQUFELENBQVAsQ0FBV3VpQyxPQUE1QixJQUF1QyxDQUFwRCxDQUQyQyxDQUUzQzs7QUFDQSxVQUFJZ25ELE9BQU8sQ0FBQ3ZwRixDQUFELENBQVAsQ0FBV21xRixpQkFBWCxLQUFpQyxRQUFyQyxFQUErQztBQUMzQy9zRixVQUFFLENBQUM2RCxZQUFILENBQWdCLG9CQUFoQixFQUFzQyxFQUF0QyxFQUEwQztBQUExQztBQUVBN0QsVUFBRSxDQUFDc0YsVUFBSCxDQUFjdUMsS0FBZCxDQUFvQm1sRixTQUFwQixHQUFnQyxNQUFoQztBQUNIO0FBQ0o7O0FBQ0RwcEYseUVBQVUsQ0FBQzVELEVBQUQsRUFBSztBQUNYc0osY0FBUSxFQUFFcWlGLGVBREM7QUFFWGp0RixVQUFJLEVBQUVndkYsVUFGSztBQUdYOXVGLFdBQUssRUFBRSxDQUhJO0FBSVhxSixTQUFHLEVBQUU7QUFKTSxLQUFMLENBQVY7QUFNSCxHQWpCRDtBQWtCSDs7QUFDRCxTQUFTMmpGLG9CQUFULEdBQWdDO0FBQzVCLE1BQUk1ckYsRUFBRSxHQUFHZ0Usd0VBQWEsQ0FBQyw2REFBRCxDQUF0QjtBQUNBLE1BQUlwSixHQUFHLEdBQUdvRixFQUFFLENBQUM2SCxLQUFILENBQVN5QixRQUFuQjs7QUFDQSxNQUFJMU8sR0FBRyxDQUFDK3RCLE9BQUosQ0FBWSxRQUFaLE1BQTBCLENBQUMsQ0FBL0IsRUFBa0M7QUFDOUIsV0FBTy90QixHQUFQO0FBQ0gsR0FGRCxNQUdLO0FBQ0QsV0FBTyxJQUFQO0FBQ0g7QUFDSjs7QUFFRCxJQUFJNGlGLFFBQVE7QUFBRztBQUFlLFVBQVVuK0MsTUFBVixFQUFrQjtBQUM1Q25qQixXQUFTLENBQUNzaEUsUUFBRCxFQUFXbitDLE1BQVgsQ0FBVDs7QUFDQSxXQUFTbStDLFFBQVQsQ0FBa0I5akUsT0FBbEIsRUFBMkI4ckUsaUJBQTNCLEVBQThDekssZUFBOUMsRUFBK0Q7QUFDM0QsUUFBSXgvQyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JpVixPQUFsQixLQUE4QixJQUExQzs7QUFDQSxRQUFJaWtDLE1BQU0sR0FBR3BpQixLQUFLLENBQUNvaUIsTUFBTixHQUFlLElBQUk0OEIsZ0JBQUosQ0FBcUJpTCxpQkFBckIsRUFBd0N6SyxlQUF4QyxFQUF5RCxNQUF6RCxDQUE1QjtBQUNBLFFBQUlQLHNCQUFzQixHQUFHNzhCLE1BQU0sQ0FBQzg4QixjQUFQLENBQXNCQyxjQUFuRDtBQUNBLFFBQUlDLG9CQUFvQixHQUFHaDlCLE1BQU0sQ0FBQ2k5QixZQUFQLENBQW9CRixjQUEvQyxDQUoyRCxDQUszRDs7QUFDQW4vQyxTQUFLLENBQUNveUQsa0JBQU4sR0FBMkIsSUFBSTVQLGNBQUosQ0FBbUJ2RCxzQkFBbkIsRUFBMkNqL0MsS0FBSyxDQUFDeFQsS0FBakQsRUFBd0QsS0FBeEQsQ0FBM0IsQ0FOMkQsQ0FNZ0M7O0FBQzNGd1QsU0FBSyxDQUFDcXlELGtCQUFOLEdBQTJCLElBQUk3UCxjQUFKLENBQW1CcEQsb0JBQW5CLEVBQXlDcC9DLEtBQUssQ0FBQ3hULEtBQS9DLEVBQXNELEtBQXRELENBQTNCLENBUDJELENBTzhCOztBQUN6RndULFNBQUssQ0FBQzk4QixNQUFOLEdBQWUsSUFBSW1uRixjQUFKLENBQW1CbHNFLE9BQW5CLEVBQTRCOGdFLHNCQUFzQixDQUFDSyxNQUF2QixDQUE4Qmo3QixTQUExRCxDQUFmO0FBQ0Fya0IsU0FBSyxDQUFDeWlELEtBQU4sR0FBYyxJQUFJNkksYUFBSixDQUFrQm50RSxPQUFsQixFQUEyQmloRSxvQkFBb0IsQ0FBQ0UsTUFBckIsQ0FBNEI4QyxJQUF2RCxDQUFkO0FBQ0FwaUQsU0FBSyxDQUFDc3lELFlBQU4sR0FBcUIsSUFBSXpDLG9CQUFKLENBQXlCNVEsc0JBQXNCLENBQUNLLE1BQXZCLENBQThCNzZFLEVBQXZELEVBQTJEMjZFLG9CQUFvQixDQUFDRSxNQUFyQixDQUE0Qjc2RSxFQUF2RixDQUFyQjtBQUNBLFdBQU91N0IsS0FBUDtBQUNIOztBQUNEaWlELFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1CeStCLE9BQW5CLEdBQTZCLFlBQVk7QUFDckMsU0FBSzJhLE1BQUwsQ0FBWTNhLE9BQVo7QUFDQSxTQUFLdmtDLE1BQUwsQ0FBWXVrQyxPQUFaO0FBQ0EsU0FBS2c3QyxLQUFMLENBQVdoN0MsT0FBWDtBQUNBLFNBQUs2cUQsWUFBTCxDQUFrQjF6RCxRQUFsQjtBQUNBLFNBQUt3ekQsa0JBQUwsQ0FBd0IzcUQsT0FBeEI7QUFDQSxTQUFLNHFELGtCQUFMLENBQXdCNXFELE9BQXhCOztBQUNBM0QsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7QUFDSCxHQVJEOztBQVNBKzRFLFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1CcEMsTUFBbkIsR0FBNEIsVUFBVXNGLEtBQVYsRUFBaUI7QUFDekMsUUFBSW8rRSxZQUFZLEdBQUcsS0FBS0EsWUFBTCxHQUNmb0Msd0JBQXdCLENBQUN4Z0YsS0FBSyxDQUFDa3FCLFdBQVAsRUFBb0IsS0FBS2xDLElBQXpCLENBRDVCLENBRHlDLENBRW1COztBQUM1RCxTQUFLaHhCLE1BQUwsQ0FBWWdtQyxZQUFaLENBQXlCO0FBQ3JCOVMsaUJBQVcsRUFBRWxxQixLQUFLLENBQUNrcUIsV0FERTtBQUVyQmswRCxrQkFBWSxFQUFFQTtBQUZPLEtBQXpCO0FBSUEsU0FBSzdILEtBQUwsQ0FBV3Y1QyxZQUFYLENBQXdCO0FBQ3BCOVMsaUJBQVcsRUFBRWxxQixLQUFLLENBQUNrcUIsV0FEQztBQUVwQmswRCxrQkFBWSxFQUFFQTtBQUZNLEtBQXhCO0FBSUgsR0FYRCxDQXhCNEMsQ0FvQzVDO0FBQ0E7OztBQUNBckksVUFBUSxDQUFDajVFLFNBQVQsQ0FBbUJzcUQsbUJBQW5CLEdBQXlDLFVBQVVsOUIsV0FBVixFQUF1QjtBQUM1RDtBQUNBLFFBQUlrMEQsWUFBWSxHQUFHLEtBQUtBLFlBQUwsR0FDZm9DLHdCQUF3QixDQUFDdDJELFdBQUQsRUFBYyxLQUFLbEMsSUFBbkIsQ0FENUIsQ0FGNEQsQ0FHTjs7QUFDdEQsUUFBSW8yRCxZQUFZLENBQUNZLFdBQWpCLEVBQThCO0FBQzFCLGFBQU8xeEUsc0ZBQTJCLENBQUM4d0UsWUFBWSxDQUFDdm5GLFlBQWQsQ0FBM0IsQ0FBdURpVSxJQUE5RDtBQUNIO0FBQ0osR0FQRCxDQXRDNEMsQ0E4QzVDOzs7QUFDQWlyRSxVQUFRLENBQUNqNUUsU0FBVCxDQUFtQjZxRCxrQkFBbkIsR0FBd0MsVUFBVWx0RCxJQUFWLEVBQWdCO0FBQ3BELFFBQUk2Z0IsOEVBQW1CLENBQUMsS0FBSzhpRSxZQUFMLENBQWtCd0IsZUFBbkIsRUFBb0NubEYsSUFBcEMsQ0FBdkIsRUFBa0U7QUFDOUQsV0FBSzJyRixZQUFMLENBQWtCMXJGLE1BQWxCLENBQXlCLEtBQUsyckYsV0FBTCxDQUFpQjVyRixJQUFqQixDQUF6QixFQUFpRCxLQUFLNmxCLEtBQXREO0FBQ0g7QUFDSixHQUpELENBL0M0QyxDQW9ENUM7OztBQUNBeTFELFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1CNHFELG9CQUFuQixHQUEwQyxZQUFZO0FBQ2xELFNBQUswK0IsWUFBTCxDQUFrQjF6RCxRQUFsQjtBQUNILEdBRkQsQ0FyRDRDLENBd0Q1QztBQUNBOzs7QUFDQXFqRCxVQUFRLENBQUNqNUUsU0FBVCxDQUFtQis3QyxVQUFuQixHQUFnQyxVQUFVZ0IsUUFBVixFQUFvQis1QixXQUFwQixFQUFpQzd0QixNQUFqQyxFQUF5QztBQUNyRSxTQUFLdWdDLGNBQUwsQ0FBb0IsS0FBS0MsZ0JBQUwsRUFBcEIsRUFEcUUsQ0FFckU7O0FBQ0EsU0FBS3J3QyxNQUFMLENBQVk1YSxTQUFaLENBQXNCczRDLFdBQXRCLEVBQW1DN3RCLE1BQW5DLEVBSHFFLENBSXJFOztBQUNBLFNBQUt3d0IsS0FBTCxDQUFXMTlCLFVBQVg7QUFDSCxHQU5EOztBQU9BazlCLFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1CdThFLHFCQUFuQixHQUEyQyxZQUFZO0FBQ25ELFNBQUs2TSxrQkFBTCxDQUF3QnJ0QyxVQUF4QjtBQUNBLFNBQUtzdEMsa0JBQUwsQ0FBd0J0dEMsVUFBeEI7QUFDSCxHQUhEOztBQUlBazlCLFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1CeXBGLGdCQUFuQixHQUFzQyxZQUFZO0FBQzlDLFFBQUlDLFNBQVMsR0FBRyxLQUFLL3NFLEdBQUwsQ0FBUyxXQUFULEtBQXlCLEVBQXpDOztBQUNBLFFBQUkrc0UsU0FBUyxLQUFLLEVBQWxCLEVBQXNCO0FBQ2xCQSxlQUFTLEdBQUcsS0FBS0MsdUJBQUwsQ0FBNkIsS0FBS3JJLFlBQWxDLENBQVo7QUFDSDs7QUFDRCxXQUFPb0ksU0FBUDtBQUNILEdBTkQ7O0FBT0F6USxVQUFRLENBQUNqNUUsU0FBVCxDQUFtQjJwRix1QkFBbkIsR0FBNkMsVUFBVXJJLFlBQVYsRUFBd0I7QUFDakUsUUFBSXB2RSxhQUFhLEdBQUcsQ0FBcEIsQ0FEaUUsQ0FDMUM7O0FBQ3ZCLFNBQUtoWSxNQUFMLENBQVltb0YsUUFBWixDQUFxQjc0RSxPQUFyQixDQUE2QixVQUFVbkUsT0FBVixFQUFtQmhILENBQW5CLEVBQXNCO0FBQy9DNlQsbUJBQWEsR0FBR2xPLElBQUksQ0FBQ0MsR0FBTCxDQUFTaU8sYUFBVCxFQUF3QjdNLE9BQU8sQ0FBQ0MscUJBQVIsR0FBZ0N0SyxLQUF4RCxDQUFoQjtBQUNILEtBRkQ7QUFHQSxRQUFJNHVGLGdCQUFnQixHQUFHNWxGLElBQUksQ0FBQzBzRCxJQUFMLENBQVV4K0MsYUFBVixJQUEyQixDQUFsRCxDQUxpRSxDQUtaO0FBQ3JEO0FBQ0E7O0FBQ0EsUUFBSXF6RSxhQUFhLEdBQUdwMUUsK0VBQW9CLENBQUNteEUsWUFBWSxDQUFDSSxhQUFkLEVBQTZCSixZQUFZLENBQUN2bkYsWUFBMUMsQ0FBeEM7QUFDQSxRQUFJMnZGLFNBQVMsR0FBRzFsRixJQUFJLENBQUMwc0QsSUFBTCxDQUFVazVCLGdCQUFnQixHQUFHckUsYUFBN0IsQ0FBaEI7QUFDQSxRQUFJbkgsUUFBUSxHQUFHeDRFLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsS0FBSzNMLE1BQUwsQ0FBWWtvRixVQUFaLENBQXVCLENBQXZCLENBQXhCLEVBQW1EaEUsUUFBbEU7O0FBQ0EsUUFBSUEsUUFBSixFQUFjO0FBQ1ZBLGNBQVEsR0FBRy9sRixRQUFRLENBQUMrbEYsUUFBRCxFQUFXLEVBQVgsQ0FBbkI7O0FBQ0EsVUFBSUEsUUFBSixFQUFjO0FBQ1ZzTCxpQkFBUyxHQUFHMWxGLElBQUksQ0FBQ0MsR0FBTCxDQUFTeWxGLFNBQVQsRUFBb0J0TCxRQUFwQixDQUFaO0FBQ0g7QUFDSjs7QUFDRCxXQUFPc0wsU0FBUDtBQUNILEdBbEJEOztBQW1CQXpRLFVBQVEsQ0FBQ2o1RSxTQUFULENBQW1Cd3BGLGNBQW5CLEdBQW9DLFVBQVVFLFNBQVYsRUFBcUI7QUFDckQsUUFBSXo3RSxFQUFFLEdBQUcsSUFBVDtBQUFBLFFBQWVtckMsTUFBTSxHQUFHbnJDLEVBQUUsQ0FBQ21yQyxNQUEzQjtBQUFBLFFBQW1Da29DLFlBQVksR0FBR3J6RSxFQUFFLENBQUNxekUsWUFBckQ7O0FBQ0EsUUFBSXVJLGNBQWMsR0FBRyxFQUFyQjtBQUNBLFFBQUlDLGlCQUFpQixHQUFHLEVBQXhCO0FBQ0EsUUFBSUMsZ0JBQWdCLEdBQUcsRUFBdkI7O0FBQ0EsUUFBSUwsU0FBUyxLQUFLLEVBQWxCLEVBQXNCO0FBQ2xCQSxlQUFTLEdBQUcxbEYsSUFBSSxDQUFDd0IsS0FBTCxDQUFXa2tGLFNBQVgsQ0FBWjtBQUNBRyxvQkFBYyxHQUFHSCxTQUFTLEdBQUdwSSxZQUFZLENBQUNpQixTQUFiLENBQXVCamlGLE1BQXBEO0FBQ0F3cEYsdUJBQWlCLEdBQUcsRUFBcEI7QUFDQUMsc0JBQWdCLEdBQUdMLFNBQW5CO0FBQ0EsVUFBSU0sY0FBYyxHQUFHNXdDLE1BQU0sQ0FBQ2k5QixZQUFQLENBQW9CRixjQUFwQixDQUFtQ2g1QyxjQUFuQyxFQUFyQjs7QUFDQSxVQUFJNnNELGNBQWMsR0FBR0gsY0FBckIsRUFBcUM7QUFDakNDLHlCQUFpQixHQUFHRSxjQUFwQjtBQUNBSCxzQkFBYyxHQUFHLEVBQWpCO0FBQ0FFLHdCQUFnQixHQUFHL2xGLElBQUksQ0FBQzdMLEtBQUwsQ0FBVzZ4RixjQUFjLEdBQUcxSSxZQUFZLENBQUNpQixTQUFiLENBQXVCamlGLE1BQW5ELENBQW5CO0FBQ0g7QUFDSjs7QUFDRDg0QyxVQUFNLENBQUM4OEIsY0FBUCxDQUFzQkMsY0FBdEIsQ0FBcUNHLE1BQXJDLENBQTRDNEgsUUFBNUMsQ0FBcUQyTCxjQUFyRDtBQUNBendDLFVBQU0sQ0FBQzg4QixjQUFQLENBQXNCQyxjQUF0QixDQUFxQ0csTUFBckMsQ0FBNEM2SCxXQUE1QyxDQUF3RDJMLGlCQUF4RDtBQUNBMXdDLFVBQU0sQ0FBQ2k5QixZQUFQLENBQW9CRixjQUFwQixDQUFtQ0csTUFBbkMsQ0FBMEM0SCxRQUExQyxDQUFtRDJMLGNBQW5EO0FBQ0F6d0MsVUFBTSxDQUFDaTlCLFlBQVAsQ0FBb0JGLGNBQXBCLENBQW1DRyxNQUFuQyxDQUEwQzZILFdBQTFDLENBQXNEMkwsaUJBQXREOztBQUNBLFFBQUlDLGdCQUFnQixLQUFLLEVBQXpCLEVBQTZCO0FBQ3pCLFdBQUs3dkYsTUFBTCxDQUFZa29GLFVBQVosQ0FBdUJuaUYsS0FBdkIsQ0FBNkIsQ0FBN0IsRUFBZ0MsQ0FBQyxDQUFqQyxFQUFvQ29JLE1BQXBDLENBQTJDLEtBQUtveEUsS0FBTCxDQUFXMkksVUFBWCxDQUFzQm5pRixLQUF0QixDQUE0QixDQUE1QixFQUErQixDQUFDLENBQWhDLENBQTNDLEVBQStFdUosT0FBL0UsQ0FBdUYsVUFBVS9OLEVBQVYsRUFBYztBQUNqR0EsVUFBRSxDQUFDNkgsS0FBSCxDQUFTdEksS0FBVCxHQUFpQit1RixnQkFBZ0IsR0FBRyxJQUFwQztBQUNILE9BRkQ7QUFHSDtBQUNKLEdBMUJELENBL0Y0QyxDQTBINUM7OztBQUNBOVEsVUFBUSxDQUFDajVFLFNBQVQsQ0FBbUJpcUYsdUJBQW5CLEdBQTZDLFVBQVV0c0YsSUFBVixFQUFnQjtBQUN6RCxRQUFJc1EsRUFBRSxHQUFHLElBQVQ7QUFBQSxRQUFlZ0osT0FBTyxHQUFHaEosRUFBRSxDQUFDZ0osT0FBNUI7QUFBQSxRQUFxQ3FxRSxZQUFZLEdBQUdyekUsRUFBRSxDQUFDcXpFLFlBQXZEOztBQUNBLFFBQUlzRCxRQUFRLEdBQUczdEUsT0FBTyxDQUFDaTNCLHFCQUFSLENBQThCb3pDLFlBQVksQ0FBQ3dCLGVBQWIsQ0FBNkJobUYsS0FBM0QsRUFBa0VhLElBQWxFLEVBQXdFMmpGLFlBQVksQ0FBQzhCLFlBQXJGLENBQWY7O0FBQ0EsUUFBSXdCLFFBQVEsR0FBRyxDQUFmLEVBQWtCO0FBQ2QsYUFBTyxDQUFQO0FBQ0gsS0FGRCxNQUdLLElBQUlBLFFBQVEsSUFBSXRELFlBQVksQ0FBQ3VELGVBQWIsQ0FBNkJ2a0YsTUFBN0MsRUFBcUQ7QUFDdEQsYUFBT2doRixZQUFZLENBQUN5RCxPQUFwQjtBQUNILEtBRkksTUFHQTtBQUNELFVBQUltRixXQUFXLEdBQUdsbUYsSUFBSSxDQUFDN0wsS0FBTCxDQUFXeXNGLFFBQVgsQ0FBbEI7QUFDQSxVQUFJdUYsWUFBWSxHQUFHN0ksWUFBWSxDQUFDdUQsZUFBYixDQUE2QnFGLFdBQTdCLENBQW5COztBQUNBLFVBQUkzNUUsZ0VBQUssQ0FBQzQ1RSxZQUFELENBQVQsRUFBeUI7QUFBRTtBQUN2QkEsb0JBQVksSUFBSXZGLFFBQVEsR0FBR3NGLFdBQTNCLENBRHFCLENBQ21CO0FBQzNDLE9BRkQsTUFHSztBQUNEO0FBQ0E7QUFDQUMsb0JBQVksR0FBR25tRixJQUFJLENBQUMwc0QsSUFBTCxDQUFVeTVCLFlBQVYsQ0FBZjtBQUNIOztBQUNELGFBQU9BLFlBQVA7QUFDSDtBQUNKLEdBdEJELENBM0g0QyxDQWtKNUM7QUFDQTs7O0FBQ0FsUixVQUFRLENBQUNqNUUsU0FBVCxDQUFtQnVwRixXQUFuQixHQUFpQyxVQUFVNXJGLElBQVYsRUFBZ0I7QUFDN0MsUUFBSTJqRixZQUFZLEdBQUcsS0FBS0EsWUFBeEI7QUFDQSxRQUFJNkksWUFBWSxHQUFHLEtBQUtGLHVCQUFMLENBQTZCdHNGLElBQTdCLENBQW5CO0FBQ0EsUUFBSXlzRixZQUFZLEdBQUdELFlBQVksR0FBRzdJLFlBQVksQ0FBQzZCLFlBQS9DO0FBQ0EsUUFBSWtILFNBQVMsR0FBR3JtRixJQUFJLENBQUM3TCxLQUFMLENBQVdpeUYsWUFBWCxDQUFoQjtBQUNBQyxhQUFTLEdBQUdybUYsSUFBSSxDQUFDRSxHQUFMLENBQVNtbUYsU0FBVCxFQUFvQi9JLFlBQVksQ0FBQ00sT0FBYixHQUF1QixDQUEzQyxDQUFaO0FBQ0EsUUFBSXFCLE9BQU8sR0FBR21ILFlBQVksR0FBR0MsU0FBN0I7QUFDQSxRQUFJcDhFLEVBQUUsR0FBRyxLQUFLd3JFLEtBQWQ7QUFBQSxRQUFxQm1KLGVBQWUsR0FBRzMwRSxFQUFFLENBQUMyMEUsZUFBMUM7QUFBQSxRQUEyREQsZUFBZSxHQUFHMTBFLEVBQUUsQ0FBQzAwRSxlQUFoRjs7QUFDQSxRQUFJLEtBQUtuL0QsS0FBVCxFQUFnQjtBQUNaLGFBQVFtL0QsZUFBZSxDQUFDMW1ELE1BQWhCLENBQXVCb3VELFNBQXZCLElBQ0h6SCxlQUFlLENBQUNubUQsUUFBaEIsQ0FBeUI0dEQsU0FBekIsSUFBc0NwSCxPQURwQyxHQUNnRE4sZUFBZSxDQUFDL21ELGdCQUFoQixDQUFpQzVnQyxLQUR4RjtBQUVILEtBSEQsTUFJSztBQUNELGFBQVEybkYsZUFBZSxDQUFDM21ELEtBQWhCLENBQXNCcXVELFNBQXRCLElBQ0h6SCxlQUFlLENBQUNubUQsUUFBaEIsQ0FBeUI0dEQsU0FBekIsSUFBc0NwSCxPQUQzQztBQUVIO0FBQ0osR0FoQkQ7O0FBaUJBaEssVUFBUSxDQUFDajVFLFNBQVQsQ0FBbUJzcUYsYUFBbkIsR0FBbUMsVUFBVTF6RSxLQUFWLEVBQWlCO0FBQ2hELFFBQUksS0FBSzRNLEtBQVQsRUFBZ0I7QUFDWixhQUFPO0FBQUVucEIsYUFBSyxFQUFFLEtBQUtrdkYsV0FBTCxDQUFpQjN5RSxLQUFLLENBQUM5WixLQUF2QixDQUFUO0FBQXdDM0MsWUFBSSxFQUFFLEtBQUtvdkYsV0FBTCxDQUFpQjN5RSxLQUFLLENBQUM3WixHQUF2QjtBQUE5QyxPQUFQO0FBQ0gsS0FGRCxNQUdLO0FBQ0QsYUFBTztBQUFFNUMsWUFBSSxFQUFFLEtBQUtvdkYsV0FBTCxDQUFpQjN5RSxLQUFLLENBQUM5WixLQUF2QixDQUFSO0FBQXVDekMsYUFBSyxFQUFFLEtBQUtrdkYsV0FBTCxDQUFpQjN5RSxLQUFLLENBQUM3WixHQUF2QjtBQUE5QyxPQUFQO0FBQ0g7QUFDSixHQVBELENBcks0QyxDQTZLNUM7QUFDQTs7O0FBQ0FrOEUsVUFBUSxDQUFDajVFLFNBQVQsQ0FBbUJvckQsaUJBQW5CLEdBQXVDLFVBQVV6eUMsUUFBVixFQUFvQjtBQUN2RCxRQUFJMUIsT0FBTyxHQUFHLEtBQUtBLE9BQW5CO0FBQ0EsUUFBSW1XLFdBQVcsR0FBRyxLQUFLbHFCLEtBQUwsQ0FBV2txQixXQUE3QjtBQUNBLFFBQUlqekIsSUFBSSxHQUFHLENBQVg7O0FBQ0EsUUFBSWl6QixXQUFKLEVBQWlCO0FBQ2JqekIsVUFBSSxHQUFHLEtBQUtvdkYsV0FBTCxDQUFpQnR5RSxPQUFPLENBQUNqVSxHQUFSLENBQVk2SCxxRUFBVSxDQUFDdWlCLFdBQVcsQ0FBQ0ssV0FBWixDQUF3QjN3QixLQUF6QixDQUF0QixFQUF1RDtBQUMvRTZiLGNBRHdCLENBQWpCLENBQVAsQ0FEYSxDQUdiOztBQUNBLFVBQUksQ0FBQyxLQUFLNkssS0FBTixJQUFlcnBCLElBQW5CLEVBQXlCO0FBQ3JCQSxZQUFJLElBQUksQ0FBUjtBQUNIO0FBQ0o7O0FBQ0QsV0FBTztBQUFFQSxVQUFJLEVBQUVBO0FBQVIsS0FBUDtBQUNILEdBYkQ7O0FBY0E4K0UsVUFBUSxDQUFDajVFLFNBQVQsQ0FBbUJtckQsZUFBbkIsR0FBcUMsWUFBWTtBQUM3QyxRQUFJZ3JCLGNBQWMsR0FBRyxLQUFLLzhCLE1BQUwsQ0FBWWk5QixZQUFaLENBQXlCRixjQUE5QztBQUNBLFdBQU87QUFDSGg4RSxVQUFJLEVBQUVnOEUsY0FBYyxDQUFDejRDLGFBQWY7QUFESCxLQUFQO0FBR0gsR0FMRDs7QUFNQXU3QyxVQUFRLENBQUNqNUUsU0FBVCxDQUFtQnFyRCxlQUFuQixHQUFxQyxVQUFVanRCLE1BQVYsRUFBa0I7QUFDbkQ7QUFDQSxTQUFLZ2IsTUFBTCxDQUFZaTlCLFlBQVosQ0FBeUJGLGNBQXpCLENBQXdDbjRDLGFBQXhDLENBQXNESSxNQUFNLENBQUNqa0MsSUFBUCxJQUFlLENBQXJFO0FBQ0EsU0FBS2kvQyxNQUFMLENBQVk4OEIsY0FBWixDQUEyQkMsY0FBM0IsQ0FBMENuNEMsYUFBMUMsQ0FBd0RJLE1BQU0sQ0FBQ2prQyxJQUFQLElBQWUsQ0FBdkU7QUFDSCxHQUpEOztBQUtBLFNBQU84K0UsUUFBUDtBQUNILENBek02QixDQXlNNUJwNUMsNERBek00QixDQUE5Qjs7QUEyTUEsSUFBSTBxRCx5QkFBeUI7QUFBRztBQUFlLFVBQVV6dkQsTUFBVixFQUFrQjtBQUM3RG5qQixXQUFTLENBQUM0eUUseUJBQUQsRUFBNEJ6dkQsTUFBNUIsQ0FBVDs7QUFDQSxXQUFTeXZELHlCQUFULENBQW1DcDFFLE9BQW5DLEVBQTRDcTFFLGlCQUE1QyxFQUErRGxXLFFBQS9ELEVBQXlFO0FBQ3JFLFFBQUl0OUMsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDd3pELGlCQUFOLEdBQTBCQSxpQkFBMUI7QUFDQXh6RCxTQUFLLENBQUNzOUMsUUFBTixHQUFpQkEsUUFBakI7QUFDQSxXQUFPdDlDLEtBQVA7QUFDSDs7QUFDRHV6RCwyQkFBeUIsQ0FBQ3ZxRixTQUExQixDQUFvQ29zRCxhQUFwQyxHQUFvRCxVQUFVN2dDLEdBQVYsRUFBZWlnQyxVQUFmLEVBQTJCO0FBQzNFLFFBQUl0Z0MsSUFBSSxHQUFHLEtBQUsvVixPQUFMLENBQWErVixJQUF4QjtBQUNBLFFBQUlRLFVBQVUsR0FBR0gsR0FBRyxDQUFDRyxVQUFyQjtBQUNBLFFBQUkzUyxRQUFRLEdBQUcyUyxVQUFVLENBQUN4USxHQUExQjtBQUNBLFFBQUl5dUMsT0FBTyxHQUFHaitCLFVBQVUsQ0FBQ3RFLEVBQXpCO0FBQ0EsUUFBSWtsQyxXQUFXLEdBQUdwaEMsSUFBSSxDQUFDdytCLHFCQUFMLENBQTJCM3dDLFFBQTNCLEVBQXFDNHdDLE9BQXJDLENBQWxCO0FBQ0EsUUFBSThnQyxvQkFBb0IsR0FBR2wvRCxHQUFHLENBQUNkLE9BQUosSUFBZVMsSUFBSSxDQUFDMCtCLDBCQUFMLENBQWdDN3dDLFFBQWhDLEVBQTBDNHdDLE9BQTFDLENBQTFDO0FBQ0EsUUFBSStnQyxrQkFBa0IsR0FBR24vRCxHQUFHLENBQUNiLEtBQUosSUFBYVEsSUFBSSxDQUFDMitCLHdCQUFMLENBQThCOXdDLFFBQTlCLEVBQXdDNHdDLE9BQXhDLENBQXRDO0FBQ0EsUUFBSWp3QixPQUFPLEdBQUcsS0FBSzJ5QixhQUFMLENBQW1COWdDLEdBQW5CLEVBQXdCK2dDLFdBQXhCLEVBQXFDbStCLG9CQUFvQixJQUFJQyxrQkFBN0QsRUFBaUZsL0IsVUFBakYsQ0FBZDtBQUNBOXhCLFdBQU8sQ0FBQy9mLE9BQVIsQ0FBZ0IsbUJBQWhCLEVBQXFDLFlBQXJDO0FBQ0EsUUFBSWd4RSxRQUFRLEdBQUcsS0FBS2orQixXQUFMLENBQWlCaGhDLFVBQWpCLENBQWY7QUFDQSxXQUFPLGVBQWVnTyxPQUFPLENBQUNoVyxJQUFSLENBQWEsR0FBYixDQUFmLEdBQW1DLFdBQW5DLEdBQWlEMk8sbUVBQVEsQ0FBQyxLQUFLdzZCLFVBQUwsQ0FBZ0JsRCxPQUFoQixDQUFELENBQXpELEdBQXNGLEdBQXRGLElBQ0Y1d0MsUUFBUSxDQUFDNWQsR0FBVCxHQUNHLFlBQVlpM0IscUVBQVUsQ0FBQ3JaLFFBQVEsQ0FBQzVkLEdBQVYsQ0FBdEIsR0FBdUMsR0FEMUMsR0FFRyxFQUhELElBSUgsR0FKRyxJQUtGd3ZGLFFBQVEsR0FDTCxnQ0FDSSx3QkFESixHQUVJdjRELHFFQUFVLENBQUN1NEQsUUFBRCxDQUZkLEdBR0ksU0FISixHQUlJLFNBTEMsR0FPRCxFQVpMLElBYUgsOEJBYkcsR0FjSCxtQ0FkRyxJQWVGNXhFLFFBQVEsQ0FBQ2xjLEtBQVQsR0FBaUJ1MUIscUVBQVUsQ0FBQ3JaLFFBQVEsQ0FBQ2xjLEtBQVYsQ0FBM0IsR0FBOEMsUUFmNUMsSUFnQkgsU0FoQkcsR0FpQkgsU0FqQkcsSUFrQkY0dEYsb0JBQW9CLEdBQ2pCLGlEQURpQixHQUVqQixFQXBCRCxLQXFCRkMsa0JBQWtCLEdBQ2YsK0NBRGUsR0FFZixFQXZCRCxJQXdCSCxNQXhCSjtBQXlCSCxHQXBDRDs7QUFxQ0FILDJCQUF5QixDQUFDdnFGLFNBQTFCLENBQW9Da3NELHVCQUFwQyxHQUE4RCxZQUFZO0FBQ3RFLFdBQU8sQ0FBQyxLQUFLb29CLFFBQUwsQ0FBY2dOLFlBQWQsQ0FBMkJZLFdBQW5DLENBRHNFLENBQ3RCO0FBQ25ELEdBRkQ7O0FBR0FxSSwyQkFBeUIsQ0FBQ3ZxRixTQUExQixDQUFvQ21zRCxzQkFBcEMsR0FBNkQsWUFBWTtBQUNyRSxXQUFPLEtBQVA7QUFDSCxHQUZELENBaEQ2RCxDQW1EN0Q7OztBQUNBbytCLDJCQUF5QixDQUFDdnFGLFNBQTFCLENBQW9DaXNELHNCQUFwQyxHQUE2RCxZQUFZO0FBQ3JFLFdBQU87QUFDSHI5QyxVQUFJLEVBQUUsU0FESDtBQUVIRSxZQUFNLEVBQUUsU0FGTDtBQUdINFEsb0JBQWMsRUFBRSxJQUhiO0FBSUhDLGNBQVEsRUFBRTtBQUpQLEtBQVA7QUFNSCxHQVBEOztBQVFBNHFFLDJCQUF5QixDQUFDdnFGLFNBQTFCLENBQW9DMnJELFVBQXBDLEdBQWlELFVBQVV4Z0MsSUFBVixFQUFnQnFnQyxVQUFoQixFQUE0QjtBQUN6RSxRQUFJLENBQUMsS0FBSy92RCxFQUFOLElBQVksS0FBSyt1RixpQkFBckIsRUFBd0M7QUFDcEMsV0FBSy91RixFQUFMLEdBQVV1RCx3RUFBYSxDQUFDLEtBQUQsRUFBUTtBQUFFSixpQkFBUyxFQUFFO0FBQWIsT0FBUixDQUF2Qjs7QUFDQSxVQUFJNHNELFVBQUosRUFBZ0I7QUFDWixhQUFLL3ZELEVBQUwsQ0FBUXNILFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLHFCQUF0QjtBQUNIOztBQUNELFdBQUt3bkYsaUJBQUwsQ0FBdUJqcUYsV0FBdkIsQ0FBbUMsS0FBSzlFLEVBQXhDO0FBQ0g7O0FBQ0QsUUFBSSxLQUFLQSxFQUFULEVBQWE7QUFDVCxXQUFLLElBQUlvWixFQUFFLEdBQUcsQ0FBVCxFQUFZOFcsTUFBTSxHQUFHUixJQUExQixFQUFnQ3RXLEVBQUUsR0FBRzhXLE1BQU0sQ0FBQ3JyQixNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsWUFBSTBXLEdBQUcsR0FBR0ksTUFBTSxDQUFDOVcsRUFBRCxDQUFoQjtBQUNBLGFBQUtwWixFQUFMLENBQVE4RSxXQUFSLENBQW9CZ3JCLEdBQUcsQ0FBQzl2QixFQUF4QjtBQUNIO0FBQ0o7QUFDSixHQWREOztBQWVBOHVGLDJCQUF5QixDQUFDdnFGLFNBQTFCLENBQW9DNnJELFVBQXBDLEdBQWlELFVBQVUxZ0MsSUFBVixFQUFnQjtBQUM3RCxTQUFLLElBQUl0VyxFQUFFLEdBQUcsQ0FBVCxFQUFZeXNCLE1BQU0sR0FBR25XLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHeXNCLE1BQU0sQ0FBQ2hoQyxNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsVUFBSTBXLEdBQUcsR0FBRytWLE1BQU0sQ0FBQ3pzQixFQUFELENBQWhCO0FBQ0EzVCw4RUFBYSxDQUFDcXFCLEdBQUcsQ0FBQzl2QixFQUFMLENBQWI7QUFDSDtBQUNKLEdBTEQsQ0EzRTZELENBaUY3RDs7O0FBQ0E4dUYsMkJBQXlCLENBQUN2cUYsU0FBMUIsQ0FBb0NxdEQsZUFBcEMsR0FBc0QsVUFBVWxpQyxJQUFWLEVBQWdCO0FBQ2xFLFFBQUltcEQsUUFBUSxHQUFHLEtBQUtBLFFBQXBCOztBQUNBLFNBQUssSUFBSXovRCxFQUFFLEdBQUcsQ0FBVCxFQUFZMHNCLE1BQU0sR0FBR3BXLElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHMHNCLE1BQU0sQ0FBQ2poQyxNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsVUFBSTBXLEdBQUcsR0FBR2dXLE1BQU0sQ0FBQzFzQixFQUFELENBQWhCO0FBQ0EsVUFBSSsxRSxNQUFNLEdBQUd0VyxRQUFRLENBQUNnVyxhQUFULENBQXVCLytELEdBQXZCLENBQWIsQ0FGc0QsQ0FFWjs7QUFDMUNsc0IsMkVBQVUsQ0FBQ2tzQixHQUFHLENBQUM5dkIsRUFBTCxFQUFTO0FBQ2Z0QixZQUFJLEVBQUdveEIsR0FBRyxDQUFDcHhCLElBQUosR0FBV3l3RixNQUFNLENBQUN6d0YsSUFEVjtBQUVmRSxhQUFLLEVBQUUsRUFBRWt4QixHQUFHLENBQUNseEIsS0FBSixHQUFZdXdGLE1BQU0sQ0FBQ3Z3RixLQUFyQjtBQUZRLE9BQVQsQ0FBVjtBQUlIO0FBQ0osR0FWRDs7QUFXQWt3RiwyQkFBeUIsQ0FBQ3ZxRixTQUExQixDQUFvQ3V0RCxjQUFwQyxHQUFxRCxVQUFVcGlDLElBQVYsRUFBZ0I7QUFDakUsUUFBSSxDQUFDLEtBQUsxdkIsRUFBVixFQUFjO0FBQ1Y7QUFDSCxLQUhnRSxDQUlqRTs7O0FBQ0EsU0FBSyxJQUFJb1osRUFBRSxHQUFHLENBQVQsRUFBWWcyRSxNQUFNLEdBQUcxL0QsSUFBMUIsRUFBZ0N0VyxFQUFFLEdBQUdnMkUsTUFBTSxDQUFDdnFGLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxVQUFJMFcsR0FBRyxHQUFHcy9ELE1BQU0sQ0FBQ2gyRSxFQUFELENBQWhCO0FBQ0EwVyxTQUFHLENBQUM1akIsTUFBSixHQUFhRCxrRkFBdUIsQ0FBQzZqQixHQUFHLENBQUM5dkIsRUFBTCxDQUFwQztBQUNIOztBQUNELFNBQUtxdkYsY0FBTCxDQUFvQjMvRCxJQUFwQixFQVRpRSxDQVN0Qzs7QUFDM0IsUUFBSTJyRCxXQUFXLEdBQUdpVSxvQkFBb0IsQ0FBQzUvRCxJQUFELENBQXRDLENBVmlFLENBVW5COztBQUM5Qy9uQiw2RUFBYyxDQUFDLEtBQUszSCxFQUFOLEVBQVUsUUFBVixFQUFvQnE3RSxXQUFwQixDQUFkLENBWGlFLENBWWpFOztBQUNBLFNBQUssSUFBSTdvRSxFQUFFLEdBQUcsQ0FBVCxFQUFZKzhFLE1BQU0sR0FBRzcvRCxJQUExQixFQUFnQ2xkLEVBQUUsR0FBRys4RSxNQUFNLENBQUMxcUYsTUFBNUMsRUFBb0QyTixFQUFFLEVBQXRELEVBQTBEO0FBQ3RELFVBQUlzZCxHQUFHLEdBQUd5L0QsTUFBTSxDQUFDLzhFLEVBQUQsQ0FBaEI7QUFDQTdLLCtFQUFjLENBQUNtb0IsR0FBRyxDQUFDOXZCLEVBQUwsRUFBUyxLQUFULEVBQWdCOHZCLEdBQUcsQ0FBQzduQixHQUFwQixDQUFkO0FBQ0g7QUFDSixHQWpCRDs7QUFrQkE2bUYsMkJBQXlCLENBQUN2cUYsU0FBMUIsQ0FBb0M4cUYsY0FBcEMsR0FBcUQsVUFBVTMvRCxJQUFWLEVBQWdCO0FBQ2pFLFFBQUk4L0QsU0FBUyxHQUFHLEVBQWhCO0FBQ0E5L0QsUUFBSSxHQUFHLEtBQUsyaEMsYUFBTCxDQUFtQjNoQyxJQUFuQixDQUFQOztBQUNBLFNBQUssSUFBSXRXLEVBQUUsR0FBRyxDQUFULEVBQVlxMkUsTUFBTSxHQUFHLy9ELElBQTFCLEVBQWdDdFcsRUFBRSxHQUFHcTJFLE1BQU0sQ0FBQzVxRixNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsVUFBSXMyRSxXQUFXLEdBQUdELE1BQU0sQ0FBQ3IyRSxFQUFELENBQXhCO0FBQ0FzMkUsaUJBQVcsQ0FBQ0MsS0FBWixHQUFvQixFQUFwQixDQUZzRCxDQUd0RDs7QUFDQSxVQUFJQyxLQUFLLEdBQUcsQ0FBWixDQUpzRCxDQUl2Qzs7QUFDZixhQUFPQSxLQUFLLEdBQUdKLFNBQVMsQ0FBQzNxRixNQUF6QixFQUFpQztBQUM3QixZQUFJZ3JGLGdCQUFnQixHQUFHLEtBQXZCLENBRDZCLENBRTdCOztBQUNBLGFBQUssSUFBSXI5RSxFQUFFLEdBQUcsQ0FBVCxFQUFZNlksRUFBRSxHQUFHbWtFLFNBQVMsQ0FBQ0ksS0FBRCxDQUEvQixFQUF3Q3A5RSxFQUFFLEdBQUc2WSxFQUFFLENBQUN4bUIsTUFBaEQsRUFBd0QyTixFQUFFLEVBQTFELEVBQThEO0FBQzFELGNBQUlzOUUsU0FBUyxHQUFHemtFLEVBQUUsQ0FBQzdZLEVBQUQsQ0FBbEI7O0FBQ0EsY0FBSXU5RSxrQkFBa0IsQ0FBQ0wsV0FBRCxFQUFjSSxTQUFkLENBQXRCLEVBQWdEO0FBQzVDSix1QkFBVyxDQUFDQyxLQUFaLENBQWtCNW9GLElBQWxCLENBQXVCK29GLFNBQXZCO0FBQ0FELDRCQUFnQixHQUFHLElBQW5CO0FBQ0g7QUFDSjs7QUFDRCxZQUFJQSxnQkFBSixFQUFzQjtBQUNsQkQsZUFBSyxJQUFJLENBQVQ7QUFDSCxTQUZELE1BR0s7QUFDRDtBQUNIO0FBQ0osT0FyQnFELENBc0J0RDs7O0FBQ0EsT0FBQ0osU0FBUyxDQUFDSSxLQUFELENBQVQsS0FBcUJKLFNBQVMsQ0FBQ0ksS0FBRCxDQUFULEdBQW1CLEVBQXhDLENBQUQsRUFDSzdvRixJQURMLENBQ1Uyb0YsV0FEVixFQXZCc0QsQ0F5QnREOztBQUNBRSxXQUFLLElBQUksQ0FBVDs7QUFDQSxhQUFPQSxLQUFLLEdBQUdKLFNBQVMsQ0FBQzNxRixNQUF6QixFQUFpQztBQUM3QixhQUFLLElBQUk0M0IsRUFBRSxHQUFHLENBQVQsRUFBWW0zQyxFQUFFLEdBQUc0YixTQUFTLENBQUNJLEtBQUQsQ0FBL0IsRUFBd0NuekQsRUFBRSxHQUFHbTNDLEVBQUUsQ0FBQy91RSxNQUFoRCxFQUF3RDQzQixFQUFFLEVBQTFELEVBQThEO0FBQzFELGNBQUl1ekQsUUFBUSxHQUFHcGMsRUFBRSxDQUFDbjNDLEVBQUQsQ0FBakI7O0FBQ0EsY0FBSXN6RCxrQkFBa0IsQ0FBQ0wsV0FBRCxFQUFjTSxRQUFkLENBQXRCLEVBQStDO0FBQzNDQSxvQkFBUSxDQUFDTCxLQUFULENBQWU1b0YsSUFBZixDQUFvQjJvRixXQUFwQjtBQUNIO0FBQ0o7O0FBQ0RFLGFBQUssSUFBSSxDQUFUO0FBQ0g7QUFDSjs7QUFDRCxXQUFPSixTQUFQO0FBQ0gsR0F6Q0Q7O0FBMENBLFNBQU9WLHlCQUFQO0FBQ0gsQ0ExSjhDLENBMEo3Q2ovQixrRUExSjZDLENBQS9DOztBQTJKQSxTQUFTeS9CLG9CQUFULENBQThCNS9ELElBQTlCLEVBQW9DO0FBQ2hDLE1BQUlsbkIsR0FBRyxHQUFHLENBQVY7O0FBQ0EsT0FBSyxJQUFJNFEsRUFBRSxHQUFHLENBQVQsRUFBWTYyRSxNQUFNLEdBQUd2Z0UsSUFBMUIsRUFBZ0N0VyxFQUFFLEdBQUc2MkUsTUFBTSxDQUFDcHJGLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxRQUFJMFcsR0FBRyxHQUFHbWdFLE1BQU0sQ0FBQzcyRSxFQUFELENBQWhCO0FBQ0E1USxPQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBTCxDQUFTQSxHQUFULEVBQWMwbkYsbUJBQW1CLENBQUNwZ0UsR0FBRCxDQUFqQyxDQUFOO0FBQ0g7O0FBQ0QsU0FBT3RuQixHQUFQO0FBQ0g7O0FBQ0QsU0FBUzBuRixtQkFBVCxDQUE2QnBnRSxHQUE3QixFQUFrQztBQUM5QixNQUFLQSxHQUFHLENBQUM3bkIsR0FBSixJQUFXLElBQWhCLEVBQXVCO0FBQ25CNm5CLE9BQUcsQ0FBQzduQixHQUFKLEdBQVVxbkYsb0JBQW9CLENBQUN4L0QsR0FBRyxDQUFDNi9ELEtBQUwsQ0FBOUI7QUFDSDs7QUFDRCxTQUFPNy9ELEdBQUcsQ0FBQzduQixHQUFKLEdBQVU2bkIsR0FBRyxDQUFDNWpCLE1BQXJCO0FBQ0g7O0FBQ0QsU0FBUzZqRixrQkFBVCxDQUE0QkksSUFBNUIsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3BDLFNBQVFELElBQUksQ0FBQ3p4RixJQUFMLEdBQVkweEYsSUFBSSxDQUFDeHhGLEtBQWxCLElBQTZCdXhGLElBQUksQ0FBQ3Z4RixLQUFMLEdBQWF3eEYsSUFBSSxDQUFDMXhGLElBQXREO0FBQ0g7O0FBRUQsSUFBSTJ4Rix3QkFBd0I7QUFBRztBQUFlLFVBQVVoeEQsTUFBVixFQUFrQjtBQUM1RG5qQixXQUFTLENBQUNtMEUsd0JBQUQsRUFBMkJoeEQsTUFBM0IsQ0FBVDs7QUFDQSxXQUFTZ3hELHdCQUFULENBQWtDMzJFLE9BQWxDLEVBQTJDcTFFLGlCQUEzQyxFQUE4RGxXLFFBQTlELEVBQXdFO0FBQ3BFLFFBQUl0OUMsS0FBSyxHQUFHOEQsTUFBTSxDQUFDNTZCLElBQVAsQ0FBWSxJQUFaLEVBQWtCaVYsT0FBbEIsS0FBOEIsSUFBMUM7O0FBQ0E2aEIsU0FBSyxDQUFDd3pELGlCQUFOLEdBQTBCQSxpQkFBMUI7QUFDQXh6RCxTQUFLLENBQUNzOUMsUUFBTixHQUFpQkEsUUFBakI7QUFDQSxXQUFPdDlDLEtBQVA7QUFDSDs7QUFDRDgwRCwwQkFBd0IsQ0FBQzlyRixTQUF6QixDQUFtQzJyRCxVQUFuQyxHQUFnRCxVQUFVL3ZELElBQVYsRUFBZ0J1dkIsSUFBaEIsRUFBc0I7QUFDbEUsUUFBSUEsSUFBSSxDQUFDN3FCLE1BQVQsRUFBaUI7QUFDYixVQUFJMUIsU0FBUyxHQUFHLEtBQUssQ0FBckI7O0FBQ0EsVUFBSWhELElBQUksS0FBSyxlQUFiLEVBQThCO0FBQzFCZ0QsaUJBQVMsR0FBRyxTQUFaO0FBQ0gsT0FGRCxNQUdLO0FBQ0RBLGlCQUFTLEdBQUdoRCxJQUFJLENBQUN5eUQsV0FBTCxFQUFaO0FBQ0gsT0FQWSxDQVFiO0FBQ0E7OztBQUNBLFVBQUl5RixXQUFXLEdBQUc5MEQsd0VBQWEsQ0FBQyxLQUFELEVBQVE7QUFBRUosaUJBQVMsRUFBRSxRQUFRQSxTQUFSLEdBQW9CO0FBQWpDLE9BQVIsQ0FBL0I7QUFDQSxXQUFLNHJGLGlCQUFMLENBQXVCanFGLFdBQXZCLENBQW1DdXpELFdBQW5DOztBQUNBLFdBQUssSUFBSWovQyxFQUFFLEdBQUcsQ0FBVCxFQUFZOFcsTUFBTSxHQUFHUixJQUExQixFQUFnQ3RXLEVBQUUsR0FBRzhXLE1BQU0sQ0FBQ3JyQixNQUE1QyxFQUFvRHVVLEVBQUUsRUFBdEQsRUFBMEQ7QUFDdEQsWUFBSTBXLEdBQUcsR0FBR0ksTUFBTSxDQUFDOVcsRUFBRCxDQUFoQjtBQUNBaS9DLG1CQUFXLENBQUN2ekQsV0FBWixDQUF3QmdyQixHQUFHLENBQUM5dkIsRUFBNUI7QUFDSDs7QUFDRCxhQUFPLENBQUNxNEQsV0FBRCxDQUFQLENBaEJhLENBZ0JTO0FBQ3pCO0FBQ0osR0FuQkQ7O0FBb0JBZzRCLDBCQUF3QixDQUFDOXJGLFNBQXpCLENBQW1DcXRELGVBQW5DLEdBQXFELFVBQVVsaUMsSUFBVixFQUFnQjtBQUNqRSxRQUFJbXBELFFBQVEsR0FBRyxLQUFLQSxRQUFwQjs7QUFDQSxTQUFLLElBQUl6L0QsRUFBRSxHQUFHLENBQVQsRUFBWXlzQixNQUFNLEdBQUduVyxJQUExQixFQUFnQ3RXLEVBQUUsR0FBR3lzQixNQUFNLENBQUNoaEMsTUFBNUMsRUFBb0R1VSxFQUFFLEVBQXRELEVBQTBEO0FBQ3RELFVBQUkwVyxHQUFHLEdBQUcrVixNQUFNLENBQUN6c0IsRUFBRCxDQUFoQjtBQUNBLFVBQUkrMUUsTUFBTSxHQUFHdFcsUUFBUSxDQUFDZ1csYUFBVCxDQUF1Qi8rRCxHQUF2QixDQUFiO0FBQ0FBLFNBQUcsQ0FBQ3B4QixJQUFKLEdBQVd5d0YsTUFBTSxDQUFDendGLElBQWxCO0FBQ0FveEIsU0FBRyxDQUFDbHhCLEtBQUosR0FBWXV3RixNQUFNLENBQUN2d0YsS0FBbkI7QUFDSDtBQUNKLEdBUkQ7O0FBU0F5eEYsMEJBQXdCLENBQUM5ckYsU0FBekIsQ0FBbUN1dEQsY0FBbkMsR0FBb0QsVUFBVXBpQyxJQUFWLEVBQWdCO0FBQ2hFLFNBQUssSUFBSXRXLEVBQUUsR0FBRyxDQUFULEVBQVkwc0IsTUFBTSxHQUFHcFcsSUFBMUIsRUFBZ0N0VyxFQUFFLEdBQUcwc0IsTUFBTSxDQUFDamhDLE1BQTVDLEVBQW9EdVUsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxVQUFJMFcsR0FBRyxHQUFHZ1csTUFBTSxDQUFDMXNCLEVBQUQsQ0FBaEI7QUFDQXhWLDJFQUFVLENBQUNrc0IsR0FBRyxDQUFDOXZCLEVBQUwsRUFBUztBQUNmdEIsWUFBSSxFQUFFb3hCLEdBQUcsQ0FBQ3B4QixJQURLO0FBRWZFLGFBQUssRUFBRSxDQUFDa3hCLEdBQUcsQ0FBQ2x4QjtBQUZHLE9BQVQsQ0FBVjtBQUlIO0FBQ0osR0FSRDs7QUFTQSxTQUFPeXhGLHdCQUFQO0FBQ0gsQ0EvQzZDLENBK0M1Q2orQiwrREEvQzRDLENBQTlDOztBQWlEQSxJQUFJNm1CLFlBQVk7QUFBRztBQUFlLFVBQVU1NUMsTUFBVixFQUFrQjtBQUNoRG5qQixXQUFTLENBQUMrOEQsWUFBRCxFQUFlNTVDLE1BQWYsQ0FBVDs7QUFDQSxXQUFTNDVDLFlBQVQsQ0FBc0J2L0QsT0FBdEIsRUFBK0I0MkUsYUFBL0IsRUFBOENDLGFBQTlDLEVBQTZEMVgsUUFBN0QsRUFBdUU7QUFDbkUsUUFBSXQ5QyxLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JpVixPQUFsQixFQUEyQjYyRSxhQUEzQixFQUEwQztBQUExQyxPQUNSLElBREo7O0FBRUFoMUQsU0FBSyxDQUFDaTFELE1BQU4sR0FBZSxJQUFJQyxrQkFBSixFQUFmO0FBQ0FsMUQsU0FBSyxDQUFDZ3pCLGVBQU4sR0FBd0IzMEIsMkVBQWdCLENBQUMyQixLQUFLLENBQUNtMUQsZ0JBQVAsRUFBeUJuMUQsS0FBSyxDQUFDbzFELGtCQUEvQixDQUF4QztBQUNBcDFELFNBQUssQ0FBQ2t6QixpQkFBTixHQUEwQjcwQiwyRUFBZ0IsQ0FBQzJCLEtBQUssQ0FBQ3ExRCxrQkFBUCxFQUEyQnIxRCxLQUFLLENBQUNzMUQsb0JBQWpDLENBQTFDO0FBQ0EsUUFBSUMsWUFBWSxHQUFHdjFELEtBQUssQ0FBQ3UxRCxZQUFOLEdBQXFCLElBQUlULHdCQUFKLENBQTZCMzJFLE9BQTdCLEVBQXNDNjJFLGFBQXRDLEVBQXFEMVgsUUFBckQsQ0FBeEM7QUFDQSxRQUFJa1ksYUFBYSxHQUFHeDFELEtBQUssQ0FBQ3cxRCxhQUFOLEdBQXNCLElBQUlqQyx5QkFBSixDQUE4QnAxRSxPQUE5QixFQUF1QzQyRSxhQUF2QyxFQUFzRHpYLFFBQXRELENBQTFDO0FBQ0F0OUMsU0FBSyxDQUFDeTFELGNBQU4sR0FBdUIsSUFBSWxDLHlCQUFKLENBQThCcDFFLE9BQTlCLEVBQXVDNDJFLGFBQXZDLEVBQXNEelgsUUFBdEQsQ0FBdkI7QUFDQXQ5QyxTQUFLLENBQUM4d0IsbUJBQU4sR0FBNEJ6eUIsMkVBQWdCLENBQUNrM0QsWUFBWSxDQUFDaGhDLFVBQWIsQ0FBd0JybkIsSUFBeEIsQ0FBNkJxb0QsWUFBN0IsRUFBMkMsZUFBM0MsQ0FBRCxFQUE4REEsWUFBWSxDQUFDMzJELFFBQWIsQ0FBc0JzTyxJQUF0QixDQUEyQnFvRCxZQUEzQixFQUF5QyxlQUF6QyxDQUE5RCxDQUE1QztBQUNBdjFELFNBQUssQ0FBQ3V5QixtQkFBTixHQUE0QmwwQiwyRUFBZ0IsQ0FBQ2szRCxZQUFZLENBQUNoaEMsVUFBYixDQUF3QnJuQixJQUF4QixDQUE2QnFvRCxZQUE3QixFQUEyQyxXQUEzQyxDQUFELEVBQTBEQSxZQUFZLENBQUMzMkQsUUFBYixDQUFzQnNPLElBQXRCLENBQTJCcW9ELFlBQTNCLEVBQXlDLFdBQXpDLENBQTFELENBQTVDO0FBQ0F2MUQsU0FBSyxDQUFDMDFELGNBQU4sR0FBdUJyM0QsMkVBQWdCLENBQUNrM0QsWUFBWSxDQUFDaGhDLFVBQWIsQ0FBd0JybkIsSUFBeEIsQ0FBNkJxb0QsWUFBN0IsRUFBMkMsU0FBM0MsQ0FBRCxFQUF3REEsWUFBWSxDQUFDMzJELFFBQWIsQ0FBc0JzTyxJQUF0QixDQUEyQnFvRCxZQUEzQixFQUF5QyxTQUF6QyxDQUF4RCxDQUF2QztBQUNBdjFELFNBQUssQ0FBQzIxRCxjQUFOLEdBQXVCdDNELDJFQUFnQixDQUFDbTNELGFBQWEsQ0FBQ2poQyxVQUFkLENBQXlCcm5CLElBQXpCLENBQThCc29ELGFBQTlCLENBQUQsRUFBK0NBLGFBQWEsQ0FBQzUyRCxRQUFkLENBQXVCc08sSUFBdkIsQ0FBNEJzb0QsYUFBNUIsQ0FBL0MsQ0FBdkM7QUFDQXgxRCxTQUFLLENBQUM4eUIsb0JBQU4sR0FBNkJ6MEIsMkVBQWdCLENBQUNtM0QsYUFBYSxDQUFDNytCLGtCQUFkLENBQWlDenBCLElBQWpDLENBQXNDc29ELGFBQXRDLENBQUQsRUFBdURBLGFBQWEsQ0FBQzUrQixvQkFBZCxDQUFtQzFwQixJQUFuQyxDQUF3Q3NvRCxhQUF4QyxDQUF2RCxFQUErRyxDQUFDeDFELEtBQUssQ0FBQzIxRCxjQUFQLENBQS9HLENBQTdDO0FBQ0EzMUQsU0FBSyxDQUFDczlDLFFBQU4sR0FBaUJBLFFBQWpCO0FBQ0EsV0FBT3Q5QyxLQUFQO0FBQ0g7O0FBQ0QwOUMsY0FBWSxDQUFDMTBFLFNBQWIsQ0FBdUJwQyxNQUF2QixHQUFnQyxVQUFVc0YsS0FBVixFQUFpQjtBQUM3QyxRQUFJMHBGLFdBQVcsR0FBRyxLQUFLWCxNQUFMLENBQVkxNUIsVUFBWixDQUF1QnJ2RCxLQUF2QixFQUE4QkEsS0FBSyxDQUFDa3FCLFdBQXBDLEVBQWlELEtBQUtrbkQsUUFBTCxDQUFjZ04sWUFBZCxDQUEyQlksV0FBM0IsR0FBeUMsSUFBekMsR0FBZ0RoL0UsS0FBSyxDQUFDcVQsZ0JBQXZHLEVBQXlILElBQXpILEVBQStILEtBQUsrOUQsUUFBcEksQ0FBbEI7QUFDQSxTQUFLeHNCLG1CQUFMLENBQXlCOGtDLFdBQVcsQ0FBQ2o2QixnQkFBckM7QUFDQSxTQUFLcEosbUJBQUwsQ0FBeUJxakMsV0FBVyxDQUFDbDZCLGlCQUFyQztBQUNBLFNBQUtnNkIsY0FBTCxDQUFvQkUsV0FBVyxDQUFDLzVCLFdBQWhDO0FBQ0EsU0FBSzg1QixjQUFMLENBQW9CQyxXQUFXLENBQUNoNkIsV0FBaEM7QUFDQSxTQUFLOUksb0JBQUwsQ0FBMEI4aUMsV0FBVyxDQUFDOTlELGNBQXRDO0FBQ0EsU0FBS2s3QixlQUFMLENBQXFCNGlDLFdBQVcsQ0FBQ24rRCxTQUFqQztBQUNBLFNBQUt5N0IsaUJBQUwsQ0FBdUIwaUMsV0FBVyxDQUFDNzlELFdBQW5DO0FBQ0gsR0FURDs7QUFVQTJsRCxjQUFZLENBQUMxMEUsU0FBYixDQUF1QnkrQixPQUF2QixHQUFpQyxZQUFZO0FBQ3pDM0QsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJ5K0IsT0FBakIsQ0FBeUJ2K0IsSUFBekIsQ0FBOEIsSUFBOUI7O0FBQ0EsU0FBSzRuRCxtQkFBTCxDQUF5Qmx5QixRQUF6QjtBQUNBLFNBQUsyekIsbUJBQUwsQ0FBeUIzekIsUUFBekI7QUFDQSxTQUFLODJELGNBQUwsQ0FBb0I5MkQsUUFBcEI7QUFDQSxTQUFLKzJELGNBQUwsQ0FBb0IvMkQsUUFBcEI7QUFDQSxTQUFLazBCLG9CQUFMLENBQTBCbDBCLFFBQTFCO0FBQ0EsU0FBS28wQixlQUFMLENBQXFCcDBCLFFBQXJCO0FBQ0EsU0FBS3MwQixpQkFBTCxDQUF1QnQwQixRQUF2QjtBQUNILEdBVEQ7O0FBVUE4K0MsY0FBWSxDQUFDMTBFLFNBQWIsQ0FBdUJtc0YsZ0JBQXZCLEdBQTBDLFVBQVUvaUUsS0FBVixFQUFpQjtBQUN2RCxRQUFJQSxLQUFKLEVBQVc7QUFDUCxXQUFLb2pFLGFBQUwsQ0FBbUJoL0IsVUFBbkIsQ0FBOEJwa0MsS0FBSyxDQUFDOHBDLGlCQUFwQztBQUNBLFdBQUt1NUIsY0FBTCxDQUFvQmxoQyxVQUFwQixDQUErQm5pQyxLQUFLLENBQUMrQixJQUFyQyxFQUEyQztBQUFFcWhDLGtCQUFVLEVBQUUsSUFBZDtBQUFvQjJHLGlCQUFTLEVBQUUvcEMsS0FBSyxDQUFDK3BDO0FBQXJDLE9BQTNDO0FBQ0g7QUFDSixHQUxEOztBQU1BdWhCLGNBQVksQ0FBQzEwRSxTQUFiLENBQXVCb3NGLGtCQUF2QixHQUE0QyxVQUFVaGpFLEtBQVYsRUFBaUI7QUFDekQsUUFBSUEsS0FBSixFQUFXO0FBQ1AsV0FBS29qRSxhQUFMLENBQW1COStCLFVBQW5CLENBQThCdGtDLEtBQUssQ0FBQzhwQyxpQkFBcEM7QUFDQSxXQUFLdTVCLGNBQUwsQ0FBb0I3MkQsUUFBcEIsQ0FBNkJ4TSxLQUFLLENBQUMrQixJQUFuQyxFQUF5QztBQUFFcWhDLGtCQUFVLEVBQUUsSUFBZDtBQUFvQjJHLGlCQUFTLEVBQUUvcEMsS0FBSyxDQUFDK3BDO0FBQXJDLE9BQXpDO0FBQ0g7QUFDSixHQUxEOztBQU1BdWhCLGNBQVksQ0FBQzEwRSxTQUFiLENBQXVCcXNGLGtCQUF2QixHQUE0QyxVQUFVampFLEtBQVYsRUFBaUI7QUFDekQsUUFBSUEsS0FBSixFQUFXO0FBQ1A7QUFDQSxVQUFJeWpFLGdCQUFnQixHQUFHempFLEtBQUssQ0FBQytCLElBQU4sQ0FBVy9pQixHQUFYLENBQWUsVUFBVW1qQixHQUFWLEVBQWU7QUFDakQsZUFBT3pULFFBQVEsQ0FBQyxFQUFELEVBQUt5VCxHQUFMLENBQWY7QUFDSCxPQUZzQixDQUF2QjtBQUdBLFdBQUtpaEUsYUFBTCxDQUFtQmgvQixVQUFuQixDQUE4QnBrQyxLQUFLLENBQUM4cEMsaUJBQXBDO0FBQ0EsV0FBS3E1QixZQUFMLENBQWtCaGhDLFVBQWxCLENBQTZCLFdBQTdCLEVBQTBDc2hDLGdCQUExQztBQUNBLFdBQUtKLGNBQUwsQ0FBb0JsaEMsVUFBcEIsQ0FBK0JuaUMsS0FBSyxDQUFDK0IsSUFBckMsRUFBMkM7QUFBRXFoQyxrQkFBVSxFQUFFLElBQWQ7QUFBb0IyRyxpQkFBUyxFQUFFL3BDLEtBQUssQ0FBQytwQztBQUFyQyxPQUEzQztBQUNIO0FBQ0osR0FWRDs7QUFXQXVoQixjQUFZLENBQUMxMEUsU0FBYixDQUF1QnNzRixvQkFBdkIsR0FBOEMsVUFBVWxqRSxLQUFWLEVBQWlCO0FBQzNELFFBQUlBLEtBQUosRUFBVztBQUNQLFdBQUtvakUsYUFBTCxDQUFtQjkrQixVQUFuQixDQUE4QnRrQyxLQUFLLENBQUM4cEMsaUJBQXBDO0FBQ0EsV0FBS3E1QixZQUFMLENBQWtCMzJELFFBQWxCLENBQTJCLFdBQTNCO0FBQ0EsV0FBSzYyRCxjQUFMLENBQW9CNzJELFFBQXBCLENBQTZCeE0sS0FBSyxDQUFDK0IsSUFBbkMsRUFBeUM7QUFBRXFoQyxrQkFBVSxFQUFFLElBQWQ7QUFBb0IyRyxpQkFBUyxFQUFFL3BDLEtBQUssQ0FBQytwQztBQUFyQyxPQUF6QztBQUNIO0FBQ0osR0FORDs7QUFPQXVoQixjQUFZLENBQUMxMEUsU0FBYixDQUF1Qis3QyxVQUF2QixHQUFvQyxVQUFVZ0IsUUFBVixFQUFvQjtBQUNwRCxRQUFJOXVDLEVBQUUsR0FBRyxJQUFUO0FBQUEsUUFBZXMrRSxZQUFZLEdBQUd0K0UsRUFBRSxDQUFDcytFLFlBQWpDO0FBQUEsUUFBK0NDLGFBQWEsR0FBR3YrRSxFQUFFLENBQUN1K0UsYUFBbEU7QUFBQSxRQUFpRkMsY0FBYyxHQUFHeCtFLEVBQUUsQ0FBQ3crRSxjQUFyRzs7QUFDQUYsZ0JBQVksQ0FBQ3AvQixZQUFiLENBQTBCcFEsUUFBMUI7QUFDQXl2QyxpQkFBYSxDQUFDci9CLFlBQWQsQ0FBMkJwUSxRQUEzQjtBQUNBMHZDLGtCQUFjLENBQUN0L0IsWUFBZixDQUE0QnBRLFFBQTVCO0FBQ0F3dkMsZ0JBQVksQ0FBQ2ovQixXQUFiLENBQXlCdlEsUUFBekI7QUFDQXl2QyxpQkFBYSxDQUFDbC9CLFdBQWQsQ0FBMEJ2USxRQUExQjtBQUNBMHZDLGtCQUFjLENBQUNuL0IsV0FBZixDQUEyQnZRLFFBQTNCO0FBQ0gsR0FSRDs7QUFTQSxTQUFPMjNCLFlBQVA7QUFDSCxDQS9FaUMsQ0ErRWhDbjBDLGdFQS9FZ0MsQ0FBbEM7O0FBZ0ZBLElBQUkyckQsa0JBQWtCO0FBQUc7QUFBZSxVQUFVcHhELE1BQVYsRUFBa0I7QUFDdERuakIsV0FBUyxDQUFDdTBFLGtCQUFELEVBQXFCcHhELE1BQXJCLENBQVQ7O0FBQ0EsV0FBU294RCxrQkFBVCxHQUE4QjtBQUMxQixXQUFPcHhELE1BQU0sS0FBSyxJQUFYLElBQW1CQSxNQUFNLENBQUNudEIsS0FBUCxDQUFhLElBQWIsRUFBbUJtSCxTQUFuQixDQUFuQixJQUFvRCxJQUEzRDtBQUNIOztBQUNEbzNFLG9CQUFrQixDQUFDbHNGLFNBQW5CLENBQTZCb3dELFVBQTdCLEdBQTBDLFVBQVU5bEMsU0FBVixFQUFxQmdxRCxRQUFyQixFQUErQjtBQUNyRSxRQUFJZ04sWUFBWSxHQUFHaE4sUUFBUSxDQUFDZ04sWUFBNUI7QUFDQSxRQUFJbDBELFdBQVcsR0FBR2tuRCxRQUFRLENBQUNweEUsS0FBVCxDQUFla3FCLFdBQWpDO0FBQ0EsUUFBSTdDLFdBQVcsR0FBRzQ2RCxjQUFjLENBQUM3NkQsU0FBRCxFQUFZZzNELFlBQVosRUFBMEJoTixRQUFRLENBQUNyOUQsT0FBbkMsQ0FBaEM7QUFDQSxRQUFJa1UsSUFBSSxHQUFHLEVBQVgsQ0FKcUUsQ0FLckU7O0FBQ0EsUUFBSW1wRCxRQUFRLENBQUMyVix1QkFBVCxDQUFpQzEvRCxXQUFXLENBQUN6dEIsS0FBN0MsSUFBc0R3M0UsUUFBUSxDQUFDMlYsdUJBQVQsQ0FBaUMxL0QsV0FBVyxDQUFDeHRCLEdBQTdDLENBQTFELEVBQTZHO0FBQ3pHO0FBQ0EsVUFBSXl0QixXQUFXLEdBQUd2TSwwRUFBZSxDQUFDc00sV0FBRCxFQUFjKzJELFlBQVksQ0FBQ3dCLGVBQTNCLENBQWpDOztBQUNBLFVBQUl0NEQsV0FBSixFQUFpQjtBQUNiVyxZQUFJLENBQUMzb0IsSUFBTCxDQUFVO0FBQ04xRixlQUFLLEVBQUUwdEIsV0FBVyxDQUFDMXRCLEtBRGI7QUFFTkMsYUFBRyxFQUFFeXRCLFdBQVcsQ0FBQ3p0QixHQUZYO0FBR04wdEIsaUJBQU8sRUFBRUQsV0FBVyxDQUFDMXRCLEtBQVosQ0FBa0J5TixPQUFsQixPQUFnQ2dnQixXQUFXLENBQUN6dEIsS0FBWixDQUFrQnlOLE9BQWxCLEVBQWhDLElBQStEcUQsV0FBVyxDQUFDNGMsV0FBVyxDQUFDMXRCLEtBQWIsRUFBb0J3a0YsWUFBcEIsRUFBa0NsMEQsV0FBbEMsRUFBK0NrbkQsUUFBUSxDQUFDcHBELElBQXhELENBSDdFO0FBSU5SLGVBQUssRUFBRUYsV0FBVyxDQUFDenRCLEdBQVosQ0FBZ0J3TixPQUFoQixPQUE4QmdnQixXQUFXLENBQUN4dEIsR0FBWixDQUFnQndOLE9BQWhCLEVBQTlCLElBQTJEcUQsV0FBVyxDQUFDMUQsZ0VBQUssQ0FBQ3NnQixXQUFXLENBQUN6dEIsR0FBYixFQUFrQixDQUFDLENBQW5CLENBQU4sRUFBNkJ1a0YsWUFBN0IsRUFBMkNsMEQsV0FBM0MsRUFBd0RrbkQsUUFBUSxDQUFDcHBELElBQWpFO0FBSnZFLFNBQVY7QUFNSDtBQUNKOztBQUNELFdBQU9DLElBQVA7QUFDSCxHQW5CRDs7QUFvQkEsU0FBTytnRSxrQkFBUDtBQUNILENBMUJ1QyxDQTBCdENwNkIseURBMUJzQyxDQUF4Qzs7QUE0QkEsSUFBSWc3QixZQUFZO0FBQUc7QUFBZSxVQUFVaHlELE1BQVYsRUFBa0I7QUFDaERuakIsV0FBUyxDQUFDbTFFLFlBQUQsRUFBZWh5RCxNQUFmLENBQVQ7O0FBQ0EsV0FBU2d5RCxZQUFULENBQXNCMzNFLE9BQXRCLEVBQStCMDdCLFFBQS9CLEVBQXlDZ0wsb0JBQXpDLEVBQStEMkIsUUFBL0QsRUFBeUU7QUFDckUsUUFBSXhtQixLQUFLLEdBQUc4RCxNQUFNLENBQUM1NkIsSUFBUCxDQUFZLElBQVosRUFBa0JpVixPQUFsQixFQUEyQjA3QixRQUEzQixFQUFxQ2dMLG9CQUFyQyxFQUEyRDJCLFFBQTNELEtBQXdFLElBQXBGOztBQUNBeG1CLFNBQUssQ0FBQ3Y3QixFQUFOLENBQVNzSCxTQUFULENBQW1CQyxHQUFuQixDQUF1QixhQUF2Qjs7QUFDQSxRQUFJZzBCLEtBQUssQ0FBQ3JhLEdBQU4sQ0FBVSxjQUFWLE1BQThCLEtBQWxDLEVBQXlDO0FBQ3JDcWEsV0FBSyxDQUFDdjdCLEVBQU4sQ0FBU3NILFNBQVQsQ0FBbUJDLEdBQW5CLENBQXVCLGVBQXZCO0FBQ0g7O0FBQ0RnMEIsU0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzhELFNBQVQsR0FBcUJ5M0IsS0FBSyxDQUFDMmhELGtCQUFOLEVBQXJCO0FBQ0EzaEQsU0FBSyxDQUFDczlDLFFBQU4sR0FBaUIsSUFBSTJFLFFBQUosQ0FBYWppRCxLQUFLLENBQUM3aEIsT0FBbkIsRUFBNEI2aEIsS0FBSyxDQUFDdjdCLEVBQU4sQ0FBUzRpRCxhQUFULENBQXVCLHFCQUF2QixDQUE1QixFQUEyRXJuQixLQUFLLENBQUN2N0IsRUFBTixDQUFTNGlELGFBQVQsQ0FBdUIscUJBQXZCLENBQTNFLENBQWpCO0FBQ0FybkIsU0FBSyxDQUFDeTlDLElBQU4sR0FBYSxJQUFJQyxZQUFKLENBQWlCMTlDLEtBQUssQ0FBQzdoQixPQUF2QixFQUFnQzZoQixLQUFLLENBQUNzOUMsUUFBTixDQUFlbDdCLE1BQWYsQ0FBc0JpOUIsWUFBdEIsQ0FBbUNGLGNBQW5DLENBQWtERyxNQUFsRCxDQUF5RGo3QixTQUF6RixFQUFvR3JrQixLQUFLLENBQUNzOUMsUUFBTixDQUFlbDdCLE1BQWYsQ0FBc0JpOUIsWUFBdEIsQ0FBbUNGLGNBQW5DLENBQWtERyxNQUFsRCxDQUF5RDhDLElBQTdKLEVBQW1LcGlELEtBQUssQ0FBQ3M5QyxRQUF6SyxDQUFiO0FBQ0FuL0QsV0FBTyxDQUFDNWIsUUFBUixDQUFpQmdzRCw0QkFBakIsQ0FBOEN2dUIsS0FBOUMsRUFBcUQ7QUFDakR2N0IsUUFBRSxFQUFFdTdCLEtBQUssQ0FBQ3M5QyxRQUFOLENBQWVtRixLQUFmLENBQXFCaCtFO0FBRHdCLEtBQXJEO0FBR0EsV0FBT3U3QixLQUFQO0FBQ0g7O0FBQ0Q4MUQsY0FBWSxDQUFDOXNGLFNBQWIsQ0FBdUJ5K0IsT0FBdkIsR0FBaUMsWUFBWTtBQUN6QyxTQUFLNjFDLFFBQUwsQ0FBYzcxQyxPQUFkO0FBQ0EsU0FBS2cyQyxJQUFMLENBQVVoMkMsT0FBVjs7QUFDQTNELFVBQU0sQ0FBQzk2QixTQUFQLENBQWlCeStCLE9BQWpCLENBQXlCditCLElBQXpCLENBQThCLElBQTlCOztBQUNBLFNBQUszRyxRQUFMLENBQWNzc0QsOEJBQWQsQ0FBNkMsSUFBN0M7QUFDSCxHQUxEOztBQU1BaW5DLGNBQVksQ0FBQzlzRixTQUFiLENBQXVCMjRFLGtCQUF2QixHQUE0QyxZQUFZO0FBQ3BELFFBQUlsL0MsS0FBSyxHQUFHLEtBQUtBLEtBQWpCO0FBQ0EsV0FBTyxvQkFBb0JBLEtBQUssQ0FBQ00sUUFBTixDQUFlLFdBQWYsQ0FBcEIsR0FBa0QsOERBQWxELEdBQW1ITixLQUFLLENBQUNNLFFBQU4sQ0FBZSxjQUFmLENBQW5ILEdBQW9KLGtGQUFwSixHQUF5T04sS0FBSyxDQUFDTSxRQUFOLENBQWUsZUFBZixDQUF6TyxHQUEyUSxrQ0FBbFI7QUFDSCxHQUhEOztBQUlBK3lELGNBQVksQ0FBQzlzRixTQUFiLENBQXVCcEMsTUFBdkIsR0FBZ0MsVUFBVXNGLEtBQVYsRUFBaUI7QUFDN0M0M0IsVUFBTSxDQUFDOTZCLFNBQVAsQ0FBaUJwQyxNQUFqQixDQUF3QnNDLElBQXhCLENBQTZCLElBQTdCLEVBQW1DZ0QsS0FBbkMsRUFENkMsQ0FDRjs7O0FBQzNDLFNBQUtveEUsUUFBTCxDQUFjcDBDLFlBQWQsQ0FBMkI7QUFDdkI5UyxpQkFBVyxFQUFFbHFCLEtBQUssQ0FBQ2txQjtBQURJLEtBQTNCO0FBR0EsU0FBS3FuRCxJQUFMLENBQVV2MEMsWUFBVixDQUF1QnBvQixRQUFRLENBQUMsRUFBRCxFQUFLNVUsS0FBTCxFQUFZO0FBQUVxVCxzQkFBZ0IsRUFBRSxLQUFLQTtBQUF6QixLQUFaLENBQS9CO0FBQ0gsR0FORDs7QUFPQXUyRSxjQUFZLENBQUM5c0YsU0FBYixDQUF1Qis3QyxVQUF2QixHQUFvQyxVQUFVZ0IsUUFBVixFQUFvQis1QixXQUFwQixFQUFpQzd0QixNQUFqQyxFQUF5QztBQUN6RSxTQUFLcXJCLFFBQUwsQ0FBY3Y0QixVQUFkLENBQXlCZ0IsUUFBekIsRUFBbUMrNUIsV0FBbkMsRUFBZ0Q3dEIsTUFBaEQ7QUFDQSxTQUFLd3JCLElBQUwsQ0FBVTE0QixVQUFWLENBQXFCZ0IsUUFBckI7QUFDSCxHQUhELENBakNnRCxDQXFDaEQ7QUFDQTs7O0FBQ0ErdkMsY0FBWSxDQUFDOXNGLFNBQWIsQ0FBdUJzcUQsbUJBQXZCLEdBQTZDLFVBQVVsOUIsV0FBVixFQUF1QjtBQUNoRSxXQUFPLEtBQUtrbkQsUUFBTCxDQUFjaHFCLG1CQUFkLENBQWtDbDlCLFdBQWxDLENBQVA7QUFDSCxHQUZEOztBQUdBMC9ELGNBQVksQ0FBQzlzRixTQUFiLENBQXVCNnFELGtCQUF2QixHQUE0QyxVQUFVbHRELElBQVYsRUFBZ0I7QUFDeEQsU0FBSzIyRSxRQUFMLENBQWN6cEIsa0JBQWQsQ0FBaUNsdEQsSUFBakM7QUFDSCxHQUZEOztBQUdBbXZGLGNBQVksQ0FBQzlzRixTQUFiLENBQXVCNHFELG9CQUF2QixHQUE4QyxZQUFZO0FBQ3RELFNBQUswcEIsUUFBTCxDQUFjMXBCLG9CQUFkO0FBQ0gsR0FGRCxDQTdDZ0QsQ0FnRGhEO0FBQ0E7OztBQUNBa2lDLGNBQVksQ0FBQzlzRixTQUFiLENBQXVCb3JELGlCQUF2QixHQUEyQyxVQUFVenlDLFFBQVYsRUFBb0I7QUFDM0QsV0FBTyxLQUFLMjdELFFBQUwsQ0FBY2xwQixpQkFBZCxDQUFnQ3p5QyxRQUFoQyxDQUFQO0FBQ0gsR0FGRDs7QUFHQW0wRSxjQUFZLENBQUM5c0YsU0FBYixDQUF1QnFqRCxXQUF2QixHQUFxQyxVQUFVamxCLE1BQVYsRUFBa0IyZSxRQUFsQixFQUE0QjtBQUM3RGppQixVQUFNLENBQUM5NkIsU0FBUCxDQUFpQnFqRCxXQUFqQixDQUE2Qm5qRCxJQUE3QixDQUFrQyxJQUFsQyxFQUF3Q2srQixNQUF4QyxFQUFnRDJlLFFBQWhELEVBRDZELENBQ0Y7QUFDM0Q7QUFDQTs7O0FBQ0EsUUFBSXhqRCxRQUFRLEdBQUcsS0FBS0EsUUFBcEI7O0FBQ0EsUUFBSXdqRCxRQUFRLElBQUl4akQsUUFBUSxDQUFDdW5ELGFBQXJCLElBQXNDdm5ELFFBQVEsQ0FBQ3duRCxjQUEvQyxJQUFpRXhuRCxRQUFRLENBQUN5bkQsZUFBOUUsRUFBK0Y7QUFDM0YsV0FBS3N6QixRQUFMLENBQWNpSSxxQkFBZDtBQUNIO0FBQ0osR0FSRDs7QUFTQXVRLGNBQVksQ0FBQzlzRixTQUFiLENBQXVCcXJELGVBQXZCLEdBQXlDLFVBQVVqdEIsTUFBVixFQUFrQjtBQUN2RCxTQUFLazJDLFFBQUwsQ0FBY2pwQixlQUFkLENBQThCanRCLE1BQTlCO0FBQ0gsR0FGRDs7QUFHQTB1RCxjQUFZLENBQUM5c0YsU0FBYixDQUF1Qnk4QyxXQUF2QixHQUFxQyxZQUFZO0FBQzdDLFFBQUkwNUIsY0FBYyxHQUFHLEtBQUs3QixRQUFMLENBQWNsN0IsTUFBZCxDQUFxQmk5QixZQUFyQixDQUFrQ0YsY0FBdkQ7QUFDQSxXQUFPO0FBQ0h6eUUsU0FBRyxFQUFFeXlFLGNBQWMsQ0FBQzU0QyxZQUFmLEVBREY7QUFFSHBqQyxVQUFJLEVBQUVnOEUsY0FBYyxDQUFDejRDLGFBQWY7QUFGSCxLQUFQO0FBSUgsR0FORCxDQWpFZ0QsQ0F3RWhEO0FBQ0E7OztBQUNBb3ZELGNBQVksQ0FBQzlzRixTQUFiLENBQXVCd2dDLG1CQUF2QixHQUE2QyxZQUFZO0FBQ3JELFNBQUs4ekMsUUFBTCxDQUFjbUYsS0FBZCxDQUFvQjE5QixVQUFwQjtBQUNILEdBRkQ7O0FBR0Erd0MsY0FBWSxDQUFDOXNGLFNBQWIsQ0FBdUJ5Z0MsUUFBdkIsR0FBa0MsVUFBVUMsWUFBVixFQUF3QkMsV0FBeEIsRUFBcUNDLE9BQXJDLEVBQThDQyxRQUE5QyxFQUF3RDtBQUN0RixRQUFJaThDLE9BQU8sR0FBRyxLQUFLeEksUUFBTCxDQUFjbUYsS0FBZCxDQUFvQnNELGFBQXBCLENBQWtDcjhDLFlBQWxDLENBQWQ7O0FBQ0EsUUFBSW84QyxPQUFKLEVBQWE7QUFDVCxhQUFPO0FBQ0gvakQsaUJBQVMsRUFBRSxJQURSO0FBRUhuQixnQkFBUSxFQUFFa2xELE9BQU8sQ0FBQ2xsRCxRQUZmO0FBR0huMEIsWUFBSSxFQUFFO0FBQ0Z0SixjQUFJLEVBQUUyaUYsT0FBTyxDQUFDM2lGLElBRFo7QUFFRkUsZUFBSyxFQUFFeWlGLE9BQU8sQ0FBQ3ppRixLQUZiO0FBR0ZxSixhQUFHLEVBQUUsQ0FISDtBQUlGQyxnQkFBTSxFQUFFazlCO0FBSk4sU0FISDtBQVNIMGxCLGFBQUssRUFBRXUyQixPQUFPLENBQUN2MkIsS0FUWjtBQVVIc1ksYUFBSyxFQUFFO0FBVkosT0FBUDtBQVlIO0FBQ0osR0FoQkQ7O0FBaUJBLFNBQU9pdUIsWUFBUDtBQUNILENBL0ZpQyxDQStGaENybEMsdURBL0ZnQyxDQUFsQzs7QUFpR0EsSUFBSXNjLElBQUksR0FBRy9oQyx1RUFBWSxDQUFDO0FBQ3BCdm5DLGFBQVcsRUFBRSxhQURPO0FBRXBCK25DLE9BQUssRUFBRTtBQUNIdXFELFlBQVEsRUFBRTtBQUNOdDZDLFdBQUssRUFBRXE2QyxZQUREO0FBRU5wUCw2QkFBdUIsRUFBRSxJQUZuQixDQUV3Qjs7QUFGeEIsS0FEUDtBQUtIc1AsZUFBVyxFQUFFO0FBQ1RweEYsVUFBSSxFQUFFLFVBREc7QUFFVCtjLGNBQVEsRUFBRTtBQUFFMU4sWUFBSSxFQUFFO0FBQVI7QUFGRCxLQUxWO0FBU0hnaUYsZ0JBQVksRUFBRTtBQUNWcnhGLFVBQUksRUFBRSxVQURJO0FBRVYrYyxjQUFRLEVBQUU7QUFBRXhKLGFBQUssRUFBRTtBQUFUO0FBRkEsS0FUWDtBQWFIKzlFLGlCQUFhLEVBQUU7QUFDWHR4RixVQUFJLEVBQUUsVUFESztBQUVYK2MsY0FBUSxFQUFFO0FBQUUzTixjQUFNLEVBQUU7QUFBVjtBQUZDLEtBYlo7QUFpQkhtaUYsZ0JBQVksRUFBRTtBQUNWdnhGLFVBQUksRUFBRSxVQURJO0FBRVYrYyxjQUFRLEVBQUU7QUFBRTVOLGFBQUssRUFBRTtBQUFUO0FBRkE7QUFqQlg7QUFGYSxDQUFELENBQXZCO0FBMEJlZzVELG1FQUFmOzs7Ozs7Ozs7Ozs7QUM3N0RBLHdCIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vZGV2ZWxvcG1lbnQvYWRtaW4vanMvc2NyaXB0LmpzXCIpO1xuIiwiY2xhc3MgUm9vbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsQnRuID0gJCgnLmpvZWVlLWJvb2tpbmctcm9vbS1jYW5jZWwtYnRuJyk7XG4gICAgICAgIHRoaXMucm9vbUZvcm0gPSAkKCcjam9lZWUtcm9vbWJvb2tpbmctcm9vbS1mb3JtJyk7XG4gICAgICAgIHRoaXMucm9vbUJnTW9kYWwgPSAkKCcuam9lZWUtYm9va2luZy1yb29tLWJnLW1vZGFsJyk7XG4gICAgfVxuXG4gICAgY2FuY2VsKCkge1xuICAgIFx0dGhpcy5jYW5jZWxCdG4uY2xpY2soZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnJvb21Gb3JtLnRyaWdnZXIoJ3Jlc2V0Jyk7XG4gICAgICAgICAgICB0aGlzLnJvb21CZ01vZGFsLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG5cblxuICAgICAgICB9KTtcbiAgICB9XG59IiwiLy8gQFRPRE8gVGhpcyBpcyBhbiBleGFtcGxlIGNvbnNvbGUubG9nKCkuIFJlbW92ZSBmb3IgcHJvZHVjdGlvblxuY29uc29sZS5sb2coJ3Rlc3RhZG1pbi5qcycpOyIsIlx0LyoqXG5cdCAqIEFsbCBvZiB0aGUgY29kZSBmb3IgeW91ciBhZG1pbi1mYWNpbmcgSmF2YVNjcmlwdCBzb3VyY2Vcblx0ICogc2hvdWxkIHJlc2lkZSBpbiB0aGUgZmlsZSBcImRldmVsb3BtZW50L2FkbWluL2pzL3NjcmlwdC5qc1wiLlxuXHQgKlxuXHQgKiBOb3RlOiBJdCBoYXMgYmVlbiBhc3N1bWVkIHlvdSB3aWxsIHdyaXRlIGpRdWVyeSBjb2RlIGhlcmUsIHNvIHRoZVxuXHQgKiAkIGZ1bmN0aW9uIHJlZmVyZW5jZSBoYXMgYmVlbiBwcmVwYXJlZCAoaW1wb3J0ICQgZnJvbSAnanF1ZXJ5Jylmb3IgdXNhZ2Ugd2l0aGluIHRoZSBzY29wZVxuXHQgKiBvZiB0aGlzIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBUaGlzIGVuYWJsZXMgeW91IHRvIGRlZmluZSBoYW5kbGVycywgZm9yIHdoZW4gdGhlIERPTSBpcyByZWFkeTpcblx0ICpcblx0ICogJChmdW5jdGlvbigpIHtcblx0ICpcblx0ICogfSk7XG5cdCAqXG5cdCAqIFdoZW4gdGhlIHdpbmRvdyBpcyBsb2FkZWQ6XG5cdCAqXG5cdCAqICQoIHdpbmRvdyApLmxvYWQoZnVuY3Rpb24oKSB7XG5cdCAqXG5cdCAqIH0pO1xuXHQgKlxuXHQgKiAuLi5hbmQvb3Igb3RoZXIgcG9zc2liaWxpdGllcy5cblx0ICpcblx0ICogSWRlYWxseSwgaXQgaXMgbm90IGNvbnNpZGVyZWQgYmVzdCBwcmFjdGlzZSB0byBhdHRhY2ggbW9yZSB0aGFuIGFcblx0ICogc2luZ2xlIERPTS1yZWFkeSBvciB3aW5kb3ctbG9hZCBoYW5kbGVyIGZvciBhIHBhcnRpY3VsYXIgcGFnZS5cblx0ICogQWx0aG91Z2ggc2NyaXB0cyBpbiB0aGUgV29yZFByZXNzIGNvcmUsIFBsdWdpbnMgYW5kIFRoZW1lcyBtYXkgYmVcblx0ICogcHJhY3Rpc2luZyB0aGlzLCB3ZSBzaG91bGQgc3RyaXZlIHRvIHNldCBhIGJldHRlciBleGFtcGxlIGluIG91ciBvd24gd29yay5cblx0ICpcblx0ICogVGhlIGZpbGUgaXMgZW5xdWV1ZWQgZnJvbSBzcmMvYWRtaW4vY2xhc3MtYXNzZXRzLnBocC5cblx0ICovXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuLy8gQFRPRE8gVGhpcyBpcyBhbiBleGFtcGxlIGltcG9ydC4gUmVtb3ZlIGZvciBwcm9kdWN0aW9uXG5pbXBvcnQgJy4vY29tcG9uZW50cy90ZXN0JztcbmltcG9ydCB7IENhbGVuZGFyIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcbmltcG9ydCByZXNvdXJjZVRpbWVsaW5lUGx1Z2luIGZyb20gJ0BmdWxsY2FsZW5kYXIvcmVzb3VyY2UtdGltZWxpbmUnO1xuaW1wb3J0IGNhbGVuZGFySW50ZXJhY3Rpb24gZnJvbSAnQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbic7XG5pbXBvcnQgUm9vbSBmcm9tICcuL2NvbXBvbmVudHMvUm9vbSc7XG4vLyBDb25zdGFudHMgZm9yIGludGVybmF0aW9uYWxpemF0aW9uIHB1cnBvc2VzXG5jb25zdCB7IF9fLCBfeCwgX24sIF9ueCB9ID0gd3AuaTE4bjtcblxuXG5cbmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdGNvbnN0IFJPT01GT1JNID0gJCgnI2pvZWVlLXJvb21ib29raW5nLXJvb20tZm9ybScpO1xuXHRjb25zdCBST09NSUQgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLWlkJyk7XG5cdGNvbnN0IFJPT01OVU1CRVIgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLXJvb21udW1iZXInKTtcblx0Y29uc3QgRkxPT1JOVU1CRVIgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLWZsb29ybnVtYmVyJyk7XG5cdGNvbnN0IFJPT01BRFVMVFMgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLWFkdWx0cycpO1xuXHRjb25zdCBST09NS0lEUyA9ICQoJyNqb2VlZS1ib29raW5nLXJvb20ta2lkcycpO1xuXHRjb25zdCBST09NUFJJQ0UgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLXByaWNlJyk7XG5cdGNvbnN0IFJPT01ERVNDID0gJCgnI2pvZWVlLWJvb2tpbmctcm9vbS1kZXNjJyk7XG5cdGNvbnN0IFJPT01BQ1RJVkUgPSAkKCcjam9lZWUtYm9va2luZy1yb29tLWFjdGl2ZScpO1xuXHRjb25zdCBST09NU1VCTUlUQlROID0gJCgnI2pvZWVlLWJvb2tpbmctcm9vbS1zdWJtaXQnKTtcblx0Y29uc3QgUk9PTVNVQk1JVE1PRElGWSA9ICQoJyNqb2VlZS1ib29raW5nLXJvb20tZm9ybS1zdWJtaXQtbW9kaWZ5Jyk7XG5cdGNvbnN0IFJPT01ERUxFVEVCVE4gPSAkKCcuam9lZWUtYm9va2luZy1yb29tLWRlbGV0ZS1idG4nKTtcblx0Y29uc3QgUk9PTUNBTkNFTEJUTiA9ICQoJy5qb2VlZS1ib29raW5nLXJvb20tY2FuY2VsLWJ0bicpO1xuXG5cdGNvbnN0IFJFU0NBTkNFTEJUTiA9ICQoJy5qb2VlZS1ib29raW5nLXJlc2VydmF0aW9uLWNhbmNlbC1idG4nKTtcblx0Y29uc3QgUkVTQkdNT0RBTCA9ICQoXCIuam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1iZy1tb2RhbFwiKTtcblx0Y29uc3QgUkVTUk9PTUlEID0gJCgnI2pvZWVlLWJvb2tpbmctcmVzZXJ2YXRpb24tcm9vbWlkJyk7XG5cdGNvbnN0IFJFU0FSUklWQUwgPSAkKFwiI2pvZWVlLWJvb2tpbmctcmVzZXJ2YXRpb24tYXJyaXZhbFwiKTtcblx0Y29uc3QgUkVTREVQQVJUVVJFID0gJChcIiNqb2VlZS1ib29raW5nLXJlc2VydmF0aW9uLWRlcGFydHVyZVwiKTtcblx0Y29uc3QgUkVTUEVSU09OUyA9ICQoJyNqb2VlZS1ib29raW5nLXJlc2VydmF0aW9uLXBlcnNvbnMnKTtcblx0Y29uc3QgUkVTRU1BSUwgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1lbWFpbCcpO1xuXHRjb25zdCBSRVNGSVJTVE5BTUUgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1maXJzdG5hbWUnKTtcblx0Y29uc3QgUkVTTEFTVE5BTUUgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1sYXN0bmFtZScpO1xuXHRjb25zdCBSRVNOQVRJT05BTElUWSA9ICQoJyNqb2VlZS1ib29raW5nLW5hdGlvbmFsaXR5LXNlbGVjdCcpO1xuXHRjb25zdCBSRVNHRU5ERVIgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1nZW5kZXInKTtcblx0Y29uc3QgUkVTQklSVEhEQVkgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1iaXJ0aGRheScpO1xuXHRjb25zdCBSRVNTVFJFRVQgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1zdHJlZXQnKTtcblx0Y29uc3QgUkVTWklQID0gJCgnI2pvZWVlLWJvb2tpbmctcmVzZXJ2YXRpb24temlwJyk7XG5cdGNvbnN0IFJFU0NJVFkgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1jaXR5Jyk7XG5cdGNvbnN0IFJFU0NPVU5UUlkgPSAkKCcjam9lZWUtYm9va2luZy1jb3VudHJ5LXNlbGVjdCcpO1xuXHRjb25zdCBSRVNTVUJNSVQgPSAkKCcjam9lZWUtYm9va2luZy1yZXNlcnZhdGlvbi1zdWJtaXQnKTtcblxuXHRcblx0XG5cblxuXG5cblx0ZnVuY3Rpb24gY2FuY2VsKGV2LCBjb21lc2Zyb20pIHtcblx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGlmKCBjb21lc2Zyb20gPT09IFwicm9vbVwiICkge1xuXHRcdFx0JCgnI2pvZWVlLXJvb21ib29raW5nLXJvb20tZm9ybScpLnRyaWdnZXIoJ3Jlc2V0Jyk7XG5cdFx0XHQkKCcuam9lZWUtYm9va2luZy1yb29tLWJnLW1vZGFsJykuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG5cdFx0fVxuXHRcdGlmKCBjb21lc2Zyb20gPT09IFwicmVzZXJ2YXRpb25cIiApIHtcblx0XHRcdCQoJyNqb2VlZS1ib29raW5nLXJlc2VydmF0aW9uLWZvcm0nKS50cmlnZ2VyKCdyZXNldCcpO1xuXHRcdFx0JCgnLmpvZWVlLWJvb2tpbmctcmVzZXJ2YXRpb24tYmctbW9kYWwnKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcblx0XHR9XG5cdFx0bG9jYXRpb24ucmVsb2FkKCk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIGVtYWlsSXNWYWxpZCAoZW1haWwpIHtcblx0XHRyZXR1cm4gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC8udGVzdChlbWFpbCk7XG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja1Jlc2VydmF0aW9uRm9ybUlucHV0cyAoIGNvbWVzZnJvbSApIHtcblx0XHRsZXQgZm9ybW91dCA9IHt9O1xuXG5cdFx0bGV0IGFycml2YWwgPSBSRVNBUlJJVkFMLnZhbCgpO1xuXHRcdGxldCBkZXBhcnR1cmUgPSBSRVNERVBBUlRVUkUudmFsKCk7XG5cdFx0bGV0IHBlcnNvbnMgPSBSRVNQRVJTT05TLnZhbCgpO1xuXHRcdGxldCBlbWFpbCA9IFJFU0VNQUlMLnZhbCgpO1xuXHRcdGxldCBmaXJzdE5hbWUgPSBSRVNGSVJTVE5BTUUudmFsKCkudHJpbSgpO1xuXHRcdGxldCBsYXN0TmFtZSA9IFJFU0xBU1ROQU1FLnZhbCgpLnRyaW0oKTtcblx0XHRsZXQgbmF0aW9uYWxpdHkgPSBSRVNOQVRJT05BTElUWS52YWwoKTtcblx0XHRsZXQgZ2VuZGVyID0gUkVTR0VOREVSLnZhbCgpO1xuXHRcdGxldCBiaXJ0aGRheSA9IFJFU0JJUlRIREFZLnZhbCgpO1xuXHRcdGxldCBzdHJlZXQgPSBSRVNTVFJFRVQudmFsKCkudHJpbSgpO1xuXHRcdGxldCB6aXAgPSBSRVNaSVAudmFsKCkudHJpbSgpO1xuXHRcdGxldCBjaXR5ID0gUkVTQ0lUWS52YWwoKS50cmltKCk7XG5cdFx0bGV0IGNvdW50cnkgPSBSRVNDT1VOVFJZLnZhbCgpO1xuXG5cdFx0aWYoIGFycml2YWwgPT09ICcnICkge1xuXHRcdFx0c2V0RXJyb3JGb3IoIFJFU0FSUklWQUwsIF9fKCAnVGhlIGFycml2YWwgZGF0ZSBpcyByZXF1aXJlZCEnLCAnam9lZWUtYm9va2luZycgKSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0U3VjY2Vzc0ZvciggUkVTQVJSSVZBTCApO1xuXHRcdFx0Zm9ybW91dC5ib29rZWRfZnJvbSA9IFJFU0FSUklWQUw7XG5cdFx0fVxuXG5cdFx0aWYoIGRlcGFydHVyZSA9PT0gJycgKSB7XG5cdFx0XHRzZXRFcnJvckZvciggUkVTREVQQVJUVVJFLCBfXyggJ1RoZSBkZXBhcnR1cmUgZGF0ZSBpcyByZXF1aXJlZCEnLCAnam9lZWUtYm9va2luZycgKSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0U3VjY2Vzc0ZvciggUkVTREVQQVJUVVJFICk7XG5cdFx0XHRmb3Jtb3V0LmJvb2tlZF90byA9IFJFU0RFUEFSVFVSRTtcblx0XHR9XG5cdFx0XG5cblx0XHRpZiggaXNOYU4oIHBlcnNvbnMgKSB8fCBwZXJzb25zID09PSAnJyApIHtcblx0XHRcdHNldEVycm9yRm9yKFJFU1BFUlNPTlMsIF9fKCAnVGhlIHBlcnNvbnMgZmllbGQgaXMgcmVxdWlyZWQhJywgJ2pvZWVlLWJvb2tpbmcnICkpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoIFJFU1BFUlNPTlMgKTtcblx0XHRcdGZvcm1vdXQucGVyc29ucyA9IHBlcnNvbnM7XG5cdFx0fVxuXG5cdFx0aWYoIGVtYWlsID09PSBcIlwiIHx8IGVtYWlsSXNWYWxpZCggZW1haWwgKSApIHtcblx0XHRcdGZvcm1vdXQuZW1haWwgPSBlbWFpbDtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoIFJFU0VNQUlMICk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0RXJyb3JGb3IoUkVTRU1BSUwsIF9fKCAnVGhlIEUtTWFpbCBoYXMgYSB3cm9uZyBmb3JtYXQuJywgJ2pvZWVlLWJvb2tpbmcnICkpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCB0eXBlb2YgZmlyc3ROYW1lID09PSAnc3RyaW5nJyApIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoIFJFU0ZJUlNUTkFNRSApO1xuXHRcdFx0aWYoIGZpcnN0TmFtZSAhPT0gXCJcIiApIHtcblx0XHRcdFx0Zm9ybW91dC5maXJzdF9uYW1lID0gZmlyc3ROYW1lO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldEVycm9yRm9yKCBSRVNGSVJTVE5BTUUsIF9fKCdUaGUgZmlyc3QgbmFtZSBoYXZlIHRvIGJlIGluIHN0cmluZyBmb3JtYXQhJywgJ2pvZWVlLWJvb2tpbmcnICkgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIGxhc3ROYW1lID09PSBcIlwiIHx8IHR5cGVvZiBsYXN0TmFtZSAhPT0gJ3N0cmluZycgKSB7XG5cdFx0XHRzZXRFcnJvckZvciggUkVTTEFTVE5BTUUsIF9fKCdUaGUgbGFzdCBuYW1lIGlzIHJlcXVpcmVkIGFuZCBoYXMgdG8gYmUgaW4gc3RyaW5nIGZvcm1hdCcsICdqb2VlZS1ib29raW5nJykgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRzZXRTdWNjZXNzRm9yKCBSRVNMQVNUTkFNRSApO1xuXHRcdFx0Zm9ybW91dC5sYXN0X25hbWUgPSBsYXN0TmFtZTtcblx0XHR9XG5cblx0XHRmb3Jtb3V0Lm5hdGlvbmFsaXR5ID0gbmF0aW9uYWxpdHk7XG5cblx0XHRmb3Jtb3V0LmdlbmRlciA9IGdlbmRlcjtcblx0XHRcblx0XHRpZiggYmlydGhkYXkgIT09IFwiXCIgKSB7XG5cdFx0XHRzZXRTdWNjZXNzRm9yKCBSRVNCSVJUSERBWSApO1xuXHRcdFx0Zm9ybW91dC5iaXJ0aGRheSA9IGJpcnRoZGF5O1xuXHRcdH1cblxuXHRcdGlmKCB0eXBlb2Ygc3RyZWV0ID09PSAnc3RyaW5nJyApIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoIFJFU1NUUkVFVCApO1xuXHRcdFx0Zm9ybW91dC5zdHJlZXQgPSBzdHJlZXQ7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0RXJyb3JGb3IoIFJFU1NUUkVFVCwgX18oJ1RoZSBzdHJlZXQgaGFzIHRvIGJlIGEgc3RyaW5nJywgJ2pvZWVlLWJvb2tpbmcnKSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCB0eXBlb2YgemlwID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgemlwID09PSAnbnVtYmVyJyApIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoIFJFU1pJUCApO1xuXHRcdFx0Zm9ybW91dC56aXAgPSB6aXA7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0RXJyb3JGb3IoIFJFU1pJUCwgX18oJ1RoZXJlIGlzIGFuIGVycm9yIHdpdGggeW91ciBnaXZlbiB6aXAuJywgJ2pvZWVlLWJvb2tpbmcnICkpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCB0eXBlb2YgY2l0eSA9PT0gJ3N0cmluZycgKSB7XG5cdFx0XHRzZXRTdWNjZXNzRm9yKCBSRVNDSVRZICk7XG5cdFx0XHRmb3Jtb3V0LmNpdHkgPSBjaXR5O1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldEVycm9yRm9yKCBSRVNDSVRZLCBfXygnVGhlIGNpdHkgaGFzIHRvIGJlIGEgc3RyaW5nLicsICdqb2VlZS1ib29raW5nJyApKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRmb3Jtb3V0LmNvdW50cnkgPSBjb3VudHJ5O1xuXHRcdHJldHVybiBmb3Jtb3V0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjaGVja1Jvb21Gb3JtSW5wdXRzKCBjb21lc2Zyb20gKSB7XG5cdFx0bGV0IGZvcm1vdXQgPSB7fTtcblxuXHRcdGxldCByb29tbnVtYmVyVmFsdWUgPSBST09NTlVNQkVSLnZhbCgpLnRyaW0oKTtcblx0XHRsZXQgZmxvb3JudW1iZXJWYWx1ZSA9IEZMT09STlVNQkVSLnZhbCgpLnRyaW0oKTtcblx0XHRsZXQgcm9vbUFkdWx0c1ZhbHVlID0gUk9PTUFEVUxUUy52YWwoKS50cmltKCk7XG5cdFx0bGV0IHJvb21LaWRzVmFsdWUgPSBST09NS0lEUy52YWwoKS50cmltKCk7XG5cdFx0bGV0IHJvb21wcmljZVZhbHVlID0gUk9PTVBSSUNFLnZhbCgpLnRyaW0oKS5yZXBsYWNlKCcsJywgJy4nKTtcblx0XHRsZXQgcm9vbURlc2NyaXB0aW9uID0gUk9PTURFU0MudmFsKCkudHJpbSgpO1xuXHRcdFxuXHRcdGlmICggaXNOYU4oIHJvb21udW1iZXJWYWx1ZS50b1N0cmluZygpICkgfHwgcm9vbW51bWJlclZhbHVlID09PSAnJykge1xuXHRcdFx0c2V0RXJyb3JGb3IoUk9PTU5VTUJFUiwgX18oJ1RoZSByb29tIG51bWJlciBtdXN0IGJlIHNldCBhcyBzdHJpbmchJywgJ2pvZWVlLWJvb2tpbmcnKSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0U3VjY2Vzc0ZvcihST09NTlVNQkVSKTtcblx0XHRcdGZvcm1vdXQubnVtYmVyID0gcm9vbW51bWJlclZhbHVlLnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggZmxvb3JudW1iZXJWYWx1ZSApIHx8IGZsb29ybnVtYmVyVmFsdWUgPT09ICcnKSB7XG5cdFx0XHRzZXRFcnJvckZvcihGTE9PUk5VTUJFUiwgX18oJ1RoZSBmbG9vciBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyIScsICdqb2VlZS1ib29raW5nJykpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoRkxPT1JOVU1CRVIpO1xuXHRcdFx0Zm9ybW91dC5mbG9vciA9IGZsb29ybnVtYmVyVmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggcm9vbUFkdWx0c1ZhbHVlICkgfHwgcm9vbUFkdWx0c1ZhbHVlID09PSAnJykge1xuXHRcdFx0c2V0RXJyb3JGb3IoUk9PTUFEVUxUUywgX18oJ1RoZSBhZHVsdHMgbXVzdCBiZSBhbiBpbnRlZ2VyIScsICdqb2VlZS1ib29raW5nJykpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHNldFN1Y2Nlc3NGb3IoUk9PTUFEVUxUUyk7XG5cdFx0XHRmb3Jtb3V0LmFkdWx0cyA9IHBhcnNlSW50KHJvb21BZHVsdHNWYWx1ZSk7XG5cdFx0fVxuXHRcdGlmICggaXNOYU4oIHJvb21LaWRzVmFsdWUgKSB8fCByb29tS2lkc1ZhbHVlID09PSAnJykge1xuXHRcdFx0c2V0RXJyb3JGb3IoUk9PTUtJRFMsIF9fKCdUaGUga2lkcyBtdXN0IGJlIGFuIGludGVnZXIhJywgJ2pvZWVlLWJvb2tpbmcnKSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0U3VjY2Vzc0ZvcihST09NS0lEUyk7XG5cdFx0XHRmb3Jtb3V0LmtpZHMgPSBwYXJzZUludChyb29tQWR1bHRzVmFsdWUpO1xuXHRcdH1cblx0XHRpZiAoIGlzTmFOKCByb29tcHJpY2VWYWx1ZSApIHx8IHJvb21wcmljZVZhbHVlID09PSAnJykge1xuXHRcdFx0c2V0RXJyb3JGb3IoUk9PTVBSSUNFLCBfXygnVGhlIHByaWNlIG11c3QgYmUgYSBmbG9hdCBudW1iZXIhJywgJ2pvZWVlLWJvb2tpbmcnKSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0c2V0U3VjY2Vzc0ZvcihST09NUFJJQ0UpO1xuXHRcdFx0Zm9ybW91dC5wcmljZSA9IHBhcnNlRmxvYXQocm9vbXByaWNlVmFsdWUpO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiByb29tRGVzY3JpcHRpb24gPT09ICdzdHJpbmcnICkge1xuXHRcdFx0Zm9ybW91dC5kZXNjcmlwdGlvbiA9IHJvb21EZXNjcmlwdGlvbjtcblx0XHR9XG5cdFx0aWYgKCBST09NQUNUSVZFLmlzKCBcIjpjaGVja2VkXCIgKSApIHtcblx0XHRcdGZvcm1vdXQuYWN0aXZlID0gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRmb3Jtb3V0LmFjdGl2ZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gZm9ybW91dDtcblx0XHRcdFxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0RXJyb3JGb3IoaW5wdXQsIG1lc3NhZ2UpIHtcblx0XHRjb25zdCBmb3JtQ29udHJvbCA9IGlucHV0LnBhcmVudCgpO1xuXHRcdGNvbnN0IHNtYWxsID0gZm9ybUNvbnRyb2wuZmluZCgnc21hbGwnKTtcblx0XHRmb3JtQ29udHJvbC5hZGRDbGFzcygnZXJyb3InKTtcblx0XHRzbWFsbC50ZXh0KG1lc3NhZ2UpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZXRTdWNjZXNzRm9yKGlucHV0KSB7XG5cdFx0Y29uc3QgZm9ybUNvbnRyb2wgPSBpbnB1dC5wYXJlbnQoKTtcblx0XHRmb3JtQ29udHJvbC5hZGRDbGFzcygnc3VjY2VzcycpO1xuXHR9XG5cblxuXHR2YXIgc2V0TG9jYWxlID0gJ2VuJztcblx0bGV0IGNhbGVuZGFyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnam9lZWVCb29raW5nQ2FsZW5kYXInKTtcblx0bGV0IGNhbGVuZGFyID0gbmV3IENhbGVuZGFyKGNhbGVuZGFyRWwsIHtcblx0XHRzY2hlZHVsZXJMaWNlbnNlS2V5OiAnR1BMLU15LVByb2plY3QtSXMtT3Blbi1Tb3VyY2UnLFxuXHRcdHBsdWdpbnM6IFsgY2FsZW5kYXJJbnRlcmFjdGlvbiwgcmVzb3VyY2VUaW1lbGluZVBsdWdpbiBdLFxuXHRcdGFzcGVjdFJhdGlvOiAxLjUsXG5cdFx0cmVzb3VyY2VBcmVhV2lkdGg6ICcxMCUnLFxuXHRcdHNsb3REdXJhdGlvbjogJzEyOjAwJyxcblx0XHRzY3JvbGxUaW1lOiAnMDA6MDAnLCAvLyB1bmRvIGRlZmF1bHQgNmFtIHNjcm9sbFRpbWVcblx0XHRsb2NhbGU6IHNldExvY2FsZSxcblx0XHRoZWFkZXI6IHtcblx0XHRcdGxlZnQ6ICdhZGRSb29tLCBhZGRSZXNlcnZhdGlvbiwgdG9kYXksIHByZXYsIG5leHQnLFxuXHRcdFx0Y2VudGVyOiAndGl0bGUnLFxuXHRcdFx0cmlnaHQ6ICdyZXNvdXJjZVRpbWVsaW5lTW9udGgsIHJlc291cmNlVGltZWxpbmVXZWVrJyxcblx0XHR9LFxuXHRcdGN1c3RvbUJ1dHRvbnM6IHtcblx0XHRcdGFkZFJvb206IHtcblx0XHRcdFx0dGV4dDogX18oJ0FkZCByb29tJywgJ2pvZWVlLWJvb2tpbmcnKSxcblx0XHRcdFx0Y2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoJy5qb2VlZS1ib29raW5nLXJvb20tYmctbW9kYWwnKS5jc3MoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0sXG5cdFx0XHRhZGRSZXNlcnZhdGlvbjoge1xuXHRcdFx0XHR0ZXh0OiBfXygnQWRkIHJlc2VydmF0aW9uJywgJ2pvZWVlLWJvb2tpbmcnKSxcblx0XHRcdFx0Y2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFJFU0JHTU9EQUwuY3NzKFwiZGlzcGxheVwiLCBcImZsZXhcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0fSxcblx0XHRkZWZhdWx0VmlldzogJ3Jlc291cmNlVGltZWxpbmVNb250aCcsXG5cdFx0c2VsZWN0YWJsZTogdHJ1ZSxcblx0XHRzZWxlY3RIZWxwZXI6IHRydWUsXG5cdFx0ZWRpdGFibGU6IHRydWUsIC8vIGVuYWJsZSBkcmFnZ2FibGUgZXZlbnRzXG5cdFx0cmVzb3VyY2VDb2x1bW5zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGxhYmVsVGV4dDogX18oICdSb29tJywgJ2pvZWVlLWJvb2tpbmcnICksXG5cdFx0XHRcdGZpZWxkOiAndGl0bGUnLFxuXHRcdFx0XHR3aWR0aDogJzE1cHgnXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRsYWJlbFRleHQ6IF9fKCAnQmVkcycsICdqb2VlZS1ib29raW5nJyApLFxuXHRcdFx0XHRmaWVsZDogJ2FkdWx0cydcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZXNvdXJjZU9yZGVyOiAndGl0bGUnLFxuXHRcdHJlc291cmNlczoge1xuXHRcdFx0dXJsOiBqb2VlZVJlc3QucmVzdFVSTCArICdqb2VlZS1ib29raW5nL3YxL3Jvb20nLFxuXHRcdFx0bWV0aG9kOiAnR0VUJ1xuXHRcdH0sXG5cdFx0cmVzb3VyY2VSZW5kZXI6IGZ1bmN0aW9uKCByZW5kZXJJbmZvICkge1xuXHRcdFx0cmVuZGVySW5mby5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG5cblx0XHRcdFx0JC5hamF4KHtcblx0XHRcdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxuXHRcdFx0XHRcdGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdFx0dXJsOiBqb2VlZVJlc3QucmVzdFVSTCArICdqb2VlZS1ib29raW5nL3YxL3Jvb20vJyArIHJlbmRlckluZm8ucmVzb3VyY2UuaWQsXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRcdFJPT01JRC52YWwoZGF0YS5pZCk7XG5cdFx0XHRcdFx0XHRST09NTlVNQkVSLnZhbChkYXRhLm51bWJlcik7XG5cdFx0XHRcdFx0XHRST09NQURVTFRTLnZhbChkYXRhLmFkdWx0cyk7XG5cdFx0XHRcdFx0XHRST09NS0lEUy52YWwoZGF0YS5raWRzKTtcblx0XHRcdFx0XHRcdEZMT09STlVNQkVSLnZhbChkYXRhLmZsb29yKTtcblx0XHRcdFx0XHRcdFJPT01QUklDRS52YWwoZGF0YS5wcmljZSk7XG5cdFx0XHRcdFx0XHRST09NREVTQy52YWwoZGF0YS5kZXNjcmlwdGlvbik7XG5cdFx0XHRcdFx0XHRpZiggZGF0YS5hY3RpdmUgPT0gMSkge1xuXHRcdFx0XHRcdFx0XHRST09NQUNUSVZFLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRST09NQUNUSVZFLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdCQoJy5qb2VlZS1ib29raW5nLXJvb20tYmctbW9kYWwnKS5jc3MoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcblx0XHRcdFx0XHRcdFJPT01TVUJNSVRCVE4uYWRkQ2xhc3MoJ2Nsb3NlJyk7XG5cdFx0XHRcdFx0XHRST09NU1VCTUlUTU9ESUZZLmFkZENsYXNzKCdvcGVuJyk7XG5cdFx0XHRcdFx0XHRST09NREVMRVRFQlROLmFkZENsYXNzKCdvcGVuJyk7XG5cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdFx0YWxlcnQoX18oXCJFcnJvciBieSByZWNlaXZpbmcgdGhlIHJvb20gaW5mb3JtYXRpb24uXCIsICdqb2VlZS1ib29raW5nJykpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0YmVmb3JlU2VuZDogZnVuY3Rpb24gKHhocikge1xuXHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtV1AtTm9uY2UnLCBqb2VlZVJlc3QucmVzdE5vbmNlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGRhdGE6IFwiXCIsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHRpbWVab25lOiAnVVRDJyxcblx0XHRldmVudHM6IFtcblx0XHRcdHtpZDogJzEnLCByZXNvdXJjZUlkOiAnMTQnLCB0aXRsZTogJ1Rlc3QgVXNlcicsIHN0YXJ0OiAnMjAyMC0wMy0wNFQxMjowMDowMCcsIGVuZDogJzIwMjAtMDMtMDlUMTI6MDA6MDAnLCBjb2xvcjogJ2dyZWVuJyB9LFxuXHRcdFx0e2lkOiAnMicsIHJlc291cmNlSWQ6ICcxNicsIHRpdGxlOiAnVGVzdCBVc2VyMicsIHN0YXJ0OiAnMjAyMC0wMy0wNFQxMjowMDowMCcsIGVuZDogJzIwMjAtMDMtMTRUMTI6MDA6MDAnIH1cblx0XHRdLFxuXHRcdGV2ZW50Q2xpY2s6IGZ1bmN0aW9uKGluZm8pIHtcblxuXHRcdFx0Y29uc29sZS5sb2coJ0V2ZW50OiAnICsgaW5mby5ldmVudC50aXRsZSk7XG5cdFx0fSxcblx0XHRzZWxlY3Q6IGZ1bmN0aW9uKGFyZykge1xuXHRcdFx0bGV0IGFycml2YWwgPSBhcmcuc3RhcnQudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApO1xuXHRcdFx0bGV0IGRlcGFydHVyZSA9IGFyZy5lbmQudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApO1xuXG5cdFx0XHRSRVNCR01PREFMLmNzcyhcImRpc3BsYXlcIiwgXCJmbGV4XCIpO1xuXHRcdFx0UkVTUk9PTUlELnZhbCggYXJnLnJlc291cmNlLmlkICk7XG5cdFx0XHRSRVNBUlJJVkFMLnZhbCggYXJyaXZhbCApO1xuXHRcdFx0UkVTREVQQVJUVVJFLnZhbCggZGVwYXJ0dXJlICk7XG5cblx0XHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0XHQnc2VsZWN0IGNhbGxiYWNrJyxcblx0XHRcdFx0YXJnLnN0YXJ0U3RyLFxuXHRcdFx0XHRhcmcuZW5kU3RyLFxuXHRcdFx0XHRhcmcucmVzb3VyY2UgPyBhcmcucmVzb3VyY2UuaWQgOiAnKG5vIHJlc291cmNlKSdcblx0XHRcdCk7XG5cdFx0fSxcblx0XHRkYXRlQ2xpY2s6IGZ1bmN0aW9uKGFyZykge1xuXHRcdFx0UkVTQkdNT0RBTC5jc3MoXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcblx0XHRcdGxldCBkYXRlID0gYXJnLmRhdGUudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApO1xuXHRcdFx0UkVTUk9PTUlELnZhbCggYXJnLnJlc291cmNlLmlkICk7XG5cdFx0XHRSRVNBUlJJVkFMLnZhbCggZGF0ZSApO1xuXHRcdFx0Y29uc29sZS5sb2coXG5cdFx0XHRcdCdkYXRlQ2xpY2snLFxuXHRcdFx0XHRhcmcuZGF0ZSxcblx0XHRcdFx0YXJnLnJlc291cmNlID8gYXJnLnJlc291cmNlLmlkIDogJyhubyByZXNvdXJjZSknLFxuXHRcdFx0XHRhcmcuZGF0ZS50b0lTT1N0cmluZygpLFxuXHRcdFx0XHRhcmcuZGF0ZS50b1N0cmluZygpXG5cdFx0XHQpO1xuXHRcdH1cblx0fSk7XG5cdGNhbGVuZGFyLnJlbmRlcigpO1xuXG5cdCQoJy5qb2VlZS1ib29raW5nLXJvb20tY2xvc2UnKS5jbGljayhmdW5jdGlvbigpIHtcblx0XHRST09NQ0FOQ0VMQlROLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdH0pO1xuXG5cdCQoJy5qb2VlZS1ib29raW5nLXJlc2VydmF0aW9uLWNsb3NlJykuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0UkVTQ0FOQ0VMQlROLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdH0pO1xuXG5cdCQoJyNqb2VlZS1ib29raW5nLXJvb20tc3VibWl0JykuY2xpY2soZnVuY3Rpb24oZXYpIHtcblx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcblx0XHRcblx0XHRcdFxuXHRcdFx0bGV0IGNoZWNrZWQgPSBjaGVja1Jvb21Gb3JtSW5wdXRzKCBcInN1Ym1pdFwiICk7XG5cdFx0XHRpZihjaGVja2VkKSB7XG5cblx0XHRcdFx0XHQkLmFqYXgoe1xuXHRcdFx0XHR0eXBlOiAnUE9TVCcsXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXG5cdFx0XHRcdGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdHVybDogam9lZWVSZXN0LnJlc3RVUkwgKyAnam9lZWUtYm9va2luZy92MS9yb29tJyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRsZXQgc3VjY2VzcyA9ICQoJy5qb2VlZS1ib29raW5nLXJvb20tc3VjY2VzcycpO1xuXHRcdFx0XHRcdHN1Y2Nlc3MuYWRkQ2xhc3MoJ3N1Y2Nlc3MnKTtcblx0XHRcdFx0XHRzdWNjZXNzLnRleHQoIF9fKCdTYXZlZCBjaGFuZ2VzIHN1Y2Nlc3NmdWxseS4nLCAnam9lZWUtYm9va2luZycpICk7XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFJPT01DQU5DRUxCVE4udHJpZ2dlcignY2xpY2snKTtcblx0XHRcdFx0XHRcdGxvY2F0aW9uLnJlbG9hZCgpO1xuXHRcdFx0XHRcdH0sIDIwMDApO1xuXG5cblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0bGV0IGVyciA9IGRhdGEucmVzcG9uc2VKU09OLm1lc3NhZ2U7XG5cdFx0XHRcdFx0bGV0IHN1Ym1pdEVycm9yID0gJCgnLmpvZWVlLWJvb2tpbmctcm9vbS1lcnJvcicpO1xuXHRcdFx0XHRcdHN1Ym1pdEVycm9yLmFkZENsYXNzKCdlcnJvcicpO1xuXHRcdFx0XHRcdHN1Ym1pdEVycm9yLnRleHQoZXJyKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YmVmb3JlU2VuZDogZnVuY3Rpb24gKHhocikge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVdQLU5vbmNlJywgam9lZWVSZXN0LnJlc3ROb25jZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IEpTT04uc3RyaW5naWZ5KGNoZWNrZWQpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHR9KTtcblxuXHRST09NQ0FOQ0VMQlROLmNsaWNrKGZ1bmN0aW9uKGV2KSB7Y2FuY2VsKGV2LCBcInJvb21cIik7fSk7XG5cdFJFU0NBTkNFTEJUTi5jbGljayhmdW5jdGlvbihldikge2NhbmNlbChldiwgXCJyZXNlcnZhdGlvblwiKTt9KTtcblxuXG5cdCQoJyNqb2VlZS1ib29raW5nLXJvb20tZm9ybS1zdWJtaXQtbW9kaWZ5JykuY2xpY2soZnVuY3Rpb24oZXYpIHtcblx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcblx0XHRcblx0XHRcdFxuXHRcdFx0bGV0IGNoZWNrZWQgPSBjaGVja1Jvb21Gb3JtSW5wdXRzKCBcInVwZGF0ZVwiICk7XG5cdFx0XHRpZihjaGVja2VkKSB7XG5cblx0XHQkLmFqYXgoe1xuXHRcdFx0dHlwZTogJ1BVVCcsXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxuXHRcdFx0Y29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdHVybDogam9lZWVSZXN0LnJlc3RVUkwgKyAnam9lZWUtYm9va2luZy92MS9yb29tLycgKyBST09NSUQudmFsKCksXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRsZXQgc3VjY2VzcyA9ICQoJy5qb2VlZS1ib29raW5nLXJvb20tc3VjY2VzcycpO1xuXHRcdFx0XHRzdWNjZXNzLmFkZENsYXNzKCdzdWNjZXNzJyk7XG5cdFx0XHRcdHN1Y2Nlc3MudGV4dCggX18oICdTYXZlZCBjaGFuZ2VzIHN1Y2Nlc3NmdWxseS4nLCAnam9lZWUtYm9va2luZycgKSApO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFJPT01DQU5DRUxCVE4udHJpZ2dlcignY2xpY2snKTtcblx0XHRcdFx0fSwgMTAwMCk7XG5cblxuXHRcdFx0fSxcblx0XHRcdGVycm9yOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRsZXQgZXJyID0gZGF0YS5yZXNwb25zZUpTT04ubWVzc2FnZTtcblx0XHRcdFx0bGV0IHN1Ym1pdEVycm9yID0gJCgnLmpvZWVlLWJvb2tpbmctcm9vbS1lcnJvcicpO1xuXHRcdFx0XHRzdWJtaXRFcnJvci5hZGRDbGFzcygnZXJyb3InKTtcblx0XHRcdFx0c3VibWl0RXJyb3IudGV4dChlcnIpO1xuXHRcdFx0fSxcblx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICh4aHIpIHtcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtV1AtTm9uY2UnLCBqb2VlZVJlc3QucmVzdE5vbmNlKTtcblx0XHRcdH0sXG5cdFx0XHRkYXRhOiBKU09OLnN0cmluZ2lmeShjaGVja2VkKSxcblx0XHR9KTtcblx0fVxuXG5cdH0pO1xuXG5cdFJPT01ERUxFVEVCVE4uY2xpY2soIGZ1bmN0aW9uKGV2KSB7XG5cdFx0ZXYucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmKCBjb25maXJtKCBfXygnWW91IHJlYWxseSB3YW5uYSBkZWxldGUgdGhpcyByb29tPyBFdmVyeSBib29raW5nIGluIHRoaXMgcm9vbSB3aWxsIGJlIHJlbW92ZWQgdG9vIGJ5IGRvaW5nIHNvIScsICdqb2VlZS1ib29raW5nJykgKSApIHtcblxuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dHlwZTogJ0RFTEVURScsXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXG5cdFx0XHRcdGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdHVybDogam9lZWVSZXN0LnJlc3RVUkwgKyAnam9lZWUtYm9va2luZy92MS9yb29tLycgKyBST09NSUQudmFsKCksXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0bGV0IHN1Y2Nlc3MgPSAkKCcuam9lZWUtYm9va2luZy1yb29tLXN1Y2Nlc3MnKTtcblx0XHRcdFx0XHRzdWNjZXNzLmFkZENsYXNzKCdzdWNjZXNzJyk7XG5cdFx0XHRcdFx0c3VjY2Vzcy50ZXh0KCBfXyggJ1NhdmVkIGNoYW5nZXMgc3VjY2Vzc2Z1bGx5LicsICdqb2VlZS1ib29raW5nJyApICk7XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCQoJy5qb2VlZS1ib29raW5nLXJvb20tY2FuY2VsLWJ0bicpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0XHRcdFx0fSwgMTAwMCk7XG5cblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRsZXQgZXJyID0gZGF0YS5yZXNwb25zZUpTT04ubWVzc2FnZTtcblx0XHRcdFx0XHRsZXQgc3VibWl0RXJyb3IgPSAkKCcuam9lZWUtYm9va2luZy1yb29tLWVycm9yJyk7XG5cblx0XHRcdFx0XHRzdWJtaXRFcnJvci5hZGRDbGFzcygnZXJyb3InKTtcblx0XHRcdFx0XHRzdWJtaXRFcnJvci50ZXh0KGVycik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uICh4aHIpIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1XUC1Ob25jZScsIGpvZWVlUmVzdC5yZXN0Tm9uY2UpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYXRhOiBcIlwiLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Uk9PTUNBTkNFTEJUTi50cmlnZ2VyKCdjbGljaycpO1xuXG5cdFx0fVxuXG5cdH0pO1xuXG5cdFJFU1NVQk1JVC5jbGljayggZnVuY3Rpb24oZXYpIHtcblx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0bGV0IGNoZWNrZWQgPSBjaGVja1Jlc2VydmF0aW9uRm9ybUlucHV0cygpO1xuXG5cdFx0XG5cblx0XG5cdH0pO1xuXG5cdGxldCBpID0gMTtcblxuXHQkKCcjam9lZWUtYm9va2luZy1leHRyYXMtYWRkJykuY2xpY2soIGZ1bmN0aW9uKCkge1xuXHRcdGkrKztcblx0XHQkKCcjam9lZWUtYm9va2luZy1leHRyYXMtdGFibGUtZHluYW1pYycpLmFwcGVuZCgnPHRyIGlkPVwicm93JytpKydcIj48dGQ+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm5hbWVbXVwiIHBsYWNlaG9sZGVyPVwiRXh0cmFcIiBjbGFzcz1cImpvZWVlLWJvb2tpbmctZm9ybS0tZXh0cmFzLWNvbnRyb2xcIj48L3RkPjx0ZD48aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwicHJpY2VbXVwiIHBsYWNlaG9sZGVyPVwiUHJpY2VcIiBjbGFzcz1cImpvZWVlLWJvb2tpbmctZm9ybS0tZXh0cmFzLWNvbnRyb2xcIj48L3RkPjx0ZD48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBuYW1lPVwicmVtb3ZlXCIgaWQ9XCInK2krJ1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgYnRuLXJlbW92ZVwiPlg8L2J1dHRvbj48L3RkPjwvdHI+Jyk7XG5cdH0pO1xuXG5cdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuYnRuLXJlbW92ZScsIGZ1bmN0aW9uKCkge1xuXHRcdGxldCBidXR0b25faWQgPSAkKHRoaXMpLmF0dHIoXCJpZFwiKTtcblx0XHRjb25zb2xlLmxvZyhidXR0b25faWQpO1xuXHRcdCQoJyNyb3cnK2J1dHRvbl9pZCkucmVtb3ZlKCk7XG5cdH0pO1xuXG5cblx0XG59KTtcblxuXG5cdFxuXG5cbiIsIi8qIVxuRnVsbENhbGVuZGFyIENvcmUgUGFja2FnZSB2NC4zLjFcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9cbihjKSAyMDE5IEFkYW0gU2hhd1xuKi9cblxuLy8gQ3JlYXRpbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBlbGVtZW50UHJvcEhhc2ggPSB7XG4gICAgY2xhc3NOYW1lOiB0cnVlLFxuICAgIGNvbFNwYW46IHRydWUsXG4gICAgcm93U3BhbjogdHJ1ZVxufTtcbnZhciBjb250YWluZXJUYWdIYXNoID0ge1xuICAgICc8dHInOiAndGJvZHknLFxuICAgICc8dGQnOiAndHInXG59O1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBhdHRycywgY29udGVudCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICBhcHBseVN0eWxlKGVsLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudFByb3BIYXNoW2F0dHJOYW1lXSkge1xuICAgICAgICAgICAgICAgIGVsW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IGNvbnRlbnQ7IC8vIHNob3J0Y3V0LiBubyBuZWVkIHRvIHByb2Nlc3MgSFRNTCBpbiBhbnkgd2F5XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG59XG5mdW5jdGlvbiBodG1sVG9FbGVtZW50KGh0bWwpIHtcbiAgICBodG1sID0gaHRtbC50cmltKCk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoY29tcHV0ZUNvbnRhaW5lclRhZyhodG1sKSk7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xufVxuZnVuY3Rpb24gaHRtbFRvRWxlbWVudHMoaHRtbCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChodG1sVG9Ob2RlTGlzdChodG1sKSk7XG59XG5mdW5jdGlvbiBodG1sVG9Ob2RlTGlzdChodG1sKSB7XG4gICAgaHRtbCA9IGh0bWwudHJpbSgpO1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbXB1dGVDb250YWluZXJUYWcoaHRtbCkpO1xuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBjb250YWluZXIuY2hpbGROb2Rlcztcbn1cbi8vIGFzc3VtZXMgaHRtbCBhbHJlYWR5IHRyaW1tZWQgYW5kIHRhZyBuYW1lcyBhcmUgbG93ZXJjYXNlXG5mdW5jdGlvbiBjb21wdXRlQ29udGFpbmVyVGFnKGh0bWwpIHtcbiAgICByZXR1cm4gY29udGFpbmVyVGFnSGFzaFtodG1sLnN1YnN0cigwLCAzKSAvLyBmYXN0ZXIgdGhhbiB1c2luZyByZWdleFxuICAgIF0gfHwgJ2Rpdic7XG59XG5mdW5jdGlvbiBhcHBlbmRUb0VsZW1lbnQoZWwsIGNvbnRlbnQpIHtcbiAgICB2YXIgY2hpbGROb2RlcyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGNoaWxkTm9kZXNbaV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByZXBlbmRUb0VsZW1lbnQocGFyZW50LCBjb250ZW50KSB7XG4gICAgdmFyIG5ld0VscyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgdmFyIGFmdGVyRWwgPSBwYXJlbnQuZmlyc3RDaGlsZCB8fCBudWxsOyAvLyBpZiBubyBmaXJzdENoaWxkLCB3aWxsIGFwcGVuZCB0byBlbmQsIGJ1dCB0aGF0J3Mgb2theSwgYi9jIHRoZXJlIHdlcmUgbm8gY2hpbGRyZW5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0Vscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld0Vsc1tpXSwgYWZ0ZXJFbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXJFbGVtZW50KHJlZkVsLCBjb250ZW50KSB7XG4gICAgdmFyIG5ld0VscyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgdmFyIGFmdGVyRWwgPSByZWZFbC5uZXh0U2libGluZyB8fCBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlZkVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0Vsc1tpXSwgYWZ0ZXJFbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplQ29udGVudChjb250ZW50KSB7XG4gICAgdmFyIGVscztcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVscyA9IGh0bWxUb0VsZW1lbnRzKGNvbnRlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250ZW50IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICBlbHMgPSBbY29udGVudF07XG4gICAgfVxuICAgIGVsc2UgeyAvLyBOb2RlW10gb3IgTm9kZUxpc3RcbiAgICAgICAgZWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBlbHM7XG59XG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxufVxuLy8gUXVlcnlpbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdFxudmFyIG1hdGNoZXNNZXRob2QgPSBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3I7XG52YXIgY2xvc2VzdE1ldGhvZCA9IEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHwgZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgLy8gcG9seWZpbGxcbiAgICB2YXIgZWwgPSB0aGlzO1xuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZG8ge1xuICAgICAgICBpZiAoZWxlbWVudE1hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgIH0gd2hpbGUgKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxKTtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5mdW5jdGlvbiBlbGVtZW50Q2xvc2VzdChlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdE1ldGhvZC5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbWF0Y2hlc01ldGhvZC5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG4vLyBhY2NlcHRzIG11bHRpcGxlIHN1YmplY3QgZWxzXG4vLyByZXR1cm5zIGEgcmVhbCBhcnJheS4gZ29vZCBmb3IgbWV0aG9kcyBsaWtlIGZvckVhY2hcbmZ1bmN0aW9uIGZpbmRFbGVtZW50cyhjb250YWluZXIsIHNlbGVjdG9yKSB7XG4gICAgdmFyIGNvbnRhaW5lcnMgPSBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IFtjb250YWluZXJdIDogY29udGFpbmVyO1xuICAgIHZhciBhbGxNYXRjaGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gY29udGFpbmVyc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXRjaGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBhbGxNYXRjaGVzLnB1c2gobWF0Y2hlc1tqXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbE1hdGNoZXM7XG59XG4vLyBhY2NlcHRzIG11bHRpcGxlIHN1YmplY3QgZWxzXG4vLyBvbmx5IHF1ZXJpZXMgZGlyZWN0IGNoaWxkIGVsZW1lbnRzXG5mdW5jdGlvbiBmaW5kQ2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICAgIHZhciBwYXJlbnRzID0gcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBbcGFyZW50XSA6IHBhcmVudDtcbiAgICB2YXIgYWxsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IHBhcmVudHNbaV0uY2hpbGRyZW47IC8vIG9ubHkgZXZlciBlbGVtZW50c1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2pdO1xuICAgICAgICAgICAgaWYgKCFzZWxlY3RvciB8fCBlbGVtZW50TWF0Y2hlcyhjaGlsZE5vZGUsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIGFsbE1hdGNoZXMucHVzaChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbGxNYXRjaGVzO1xufVxuLy8gQXR0cmlidXRlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gZm9yY2VDbGFzc05hbWUoZWwsIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgIGlmIChib29sKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICB9XG59XG4vLyBTdHlsZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIFBJWEVMX1BST1BfUkUgPSAvKHRvcHxsZWZ0fHJpZ2h0fGJvdHRvbXx3aWR0aHxoZWlnaHQpJC9pO1xuZnVuY3Rpb24gYXBwbHlTdHlsZShlbCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICBhcHBseVN0eWxlUHJvcChlbCwgcHJvcE5hbWUsIHByb3BzW3Byb3BOYW1lXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlTdHlsZVByb3AoZWwsIG5hbWUsIHZhbCkge1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICBlbC5zdHlsZVtuYW1lXSA9ICcnO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBQSVhFTF9QUk9QX1JFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWwgKyAncHgnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2ludEluc2lkZVJlY3QocG9pbnQsIHJlY3QpIHtcbiAgICByZXR1cm4gcG9pbnQubGVmdCA+PSByZWN0LmxlZnQgJiZcbiAgICAgICAgcG9pbnQubGVmdCA8IHJlY3QucmlnaHQgJiZcbiAgICAgICAgcG9pbnQudG9wID49IHJlY3QudG9wICYmXG4gICAgICAgIHBvaW50LnRvcCA8IHJlY3QuYm90dG9tO1xufVxuLy8gUmV0dXJucyBhIG5ldyByZWN0YW5nbGUgdGhhdCBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gcmVjdGFuZ2xlcy4gSWYgdGhleSBkb24ndCBpbnRlcnNlY3QsIHJldHVybnMgZmFsc2VcbmZ1bmN0aW9uIGludGVyc2VjdFJlY3RzKHJlY3QxLCByZWN0Mikge1xuICAgIHZhciByZXMgPSB7XG4gICAgICAgIGxlZnQ6IE1hdGgubWF4KHJlY3QxLmxlZnQsIHJlY3QyLmxlZnQpLFxuICAgICAgICByaWdodDogTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KSxcbiAgICAgICAgdG9wOiBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCksXG4gICAgICAgIGJvdHRvbTogTWF0aC5taW4ocmVjdDEuYm90dG9tLCByZWN0Mi5ib3R0b20pXG4gICAgfTtcbiAgICBpZiAocmVzLmxlZnQgPCByZXMucmlnaHQgJiYgcmVzLnRvcCA8IHJlcy5ib3R0b20pIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlUmVjdChyZWN0LCBkZWx0YVgsIGRlbHRhWSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGRlbHRhWCxcbiAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBkZWx0YVgsXG4gICAgICAgIHRvcDogcmVjdC50b3AgKyBkZWx0YVksXG4gICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyBkZWx0YVlcbiAgICB9O1xufVxuLy8gUmV0dXJucyBhIG5ldyBwb2ludCB0aGF0IHdpbGwgaGF2ZSBiZWVuIG1vdmVkIHRvIHJlc2lkZSB3aXRoaW4gdGhlIGdpdmVuIHJlY3RhbmdsZVxuZnVuY3Rpb24gY29uc3RyYWluUG9pbnQocG9pbnQsIHJlY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBNYXRoLm1pbihNYXRoLm1heChwb2ludC5sZWZ0LCByZWN0LmxlZnQpLCByZWN0LnJpZ2h0KSxcbiAgICAgICAgdG9wOiBNYXRoLm1pbihNYXRoLm1heChwb2ludC50b3AsIHJlY3QudG9wKSwgcmVjdC5ib3R0b20pXG4gICAgfTtcbn1cbi8vIFJldHVybnMgYSBwb2ludCB0aGF0IGlzIHRoZSBjZW50ZXIgb2YgdGhlIGdpdmVuIHJlY3RhbmdsZVxuZnVuY3Rpb24gZ2V0UmVjdENlbnRlcihyZWN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMixcbiAgICAgICAgdG9wOiAocmVjdC50b3AgKyByZWN0LmJvdHRvbSkgLyAyXG4gICAgfTtcbn1cbi8vIFN1YnRyYWN0cyBwb2ludDIncyBjb29yZGluYXRlcyBmcm9tIHBvaW50MSdzIGNvb3JkaW5hdGVzLCByZXR1cm5pbmcgYSBkZWx0YVxuZnVuY3Rpb24gZGlmZlBvaW50cyhwb2ludDEsIHBvaW50Mikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHBvaW50MS5sZWZ0IC0gcG9pbnQyLmxlZnQsXG4gICAgICAgIHRvcDogcG9pbnQxLnRvcCAtIHBvaW50Mi50b3BcbiAgICB9O1xufVxuXG4vLyBMb2dpYyBmb3IgZGV0ZXJtaW5pbmcgaWYsIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmlnaHQtdG8tbGVmdCwgdGhlIHNjcm9sbGJhciBhcHBlYXJzIG9uIHRoZSBsZWZ0IHNpZGVcbnZhciBpc1J0bFNjcm9sbGJhck9uTGVmdCA9IG51bGw7XG5mdW5jdGlvbiBnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCgpIHtcbiAgICBpZiAoaXNSdGxTY3JvbGxiYXJPbkxlZnQgPT09IG51bGwpIHtcbiAgICAgICAgaXNSdGxTY3JvbGxiYXJPbkxlZnQgPSBjb21wdXRlSXNSdGxTY3JvbGxiYXJPbkxlZnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzUnRsU2Nyb2xsYmFyT25MZWZ0O1xufVxuZnVuY3Rpb24gY29tcHV0ZUlzUnRsU2Nyb2xsYmFyT25MZWZ0KCkge1xuICAgIHZhciBvdXRlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IC0xMDAwLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICBvdmVyZmxvdzogJ3Njcm9sbCcsXG4gICAgICAgICAgICBkaXJlY3Rpb246ICdydGwnXG4gICAgICAgIH1cbiAgICB9LCAnPGRpdj48L2Rpdj4nKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRWwpO1xuICAgIHZhciBpbm5lckVsID0gb3V0ZXJFbC5maXJzdENoaWxkO1xuICAgIHZhciByZXMgPSBpbm5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPiBvdXRlckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgcmVtb3ZlRWxlbWVudChvdXRlckVsKTtcbiAgICByZXR1cm4gcmVzO1xufVxuLy8gVGhlIHNjcm9sbGJhciB3aWR0aCBjb21wdXRhdGlvbnMgaW4gY29tcHV0ZUVkZ2VzIGFyZSBzb21ldGltZXMgZmxhd2VkIHdoZW4gaXQgY29tZXMgdG9cbi8vIHJldGluYSBkaXNwbGF5cywgcm91bmRpbmcsIGFuZCBJRTExLiBNYXNzYWdlIHRoZW0gaW50byBhIHVzYWJsZSB2YWx1ZS5cbmZ1bmN0aW9uIHNhbml0aXplU2Nyb2xsYmFyV2lkdGgod2lkdGgpIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoKTsgLy8gbm8gbmVnYXRpdmVzXG4gICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoKTtcbiAgICByZXR1cm4gd2lkdGg7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVFZGdlcyhlbCwgZ2V0UGFkZGluZykge1xuICAgIGlmIChnZXRQYWRkaW5nID09PSB2b2lkIDApIHsgZ2V0UGFkZGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgdmFyIGJvcmRlckxlZnQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlckxlZnRXaWR0aCwgMTApIHx8IDA7XG4gICAgdmFyIGJvcmRlclJpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJSaWdodFdpZHRoLCAxMCkgfHwgMDtcbiAgICB2YXIgYm9yZGVyVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG4gICAgdmFyIGJvcmRlckJvdHRvbSA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwKSB8fCAwO1xuICAgIC8vIG11c3QgdXNlIG9mZnNldChXaWR0aHxIZWlnaHQpIGJlY2F1c2UgY29tcGF0aWJsZSB3aXRoIGNsaWVudChXaWR0aHxIZWlnaHQpXG4gICAgdmFyIHNjcm9sbGJhckxlZnRSaWdodCA9IHNhbml0aXplU2Nyb2xsYmFyV2lkdGgoZWwub2Zmc2V0V2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIGJvcmRlckxlZnQgLSBib3JkZXJSaWdodCk7XG4gICAgdmFyIHNjcm9sbGJhckJvdHRvbSA9IHNhbml0aXplU2Nyb2xsYmFyV2lkdGgoZWwub2Zmc2V0SGVpZ2h0IC0gZWwuY2xpZW50SGVpZ2h0IC0gYm9yZGVyVG9wIC0gYm9yZGVyQm90dG9tKTtcbiAgICB2YXIgcmVzID0ge1xuICAgICAgICBib3JkZXJMZWZ0OiBib3JkZXJMZWZ0LFxuICAgICAgICBib3JkZXJSaWdodDogYm9yZGVyUmlnaHQsXG4gICAgICAgIGJvcmRlclRvcDogYm9yZGVyVG9wLFxuICAgICAgICBib3JkZXJCb3R0b206IGJvcmRlckJvdHRvbSxcbiAgICAgICAgc2Nyb2xsYmFyQm90dG9tOiBzY3JvbGxiYXJCb3R0b20sXG4gICAgICAgIHNjcm9sbGJhckxlZnQ6IDAsXG4gICAgICAgIHNjcm9sbGJhclJpZ2h0OiAwXG4gICAgfTtcbiAgICBpZiAoZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQoKSAmJiBjb21wdXRlZFN0eWxlLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHsgLy8gaXMgdGhlIHNjcm9sbGJhciBvbiB0aGUgbGVmdCBzaWRlP1xuICAgICAgICByZXMuc2Nyb2xsYmFyTGVmdCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcy5zY3JvbGxiYXJSaWdodCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICB9XG4gICAgaWYgKGdldFBhZGRpbmcpIHtcbiAgICAgICAgcmVzLnBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nTGVmdCwgMTApIHx8IDA7XG4gICAgICAgIHJlcy5wYWRkaW5nUmlnaHQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdSaWdodCwgMTApIHx8IDA7XG4gICAgICAgIHJlcy5wYWRkaW5nVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nVG9wLCAxMCkgfHwgMDtcbiAgICAgICAgcmVzLnBhZGRpbmdCb3R0b20gPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20sIDEwKSB8fCAwO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY29tcHV0ZUlubmVyUmVjdChlbCwgZ29XaXRoaW5QYWRkaW5nKSB7XG4gICAgaWYgKGdvV2l0aGluUGFkZGluZyA9PT0gdm9pZCAwKSB7IGdvV2l0aGluUGFkZGluZyA9IGZhbHNlOyB9XG4gICAgdmFyIG91dGVyUmVjdCA9IGNvbXB1dGVSZWN0KGVsKTtcbiAgICB2YXIgZWRnZXMgPSBjb21wdXRlRWRnZXMoZWwsIGdvV2l0aGluUGFkZGluZyk7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgbGVmdDogb3V0ZXJSZWN0LmxlZnQgKyBlZGdlcy5ib3JkZXJMZWZ0ICsgZWRnZXMuc2Nyb2xsYmFyTGVmdCxcbiAgICAgICAgcmlnaHQ6IG91dGVyUmVjdC5yaWdodCAtIGVkZ2VzLmJvcmRlclJpZ2h0IC0gZWRnZXMuc2Nyb2xsYmFyUmlnaHQsXG4gICAgICAgIHRvcDogb3V0ZXJSZWN0LnRvcCArIGVkZ2VzLmJvcmRlclRvcCxcbiAgICAgICAgYm90dG9tOiBvdXRlclJlY3QuYm90dG9tIC0gZWRnZXMuYm9yZGVyQm90dG9tIC0gZWRnZXMuc2Nyb2xsYmFyQm90dG9tXG4gICAgfTtcbiAgICBpZiAoZ29XaXRoaW5QYWRkaW5nKSB7XG4gICAgICAgIHJlcy5sZWZ0ICs9IGVkZ2VzLnBhZGRpbmdMZWZ0O1xuICAgICAgICByZXMucmlnaHQgLT0gZWRnZXMucGFkZGluZ1JpZ2h0O1xuICAgICAgICByZXMudG9wICs9IGVkZ2VzLnBhZGRpbmdUb3A7XG4gICAgICAgIHJlcy5ib3R0b20gLT0gZWRnZXMucGFkZGluZ0JvdHRvbTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNvbXB1dGVSZWN0KGVsKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICBib3R0b206IHJlY3QuYm90dG9tICsgd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVWaWV3cG9ydFJlY3QoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICByaWdodDogd2luZG93LnBhZ2VYT2Zmc2V0ICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB0b3A6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgYm90dG9tOiB3aW5kb3cucGFnZVlPZmZzZXQgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKGVsKSB7XG4gICAgcmV0dXJuIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArIGNvbXB1dGVWTWFyZ2lucyhlbCk7XG59XG5mdW5jdGlvbiBjb21wdXRlVk1hcmdpbnMoZWwpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkLm1hcmdpblRvcCwgMTApICtcbiAgICAgICAgcGFyc2VJbnQoY29tcHV0ZWQubWFyZ2luQm90dG9tLCAxMCk7XG59XG4vLyBkb2VzIG5vdCByZXR1cm4gd2luZG93XG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpIHtcbiAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgIHdoaWxlIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7IC8vIHdpbGwgc3RvcCB3aGVuIGdldHMgdG8gZG9jdW1lbnQgb3IgbnVsbFxuICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoLyhhdXRvfHNjcm9sbCkvKS50ZXN0KGNvbXB1dGVkU3R5bGUub3ZlcmZsb3cgKyBjb21wdXRlZFN0eWxlLm92ZXJmbG93WSArIGNvbXB1dGVkU3R5bGUub3ZlcmZsb3dYKSkge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNsaXBwaW5nUmVjdChlbCkge1xuICAgIHJldHVybiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlSW5uZXJSZWN0KGVsKTtcbiAgICB9KVxuICAgICAgICAuY29uY2F0KGNvbXB1dGVWaWV3cG9ydFJlY3QoKSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVjdDAsIHJlY3QxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnNlY3RSZWN0cyhyZWN0MCwgcmVjdDEpIHx8IHJlY3QxOyAvLyBzaG91bGQgYWx3YXlzIGludGVyc2VjdFxuICAgIH0pO1xufVxuXG4vLyBTdG9wcyBhIG1vdXNlL3RvdWNoIGV2ZW50IGZyb20gZG9pbmcgaXQncyBuYXRpdmUgYnJvd3NlciBhY3Rpb25cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbn1cbi8vIEV2ZW50IERlbGVnYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGxpc3RlbkJ5U2VsZWN0b3IoY29udGFpbmVyLCBldmVudFR5cGUsIHNlbGVjdG9yLCBoYW5kbGVyKSB7XG4gICAgZnVuY3Rpb24gcmVhbEhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIG1hdGNoZWRDaGlsZCA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgc2VsZWN0b3IpO1xuICAgICAgICBpZiAobWF0Y2hlZENoaWxkKSB7XG4gICAgICAgICAgICBoYW5kbGVyLmNhbGwobWF0Y2hlZENoaWxkLCBldiwgbWF0Y2hlZENoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHJlYWxIYW5kbGVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHJlYWxIYW5kbGVyKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29udGFpbmVyLCBzZWxlY3Rvciwgb25Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmUpIHtcbiAgICB2YXIgY3VycmVudE1hdGNoZWRDaGlsZDtcbiAgICByZXR1cm4gbGlzdGVuQnlTZWxlY3Rvcihjb250YWluZXIsICdtb3VzZW92ZXInLCBzZWxlY3RvciwgZnVuY3Rpb24gKGV2LCBtYXRjaGVkQ2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoZWRDaGlsZCAhPT0gY3VycmVudE1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgY3VycmVudE1hdGNoZWRDaGlsZCA9IG1hdGNoZWRDaGlsZDtcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcihldiwgbWF0Y2hlZENoaWxkKTtcbiAgICAgICAgICAgIHZhciByZWFsT25Nb3VzZUxlYXZlXzEgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWF0Y2hlZENoaWxkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmUoZXYsIG1hdGNoZWRDaGlsZCk7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGxpc3RlbiB0byB0aGUgbmV4dCBtb3VzZWxlYXZlLCBhbmQgdGhlbiB1bmF0dGFjaFxuICAgICAgICAgICAgbWF0Y2hlZENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyBBbmltYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciB0cmFuc2l0aW9uRXZlbnROYW1lcyA9IFtcbiAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ290cmFuc2l0aW9uZW5kJyxcbiAgICAnb1RyYW5zaXRpb25FbmQnLFxuICAgICdtc1RyYW5zaXRpb25FbmQnLFxuICAgICd0cmFuc2l0aW9uZW5kJ1xuXTtcbi8vIHRyaWdnZXJlZCBvbmx5IHdoZW4gdGhlIG5leHQgc2luZ2xlIHN1YnNlcXVlbnQgdHJhbnNpdGlvbiBmaW5pc2hlc1xuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25Eb25lKGVsLCBjYWxsYmFjaykge1xuICAgIHZhciByZWFsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgY2FsbGJhY2soZXYpO1xuICAgICAgICB0cmFuc2l0aW9uRXZlbnROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCByZWFsQ2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcmVhbENhbGxiYWNrKTsgLy8gY3Jvc3MtYnJvd3NlciB3YXkgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIHRyYW5zaXRpb24gZmluaXNoZXNcbiAgICB9KTtcbn1cblxudmFyIERBWV9JRFMgPSBbJ3N1bicsICdtb24nLCAndHVlJywgJ3dlZCcsICd0aHUnLCAnZnJpJywgJ3NhdCddO1xuLy8gQWRkaW5nXG5mdW5jdGlvbiBhZGRXZWVrcyhtLCBuKSB7XG4gICAgdmFyIGEgPSBkYXRlVG9VdGNBcnJheShtKTtcbiAgICBhWzJdICs9IG4gKiA3O1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhKTtcbn1cbmZ1bmN0aW9uIGFkZERheXMobSwgbikge1xuICAgIHZhciBhID0gZGF0ZVRvVXRjQXJyYXkobSk7XG4gICAgYVsyXSArPSBuO1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhKTtcbn1cbmZ1bmN0aW9uIGFkZE1zKG0sIG4pIHtcbiAgICB2YXIgYSA9IGRhdGVUb1V0Y0FycmF5KG0pO1xuICAgIGFbNl0gKz0gbjtcbiAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYSk7XG59XG4vLyBEaWZmaW5nIChhbGwgcmV0dXJuIGZsb2F0cylcbmZ1bmN0aW9uIGRpZmZXZWVrcyhtMCwgbTEpIHtcbiAgICByZXR1cm4gZGlmZkRheXMobTAsIG0xKSAvIDc7XG59XG5mdW5jdGlvbiBkaWZmRGF5cyhtMCwgbTEpIHtcbiAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCk7XG59XG5mdW5jdGlvbiBkaWZmSG91cnMobTAsIG0xKSB7XG4gICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gKDEwMDAgKiA2MCAqIDYwKTtcbn1cbmZ1bmN0aW9uIGRpZmZNaW51dGVzKG0wLCBtMSkge1xuICAgIHJldHVybiAobTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpKSAvICgxMDAwICogNjApO1xufVxuZnVuY3Rpb24gZGlmZlNlY29uZHMobTAsIG0xKSB7XG4gICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gMTAwMDtcbn1cbmZ1bmN0aW9uIGRpZmZEYXlBbmRUaW1lKG0wLCBtMSkge1xuICAgIHZhciBtMGRheSA9IHN0YXJ0T2ZEYXkobTApO1xuICAgIHZhciBtMWRheSA9IHN0YXJ0T2ZEYXkobTEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiAwLFxuICAgICAgICBtb250aHM6IDAsXG4gICAgICAgIGRheXM6IE1hdGgucm91bmQoZGlmZkRheXMobTBkYXksIG0xZGF5KSksXG4gICAgICAgIG1pbGxpc2Vjb25kczogKG0xLnZhbHVlT2YoKSAtIG0xZGF5LnZhbHVlT2YoKSkgLSAobTAudmFsdWVPZigpIC0gbTBkYXkudmFsdWVPZigpKVxuICAgIH07XG59XG4vLyBEaWZmaW5nIFdob2xlIFVuaXRzXG5mdW5jdGlvbiBkaWZmV2hvbGVXZWVrcyhtMCwgbTEpIHtcbiAgICB2YXIgZCA9IGRpZmZXaG9sZURheXMobTAsIG0xKTtcbiAgICBpZiAoZCAhPT0gbnVsbCAmJiBkICUgNyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZCAvIDc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZGlmZldob2xlRGF5cyhtMCwgbTEpIHtcbiAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGlmZkRheXMobTAsIG0xKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8gU3RhcnQtT2ZcbmZ1bmN0aW9uIHN0YXJ0T2ZEYXkobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKVxuICAgIF0pO1xufVxuZnVuY3Rpb24gc3RhcnRPZkhvdXIobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgbS5nZXRVVENIb3VycygpXG4gICAgXSk7XG59XG5mdW5jdGlvbiBzdGFydE9mTWludXRlKG0pIHtcbiAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICBtLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgIG0uZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgIG0uZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgbS5nZXRVVENNaW51dGVzKClcbiAgICBdKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0T2ZTZWNvbmQobSkge1xuICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgIG0uZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgbS5nZXRVVENIb3VycygpLFxuICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgbS5nZXRVVENTZWNvbmRzKClcbiAgICBdKTtcbn1cbi8vIFdlZWsgQ29tcHV0YXRpb25cbmZ1bmN0aW9uIHdlZWtPZlllYXIobWFya2VyLCBkb3csIGRveSkge1xuICAgIHZhciB5ID0gbWFya2VyLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgdmFyIHcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5LCBkb3csIGRveSk7XG4gICAgaWYgKHcgPCAxKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5IC0gMSwgZG93LCBkb3kpO1xuICAgIH1cbiAgICB2YXIgbmV4dFcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5ICsgMSwgZG93LCBkb3kpO1xuICAgIGlmIChuZXh0VyA+PSAxKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbih3LCBuZXh0Vyk7XG4gICAgfVxuICAgIHJldHVybiB3O1xufVxuZnVuY3Rpb24gd2Vla09mR2l2ZW5ZZWFyKG1hcmtlciwgeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgZmlyc3RXZWVrU3RhcnQgPSBhcnJheVRvVXRjRGF0ZShbeWVhciwgMCwgMSArIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSldKTtcbiAgICB2YXIgZGF5U3RhcnQgPSBzdGFydE9mRGF5KG1hcmtlcik7XG4gICAgdmFyIGRheXMgPSBNYXRoLnJvdW5kKGRpZmZEYXlzKGZpcnN0V2Vla1N0YXJ0LCBkYXlTdGFydCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRheXMgLyA3KSArIDE7IC8vIHplcm8taW5kZXhlZFxufVxuLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgIHZhciBmd2QgPSA3ICsgZG93IC0gZG95O1xuICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICB2YXIgZndkbHcgPSAoNyArIGFycmF5VG9VdGNEYXRlKFt5ZWFyLCAwLCBmd2RdKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuLy8gQXJyYXkgQ29udmVyc2lvblxuZnVuY3Rpb24gZGF0ZVRvTG9jYWxBcnJheShkYXRlKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBkYXRlLmdldE1vbnRoKCksXG4gICAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKVxuICAgIF07XG59XG5mdW5jdGlvbiBhcnJheVRvTG9jYWxEYXRlKGEpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYVswXSwgYVsxXSB8fCAwLCBhWzJdID09IG51bGwgPyAxIDogYVsyXSwgLy8gZGF5IG9mIG1vbnRoXG4gICAgYVszXSB8fCAwLCBhWzRdIHx8IDAsIGFbNV0gfHwgMCk7XG59XG5mdW5jdGlvbiBkYXRlVG9VdGNBcnJheShkYXRlKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICBkYXRlLmdldFVUQ01vbnRoKCksXG4gICAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgIGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgICAgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgIF07XG59XG5mdW5jdGlvbiBhcnJheVRvVXRjRGF0ZShhKSB7XG4gICAgLy8gYWNjb3JkaW5nIHRvIHdlYiBzdGFuZGFyZHMgKGFuZCBTYWZhcmkpLCBhIG1vbnRoIGluZGV4IGlzIHJlcXVpcmVkLlxuICAgIC8vIG1hc3NhZ2UgaWYgb25seSBnaXZlbiBhIHllYXIuXG4gICAgaWYgKGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGEgPSBhLmNvbmNhdChbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYSkpO1xufVxuLy8gT3RoZXIgVXRpbHNcbmZ1bmN0aW9uIGlzVmFsaWREYXRlKG0pIHtcbiAgICByZXR1cm4gIWlzTmFOKG0udmFsdWVPZigpKTtcbn1cbmZ1bmN0aW9uIHRpbWVBc01zKG0pIHtcbiAgICByZXR1cm4gbS5nZXRVVENIb3VycygpICogMTAwMCAqIDYwICogNjAgK1xuICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSAqIDEwMDAgKiA2MCArXG4gICAgICAgIG0uZ2V0VVRDU2Vjb25kcygpICogMTAwMCArXG4gICAgICAgIG0uZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG59XG5cbnZhciBJTlRFUk5BTF9VTklUUyA9IFsneWVhcnMnLCAnbW9udGhzJywgJ2RheXMnLCAnbWlsbGlzZWNvbmRzJ107XG52YXIgUEFSU0VfUkUgPSAvXigtPykoPzooXFxkKylcXC4pPyhcXGQrKTooXFxkXFxkKSg/OjooXFxkXFxkKSg/OlxcLihcXGRcXGRcXGQpKT8pPy87XG4vLyBQYXJzaW5nIGFuZCBDcmVhdGlvblxuZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHVuaXQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdChpbnB1dCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdCgoX2EgPSB7fSwgX2FbdW5pdCB8fCAnbWlsbGlzZWNvbmRzJ10gPSBpbnB1dCwgX2EpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nKHMpIHtcbiAgICB2YXIgbSA9IFBBUlNFX1JFLmV4ZWMocyk7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIHNpZ24gPSBtWzFdID8gLTEgOiAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IDAsXG4gICAgICAgICAgICBtb250aHM6IDAsXG4gICAgICAgICAgICBkYXlzOiBzaWduICogKG1bMl0gPyBwYXJzZUludChtWzJdLCAxMCkgOiAwKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogc2lnbiAqICgobVszXSA/IHBhcnNlSW50KG1bM10sIDEwKSA6IDApICogNjAgKiA2MCAqIDEwMDAgKyAvLyBob3Vyc1xuICAgICAgICAgICAgICAgIChtWzRdID8gcGFyc2VJbnQobVs0XSwgMTApIDogMCkgKiA2MCAqIDEwMDAgKyAvLyBtaW51dGVzXG4gICAgICAgICAgICAgICAgKG1bNV0gPyBwYXJzZUludChtWzVdLCAxMCkgOiAwKSAqIDEwMDAgKyAvLyBzZWNvbmRzXG4gICAgICAgICAgICAgICAgKG1bNl0gPyBwYXJzZUludChtWzZdLCAxMCkgOiAwKSAvLyBtc1xuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdChvYmopIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyczogb2JqLnllYXJzIHx8IG9iai55ZWFyIHx8IDAsXG4gICAgICAgIG1vbnRoczogb2JqLm1vbnRocyB8fCBvYmoubW9udGggfHwgMCxcbiAgICAgICAgZGF5czogKG9iai5kYXlzIHx8IG9iai5kYXkgfHwgMCkgK1xuICAgICAgICAgICAgZ2V0V2Vla3NGcm9tSW5wdXQob2JqKSAqIDcsXG4gICAgICAgIG1pbGxpc2Vjb25kczogKG9iai5ob3VycyB8fCBvYmouaG91ciB8fCAwKSAqIDYwICogNjAgKiAxMDAwICsgLy8gaG91cnNcbiAgICAgICAgICAgIChvYmoubWludXRlcyB8fCBvYmoubWludXRlIHx8IDApICogNjAgKiAxMDAwICsgLy8gbWludXRlc1xuICAgICAgICAgICAgKG9iai5zZWNvbmRzIHx8IG9iai5zZWNvbmQgfHwgMCkgKiAxMDAwICsgLy8gc2Vjb25kc1xuICAgICAgICAgICAgKG9iai5taWxsaXNlY29uZHMgfHwgb2JqLm1pbGxpc2Vjb25kIHx8IG9iai5tcyB8fCAwKSAvLyBtc1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRXZWVrc0Zyb21JbnB1dChvYmopIHtcbiAgICByZXR1cm4gb2JqLndlZWtzIHx8IG9iai53ZWVrIHx8IDA7XG59XG4vLyBFcXVhbGl0eVxuZnVuY3Rpb24gZHVyYXRpb25zRXF1YWwoZDAsIGQxKSB7XG4gICAgcmV0dXJuIGQwLnllYXJzID09PSBkMS55ZWFycyAmJlxuICAgICAgICBkMC5tb250aHMgPT09IGQxLm1vbnRocyAmJlxuICAgICAgICBkMC5kYXlzID09PSBkMS5kYXlzICYmXG4gICAgICAgIGQwLm1pbGxpc2Vjb25kcyA9PT0gZDEubWlsbGlzZWNvbmRzO1xufVxuZnVuY3Rpb24gaXNTaW5nbGVEYXkoZHVyKSB7XG4gICAgcmV0dXJuIGR1ci55ZWFycyA9PT0gMCAmJiBkdXIubW9udGhzID09PSAwICYmIGR1ci5kYXlzID09PSAxICYmIGR1ci5taWxsaXNlY29uZHMgPT09IDA7XG59XG4vLyBTaW1wbGUgTWF0aFxuZnVuY3Rpb24gYWRkRHVyYXRpb25zKGQwLCBkMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkMC55ZWFycyArIGQxLnllYXJzLFxuICAgICAgICBtb250aHM6IGQwLm1vbnRocyArIGQxLm1vbnRocyxcbiAgICAgICAgZGF5czogZDAuZGF5cyArIGQxLmRheXMsXG4gICAgICAgIG1pbGxpc2Vjb25kczogZDAubWlsbGlzZWNvbmRzICsgZDEubWlsbGlzZWNvbmRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN1YnRyYWN0RHVyYXRpb25zKGQxLCBkMCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkMS55ZWFycyAtIGQwLnllYXJzLFxuICAgICAgICBtb250aHM6IGQxLm1vbnRocyAtIGQwLm1vbnRocyxcbiAgICAgICAgZGF5czogZDEuZGF5cyAtIGQwLmRheXMsXG4gICAgICAgIG1pbGxpc2Vjb25kczogZDEubWlsbGlzZWNvbmRzIC0gZDAubWlsbGlzZWNvbmRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG11bHRpcGx5RHVyYXRpb24oZCwgbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBkLnllYXJzICogbixcbiAgICAgICAgbW9udGhzOiBkLm1vbnRocyAqIG4sXG4gICAgICAgIGRheXM6IGQuZGF5cyAqIG4sXG4gICAgICAgIG1pbGxpc2Vjb25kczogZC5taWxsaXNlY29uZHMgKiBuXG4gICAgfTtcbn1cbi8vIENvbnZlcnNpb25zXG4vLyBcIlJvdWdoXCIgYmVjYXVzZSB0aGV5IGFyZSBiYXNlZCBvbiBhdmVyYWdlLWNhc2UgR3JlZ29yaWFuIG1vbnRocy95ZWFyc1xuZnVuY3Rpb24gYXNSb3VnaFllYXJzKGR1cikge1xuICAgIHJldHVybiBhc1JvdWdoRGF5cyhkdXIpIC8gMzY1O1xufVxuZnVuY3Rpb24gYXNSb3VnaE1vbnRocyhkdXIpIHtcbiAgICByZXR1cm4gYXNSb3VnaERheXMoZHVyKSAvIDMwO1xufVxuZnVuY3Rpb24gYXNSb3VnaERheXMoZHVyKSB7XG4gICAgcmV0dXJuIGFzUm91Z2hNcyhkdXIpIC8gODY0ZTU7XG59XG5mdW5jdGlvbiBhc1JvdWdoTWludXRlcyhkdXIpIHtcbiAgICByZXR1cm4gYXNSb3VnaE1zKGR1cikgLyAoMTAwMCAqIDYwKTtcbn1cbmZ1bmN0aW9uIGFzUm91Z2hTZWNvbmRzKGR1cikge1xuICAgIHJldHVybiBhc1JvdWdoTXMoZHVyKSAvIDEwMDA7XG59XG5mdW5jdGlvbiBhc1JvdWdoTXMoZHVyKSB7XG4gICAgcmV0dXJuIGR1ci55ZWFycyAqICgzNjUgKiA4NjRlNSkgK1xuICAgICAgICBkdXIubW9udGhzICogKDMwICogODY0ZTUpICtcbiAgICAgICAgZHVyLmRheXMgKiA4NjRlNSArXG4gICAgICAgIGR1ci5taWxsaXNlY29uZHM7XG59XG4vLyBBZHZhbmNlZCBNYXRoXG5mdW5jdGlvbiB3aG9sZURpdmlkZUR1cmF0aW9ucyhudW1lcmF0b3IsIGRlbm9taW5hdG9yKSB7XG4gICAgdmFyIHJlcyA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBJTlRFUk5BTF9VTklUUy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdW5pdCA9IElOVEVSTkFMX1VOSVRTW2ldO1xuICAgICAgICBpZiAoZGVub21pbmF0b3JbdW5pdF0pIHtcbiAgICAgICAgICAgIHZhciBsb2NhbFJlcyA9IG51bWVyYXRvclt1bml0XSAvIGRlbm9taW5hdG9yW3VuaXRdO1xuICAgICAgICAgICAgaWYgKCFpc0ludChsb2NhbFJlcykgfHwgKHJlcyAhPT0gbnVsbCAmJiByZXMgIT09IGxvY2FsUmVzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzID0gbG9jYWxSZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobnVtZXJhdG9yW3VuaXRdKSB7XG4gICAgICAgICAgICAvLyBuZWVkcyB0byBkaXZpZGUgYnkgc29tZXRoaW5nIGJ1dCBjYW4ndCFcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IoZHVyLCBkb250UmV0dXJuV2Vla3MpIHtcbiAgICB2YXIgbXMgPSBkdXIubWlsbGlzZWNvbmRzO1xuICAgIGlmIChtcykge1xuICAgICAgICBpZiAobXMgJSAxMDAwICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWlsbGlzZWNvbmQnLCB2YWx1ZTogbXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwKSAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3NlY29uZCcsIHZhbHVlOiBtcyAvIDEwMDAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwICogNjApICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWludXRlJywgdmFsdWU6IG1zIC8gKDEwMDAgKiA2MCkgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXMpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG1zIC8gKDEwMDAgKiA2MCAqIDYwKSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkdXIuZGF5cykge1xuICAgICAgICBpZiAoIWRvbnRSZXR1cm5XZWVrcyAmJiBkdXIuZGF5cyAlIDcgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICd3ZWVrJywgdmFsdWU6IGR1ci5kYXlzIC8gNyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHVuaXQ6ICdkYXknLCB2YWx1ZTogZHVyLmRheXMgfTtcbiAgICB9XG4gICAgaWYgKGR1ci5tb250aHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IGR1ci5tb250aHMgfTtcbiAgICB9XG4gICAgaWYgKGR1ci55ZWFycykge1xuICAgICAgICByZXR1cm4geyB1bml0OiAneWVhcicsIHZhbHVlOiBkdXIueWVhcnMgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IDAgfTtcbn1cblxuLyogRnVsbENhbGVuZGFyLXNwZWNpZmljIERPTSBVdGlsaXRpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gR2l2ZW4gdGhlIHNjcm9sbGJhciB3aWR0aHMgb2Ygc29tZSBvdGhlciBjb250YWluZXIsIGNyZWF0ZSBib3JkZXJzL21hcmdpbnMgb24gcm93RWxzIGluIG9yZGVyIHRvIG1hdGNoIHRoZSBsZWZ0XG4vLyBhbmQgcmlnaHQgc3BhY2UgdGhhdCB3YXMgb2Zmc2V0IGJ5IHRoZSBzY3JvbGxiYXJzLiBBIDEtcGl4ZWwgYm9yZGVyIGZpcnN0LCB0aGVuIG1hcmdpbiBiZXlvbmQgdGhhdC5cbmZ1bmN0aW9uIGNvbXBlbnNhdGVTY3JvbGwocm93RWwsIHNjcm9sbGJhcldpZHRocykge1xuICAgIGlmIChzY3JvbGxiYXJXaWR0aHMubGVmdCkge1xuICAgICAgICBhcHBseVN0eWxlKHJvd0VsLCB7XG4gICAgICAgICAgICBib3JkZXJMZWZ0V2lkdGg6IDEsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiBzY3JvbGxiYXJXaWR0aHMubGVmdCAtIDFcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzY3JvbGxiYXJXaWR0aHMucmlnaHQpIHtcbiAgICAgICAgYXBwbHlTdHlsZShyb3dFbCwge1xuICAgICAgICAgICAgYm9yZGVyUmlnaHRXaWR0aDogMSxcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBzY3JvbGxiYXJXaWR0aHMucmlnaHQgLSAxXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIFVuZG9lcyBjb21wZW5zYXRlU2Nyb2xsIGFuZCByZXN0b3JlcyBhbGwgYm9yZGVycy9tYXJnaW5zXG5mdW5jdGlvbiB1bmNvbXBlbnNhdGVTY3JvbGwocm93RWwpIHtcbiAgICBhcHBseVN0eWxlKHJvd0VsLCB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICcnLFxuICAgICAgICBtYXJnaW5SaWdodDogJycsXG4gICAgICAgIGJvcmRlckxlZnRXaWR0aDogJycsXG4gICAgICAgIGJvcmRlclJpZ2h0V2lkdGg6ICcnXG4gICAgfSk7XG59XG4vLyBNYWtlIHRoZSBtb3VzZSBjdXJzb3IgZXhwcmVzcyB0aGF0IGFuIGV2ZW50IGlzIG5vdCBhbGxvd2VkIGluIHRoZSBjdXJyZW50IGFyZWFcbmZ1bmN0aW9uIGRpc2FibGVDdXJzb3IoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdmYy1ub3QtYWxsb3dlZCcpO1xufVxuLy8gUmV0dXJucyB0aGUgbW91c2UgY3Vyc29yIHRvIGl0cyBvcmlnaW5hbCBsb29rXG5mdW5jdGlvbiBlbmFibGVDdXJzb3IoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdmYy1ub3QtYWxsb3dlZCcpO1xufVxuLy8gR2l2ZW4gYSB0b3RhbCBhdmFpbGFibGUgaGVpZ2h0IHRvIGZpbGwsIGhhdmUgYGVsc2AgKGVzc2VudGlhbGx5IGNoaWxkIHJvd3MpIGV4cGFuZCB0byBhY2NvbW9kYXRlLlxuLy8gQnkgZGVmYXVsdCwgYWxsIGVsZW1lbnRzIHRoYXQgYXJlIHNob3J0ZXIgdGhhbiB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IGFyZSBleHBhbmRlZCB1bmlmb3JtbHksIG5vdCBjb25zaWRlcmluZ1xuLy8gYW55IG90aGVyIGVscyB0aGF0IGFyZSBhbHJlYWR5IHRvbyB0YWxsLiBpZiBgc2hvdWxkUmVkaXN0cmlidXRlYCBpcyBvbiwgaXQgY29uc2lkZXJzIHRoZXNlIHRhbGwgcm93cyBhbmRcbi8vIHJlZHVjZXMgdGhlIGF2YWlsYWJsZSBoZWlnaHQuXG5mdW5jdGlvbiBkaXN0cmlidXRlSGVpZ2h0KGVscywgYXZhaWxhYmxlSGVpZ2h0LCBzaG91bGRSZWRpc3RyaWJ1dGUpIHtcbiAgICAvLyAqRkxPT1JJTkcgTk9URSo6IHdlIGZsb29yIGluIGNlcnRhaW4gcGxhY2VzIGJlY2F1c2Ugem9vbSBjYW4gZ2l2ZSBpbmFjY3VyYXRlIGZsb2F0aW5nLXBvaW50IGRpbWVuc2lvbnMsXG4gICAgLy8gYW5kIGl0IGlzIGJldHRlciB0byBiZSBzaG9ydGVyIHRoYW4gdGFsbGVyLCB0byBhdm9pZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBzY3JvbGxiYXJzLlxuICAgIHZhciBtaW5PZmZzZXQxID0gTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLyBlbHMubGVuZ3RoKTsgLy8gZm9yIG5vbi1sYXN0IGVsZW1lbnRcbiAgICB2YXIgbWluT2Zmc2V0MiA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC0gbWluT2Zmc2V0MSAqIChlbHMubGVuZ3RoIC0gMSkpOyAvLyBmb3IgbGFzdCBlbGVtZW50ICpGTE9PUklORyBOT1RFKlxuICAgIHZhciBmbGV4RWxzID0gW107IC8vIGVsZW1lbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gZXhwYW5kLiBhcnJheSBvZiBET00gbm9kZXNcbiAgICB2YXIgZmxleE9mZnNldHMgPSBbXTsgLy8gYW1vdW50IG9mIHZlcnRpY2FsIHNwYWNlIGl0IHRha2VzIHVwXG4gICAgdmFyIGZsZXhIZWlnaHRzID0gW107IC8vIGFjdHVhbCBjc3MgaGVpZ2h0XG4gICAgdmFyIHVzZWRIZWlnaHQgPSAwO1xuICAgIHVuZGlzdHJpYnV0ZUhlaWdodChlbHMpOyAvLyBnaXZlIGFsbCBlbGVtZW50cyB0aGVpciBuYXR1cmFsIGhlaWdodFxuICAgIC8vIGZpbmQgZWxlbWVudHMgdGhhdCBhcmUgYmVsb3cgdGhlIHJlY29tbWVuZGVkIGhlaWdodCAoZXhwYW5kYWJsZSkuXG4gICAgLy8gaW1wb3J0YW50IHRvIHF1ZXJ5IGZvciBoZWlnaHRzIGluIGEgc2luZ2xlIGZpcnN0IHBhc3MgKHRvIGF2b2lkIHJlZmxvdyBvc2NpbGxhdGlvbikuXG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHZhciBtaW5PZmZzZXQgPSBpID09PSBlbHMubGVuZ3RoIC0gMSA/IG1pbk9mZnNldDIgOiBtaW5PZmZzZXQxO1xuICAgICAgICB2YXIgbmF0dXJhbEhlaWdodCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgdmFyIG5hdHVyYWxPZmZzZXQgPSBuYXR1cmFsSGVpZ2h0ICsgY29tcHV0ZVZNYXJnaW5zKGVsKTtcbiAgICAgICAgaWYgKG5hdHVyYWxPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICAgIGZsZXhFbHMucHVzaChlbCk7XG4gICAgICAgICAgICBmbGV4T2Zmc2V0cy5wdXNoKG5hdHVyYWxPZmZzZXQpO1xuICAgICAgICAgICAgZmxleEhlaWdodHMucHVzaChuYXR1cmFsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgZWxlbWVudCBzdHJldGNoZXMgcGFzdCByZWNvbW1lbmRlZCBoZWlnaHQgKG5vbi1leHBhbmRhYmxlKS4gbWFyayB0aGUgc3BhY2UgYXMgb2NjdXBpZWQuXG4gICAgICAgICAgICB1c2VkSGVpZ2h0ICs9IG5hdHVyYWxPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyByZWFkanVzdCB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IHRvIG9ubHkgY29uc2lkZXIgdGhlIGhlaWdodCBhdmFpbGFibGUgdG8gbm9uLW1heGVkLW91dCByb3dzLlxuICAgIGlmIChzaG91bGRSZWRpc3RyaWJ1dGUpIHtcbiAgICAgICAgYXZhaWxhYmxlSGVpZ2h0IC09IHVzZWRIZWlnaHQ7XG4gICAgICAgIG1pbk9mZnNldDEgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAvIGZsZXhFbHMubGVuZ3RoKTtcbiAgICAgICAgbWluT2Zmc2V0MiA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC0gbWluT2Zmc2V0MSAqIChmbGV4RWxzLmxlbmd0aCAtIDEpKTsgLy8gKkZMT09SSU5HIE5PVEUqXG4gICAgfVxuICAgIC8vIGFzc2lnbiBoZWlnaHRzIHRvIGFsbCBleHBhbmRhYmxlIGVsZW1lbnRzXG4gICAgZmxleEVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgbWluT2Zmc2V0ID0gaSA9PT0gZmxleEVscy5sZW5ndGggLSAxID8gbWluT2Zmc2V0MiA6IG1pbk9mZnNldDE7XG4gICAgICAgIHZhciBuYXR1cmFsT2Zmc2V0ID0gZmxleE9mZnNldHNbaV07XG4gICAgICAgIHZhciBuYXR1cmFsSGVpZ2h0ID0gZmxleEhlaWdodHNbaV07XG4gICAgICAgIHZhciBuZXdIZWlnaHQgPSBtaW5PZmZzZXQgLSAobmF0dXJhbE9mZnNldCAtIG5hdHVyYWxIZWlnaHQpOyAvLyBzdWJ0cmFjdCB0aGUgbWFyZ2luL3BhZGRpbmdcbiAgICAgICAgaWYgKG5hdHVyYWxPZmZzZXQgPCBtaW5PZmZzZXQpIHsgLy8gd2UgY2hlY2sgdGhpcyBhZ2FpbiBiZWNhdXNlIHJlZGlzdHJpYnV0aW9uIG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGluZ3NcbiAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIFVuZG9lcyBkaXN0cnVidXRlSGVpZ2h0LCByZXN0b3JpbmcgYWxsIGVscyB0byB0aGVpciBuYXR1cmFsIGhlaWdodFxuZnVuY3Rpb24gdW5kaXN0cmlidXRlSGVpZ2h0KGVscykge1xuICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB9KTtcbn1cbi8vIEdpdmVuIGBlbHNgLCBhIHNldCBvZiA8dGQ+IGNlbGxzLCBmaW5kIHRoZSBjZWxsIHdpdGggdGhlIGxhcmdlc3QgbmF0dXJhbCB3aWR0aCBhbmQgc2V0IHRoZSB3aWR0aHMgb2YgYWxsIHRoZVxuLy8gY2VsbHMgdG8gYmUgdGhhdCB3aWR0aC5cbi8vIFBSRVJFUVVJU0lURTogaWYgeW91IHdhbnQgYSBjZWxsIHRvIHRha2UgdXAgd2lkdGgsIGl0IG5lZWRzIHRvIGhhdmUgYSBzaW5nbGUgaW5uZXIgZWxlbWVudCB3LyBkaXNwbGF5OmlubGluZVxuZnVuY3Rpb24gbWF0Y2hDZWxsV2lkdGhzKGVscykge1xuICAgIHZhciBtYXhJbm5lcldpZHRoID0gMDtcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGlubmVyRWwgPSBlbC5maXJzdENoaWxkOyAvLyBob3BlZnVsbHkgYW4gZWxlbWVudFxuICAgICAgICBpZiAoaW5uZXJFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJXaWR0aF8xID0gaW5uZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgIGlmIChpbm5lcldpZHRoXzEgPiBtYXhJbm5lcldpZHRoKSB7XG4gICAgICAgICAgICAgICAgbWF4SW5uZXJXaWR0aCA9IGlubmVyV2lkdGhfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG1heElubmVyV2lkdGgrKzsgLy8gc29tZXRpbWVzIG5vdCBhY2N1cmF0ZSBvZiB3aWR0aCB0aGUgdGV4dCBuZWVkcyB0byBzdGF5IG9uIG9uZSBsaW5lLiBpbnN1cmFuY2VcbiAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuc3R5bGUud2lkdGggPSBtYXhJbm5lcldpZHRoICsgJ3B4JztcbiAgICB9KTtcbiAgICByZXR1cm4gbWF4SW5uZXJXaWR0aDtcbn1cbi8vIEdpdmVuIG9uZSBlbGVtZW50IHRoYXQgcmVzaWRlcyBpbnNpZGUgYW5vdGhlcixcbi8vIFN1YnRyYWN0cyB0aGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBlbGVtZW50IGZyb20gdGhlIG91dGVyIGVsZW1lbnQuXG5mdW5jdGlvbiBzdWJ0cmFjdElubmVyRWxIZWlnaHQob3V0ZXJFbCwgaW5uZXJFbCkge1xuICAgIC8vIGVmZmluJyBJRTgvOS8xMC8xMSBzb21ldGltZXMgcmV0dXJucyAwIGZvciBkaW1lbnNpb25zLiB0aGlzIHdlaXJkIGhhY2sgd2FzIHRoZSBvbmx5IHRoaW5nIHRoYXQgd29ya2VkXG4gICAgdmFyIHJlZmxvd1N0eWxlUHJvcHMgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBsZWZ0OiAtMSAvLyBlbnN1cmUgcmVmbG93IGluIGNhc2UgdGhlIGVsIHdhcyBhbHJlYWR5IHJlbGF0aXZlLiBuZWdhdGl2ZSBpcyBsZXNzIGxpa2VseSB0byBjYXVzZSBuZXcgc2Nyb2xsXG4gICAgfTtcbiAgICBhcHBseVN0eWxlKG91dGVyRWwsIHJlZmxvd1N0eWxlUHJvcHMpO1xuICAgIGFwcGx5U3R5bGUoaW5uZXJFbCwgcmVmbG93U3R5bGVQcm9wcyk7XG4gICAgdmFyIGRpZmYgPSAvLyBncmFiIHRoZSBkaW1lbnNpb25zXG4gICAgIG91dGVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC1cbiAgICAgICAgaW5uZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgLy8gdW5kbyBoYWNrXG4gICAgdmFyIHJlc2V0U3R5bGVQcm9wcyA9IHsgcG9zaXRpb246ICcnLCBsZWZ0OiAnJyB9O1xuICAgIGFwcGx5U3R5bGUob3V0ZXJFbCwgcmVzZXRTdHlsZVByb3BzKTtcbiAgICBhcHBseVN0eWxlKGlubmVyRWwsIHJlc2V0U3R5bGVQcm9wcyk7XG4gICAgcmV0dXJuIGRpZmY7XG59XG4vKiBTZWxlY3Rpb25cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZnVuY3Rpb24gcHJldmVudFNlbGVjdGlvbihlbCkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXVuc2VsZWN0YWJsZScpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgcHJldmVudERlZmF1bHQpO1xufVxuZnVuY3Rpb24gYWxsb3dTZWxlY3Rpb24oZWwpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy11bnNlbGVjdGFibGUnKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIHByZXZlbnREZWZhdWx0KTtcbn1cbi8qIENvbnRleHQgTWVudVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBwcmV2ZW50Q29udGV4dE1lbnUoZWwpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbn1cbmZ1bmN0aW9uIGFsbG93Q29udGV4dE1lbnUoZWwpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbn1cbi8qIE9iamVjdCBPcmRlcmluZyBieSBGaWVsZFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBwYXJzZUZpZWxkU3BlY3MoaW5wdXQpIHtcbiAgICB2YXIgc3BlY3MgPSBbXTtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRva2VucyA9IGlucHV0LnNwbGl0KC9cXHMqLFxccyovKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRva2VucyA9IFtpbnB1dF07XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHRva2VucyA9IGlucHV0O1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3BlY3MucHVzaCh0b2tlbi5jaGFyQXQoMCkgPT09ICctJyA/XG4gICAgICAgICAgICAgICAgeyBmaWVsZDogdG9rZW4uc3Vic3RyaW5nKDEpLCBvcmRlcjogLTEgfSA6XG4gICAgICAgICAgICAgICAgeyBmaWVsZDogdG9rZW4sIG9yZGVyOiAxIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3BlY3MucHVzaCh7IGZ1bmM6IHRva2VuIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcGVjcztcbn1cbmZ1bmN0aW9uIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgZmllbGRTcGVjcykge1xuICAgIHZhciBpO1xuICAgIHZhciBjbXA7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpZWxkU3BlY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY21wID0gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlY3NbaV0pO1xuICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlYykge1xuICAgIGlmIChmaWVsZFNwZWMuZnVuYykge1xuICAgICAgICByZXR1cm4gZmllbGRTcGVjLmZ1bmMob2JqMCwgb2JqMSk7XG4gICAgfVxuICAgIHJldHVybiBmbGV4aWJsZUNvbXBhcmUob2JqMFtmaWVsZFNwZWMuZmllbGRdLCBvYmoxW2ZpZWxkU3BlYy5maWVsZF0pXG4gICAgICAgICogKGZpZWxkU3BlYy5vcmRlciB8fCAxKTtcbn1cbmZ1bmN0aW9uIGZsZXhpYmxlQ29tcGFyZShhLCBiKSB7XG4gICAgaWYgKCFhICYmICFiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhhKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKSk7XG4gICAgfVxuICAgIHJldHVybiBhIC0gYjtcbn1cbi8qIFN0cmluZyBVdGlsaXRpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZnVuY3Rpb24gY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5mdW5jdGlvbiBwYWRTdGFydCh2YWwsIGxlbikge1xuICAgIHZhciBzID0gU3RyaW5nKHZhbCk7XG4gICAgcmV0dXJuICcwMDAnLnN1YnN0cigwLCBsZW4gLSBzLmxlbmd0aCkgKyBzO1xufVxuLyogTnVtYmVyIFV0aWxpdGllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuZnVuY3Rpb24gaXNJbnQobikge1xuICAgIHJldHVybiBuICUgMSA9PT0gMDtcbn1cbi8qIFdlaXJkIFV0aWxpdGllc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5mdW5jdGlvbiBhcHBseUFsbChmdW5jdGlvbnMsIHRoaXNPYmosIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBzdXBwbGllZCBhIHNpbmdsZSBmdW5jdGlvblxuICAgICAgICBmdW5jdGlvbnMgPSBbZnVuY3Rpb25zXTtcbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9ucykge1xuICAgICAgICB2YXIgaSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHJldCA9IHZvaWQgMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmV0ID0gZnVuY3Rpb25zW2ldLmFwcGx5KHRoaXNPYmosIGFyZ3MpIHx8IHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpcnN0RGVmaW5lZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcmdzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzW2ldO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4vLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvMS42LjAvdW5kZXJzY29yZS5qcyNMNzE0XG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0KSB7XG4gICAgdmFyIHRpbWVvdXQ7XG4gICAgdmFyIGFyZ3M7XG4gICAgdmFyIGNvbnRleHQ7XG4gICAgdmFyIHRpbWVzdGFtcDtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHRpbWVzdGFtcDtcbiAgICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbi8vIE51bWJlciBhbmQgQm9vbGVhbiBhcmUgb25seSB0eXBlcyB0aGF0IGRlZmF1bHRzIG9yIG5vdCBjb21wdXRlZCBmb3Jcbi8vIFRPRE86IHdyaXRlIG1vcmUgY29tbWVudHNcbmZ1bmN0aW9uIHJlZmluZVByb3BzKHJhd1Byb3BzLCBwcm9jZXNzb3JzLCBkZWZhdWx0cywgbGVmdG92ZXJQcm9wcykge1xuICAgIGlmIChkZWZhdWx0cyA9PT0gdm9pZCAwKSB7IGRlZmF1bHRzID0ge307IH1cbiAgICB2YXIgcmVmaW5lZCA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9jZXNzb3JzKSB7XG4gICAgICAgIHZhciBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2tleV07XG4gICAgICAgIGlmIChyYXdQcm9wc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGZvdW5kXG4gICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHR5cGVvZiByYXdQcm9wc1trZXldID09PSAnZnVuY3Rpb24nID8gcmF3UHJvcHNba2V5XSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9jZXNzb3IpIHsgLy8gYSByZWZpbmluZyBmdW5jdGlvbj9cbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSBwcm9jZXNzb3IocmF3UHJvcHNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZmF1bHRzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBleHBsaWNpdCBkZWZhdWx0XG4gICAgICAgICAgICByZWZpbmVkW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbXVzdCBjb21wdXRlIGEgZGVmYXVsdFxuICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVmaW5lZFtrZXldID0gJyc7IC8vIGVtcHR5IHN0cmluZyBpcyBkZWZhdWx0IGZvciBTdHJpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFwcm9jZXNzb3IgfHwgcHJvY2Vzc29yID09PSBOdW1iZXIgfHwgcHJvY2Vzc29yID09PSBCb29sZWFuIHx8IHByb2Nlc3NvciA9PT0gRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSBudWxsOyAvLyBhc3NpZ24gbnVsbCBmb3Igb3RoZXIgbm9uLWN1c3RvbSBwcm9jZXNzb3IgZnVuY3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHByb2Nlc3NvcihudWxsKTsgLy8gcnVuIHRoZSBjdXN0b20gcHJvY2Vzc29yIGZ1bmNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVmdG92ZXJQcm9wcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzb3JzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxlZnRvdmVyUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZmluZWQ7XG59XG4vKiBEYXRlIHN0dWZmIHRoYXQgZG9lc24ndCBiZWxvbmcgaW4gZGF0ZWxpYiBjb3JlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgdGhhdCBoYXMgdGhlIHNhbWUgZXhhY3QgZHVyYXRpb24sXG4vLyBidXQgd2hvc2Ugc3RhcnQgdGltZSBpcyBhbGlnbmVkIHdpdGggdGhlIHN0YXJ0IG9mIHRoZSBkYXkuXG5mdW5jdGlvbiBjb21wdXRlQWxpZ25lZERheVJhbmdlKHRpbWVkUmFuZ2UpIHtcbiAgICB2YXIgZGF5Q250ID0gTWF0aC5mbG9vcihkaWZmRGF5cyh0aW1lZFJhbmdlLnN0YXJ0LCB0aW1lZFJhbmdlLmVuZCkpIHx8IDE7XG4gICAgdmFyIHN0YXJ0ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLnN0YXJ0KTtcbiAgICB2YXIgZW5kID0gYWRkRGF5cyhzdGFydCwgZGF5Q250KTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG59XG4vLyBnaXZlbiBhIHRpbWVkIHJhbmdlLCBjb21wdXRlcyBhbiBhbGwtZGF5IHJhbmdlIGJhc2VkIG9uIGhvdyBmb3IgdGhlIGVuZCBkYXRlIGJsZWVkcyBpbnRvIHRoZSBuZXh0IGRheVxuLy8gVE9ETzogZ2l2ZSBuZXh0RGF5VGhyZXNob2xkIGEgZGVmYXVsdCBhcmdcbmZ1bmN0aW9uIGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UodGltZWRSYW5nZSwgbmV4dERheVRocmVzaG9sZCkge1xuICAgIGlmIChuZXh0RGF5VGhyZXNob2xkID09PSB2b2lkIDApIHsgbmV4dERheVRocmVzaG9sZCA9IGNyZWF0ZUR1cmF0aW9uKDApOyB9XG4gICAgdmFyIHN0YXJ0RGF5ID0gbnVsbDtcbiAgICB2YXIgZW5kRGF5ID0gbnVsbDtcbiAgICBpZiAodGltZWRSYW5nZS5lbmQpIHtcbiAgICAgICAgZW5kRGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLmVuZCk7XG4gICAgICAgIHZhciBlbmRUaW1lTVMgPSB0aW1lZFJhbmdlLmVuZC52YWx1ZU9mKCkgLSBlbmREYXkudmFsdWVPZigpOyAvLyAjIG9mIG1pbGxpc2Vjb25kcyBpbnRvIGBlbmREYXlgXG4gICAgICAgIC8vIElmIHRoZSBlbmQgdGltZSBpcyBhY3R1YWxseSBpbmNsdXNpdmVseSBwYXJ0IG9mIHRoZSBuZXh0IGRheSBhbmQgaXMgZXF1YWwgdG8gb3JcbiAgICAgICAgLy8gYmV5b25kIHRoZSBuZXh0IGRheSB0aHJlc2hvbGQsIGFkanVzdCB0aGUgZW5kIHRvIGJlIHRoZSBleGNsdXNpdmUgZW5kIG9mIGBlbmREYXlgLlxuICAgICAgICAvLyBPdGhlcndpc2UsIGxlYXZpbmcgaXQgYXMgaW5jbHVzaXZlIHdpbGwgY2F1c2UgaXQgdG8gZXhjbHVkZSBgZW5kRGF5YC5cbiAgICAgICAgaWYgKGVuZFRpbWVNUyAmJiBlbmRUaW1lTVMgPj0gYXNSb3VnaE1zKG5leHREYXlUaHJlc2hvbGQpKSB7XG4gICAgICAgICAgICBlbmREYXkgPSBhZGREYXlzKGVuZERheSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVkUmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgc3RhcnREYXkgPSBzdGFydE9mRGF5KHRpbWVkUmFuZ2Uuc3RhcnQpOyAvLyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkYXkgdGhlIHJhbmdlIHN0YXJ0c1xuICAgICAgICAvLyBJZiBlbmQgaXMgd2l0aGluIGBzdGFydERheWAgYnV0IG5vdCBwYXN0IG5leHREYXlUaHJlc2hvbGQsIGFzc2lnbiB0aGUgZGVmYXVsdCBkdXJhdGlvbiBvZiBvbmUgZGF5LlxuICAgICAgICBpZiAoZW5kRGF5ICYmIGVuZERheSA8PSBzdGFydERheSkge1xuICAgICAgICAgICAgZW5kRGF5ID0gYWRkRGF5cyhzdGFydERheSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0RGF5LCBlbmQ6IGVuZERheSB9O1xufVxuLy8gc3BhbnMgZnJvbSBvbmUgZGF5IGludG8gYW5vdGhlcj9cbmZ1bmN0aW9uIGlzTXVsdGlEYXlSYW5nZShyYW5nZSkge1xuICAgIHZhciB2aXNpYmxlUmFuZ2UgPSBjb21wdXRlVmlzaWJsZURheVJhbmdlKHJhbmdlKTtcbiAgICByZXR1cm4gZGlmZkRheXModmlzaWJsZVJhbmdlLnN0YXJ0LCB2aXNpYmxlUmFuZ2UuZW5kKSA+IDE7XG59XG5mdW5jdGlvbiBkaWZmRGF0ZXMoZGF0ZTAsIGRhdGUxLCBkYXRlRW52LCBsYXJnZVVuaXQpIHtcbiAgICBpZiAobGFyZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKGRhdGVFbnYuZGlmZldob2xlWWVhcnMoZGF0ZTAsIGRhdGUxKSwgJ3llYXInKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobGFyZ2VVbml0ID09PSAnbW9udGgnKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihkYXRlRW52LmRpZmZXaG9sZU1vbnRocyhkYXRlMCwgZGF0ZTEpLCAnbW9udGgnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkaWZmRGF5QW5kVGltZShkYXRlMCwgZGF0ZTEpOyAvLyByZXR1cm5zIGEgZHVyYXRpb25cbiAgICB9XG59XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XG5cbmZ1bmN0aW9uIHBhcnNlUmVjdXJyaW5nKGV2ZW50SW5wdXQsIGFsbERheURlZmF1bHQsIGRhdGVFbnYsIHJlY3VycmluZ1R5cGVzLCBsZWZ0b3ZlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3VycmluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBsb2NhbExlZnRvdmVycyA9IHt9O1xuICAgICAgICB2YXIgcGFyc2VkID0gcmVjdXJyaW5nVHlwZXNbaV0ucGFyc2UoZXZlbnRJbnB1dCwgbG9jYWxMZWZ0b3ZlcnMsIGRhdGVFbnYpO1xuICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICB2YXIgYWxsRGF5ID0gbG9jYWxMZWZ0b3ZlcnMuYWxsRGF5O1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsTGVmdG92ZXJzLmFsbERheTsgLy8gcmVtb3ZlIGZyb20gbGVmdG92ZXJzXG4gICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSBhbGxEYXlEZWZhdWx0O1xuICAgICAgICAgICAgICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBwYXJzZWQuYWxsRGF5R3Vlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfX2Fzc2lnbihsZWZ0b3ZlcnMsIGxvY2FsTGVmdG92ZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHBhcnNlZC5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICB0eXBlRGF0YTogcGFyc2VkLnR5cGVEYXRhLFxuICAgICAgICAgICAgICAgIHR5cGVJZDogaVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG5FdmVudCBNVVNUIGhhdmUgYSByZWN1cnJpbmdEZWZcbiovXG5mdW5jdGlvbiBleHBhbmRSZWN1cnJpbmdSYW5nZXMoZXZlbnREZWYsIGR1cmF0aW9uLCBmcmFtaW5nUmFuZ2UsIGRhdGVFbnYsIHJlY3VycmluZ1R5cGVzKSB7XG4gICAgdmFyIHR5cGVEZWYgPSByZWN1cnJpbmdUeXBlc1tldmVudERlZi5yZWN1cnJpbmdEZWYudHlwZUlkXTtcbiAgICB2YXIgbWFya2VycyA9IHR5cGVEZWYuZXhwYW5kKGV2ZW50RGVmLnJlY3VycmluZ0RlZi50eXBlRGF0YSwge1xuICAgICAgICBzdGFydDogZGF0ZUVudi5zdWJ0cmFjdChmcmFtaW5nUmFuZ2Uuc3RhcnQsIGR1cmF0aW9uKSxcbiAgICAgICAgZW5kOiBmcmFtaW5nUmFuZ2UuZW5kXG4gICAgfSwgZGF0ZUVudik7XG4gICAgLy8gdGhlIHJlY3VycmVuY2UgcGx1Z2lucyBkb24ndCBndWFyYW50ZWUgdGhhdCBhbGwtZGF5IGV2ZW50cyBhcmUgc3RhcnQtb2YtZGF5LCBzbyB3ZSBoYXZlIHRvXG4gICAgaWYgKGV2ZW50RGVmLmFsbERheSkge1xuICAgICAgICBtYXJrZXJzID0gbWFya2Vycy5tYXAoc3RhcnRPZkRheSk7XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJzO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuLy8gTWVyZ2VzIGFuIGFycmF5IG9mIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3QuXG4vLyBUaGUgc2Vjb25kIGFyZ3VtZW50IGFsbG93cyBmb3IgYW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgd2hvJ3Mgb2JqZWN0IHZhbHVlcyB3aWxsIGJlIG1lcmdlZCB0b2dldGhlci5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMocHJvcE9ianMsIGNvbXBsZXhQcm9wcykge1xuICAgIHZhciBkZXN0ID0ge307XG4gICAgdmFyIGk7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGNvbXBsZXhPYmpzO1xuICAgIHZhciBqO1xuICAgIHZhciB2YWw7XG4gICAgdmFyIHByb3BzO1xuICAgIGlmIChjb21wbGV4UHJvcHMpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBsZXhQcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmFtZSA9IGNvbXBsZXhQcm9wc1tpXTtcbiAgICAgICAgICAgIGNvbXBsZXhPYmpzID0gW107XG4gICAgICAgICAgICAvLyBjb2xsZWN0IHRoZSB0cmFpbGluZyBvYmplY3QgdmFsdWVzLCBzdG9wcGluZyB3aGVuIGEgbm9uLW9iamVjdCBpcyBkaXNjb3ZlcmVkXG4gICAgICAgICAgICBmb3IgKGogPSBwcm9wT2Jqcy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHByb3BPYmpzW2pdW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXhPYmpzLnVuc2hpZnQodmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHZhbDsgLy8gaWYgdGhlcmUgd2VyZSBubyBvYmplY3RzLCB0aGlzIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiB0aGUgdHJhaWxpbmcgdmFsdWVzIHdlcmUgb2JqZWN0cywgdXNlIHRoZSBtZXJnZWQgdmFsdWVcbiAgICAgICAgICAgIGlmIChjb21wbGV4T2Jqcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZXN0W25hbWVdID0gbWVyZ2VQcm9wcyhjb21wbGV4T2Jqcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29weSB2YWx1ZXMgaW50byB0aGUgZGVzdGluYXRpb24sIGdvaW5nIGZyb20gbGFzdCB0byBmaXJzdFxuICAgIGZvciAoaSA9IHByb3BPYmpzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHByb3BzID0gcHJvcE9ianNbaV07XG4gICAgICAgIGZvciAobmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBkZXN0KSkgeyAvLyBpZiBhbHJlYWR5IGFzc2lnbmVkIGJ5IHByZXZpb3VzIHByb3BzIG9yIGNvbXBsZXggcHJvcHMsIGRvbid0IHJlYXNzaWduXG4gICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xufVxuZnVuY3Rpb24gZmlsdGVySGFzaChoYXNoLCBmdW5jKSB7XG4gICAgdmFyIGZpbHRlcmVkID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGhhc2gpIHtcbiAgICAgICAgaWYgKGZ1bmMoaGFzaFtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFtrZXldID0gaGFzaFtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbmZ1bmN0aW9uIG1hcEhhc2goaGFzaCwgZnVuYykge1xuICAgIHZhciBuZXdIYXNoID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGhhc2gpIHtcbiAgICAgICAgbmV3SGFzaFtrZXldID0gZnVuYyhoYXNoW2tleV0sIGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdIYXNoO1xufVxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYSkge1xuICAgIHZhciBoYXNoID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhXzEgPSBhOyBfaSA8IGFfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBhXzFbX2ldO1xuICAgICAgICBoYXNoW2l0ZW1dID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG59XG5mdW5jdGlvbiBoYXNoVmFsdWVzVG9BcnJheShvYmopIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgYS5wdXNoKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBpc1Byb3BzRXF1YWwob2JqMCwgb2JqMSkge1xuICAgIGZvciAodmFyIGtleSBpbiBvYmowKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iajAsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICghKGtleSBpbiBvYmoxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqMSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmoxLCBrZXkpKSB7XG4gICAgICAgICAgICBpZiAob2JqMFtrZXldICE9PSBvYmoxW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRXZlbnRzKHJhd0V2ZW50cywgc291cmNlSWQsIGNhbGVuZGFyLCBhbGxvd09wZW5SYW5nZSkge1xuICAgIHZhciBldmVudFN0b3JlID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCByYXdFdmVudHNfMSA9IHJhd0V2ZW50czsgX2kgPCByYXdFdmVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJhd0V2ZW50ID0gcmF3RXZlbnRzXzFbX2ldO1xuICAgICAgICB2YXIgdHVwbGUgPSBwYXJzZUV2ZW50KHJhd0V2ZW50LCBzb3VyY2VJZCwgY2FsZW5kYXIsIGFsbG93T3BlblJhbmdlKTtcbiAgICAgICAgaWYgKHR1cGxlKSB7XG4gICAgICAgICAgICBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50U3RvcmU7XG59XG5mdW5jdGlvbiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSkge1xuICAgIGlmIChldmVudFN0b3JlID09PSB2b2lkIDApIHsgZXZlbnRTdG9yZSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyB9XG4gICAgZXZlbnRTdG9yZS5kZWZzW3R1cGxlLmRlZi5kZWZJZF0gPSB0dXBsZS5kZWY7XG4gICAgaWYgKHR1cGxlLmluc3RhbmNlKSB7XG4gICAgICAgIGV2ZW50U3RvcmUuaW5zdGFuY2VzW3R1cGxlLmluc3RhbmNlLmluc3RhbmNlSWRdID0gdHVwbGUuaW5zdGFuY2U7XG4gICAgfVxuICAgIHJldHVybiBldmVudFN0b3JlO1xufVxuZnVuY3Rpb24gZXhwYW5kUmVjdXJyaW5nKGV2ZW50U3RvcmUsIGZyYW1pbmdSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgdmFyIGRlZnMgPSBldmVudFN0b3JlLmRlZnMsIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIC8vIHJlbW92ZSBleGlzdGluZyByZWN1cnJpbmcgaW5zdGFuY2VzXG4gICAgaW5zdGFuY2VzID0gZmlsdGVySGFzaChpbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gIWRlZnNbaW5zdGFuY2UuZGVmSWRdLnJlY3VycmluZ0RlZjtcbiAgICB9KTtcbiAgICBmb3IgKHZhciBkZWZJZCBpbiBkZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZzW2RlZklkXTtcbiAgICAgICAgaWYgKGRlZi5yZWN1cnJpbmdEZWYpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGRlZi5yZWN1cnJpbmdEZWYuZHVyYXRpb247XG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkZWYuYWxsRGF5ID9cbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24gOlxuICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0cyA9IGV4cGFuZFJlY3VycmluZ1JhbmdlcyhkZWYsIGR1cmF0aW9uLCBmcmFtaW5nUmFuZ2UsIGNhbGVuZGFyLmRhdGVFbnYsIGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5yZWN1cnJpbmdUeXBlcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHN0YXJ0c18xID0gc3RhcnRzOyBfaSA8IHN0YXJ0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHN0YXJ0c18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVFdmVudEluc3RhbmNlKGRlZklkLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBkYXRlRW52LmFkZChzdGFydCwgZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZGVmczogZGVmcywgaW5zdGFuY2VzOiBpbnN0YW5jZXMgfTtcbn1cbi8vIHJldHJpZXZlcyBldmVudHMgdGhhdCBoYXZlIHRoZSBzYW1lIGdyb3VwSWQgYXMgdGhlIGluc3RhbmNlIHNwZWNpZmllZCBieSBgaW5zdGFuY2VJZGBcbi8vIG9yIHRoZXkgYXJlIHRoZSBzYW1lIGFzIHRoZSBpbnN0YW5jZS5cbi8vIHdoeSBtaWdodCBpbnN0YW5jZUlkIG5vdCBiZSBpbiB0aGUgc3RvcmU/IGFuIGV2ZW50IGZyb20gYW5vdGhlciBjYWxlbmRhcj9cbmZ1bmN0aW9uIGdldFJlbGV2YW50RXZlbnRzKGV2ZW50U3RvcmUsIGluc3RhbmNlSWQpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBldmVudFN0b3JlLmluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIGRlZl8xID0gZXZlbnRTdG9yZS5kZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgLy8gZ2V0IGV2ZW50cy9pbnN0YW5jZXMgd2l0aCBzYW1lIGdyb3VwXG4gICAgICAgIHZhciBuZXdTdG9yZSA9IGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChsb29rRGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNFdmVudERlZnNHcm91cGVkKGRlZl8xLCBsb29rRGVmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGFkZCB0aGUgb3JpZ2luYWxcbiAgICAgICAgLy8gVE9ETzogd2lzaCB3ZSBjb3VsZCB1c2UgZXZlbnRUdXBsZVRvU3RvcmUgb3Igc29tZXRoaW5nIGxpa2UgaXRcbiAgICAgICAgbmV3U3RvcmUuZGVmc1tkZWZfMS5kZWZJZF0gPSBkZWZfMTtcbiAgICAgICAgbmV3U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgIHJldHVybiBuZXdTdG9yZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xufVxuZnVuY3Rpb24gaXNFdmVudERlZnNHcm91cGVkKGRlZjAsIGRlZjEpIHtcbiAgICByZXR1cm4gQm9vbGVhbihkZWYwLmdyb3VwSWQgJiYgZGVmMC5ncm91cElkID09PSBkZWYxLmdyb3VwSWQpO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtUmF3RXZlbnRzKHJhd0V2ZW50cywgZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGNhbEVhY2hUcmFuc2Zvcm0gPSBjYWxlbmRhci5vcHQoJ2V2ZW50RGF0YVRyYW5zZm9ybScpO1xuICAgIHZhciBzb3VyY2VFYWNoVHJhbnNmb3JtID0gZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5ldmVudERhdGFUcmFuc2Zvcm0gOiBudWxsO1xuICAgIGlmIChzb3VyY2VFYWNoVHJhbnNmb3JtKSB7XG4gICAgICAgIHJhd0V2ZW50cyA9IHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIHNvdXJjZUVhY2hUcmFuc2Zvcm0pO1xuICAgIH1cbiAgICBpZiAoY2FsRWFjaFRyYW5zZm9ybSkge1xuICAgICAgICByYXdFdmVudHMgPSB0cmFuc2Zvcm1FYWNoUmF3RXZlbnQocmF3RXZlbnRzLCBjYWxFYWNoVHJhbnNmb3JtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhd0V2ZW50cztcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIGZ1bmMpIHtcbiAgICB2YXIgcmVmaW5lZEV2ZW50cztcbiAgICBpZiAoIWZ1bmMpIHtcbiAgICAgICAgcmVmaW5lZEV2ZW50cyA9IHJhd0V2ZW50cztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlZmluZWRFdmVudHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByYXdFdmVudHNfMiA9IHJhd0V2ZW50czsgX2kgPCByYXdFdmVudHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByYXdFdmVudCA9IHJhd0V2ZW50c18yW19pXTtcbiAgICAgICAgICAgIHZhciByZWZpbmVkRXZlbnQgPSBmdW5jKHJhd0V2ZW50KTtcbiAgICAgICAgICAgIGlmIChyZWZpbmVkRXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZWZpbmVkRXZlbnRzLnB1c2gocmVmaW5lZEV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlZmluZWRFdmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVmaW5lZEV2ZW50cy5wdXNoKHJhd0V2ZW50KTtcbiAgICAgICAgICAgIH0gLy8gaWYgYSBkaWZmZXJlbnQgZmFsc3kgdmFsdWUsIGRvIG5vdGhpbmdcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmaW5lZEV2ZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpIHtcbiAgICByZXR1cm4geyBkZWZzOiB7fSwgaW5zdGFuY2VzOiB7fSB9O1xufVxuZnVuY3Rpb24gbWVyZ2VFdmVudFN0b3JlcyhzdG9yZTAsIHN0b3JlMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlZnM6IF9fYXNzaWduKHt9LCBzdG9yZTAuZGVmcywgc3RvcmUxLmRlZnMpLFxuICAgICAgICBpbnN0YW5jZXM6IF9fYXNzaWduKHt9LCBzdG9yZTAuaW5zdGFuY2VzLCBzdG9yZTEuaW5zdGFuY2VzKVxuICAgIH07XG59XG5mdW5jdGlvbiBmaWx0ZXJFdmVudFN0b3JlRGVmcyhldmVudFN0b3JlLCBmaWx0ZXJGdW5jKSB7XG4gICAgdmFyIGRlZnMgPSBmaWx0ZXJIYXNoKGV2ZW50U3RvcmUuZGVmcywgZmlsdGVyRnVuYyk7XG4gICAgdmFyIGluc3RhbmNlcyA9IGZpbHRlckhhc2goZXZlbnRTdG9yZS5pbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gZGVmc1tpbnN0YW5jZS5kZWZJZF07IC8vIHN0aWxsIGV4aXN0cz9cbiAgICB9KTtcbiAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVJhbmdlKGlucHV0LCBkYXRlRW52KSB7XG4gICAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgICB2YXIgZW5kID0gbnVsbDtcbiAgICBpZiAoaW5wdXQuc3RhcnQpIHtcbiAgICAgICAgc3RhcnQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihpbnB1dC5zdGFydCk7XG4gICAgfVxuICAgIGlmIChpbnB1dC5lbmQpIHtcbiAgICAgICAgZW5kID0gZGF0ZUVudi5jcmVhdGVNYXJrZXIoaW5wdXQuZW5kKTtcbiAgICB9XG4gICAgaWYgKCFzdGFydCAmJiAhZW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgJiYgZW5kICYmIGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG59XG4vLyBTSURFLUVGRkVDVDogd2lsbCBtdXRhdGUgcmFuZ2VzLlxuLy8gV2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgcmVzdWx0LlxuZnVuY3Rpb24gaW52ZXJ0UmFuZ2VzKHJhbmdlcywgY29uc3RyYWludFJhbmdlKSB7XG4gICAgdmFyIGludmVydGVkUmFuZ2VzID0gW107XG4gICAgdmFyIHN0YXJ0ID0gY29uc3RyYWludFJhbmdlLnN0YXJ0OyAvLyB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyByYW5nZS4gdGhlIHN0YXJ0IG9mIHRoZSBuZXcgcmFuZ2VcbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0ZVJhbmdlO1xuICAgIC8vIHJhbmdlcyBuZWVkIHRvIGJlIGluIG9yZGVyLiByZXF1aXJlZCBmb3Igb3VyIGRhdGUtd2Fsa2luZyBhbGdvcml0aG1cbiAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGVSYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgLy8gYWRkIHRoZSBzcGFuIG9mIHRpbWUgYmVmb3JlIHRoZSBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgICAgICBpZiAoZGF0ZVJhbmdlLnN0YXJ0ID4gc3RhcnQpIHsgLy8gY29tcGFyZSBtaWxsaXNlY29uZCB0aW1lIChza2lwIGFueSBhbWJpZyBsb2dpYylcbiAgICAgICAgICAgIGludmVydGVkUmFuZ2VzLnB1c2goeyBzdGFydDogc3RhcnQsIGVuZDogZGF0ZVJhbmdlLnN0YXJ0IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlUmFuZ2UuZW5kID4gc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZVJhbmdlLmVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgdGhlIHNwYW4gb2YgdGltZSBhZnRlciB0aGUgbGFzdCBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgIGlmIChzdGFydCA8IGNvbnN0cmFpbnRSYW5nZS5lbmQpIHsgLy8gY29tcGFyZSBtaWxsaXNlY29uZCB0aW1lIChza2lwIGFueSBhbWJpZyBsb2dpYylcbiAgICAgICAgaW52ZXJ0ZWRSYW5nZXMucHVzaCh7IHN0YXJ0OiBzdGFydCwgZW5kOiBjb25zdHJhaW50UmFuZ2UuZW5kIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW52ZXJ0ZWRSYW5nZXM7XG59XG5mdW5jdGlvbiBjb21wYXJlUmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgcmV0dXJuIHJhbmdlMC5zdGFydC52YWx1ZU9mKCkgLSByYW5nZTEuc3RhcnQudmFsdWVPZigpOyAvLyBlYXJsaWVyIHJhbmdlcyBnbyBmaXJzdFxufVxuZnVuY3Rpb24gaW50ZXJzZWN0UmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgdmFyIHN0YXJ0ID0gcmFuZ2UwLnN0YXJ0O1xuICAgIHZhciBlbmQgPSByYW5nZTAuZW5kO1xuICAgIHZhciBuZXdSYW5nZSA9IG51bGw7XG4gICAgaWYgKHJhbmdlMS5zdGFydCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2UxLnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSBuZXcgRGF0ZShNYXRoLm1heChzdGFydC52YWx1ZU9mKCksIHJhbmdlMS5zdGFydC52YWx1ZU9mKCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmFuZ2UxLmVuZCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChlbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZCA9IHJhbmdlMS5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBuZXcgRGF0ZShNYXRoLm1pbihlbmQudmFsdWVPZigpLCByYW5nZTEuZW5kLnZhbHVlT2YoKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdGFydCA9PT0gbnVsbCB8fCBlbmQgPT09IG51bGwgfHwgc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgbmV3UmFuZ2UgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1JhbmdlO1xufVxuZnVuY3Rpb24gcmFuZ2VzRXF1YWwocmFuZ2UwLCByYW5nZTEpIHtcbiAgICByZXR1cm4gKHJhbmdlMC5zdGFydCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTAuc3RhcnQudmFsdWVPZigpKSA9PT0gKHJhbmdlMS5zdGFydCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTEuc3RhcnQudmFsdWVPZigpKSAmJlxuICAgICAgICAocmFuZ2UwLmVuZCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTAuZW5kLnZhbHVlT2YoKSkgPT09IChyYW5nZTEuZW5kID09PSBudWxsID8gbnVsbCA6IHJhbmdlMS5lbmQudmFsdWVPZigpKTtcbn1cbmZ1bmN0aW9uIHJhbmdlc0ludGVyc2VjdChyYW5nZTAsIHJhbmdlMSkge1xuICAgIHJldHVybiAocmFuZ2UwLmVuZCA9PT0gbnVsbCB8fCByYW5nZTEuc3RhcnQgPT09IG51bGwgfHwgcmFuZ2UwLmVuZCA+IHJhbmdlMS5zdGFydCkgJiZcbiAgICAgICAgKHJhbmdlMC5zdGFydCA9PT0gbnVsbCB8fCByYW5nZTEuZW5kID09PSBudWxsIHx8IHJhbmdlMC5zdGFydCA8IHJhbmdlMS5lbmQpO1xufVxuZnVuY3Rpb24gcmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpIHtcbiAgICByZXR1cm4gKG91dGVyUmFuZ2Uuc3RhcnQgPT09IG51bGwgfHwgKGlubmVyUmFuZ2Uuc3RhcnQgIT09IG51bGwgJiYgaW5uZXJSYW5nZS5zdGFydCA+PSBvdXRlclJhbmdlLnN0YXJ0KSkgJiZcbiAgICAgICAgKG91dGVyUmFuZ2UuZW5kID09PSBudWxsIHx8IChpbm5lclJhbmdlLmVuZCAhPT0gbnVsbCAmJiBpbm5lclJhbmdlLmVuZCA8PSBvdXRlclJhbmdlLmVuZCkpO1xufVxuZnVuY3Rpb24gcmFuZ2VDb250YWluc01hcmtlcihyYW5nZSwgZGF0ZSkge1xuICAgIHJldHVybiAocmFuZ2Uuc3RhcnQgPT09IG51bGwgfHwgZGF0ZSA+PSByYW5nZS5zdGFydCkgJiZcbiAgICAgICAgKHJhbmdlLmVuZCA9PT0gbnVsbCB8fCBkYXRlIDwgcmFuZ2UuZW5kKTtcbn1cbi8vIElmIHRoZSBnaXZlbiBkYXRlIGlzIG5vdCB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlLCBtb3ZlIGl0IGluc2lkZS5cbi8vIChJZiBpdCdzIHBhc3QgdGhlIGVuZCwgbWFrZSBpdCBvbmUgbWlsbGlzZWNvbmQgYmVmb3JlIHRoZSBlbmQpLlxuZnVuY3Rpb24gY29uc3RyYWluTWFya2VyVG9SYW5nZShkYXRlLCByYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsICYmIGRhdGUgPCByYW5nZS5zdGFydCkge1xuICAgICAgICByZXR1cm4gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCAmJiBkYXRlID49IHJhbmdlLmVuZCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUocmFuZ2UuZW5kLnZhbHVlT2YoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXhhY3QoYXJyYXksIGV4YWN0VmFsKSB7XG4gICAgdmFyIHJlbW92ZUNudCA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gZXhhY3RWYWwpIHtcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIHJlbW92ZUNudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW1vdmVDbnQ7XG59XG5mdW5jdGlvbiBpc0FycmF5c0VxdWFsKGEwLCBhMSkge1xuICAgIHZhciBsZW4gPSBhMC5sZW5ndGg7XG4gICAgdmFyIGk7XG4gICAgaWYgKGxlbiAhPT0gYTEubGVuZ3RoKSB7IC8vIG5vdCBhcnJheT8gb3Igbm90IHNhbWUgbGVuZ3RoP1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoYTBbaV0gIT09IGExW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemUod29ya2VyRnVuYykge1xuICAgIHZhciBhcmdzO1xuICAgIHZhciByZXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFhcmdzIHx8ICFpc0FycmF5c0VxdWFsKGFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXMgPSB3b3JrZXJGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuLypcbmFsd2F5cyBleGVjdXRlcyB0aGUgd29ya2VyRnVuYywgYnV0IGlmIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gdGhlIHByZXZpb3VzIHJlc3VsdCxcbnJldHVybiB0aGUgcHJldmlvdXMgcmVzdWx0IGluc3RlYWQuXG4qL1xuZnVuY3Rpb24gbWVtb2l6ZU91dHB1dCh3b3JrZXJGdW5jLCBlcXVhbGl0eUZ1bmMpIHtcbiAgICB2YXIgY2FjaGVkUmVzID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3UmVzID0gd29ya2VyRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoY2FjaGVkUmVzID09PSBudWxsIHx8ICEoY2FjaGVkUmVzID09PSBuZXdSZXMgfHwgZXF1YWxpdHlGdW5jKGNhY2hlZFJlcywgbmV3UmVzKSkpIHtcbiAgICAgICAgICAgIGNhY2hlZFJlcyA9IG5ld1JlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkUmVzO1xuICAgIH07XG59XG5cbnZhciBFWFRFTkRFRF9TRVRUSU5HU19BTkRfU0VWRVJJVElFUyA9IHtcbiAgICB3ZWVrOiAzLFxuICAgIHNlcGFyYXRvcjogMCxcbiAgICBvbWl0WmVyb01pbnV0ZTogMCxcbiAgICBtZXJpZGllbTogMCxcbiAgICBvbWl0Q29tbWFzOiAwXG59O1xudmFyIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTID0ge1xuICAgIHRpbWVab25lTmFtZTogNyxcbiAgICBlcmE6IDYsXG4gICAgeWVhcjogNSxcbiAgICBtb250aDogNCxcbiAgICBkYXk6IDIsXG4gICAgd2Vla2RheTogMixcbiAgICBob3VyOiAxLFxuICAgIG1pbnV0ZTogMSxcbiAgICBzZWNvbmQ6IDFcbn07XG52YXIgTUVSSURJRU1fUkUgPSAvXFxzKihbYXBdKVxcLj9tXFwuPy9pOyAvLyBlYXRzIHVwIGxlYWRpbmcgc3BhY2VzIHRvb1xudmFyIENPTU1BX1JFID0gLywvZzsgLy8gd2UgbmVlZCByZSBmb3IgZ2xvYmFsbmVzc1xudmFyIE1VTFRJX1NQQUNFX1JFID0gL1xccysvZztcbnZhciBMVFJfUkUgPSAvXFx1MjAwZS9nOyAvLyBjb250cm9sIGNoYXJhY3RlclxudmFyIFVUQ19SRSA9IC9VVEN8R01ULztcbnZhciBOYXRpdmVGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmF0aXZlRm9ybWF0dGVyKGZvcm1hdFNldHRpbmdzKSB7XG4gICAgICAgIHZhciBzdGFuZGFyZERhdGVQcm9wcyA9IHt9O1xuICAgICAgICB2YXIgZXh0ZW5kZWRTZXR0aW5ncyA9IHt9O1xuICAgICAgICB2YXIgc2V2ZXJpdHkgPSAwO1xuICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gZm9ybWF0U2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChuYW1lXzEgaW4gRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVMpIHtcbiAgICAgICAgICAgICAgICBleHRlbmRlZFNldHRpbmdzW25hbWVfMV0gPSBmb3JtYXRTZXR0aW5nc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgIHNldmVyaXR5ID0gTWF0aC5tYXgoRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVNbbmFtZV8xXSwgc2V2ZXJpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmREYXRlUHJvcHNbbmFtZV8xXSA9IGZvcm1hdFNldHRpbmdzW25hbWVfMV07XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVfMSBpbiBTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFUykge1xuICAgICAgICAgICAgICAgICAgICBzZXZlcml0eSA9IE1hdGgubWF4KFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTW25hbWVfMV0sIHNldmVyaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFuZGFyZERhdGVQcm9wcyA9IHN0YW5kYXJkRGF0ZVByb3BzO1xuICAgICAgICB0aGlzLmV4dGVuZGVkU2V0dGluZ3MgPSBleHRlbmRlZFNldHRpbmdzO1xuICAgICAgICB0aGlzLnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgICAgIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyA9IG1lbW9pemUoYnVpbGRGb3JtYXR0aW5nRnVuYyk7XG4gICAgfVxuICAgIE5hdGl2ZUZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyh0aGlzLnN0YW5kYXJkRGF0ZVByb3BzLCB0aGlzLmV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpKGRhdGUpO1xuICAgIH07XG4gICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5mb3JtYXRSYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHN0YW5kYXJkRGF0ZVByb3BzID0gX2Euc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MgPSBfYS5leHRlbmRlZFNldHRpbmdzO1xuICAgICAgICB2YXIgZGlmZlNldmVyaXR5ID0gY29tcHV0ZU1hcmtlckRpZmZTZXZlcml0eShzdGFydC5tYXJrZXIsIGVuZC5tYXJrZXIsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pO1xuICAgICAgICBpZiAoIWRpZmZTZXZlcml0eSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsID0gZGlmZlNldmVyaXR5O1xuICAgICAgICBpZiAoYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsID4gMSAmJiAvLyB0aGUgdHdvIGRhdGVzIGFyZSBkaWZmZXJlbnQgaW4gYSB3YXkgdGhhdCdzIGxhcmdlciBzY2FsZSB0aGFuIHRpbWVcbiAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy55ZWFyID09PSAnbnVtZXJpYycgfHwgc3RhbmRhcmREYXRlUHJvcHMueWVhciA9PT0gJzItZGlnaXQnKSAmJlxuICAgICAgICAgICAgKHN0YW5kYXJkRGF0ZVByb3BzLm1vbnRoID09PSAnbnVtZXJpYycgfHwgc3RhbmRhcmREYXRlUHJvcHMubW9udGggPT09ICcyLWRpZ2l0JykgJiZcbiAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICdudW1lcmljJyB8fCBzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICcyLWRpZ2l0JykpIHtcbiAgICAgICAgICAgIGJpZ2dlc3RVbml0Rm9yUGFydGlhbCA9IDE7IC8vIG1ha2UgaXQgbG9vayBsaWtlIHRoZSBkYXRlcyBhcmUgb25seSBkaWZmZXJlbnQgaW4gdGVybXMgb2YgdGltZVxuICAgICAgICB9XG4gICAgICAgIHZhciBmdWxsMCA9IHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgdmFyIGZ1bGwxID0gdGhpcy5mb3JtYXQoZW5kLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGZ1bGwwID09PSBmdWxsMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bGwwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0aWFsRGF0ZVByb3BzID0gY29tcHV0ZVBhcnRpYWxGb3JtYXR0aW5nT3B0aW9ucyhzdGFuZGFyZERhdGVQcm9wcywgYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsKTtcbiAgICAgICAgdmFyIHBhcnRpYWxGb3JtYXR0aW5nRnVuYyA9IGJ1aWxkRm9ybWF0dGluZ0Z1bmMocGFydGlhbERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCk7XG4gICAgICAgIHZhciBwYXJ0aWFsMCA9IHBhcnRpYWxGb3JtYXR0aW5nRnVuYyhzdGFydCk7XG4gICAgICAgIHZhciBwYXJ0aWFsMSA9IHBhcnRpYWxGb3JtYXR0aW5nRnVuYyhlbmQpO1xuICAgICAgICB2YXIgaW5zZXJ0aW9uID0gZmluZENvbW1vbkluc2VydGlvbihmdWxsMCwgcGFydGlhbDAsIGZ1bGwxLCBwYXJ0aWFsMSk7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBleHRlbmRlZFNldHRpbmdzLnNlcGFyYXRvciB8fCAnJztcbiAgICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGluc2VydGlvbi5iZWZvcmUgKyBwYXJ0aWFsMCArIHNlcGFyYXRvciArIHBhcnRpYWwxICsgaW5zZXJ0aW9uLmFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdWxsMCArIHNlcGFyYXRvciArIGZ1bGwxO1xuICAgIH07XG4gICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5nZXRMYXJnZXN0VW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnNldmVyaXR5KSB7XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21vbnRoJztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3dlZWsnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RheSc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBOYXRpdmVGb3JtYXR0ZXI7XG59KCkpO1xuZnVuY3Rpb24gYnVpbGRGb3JtYXR0aW5nRnVuYyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCkge1xuICAgIHZhciBzdGFuZGFyZERhdGVQcm9wQ250ID0gT2JqZWN0LmtleXMoc3RhbmRhcmREYXRlUHJvcHMpLmxlbmd0aDtcbiAgICBpZiAoc3RhbmRhcmREYXRlUHJvcENudCA9PT0gMSAmJiBzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0VGltZVpvbmVPZmZzZXQoZGF0ZS50aW1lWm9uZU9mZnNldCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChzdGFuZGFyZERhdGVQcm9wQ250ID09PSAwICYmIGV4dGVuZGVkU2V0dGluZ3Mud2Vlaykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRXZWVrTnVtYmVyKGNvbnRleHQuY29tcHV0ZVdlZWtOdW1iZXIoZGF0ZS5tYXJrZXIpLCBjb250ZXh0LndlZWtMYWJlbCwgY29udGV4dC5sb2NhbGUsIGV4dGVuZGVkU2V0dGluZ3Mud2Vlayk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBidWlsZE5hdGl2ZUZvcm1hdHRpbmdGdW5jKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGJ1aWxkTmF0aXZlRm9ybWF0dGluZ0Z1bmMoc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpIHtcbiAgICBzdGFuZGFyZERhdGVQcm9wcyA9IF9fYXNzaWduKHt9LCBzdGFuZGFyZERhdGVQcm9wcyk7IC8vIGNvcHlcbiAgICBleHRlbmRlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIGV4dGVuZGVkU2V0dGluZ3MpOyAvLyBjb3B5XG4gICAgc2FuaXRpemVTZXR0aW5ncyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncyk7XG4gICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmUgPSAnVVRDJzsgLy8gd2UgbGV2ZXJhZ2UgdGhlIG9ubHkgZ3VhcmFudGVlZCB0aW1lWm9uZSBmb3Igb3VyIFVUQyBtYXJrZXJzXG4gICAgdmFyIG5vcm1hbEZvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCBzdGFuZGFyZERhdGVQcm9wcyk7XG4gICAgdmFyIHplcm9Gb3JtYXQ7IC8vIG5lZWRlZD9cbiAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0WmVyb01pbnV0ZSkge1xuICAgICAgICB2YXIgemVyb1Byb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTtcbiAgICAgICAgZGVsZXRlIHplcm9Qcm9wcy5taW51dGU7IC8vIHNlY29uZHMgYW5kIG1zIHdlcmUgYWxyZWFkeSBjb25zaWRlcmVkIGluIHNhbml0aXplU2V0dGluZ3NcbiAgICAgICAgemVyb0Zvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCB6ZXJvUHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IGRhdGUubWFya2VyO1xuICAgICAgICB2YXIgZm9ybWF0O1xuICAgICAgICBpZiAoemVyb0Zvcm1hdCAmJiAhbWFya2VyLmdldFVUQ01pbnV0ZXMoKSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gemVyb0Zvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IG5vcm1hbEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcyA9IGZvcm1hdC5mb3JtYXQobWFya2VyKTtcbiAgICAgICAgcmV0dXJuIHBvc3RQcm9jZXNzKHMsIGRhdGUsIHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2FuaXRpemVTZXR0aW5ncyhzdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncykge1xuICAgIC8vIGRlYWwgd2l0aCBhIGJyb3dzZXIgaW5jb25zaXN0ZW5jeSB3aGVyZSBmb3JtYXR0aW5nIHRoZSB0aW1lem9uZVxuICAgIC8vIHJlcXVpcmVzIHRoYXQgdGhlIGhvdXIvbWludXRlIGJlIHByZXNlbnQuXG4gICAgaWYgKHN0YW5kYXJkRGF0ZVByb3BzLnRpbWVab25lTmFtZSkge1xuICAgICAgICBpZiAoIXN0YW5kYXJkRGF0ZVByb3BzLmhvdXIpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzLmhvdXIgPSAnMi1kaWdpdCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFuZGFyZERhdGVQcm9wcy5taW51dGUpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzLm1pbnV0ZSA9ICcyLWRpZ2l0JztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBvbmx5IHN1cHBvcnQgc2hvcnQgdGltZXpvbmUgbmFtZXNcbiAgICBpZiAoc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID09PSAnbG9uZycpIHtcbiAgICAgICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID0gJ3Nob3J0JztcbiAgICB9XG4gICAgLy8gaWYgcmVxdWVzdGluZyB0byBkaXNwbGF5IHNlY29uZHMsIE1VU1QgZGlzcGxheSBtaW51dGVzXG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGUgJiYgKHN0YW5kYXJkRGF0ZVByb3BzLnNlY29uZCB8fCBzdGFuZGFyZERhdGVQcm9wcy5taWxsaXNlY29uZCkpIHtcbiAgICAgICAgZGVsZXRlIGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGU7XG4gICAgfVxufVxuZnVuY3Rpb24gcG9zdFByb2Nlc3MocywgZGF0ZSwgc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpIHtcbiAgICBzID0gcy5yZXBsYWNlKExUUl9SRSwgJycpOyAvLyByZW1vdmUgbGVmdC10by1yaWdodCBjb250cm9sIGNoYXJzLiBkbyBmaXJzdC4gZ29vZCBmb3Igb3RoZXIgcmVnZXhlc1xuICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgcyA9IGluamVjdFR6b1N0cihzLCAoY29udGV4dC50aW1lWm9uZSA9PT0gJ1VUQycgfHwgZGF0ZS50aW1lWm9uZU9mZnNldCA9PSBudWxsKSA/XG4gICAgICAgICAgICAnVVRDJyA6IC8vIGltcG9ydGFudCB0byBub3JtYWxpemUgZm9yIElFLCB3aGljaCBkb2VzIFwiR01UXCJcbiAgICAgICAgICAgIGZvcm1hdFRpbWVab25lT2Zmc2V0KGRhdGUudGltZVpvbmVPZmZzZXQpKTtcbiAgICB9XG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdENvbW1hcykge1xuICAgICAgICBzID0gcy5yZXBsYWNlKENPTU1BX1JFLCAnJykudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0WmVyb01pbnV0ZSkge1xuICAgICAgICBzID0gcy5yZXBsYWNlKCc6MDAnLCAnJyk7IC8vIHplcm9Gb3JtYXQgZG9lc24ndCBhbHdheXMgYWNoaWV2ZSB0aGlzXG4gICAgfVxuICAgIC8vIF4gZG8gYW55dGhpbmcgdGhhdCBtaWdodCBjcmVhdGUgYWRqYWNlbnQgc3BhY2VzIGJlZm9yZSB0aGlzIHBvaW50LFxuICAgIC8vIGJlY2F1c2UgTUVSSURJRU1fUkUgbGlrZXMgdG8gZWF0IHVwIGxvYWRpbmcgc3BhY2VzXG4gICAgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09IGZhbHNlKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsICcnKS50cmltKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICduYXJyb3cnKSB7IC8vIGEvcFxuICAgICAgICBzID0gcy5yZXBsYWNlKE1FUklESUVNX1JFLCBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbTEudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICdzaG9ydCcpIHsgLy8gYW0vcG1cbiAgICAgICAgcyA9IHMucmVwbGFjZShNRVJJRElFTV9SRSwgZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG0xLnRvTG9jYWxlTG93ZXJDYXNlKCkgKyAnbSc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSAnbG93ZXJjYXNlJykgeyAvLyBvdGhlciBtZXJpZGllbSB0cmFuc2Zvcm1lcnMgYWxyZWFkeSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlXG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCkge1xuICAgICAgICAgICAgcmV0dXJuIG0wLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzID0gcy5yZXBsYWNlKE1VTFRJX1NQQUNFX1JFLCAnICcpO1xuICAgIHMgPSBzLnRyaW0oKTtcbiAgICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIGluamVjdFR6b1N0cihzLCB0em9TdHIpIHtcbiAgICB2YXIgcmVwbGFjZWQgPSBmYWxzZTtcbiAgICBzID0gcy5yZXBsYWNlKFVUQ19SRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXBsYWNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0em9TdHI7XG4gICAgfSk7XG4gICAgLy8gSUUxMSBkb2Vzbid0IGluY2x1ZGUgVVRDL0dNVCBpbiB0aGUgb3JpZ2luYWwgc3RyaW5nLCBzbyBhcHBlbmQgdG8gZW5kXG4gICAgaWYgKCFyZXBsYWNlZCkge1xuICAgICAgICBzICs9ICcgJyArIHR6b1N0cjtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyKG51bSwgd2Vla0xhYmVsLCBsb2NhbGUsIGRpc3BsYXkpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBpZiAoZGlzcGxheSA9PT0gJ25hcnJvdycpIHtcbiAgICAgICAgcGFydHMucHVzaCh3ZWVrTGFiZWwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkaXNwbGF5ID09PSAnc2hvcnQnKSB7XG4gICAgICAgIHBhcnRzLnB1c2god2Vla0xhYmVsLCAnICcpO1xuICAgIH1cbiAgICAvLyBvdGhlcndpc2UsIGNvbnNpZGVyZWQgJ251bWVyaWMnXG4gICAgcGFydHMucHVzaChsb2NhbGUuc2ltcGxlTnVtYmVyRm9ybWF0LmZvcm1hdChudW0pKTtcbiAgICBpZiAobG9jYWxlLm9wdGlvbnMuaXNSdGwpIHsgLy8gVE9ETzogdXNlIGNvbnRyb2wgY2hhcmFjdGVycyBpbnN0ZWFkP1xuICAgICAgICBwYXJ0cy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn1cbi8vIFJhbmdlIEZvcm1hdHRpbmcgVXRpbHNcbi8vIDAgPSBleGFjdGx5IHRoZSBzYW1lXG4vLyAxID0gZGlmZmVyZW50IGJ5IHRpbWVcbi8vIGFuZCBiaWdnZXJcbmZ1bmN0aW9uIGNvbXB1dGVNYXJrZXJEaWZmU2V2ZXJpdHkoZDAsIGQxLCBjYSkge1xuICAgIGlmIChjYS5nZXRNYXJrZXJZZWFyKGQwKSAhPT0gY2EuZ2V0TWFya2VyWWVhcihkMSkpIHtcbiAgICAgICAgcmV0dXJuIDU7XG4gICAgfVxuICAgIGlmIChjYS5nZXRNYXJrZXJNb250aChkMCkgIT09IGNhLmdldE1hcmtlck1vbnRoKGQxKSkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgaWYgKGNhLmdldE1hcmtlckRheShkMCkgIT09IGNhLmdldE1hcmtlckRheShkMSkpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIGlmICh0aW1lQXNNcyhkMCkgIT09IHRpbWVBc01zKGQxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMsIGJpZ2dlc3RVbml0KSB7XG4gICAgdmFyIHBhcnRpYWxPcHRpb25zID0ge307XG4gICAgZm9yICh2YXIgbmFtZV8yIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEobmFtZV8yIGluIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTKSB8fCAvLyBub3QgYSBkYXRlIHBhcnQgcHJvcCAobGlrZSB0aW1lWm9uZSlcbiAgICAgICAgICAgIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTW25hbWVfMl0gPD0gYmlnZ2VzdFVuaXQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPcHRpb25zW25hbWVfMl0gPSBvcHRpb25zW25hbWVfMl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRpYWxPcHRpb25zO1xufVxuZnVuY3Rpb24gZmluZENvbW1vbkluc2VydGlvbihmdWxsMCwgcGFydGlhbDAsIGZ1bGwxLCBwYXJ0aWFsMSkge1xuICAgIHZhciBpMCA9IDA7XG4gICAgd2hpbGUgKGkwIDwgZnVsbDAubGVuZ3RoKSB7XG4gICAgICAgIHZhciBmb3VuZDAgPSBmdWxsMC5pbmRleE9mKHBhcnRpYWwwLCBpMCk7XG4gICAgICAgIGlmIChmb3VuZDAgPT09IC0xKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVmb3JlMCA9IGZ1bGwwLnN1YnN0cigwLCBmb3VuZDApO1xuICAgICAgICBpMCA9IGZvdW5kMCArIHBhcnRpYWwwLmxlbmd0aDtcbiAgICAgICAgdmFyIGFmdGVyMCA9IGZ1bGwwLnN1YnN0cihpMCk7XG4gICAgICAgIHZhciBpMSA9IDA7XG4gICAgICAgIHdoaWxlIChpMSA8IGZ1bGwxLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGZvdW5kMSA9IGZ1bGwxLmluZGV4T2YocGFydGlhbDEsIGkxKTtcbiAgICAgICAgICAgIGlmIChmb3VuZDEgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYmVmb3JlMSA9IGZ1bGwxLnN1YnN0cigwLCBmb3VuZDEpO1xuICAgICAgICAgICAgaTEgPSBmb3VuZDEgKyBwYXJ0aWFsMS5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIxID0gZnVsbDEuc3Vic3RyKGkxKTtcbiAgICAgICAgICAgIGlmIChiZWZvcmUwID09PSBiZWZvcmUxICYmIGFmdGVyMCA9PT0gYWZ0ZXIxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlOiBiZWZvcmUwLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcjogYWZ0ZXIwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLypcblRPRE86IGZpeCB0aGUgdGVybWlub2xvZ3kgb2YgXCJmb3JtYXR0ZXJcIiB2cyBcImZvcm1hdHRpbmcgZnVuY1wiXG4qL1xuLypcbkF0IHRoZSB0aW1lIG9mIGluc3RhbnRpYXRpb24sIHRoaXMgb2JqZWN0IGRvZXMgbm90IGtub3cgd2hpY2ggY21kLWZvcm1hdHRpbmcgc3lzdGVtIGl0IHdpbGwgdXNlLlxuSXQgcmVjZWl2ZXMgdGhpcyBhdCB0aGUgdGltZSBvZiBmb3JtYXR0aW5nLCBhcyBhIHNldHRpbmcuXG4qL1xudmFyIENtZEZvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDbWRGb3JtYXR0ZXIoY21kU3RyLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgdGhpcy5jbWRTdHIgPSBjbWRTdHI7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yO1xuICAgIH1cbiAgICBDbWRGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmNtZEZvcm1hdHRlcih0aGlzLmNtZFN0ciwgY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoZGF0ZSwgbnVsbCwgY29udGV4dCwgdGhpcy5zZXBhcmF0b3IpKTtcbiAgICB9O1xuICAgIENtZEZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5jbWRGb3JtYXR0ZXIodGhpcy5jbWRTdHIsIGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQsIHRoaXMuc2VwYXJhdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ21kRm9ybWF0dGVyO1xufSgpKTtcblxudmFyIEZ1bmNGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnVuY0Zvcm1hdHRlcihmdW5jKSB7XG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XG4gICAgfVxuICAgIEZ1bmNGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmMoY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoZGF0ZSwgbnVsbCwgY29udGV4dCkpO1xuICAgIH07XG4gICAgRnVuY0Zvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jKGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQpKTtcbiAgICB9O1xuICAgIHJldHVybiBGdW5jRm9ybWF0dGVyO1xufSgpKTtcblxuLy8gRm9ybWF0dGVyIE9iamVjdCBDcmVhdGlvblxuZnVuY3Rpb24gY3JlYXRlRm9ybWF0dGVyKGlucHV0LCBkZWZhdWx0U2VwYXJhdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdFNlcGFyYXRvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlucHV0ID0gX19hc3NpZ24oeyBzZXBhcmF0b3I6IGRlZmF1bHRTZXBhcmF0b3IgfSwgaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTmF0aXZlRm9ybWF0dGVyKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbmV3IENtZEZvcm1hdHRlcihpbnB1dCwgZGVmYXVsdFNlcGFyYXRvcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmNGb3JtYXR0ZXIoaW5wdXQpO1xuICAgIH1cbn1cbi8vIFN0cmluZyBVdGlsc1xuLy8gdGltZVpvbmVPZmZzZXQgaXMgaW4gbWludXRlc1xuZnVuY3Rpb24gYnVpbGRJc29TdHJpbmcobWFya2VyLCB0aW1lWm9uZU9mZnNldCwgc3RyaXBaZXJvVGltZSkge1xuICAgIGlmIChzdHJpcFplcm9UaW1lID09PSB2b2lkIDApIHsgc3RyaXBaZXJvVGltZSA9IGZhbHNlOyB9XG4gICAgdmFyIHMgPSBtYXJrZXIudG9JU09TdHJpbmcoKTtcbiAgICBzID0gcy5yZXBsYWNlKCcuMDAwJywgJycpO1xuICAgIGlmIChzdHJpcFplcm9UaW1lKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoJ1QwMDowMDowMFonLCAnJyk7XG4gICAgfVxuICAgIGlmIChzLmxlbmd0aCA+IDEwKSB7IC8vIHRpbWUgcGFydCB3YXNuJ3Qgc3RyaXBwZWQsIGNhbiBhZGQgdGltZXpvbmUgaW5mb1xuICAgICAgICBpZiAodGltZVpvbmVPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aW1lWm9uZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsIGZvcm1hdFRpbWVab25lT2Zmc2V0KHRpbWVab25lT2Zmc2V0LCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBpdHMgVVRDLTAgYW5kIHdlIHdhbnQgdG8ga2VlcCB0aGUgWlxuICAgIH1cbiAgICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIGZvcm1hdElzb1RpbWVTdHJpbmcobWFya2VyKSB7XG4gICAgcmV0dXJuIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENIb3VycygpLCAyKSArICc6JyArXG4gICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENNaW51dGVzKCksIDIpICsgJzonICtcbiAgICAgICAgcGFkU3RhcnQobWFya2VyLmdldFVUQ1NlY29uZHMoKSwgMik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lWm9uZU9mZnNldChtaW51dGVzLCBkb0lzbykge1xuICAgIGlmIChkb0lzbyA9PT0gdm9pZCAwKSB7IGRvSXNvID0gZmFsc2U7IH1cbiAgICB2YXIgc2lnbiA9IG1pbnV0ZXMgPCAwID8gJy0nIDogJysnO1xuICAgIHZhciBhYnMgPSBNYXRoLmFicyhtaW51dGVzKTtcbiAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFicyAvIDYwKTtcbiAgICB2YXIgbWlucyA9IE1hdGgucm91bmQoYWJzICUgNjApO1xuICAgIGlmIChkb0lzbykge1xuICAgICAgICByZXR1cm4gc2lnbiArIHBhZFN0YXJ0KGhvdXJzLCAyKSArICc6JyArIHBhZFN0YXJ0KG1pbnMsIDIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdHTVQnICsgc2lnbiArIGhvdXJzICsgKG1pbnMgPyAnOicgKyBwYWRTdGFydChtaW5zLCAyKSA6ICcnKTtcbiAgICB9XG59XG4vLyBBcmcgVXRpbHNcbmZ1bmN0aW9uIGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKHN0YXJ0LCBlbmQsIGNvbnRleHQsIHNlcGFyYXRvcikge1xuICAgIHZhciBzdGFydEluZm8gPSBleHBhbmRab25lZE1hcmtlcihzdGFydCwgY29udGV4dC5jYWxlbmRhclN5c3RlbSk7XG4gICAgdmFyIGVuZEluZm8gPSBlbmQgPyBleHBhbmRab25lZE1hcmtlcihlbmQsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRlOiBzdGFydEluZm8sXG4gICAgICAgIHN0YXJ0OiBzdGFydEluZm8sXG4gICAgICAgIGVuZDogZW5kSW5mbyxcbiAgICAgICAgdGltZVpvbmU6IGNvbnRleHQudGltZVpvbmUsXG4gICAgICAgIGxvY2FsZUNvZGVzOiBjb250ZXh0LmxvY2FsZS5jb2RlcyxcbiAgICAgICAgc2VwYXJhdG9yOiBzZXBhcmF0b3JcbiAgICB9O1xufVxuZnVuY3Rpb24gZXhwYW5kWm9uZWRNYXJrZXIoZGF0ZUluZm8sIGNhbGVuZGFyU3lzdGVtKSB7XG4gICAgdmFyIGEgPSBjYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KGRhdGVJbmZvLm1hcmtlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFya2VyOiBkYXRlSW5mby5tYXJrZXIsXG4gICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlSW5mby50aW1lWm9uZU9mZnNldCxcbiAgICAgICAgYXJyYXk6IGEsXG4gICAgICAgIHllYXI6IGFbMF0sXG4gICAgICAgIG1vbnRoOiBhWzFdLFxuICAgICAgICBkYXk6IGFbMl0sXG4gICAgICAgIGhvdXI6IGFbM10sXG4gICAgICAgIG1pbnV0ZTogYVs0XSxcbiAgICAgICAgc2Vjb25kOiBhWzVdLFxuICAgICAgICBtaWxsaXNlY29uZDogYVs2XVxuICAgIH07XG59XG5cbnZhciBFdmVudFNvdXJjZUFwaSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudFNvdXJjZUFwaShjYWxlbmRhciwgaW50ZXJuYWxFdmVudFNvdXJjZSkge1xuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxFdmVudFNvdXJjZSA9IGludGVybmFsRXZlbnRTb3VyY2U7XG4gICAgfVxuICAgIEV2ZW50U291cmNlQXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnLFxuICAgICAgICAgICAgc291cmNlSWQ6IHRoaXMuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEV2ZW50U291cmNlQXBpLnByb3RvdHlwZS5yZWZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyxcbiAgICAgICAgICAgIHNvdXJjZUlkczogW3RoaXMuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZF1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlLnB1YmxpY0lkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgIC8vIG9ubHkgcmVsZXZhbnQgdG8ganNvbi1mZWVkIGV2ZW50IHNvdXJjZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlLm1ldGEudXJsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRXZlbnRTb3VyY2VBcGk7XG59KCkpO1xuXG52YXIgRXZlbnRBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRBcGkoY2FsZW5kYXIsIGRlZiwgaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5fY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlIHx8IG51bGw7XG4gICAgfVxuICAgIC8qXG4gICAgVE9ETzogbWFrZSBldmVudCBzdHJ1Y3QgbW9yZSByZXNwb25zaWJsZSBmb3IgdGhpc1xuICAgICovXG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmIChuYW1lIGluIERBVEVfUFJPUFMpIDtcbiAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBOT05fREFURV9QUk9QUykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBOT05fREFURV9QUk9QU1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHZhbCA9IE5PTl9EQVRFX1BST1BTW25hbWVdKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wczogKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgaW4gVU5TQ09QRURfRVZFTlRfVUlfUFJPUFMpIHtcbiAgICAgICAgICAgIHZhciB1aSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgVU5TQ09QRURfRVZFTlRfVUlfUFJPUFNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QU1tuYW1lXSh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICB1aSA9IHsgYmFja2dyb3VuZENvbG9yOiB2YWwsIGJvcmRlckNvbG9yOiB2YWwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdlZGl0YWJsZScpIHtcbiAgICAgICAgICAgICAgICB1aSA9IHsgc3RhcnRFZGl0YWJsZTogdmFsLCBkdXJhdGlvbkVkaXRhYmxlOiB2YWwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVpID0gKF9iID0ge30sIF9iW25hbWVdID0gdmFsLCBfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wczogeyB1aTogdWkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXRFeHRlbmRlZFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5tdXRhdGUoe1xuICAgICAgICAgICAgZXh0ZW5kZWRQcm9wczogKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSlcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBFdmVudEFwaS5wcm90b3R5cGUuc2V0U3RhcnQgPSBmdW5jdGlvbiAoc3RhcnRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICBpZiAoc3RhcnQgJiYgdGhpcy5faW5zdGFuY2UpIHsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgdmFyIHN0YXJ0RGVsdGEgPSBkaWZmRGF0ZXMoaW5zdGFuY2VSYW5nZS5zdGFydCwgc3RhcnQsIGRhdGVFbnYsIG9wdGlvbnMuZ3JhbnVsYXJpdHkpOyAvLyB3aGF0IGlmIHBhcnNlZCBiYWQhP1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWFpbnRhaW5EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogc3RhcnREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogc3RhcnREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEVuZCA9IGZ1bmN0aW9uIChlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIGlmIChlbmRJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZERlbHRhID0gZGlmZkRhdGVzKHRoaXMuX2luc3RhbmNlLnJhbmdlLmVuZCwgZW5kLCBkYXRlRW52LCBvcHRpb25zLmdyYW51bGFyaXR5KTtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGVuZERlbHRhOiBlbmREZWx0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhbmRhcmRQcm9wczogeyBoYXNFbmQ6IGZhbHNlIH0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXREYXRlcyA9IGZ1bmN0aW9uIChzdGFydElucHV0LCBlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBzdGFuZGFyZFByb3BzID0geyBhbGxEYXk6IG9wdGlvbnMuYWxsRGF5IH07XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICB2YXIgZW5kO1xuICAgICAgICBpZiAoIXN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICBpZiAoIWVuZCkgeyAvLyBUT0RPOiB3YXJuaW5nIGlmIHBhcnNlZCBiYWRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgLy8gd2hlbiBjb21wdXRpbmcgdGhlIGRpZmYgZm9yIGFuIGV2ZW50IGJlaW5nIGNvbnZlcnRlZCB0byBhbGwtZGF5LFxuICAgICAgICAgICAgLy8gY29tcHV0ZSBkaWZmIG9mZiBvZiB0aGUgYWxsLWRheSB2YWx1ZXMgdGhlIHdheSBldmVudC1tdXRhdGlvbiBkb2VzLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsRGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VSYW5nZSA9IGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UoaW5zdGFuY2VSYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhcnREZWx0YSA9IGRpZmZEYXRlcyhpbnN0YW5jZVJhbmdlLnN0YXJ0LCBzdGFydCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZERlbHRhID0gZGlmZkRhdGVzKGluc3RhbmNlUmFuZ2UuZW5kLCBlbmQsIGRhdGVFbnYsIG9wdGlvbnMuZ3JhbnVsYXJpdHkpO1xuICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbnNFcXVhbChzdGFydERlbHRhLCBlbmREZWx0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBkYXRlc0RlbHRhOiBzdGFydERlbHRhLCBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFydERlbHRhOiBzdGFydERlbHRhLCBlbmREZWx0YTogZW5kRGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIG1lYW5zIFwiY2xlYXIgdGhlIGVuZFwiXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGRhdGVzRGVsdGE6IHN0YXJ0RGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlU3RhcnQgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFydERlbHRhOiBkZWx0YSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLm1vdmVFbmQgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBlbmREZWx0YTogZGVsdGEgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlRGF0ZXMgPSBmdW5jdGlvbiAoZGVsdGFJbnB1dCkge1xuICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBkYXRlc0RlbHRhOiBkZWx0YSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEFsbERheSA9IGZ1bmN0aW9uIChhbGxEYXksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogYWxsRGF5IH07XG4gICAgICAgIHZhciBtYWludGFpbkR1cmF0aW9uID0gb3B0aW9ucy5tYWludGFpbkR1cmF0aW9uO1xuICAgICAgICBpZiAobWFpbnRhaW5EdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtYWludGFpbkR1cmF0aW9uID0gdGhpcy5fY2FsZW5kYXIub3B0KCdhbGxEYXlNYWludGFpbkR1cmF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RlZi5hbGxEYXkgIT09IGFsbERheSkge1xuICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBtYWludGFpbkR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXV0YXRlKHsgc3RhbmRhcmRQcm9wczogc3RhbmRhcmRQcm9wcyB9KTtcbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5mb3JtYXRSYW5nZSA9IGZ1bmN0aW9uIChmb3JtYXRJbnB1dCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuX2NhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyKGZvcm1hdElucHV0LCB0aGlzLl9jYWxlbmRhci5vcHQoJ2RlZmF1bHRSYW5nZVNlcGFyYXRvcicpKTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5oYXNFbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCBpbnN0YW5jZS5yYW5nZS5lbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBpbnN0YW5jZS5mb3JjZWRTdGFydFR6byxcbiAgICAgICAgICAgICAgICBmb3JjZWRFbmRUem86IGluc3RhbmNlLmZvcmNlZEVuZFR6b1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoaW5zdGFuY2UucmFuZ2Uuc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgIGZvcmNlZFR6bzogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEFwaS5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIHZhciBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnTVVUQVRFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZDogaW5zdGFuY2UuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgZnJvbUFwaTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IHRoaXMuX2NhbGVuZGFyLnN0YXRlLmV2ZW50U3RvcmU7XG4gICAgICAgICAgICB0aGlzLl9kZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmLmRlZklkXTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2UuaW5zdGFuY2VJZF07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50QXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRfREVGJyxcbiAgICAgICAgICAgIGRlZklkOiB0aGlzLl9kZWYuZGVmSWRcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInNvdXJjZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZUlkID0gdGhpcy5fZGVmLnNvdXJjZUlkO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLl9jYWxlbmRhciwgdGhpcy5fY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJzdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlID9cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxlbmRhci5kYXRlRW52LnRvRGF0ZSh0aGlzLl9pbnN0YW5jZS5yYW5nZS5zdGFydCkgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZW5kXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2luc3RhbmNlICYmIHRoaXMuX2RlZi5oYXNFbmQpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxlbmRhci5kYXRlRW52LnRvRGF0ZSh0aGlzLl9pbnN0YW5jZS5yYW5nZS5lbmQpIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgLy8gY29tcHV0YWJsZSBwcm9wcyB0aGF0IGFsbCBhY2Nlc3MgdGhlIGRlZlxuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgVHlwZVNjcmlwdC1jb21wYXRpYmxlIHdheSB0byBkbyB0aGlzIGF0IHNjYWxlXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnB1YmxpY0lkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImdyb3VwSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5ncm91cElkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImFsbERheVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLmFsbERheTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnRpdGxlOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVybDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJyZW5kZXJpbmdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5yZW5kZXJpbmc7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRFZGl0YWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLnN0YXJ0RWRpdGFibGU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZHVyYXRpb25FZGl0YWJsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmR1cmF0aW9uRWRpdGFibGU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY29uc3RyYWludFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmNvbnN0cmFpbnRzWzBdIHx8IG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwib3ZlcmxhcFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLm92ZXJsYXA7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYWxsb3dcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5hbGxvd3NbMF0gfHwgbnVsbDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5iYWNrZ3JvdW5kQ29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYm9yZGVyQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5ib3JkZXJDb2xvcjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0ZXh0Q29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS50ZXh0Q29sb3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY2xhc3NOYW1lc1wiLCB7XG4gICAgICAgIC8vIE5PVEU6IHVzZXIgY2FuJ3QgbW9kaWZ5IHRoZXNlIGJlY2F1c2UgT2JqZWN0LmZyZWV6ZSB3YXMgY2FsbGVkIGluIGV2ZW50LWRlZiBwYXJzaW5nXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmNsYXNzTmFtZXM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZXh0ZW5kZWRQcm9wc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLmV4dGVuZGVkUHJvcHM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBFdmVudEFwaTtcbn0oKSk7XG5cbi8qXG5TcGVjaWZ5aW5nIG5leHREYXlUaHJlc2hvbGQgc2lnbmFscyB0aGF0IGFsbC1kYXkgcmFuZ2VzIHNob3VsZCBiZSBzbGljZWQuXG4qL1xuZnVuY3Rpb24gc2xpY2VFdmVudFN0b3JlKGV2ZW50U3RvcmUsIGV2ZW50VWlCYXNlcywgZnJhbWluZ1JhbmdlLCBuZXh0RGF5VGhyZXNob2xkKSB7XG4gICAgdmFyIGludmVyc2VCZ0J5R3JvdXBJZCA9IHt9O1xuICAgIHZhciBpbnZlcnNlQmdCeURlZklkID0ge307XG4gICAgdmFyIGRlZkJ5R3JvdXBJZCA9IHt9O1xuICAgIHZhciBiZ1JhbmdlcyA9IFtdO1xuICAgIHZhciBmZ1JhbmdlcyA9IFtdO1xuICAgIHZhciBldmVudFVpcyA9IGNvbXBpbGVFdmVudFVpcyhldmVudFN0b3JlLmRlZnMsIGV2ZW50VWlCYXNlcyk7XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmSWRdO1xuICAgICAgICBpZiAoZGVmLnJlbmRlcmluZyA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgIGlmIChkZWYuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5R3JvdXBJZFtkZWYuZ3JvdXBJZF0gPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZkJ5R3JvdXBJZFtkZWYuZ3JvdXBJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmQnlHcm91cElkW2RlZi5ncm91cElkXSA9IGRlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeURlZklkW2RlZklkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gZXZlbnRTdG9yZS5pbnN0YW5jZXMpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICB2YXIgdWkgPSBldmVudFVpc1tkZWYuZGVmSWRdO1xuICAgICAgICB2YXIgb3JpZ1JhbmdlID0gaW5zdGFuY2UucmFuZ2U7XG4gICAgICAgIHZhciBub3JtYWxSYW5nZSA9ICghZGVmLmFsbERheSAmJiBuZXh0RGF5VGhyZXNob2xkKSA/XG4gICAgICAgICAgICBjb21wdXRlVmlzaWJsZURheVJhbmdlKG9yaWdSYW5nZSwgbmV4dERheVRocmVzaG9sZCkgOlxuICAgICAgICAgICAgb3JpZ1JhbmdlO1xuICAgICAgICB2YXIgc2xpY2VkUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMobm9ybWFsUmFuZ2UsIGZyYW1pbmdSYW5nZSk7XG4gICAgICAgIGlmIChzbGljZWRSYW5nZSkge1xuICAgICAgICAgICAgaWYgKGRlZi5yZW5kZXJpbmcgPT09ICdpbnZlcnNlLWJhY2tncm91bmQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5ncm91cElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5R3JvdXBJZFtkZWYuZ3JvdXBJZF0ucHVzaChzbGljZWRSYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeURlZklkW2luc3RhbmNlLmRlZklkXS5wdXNoKHNsaWNlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZGVmLnJlbmRlcmluZyA9PT0gJ2JhY2tncm91bmQnID8gYmdSYW5nZXMgOiBmZ1JhbmdlcykucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgICAgICAgICB1aTogdWksXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHNsaWNlZFJhbmdlLFxuICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBub3JtYWxSYW5nZS5zdGFydCAmJiBub3JtYWxSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IHNsaWNlZFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IG5vcm1hbFJhbmdlLmVuZCAmJiBub3JtYWxSYW5nZS5lbmQudmFsdWVPZigpID09PSBzbGljZWRSYW5nZS5lbmQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgZ3JvdXBJZCBpbiBpbnZlcnNlQmdCeUdyb3VwSWQpIHsgLy8gQlkgR1JPVVBcbiAgICAgICAgdmFyIHJhbmdlcyA9IGludmVyc2VCZ0J5R3JvdXBJZFtncm91cElkXTtcbiAgICAgICAgdmFyIGludmVydGVkUmFuZ2VzID0gaW52ZXJ0UmFuZ2VzKHJhbmdlcywgZnJhbWluZ1JhbmdlKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBpbnZlcnRlZFJhbmdlc18xID0gaW52ZXJ0ZWRSYW5nZXM7IF9pIDwgaW52ZXJ0ZWRSYW5nZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpbnZlcnRlZFJhbmdlID0gaW52ZXJ0ZWRSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmQnlHcm91cElkW2dyb3VwSWRdO1xuICAgICAgICAgICAgdmFyIHVpID0gZXZlbnRVaXNbZGVmLmRlZklkXTtcbiAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgICAgIHVpOiB1aSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICByYW5nZTogaW52ZXJ0ZWRSYW5nZSxcbiAgICAgICAgICAgICAgICBpc1N0YXJ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGRlZklkIGluIGludmVyc2VCZ0J5RGVmSWQpIHtcbiAgICAgICAgdmFyIHJhbmdlcyA9IGludmVyc2VCZ0J5RGVmSWRbZGVmSWRdO1xuICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBpbnZlcnRSYW5nZXMocmFuZ2VzLCBmcmFtaW5nUmFuZ2UpO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGludmVydGVkUmFuZ2VzXzIgPSBpbnZlcnRlZFJhbmdlczsgX2EgPCBpbnZlcnRlZFJhbmdlc18yLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIGludmVydGVkUmFuZ2UgPSBpbnZlcnRlZFJhbmdlc18yW19hXTtcbiAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRlZjogZXZlbnRTdG9yZS5kZWZzW2RlZklkXSxcbiAgICAgICAgICAgICAgICB1aTogZXZlbnRVaXNbZGVmSWRdLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBpbnZlcnRlZFJhbmdlLFxuICAgICAgICAgICAgICAgIGlzU3RhcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYmc6IGJnUmFuZ2VzLCBmZzogZmdSYW5nZXMgfTtcbn1cbmZ1bmN0aW9uIGhhc0JnUmVuZGVyaW5nKGRlZikge1xuICAgIHJldHVybiBkZWYucmVuZGVyaW5nID09PSAnYmFja2dyb3VuZCcgfHwgZGVmLnJlbmRlcmluZyA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCc7XG59XG5mdW5jdGlvbiBmaWx0ZXJTZWdzVmlhRWxzKHZpZXcsIHNlZ3MsIGlzTWlycm9yKSB7XG4gICAgaWYgKHZpZXcuaGFzUHVibGljSGFuZGxlcnMoJ2V2ZW50UmVuZGVyJykpIHtcbiAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgIHZhciBjdXN0b20gPSB2aWV3LnB1YmxpY2x5VHJpZ2dlcignZXZlbnRSZW5kZXInLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKHZpZXcuY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlZy5pc1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VnLmlzRW5kLFxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBpbmNsdWRlIHNlZy5yYW5nZSBvbmNlIGFsbCBjb21wb25lbnRzIGNvbnNpc3RlbnRseSBnZW5lcmF0ZSBpdFxuICAgICAgICAgICAgICAgICAgICBlbDogc2VnLmVsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAoY3VzdG9tID09PSBmYWxzZSkgeyAvLyBtZWFucyBkb24ndCByZW5kZXIgYXQgYWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VzdG9tICYmIGN1c3RvbSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHNlZy5lbCA9IGN1c3RvbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMVtfaV07XG4gICAgICAgIHNldEVsU2VnKHNlZy5lbCwgc2VnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlZ3M7XG59XG5mdW5jdGlvbiBzZXRFbFNlZyhlbCwgc2VnKSB7XG4gICAgZWwuZmNTZWcgPSBzZWc7XG59XG5mdW5jdGlvbiBnZXRFbFNlZyhlbCkge1xuICAgIHJldHVybiBlbC5mY1NlZyB8fCBudWxsO1xufVxuLy8gZXZlbnQgdWkgY29tcHV0YXRpb25cbmZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpcyhldmVudERlZnMsIGV2ZW50VWlCYXNlcykge1xuICAgIHJldHVybiBtYXBIYXNoKGV2ZW50RGVmcywgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlRXZlbnRVaShldmVudERlZiwgZXZlbnRVaUJhc2VzKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpKGV2ZW50RGVmLCBldmVudFVpQmFzZXMpIHtcbiAgICB2YXIgdWlzID0gW107XG4gICAgaWYgKGV2ZW50VWlCYXNlc1snJ10pIHtcbiAgICAgICAgdWlzLnB1c2goZXZlbnRVaUJhc2VzWycnXSk7XG4gICAgfVxuICAgIGlmIChldmVudFVpQmFzZXNbZXZlbnREZWYuZGVmSWRdKSB7XG4gICAgICAgIHVpcy5wdXNoKGV2ZW50VWlCYXNlc1tldmVudERlZi5kZWZJZF0pO1xuICAgIH1cbiAgICB1aXMucHVzaChldmVudERlZi51aSk7XG4gICAgcmV0dXJuIGNvbWJpbmVFdmVudFVpcyh1aXMpO1xufVxuXG4vLyBhcHBsaWVzIHRoZSBtdXRhdGlvbiB0byBBTEwgZGVmcy9pbnN0YW5jZXMgd2l0aGluIHRoZSBldmVudCBzdG9yZVxuZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShldmVudFN0b3JlLCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjYWxlbmRhcikge1xuICAgIHZhciBldmVudENvbmZpZ3MgPSBjb21waWxlRXZlbnRVaXMoZXZlbnRTdG9yZS5kZWZzLCBldmVudENvbmZpZ0Jhc2UpO1xuICAgIHZhciBkZXN0ID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmSWRdO1xuICAgICAgICBkZXN0LmRlZnNbZGVmSWRdID0gYXBwbHlNdXRhdGlvblRvRXZlbnREZWYoZGVmLCBldmVudENvbmZpZ3NbZGVmSWRdLCBtdXRhdGlvbiwgY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycywgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGV2ZW50U3RvcmUuaW5zdGFuY2VzKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICB2YXIgZGVmID0gZGVzdC5kZWZzW2luc3RhbmNlLmRlZklkXTsgLy8gaW1wb3J0YW50IHRvIGdyYWIgdGhlIG5ld2x5IG1vZGlmaWVkIGRlZlxuICAgICAgICBkZXN0Lmluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50SW5zdGFuY2UoaW5zdGFuY2UsIGRlZiwgZXZlbnRDb25maWdzW2luc3RhbmNlLmRlZklkXSwgbXV0YXRpb24sIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59XG5mdW5jdGlvbiBhcHBseU11dGF0aW9uVG9FdmVudERlZihldmVudERlZiwgZXZlbnRDb25maWcsIG11dGF0aW9uLCBhcHBsaWVycywgY2FsZW5kYXIpIHtcbiAgICB2YXIgc3RhbmRhcmRQcm9wcyA9IG11dGF0aW9uLnN0YW5kYXJkUHJvcHMgfHwge307XG4gICAgLy8gaWYgaGFzRW5kIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQsIGd1ZXNzIGEgZ29vZCB2YWx1ZSBiYXNlZCBvbiBkZWx0YXMuXG4gICAgLy8gaWYgZHVyYXRpb24gd2lsbCBjaGFuZ2UsIHRoZXJlJ3Mgbm8gd2F5IHRoZSBkZWZhdWx0IGR1cmF0aW9uIHdpbGwgcGVyc2lzdCxcbiAgICAvLyBhbmQgdGh1cywgd2UgbmVlZCB0byBtYXJrIHRoZSBldmVudCBhcyBoYXZpbmcgYSByZWFsIGVuZFxuICAgIGlmIChzdGFuZGFyZFByb3BzLmhhc0VuZCA9PSBudWxsICYmXG4gICAgICAgIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUgJiZcbiAgICAgICAgKG11dGF0aW9uLnN0YXJ0RGVsdGEgfHwgbXV0YXRpb24uZW5kRGVsdGEpKSB7XG4gICAgICAgIHN0YW5kYXJkUHJvcHMuaGFzRW5kID0gdHJ1ZTsgLy8gVE9ETzogaXMgdGhpcyBtdXRhdGlvbiBva2F5P1xuICAgIH1cbiAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudERlZiwgc3RhbmRhcmRQcm9wcywgeyB1aTogX19hc3NpZ24oe30sIGV2ZW50RGVmLnVpLCBzdGFuZGFyZFByb3BzLnVpKSB9KTtcbiAgICBpZiAobXV0YXRpb24uZXh0ZW5kZWRQcm9wcykge1xuICAgICAgICBjb3B5LmV4dGVuZGVkUHJvcHMgPSBfX2Fzc2lnbih7fSwgY29weS5leHRlbmRlZFByb3BzLCBtdXRhdGlvbi5leHRlbmRlZFByb3BzKTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhcHBsaWVyc18xID0gYXBwbGllcnM7IF9pIDwgYXBwbGllcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGFwcGxpZXIgPSBhcHBsaWVyc18xW19pXTtcbiAgICAgICAgYXBwbGllcihjb3B5LCBtdXRhdGlvbiwgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBpZiAoIWNvcHkuaGFzRW5kICYmIGNhbGVuZGFyLm9wdCgnZm9yY2VFdmVudER1cmF0aW9uJykpIHtcbiAgICAgICAgY29weS5oYXNFbmQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn1cbmZ1bmN0aW9uIGFwcGx5TXV0YXRpb25Ub0V2ZW50SW5zdGFuY2UoZXZlbnRJbnN0YW5jZSwgZXZlbnREZWYsIC8vIG11c3QgZmlyc3QgYmUgbW9kaWZpZWQgYnkgYXBwbHlNdXRhdGlvblRvRXZlbnREZWZcbmV2ZW50Q29uZmlnLCBtdXRhdGlvbiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgdmFyIGZvcmNlQWxsRGF5ID0gbXV0YXRpb24uc3RhbmRhcmRQcm9wcyAmJiBtdXRhdGlvbi5zdGFuZGFyZFByb3BzLmFsbERheSA9PT0gdHJ1ZTtcbiAgICB2YXIgY2xlYXJFbmQgPSBtdXRhdGlvbi5zdGFuZGFyZFByb3BzICYmIG11dGF0aW9uLnN0YW5kYXJkUHJvcHMuaGFzRW5kID09PSBmYWxzZTtcbiAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudEluc3RhbmNlKTtcbiAgICBpZiAoZm9yY2VBbGxEYXkpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UoY29weS5yYW5nZSk7XG4gICAgfVxuICAgIGlmIChtdXRhdGlvbi5kYXRlc0RlbHRhICYmIGV2ZW50Q29uZmlnLnN0YXJ0RWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5kYXRlc0RlbHRhKSxcbiAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoY29weS5yYW5nZS5lbmQsIG11dGF0aW9uLmRhdGVzRGVsdGEpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChtdXRhdGlvbi5zdGFydERlbHRhICYmIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5zdGFydERlbHRhKSxcbiAgICAgICAgICAgIGVuZDogY29weS5yYW5nZS5lbmRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG11dGF0aW9uLmVuZERlbHRhICYmIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUpIHtcbiAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBjb3B5LnJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLmVuZCwgbXV0YXRpb24uZW5kRGVsdGEpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjbGVhckVuZCkge1xuICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IGNvcHkucmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGNhbGVuZGFyLmdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGluIGNhc2UgZXZlbnQgd2FzIGFsbC1kYXkgYnV0IHRoZSBzdXBwbGllZCBkZWx0YXMgd2VyZSBub3RcbiAgICAvLyBiZXR0ZXIgdXRpbCBmb3IgdGhpcz9cbiAgICBpZiAoZXZlbnREZWYuYWxsRGF5KSB7XG4gICAgICAgIGNvcHkucmFuZ2UgPSB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnRPZkRheShjb3B5LnJhbmdlLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogc3RhcnRPZkRheShjb3B5LnJhbmdlLmVuZClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIGludmFsaWQgZHVyYXRpb25zXG4gICAgaWYgKGNvcHkucmFuZ2UuZW5kIDwgY29weS5yYW5nZS5zdGFydCkge1xuICAgICAgICBjb3B5LnJhbmdlLmVuZCA9IGNhbGVuZGFyLmdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlRXZlbnRTdG9yZSAoZXZlbnRTdG9yZSwgYWN0aW9uLCBldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOiAvLyByYXdcbiAgICAgICAgICAgIHJldHVybiByZWNlaXZlUmF3RXZlbnRzKGV2ZW50U3RvcmUsIGV2ZW50U291cmNlc1thY3Rpb24uc291cmNlSWRdLCBhY3Rpb24uZmV0Y2hJZCwgYWN0aW9uLmZldGNoUmFuZ2UsIGFjdGlvbi5yYXdFdmVudHMsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnQUREX0VWRU5UUyc6IC8vIGFscmVhZHkgcGFyc2VkLCBidXQgbm90IGV4cGFuZGVkXG4gICAgICAgICAgICByZXR1cm4gYWRkRXZlbnQoZXZlbnRTdG9yZSwgYWN0aW9uLmV2ZW50U3RvcmUsIC8vIG5ldyBvbmVzXG4gICAgICAgICAgICBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbCwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdNRVJHRV9FVkVOVFMnOiAvLyBhbHJlYWR5IHBhcnNlZCBhbmQgZXhwYW5kZWRcbiAgICAgICAgICAgIHJldHVybiBtZXJnZUV2ZW50U3RvcmVzKGV2ZW50U3RvcmUsIGFjdGlvbi5ldmVudFN0b3JlKTtcbiAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBhbmRSZWN1cnJpbmcoZXZlbnRTdG9yZSwgZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudFN0b3JlO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdDSEFOR0VfVElNRVpPTkUnOlxuICAgICAgICAgICAgcmV0dXJuIHJlem9uZURhdGVzKGV2ZW50U3RvcmUsIGFjdGlvbi5vbGREYXRlRW52LCBjYWxlbmRhci5kYXRlRW52KTtcbiAgICAgICAgY2FzZSAnTVVUQVRFX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4gYXBwbHlNdXRhdGlvblRvUmVsYXRlZChldmVudFN0b3JlLCBhY3Rpb24uaW5zdGFuY2VJZCwgYWN0aW9uLm11dGF0aW9uLCBhY3Rpb24uZnJvbUFwaSwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfSU5TVEFOQ0VTJzpcbiAgICAgICAgICAgIHJldHVybiBleGNsdWRlSW5zdGFuY2VzKGV2ZW50U3RvcmUsIGFjdGlvbi5pbnN0YW5jZXMpO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfREVGJzpcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJFdmVudFN0b3JlRGVmcyhldmVudFN0b3JlLCBmdW5jdGlvbiAoZXZlbnREZWYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuZGVmSWQgIT09IGFjdGlvbi5kZWZJZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfU09VUkNFJzpcbiAgICAgICAgICAgIHJldHVybiBleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBhY3Rpb24uc291cmNlSWQpO1xuICAgICAgICBjYXNlICdSRU1PVkVfQUxMX0VWRU5UX1NPVVJDRVMnOlxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICAgICAgICAgIHJldHVybiAhZXZlbnREZWYuc291cmNlSWQ7IC8vIG9ubHkga2VlcCBldmVudHMgd2l0aCBubyBzb3VyY2UgaWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdSRU1PVkVfQUxMX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgIGNhc2UgJ1JFU0VUX0VWRU5UUyc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRlZnM6IGV2ZW50U3RvcmUuZGVmcyxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXM6IGV2ZW50U3RvcmUuaW5zdGFuY2VzXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjZWl2ZVJhd0V2ZW50cyhldmVudFN0b3JlLCBldmVudFNvdXJjZSwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSwgcmF3RXZlbnRzLCBjYWxlbmRhcikge1xuICAgIGlmIChldmVudFNvdXJjZSAmJiAvLyBub3QgYWxyZWFkeSByZW1vdmVkXG4gICAgICAgIGZldGNoSWQgPT09IGV2ZW50U291cmNlLmxhdGVzdEZldGNoSWQgLy8gVE9ETzogd2lzaCB0aGlzIGxvZ2ljIHdhcyBhbHdheXMgaW4gZXZlbnQtc291cmNlc1xuICAgICkge1xuICAgICAgICB2YXIgc3Vic2V0ID0gcGFyc2VFdmVudHModHJhbnNmb3JtUmF3RXZlbnRzKHJhd0V2ZW50cywgZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSwgZXZlbnRTb3VyY2Uuc291cmNlSWQsIGNhbGVuZGFyKTtcbiAgICAgICAgaWYgKGZldGNoUmFuZ2UpIHtcbiAgICAgICAgICAgIHN1YnNldCA9IGV4cGFuZFJlY3VycmluZyhzdWJzZXQsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVyZ2VFdmVudFN0b3JlcyhleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBldmVudFNvdXJjZS5zb3VyY2VJZCksIHN1YnNldCk7XG4gICAgfVxuICAgIHJldHVybiBldmVudFN0b3JlO1xufVxuZnVuY3Rpb24gYWRkRXZlbnQoZXZlbnRTdG9yZSwgc3Vic2V0LCBleHBhbmRSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICBpZiAoZXhwYW5kUmFuZ2UpIHtcbiAgICAgICAgc3Vic2V0ID0gZXhwYW5kUmVjdXJyaW5nKHN1YnNldCwgZXhwYW5kUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgc3Vic2V0KTtcbn1cbmZ1bmN0aW9uIHJlem9uZURhdGVzKGV2ZW50U3RvcmUsIG9sZERhdGVFbnYsIG5ld0RhdGVFbnYpIHtcbiAgICB2YXIgZGVmcyA9IGV2ZW50U3RvcmUuZGVmcztcbiAgICB2YXIgaW5zdGFuY2VzID0gbWFwSGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHZhciBkZWYgPSBkZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgaWYgKGRlZi5hbGxEYXkgfHwgZGVmLnJlY3VycmluZ0RlZikge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlOyAvLyBpc24ndCBkZXBlbmRlbnQgb24gdGltZXpvbmVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgaW5zdGFuY2UsIHsgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5ld0RhdGVFbnYuY3JlYXRlTWFya2VyKG9sZERhdGVFbnYudG9EYXRlKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCBpbnN0YW5jZS5mb3JjZWRTdGFydFR6bykpLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5ld0RhdGVFbnYuY3JlYXRlTWFya2VyKG9sZERhdGVFbnYudG9EYXRlKGluc3RhbmNlLnJhbmdlLmVuZCwgaW5zdGFuY2UuZm9yY2VkRW5kVHpvKSlcbiAgICAgICAgICAgICAgICB9LCBmb3JjZWRTdGFydFR6bzogbmV3RGF0ZUVudi5jYW5Db21wdXRlT2Zmc2V0ID8gbnVsbCA6IGluc3RhbmNlLmZvcmNlZFN0YXJ0VHpvLCBmb3JjZWRFbmRUem86IG5ld0RhdGVFbnYuY2FuQ29tcHV0ZU9mZnNldCA/IG51bGwgOiBpbnN0YW5jZS5mb3JjZWRFbmRUem8gfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xufVxuZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvUmVsYXRlZChldmVudFN0b3JlLCBpbnN0YW5jZUlkLCBtdXRhdGlvbiwgZnJvbUFwaSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVsZXZhbnQgPSBnZXRSZWxldmFudEV2ZW50cyhldmVudFN0b3JlLCBpbnN0YW5jZUlkKTtcbiAgICB2YXIgZXZlbnRDb25maWdCYXNlID0gZnJvbUFwaSA/XG4gICAgICAgIHsgJyc6IHtcbiAgICAgICAgICAgICAgICBzdGFydEVkaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uc3RyYWludHM6IFtdLFxuICAgICAgICAgICAgICAgIG92ZXJsYXA6IG51bGwsXG4gICAgICAgICAgICAgICAgYWxsb3dzOiBbXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnJyxcbiAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6ICcnLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXM6IFtdXG4gICAgICAgICAgICB9IH0gOlxuICAgICAgICBjYWxlbmRhci5ldmVudFVpQmFzZXM7XG4gICAgcmVsZXZhbnQgPSBhcHBseU11dGF0aW9uVG9FdmVudFN0b3JlKHJlbGV2YW50LCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjYWxlbmRhcik7XG4gICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgcmVsZXZhbnQpO1xufVxuZnVuY3Rpb24gZXhjbHVkZUV2ZW50c0J5U291cmNlSWQoZXZlbnRTdG9yZSwgc291cmNlSWQpIHtcbiAgICByZXR1cm4gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHJldHVybiBldmVudERlZi5zb3VyY2VJZCAhPT0gc291cmNlSWQ7XG4gICAgfSk7XG59XG4vLyBRVUVTVElPTjogd2h5IG5vdCBqdXN0IHJldHVybiBpbnN0YW5jZXM/IGRvIGEgZ2VuZXJhbCBvYmplY3QtcHJvcGVydHktZXhjbHVzaW9uIHV0aWxcbmZ1bmN0aW9uIGV4Y2x1ZGVJbnN0YW5jZXMoZXZlbnRTdG9yZSwgcmVtb3ZhbHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWZzOiBldmVudFN0b3JlLmRlZnMsXG4gICAgICAgIGluc3RhbmNlczogZmlsdGVySGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gIXJlbW92YWxzW2luc3RhbmNlLmluc3RhbmNlSWRdO1xuICAgICAgICB9KVxuICAgIH07XG59XG5cbi8vIGhpZ2gtbGV2ZWwgc2VnbWVudGluZy1hd2FyZSB0ZXN0ZXIgZnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gaXNOZXdQcm9wc1ZhbGlkKHsgZXZlbnREcmFnOiBpbnRlcmFjdGlvbiB9LCBjYWxlbmRhcik7IC8vIEhBQ0s6IHRoZSBldmVudERyYWcgcHJvcHMgaXMgdXNlZCBmb3IgQUxMIGludGVyYWN0aW9uc1xufVxuZnVuY3Rpb24gaXNEYXRlU2VsZWN0aW9uVmFsaWQoZGF0ZVNlbGVjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gaXNOZXdQcm9wc1ZhbGlkKHsgZGF0ZVNlbGVjdGlvbjogZGF0ZVNlbGVjdGlvbiB9LCBjYWxlbmRhcik7XG59XG5mdW5jdGlvbiBpc05ld1Byb3BzVmFsaWQobmV3UHJvcHMsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHZpZXcgPSBjYWxlbmRhci52aWV3O1xuICAgIHZhciBwcm9wcyA9IF9fYXNzaWduKHsgYnVzaW5lc3NIb3VyczogdmlldyA/IHZpZXcucHJvcHMuYnVzaW5lc3NIb3VycyA6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLCBkYXRlU2VsZWN0aW9uOiAnJywgZXZlbnRTdG9yZTogY2FsZW5kYXIuc3RhdGUuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzOiBjYWxlbmRhci5ldmVudFVpQmFzZXMsIGV2ZW50U2VsZWN0aW9uOiAnJywgZXZlbnREcmFnOiBudWxsLCBldmVudFJlc2l6ZTogbnVsbCB9LCBuZXdQcm9wcyk7XG4gICAgcmV0dXJuIChjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuaXNQcm9wc1ZhbGlkIHx8IGlzUHJvcHNWYWxpZCkocHJvcHMsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIGlzUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSB7XG4gICAgaWYgKGRhdGVTcGFuTWV0YSA9PT0gdm9pZCAwKSB7IGRhdGVTcGFuTWV0YSA9IHt9OyB9XG4gICAgaWYgKHN0YXRlLmV2ZW50RHJhZyAmJiAhaXNJbnRlcmFjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZGF0ZVNlbGVjdGlvbiAmJiAhaXNEYXRlU2VsZWN0aW9uUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8gTW92aW5nIEV2ZW50IFZhbGlkYXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gaXNJbnRlcmFjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykge1xuICAgIHZhciBpbnRlcmFjdGlvbiA9IHN0YXRlLmV2ZW50RHJhZzsgLy8gSEFDSzogdGhlIGV2ZW50RHJhZyBwcm9wcyBpcyB1c2VkIGZvciBBTEwgaW50ZXJhY3Rpb25zXG4gICAgdmFyIHN1YmplY3RFdmVudFN0b3JlID0gaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cztcbiAgICB2YXIgc3ViamVjdERlZnMgPSBzdWJqZWN0RXZlbnRTdG9yZS5kZWZzO1xuICAgIHZhciBzdWJqZWN0SW5zdGFuY2VzID0gc3ViamVjdEV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciBzdWJqZWN0Q29uZmlncyA9IGNvbXBpbGVFdmVudFVpcyhzdWJqZWN0RGVmcywgaW50ZXJhY3Rpb24uaXNFdmVudCA/XG4gICAgICAgIHN0YXRlLmV2ZW50VWlCYXNlcyA6XG4gICAgICAgIHsgJyc6IGNhbGVuZGFyLnNlbGVjdGlvbkNvbmZpZyB9IC8vIGlmIG5vdCBhIHJlYWwgZXZlbnQsIHZhbGlkYXRlIGFzIGEgc2VsZWN0aW9uXG4gICAgKTtcbiAgICBpZiAoZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgIHN1YmplY3RDb25maWdzID0gbWFwSGFzaChzdWJqZWN0Q29uZmlncywgZmlsdGVyQ29uZmlnKTtcbiAgICB9XG4gICAgdmFyIG90aGVyRXZlbnRTdG9yZSA9IGV4Y2x1ZGVJbnN0YW5jZXMoc3RhdGUuZXZlbnRTdG9yZSwgaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMuaW5zdGFuY2VzKTsgLy8gZXhjbHVkZSB0aGUgc3ViamVjdCBldmVudHMuIFRPRE86IGV4Y2x1ZGUgZGVmcyB0b28/XG4gICAgdmFyIG90aGVyRGVmcyA9IG90aGVyRXZlbnRTdG9yZS5kZWZzO1xuICAgIHZhciBvdGhlckluc3RhbmNlcyA9IG90aGVyRXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgdmFyIG90aGVyQ29uZmlncyA9IGNvbXBpbGVFdmVudFVpcyhvdGhlckRlZnMsIHN0YXRlLmV2ZW50VWlCYXNlcyk7XG4gICAgZm9yICh2YXIgc3ViamVjdEluc3RhbmNlSWQgaW4gc3ViamVjdEluc3RhbmNlcykge1xuICAgICAgICB2YXIgc3ViamVjdEluc3RhbmNlID0gc3ViamVjdEluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgIHZhciBzdWJqZWN0UmFuZ2UgPSBzdWJqZWN0SW5zdGFuY2UucmFuZ2U7XG4gICAgICAgIHZhciBzdWJqZWN0Q29uZmlnID0gc3ViamVjdENvbmZpZ3Nbc3ViamVjdEluc3RhbmNlLmRlZklkXTtcbiAgICAgICAgdmFyIHN1YmplY3REZWYgPSBzdWJqZWN0RGVmc1tzdWJqZWN0SW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAvLyBjb25zdHJhaW50XG4gICAgICAgIGlmICghYWxsQ29uc3RyYWludHNQYXNzKHN1YmplY3RDb25maWcuY29uc3RyYWludHMsIHN1YmplY3RSYW5nZSwgb3RoZXJFdmVudFN0b3JlLCBzdGF0ZS5idXNpbmVzc0hvdXJzLCBjYWxlbmRhcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdmVybGFwXG4gICAgICAgIHZhciBvdmVybGFwRnVuYyA9IGNhbGVuZGFyLm9wdCgnZXZlbnRPdmVybGFwJyk7XG4gICAgICAgIGlmICh0eXBlb2Ygb3ZlcmxhcEZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG92ZXJsYXBGdW5jID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBvdGhlckluc3RhbmNlSWQgaW4gb3RoZXJJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gb3RoZXJJbnN0YW5jZXNbb3RoZXJJbnN0YW5jZUlkXTtcbiAgICAgICAgICAgIC8vIGludGVyc2VjdCEgZXZhbHVhdGVcbiAgICAgICAgICAgIGlmIChyYW5nZXNJbnRlcnNlY3Qoc3ViamVjdFJhbmdlLCBvdGhlckluc3RhbmNlLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlck92ZXJsYXAgPSBvdGhlckNvbmZpZ3Nbb3RoZXJJbnN0YW5jZS5kZWZJZF0ub3ZlcmxhcDtcbiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgb3RoZXIgZXZlbnQncyBvdmVybGFwLiBvbmx5IGRvIHRoaXMgaWYgdGhlIHN1YmplY3QgZXZlbnQgaXMgYSBcInJlYWxcIiBldmVudFxuICAgICAgICAgICAgICAgIGlmIChvdGhlck92ZXJsYXAgPT09IGZhbHNlICYmIGludGVyYWN0aW9uLmlzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3ViamVjdENvbmZpZy5vdmVybGFwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdmVybGFwRnVuYyAmJiAhb3ZlcmxhcEZ1bmMobmV3IEV2ZW50QXBpKGNhbGVuZGFyLCBvdGhlckRlZnNbb3RoZXJJbnN0YW5jZS5kZWZJZF0sIG90aGVySW5zdGFuY2UpLCAvLyBzdGlsbCBldmVudFxuICAgICAgICAgICAgICAgIG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZiwgc3ViamVjdEluc3RhbmNlKSAvLyBtb3ZpbmcgZXZlbnRcbiAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWxsb3cgKGEgZnVuY3Rpb24pXG4gICAgICAgIHZhciBjYWxlbmRhckV2ZW50U3RvcmUgPSBjYWxlbmRhci5zdGF0ZS5ldmVudFN0b3JlOyAvLyBuZWVkIGdsb2JhbC10by1jYWxlbmRhciwgbm90IGxvY2FsIHRvIGNvbXBvbmVudCAoc3BsaXR0YWJsZSlzdGF0ZVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc3ViamVjdENvbmZpZy5hbGxvd3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3ViamVjdEFsbG93ID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHN1YmplY3REYXRlU3BhbiA9IF9fYXNzaWduKHt9LCBkYXRlU3Bhbk1ldGEsIHsgcmFuZ2U6IHN1YmplY3RJbnN0YW5jZS5yYW5nZSwgYWxsRGF5OiBzdWJqZWN0RGVmLmFsbERheSB9KTtcbiAgICAgICAgICAgIHZhciBvcmlnRGVmID0gY2FsZW5kYXJFdmVudFN0b3JlLmRlZnNbc3ViamVjdERlZi5kZWZJZF07XG4gICAgICAgICAgICB2YXIgb3JpZ0luc3RhbmNlID0gY2FsZW5kYXJFdmVudFN0b3JlLmluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgICAgICB2YXIgZXZlbnRBcGkgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAob3JpZ0RlZikgeyAvLyB3YXMgcHJldmlvdXNseSBpbiB0aGUgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgb3JpZ0RlZiwgb3JpZ0luc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvLyB3YXMgYW4gZXh0ZXJuYWwgZXZlbnRcbiAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZik7IC8vIG5vIGluc3RhbmNlLCBiZWNhdXNlIGhhZCBubyBkYXRlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdWJqZWN0QWxsb3coY2FsZW5kYXIuYnVpbGREYXRlU3BhbkFwaShzdWJqZWN0RGF0ZVNwYW4pLCBldmVudEFwaSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBEYXRlIFNlbGVjdGlvbiBWYWxpZGF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykge1xuICAgIHZhciByZWxldmFudEV2ZW50U3RvcmUgPSBzdGF0ZS5ldmVudFN0b3JlO1xuICAgIHZhciByZWxldmFudERlZnMgPSByZWxldmFudEV2ZW50U3RvcmUuZGVmcztcbiAgICB2YXIgcmVsZXZhbnRJbnN0YW5jZXMgPSByZWxldmFudEV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdGF0ZS5kYXRlU2VsZWN0aW9uO1xuICAgIHZhciBzZWxlY3Rpb25SYW5nZSA9IHNlbGVjdGlvbi5yYW5nZTtcbiAgICB2YXIgc2VsZWN0aW9uQ29uZmlnID0gY2FsZW5kYXIuc2VsZWN0aW9uQ29uZmlnO1xuICAgIGlmIChmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgc2VsZWN0aW9uQ29uZmlnID0gZmlsdGVyQ29uZmlnKHNlbGVjdGlvbkNvbmZpZyk7XG4gICAgfVxuICAgIC8vIGNvbnN0cmFpbnRcbiAgICBpZiAoIWFsbENvbnN0cmFpbnRzUGFzcyhzZWxlY3Rpb25Db25maWcuY29uc3RyYWludHMsIHNlbGVjdGlvblJhbmdlLCByZWxldmFudEV2ZW50U3RvcmUsIHN0YXRlLmJ1c2luZXNzSG91cnMsIGNhbGVuZGFyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIG92ZXJsYXBcbiAgICB2YXIgb3ZlcmxhcEZ1bmMgPSBjYWxlbmRhci5vcHQoJ3NlbGVjdE92ZXJsYXAnKTtcbiAgICBpZiAodHlwZW9mIG92ZXJsYXBGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG92ZXJsYXBGdW5jID0gbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgcmVsZXZhbnRJbnN0YW5jZUlkIGluIHJlbGV2YW50SW5zdGFuY2VzKSB7XG4gICAgICAgIHZhciByZWxldmFudEluc3RhbmNlID0gcmVsZXZhbnRJbnN0YW5jZXNbcmVsZXZhbnRJbnN0YW5jZUlkXTtcbiAgICAgICAgLy8gaW50ZXJzZWN0ISBldmFsdWF0ZVxuICAgICAgICBpZiAocmFuZ2VzSW50ZXJzZWN0KHNlbGVjdGlvblJhbmdlLCByZWxldmFudEluc3RhbmNlLnJhbmdlKSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkNvbmZpZy5vdmVybGFwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvdmVybGFwRnVuYyAmJiAhb3ZlcmxhcEZ1bmMobmV3IEV2ZW50QXBpKGNhbGVuZGFyLCByZWxldmFudERlZnNbcmVsZXZhbnRJbnN0YW5jZS5kZWZJZF0sIHJlbGV2YW50SW5zdGFuY2UpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhbGxvdyAoYSBmdW5jdGlvbilcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc2VsZWN0aW9uQ29uZmlnLmFsbG93czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbkFsbG93ID0gX2FbX2ldO1xuICAgICAgICB2YXIgZnVsbERhdGVTcGFuID0gX19hc3NpZ24oe30sIGRhdGVTcGFuTWV0YSwgc2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFzZWxlY3Rpb25BbGxvdyhjYWxlbmRhci5idWlsZERhdGVTcGFuQXBpKGZ1bGxEYXRlU3BhbiksIG51bGwpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBDb25zdHJhaW50IFV0aWxzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGFsbENvbnN0cmFpbnRzUGFzcyhjb25zdHJhaW50cywgc3ViamVjdFJhbmdlLCBvdGhlckV2ZW50U3RvcmUsIGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBjYWxlbmRhcikge1xuICAgIGZvciAodmFyIF9pID0gMCwgY29uc3RyYWludHNfMSA9IGNvbnN0cmFpbnRzOyBfaSA8IGNvbnN0cmFpbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gY29uc3RyYWludHNfMVtfaV07XG4gICAgICAgIGlmICghYW55UmFuZ2VzQ29udGFpblJhbmdlKGNvbnN0cmFpbnRUb1Jhbmdlcyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIG90aGVyRXZlbnRTdG9yZSwgYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIGNhbGVuZGFyKSwgc3ViamVjdFJhbmdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY29uc3RyYWludFRvUmFuZ2VzKGNvbnN0cmFpbnQsIHN1YmplY3RSYW5nZSwgLy8gZm9yIGV4cGFuZGluZyBhIHJlY3VycmluZyBjb25zdHJhaW50LCBvciBleHBhbmRpbmcgYnVzaW5lc3MgaG91cnNcbm90aGVyRXZlbnRTdG9yZSwgLy8gZm9yIGlmIGNvbnN0cmFpbnQgaXMgYW4gZXZlbiBncm91cCBJRFxuYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIC8vIGZvciBpZiBjb25zdHJhaW50IGlzICdidXNpbmVzc0hvdXJzJ1xuY2FsZW5kYXIgLy8gZm9yIGV4cGFuZGluZyBidXNpbmVzc2hvdXJzXG4pIHtcbiAgICBpZiAoY29uc3RyYWludCA9PT0gJ2J1c2luZXNzSG91cnMnKSB7XG4gICAgICAgIHJldHVybiBldmVudFN0b3JlVG9SYW5nZXMoZXhwYW5kUmVjdXJyaW5nKGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBzdWJqZWN0UmFuZ2UsIGNhbGVuZGFyKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjb25zdHJhaW50ID09PSAnc3RyaW5nJykgeyAvLyBhbiBncm91cCBJRFxuICAgICAgICByZXR1cm4gZXZlbnRTdG9yZVRvUmFuZ2VzKGZpbHRlckV2ZW50U3RvcmVEZWZzKG90aGVyRXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuZ3JvdXBJZCA9PT0gY29uc3RyYWludDtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY29uc3RyYWludCA9PT0gJ29iamVjdCcgJiYgY29uc3RyYWludCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmVUb1JhbmdlcyhleHBhbmRSZWN1cnJpbmcoY29uc3RyYWludCwgc3ViamVjdFJhbmdlLCBjYWxlbmRhcikpO1xuICAgIH1cbiAgICByZXR1cm4gW107IC8vIGlmIGl0J3MgZmFsc2Vcbn1cbi8vIFRPRE86IG1vdmUgdG8gZXZlbnQtc3RvcmUgZmlsZT9cbmZ1bmN0aW9uIGV2ZW50U3RvcmVUb1JhbmdlcyhldmVudFN0b3JlKSB7XG4gICAgdmFyIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICByYW5nZXMucHVzaChpbnN0YW5jZXNbaW5zdGFuY2VJZF0ucmFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VzO1xufVxuLy8gVE9ETzogbW92ZSB0byBnZW9tIGZpbGU/XG5mdW5jdGlvbiBhbnlSYW5nZXNDb250YWluUmFuZ2Uob3V0ZXJSYW5nZXMsIGlubmVyUmFuZ2UpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIG91dGVyUmFuZ2VzXzEgPSBvdXRlclJhbmdlczsgX2kgPCBvdXRlclJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgb3V0ZXJSYW5nZSA9IG91dGVyUmFuZ2VzXzFbX2ldO1xuICAgICAgICBpZiAocmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBQYXJzaW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnN0cmFpbnQoaW5wdXQsIGNhbGVuZGFyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUV2ZW50cyhpbnB1dCwgJycsIGNhbGVuZGFyLCB0cnVlKTsgLy8gYWxsb3dPcGVuUmFuZ2U9dHJ1ZVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICByZXR1cm4gcGFyc2VFdmVudHMoW2lucHV0XSwgJycsIGNhbGVuZGFyLCB0cnVlKTsgLy8gYWxsb3dPcGVuUmFuZ2U9dHJ1ZVxuICAgIH1cbiAgICBlbHNlIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcoaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBodG1sRXNjYXBlKHMpIHtcbiAgICByZXR1cm4gKHMgKyAnJykucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMDM5OycpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnPGJyIC8+Jyk7XG59XG4vLyBHaXZlbiBhIGhhc2ggb2YgQ1NTIHByb3BlcnRpZXMsIHJldHVybnMgYSBzdHJpbmcgb2YgQ1NTLlxuLy8gVXNlcyBwcm9wZXJ0eSBuYW1lcyBhcy1pcyAobm8gY2FtZWwtY2FzZSBjb252ZXJzaW9uKS4gV2lsbCBub3QgbWFrZSBzdGF0ZW1lbnRzIGZvciBudWxsL3VuZGVmaW5lZCB2YWx1ZXMuXG5mdW5jdGlvbiBjc3NUb1N0cihjc3NQcm9wcykge1xuICAgIHZhciBzdGF0ZW1lbnRzID0gW107XG4gICAgZm9yICh2YXIgbmFtZV8xIGluIGNzc1Byb3BzKSB7XG4gICAgICAgIHZhciB2YWwgPSBjc3NQcm9wc1tuYW1lXzFdO1xuICAgICAgICBpZiAodmFsICE9IG51bGwgJiYgdmFsICE9PSAnJykge1xuICAgICAgICAgICAgc3RhdGVtZW50cy5wdXNoKG5hbWVfMSArICc6JyArIHZhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlbWVudHMuam9pbignOycpO1xufVxuLy8gR2l2ZW4gYW4gb2JqZWN0IGhhc2ggb2YgSFRNTCBhdHRyaWJ1dGUgbmFtZXMgdG8gdmFsdWVzLFxuLy8gZ2VuZXJhdGVzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGluamVjdGVkIGJldHdlZW4gPCA+IGluIEhUTUxcbmZ1bmN0aW9uIGF0dHJzVG9TdHIoYXR0cnMpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICBmb3IgKHZhciBuYW1lXzIgaW4gYXR0cnMpIHtcbiAgICAgICAgdmFyIHZhbCA9IGF0dHJzW25hbWVfMl07XG4gICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChuYW1lXzIgKyAnPVwiJyArIGh0bWxFc2NhcGUodmFsKSArICdcIicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcgJyk7XG59XG5mdW5jdGlvbiBwYXJzZUNsYXNzTmFtZShyYXcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiByYXcuc3BsaXQoL1xccysvKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbnZhciBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUyA9IHtcbiAgICBlZGl0YWJsZTogQm9vbGVhbixcbiAgICBzdGFydEVkaXRhYmxlOiBCb29sZWFuLFxuICAgIGR1cmF0aW9uRWRpdGFibGU6IEJvb2xlYW4sXG4gICAgY29uc3RyYWludDogbnVsbCxcbiAgICBvdmVybGFwOiBudWxsLFxuICAgIGFsbG93OiBudWxsLFxuICAgIGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWUsXG4gICAgY2xhc3NOYW1lczogcGFyc2VDbGFzc05hbWUsXG4gICAgY29sb3I6IFN0cmluZyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFN0cmluZyxcbiAgICBib3JkZXJDb2xvcjogU3RyaW5nLFxuICAgIHRleHRDb2xvcjogU3RyaW5nXG59O1xuZnVuY3Rpb24gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhyYXdQcm9wcywgY2FsZW5kYXIsIGxlZnRvdmVycykge1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhd1Byb3BzLCBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgdmFyIGNvbnN0cmFpbnQgPSBub3JtYWxpemVDb25zdHJhaW50KHByb3BzLmNvbnN0cmFpbnQsIGNhbGVuZGFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydEVkaXRhYmxlOiBwcm9wcy5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBwcm9wcy5zdGFydEVkaXRhYmxlIDogcHJvcHMuZWRpdGFibGUsXG4gICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IHByb3BzLmR1cmF0aW9uRWRpdGFibGUgIT0gbnVsbCA/IHByb3BzLmR1cmF0aW9uRWRpdGFibGUgOiBwcm9wcy5lZGl0YWJsZSxcbiAgICAgICAgY29uc3RyYWludHM6IGNvbnN0cmFpbnQgIT0gbnVsbCA/IFtjb25zdHJhaW50XSA6IFtdLFxuICAgICAgICBvdmVybGFwOiBwcm9wcy5vdmVybGFwLFxuICAgICAgICBhbGxvd3M6IHByb3BzLmFsbG93ICE9IG51bGwgPyBbcHJvcHMuYWxsb3ddIDogW10sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogcHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IHByb3BzLmNvbG9yLFxuICAgICAgICBib3JkZXJDb2xvcjogcHJvcHMuYm9yZGVyQ29sb3IgfHwgcHJvcHMuY29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogcHJvcHMudGV4dENvbG9yLFxuICAgICAgICBjbGFzc05hbWVzOiBwcm9wcy5jbGFzc05hbWVzLmNvbmNhdChwcm9wcy5jbGFzc05hbWUpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTY29wZWRVaVByb3BzKHByZWZpeCwgcmF3U2NvcGVkLCBjYWxlbmRhciwgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHJhd1Vuc2NvcGVkID0ge307XG4gICAgdmFyIHdhc0ZvdW5kID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIFVOU0NPUEVEX0VWRU5UX1VJX1BST1BTKSB7XG4gICAgICAgIHZhciBzY29wZWRLZXkgPSBwcmVmaXggKyBjYXBpdGFsaXNlRmlyc3RMZXR0ZXIoa2V5KTtcbiAgICAgICAgcmF3VW5zY29wZWRba2V5XSA9IHJhd1Njb3BlZFtzY29wZWRLZXldO1xuICAgICAgICB3YXNGb3VuZFtzY29wZWRLZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHByZWZpeCA9PT0gJ2V2ZW50Jykge1xuICAgICAgICByYXdVbnNjb3BlZC5lZGl0YWJsZSA9IHJhd1Njb3BlZC5lZGl0YWJsZTsgLy8gc3BlY2lhbCBjYXNlLiB0aGVyZSBpcyBubyAnZXZlbnRFZGl0YWJsZScsIGp1c3QgJ2VkaXRhYmxlJ1xuICAgIH1cbiAgICBpZiAobGVmdG92ZXJzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiByYXdTY29wZWQpIHtcbiAgICAgICAgICAgIGlmICghd2FzRm91bmRba2V5XSkge1xuICAgICAgICAgICAgICAgIGxlZnRvdmVyc1trZXldID0gcmF3U2NvcGVkW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NVbnNjb3BlZFVpUHJvcHMocmF3VW5zY29wZWQsIGNhbGVuZGFyKTtcbn1cbnZhciBFTVBUWV9FVkVOVF9VSSA9IHtcbiAgICBzdGFydEVkaXRhYmxlOiBudWxsLFxuICAgIGR1cmF0aW9uRWRpdGFibGU6IG51bGwsXG4gICAgY29uc3RyYWludHM6IFtdLFxuICAgIG92ZXJsYXA6IG51bGwsXG4gICAgYWxsb3dzOiBbXSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgIGJvcmRlckNvbG9yOiAnJyxcbiAgICB0ZXh0Q29sb3I6ICcnLFxuICAgIGNsYXNzTmFtZXM6IFtdXG59O1xuLy8gcHJldmVudCBhZ2FpbnN0IHByb2JsZW1zIHdpdGggPDIgYXJncyFcbmZ1bmN0aW9uIGNvbWJpbmVFdmVudFVpcyh1aXMpIHtcbiAgICByZXR1cm4gdWlzLnJlZHVjZShjb21iaW5lVHdvRXZlbnRVaXMsIEVNUFRZX0VWRU5UX1VJKTtcbn1cbmZ1bmN0aW9uIGNvbWJpbmVUd29FdmVudFVpcyhpdGVtMCwgaXRlbTEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydEVkaXRhYmxlOiBpdGVtMS5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBpdGVtMS5zdGFydEVkaXRhYmxlIDogaXRlbTAuc3RhcnRFZGl0YWJsZSxcbiAgICAgICAgZHVyYXRpb25FZGl0YWJsZTogaXRlbTEuZHVyYXRpb25FZGl0YWJsZSAhPSBudWxsID8gaXRlbTEuZHVyYXRpb25FZGl0YWJsZSA6IGl0ZW0wLmR1cmF0aW9uRWRpdGFibGUsXG4gICAgICAgIGNvbnN0cmFpbnRzOiBpdGVtMC5jb25zdHJhaW50cy5jb25jYXQoaXRlbTEuY29uc3RyYWludHMpLFxuICAgICAgICBvdmVybGFwOiB0eXBlb2YgaXRlbTEub3ZlcmxhcCA9PT0gJ2Jvb2xlYW4nID8gaXRlbTEub3ZlcmxhcCA6IGl0ZW0wLm92ZXJsYXAsXG4gICAgICAgIGFsbG93czogaXRlbTAuYWxsb3dzLmNvbmNhdChpdGVtMS5hbGxvd3MpLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGl0ZW0xLmJhY2tncm91bmRDb2xvciB8fCBpdGVtMC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJvcmRlckNvbG9yOiBpdGVtMS5ib3JkZXJDb2xvciB8fCBpdGVtMC5ib3JkZXJDb2xvcixcbiAgICAgICAgdGV4dENvbG9yOiBpdGVtMS50ZXh0Q29sb3IgfHwgaXRlbTAudGV4dENvbG9yLFxuICAgICAgICBjbGFzc05hbWVzOiBpdGVtMC5jbGFzc05hbWVzLmNvbmNhdChpdGVtMS5jbGFzc05hbWVzKVxuICAgIH07XG59XG5cbnZhciBOT05fREFURV9QUk9QUyA9IHtcbiAgICBpZDogU3RyaW5nLFxuICAgIGdyb3VwSWQ6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHVybDogU3RyaW5nLFxuICAgIHJlbmRlcmluZzogU3RyaW5nLFxuICAgIGV4dGVuZGVkUHJvcHM6IG51bGxcbn07XG52YXIgREFURV9QUk9QUyA9IHtcbiAgICBzdGFydDogbnVsbCxcbiAgICBkYXRlOiBudWxsLFxuICAgIGVuZDogbnVsbCxcbiAgICBhbGxEYXk6IG51bGxcbn07XG52YXIgdWlkID0gMDtcbmZ1bmN0aW9uIHBhcnNlRXZlbnQocmF3LCBzb3VyY2VJZCwgY2FsZW5kYXIsIGFsbG93T3BlblJhbmdlKSB7XG4gICAgdmFyIGFsbERheURlZmF1bHQgPSBjb21wdXRlSXNBbGxEYXlEZWZhdWx0KHNvdXJjZUlkLCBjYWxlbmRhcik7XG4gICAgdmFyIGxlZnRvdmVyczAgPSB7fTtcbiAgICB2YXIgcmVjdXJyaW5nUmVzID0gcGFyc2VSZWN1cnJpbmcocmF3LCAvLyByYXcsIGJ1dCB3aXRoIHNpbmdsZS1ldmVudCBzdHVmZiBzdHJpcHBlZCBvdXRcbiAgICBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhci5kYXRlRW52LCBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MucmVjdXJyaW5nVHlwZXMsIGxlZnRvdmVyczAgLy8gd2lsbCBwb3B1bGF0ZSB3aXRoIG5vbi1yZWN1cnJpbmcgcHJvcHNcbiAgICApO1xuICAgIGlmIChyZWN1cnJpbmdSZXMpIHtcbiAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYobGVmdG92ZXJzMCwgc291cmNlSWQsIHJlY3VycmluZ1Jlcy5hbGxEYXksIEJvb2xlYW4ocmVjdXJyaW5nUmVzLmR1cmF0aW9uKSwgY2FsZW5kYXIpO1xuICAgICAgICBkZWYucmVjdXJyaW5nRGVmID0ge1xuICAgICAgICAgICAgdHlwZUlkOiByZWN1cnJpbmdSZXMudHlwZUlkLFxuICAgICAgICAgICAgdHlwZURhdGE6IHJlY3VycmluZ1Jlcy50eXBlRGF0YSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiByZWN1cnJpbmdSZXMuZHVyYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGVmOiBkZWYsIGluc3RhbmNlOiBudWxsIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbGVmdG92ZXJzMSA9IHt9O1xuICAgICAgICB2YXIgc2luZ2xlUmVzID0gcGFyc2VTaW5nbGUocmF3LCBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhciwgbGVmdG92ZXJzMSwgYWxsb3dPcGVuUmFuZ2UpO1xuICAgICAgICBpZiAoc2luZ2xlUmVzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZihsZWZ0b3ZlcnMxLCBzb3VyY2VJZCwgc2luZ2xlUmVzLmFsbERheSwgc2luZ2xlUmVzLmhhc0VuZCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRXZlbnRJbnN0YW5jZShkZWYuZGVmSWQsIHNpbmdsZVJlcy5yYW5nZSwgc2luZ2xlUmVzLmZvcmNlZFN0YXJ0VHpvLCBzaW5nbGVSZXMuZm9yY2VkRW5kVHpvKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG5XaWxsIE5PVCBwb3B1bGF0ZSBleHRlbmRlZFByb3BzIHdpdGggdGhlIGxlZnRvdmVyIHByb3BlcnRpZXMuXG5XaWxsIE5PVCBwb3B1bGF0ZSBkYXRlLXJlbGF0ZWQgcHJvcHMuXG5UaGUgRXZlbnROb25EYXRlSW5wdXQgaGFzIGJlZW4gbm9ybWFsaXplZCAoaWQgPT4gcHVibGljSWQsIGV0YykuXG4qL1xuZnVuY3Rpb24gcGFyc2VFdmVudERlZihyYXcsIHNvdXJjZUlkLCBhbGxEYXksIGhhc0VuZCwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbGVmdG92ZXJzID0ge307XG4gICAgdmFyIGRlZiA9IHBsdWNrTm9uRGF0ZVByb3BzKHJhdywgY2FsZW5kYXIsIGxlZnRvdmVycyk7XG4gICAgZGVmLmRlZklkID0gU3RyaW5nKHVpZCsrKTtcbiAgICBkZWYuc291cmNlSWQgPSBzb3VyY2VJZDtcbiAgICBkZWYuYWxsRGF5ID0gYWxsRGF5O1xuICAgIGRlZi5oYXNFbmQgPSBoYXNFbmQ7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudERlZlBhcnNlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBldmVudERlZlBhcnNlciA9IF9hW19pXTtcbiAgICAgICAgdmFyIG5ld0xlZnRvdmVycyA9IHt9O1xuICAgICAgICBldmVudERlZlBhcnNlcihkZWYsIGxlZnRvdmVycywgbmV3TGVmdG92ZXJzKTtcbiAgICAgICAgbGVmdG92ZXJzID0gbmV3TGVmdG92ZXJzO1xuICAgIH1cbiAgICBkZWYuZXh0ZW5kZWRQcm9wcyA9IF9fYXNzaWduKGxlZnRvdmVycywgZGVmLmV4dGVuZGVkUHJvcHMgfHwge30pO1xuICAgIC8vIGhlbHAgb3V0IEV2ZW50QXBpIGZyb20gaGF2aW5nIHVzZXIgbW9kaWZ5IHByb3BzXG4gICAgT2JqZWN0LmZyZWV6ZShkZWYudWkuY2xhc3NOYW1lcyk7XG4gICAgT2JqZWN0LmZyZWV6ZShkZWYuZXh0ZW5kZWRQcm9wcyk7XG4gICAgcmV0dXJuIGRlZjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmSWQsIHJhbmdlLCBmb3JjZWRTdGFydFR6bywgZm9yY2VkRW5kVHpvKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5zdGFuY2VJZDogU3RyaW5nKHVpZCsrKSxcbiAgICAgICAgZGVmSWQ6IGRlZklkLFxuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBmb3JjZWRTdGFydFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZFN0YXJ0VHpvLFxuICAgICAgICBmb3JjZWRFbmRUem86IGZvcmNlZEVuZFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZEVuZFR6b1xuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVNpbmdsZShyYXcsIGFsbERheURlZmF1bHQsIGNhbGVuZGFyLCBsZWZ0b3ZlcnMsIGFsbG93T3BlblJhbmdlKSB7XG4gICAgdmFyIHByb3BzID0gcGx1Y2tEYXRlUHJvcHMocmF3LCBsZWZ0b3ZlcnMpO1xuICAgIHZhciBhbGxEYXkgPSBwcm9wcy5hbGxEYXk7XG4gICAgdmFyIHN0YXJ0TWV0YTtcbiAgICB2YXIgc3RhcnRNYXJrZXIgPSBudWxsO1xuICAgIHZhciBoYXNFbmQgPSBmYWxzZTtcbiAgICB2YXIgZW5kTWV0YTtcbiAgICB2YXIgZW5kTWFya2VyID0gbnVsbDtcbiAgICBzdGFydE1ldGEgPSBjYWxlbmRhci5kYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEocHJvcHMuc3RhcnQpO1xuICAgIGlmIChzdGFydE1ldGEpIHtcbiAgICAgICAgc3RhcnRNYXJrZXIgPSBzdGFydE1ldGEubWFya2VyO1xuICAgIH1cbiAgICBlbHNlIGlmICghYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9wcy5lbmQgIT0gbnVsbCkge1xuICAgICAgICBlbmRNZXRhID0gY2FsZW5kYXIuZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHByb3BzLmVuZCk7XG4gICAgfVxuICAgIGlmIChhbGxEYXkgPT0gbnVsbCkge1xuICAgICAgICBpZiAoYWxsRGF5RGVmYXVsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhbGxEYXkgPSBhbGxEYXlEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHRoZSBkYXRlIHByb3BzIExBU1RcbiAgICAgICAgICAgIGFsbERheSA9ICghc3RhcnRNZXRhIHx8IHN0YXJ0TWV0YS5pc1RpbWVVbnNwZWNpZmllZCkgJiZcbiAgICAgICAgICAgICAgICAoIWVuZE1ldGEgfHwgZW5kTWV0YS5pc1RpbWVVbnNwZWNpZmllZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFsbERheSAmJiBzdGFydE1hcmtlcikge1xuICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0T2ZEYXkoc3RhcnRNYXJrZXIpO1xuICAgIH1cbiAgICBpZiAoZW5kTWV0YSkge1xuICAgICAgICBlbmRNYXJrZXIgPSBlbmRNZXRhLm1hcmtlcjtcbiAgICAgICAgaWYgKGFsbERheSkge1xuICAgICAgICAgICAgZW5kTWFya2VyID0gc3RhcnRPZkRheShlbmRNYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIgPD0gc3RhcnRNYXJrZXIpIHtcbiAgICAgICAgICAgIGVuZE1hcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuZE1hcmtlcikge1xuICAgICAgICBoYXNFbmQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICghYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgaGFzRW5kID0gY2FsZW5kYXIub3B0KCdmb3JjZUV2ZW50RHVyYXRpb24nKSB8fCBmYWxzZTtcbiAgICAgICAgZW5kTWFya2VyID0gY2FsZW5kYXIuZGF0ZUVudi5hZGQoc3RhcnRNYXJrZXIsIGFsbERheSA/XG4gICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiA6XG4gICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgIGhhc0VuZDogaGFzRW5kLFxuICAgICAgICByYW5nZTogeyBzdGFydDogc3RhcnRNYXJrZXIsIGVuZDogZW5kTWFya2VyIH0sXG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEgPyBzdGFydE1ldGEuZm9yY2VkVHpvIDogbnVsbCxcbiAgICAgICAgZm9yY2VkRW5kVHpvOiBlbmRNZXRhID8gZW5kTWV0YS5mb3JjZWRUem8gOiBudWxsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBsdWNrRGF0ZVByb3BzKHJhdywgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHByb3BzID0gcmVmaW5lUHJvcHMocmF3LCBEQVRFX1BST1BTLCB7fSwgbGVmdG92ZXJzKTtcbiAgICBwcm9wcy5zdGFydCA9IChwcm9wcy5zdGFydCAhPT0gbnVsbCkgPyBwcm9wcy5zdGFydCA6IHByb3BzLmRhdGU7XG4gICAgZGVsZXRlIHByb3BzLmRhdGU7XG4gICAgcmV0dXJuIHByb3BzO1xufVxuZnVuY3Rpb24gcGx1Y2tOb25EYXRlUHJvcHMocmF3LCBjYWxlbmRhciwgbGVmdG92ZXJzKSB7XG4gICAgdmFyIHByZUxlZnRvdmVycyA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhdywgTk9OX0RBVEVfUFJPUFMsIHt9LCBwcmVMZWZ0b3ZlcnMpO1xuICAgIHZhciB1aSA9IHByb2Nlc3NVbnNjb3BlZFVpUHJvcHMocHJlTGVmdG92ZXJzLCBjYWxlbmRhciwgbGVmdG92ZXJzKTtcbiAgICBwcm9wcy5wdWJsaWNJZCA9IHByb3BzLmlkO1xuICAgIGRlbGV0ZSBwcm9wcy5pZDtcbiAgICBwcm9wcy51aSA9IHVpO1xuICAgIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIGNvbXB1dGVJc0FsbERheURlZmF1bHQoc291cmNlSWQsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHJlcyA9IG51bGw7XG4gICAgaWYgKHNvdXJjZUlkKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBjYWxlbmRhci5zdGF0ZS5ldmVudFNvdXJjZXNbc291cmNlSWRdO1xuICAgICAgICByZXMgPSBzb3VyY2UuYWxsRGF5RGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICAgIHJlcyA9IGNhbGVuZGFyLm9wdCgnYWxsRGF5RGVmYXVsdCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG52YXIgREVGX0RFRkFVTFRTID0ge1xuICAgIHN0YXJ0VGltZTogJzA5OjAwJyxcbiAgICBlbmRUaW1lOiAnMTc6MDAnLFxuICAgIGRheXNPZldlZWs6IFsxLCAyLCAzLCA0LCA1XSxcbiAgICByZW5kZXJpbmc6ICdpbnZlcnNlLWJhY2tncm91bmQnLFxuICAgIGNsYXNzTmFtZXM6ICdmYy1ub25idXNpbmVzcycsXG4gICAgZ3JvdXBJZDogJ19idXNpbmVzc0hvdXJzJyAvLyBzbyBtdWx0aXBsZSBkZWZzIGdldCBncm91cGVkXG59O1xuLypcblRPRE86IHBhc3MgYXJvdW5kIGFzIEV2ZW50RGVmSGFzaCEhIVxuKi9cbmZ1bmN0aW9uIHBhcnNlQnVzaW5lc3NIb3VycyhpbnB1dCwgY2FsZW5kYXIpIHtcbiAgICByZXR1cm4gcGFyc2VFdmVudHMocmVmaW5lSW5wdXRzKGlucHV0KSwgJycsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIHJlZmluZUlucHV0cyhpbnB1dCkge1xuICAgIHZhciByYXdEZWZzO1xuICAgIGlmIChpbnB1dCA9PT0gdHJ1ZSkge1xuICAgICAgICByYXdEZWZzID0gW3t9XTsgLy8gd2lsbCBnZXQgREVGX0RFRkFVTFRTIHZlcmJhdGltXG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIC8vIGlmIHNwZWNpZnlpbmcgYW4gYXJyYXksIGV2ZXJ5IHN1Yi1kZWZpbml0aW9uIE5FRURTIGEgZGF5LW9mLXdlZWtcbiAgICAgICAgcmF3RGVmcyA9IGlucHV0LmZpbHRlcihmdW5jdGlvbiAocmF3RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3RGVmLmRheXNPZldlZWs7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICByYXdEZWZzID0gW2lucHV0XTtcbiAgICB9XG4gICAgZWxzZSB7IC8vIGlzIHByb2JhYmx5IGZhbHNlXG4gICAgICAgIHJhd0RlZnMgPSBbXTtcbiAgICB9XG4gICAgcmF3RGVmcyA9IHJhd0RlZnMubWFwKGZ1bmN0aW9uIChyYXdEZWYpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBERUZfREVGQVVMVFMsIHJhd0RlZik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhd0RlZnM7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVSZW5kZXJpbmcocmVuZGVyRnVuYywgdW5yZW5kZXJGdW5jLCBkZXBlbmRlbmNpZXMpIHtcbiAgICBpZiAoZGVwZW5kZW5jaWVzID09PSB2b2lkIDApIHsgZGVwZW5kZW5jaWVzID0gW107IH1cbiAgICB2YXIgZGVwZW5kZW50cyA9IFtdO1xuICAgIHZhciB0aGlzQ29udGV4dDtcbiAgICB2YXIgcHJldkFyZ3M7XG4gICAgZnVuY3Rpb24gdW5yZW5kZXIoKSB7XG4gICAgICAgIGlmIChwcmV2QXJncykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbnRzXzEgPSBkZXBlbmRlbnRzOyBfaSA8IGRlcGVuZGVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVwZW5kZW50ID0gZGVwZW5kZW50c18xW19pXTtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbnQudW5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bnJlbmRlckZ1bmMpIHtcbiAgICAgICAgICAgICAgICB1bnJlbmRlckZ1bmMuYXBwbHkodGhpc0NvbnRleHQsIHByZXZBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZBcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZXMoKSB7XG4gICAgICAgIGlmICghcHJldkFyZ3MgfHwgIWlzQXJyYXlzRXF1YWwocHJldkFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgIHVucmVuZGVyKCk7XG4gICAgICAgICAgICB0aGlzQ29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgICBwcmV2QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJlbmRlckZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXMuZGVwZW5kZW50cyA9IGRlcGVuZGVudHM7XG4gICAgcmVzLnVucmVuZGVyID0gdW5yZW5kZXI7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbmNpZXNfMSA9IGRlcGVuZGVuY2llczsgX2kgPCBkZXBlbmRlbmNpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNfMVtfaV07XG4gICAgICAgIGRlcGVuZGVuY3kuZGVwZW5kZW50cy5wdXNoKHJlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbnZhciBFTVBUWV9FVkVOVF9TVE9SRSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyAvLyBmb3IgcHVyZWNvbXBvbmVudHMuIFRPRE86IGtlZXAgZWxzZXdoZXJlXG52YXIgU3BsaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BsaXR0ZXIoKSB7XG4gICAgICAgIHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IG1lbW9pemUodGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyk7XG4gICAgICAgIHRoaXMuc3BsaXREYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zcGxpdERhdGVTcGFuKTtcbiAgICAgICAgdGhpcy5zcGxpdEV2ZW50U3RvcmUgPSBtZW1vaXplKHRoaXMuX3NwbGl0RXZlbnRTdG9yZSk7XG4gICAgICAgIHRoaXMuc3BsaXRJbmRpdmlkdWFsVWkgPSBtZW1vaXplKHRoaXMuX3NwbGl0SW5kaXZpZHVhbFVpKTtcbiAgICAgICAgdGhpcy5zcGxpdEV2ZW50RHJhZyA9IG1lbW9pemUodGhpcy5fc3BsaXRJbnRlcmFjdGlvbik7XG4gICAgICAgIHRoaXMuc3BsaXRFdmVudFJlc2l6ZSA9IG1lbW9pemUodGhpcy5fc3BsaXRJbnRlcmFjdGlvbik7XG4gICAgICAgIHRoaXMuZXZlbnRVaUJ1aWxkZXJzID0ge307IC8vIFRPRE86IHR5cGVzY3JpcHQgcHJvdGVjdGlvblxuICAgIH1cbiAgICBTcGxpdHRlci5wcm90b3R5cGUuc3BsaXRQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIga2V5SW5mb3MgPSB0aGlzLmdldEtleUluZm8ocHJvcHMpO1xuICAgICAgICB2YXIgZGVmS2V5cyA9IHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyhwcm9wcy5ldmVudFN0b3JlKTtcbiAgICAgICAgdmFyIGRhdGVTZWxlY3Rpb25zID0gdGhpcy5zcGxpdERhdGVTZWxlY3Rpb24ocHJvcHMuZGF0ZVNlbGVjdGlvbik7XG4gICAgICAgIHZhciBpbmRpdmlkdWFsVWkgPSB0aGlzLnNwbGl0SW5kaXZpZHVhbFVpKHByb3BzLmV2ZW50VWlCYXNlcywgZGVmS2V5cyk7IC8vIHRoZSBpbmRpdmlkdWFsICpiYXNlcypcbiAgICAgICAgdmFyIGV2ZW50U3RvcmVzID0gdGhpcy5zcGxpdEV2ZW50U3RvcmUocHJvcHMuZXZlbnRTdG9yZSwgZGVmS2V5cyk7XG4gICAgICAgIHZhciBldmVudERyYWdzID0gdGhpcy5zcGxpdEV2ZW50RHJhZyhwcm9wcy5ldmVudERyYWcpO1xuICAgICAgICB2YXIgZXZlbnRSZXNpemVzID0gdGhpcy5zcGxpdEV2ZW50UmVzaXplKHByb3BzLmV2ZW50UmVzaXplKTtcbiAgICAgICAgdmFyIHNwbGl0UHJvcHMgPSB7fTtcbiAgICAgICAgdGhpcy5ldmVudFVpQnVpbGRlcnMgPSBtYXBIYXNoKGtleUluZm9zLCBmdW5jdGlvbiAoaW5mbywga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZXZlbnRVaUJ1aWxkZXJzW2tleV0gfHwgbWVtb2l6ZShidWlsZEV2ZW50VWlGb3JLZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGtleUluZm9zKSB7XG4gICAgICAgICAgICB2YXIga2V5SW5mbyA9IGtleUluZm9zW2tleV07XG4gICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IGV2ZW50U3RvcmVzW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkU7XG4gICAgICAgICAgICB2YXIgYnVpbGRFdmVudFVpID0gdGhpcy5ldmVudFVpQnVpbGRlcnNba2V5XTtcbiAgICAgICAgICAgIHNwbGl0UHJvcHNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBrZXlJbmZvLmJ1c2luZXNzSG91cnMgfHwgcHJvcHMuYnVzaW5lc3NIb3VycyxcbiAgICAgICAgICAgICAgICBkYXRlU2VsZWN0aW9uOiBkYXRlU2VsZWN0aW9uc1trZXldIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRTdG9yZSxcbiAgICAgICAgICAgICAgICBldmVudFVpQmFzZXM6IGJ1aWxkRXZlbnRVaShwcm9wcy5ldmVudFVpQmFzZXNbJyddLCBrZXlJbmZvLnVpLCBpbmRpdmlkdWFsVWlba2V5XSksXG4gICAgICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IGV2ZW50U3RvcmUuaW5zdGFuY2VzW3Byb3BzLmV2ZW50U2VsZWN0aW9uXSA/IHByb3BzLmV2ZW50U2VsZWN0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnOiBldmVudERyYWdzW2tleV0gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudFJlc2l6ZTogZXZlbnRSZXNpemVzW2tleV0gfHwgbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BsaXRQcm9wcztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXREYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICB2YXIgZGF0ZVNwYW5zID0ge307XG4gICAgICAgIGlmIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSB0aGlzLmdldEtleXNGb3JEYXRlU3BhbihkYXRlU3Bhbik7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgIGRhdGVTcGFuc1trZXldID0gZGF0ZVNwYW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVTcGFucztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IGZ1bmN0aW9uIChldmVudFN0b3JlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBtYXBIYXNoKGV2ZW50U3RvcmUuZGVmcywgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmKGV2ZW50RGVmKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0RXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBkZWZLZXlzKSB7XG4gICAgICAgIHZhciBkZWZzID0gZXZlbnRTdG9yZS5kZWZzLCBpbnN0YW5jZXMgPSBldmVudFN0b3JlLmluc3RhbmNlcztcbiAgICAgICAgdmFyIHNwbGl0U3RvcmVzID0ge307XG4gICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmICghc3BsaXRTdG9yZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFN0b3Jlc1trZXldID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNwbGl0U3RvcmVzW2tleV0uZGVmc1tkZWZJZF0gPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGRlZktleXNbaW5zdGFuY2UuZGVmSWRdOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfY1tfYl07XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0U3RvcmVzW2tleV0pIHsgLy8gbXVzdCBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0U3RvcmVzW2tleV0uaW5zdGFuY2VzW2luc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdFN0b3JlcztcbiAgICB9O1xuICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXRJbmRpdmlkdWFsVWkgPSBmdW5jdGlvbiAoZXZlbnRVaUJhc2VzLCBkZWZLZXlzKSB7XG4gICAgICAgIHZhciBzcGxpdEhhc2hlcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBldmVudFVpQmFzZXMpIHtcbiAgICAgICAgICAgIGlmIChkZWZJZCkgeyAvLyBub3QgdGhlICcnIGtleVxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGxpdEhhc2hlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEhhc2hlc1trZXldID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3BsaXRIYXNoZXNba2V5XVtkZWZJZF0gPSBldmVudFVpQmFzZXNbZGVmSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BsaXRIYXNoZXM7XG4gICAgfTtcbiAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0SW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgdmFyIHNwbGl0U3RhdGVzID0ge307XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGFmZmVjdGVkU3RvcmVzXzEgPSB0aGlzLl9zcGxpdEV2ZW50U3RvcmUoaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMsIHRoaXMuX2dldEtleXNGb3JFdmVudERlZnMoaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMpIC8vIGNhbid0IHVzZSBjYWNoZWQuIG1pZ2h0IGJlIGV2ZW50cyBmcm9tIG90aGVyIGNhbGVuZGFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gY2FuJ3QgcmVseSBvbiBkZWZLZXlzIGJlY2F1c2UgZXZlbnQgZGF0YSBpcyBtdXRhdGVkXG4gICAgICAgICAgICB2YXIgbXV0YXRlZEtleXNCeURlZklkID0gdGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyhpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzKTtcbiAgICAgICAgICAgIHZhciBtdXRhdGVkU3RvcmVzXzEgPSB0aGlzLl9zcGxpdEV2ZW50U3RvcmUoaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cywgbXV0YXRlZEtleXNCeURlZklkKTtcbiAgICAgICAgICAgIHZhciBwb3B1bGF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNwbGl0U3RhdGVzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRTdGF0ZXNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBhZmZlY3RlZFN0b3Jlc18xW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVkRXZlbnRzOiBtdXRhdGVkU3RvcmVzXzFba2V5XSB8fCBFTVBUWV9FVkVOVF9TVE9SRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IGludGVyYWN0aW9uLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnU2VnOiBpbnRlcmFjdGlvbi5vcmlnU2VnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhZmZlY3RlZFN0b3Jlc18xKSB7XG4gICAgICAgICAgICAgICAgcG9wdWxhdGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtdXRhdGVkU3RvcmVzXzEpIHtcbiAgICAgICAgICAgICAgICBwb3B1bGF0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdFN0YXRlcztcbiAgICB9O1xuICAgIHJldHVybiBTcGxpdHRlcjtcbn0oKSk7XG5mdW5jdGlvbiBidWlsZEV2ZW50VWlGb3JLZXkoYWxsVWksIGV2ZW50VWlGb3JLZXksIGluZGl2aWR1YWxVaSkge1xuICAgIHZhciBiYXNlUGFydHMgPSBbXTtcbiAgICBpZiAoYWxsVWkpIHtcbiAgICAgICAgYmFzZVBhcnRzLnB1c2goYWxsVWkpO1xuICAgIH1cbiAgICBpZiAoZXZlbnRVaUZvcktleSkge1xuICAgICAgICBiYXNlUGFydHMucHVzaChldmVudFVpRm9yS2V5KTtcbiAgICB9XG4gICAgdmFyIHN0dWZmID0ge1xuICAgICAgICAnJzogY29tYmluZUV2ZW50VWlzKGJhc2VQYXJ0cylcbiAgICB9O1xuICAgIGlmIChpbmRpdmlkdWFsVWkpIHtcbiAgICAgICAgX19hc3NpZ24oc3R1ZmYsIGluZGl2aWR1YWxVaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHVmZjtcbn1cblxuLy8gR2VuZXJhdGVzIEhUTUwgZm9yIGFuIGFuY2hvciB0byBhbm90aGVyIHZpZXcgaW50byB0aGUgY2FsZW5kYXIuXG4vLyBXaWxsIGVpdGhlciBnZW5lcmF0ZSBhbiA8YT4gdGFnIG9yIGEgbm9uLWNsaWNrYWJsZSA8c3Bhbj4gdGFnLCBkZXBlbmRpbmcgb24gZW5hYmxlZCBzZXR0aW5ncy5cbi8vIGBnb3RvT3B0aW9uc2AgY2FuIGVpdGhlciBiZSBhIERhdGVNYXJrZXIsIG9yIGFuIG9iamVjdCB3aXRoIHRoZSBmb3JtOlxuLy8geyBkYXRlLCB0eXBlLCBmb3JjZU9mZiB9XG4vLyBgdHlwZWAgaXMgYSB2aWV3LXR5cGUgbGlrZSBcImRheVwiIG9yIFwid2Vla1wiLiBkZWZhdWx0IHZhbHVlIGlzIFwiZGF5XCIuXG4vLyBgYXR0cnNgIGFuZCBgaW5uZXJIdG1sYCBhcmUgdXNlIHRvIGdlbmVyYXRlIHRoZSByZXN0IG9mIHRoZSBIVE1MIHRhZy5cbmZ1bmN0aW9uIGJ1aWxkR290b0FuY2hvckh0bWwoY29tcG9uZW50LCBnb3RvT3B0aW9ucywgYXR0cnMsIGlubmVySHRtbCkge1xuICAgIHZhciBkYXRlRW52ID0gY29tcG9uZW50LmRhdGVFbnY7XG4gICAgdmFyIGRhdGU7XG4gICAgdmFyIHR5cGU7XG4gICAgdmFyIGZvcmNlT2ZmO1xuICAgIHZhciBmaW5hbE9wdGlvbnM7XG4gICAgaWYgKGdvdG9PcHRpb25zIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkYXRlID0gZ290b09wdGlvbnM7IC8vIGEgc2luZ2xlIGRhdGUtbGlrZSBpbnB1dFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IGdvdG9PcHRpb25zLmRhdGU7XG4gICAgICAgIHR5cGUgPSBnb3RvT3B0aW9ucy50eXBlO1xuICAgICAgICBmb3JjZU9mZiA9IGdvdG9PcHRpb25zLmZvcmNlT2ZmO1xuICAgIH1cbiAgICBmaW5hbE9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGU6IGRhdGVFbnYuZm9ybWF0SXNvKGRhdGUsIHsgb21pdFRpbWU6IHRydWUgfSksXG4gICAgICAgIHR5cGU6IHR5cGUgfHwgJ2RheSdcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlubmVySHRtbCA9IGF0dHJzO1xuICAgICAgICBhdHRycyA9IG51bGw7XG4gICAgfVxuICAgIGF0dHJzID0gYXR0cnMgPyAnICcgKyBhdHRyc1RvU3RyKGF0dHJzKSA6ICcnOyAvLyB3aWxsIGhhdmUgYSBsZWFkaW5nIHNwYWNlXG4gICAgaW5uZXJIdG1sID0gaW5uZXJIdG1sIHx8ICcnO1xuICAgIGlmICghZm9yY2VPZmYgJiYgY29tcG9uZW50Lm9wdCgnbmF2TGlua3MnKSkge1xuICAgICAgICByZXR1cm4gJzxhJyArIGF0dHJzICtcbiAgICAgICAgICAgICcgZGF0YS1nb3RvPVwiJyArIGh0bWxFc2NhcGUoSlNPTi5zdHJpbmdpZnkoZmluYWxPcHRpb25zKSkgKyAnXCI+JyArXG4gICAgICAgICAgICBpbm5lckh0bWwgK1xuICAgICAgICAgICAgJzwvYT4nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICc8c3BhbicgKyBhdHRycyArICc+JyArXG4gICAgICAgICAgICBpbm5lckh0bWwgK1xuICAgICAgICAgICAgJzwvc3Bhbj4nO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEFsbERheUh0bWwoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudC5vcHQoJ2FsbERheUh0bWwnKSB8fCBodG1sRXNjYXBlKGNvbXBvbmVudC5vcHQoJ2FsbERheVRleHQnKSk7XG59XG4vLyBDb21wdXRlcyBIVE1MIGNsYXNzTmFtZXMgZm9yIGEgc2luZ2xlLWRheSBlbGVtZW50XG5mdW5jdGlvbiBnZXREYXlDbGFzc2VzKGRhdGUsIGRhdGVQcm9maWxlLCBjb250ZXh0LCBub1RoZW1lSGlnaGxpZ2h0KSB7XG4gICAgdmFyIGNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhciwgdmlldyA9IGNvbnRleHQudmlldywgdGhlbWUgPSBjb250ZXh0LnRoZW1lLCBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52O1xuICAgIHZhciBjbGFzc2VzID0gW107XG4gICAgdmFyIHRvZGF5U3RhcnQ7XG4gICAgdmFyIHRvZGF5RW5kO1xuICAgIGlmICghcmFuZ2VDb250YWluc01hcmtlcihkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgZGF0ZSkpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1kaXNhYmxlZC1kYXknKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzZXMucHVzaCgnZmMtJyArIERBWV9JRFNbZGF0ZS5nZXRVVENEYXkoKV0pO1xuICAgICAgICBpZiAodmlldy5vcHQoJ21vbnRoTW9kZScpICYmXG4gICAgICAgICAgICBkYXRlRW52LmdldE1vbnRoKGRhdGUpICE9PSBkYXRlRW52LmdldE1vbnRoKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydCkpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtb3RoZXItbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICB0b2RheVN0YXJ0ID0gc3RhcnRPZkRheShjYWxlbmRhci5nZXROb3coKSk7XG4gICAgICAgIHRvZGF5RW5kID0gYWRkRGF5cyh0b2RheVN0YXJ0LCAxKTtcbiAgICAgICAgaWYgKGRhdGUgPCB0b2RheVN0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLXBhc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRlID49IHRvZGF5RW5kKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWZ1dHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy10b2RheScpO1xuICAgICAgICAgICAgaWYgKG5vVGhlbWVIaWdobGlnaHQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2godGhlbWUuZ2V0Q2xhc3MoJ3RvZGF5JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xufVxuXG4vLyBnaXZlbiBhIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgYSByZXN1bHQgYXN5bmNocm9ub3VzbHkuXG4vLyB0aGUgZnVuY3Rpb24gY2FuIGVpdGhlciBjYWxsIHBhc3NlZC1pbiBzdWNjZXNzIGFuZCBmYWlsdXJlIGNhbGxiYWNrcyxcbi8vIG9yIGl0IGNhbiByZXR1cm4gYSBwcm9taXNlLlxuLy8gaWYgeW91IG5lZWQgdG8gcGFzcyBhZGRpdGlvbmFsIHBhcmFtcyB0byBmdW5jLCBiaW5kIHRoZW0gZmlyc3QuXG5mdW5jdGlvbiB1bnByb21pc2lmeShmdW5jLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCBzdWNjZXNzL2ZhaWx1cmUgY2FsbGJhY2tzIGJlaW5nIGNhbGxlZCBtb3JlIHRoYW4gb25jZVxuICAgIC8vIGFuZCBndWFyZCBhZ2FpbnN0IGEgcHJvbWlzZSBBTkQgY2FsbGJhY2sgYmVpbmcgdXNlZCB0b2dldGhlci5cbiAgICB2YXIgaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciB3cmFwcGVkU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICBpc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHN1Y2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHdyYXBwZWRGYWlsdXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZXMgPSBmdW5jKHdyYXBwZWRTdWNjZXNzLCB3cmFwcGVkRmFpbHVyZSk7XG4gICAgaWYgKHJlcyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLnRoZW4od3JhcHBlZFN1Y2Nlc3MsIHdyYXBwZWRGYWlsdXJlKTtcbiAgICB9XG59XG5cbnZhciBNaXhpbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNaXhpbigpIHtcbiAgICB9XG4gICAgLy8gbWl4IGludG8gYSBDTEFTU1xuICAgIE1peGluLm1peEludG8gPSBmdW5jdGlvbiAoZGVzdENsYXNzKSB7XG4gICAgICAgIHRoaXMubWl4SW50b09iaihkZXN0Q2xhc3MucHJvdG90eXBlKTtcbiAgICB9O1xuICAgIC8vIG1peCBpbnRvIEFOWSBvYmplY3RcbiAgICBNaXhpbi5taXhJbnRvT2JqID0gZnVuY3Rpb24gKGRlc3RPYmopIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghZGVzdE9ialtuYW1lXSkgeyAvLyBpZiBkZXN0aW5hdGlvbiBkb2Vzbid0IGFscmVhZHkgZGVmaW5lIGl0XG4gICAgICAgICAgICAgICAgZGVzdE9ialtuYW1lXSA9IF90aGlzLnByb3RvdHlwZVtuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKlxuICAgIHdpbGwgb3ZlcnJpZGUgZXhpc3RpbmcgbWV0aG9kc1xuICAgIFRPRE86IHJlbW92ZSEgbm90IHVzZWQgYW55bW9yZVxuICAgICovXG4gICAgTWl4aW4ubWl4T3ZlciA9IGZ1bmN0aW9uIChkZXN0Q2xhc3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGRlc3RDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBfdGhpcy5wcm90b3R5cGVbbmFtZV07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1peGluO1xufSgpKTtcblxuLypcblVTQUdFOlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIEVtaXR0ZXJNaXhpbiwgRW1pdHRlckludGVyZmFjZSB9IGZyb20gJy4vRW1pdHRlck1peGluJ1xuaW4gY2xhc3M6XG4gIG9uOiBFbWl0dGVySW50ZXJmYWNlWydvbiddXG4gIG9uZTogRW1pdHRlckludGVyZmFjZVsnb25lJ11cbiAgb2ZmOiBFbWl0dGVySW50ZXJmYWNlWydvZmYnXVxuICB0cmlnZ2VyOiBFbWl0dGVySW50ZXJmYWNlWyd0cmlnZ2VyJ11cbiAgdHJpZ2dlcldpdGg6IEVtaXR0ZXJJbnRlcmZhY2VbJ3RyaWdnZXJXaXRoJ11cbiAgaGFzSGFuZGxlcnM6IEVtaXR0ZXJJbnRlcmZhY2VbJ2hhc0hhbmRsZXJzJ11cbmFmdGVyIGNsYXNzOlxuICBFbWl0dGVyTWl4aW4ubWl4SW50byhUaGVDbGFzcylcbiovXG52YXIgRW1pdHRlck1peGluID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbWl0dGVyTWl4aW4sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1pdHRlck1peGluKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBhZGRUb0hhc2godGhpcy5faGFuZGxlcnMgfHwgKHRoaXMuX2hhbmRsZXJzID0ge30pLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7IC8vIGZvciBjaGFpbmluZ1xuICAgIH07XG4gICAgLy8gdG9kbzogYWRkIGNvbW1lbnRzXG4gICAgRW1pdHRlck1peGluLnByb3RvdHlwZS5vbmUgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBhZGRUb0hhc2godGhpcy5fb25lSGFuZGxlcnMgfHwgKHRoaXMuX29uZUhhbmRsZXJzID0ge30pLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7IC8vIGZvciBjaGFpbmluZ1xuICAgIH07XG4gICAgRW1pdHRlck1peGluLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5faGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21IYXNoKHRoaXMuX2hhbmRsZXJzLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fb25lSGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHJlbW92ZUZyb21IYXNoKHRoaXMuX29uZUhhbmRsZXJzLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgfTtcbiAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXJXaXRoKHR5cGUsIHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgfTtcbiAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLnRyaWdnZXJXaXRoID0gZnVuY3Rpb24gKHR5cGUsIGNvbnRleHQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICBhcHBseUFsbCh0aGlzLl9oYW5kbGVyc1t0eXBlXSwgY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29uZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICBhcHBseUFsbCh0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXSwgY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb25lSGFuZGxlcnNbdHlwZV07IC8vIHdpbGwgbmV2ZXIgZmlyZSBhZ2FpblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzOyAvLyBmb3IgY2hhaW5pbmdcbiAgICB9O1xuICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUuaGFzSGFuZGxlcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hhbmRsZXJzICYmIHRoaXMuX2hhbmRsZXJzW3R5cGVdICYmIHRoaXMuX2hhbmRsZXJzW3R5cGVdLmxlbmd0aCkgfHxcbiAgICAgICAgICAgICh0aGlzLl9vbmVIYW5kbGVycyAmJiB0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXSAmJiB0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXS5sZW5ndGgpO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXJNaXhpbjtcbn0oTWl4aW4pKTtcbmZ1bmN0aW9uIGFkZFRvSGFzaChoYXNoLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgKGhhc2hbdHlwZV0gfHwgKGhhc2hbdHlwZV0gPSBbXSkpXG4gICAgICAgIC5wdXNoKGhhbmRsZXIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRnJvbUhhc2goaGFzaCwgdHlwZSwgaGFuZGxlcikge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIGlmIChoYXNoW3R5cGVdKSB7XG4gICAgICAgICAgICBoYXNoW3R5cGVdID0gaGFzaFt0eXBlXS5maWx0ZXIoZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyAhPT0gaGFuZGxlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWxldGUgaGFzaFt0eXBlXTsgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyIGZ1bmNzIGZvciB0aGlzIHR5cGVcbiAgICB9XG59XG5cbi8qXG5SZWNvcmRzIG9mZnNldCBpbmZvcm1hdGlvbiBmb3IgYSBzZXQgb2YgZWxlbWVudHMsIHJlbGF0aXZlIHRvIGFuIG9yaWdpbiBlbGVtZW50LlxuQ2FuIHJlY29yZCB0aGUgbGVmdC9yaWdodCBPUiB0aGUgdG9wL2JvdHRvbSBPUiBib3RoLlxuUHJvdmlkZXMgbWV0aG9kcyBmb3IgcXVlcnlpbmcgdGhlIGNhY2hlIGJ5IHBvc2l0aW9uLlxuKi9cbnZhciBQb3NpdGlvbkNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvc2l0aW9uQ2FjaGUob3JpZ2luRWwsIGVscywgaXNIb3Jpem9udGFsLCBpc1ZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMub3JpZ2luRWwgPSBvcmlnaW5FbDtcbiAgICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgICAgIHRoaXMuaXNIb3Jpem9udGFsID0gaXNIb3Jpem9udGFsO1xuICAgICAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuICAgIH1cbiAgICAvLyBRdWVyaWVzIHRoZSBlbHMgZm9yIGNvb3JkaW5hdGVzIGFuZCBzdG9yZXMgdGhlbS5cbiAgICAvLyBDYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSB1c2luZyBhbmQgb2YgdGhlIGdldCogbWV0aG9kcyBiZWxvdy5cbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9yaWdpbkVsID0gdGhpcy5vcmlnaW5FbDtcbiAgICAgICAgdmFyIG9yaWdpbkNsaWVudFJlY3QgPSB0aGlzLm9yaWdpbkNsaWVudFJlY3QgPVxuICAgICAgICAgICAgb3JpZ2luRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHJlbGF0aXZlIHRvIHZpZXdwb3J0IHRvcC1sZWZ0XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdGhpcy5idWlsZEVsSG9yaXpvbnRhbHMob3JpZ2luQ2xpZW50UmVjdC5sZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRWxWZXJ0aWNhbHMob3JpZ2luQ2xpZW50UmVjdC50b3ApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBQb3B1bGF0ZXMgdGhlIGxlZnQvcmlnaHQgaW50ZXJuYWwgY29vcmRpbmF0ZSBhcnJheXNcbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZEVsSG9yaXpvbnRhbHMgPSBmdW5jdGlvbiAob3JpZ2luQ2xpZW50TGVmdCkge1xuICAgICAgICB2YXIgbGVmdHMgPSBbXTtcbiAgICAgICAgdmFyIHJpZ2h0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5lbHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgbGVmdHMucHVzaChyZWN0LmxlZnQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgICAgIHJpZ2h0cy5wdXNoKHJlY3QucmlnaHQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZnRzID0gbGVmdHM7XG4gICAgICAgIHRoaXMucmlnaHRzID0gcmlnaHRzO1xuICAgIH07XG4gICAgLy8gUG9wdWxhdGVzIHRoZSB0b3AvYm90dG9tIGludGVybmFsIGNvb3JkaW5hdGUgYXJyYXlzXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUuYnVpbGRFbFZlcnRpY2FscyA9IGZ1bmN0aW9uIChvcmlnaW5DbGllbnRUb3ApIHtcbiAgICAgICAgdmFyIHRvcHMgPSBbXTtcbiAgICAgICAgdmFyIGJvdHRvbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZWxzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGVsID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHRvcHMucHVzaChyZWN0LnRvcCAtIG9yaWdpbkNsaWVudFRvcCk7XG4gICAgICAgICAgICBib3R0b21zLnB1c2gocmVjdC5ib3R0b20gLSBvcmlnaW5DbGllbnRUb3ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9wcyA9IHRvcHM7XG4gICAgICAgIHRoaXMuYm90dG9tcyA9IGJvdHRvbXM7XG4gICAgfTtcbiAgICAvLyBHaXZlbiBhIGxlZnQgb2Zmc2V0IChmcm9tIGRvY3VtZW50IGxlZnQpLCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZWwgdGhhdCBpdCBob3Jpem9udGFsbHkgaW50ZXJzZWN0cy5cbiAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUubGVmdFRvSW5kZXggPSBmdW5jdGlvbiAobGVmdFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBsZWZ0cyA9IHRoaXMubGVmdHM7XG4gICAgICAgIHZhciByaWdodHMgPSB0aGlzLnJpZ2h0cztcbiAgICAgICAgdmFyIGxlbiA9IGxlZnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGxlZnRQb3NpdGlvbiA+PSBsZWZ0c1tpXSAmJiBsZWZ0UG9zaXRpb24gPCByaWdodHNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gR2l2ZW4gYSB0b3Agb2Zmc2V0IChmcm9tIGRvY3VtZW50IHRvcCksIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBlbCB0aGF0IGl0IHZlcnRpY2FsbHkgaW50ZXJzZWN0cy5cbiAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUudG9wVG9JbmRleCA9IGZ1bmN0aW9uICh0b3BQb3NpdGlvbikge1xuICAgICAgICB2YXIgdG9wcyA9IHRoaXMudG9wcztcbiAgICAgICAgdmFyIGJvdHRvbXMgPSB0aGlzLmJvdHRvbXM7XG4gICAgICAgIHZhciBsZW4gPSB0b3BzLmxlbmd0aDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRvcFBvc2l0aW9uID49IHRvcHNbaV0gJiYgdG9wUG9zaXRpb24gPCBib3R0b21zW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxuICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLmdldFdpZHRoID0gZnVuY3Rpb24gKGxlZnRJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yaWdodHNbbGVmdEluZGV4XSAtIHRoaXMubGVmdHNbbGVmdEluZGV4XTtcbiAgICB9O1xuICAgIC8vIEdldHMgdGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXhcbiAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAodG9wSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tc1t0b3BJbmRleF0gLSB0aGlzLnRvcHNbdG9wSW5kZXhdO1xuICAgIH07XG4gICAgcmV0dXJuIFBvc2l0aW9uQ2FjaGU7XG59KCkpO1xuXG4vKlxuQW4gb2JqZWN0IGZvciBnZXR0aW5nL3NldHRpbmcgc2Nyb2xsLXJlbGF0ZWQgaW5mb3JtYXRpb24gZm9yIGFuIGVsZW1lbnQuXG5JbnRlcm5hbGx5LCB0aGlzIGlzIGRvbmUgdmVyeSBkaWZmZXJlbnRseSBmb3Igd2luZG93IHZlcnN1cyBET00gZWxlbWVudCxcbnNvIHRoaXMgb2JqZWN0IHNlcnZlcyBhcyBhIGNvbW1vbiBpbnRlcmZhY2UuXG4qL1xudmFyIFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQ29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWF4U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKSAtIHRoaXMuZ2V0Q2xpZW50SGVpZ2h0KCk7XG4gICAgfTtcbiAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRNYXhTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxXaWR0aCgpIC0gdGhpcy5nZXRDbGllbnRXaWR0aCgpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVmVydGljYWxseSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF4U2Nyb2xsVG9wKCkgPiAwO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXhTY3JvbGxMZWZ0KCkgPiAwO1xuICAgIH07XG4gICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFRvcCgpID4gMDtcbiAgICB9O1xuICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbERvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFRvcCgpIDwgdGhpcy5nZXRNYXhTY3JvbGxUb3AoKTtcbiAgICB9O1xuICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbExlZnQoKSA+IDA7XG4gICAgfTtcbiAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5jYW5TY3JvbGxSaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsTGVmdCgpIDwgdGhpcy5nZXRNYXhTY3JvbGxMZWZ0KCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2Nyb2xsQ29udHJvbGxlcjtcbn0oKSk7XG52YXIgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyKGVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsVG9wO1xuICAgIH07XG4gICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnNjcm9sbExlZnQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKHRvcCkge1xuICAgICAgICB0aGlzLmVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICB9O1xuICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKGxlZnQpIHtcbiAgICAgICAgdGhpcy5lbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9O1xuICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsV2lkdGg7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zY3JvbGxIZWlnaHQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5jbGllbnRIZWlnaHQ7XG4gICAgfTtcbiAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNsaWVudFdpZHRoO1xuICAgIH07XG4gICAgcmV0dXJuIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyO1xufShTY3JvbGxDb250cm9sbGVyKSk7XG52YXIgV2luZG93U2Nyb2xsQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV2luZG93U2Nyb2xsQ29udHJvbGxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBXaW5kb3dTY3JvbGxDb250cm9sbGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB9O1xuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsKHdpbmRvdy5wYWdlWE9mZnNldCwgbik7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgd2luZG93LnNjcm9sbChuLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIH07XG4gICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIH07XG4gICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB9O1xuICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldENsaWVudFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIH07XG4gICAgcmV0dXJuIFdpbmRvd1Njcm9sbENvbnRyb2xsZXI7XG59KFNjcm9sbENvbnRyb2xsZXIpKTtcblxuLypcbkVtYm9kaWVzIGEgZGl2IHRoYXQgaGFzIHBvdGVudGlhbCBzY3JvbGxiYXJzXG4qL1xudmFyIFNjcm9sbENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2Nyb2xsQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcm9sbENvbXBvbmVudChvdmVyZmxvd1gsIG92ZXJmbG93WSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdmYy1zY3JvbGxlcidcbiAgICAgICAgfSkpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm92ZXJmbG93WCA9IG92ZXJmbG93WDtcbiAgICAgICAgX3RoaXMub3ZlcmZsb3dZID0gb3ZlcmZsb3dZO1xuICAgICAgICBfdGhpcy5hcHBseU92ZXJmbG93KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLy8gc2V0cyB0byBuYXR1cmFsIGhlaWdodCwgdW5sb2NrcyBvdmVyZmxvd1xuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KCdhdXRvJyk7XG4gICAgICAgIHRoaXMuYXBwbHlPdmVyZmxvdygpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgLy8gT3ZlcmZsb3dcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuYXBwbHlPdmVyZmxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmVsLCB7XG4gICAgICAgICAgICBvdmVyZmxvd1g6IHRoaXMub3ZlcmZsb3dYLFxuICAgICAgICAgICAgb3ZlcmZsb3dZOiB0aGlzLm92ZXJmbG93WVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIENhdXNlcyBhbnkgJ2F1dG8nIG92ZXJmbG93IHZhbHVlcyB0byByZXNvbHZlcyB0byAnc2Nyb2xsJyBvciAnaGlkZGVuJy5cbiAgICAvLyBVc2VmdWwgZm9yIHByZXNlcnZpbmcgc2Nyb2xsYmFyIHdpZHRocyByZWdhcmRsZXNzIG9mIGZ1dHVyZSByZXNpemVzLlxuICAgIC8vIENhbiBwYXNzIGluIHNjcm9sbGJhcldpZHRocyBmb3Igb3B0aW1pemF0aW9uLlxuICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUubG9ja092ZXJmbG93ID0gZnVuY3Rpb24gKHNjcm9sbGJhcldpZHRocykge1xuICAgICAgICB2YXIgb3ZlcmZsb3dYID0gdGhpcy5vdmVyZmxvd1g7XG4gICAgICAgIHZhciBvdmVyZmxvd1kgPSB0aGlzLm92ZXJmbG93WTtcbiAgICAgICAgc2Nyb2xsYmFyV2lkdGhzID0gc2Nyb2xsYmFyV2lkdGhzIHx8IHRoaXMuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgIGlmIChvdmVyZmxvd1ggPT09ICdhdXRvJykge1xuICAgICAgICAgICAgb3ZlcmZsb3dYID0gKHNjcm9sbGJhcldpZHRocy5ib3R0b20gfHwgLy8gaG9yaXpvbnRhbCBzY3JvbGxiYXJzP1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5KCkgLy8gT1Igc2Nyb2xsaW5nIHBhbmUgd2l0aCBtYXNzbGVzcyBzY3JvbGxiYXJzP1xuICAgICAgICAgICAgKSA/ICdzY3JvbGwnIDogJ2hpZGRlbic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG92ZXJmbG93WSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBvdmVyZmxvd1kgPSAoc2Nyb2xsYmFyV2lkdGhzLmxlZnQgfHwgc2Nyb2xsYmFyV2lkdGhzLnJpZ2h0IHx8IC8vIGhvcml6b250YWwgc2Nyb2xsYmFycz9cbiAgICAgICAgICAgICAgICB0aGlzLmNhblNjcm9sbFZlcnRpY2FsbHkoKSAvLyBPUiBzY3JvbGxpbmcgcGFuZSB3aXRoIG1hc3NsZXNzIHNjcm9sbGJhcnM/XG4gICAgICAgICAgICApID8gJ3Njcm9sbCcgOiAnaGlkZGVuJztcbiAgICAgICAgfVxuICAgICAgICBhcHBseVN0eWxlKHRoaXMuZWwsIHsgb3ZlcmZsb3dYOiBvdmVyZmxvd1gsIG92ZXJmbG93WTogb3ZlcmZsb3dZIH0pO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgICAgIGFwcGx5U3R5bGVQcm9wKHRoaXMuZWwsICdoZWlnaHQnLCBoZWlnaHQpO1xuICAgIH07XG4gICAgU2Nyb2xsQ29tcG9uZW50LnByb3RvdHlwZS5nZXRTY3JvbGxiYXJXaWR0aHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNvbXB1dGVFZGdlcyh0aGlzLmVsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IGVkZ2VzLnNjcm9sbGJhckxlZnQsXG4gICAgICAgICAgICByaWdodDogZWRnZXMuc2Nyb2xsYmFyUmlnaHQsXG4gICAgICAgICAgICBib3R0b206IGVkZ2VzLnNjcm9sbGJhckJvdHRvbVxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFNjcm9sbENvbXBvbmVudDtcbn0oRWxlbWVudFNjcm9sbENvbnRyb2xsZXIpKTtcblxudmFyIFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRoZW1lKGNhbGVuZGFyT3B0aW9ucykge1xuICAgICAgICB0aGlzLmNhbGVuZGFyT3B0aW9ucyA9IGNhbGVuZGFyT3B0aW9ucztcbiAgICAgICAgdGhpcy5wcm9jZXNzSWNvbk92ZXJyaWRlKCk7XG4gICAgfVxuICAgIFRoZW1lLnByb3RvdHlwZS5wcm9jZXNzSWNvbk92ZXJyaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVPcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SWNvbk92ZXJyaWRlKHRoaXMuY2FsZW5kYXJPcHRpb25zW3RoaXMuaWNvbk92ZXJyaWRlT3B0aW9uXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRoZW1lLnByb3RvdHlwZS5zZXRJY29uT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaWNvbk92ZXJyaWRlSGFzaCkge1xuICAgICAgICB2YXIgaWNvbkNsYXNzZXNDb3B5O1xuICAgICAgICB2YXIgYnV0dG9uTmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZiBpY29uT3ZlcnJpZGVIYXNoID09PSAnb2JqZWN0JyAmJiBpY29uT3ZlcnJpZGVIYXNoKSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICAgICAgaWNvbkNsYXNzZXNDb3B5ID0gX19hc3NpZ24oe30sIHRoaXMuaWNvbkNsYXNzZXMpO1xuICAgICAgICAgICAgZm9yIChidXR0b25OYW1lIGluIGljb25PdmVycmlkZUhhc2gpIHtcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3Nlc0NvcHlbYnV0dG9uTmFtZV0gPSB0aGlzLmFwcGx5SWNvbk92ZXJyaWRlUHJlZml4KGljb25PdmVycmlkZUhhc2hbYnV0dG9uTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IGljb25DbGFzc2VzQ29weTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpY29uT3ZlcnJpZGVIYXNoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IHt9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaGVtZS5wcm90b3R5cGUuYXBwbHlJY29uT3ZlcnJpZGVQcmVmaXggPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSB0aGlzLmljb25PdmVycmlkZVByZWZpeDtcbiAgICAgICAgaWYgKHByZWZpeCAmJiBjbGFzc05hbWUuaW5kZXhPZihwcmVmaXgpICE9PSAwKSB7IC8vIGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IHByZWZpeCArIGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lO1xuICAgIH07XG4gICAgVGhlbWUucHJvdG90eXBlLmdldENsYXNzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2VzW2tleV0gfHwgJyc7XG4gICAgfTtcbiAgICBUaGVtZS5wcm90b3R5cGUuZ2V0SWNvbkNsYXNzID0gZnVuY3Rpb24gKGJ1dHRvbk5hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuaWNvbkNsYXNzZXNbYnV0dG9uTmFtZV07XG4gICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VJY29uQ2xhc3MgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgVGhlbWUucHJvdG90eXBlLmdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyA9IGZ1bmN0aW9uIChjdXN0b21CdXR0b25Qcm9wcykge1xuICAgICAgICB2YXIgY2xhc3NOYW1lO1xuICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24pIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGN1c3RvbUJ1dHRvblByb3BzW3RoaXMuaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uXTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSWNvbkNsYXNzICsgJyAnICsgdGhpcy5hcHBseUljb25PdmVycmlkZVByZWZpeChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHJldHVybiBUaGVtZTtcbn0oKSk7XG5UaGVtZS5wcm90b3R5cGUuY2xhc3NlcyA9IHt9O1xuVGhlbWUucHJvdG90eXBlLmljb25DbGFzc2VzID0ge307XG5UaGVtZS5wcm90b3R5cGUuYmFzZUljb25DbGFzcyA9ICcnO1xuVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZVByZWZpeCA9ICcnO1xuXG52YXIgZ3VpZCA9IDA7XG52YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudChjb250ZXh0LCBpc1ZpZXcpIHtcbiAgICAgICAgLy8gSEFDSyB0byBwb3B1bGF0ZSB2aWV3IGF0IHRvcCBvZiBjb21wb25lbnQgaW5zdGFudGlhdGlvbiBjYWxsIGNoYWluXG4gICAgICAgIGlmIChpc1ZpZXcpIHtcbiAgICAgICAgICAgIGNvbnRleHQudmlldyA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51aWQgPSBTdHJpbmcoZ3VpZCsrKTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5kYXRlRW52ID0gY29udGV4dC5kYXRlRW52O1xuICAgICAgICB0aGlzLnRoZW1lID0gY29udGV4dC50aGVtZTtcbiAgICAgICAgdGhpcy52aWV3ID0gY29udGV4dC52aWV3O1xuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhcjtcbiAgICAgICAgdGhpcy5pc1J0bCA9IHRoaXMub3B0KCdkaXInKSA9PT0gJ3J0bCc7XG4gICAgfVxuICAgIENvbXBvbmVudC5hZGRFcXVhbGl0eUZ1bmNzID0gZnVuY3Rpb24gKG5ld0Z1bmNzKSB7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLmVxdWFsaXR5RnVuY3MgPSBfX2Fzc2lnbih7fSwgdGhpcy5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcywgbmV3RnVuY3MpO1xuICAgIH07XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5vcHQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm9wdGlvbnNbbmFtZV07XG4gICAgfTtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgX2EgPSByZWN5Y2xlUHJvcHModGhpcy5wcm9wcyB8fCB7fSwgcHJvcHMsIHRoaXMuZXF1YWxpdHlGdW5jcyksIGFueUNoYW5nZXMgPSBfYS5hbnlDaGFuZ2VzLCBjb21ib1Byb3BzID0gX2EuY29tYm9Qcm9wcztcbiAgICAgICAgdGhpcy5wcm9wcyA9IGNvbWJvUHJvcHM7XG4gICAgICAgIGlmIChhbnlDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcihjb21ib1Byb3BzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB9O1xuICAgIC8vIGFmdGVyIGRlc3Ryb3kgaXMgY2FsbGVkLCB0aGlzIGNvbXBvbmVudCB3b24ndCBldmVyIGJlIHVzZWQgYWdhaW5cbiAgICBDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xufSgpKTtcbkNvbXBvbmVudC5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcyA9IHt9O1xuLypcblJldXNlcyBvbGQgdmFsdWVzIHdoZW4gZXF1YWwuIElmIGFueXRoaW5nIGlzIHVuZXF1YWwsIHJldHVybnMgbmV3UHJvcHMgYXMtaXMuXG5HcmVhdCBmb3IgUHVyZUNvbXBvbmVudCwgYnV0IHdvbid0IGJlIGZlYXNpYmxlIHdpdGggUmVhY3QsIHNvIGp1c3QgZWxpbWluYXRlIGFuZCB1c2UgUmVhY3QncyBET00gZGlmZmluZy5cbiovXG5mdW5jdGlvbiByZWN5Y2xlUHJvcHMob2xkUHJvcHMsIG5ld1Byb3BzLCBlcXVhbGl0eUZ1bmNzKSB7XG4gICAgdmFyIGNvbWJvUHJvcHMgPSB7fTsgLy8gc29tZSBvbGQsIHNvbWUgbmV3XG4gICAgdmFyIGFueUNoYW5nZXMgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRQcm9wcyAmJiAob2xkUHJvcHNba2V5XSA9PT0gbmV3UHJvcHNba2V5XSB8fFxuICAgICAgICAgICAgKGVxdWFsaXR5RnVuY3Nba2V5XSAmJiBlcXVhbGl0eUZ1bmNzW2tleV0ob2xkUHJvcHNba2V5XSwgbmV3UHJvcHNba2V5XSkpKSkge1xuICAgICAgICAgICAgLy8gZXF1YWwgdG8gb2xkPyB1c2Ugb2xkIHByb3BcbiAgICAgICAgICAgIGNvbWJvUHJvcHNba2V5XSA9IG9sZFByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21ib1Byb3BzW2tleV0gPSBuZXdQcm9wc1trZXldO1xuICAgICAgICAgICAgYW55Q2hhbmdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBuZXdQcm9wcykpIHtcbiAgICAgICAgICAgIGFueUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYW55Q2hhbmdlczogYW55Q2hhbmdlcywgY29tYm9Qcm9wczogY29tYm9Qcm9wcyB9O1xufVxuXG4vKlxuUFVSUE9TRVM6XG4tIGhvb2sgdXAgdG8gZmcsIGZpbGwsIGFuZCBtaXJyb3IgcmVuZGVyZXJzXG4tIGludGVyZmFjZSBmb3IgZHJhZ2dpbmcgYW5kIGhpdHNcbiovXG52YXIgRGF0ZUNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF0ZUNvbXBvbmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXRlQ29tcG9uZW50KGNvbnRleHQsIGVsLCBpc1ZpZXcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCwgaXNWaWV3KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuZWwpO1xuICAgIH07XG4gICAgLy8gVE9ETzogV0hBVCBBQk9VVCAoc291cmNlU2VnICYmIHNvdXJjZVNlZy5jb21wb25lbnQuZG9lc0RyYWdNaXJyb3IpXG4gICAgLy9cbiAgICAvLyBFdmVudCBEcmFnLW4tRHJvcCBSZW5kZXJpbmcgKGZvciBib3RoIGV2ZW50cyBhbmQgZXh0ZXJuYWwgZWxlbWVudHMpXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLypcbiAgICByZW5kZXJFdmVudERyYWdTZWdzKHN0YXRlOiBFdmVudFNlZ1VpSW50ZXJhY3Rpb25TdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIGxldCB7IGlzRXZlbnQsIHNlZ3MsIHNvdXJjZVNlZyB9ID0gc3RhdGVcbiAgXG4gICAgICAgIGlmICh0aGlzLmV2ZW50UmVuZGVyZXIpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50UmVuZGVyZXIuaGlkZUJ5SGFzaChzdGF0ZS5hZmZlY3RlZEluc3RhbmNlcylcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgaXMgZHJhZ2dpbmcgc29tZXRoaW5nIHRoYXQgaXMgY29uc2lkZXJlZCBhbiBldmVudCB3aXRoIHJlYWwgZXZlbnQgZGF0YSxcbiAgICAgICAgLy8gYW5kIHRoaXMgY29tcG9uZW50IGxpa2VzIHRvIGRvIGRyYWcgbWlycm9ycyBPUiB0aGUgY29tcG9uZW50IHdoZXJlIHRoZSBzZWcgY2FtZSBmcm9tXG4gICAgICAgIC8vIGxpa2VzIHRvIGRvIGRyYWcgbWlycm9ycywgdGhlbiByZW5kZXIgYSBkcmFnIG1pcnJvci5cbiAgICAgICAgaWYgKGlzRXZlbnQgJiYgKHRoaXMuZG9lc0RyYWdNaXJyb3IgfHwgc291cmNlU2VnICYmIHNvdXJjZVNlZy5jb21wb25lbnQuZG9lc0RyYWdNaXJyb3IpKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWlycm9yUmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIucmVuZGVyU2VncyhzZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZyB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gaWYgaXQgd291bGQgYmUgaW1wb3NzaWJsZSB0byByZW5kZXIgYSBkcmFnIG1pcnJvciBPUiB0aGlzIGNvbXBvbmVudCBsaWtlcyB0byByZW5kZXJcbiAgICAgICAgLy8gaGlnaGxpZ2h0cywgdGhlbiByZW5kZXIgYSBoaWdobGlnaHQuXG4gICAgICAgIGlmICghaXNFdmVudCB8fCB0aGlzLmRvZXNEcmFnSGlnaGxpZ2h0KSB7XG4gICAgICAgICAgaWYgKHRoaXMuZmlsbFJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGxSZW5kZXJlci5yZW5kZXJTZWdzKCdoaWdobGlnaHQnLCBzZWdzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAqL1xuICAgIC8vIEhpdCBTeXN0ZW1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmJ1aWxkUG9zaXRpb25DYWNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wLCBlbFdpZHRoLCBlbEhlaWdodCkge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhpcyBzaG91bGQgYmUgYWJzdHJhY3RcbiAgICB9O1xuICAgIC8vIFZhbGlkYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzSW50ZXJhY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzLmluc3RhbmNlcztcbiAgICAgICAgaWYgKGRhdGVQcm9maWxlKSB7IC8vIEhBQ0sgZm9yIERheVRpbGVcbiAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zUmFuZ2UoZGF0ZVByb2ZpbGUudmFsaWRSYW5nZSwgaW5zdGFuY2VzW2luc3RhbmNlSWRdLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0ludGVyYWN0aW9uVmFsaWQoaW50ZXJhY3Rpb24sIGNhbGVuZGFyKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzRGF0ZVNlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgIGlmIChkYXRlUHJvZmlsZSAmJiAvLyBIQUNLIGZvciBEYXlUaWxlXG4gICAgICAgICAgICAhcmFuZ2VDb250YWluc1JhbmdlKGRhdGVQcm9maWxlLnZhbGlkUmFuZ2UsIHNlbGVjdGlvbi5yYW5nZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNEYXRlU2VsZWN0aW9uVmFsaWQoc2VsZWN0aW9uLCB0aGlzLmNhbGVuZGFyKTtcbiAgICB9O1xuICAgIC8vIFRyaWdnZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFRPRE86IG1vdmUgdG8gQ2FsZW5kYXJcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5wdWJsaWNseVRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICByZXR1cm4gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKG5hbWUsIGFyZ3MpO1xuICAgIH07XG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICByZXR1cm4gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcobmFtZSwgYXJncyk7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5oYXNQdWJsaWNIYW5kbGVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIHJldHVybiBjYWxlbmRhci5oYXNQdWJsaWNIYW5kbGVycyhuYW1lKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLnRyaWdnZXJSZW5kZXJlZFNlZ3MgPSBmdW5jdGlvbiAoc2VncywgaXNNaXJyb3JzKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIGlmICh0aGlzLmhhc1B1YmxpY0hhbmRsZXJzKCdldmVudFBvc2l0aW9uZWQnKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlckFmdGVyU2l6aW5nKCdldmVudFBvc2l0aW9uZWQnLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNaXJyb3I6IGlzTWlycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlZy5pc1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IHNlZy5pc0VuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWcuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB0aGlzIC8vIHNhZmUgdG8gY2FzdCBiZWNhdXNlIHRoaXMgbWV0aG9kIGlzIG9ubHkgY2FsbGVkIG9uIGNvbnRleHQudmlld1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWxlbmRhci5zdGF0ZS5sb2FkaW5nTGV2ZWwpIHsgLy8gYXZvaWQgaW5pdGlhbCBlbXB0eSBzdGF0ZSB3aGlsZSBwZW5kaW5nXG4gICAgICAgICAgICBjYWxlbmRhci5hZnRlclNpemluZ1RyaWdnZXJzLl9ldmVudHNQb3NpdGlvbmVkID0gW251bGxdOyAvLyBmaXJlIG9uY2VcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUudHJpZ2dlcldpbGxSZW1vdmVTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIGlzTWlycm9ycykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgICAgICBjYWxlbmRhci50cmlnZ2VyKCdldmVudEVsUmVtb3ZlJywgc2VnLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNQdWJsaWNIYW5kbGVycygnZXZlbnREZXN0cm95JykpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgc2Vnc18zID0gc2VnczsgX2EgPCBzZWdzXzMubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfM1tfYV07XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50RGVzdHJveScsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc2VnLmV2ZW50UmFuZ2UuZGVmLCBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHNlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHRoaXMgLy8gc2FmZSB0byBjYXN0IGJlY2F1c2UgdGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQgb24gY29udGV4dC52aWV3XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUG9pbnRlciBJbnRlcmFjdGlvbiBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuaXNWYWxpZFNlZ0Rvd25FbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gIXRoaXMucHJvcHMuZXZlbnREcmFnICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICF0aGlzLnByb3BzLmV2ZW50UmVzaXplICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICFlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1taXJyb3InKSAmJlxuICAgICAgICAgICAgKHRoaXMuaXNQb3BvdmVyKCkgfHwgIXRoaXMuaXNJblBvcG92ZXIoZWwpKTtcbiAgICAgICAgLy8gXmFib3ZlIGxpbmUgZW5zdXJlcyB3ZSBkb24ndCBkZXRlY3QgYSBzZWcgaW50ZXJhY3Rpb24gd2l0aGluIGEgbmVzdGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gaXQncyBhIEhBQ0sgYmVjYXVzZSBpdCBvbmx5IHN1cHBvcnRzIGEgcG9wb3ZlciBhcyB0aGUgbmVzdGVkIGNvbXBvbmVudC5cbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzVmFsaWREYXRlRG93bkVsID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBzZWdFbCA9IGVsZW1lbnRDbG9zZXN0KGVsLCB0aGlzLmZnU2VnU2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gKCFzZWdFbCB8fCBzZWdFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLW1pcnJvcicpKSAmJlxuICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnLmZjLW1vcmUnKSAmJiAvLyBhIFwibW9yZS4uXCIgbGlua1xuICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnYVtkYXRhLWdvdG9dJykgJiYgLy8gYSBjbGlja2FibGUgbmF2IGxpbmtcbiAgICAgICAgICAgICF0aGlzLmlzSW5Qb3BvdmVyKGVsKTtcbiAgICB9O1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzUG9wb3ZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy1wb3BvdmVyJyk7XG4gICAgfTtcbiAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc0luUG9wb3ZlciA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1wb3BvdmVyJykpO1xuICAgIH07XG4gICAgcmV0dXJuIERhdGVDb21wb25lbnQ7XG59KENvbXBvbmVudCkpO1xuRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuZmdTZWdTZWxlY3RvciA9ICcuZmMtZXZlbnQtY29udGFpbmVyID4gKic7XG5EYXRlQ29tcG9uZW50LnByb3RvdHlwZS5iZ1NlZ1NlbGVjdG9yID0gJy5mYy1iZ2V2ZW50Om5vdCguZmMtbm9uYnVzaW5lc3MpJztcblxudmFyIHVpZCQxID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZVBsdWdpbihpbnB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBTdHJpbmcodWlkJDErKyksXG4gICAgICAgIGRlcHM6IGlucHV0LmRlcHMgfHwgW10sXG4gICAgICAgIHJlZHVjZXJzOiBpbnB1dC5yZWR1Y2VycyB8fCBbXSxcbiAgICAgICAgZXZlbnREZWZQYXJzZXJzOiBpbnB1dC5ldmVudERlZlBhcnNlcnMgfHwgW10sXG4gICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBpbnB1dC5pc0RyYWdnYWJsZVRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IGlucHV0LmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzIHx8IFtdLFxuICAgICAgICBldmVudERlZk11dGF0aW9uQXBwbGllcnM6IGlucHV0LmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyB8fCBbXSxcbiAgICAgICAgZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVyczogaW5wdXQuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogaW5wdXQuZGF0ZVBvaW50VHJhbnNmb3JtcyB8fCBbXSxcbiAgICAgICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBpbnB1dC5kYXRlU3BhblRyYW5zZm9ybXMgfHwgW10sXG4gICAgICAgIHZpZXdzOiBpbnB1dC52aWV3cyB8fCB7fSxcbiAgICAgICAgdmlld1Byb3BzVHJhbnNmb3JtZXJzOiBpbnB1dC52aWV3UHJvcHNUcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgIGlzUHJvcHNWYWxpZDogaW5wdXQuaXNQcm9wc1ZhbGlkIHx8IG51bGwsXG4gICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogaW5wdXQuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICBldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zOiBpbnB1dC5ldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICB2aWV3Q29udGFpbmVyTW9kaWZpZXJzOiBpbnB1dC52aWV3Q29udGFpbmVyTW9kaWZpZXJzIHx8IFtdLFxuICAgICAgICBldmVudERyb3BUcmFuc2Zvcm1lcnM6IGlucHV0LmV2ZW50RHJvcFRyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBpbnB1dC5jb21wb25lbnRJbnRlcmFjdGlvbnMgfHwgW10sXG4gICAgICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBpbnB1dC5jYWxlbmRhckludGVyYWN0aW9ucyB8fCBbXSxcbiAgICAgICAgdGhlbWVDbGFzc2VzOiBpbnB1dC50aGVtZUNsYXNzZXMgfHwge30sXG4gICAgICAgIGV2ZW50U291cmNlRGVmczogaW5wdXQuZXZlbnRTb3VyY2VEZWZzIHx8IFtdLFxuICAgICAgICBjbWRGb3JtYXR0ZXI6IGlucHV0LmNtZEZvcm1hdHRlcixcbiAgICAgICAgcmVjdXJyaW5nVHlwZXM6IGlucHV0LnJlY3VycmluZ1R5cGVzIHx8IFtdLFxuICAgICAgICBuYW1lZFRpbWVab25lZEltcGw6IGlucHV0Lm5hbWVkVGltZVpvbmVkSW1wbCxcbiAgICAgICAgZGVmYXVsdFZpZXc6IGlucHV0LmRlZmF1bHRWaWV3IHx8ICcnLFxuICAgICAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBpbnB1dC5lbGVtZW50RHJhZ2dpbmdJbXBsLFxuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogaW5wdXQub3B0aW9uQ2hhbmdlSGFuZGxlcnMgfHwge31cbiAgICB9O1xufVxudmFyIFBsdWdpblN5c3RlbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQbHVnaW5TeXN0ZW0oKSB7XG4gICAgICAgIHRoaXMuaG9va3MgPSB7XG4gICAgICAgICAgICByZWR1Y2VyczogW10sXG4gICAgICAgICAgICBldmVudERlZlBhcnNlcnM6IFtdLFxuICAgICAgICAgICAgaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBbXSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICBkYXRlU3BhblRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgdmlld3M6IHt9LFxuICAgICAgICAgICAgdmlld1Byb3BzVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogbnVsbCxcbiAgICAgICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICBldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgIHZpZXdDb250YWluZXJNb2RpZmllcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgIGNvbXBvbmVudEludGVyYWN0aW9uczogW10sXG4gICAgICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogW10sXG4gICAgICAgICAgICB0aGVtZUNsYXNzZXM6IHt9LFxuICAgICAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBbXSxcbiAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgICAgIHJlY3VycmluZ1R5cGVzOiBbXSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVkSW1wbDogbnVsbCxcbiAgICAgICAgICAgIGRlZmF1bHRWaWV3OiAnJyxcbiAgICAgICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczoge31cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRlZEhhc2ggPSB7fTtcbiAgICB9XG4gICAgUGx1Z2luU3lzdGVtLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGRlZEhhc2hbcGx1Z2luLmlkXSkge1xuICAgICAgICAgICAgdGhpcy5hZGRlZEhhc2hbcGx1Z2luLmlkXSA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcGx1Z2luLmRlcHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlcCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChkZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob29rcyA9IGNvbWJpbmVIb29rcyh0aGlzLmhvb2tzLCBwbHVnaW4pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUGx1Z2luU3lzdGVtO1xufSgpKTtcbmZ1bmN0aW9uIGNvbWJpbmVIb29rcyhob29rczAsIGhvb2tzMSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlZHVjZXJzOiBob29rczAucmVkdWNlcnMuY29uY2F0KGhvb2tzMS5yZWR1Y2VycyksXG4gICAgICAgIGV2ZW50RGVmUGFyc2VyczogaG9va3MwLmV2ZW50RGVmUGFyc2Vycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmUGFyc2VycyksXG4gICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBob29rczAuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMuY29uY2F0KGhvb2tzMS5pc0RyYWdnYWJsZVRyYW5zZm9ybWVycyksXG4gICAgICAgIGV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzOiBob29rczAuZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMuY29uY2F0KGhvb2tzMS5ldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VycyksXG4gICAgICAgIGV2ZW50RGVmTXV0YXRpb25BcHBsaWVyczogaG9va3MwLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyksXG4gICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IGhvb2tzMC5kYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyksXG4gICAgICAgIGRhdGVQb2ludFRyYW5zZm9ybXM6IGhvb2tzMC5kYXRlUG9pbnRUcmFuc2Zvcm1zLmNvbmNhdChob29rczEuZGF0ZVBvaW50VHJhbnNmb3JtcyksXG4gICAgICAgIGRhdGVTcGFuVHJhbnNmb3JtczogaG9va3MwLmRhdGVTcGFuVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmRhdGVTcGFuVHJhbnNmb3JtcyksXG4gICAgICAgIHZpZXdzOiBfX2Fzc2lnbih7fSwgaG9va3MwLnZpZXdzLCBob29rczEudmlld3MpLFxuICAgICAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IGhvb2tzMC52aWV3UHJvcHNUcmFuc2Zvcm1lcnMuY29uY2F0KGhvb2tzMS52aWV3UHJvcHNUcmFuc2Zvcm1lcnMpLFxuICAgICAgICBpc1Byb3BzVmFsaWQ6IGhvb2tzMS5pc1Byb3BzVmFsaWQgfHwgaG9va3MwLmlzUHJvcHNWYWxpZCxcbiAgICAgICAgZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zOiBob29rczAuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zLmNvbmNhdChob29rczEuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zKSxcbiAgICAgICAgZXZlbnRSZXNpemVKb2luVHJhbnNmb3JtczogaG9va3MwLmV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXMuY29uY2F0KGhvb2tzMS5ldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zKSxcbiAgICAgICAgdmlld0NvbnRhaW5lck1vZGlmaWVyczogaG9va3MwLnZpZXdDb250YWluZXJNb2RpZmllcnMuY29uY2F0KGhvb2tzMS52aWV3Q29udGFpbmVyTW9kaWZpZXJzKSxcbiAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBob29rczAuZXZlbnREcm9wVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZXZlbnREcm9wVHJhbnNmb3JtZXJzKSxcbiAgICAgICAgY2FsZW5kYXJJbnRlcmFjdGlvbnM6IGhvb2tzMC5jYWxlbmRhckludGVyYWN0aW9ucy5jb25jYXQoaG9va3MxLmNhbGVuZGFySW50ZXJhY3Rpb25zKSxcbiAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBob29rczAuY29tcG9uZW50SW50ZXJhY3Rpb25zLmNvbmNhdChob29rczEuY29tcG9uZW50SW50ZXJhY3Rpb25zKSxcbiAgICAgICAgdGhlbWVDbGFzc2VzOiBfX2Fzc2lnbih7fSwgaG9va3MwLnRoZW1lQ2xhc3NlcywgaG9va3MxLnRoZW1lQ2xhc3NlcyksXG4gICAgICAgIGV2ZW50U291cmNlRGVmczogaG9va3MwLmV2ZW50U291cmNlRGVmcy5jb25jYXQoaG9va3MxLmV2ZW50U291cmNlRGVmcyksXG4gICAgICAgIGNtZEZvcm1hdHRlcjogaG9va3MxLmNtZEZvcm1hdHRlciB8fCBob29rczAuY21kRm9ybWF0dGVyLFxuICAgICAgICByZWN1cnJpbmdUeXBlczogaG9va3MwLnJlY3VycmluZ1R5cGVzLmNvbmNhdChob29rczEucmVjdXJyaW5nVHlwZXMpLFxuICAgICAgICBuYW1lZFRpbWVab25lZEltcGw6IGhvb2tzMS5uYW1lZFRpbWVab25lZEltcGwgfHwgaG9va3MwLm5hbWVkVGltZVpvbmVkSW1wbCxcbiAgICAgICAgZGVmYXVsdFZpZXc6IGhvb2tzMC5kZWZhdWx0VmlldyB8fCBob29rczEuZGVmYXVsdFZpZXcsXG4gICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IGhvb2tzMC5lbGVtZW50RHJhZ2dpbmdJbXBsIHx8IGhvb2tzMS5lbGVtZW50RHJhZ2dpbmdJbXBsLFxuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogX19hc3NpZ24oe30sIGhvb2tzMC5vcHRpb25DaGFuZ2VIYW5kbGVycywgaG9va3MxLm9wdGlvbkNoYW5nZUhhbmRsZXJzKVxuICAgIH07XG59XG5cbnZhciBldmVudFNvdXJjZURlZiA9IHtcbiAgICBpZ25vcmVSYW5nZTogdHJ1ZSxcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmF3KSkgeyAvLyBzaG9ydCBmb3JtXG4gICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmF3LmV2ZW50cykpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcuZXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MpIHtcbiAgICAgICAgc3VjY2Vzcyh7XG4gICAgICAgICAgICByYXdFdmVudHM6IGFyZy5ldmVudFNvdXJjZS5tZXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG52YXIgQXJyYXlFdmVudFNvdXJjZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZXZlbnRTb3VyY2VEZWZzOiBbZXZlbnRTb3VyY2VEZWZdXG59KTtcblxudmFyIGV2ZW50U291cmNlRGVmJDEgPSB7XG4gICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnZnVuY3Rpb24nKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdy5ldmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcuZXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBhcmcuY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgdmFyIGZ1bmMgPSBhcmcuZXZlbnRTb3VyY2UubWV0YTtcbiAgICAgICAgdW5wcm9taXNpZnkoZnVuYy5iaW5kKG51bGwsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgIHN0YXJ0U3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kU3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgIHRpbWVab25lOiBkYXRlRW52LnRpbWVab25lXG4gICAgICAgIH0pLCBmdW5jdGlvbiAocmF3RXZlbnRzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKHsgcmF3RXZlbnRzOiByYXdFdmVudHMgfSk7IC8vIG5lZWRzIGFuIG9iamVjdCByZXNwb25zZVxuICAgICAgICB9LCBmYWlsdXJlIC8vIHNlbmQgZXJyb3JPYmogZGlyZWN0bHkgdG8gZmFpbHVyZSBjYWxsYmFja1xuICAgICAgICApO1xuICAgIH1cbn07XG52YXIgRnVuY0V2ZW50U291cmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQxXVxufSk7XG5cbmZ1bmN0aW9uIHJlcXVlc3RKc29uKG1ldGhvZCwgdXJsLCBwYXJhbXMsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgbWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIGJvZHkgPSBudWxsO1xuICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIHVybCA9IGluamVjdFF1ZXJ5U3RyaW5nUGFyYW1zKHVybCwgcGFyYW1zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSBlbmNvZGVQYXJhbXMocGFyYW1zKTtcbiAgICB9XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICBpZiAobWV0aG9kICE9PSAnR0VUJykge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIH1cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygnRmFpbHVyZSBwYXJzaW5nIEpTT04nLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCdSZXF1ZXN0IGZhaWxlZCcsIHhocik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmYWlsdXJlQ2FsbGJhY2soJ1JlcXVlc3QgZmFpbGVkJywgeGhyKTtcbiAgICB9O1xuICAgIHhoci5zZW5kKGJvZHkpO1xufVxuZnVuY3Rpb24gaW5qZWN0UXVlcnlTdHJpbmdQYXJhbXModXJsLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsICtcbiAgICAgICAgKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArXG4gICAgICAgIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xufVxuZnVuY3Rpb24gZW5jb2RlUGFyYW1zKHBhcmFtcykge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xufVxuXG52YXIgZXZlbnRTb3VyY2VEZWYkMiA9IHtcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgIHJhdyA9IHsgdXJsOiByYXcgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcmF3IHx8IHR5cGVvZiByYXcgIT09ICdvYmplY3QnIHx8ICFyYXcudXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJsOiByYXcudXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAocmF3Lm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgIGV4dHJhUGFyYW1zOiByYXcuZXh0cmFQYXJhbXMsXG4gICAgICAgICAgICBzdGFydFBhcmFtOiByYXcuc3RhcnRQYXJhbSxcbiAgICAgICAgICAgIGVuZFBhcmFtOiByYXcuZW5kUGFyYW0sXG4gICAgICAgICAgICB0aW1lWm9uZVBhcmFtOiByYXcudGltZVpvbmVQYXJhbVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgdmFyIG1ldGEgPSBhcmcuZXZlbnRTb3VyY2UubWV0YTtcbiAgICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgYXJnLnJhbmdlLCBhcmcuY2FsZW5kYXIpO1xuICAgICAgICByZXF1ZXN0SnNvbihtZXRhLm1ldGhvZCwgbWV0YS51cmwsIHJlcXVlc3RQYXJhbXMsIGZ1bmN0aW9uIChyYXdFdmVudHMsIHhocikge1xuICAgICAgICAgICAgc3VjY2Vzcyh7IHJhd0V2ZW50czogcmF3RXZlbnRzLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yTWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICBmYWlsdXJlKHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbnZhciBKc29uRmVlZEV2ZW50U291cmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQyXVxufSk7XG5mdW5jdGlvbiBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgcmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGRhdGVFbnYgPSBjYWxlbmRhci5kYXRlRW52O1xuICAgIHZhciBzdGFydFBhcmFtO1xuICAgIHZhciBlbmRQYXJhbTtcbiAgICB2YXIgdGltZVpvbmVQYXJhbTtcbiAgICB2YXIgY3VzdG9tUmVxdWVzdFBhcmFtcztcbiAgICB2YXIgcGFyYW1zID0ge307XG4gICAgc3RhcnRQYXJhbSA9IG1ldGEuc3RhcnRQYXJhbTtcbiAgICBpZiAoc3RhcnRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgIHN0YXJ0UGFyYW0gPSBjYWxlbmRhci5vcHQoJ3N0YXJ0UGFyYW0nKTtcbiAgICB9XG4gICAgZW5kUGFyYW0gPSBtZXRhLmVuZFBhcmFtO1xuICAgIGlmIChlbmRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgIGVuZFBhcmFtID0gY2FsZW5kYXIub3B0KCdlbmRQYXJhbScpO1xuICAgIH1cbiAgICB0aW1lWm9uZVBhcmFtID0gbWV0YS50aW1lWm9uZVBhcmFtO1xuICAgIGlmICh0aW1lWm9uZVBhcmFtID09IG51bGwpIHtcbiAgICAgICAgdGltZVpvbmVQYXJhbSA9IGNhbGVuZGFyLm9wdCgndGltZVpvbmVQYXJhbScpO1xuICAgIH1cbiAgICAvLyByZXRyaWV2ZSBhbnkgb3V0Ym91bmQgR0VUL1BPU1QgZGF0YSBmcm9tIHRoZSBvcHRpb25zXG4gICAgaWYgKHR5cGVvZiBtZXRhLmV4dHJhUGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHN1cHBsaWVkIGFzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEga2V5L3ZhbHVlIG9iamVjdFxuICAgICAgICBjdXN0b21SZXF1ZXN0UGFyYW1zID0gbWV0YS5leHRyYVBhcmFtcygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gcHJvYmFibHkgc3VwcGxpZWQgYXMgYSBzdHJhaWdodCBrZXkvdmFsdWUgb2JqZWN0XG4gICAgICAgIGN1c3RvbVJlcXVlc3RQYXJhbXMgPSBtZXRhLmV4dHJhUGFyYW1zIHx8IHt9O1xuICAgIH1cbiAgICBfX2Fzc2lnbihwYXJhbXMsIGN1c3RvbVJlcXVlc3RQYXJhbXMpO1xuICAgIHBhcmFtc1tzdGFydFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLnN0YXJ0KTtcbiAgICBwYXJhbXNbZW5kUGFyYW1dID0gZGF0ZUVudi5mb3JtYXRJc28ocmFuZ2UuZW5kKTtcbiAgICBpZiAoZGF0ZUVudi50aW1lWm9uZSAhPT0gJ2xvY2FsJykge1xuICAgICAgICBwYXJhbXNbdGltZVpvbmVQYXJhbV0gPSBkYXRlRW52LnRpbWVab25lO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuXG52YXIgcmVjdXJyaW5nID0ge1xuICAgIHBhcnNlOiBmdW5jdGlvbiAocmF3RXZlbnQsIGxlZnRvdmVyUHJvcHMsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIGNyZWF0ZU1hcmtlciA9IGRhdGVFbnYuY3JlYXRlTWFya2VyLmJpbmQoZGF0ZUVudik7XG4gICAgICAgIHZhciBwcm9jZXNzb3JzID0ge1xuICAgICAgICAgICAgZGF5c09mV2VlazogbnVsbCxcbiAgICAgICAgICAgIHN0YXJ0VGltZTogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgICAgICBlbmRUaW1lOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0UmVjdXI6IGNyZWF0ZU1hcmtlcixcbiAgICAgICAgICAgIGVuZFJlY3VyOiBjcmVhdGVNYXJrZXJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHByb3BzID0gcmVmaW5lUHJvcHMocmF3RXZlbnQsIHByb2Nlc3NvcnMsIHt9LCBsZWZ0b3ZlclByb3BzKTtcbiAgICAgICAgdmFyIGFueVZhbGlkID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbnlWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueVZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgaWYgKCdkdXJhdGlvbicgaW4gbGVmdG92ZXJQcm9wcykge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24obGVmdG92ZXJQcm9wcy5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxlZnRvdmVyUHJvcHMuZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWR1cmF0aW9uICYmIHByb3BzLnN0YXJ0VGltZSAmJiBwcm9wcy5lbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBzdWJ0cmFjdER1cmF0aW9ucyhwcm9wcy5lbmRUaW1lLCBwcm9wcy5zdGFydFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhbGxEYXlHdWVzczogQm9vbGVhbighcHJvcHMuc3RhcnRUaW1lICYmICFwcm9wcy5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgdHlwZURhdGE6IHByb3BzIC8vIGRvZXNuJ3QgbmVlZCBlbmRUaW1lIGFueW1vcmUgYnV0IG9oIHdlbGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uICh0eXBlRGF0YSwgZnJhbWluZ1JhbmdlLCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBjbGlwcGVkRnJhbWluZ1JhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKGZyYW1pbmdSYW5nZSwgeyBzdGFydDogdHlwZURhdGEuc3RhcnRSZWN1ciwgZW5kOiB0eXBlRGF0YS5lbmRSZWN1ciB9KTtcbiAgICAgICAgaWYgKGNsaXBwZWRGcmFtaW5nUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBhbmRSYW5nZXModHlwZURhdGEuZGF5c09mV2VlaywgdHlwZURhdGEuc3RhcnRUaW1lLCBjbGlwcGVkRnJhbWluZ1JhbmdlLCBkYXRlRW52KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG52YXIgU2ltcGxlUmVjdXJyZW5jZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgcmVjdXJyaW5nVHlwZXM6IFtyZWN1cnJpbmddXG59KTtcbmZ1bmN0aW9uIGV4cGFuZFJhbmdlcyhkYXlzT2ZXZWVrLCBzdGFydFRpbWUsIGZyYW1pbmdSYW5nZSwgZGF0ZUVudikge1xuICAgIHZhciBkb3dIYXNoID0gZGF5c09mV2VlayA/IGFycmF5VG9IYXNoKGRheXNPZldlZWspIDogbnVsbDtcbiAgICB2YXIgZGF5TWFya2VyID0gc3RhcnRPZkRheShmcmFtaW5nUmFuZ2Uuc3RhcnQpO1xuICAgIHZhciBlbmRNYXJrZXIgPSBmcmFtaW5nUmFuZ2UuZW5kO1xuICAgIHZhciBpbnN0YW5jZVN0YXJ0cyA9IFtdO1xuICAgIHdoaWxlIChkYXlNYXJrZXIgPCBlbmRNYXJrZXIpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlU3RhcnQgXG4gICAgICAgIC8vIGlmIGV2ZXJ5ZGF5LCBvciB0aGlzIHBhcnRpY3VsYXIgZGF5LW9mLXdlZWtcbiAgICAgICAgPSB2b2lkIDA7XG4gICAgICAgIC8vIGlmIGV2ZXJ5ZGF5LCBvciB0aGlzIHBhcnRpY3VsYXIgZGF5LW9mLXdlZWtcbiAgICAgICAgaWYgKCFkb3dIYXNoIHx8IGRvd0hhc2hbZGF5TWFya2VyLmdldFVUQ0RheSgpXSkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhcnQgPSBkYXRlRW52LmFkZChkYXlNYXJrZXIsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXJ0ID0gZGF5TWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zdGFuY2VTdGFydHMucHVzaChpbnN0YW5jZVN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBkYXlNYXJrZXIgPSBhZGREYXlzKGRheU1hcmtlciwgMSk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZVN0YXJ0cztcbn1cblxudmFyIERlZmF1bHRPcHRpb25DaGFuZ2VIYW5kbGVycyA9IGNyZWF0ZVBsdWdpbih7XG4gICAgb3B0aW9uQ2hhbmdlSGFuZGxlcnM6IHtcbiAgICAgICAgZXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzLCBjYWxlbmRhciwgZGVlcEVxdWFsKSB7XG4gICAgICAgICAgICBoYW5kbGVFdmVudFNvdXJjZXMoW2V2ZW50c10sIGNhbGVuZGFyLCBkZWVwRXF1YWwpO1xuICAgICAgICB9LFxuICAgICAgICBldmVudFNvdXJjZXM6IGhhbmRsZUV2ZW50U291cmNlcyxcbiAgICAgICAgcGx1Z2luczogaGFuZGxlUGx1Z2luc1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gaGFuZGxlRXZlbnRTb3VyY2VzKGlucHV0cywgY2FsZW5kYXIsIGRlZXBFcXVhbCkge1xuICAgIHZhciB1bmZvdW5kU291cmNlcyA9IGhhc2hWYWx1ZXNUb0FycmF5KGNhbGVuZGFyLnN0YXRlLmV2ZW50U291cmNlcyk7XG4gICAgdmFyIG5ld0lucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgaW5wdXRzXzEgPSBpbnB1dHM7IF9pIDwgaW5wdXRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGlucHV0c18xW19pXTtcbiAgICAgICAgdmFyIGlucHV0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmZvdW5kU291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCh1bmZvdW5kU291cmNlc1tpXS5fcmF3LCBpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICB1bmZvdW5kU291cmNlcy5zcGxpY2UoaSwgMSk7IC8vIGRlbGV0ZVxuICAgICAgICAgICAgICAgIGlucHV0Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaW5wdXRGb3VuZCkge1xuICAgICAgICAgICAgbmV3SW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9hID0gMCwgdW5mb3VuZFNvdXJjZXNfMSA9IHVuZm91bmRTb3VyY2VzOyBfYSA8IHVuZm91bmRTb3VyY2VzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciB1bmZvdW5kU291cmNlID0gdW5mb3VuZFNvdXJjZXNfMVtfYV07XG4gICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRfU09VUkNFJyxcbiAgICAgICAgICAgIHNvdXJjZUlkOiB1bmZvdW5kU291cmNlLnNvdXJjZUlkXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBfYiA9IDAsIG5ld0lucHV0c18xID0gbmV3SW5wdXRzOyBfYiA8IG5ld0lucHV0c18xLmxlbmd0aDsgX2IrKykge1xuICAgICAgICB2YXIgbmV3SW5wdXQgPSBuZXdJbnB1dHNfMVtfYl07XG4gICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50U291cmNlKG5ld0lucHV0KTtcbiAgICB9XG59XG4vLyBzaG9ydGNvbWluZzogd29uJ3QgcmVtb3ZlIHBsdWdpbnNcbmZ1bmN0aW9uIGhhbmRsZVBsdWdpbnMoaW5wdXRzLCBjYWxlbmRhcikge1xuICAgIGNhbGVuZGFyLmFkZFBsdWdpbklucHV0cyhpbnB1dHMpOyAvLyB3aWxsIGdyYWNlZnVsbHkgaGFuZGxlIGR1cGxpY2F0ZXNcbn1cblxudmFyIGNvbmZpZyA9IHt9OyAvLyBUT0RPOiBtYWtlIHRoZXNlIG9wdGlvbnNcbnZhciBnbG9iYWxEZWZhdWx0cyA9IHtcbiAgICBkZWZhdWx0UmFuZ2VTZXBhcmF0b3I6ICcgLSAnLFxuICAgIHRpdGxlUmFuZ2VTZXBhcmF0b3I6ICcgXFx1MjAxMyAnLFxuICAgIGRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb246ICcwMTowMDowMCcsXG4gICAgZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb246IHsgZGF5OiAxIH0sXG4gICAgZm9yY2VFdmVudER1cmF0aW9uOiBmYWxzZSxcbiAgICBuZXh0RGF5VGhyZXNob2xkOiAnMDA6MDA6MDAnLFxuICAgIC8vIGRpc3BsYXlcbiAgICBjb2x1bW5IZWFkZXI6IHRydWUsXG4gICAgZGVmYXVsdFZpZXc6ICcnLFxuICAgIGFzcGVjdFJhdGlvOiAxLjM1LFxuICAgIGhlYWRlcjoge1xuICAgICAgICBsZWZ0OiAndGl0bGUnLFxuICAgICAgICBjZW50ZXI6ICcnLFxuICAgICAgICByaWdodDogJ3RvZGF5IHByZXYsbmV4dCdcbiAgICB9LFxuICAgIHdlZWtlbmRzOiB0cnVlLFxuICAgIHdlZWtOdW1iZXJzOiBmYWxzZSxcbiAgICB3ZWVrTnVtYmVyQ2FsY3VsYXRpb246ICdsb2NhbCcsXG4gICAgZWRpdGFibGU6IGZhbHNlLFxuICAgIC8vIG5vd0luZGljYXRvcjogZmFsc2UsXG4gICAgc2Nyb2xsVGltZTogJzA2OjAwOjAwJyxcbiAgICBtaW5UaW1lOiAnMDA6MDA6MDAnLFxuICAgIG1heFRpbWU6ICcyNDowMDowMCcsXG4gICAgc2hvd05vbkN1cnJlbnREYXRlczogdHJ1ZSxcbiAgICAvLyBldmVudCBhamF4XG4gICAgbGF6eUZldGNoaW5nOiB0cnVlLFxuICAgIHN0YXJ0UGFyYW06ICdzdGFydCcsXG4gICAgZW5kUGFyYW06ICdlbmQnLFxuICAgIHRpbWVab25lUGFyYW06ICd0aW1lWm9uZScsXG4gICAgdGltZVpvbmU6ICdsb2NhbCcsXG4gICAgLy8gYWxsRGF5RGVmYXVsdDogdW5kZWZpbmVkLFxuICAgIC8vIGxvY2FsZVxuICAgIGxvY2FsZXM6IFtdLFxuICAgIGxvY2FsZTogJycsXG4gICAgLy8gZGlyOiB3aWxsIGdldCB0aGlzIGZyb20gdGhlIGRlZmF1bHQgbG9jYWxlXG4gICAgLy8gYnV0dG9uSWNvbnM6IG51bGwsXG4gICAgLy8gYWxsb3dzIHNldHRpbmcgYSBtaW4taGVpZ2h0IHRvIHRoZSBldmVudCBzZWdtZW50IHRvIHByZXZlbnQgc2hvcnQgZXZlbnRzIG92ZXJsYXBwaW5nIGVhY2ggb3RoZXJcbiAgICB0aW1lR3JpZEV2ZW50TWluSGVpZ2h0OiAwLFxuICAgIHRoZW1lU3lzdGVtOiAnc3RhbmRhcmQnLFxuICAgIC8vIGV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0OiBmYWxzZSxcbiAgICBkcmFnUmV2ZXJ0RHVyYXRpb246IDUwMCxcbiAgICBkcmFnU2Nyb2xsOiB0cnVlLFxuICAgIGFsbERheU1haW50YWluRHVyYXRpb246IGZhbHNlLFxuICAgIC8vIHNlbGVjdGFibGU6IGZhbHNlLFxuICAgIHVuc2VsZWN0QXV0bzogdHJ1ZSxcbiAgICAvLyBzZWxlY3RNaW5EaXN0YW5jZTogMCxcbiAgICBkcm9wQWNjZXB0OiAnKicsXG4gICAgZXZlbnRPcmRlcjogJ3N0YXJ0LC1kdXJhdGlvbixhbGxEYXksdGl0bGUnLFxuICAgIC8vIF4gaWYgc3RhcnQgdGllLCBsb25nZXIgZXZlbnRzIGdvIGJlZm9yZSBzaG9ydGVyLiBmaW5hbCB0aWUtYnJlYWtlciBpcyB0aXRsZSB0ZXh0XG4gICAgLy8gcmVyZW5kZXJEZWxheTogbnVsbCxcbiAgICBldmVudExpbWl0OiBmYWxzZSxcbiAgICBldmVudExpbWl0Q2xpY2s6ICdwb3BvdmVyJyxcbiAgICBkYXlQb3BvdmVyRm9ybWF0OiB7IG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnLCB5ZWFyOiAnbnVtZXJpYycgfSxcbiAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgd2luZG93UmVzaXplRGVsYXk6IDEwMCxcbiAgICBsb25nUHJlc3NEZWxheTogMTAwMCxcbiAgICBldmVudERyYWdNaW5EaXN0YW5jZTogNSAvLyBvbmx5IGFwcGxpZXMgdG8gbW91c2Vcbn07XG52YXIgcnRsRGVmYXVsdHMgPSB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIGxlZnQ6ICduZXh0LHByZXYgdG9kYXknLFxuICAgICAgICBjZW50ZXI6ICcnLFxuICAgICAgICByaWdodDogJ3RpdGxlJ1xuICAgIH0sXG4gICAgYnV0dG9uSWNvbnM6IHtcbiAgICAgICAgLy8gVE9ETzogbWFrZSBSVEwgc3VwcG9ydCB0aGUgcmVzcG9uaWJpbGl0eSBvZiB0aGUgdGhlbWVcbiAgICAgICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1yaWdodCcsXG4gICAgICAgIG5leHQ6ICdmYy1pY29uLWNoZXZyb24tbGVmdCcsXG4gICAgICAgIHByZXZZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1yaWdodCcsXG4gICAgICAgIG5leHRZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1sZWZ0J1xuICAgIH1cbn07XG52YXIgY29tcGxleE9wdGlvbnMgPSBbXG4gICAgJ2hlYWRlcicsXG4gICAgJ2Zvb3RlcicsXG4gICAgJ2J1dHRvblRleHQnLFxuICAgICdidXR0b25JY29ucydcbl07XG4vLyBNZXJnZXMgYW4gYXJyYXkgb2Ygb3B0aW9uIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3RcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhvcHRpb25PYmpzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMob3B0aW9uT2JqcywgY29tcGxleE9wdGlvbnMpO1xufVxuLy8gVE9ETzogbW92ZSB0aGlzIHN0dWZmIHRvIGEgXCJwbHVnaW5cIi1yZWxhdGVkIGZpbGUuLi5cbnZhciBJTlRFUk5BTF9QTFVHSU5TID0gW1xuICAgIEFycmF5RXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgRnVuY0V2ZW50U291cmNlUGx1Z2luLFxuICAgIEpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgU2ltcGxlUmVjdXJyZW5jZVBsdWdpbixcbiAgICBEZWZhdWx0T3B0aW9uQ2hhbmdlSGFuZGxlcnNcbl07XG5mdW5jdGlvbiByZWZpbmVQbHVnaW5EZWZzKHBsdWdpbklucHV0cykge1xuICAgIHZhciBwbHVnaW5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBwbHVnaW5JbnB1dHNfMSA9IHBsdWdpbklucHV0czsgX2kgPCBwbHVnaW5JbnB1dHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHBsdWdpbklucHV0ID0gcGx1Z2luSW5wdXRzXzFbX2ldO1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbklucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIGdsb2JhbE5hbWUgPSAnRnVsbENhbGVuZGFyJyArIGNhcGl0YWxpc2VGaXJzdExldHRlcihwbHVnaW5JbnB1dCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvd1tnbG9iYWxOYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGx1Z2luIGZpbGUgbm90IGxvYWRlZCBmb3IgJyArIHBsdWdpbklucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCh3aW5kb3dbZ2xvYmFsTmFtZV0uZGVmYXVsdCk7IC8vIGlzIGFuIEVTNiBtb2R1bGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsdWdpbnMucHVzaChwbHVnaW5JbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElOVEVSTkFMX1BMVUdJTlMuY29uY2F0KHBsdWdpbnMpO1xufVxuXG52YXIgUkFXX0VOX0xPQ0FMRSA9IHtcbiAgICBjb2RlOiAnZW4nLFxuICAgIHdlZWs6IHtcbiAgICAgICAgZG93OiAwLFxuICAgICAgICBkb3k6IDQgLy8gNCBkYXlzIG5lZWQgdG8gYmUgd2l0aGluIHRoZSB5ZWFyIHRvIGJlIGNvbnNpZGVyZWQgdGhlIGZpcnN0IHdlZWtcbiAgICB9LFxuICAgIGRpcjogJ2x0cicsXG4gICAgYnV0dG9uVGV4dDoge1xuICAgICAgICBwcmV2OiAncHJldicsXG4gICAgICAgIG5leHQ6ICduZXh0JyxcbiAgICAgICAgcHJldlllYXI6ICdwcmV2IHllYXInLFxuICAgICAgICBuZXh0WWVhcjogJ25leHQgeWVhcicsXG4gICAgICAgIHllYXI6ICd5ZWFyJyxcbiAgICAgICAgdG9kYXk6ICd0b2RheScsXG4gICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICB3ZWVrOiAnd2VlaycsXG4gICAgICAgIGRheTogJ2RheScsXG4gICAgICAgIGxpc3Q6ICdsaXN0J1xuICAgIH0sXG4gICAgd2Vla0xhYmVsOiAnVycsXG4gICAgYWxsRGF5VGV4dDogJ2FsbC1kYXknLFxuICAgIGV2ZW50TGltaXRUZXh0OiAnbW9yZScsXG4gICAgbm9FdmVudHNNZXNzYWdlOiAnTm8gZXZlbnRzIHRvIGRpc3BsYXknXG59O1xuZnVuY3Rpb24gcGFyc2VSYXdMb2NhbGVzKGV4cGxpY2l0UmF3TG9jYWxlcykge1xuICAgIHZhciBkZWZhdWx0Q29kZSA9IGV4cGxpY2l0UmF3TG9jYWxlcy5sZW5ndGggPiAwID8gZXhwbGljaXRSYXdMb2NhbGVzWzBdLmNvZGUgOiAnZW4nO1xuICAgIHZhciBnbG9iYWxBcnJheSA9IHdpbmRvd1snRnVsbENhbGVuZGFyTG9jYWxlc0FsbCddIHx8IFtdOyAvLyBmcm9tIGxvY2FsZXMtYWxsLmpzXG4gICAgdmFyIGdsb2JhbE9iamVjdCA9IHdpbmRvd1snRnVsbENhbGVuZGFyTG9jYWxlcyddIHx8IHt9OyAvLyBmcm9tIGxvY2FsZXMvKi5qcy4ga2V5cyBhcmUgbWVhbmluZ2xlc3NcbiAgICB2YXIgYWxsUmF3TG9jYWxlcyA9IGdsb2JhbEFycmF5LmNvbmNhdCgvLyBnbG9iYWxBcnJheSBpcyBsb3cgcHJpb1xuICAgIGhhc2hWYWx1ZXNUb0FycmF5KGdsb2JhbE9iamVjdCksIC8vIG1lZGl1bSBwcmlvXG4gICAgZXhwbGljaXRSYXdMb2NhbGVzIC8vIGhpZ2hlc3QgcHJpb1xuICAgICk7XG4gICAgdmFyIHJhd0xvY2FsZU1hcCA9IHtcbiAgICAgICAgZW46IFJBV19FTl9MT0NBTEUgLy8gbmVjZXNzYXJ5P1xuICAgIH07XG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxSYXdMb2NhbGVzXzEgPSBhbGxSYXdMb2NhbGVzOyBfaSA8IGFsbFJhd0xvY2FsZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHJhd0xvY2FsZSA9IGFsbFJhd0xvY2FsZXNfMVtfaV07XG4gICAgICAgIHJhd0xvY2FsZU1hcFtyYXdMb2NhbGUuY29kZV0gPSByYXdMb2NhbGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG1hcDogcmF3TG9jYWxlTWFwLFxuICAgICAgICBkZWZhdWx0Q29kZTogZGVmYXVsdENvZGVcbiAgICB9O1xufVxuZnVuY3Rpb24gYnVpbGRMb2NhbGUoaW5wdXRTaW5ndWxhciwgYXZhaWxhYmxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFNpbmd1bGFyID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbnB1dFNpbmd1bGFyKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VMb2NhbGUoaW5wdXRTaW5ndWxhci5jb2RlLCBbaW5wdXRTaW5ndWxhci5jb2RlXSwgaW5wdXRTaW5ndWxhcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gcXVlcnlMb2NhbGUoaW5wdXRTaW5ndWxhciwgYXZhaWxhYmxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBxdWVyeUxvY2FsZShjb2RlQXJnLCBhdmFpbGFibGUpIHtcbiAgICB2YXIgY29kZXMgPSBbXS5jb25jYXQoY29kZUFyZyB8fCBbXSk7IC8vIHdpbGwgY29udmVydCB0byBhcnJheVxuICAgIHZhciByYXcgPSBxdWVyeVJhd0xvY2FsZShjb2RlcywgYXZhaWxhYmxlKSB8fCBSQVdfRU5fTE9DQUxFO1xuICAgIHJldHVybiBwYXJzZUxvY2FsZShjb2RlQXJnLCBjb2RlcywgcmF3KTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5UmF3TG9jYWxlKGNvZGVzLCBhdmFpbGFibGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGNvZGVzW2ldLnRvTG9jYWxlTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IHBhcnRzLmxlbmd0aDsgaiA+IDA7IGotLSkge1xuICAgICAgICAgICAgdmFyIHNpbXBsZUlkID0gcGFydHMuc2xpY2UoMCwgaikuam9pbignLScpO1xuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVtzaW1wbGVJZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXZhaWxhYmxlW3NpbXBsZUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHBhcnNlTG9jYWxlKGNvZGVBcmcsIGNvZGVzLCByYXcpIHtcbiAgICB2YXIgbWVyZ2VkID0gbWVyZ2VQcm9wcyhbUkFXX0VOX0xPQ0FMRSwgcmF3XSwgWydidXR0b25UZXh0J10pO1xuICAgIGRlbGV0ZSBtZXJnZWQuY29kZTsgLy8gZG9uJ3Qgd2FudCB0aGlzIHBhcnQgb2YgdGhlIG9wdGlvbnNcbiAgICB2YXIgd2VlayA9IG1lcmdlZC53ZWVrO1xuICAgIGRlbGV0ZSBtZXJnZWQud2VlaztcbiAgICByZXR1cm4ge1xuICAgICAgICBjb2RlQXJnOiBjb2RlQXJnLFxuICAgICAgICBjb2RlczogY29kZXMsXG4gICAgICAgIHdlZWs6IHdlZWssXG4gICAgICAgIHNpbXBsZU51bWJlckZvcm1hdDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGNvZGVBcmcpLFxuICAgICAgICBvcHRpb25zOiBtZXJnZWRcbiAgICB9O1xufVxuXG52YXIgT3B0aW9uc01hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT3B0aW9uc01hbmFnZXIob3ZlcnJpZGVzKSB7XG4gICAgICAgIHRoaXMub3ZlcnJpZGVzID0gX19hc3NpZ24oe30sIG92ZXJyaWRlcyk7IC8vIG1ha2UgYSBjb3B5XG4gICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbXB1dGUoKTtcbiAgICB9XG4gICAgT3B0aW9uc01hbmFnZXIucHJvdG90eXBlLm11dGF0ZSA9IGZ1bmN0aW9uICh1cGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljKSB7XG4gICAgICAgIHZhciBvdmVycmlkZUhhc2ggPSBpc0R5bmFtaWMgPyB0aGlzLmR5bmFtaWNPdmVycmlkZXMgOiB0aGlzLm92ZXJyaWRlcztcbiAgICAgICAgX19hc3NpZ24ob3ZlcnJpZGVIYXNoLCB1cGRhdGVzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZW1vdmFsc18xID0gcmVtb3ZhbHM7IF9pIDwgcmVtb3ZhbHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHJlbW92YWxzXzFbX2ldO1xuICAgICAgICAgICAgZGVsZXRlIG92ZXJyaWRlSGFzaFtwcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wdXRlKCk7XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyB0aGUgZmxhdHRlbmVkIG9wdGlvbnMgaGFzaCBmb3IgdGhlIGNhbGVuZGFyIGFuZCBhc3NpZ25zIHRvIGB0aGlzLm9wdGlvbnNgLlxuICAgIC8vIEFzc3VtZXMgdGhpcy5vdmVycmlkZXMgYW5kIHRoaXMuZHluYW1pY092ZXJyaWRlcyBoYXZlIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZC5cbiAgICBPcHRpb25zTWFuYWdlci5wcm90b3R5cGUuY29tcHV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETzogbm90IGEgdmVyeSBlZmZpY2llbnQgc3lzdGVtXG4gICAgICAgIHZhciBsb2NhbGVzID0gZmlyc3REZWZpbmVkKC8vIGV4cGxpY2l0IGxvY2FsZSBvcHRpb24gZ2l2ZW4/XG4gICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcy5sb2NhbGVzLCB0aGlzLm92ZXJyaWRlcy5sb2NhbGVzLCBnbG9iYWxEZWZhdWx0cy5sb2NhbGVzKTtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGZpcnN0RGVmaW5lZCgvLyBleHBsaWNpdCBsb2NhbGVzIG9wdGlvbiBnaXZlbj9cbiAgICAgICAgdGhpcy5keW5hbWljT3ZlcnJpZGVzLmxvY2FsZSwgdGhpcy5vdmVycmlkZXMubG9jYWxlLCBnbG9iYWxEZWZhdWx0cy5sb2NhbGUpO1xuICAgICAgICB2YXIgYXZhaWxhYmxlID0gcGFyc2VSYXdMb2NhbGVzKGxvY2FsZXMpO1xuICAgICAgICB2YXIgbG9jYWxlRGVmYXVsdHMgPSBidWlsZExvY2FsZShsb2NhbGUgfHwgYXZhaWxhYmxlLmRlZmF1bHRDb2RlLCBhdmFpbGFibGUubWFwKS5vcHRpb25zO1xuICAgICAgICB2YXIgZGlyID0gZmlyc3REZWZpbmVkKC8vIGJhc2VkIG9uIG9wdGlvbnMgY29tcHV0ZWQgc28gZmFyLCBpcyBkaXJlY3Rpb24gUlRMP1xuICAgICAgICB0aGlzLmR5bmFtaWNPdmVycmlkZXMuZGlyLCB0aGlzLm92ZXJyaWRlcy5kaXIsIGxvY2FsZURlZmF1bHRzLmRpcik7XG4gICAgICAgIHZhciBkaXJEZWZhdWx0cyA9IGRpciA9PT0gJ3J0bCcgPyBydGxEZWZhdWx0cyA6IHt9O1xuICAgICAgICB0aGlzLmRpckRlZmF1bHRzID0gZGlyRGVmYXVsdHM7XG4gICAgICAgIHRoaXMubG9jYWxlRGVmYXVsdHMgPSBsb2NhbGVEZWZhdWx0cztcbiAgICAgICAgdGhpcy5jb21wdXRlZCA9IG1lcmdlT3B0aW9ucyhbXG4gICAgICAgICAgICBnbG9iYWxEZWZhdWx0cyxcbiAgICAgICAgICAgIGRpckRlZmF1bHRzLFxuICAgICAgICAgICAgbG9jYWxlRGVmYXVsdHMsXG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlcyxcbiAgICAgICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlc1xuICAgICAgICBdKTtcbiAgICB9O1xuICAgIHJldHVybiBPcHRpb25zTWFuYWdlcjtcbn0oKSk7XG5cbnZhciBjYWxlbmRhclN5c3RlbUNsYXNzTWFwID0ge307XG5mdW5jdGlvbiByZWdpc3RlckNhbGVuZGFyU3lzdGVtKG5hbWUsIHRoZUNsYXNzKSB7XG4gICAgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSA9IHRoZUNsYXNzO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2FsZW5kYXJTeXN0ZW0obmFtZSkge1xuICAgIHJldHVybiBuZXcgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSgpO1xufVxudmFyIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtKCkge1xuICAgIH1cbiAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuZ2V0TWFya2VyWWVhciA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgfTtcbiAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuZ2V0TWFya2VyTW9udGggPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gZC5nZXRVVENNb250aCgpO1xuICAgIH07XG4gICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLmdldE1hcmtlckRheSA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKTtcbiAgICB9O1xuICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5hcnJheVRvTWFya2VyID0gZnVuY3Rpb24gKGFycikge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYXJyKTtcbiAgICB9O1xuICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5tYXJrZXJUb0FycmF5ID0gZnVuY3Rpb24gKG1hcmtlcikge1xuICAgICAgICByZXR1cm4gZGF0ZVRvVXRjQXJyYXkobWFya2VyKTtcbiAgICB9O1xuICAgIHJldHVybiBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbTtcbn0oKSk7XG5yZWdpc3RlckNhbGVuZGFyU3lzdGVtKCdncmVnb3J5JywgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0pO1xuXG52YXIgSVNPX1JFID0gL15cXHMqKFxcZHs0fSkoLShcXGR7Mn0pKC0oXFxkezJ9KShbVCBdKFxcZHsyfSk6KFxcZHsyfSkoOihcXGR7Mn0pKFxcLihcXGQrKSk/KT8oWnwoKFstK10pKFxcZHsyfSkoOj8oXFxkezJ9KSk/KSk/KT8pPyk/JC87XG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgICB2YXIgbSA9IElTT19SRS5leGVjKHN0cik7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBEYXRlKERhdGUuVVRDKE51bWJlcihtWzFdKSwgbVszXSA/IE51bWJlcihtWzNdKSAtIDEgOiAwLCBOdW1iZXIobVs1XSB8fCAxKSwgTnVtYmVyKG1bN10gfHwgMCksIE51bWJlcihtWzhdIHx8IDApLCBOdW1iZXIobVsxMF0gfHwgMCksIG1bMTJdID8gTnVtYmVyKCcwLicgKyBtWzEyXSkgKiAxMDAwIDogMCkpO1xuICAgICAgICBpZiAoaXNWYWxpZERhdGUobWFya2VyKSkge1xuICAgICAgICAgICAgdmFyIHRpbWVab25lT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChtWzEzXSkge1xuICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gKG1bMTVdID09PSAnLScgPyAtMSA6IDEpICogKE51bWJlcihtWzE2XSB8fCAwKSAqIDYwICtcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKG1bMThdIHx8IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICAgICAgICAgaXNUaW1lVW5zcGVjaWZpZWQ6ICFtWzZdLFxuICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiB0aW1lWm9uZU9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxudmFyIERhdGVFbnYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGF0ZUVudihzZXR0aW5ncykge1xuICAgICAgICB2YXIgdGltZVpvbmUgPSB0aGlzLnRpbWVab25lID0gc2V0dGluZ3MudGltZVpvbmU7XG4gICAgICAgIHZhciBpc05hbWVkVGltZVpvbmUgPSB0aW1lWm9uZSAhPT0gJ2xvY2FsJyAmJiB0aW1lWm9uZSAhPT0gJ1VUQyc7XG4gICAgICAgIGlmIChzZXR0aW5ncy5uYW1lZFRpbWVab25lSW1wbCAmJiBpc05hbWVkVGltZVpvbmUpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZWRUaW1lWm9uZUltcGwgPSBuZXcgc2V0dGluZ3MubmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FuQ29tcHV0ZU9mZnNldCA9IEJvb2xlYW4oIWlzTmFtZWRUaW1lWm9uZSB8fCB0aGlzLm5hbWVkVGltZVpvbmVJbXBsKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbSA9IGNyZWF0ZUNhbGVuZGFyU3lzdGVtKHNldHRpbmdzLmNhbGVuZGFyU3lzdGVtKTtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBzZXR0aW5ncy5sb2NhbGU7XG4gICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmxvY2FsZS53ZWVrLmRvdztcbiAgICAgICAgdGhpcy53ZWVrRG95ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG95O1xuICAgICAgICBpZiAoc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uID09PSAnSVNPJykge1xuICAgICAgICAgICAgdGhpcy53ZWVrRG93ID0gMTtcbiAgICAgICAgICAgIHRoaXMud2Vla0RveSA9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5maXJzdERheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmZpcnN0RGF5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLndlZWtOdW1iZXJGdW5jID0gc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2Vla0xhYmVsID0gc2V0dGluZ3Mud2Vla0xhYmVsICE9IG51bGwgPyBzZXR0aW5ncy53ZWVrTGFiZWwgOiBzZXR0aW5ncy5sb2NhbGUub3B0aW9ucy53ZWVrTGFiZWw7XG4gICAgICAgIHRoaXMuY21kRm9ybWF0dGVyID0gc2V0dGluZ3MuY21kRm9ybWF0dGVyO1xuICAgIH1cbiAgICAvLyBDcmVhdGluZyAvIFBhcnNpbmdcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgdmFyIG1ldGEgPSB0aGlzLmNyZWF0ZU1hcmtlck1ldGEoaW5wdXQpO1xuICAgICAgICBpZiAobWV0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGEubWFya2VyO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuY3JlYXRlTm93TWFya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jYW5Db21wdXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBUb01hcmtlcihuZXcgRGF0ZSgpLnZhbHVlT2YoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBjYW4ndCBjb21wdXRlIHRoZSBjdXJyZW50IGRhdGUgdmFsIGZvciBhIHRpbWV6b25lLFxuICAgICAgICAgICAgLy8gYmV0dGVyIHRvIGdpdmUgdGhlIGN1cnJlbnQgbG9jYWwgZGF0ZSB2YWxzIHRoYW4gVVRDXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoZGF0ZVRvTG9jYWxBcnJheShuZXcgRGF0ZSgpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLmNyZWF0ZU1hcmtlck1ldGEgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya2VyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG1hcmtlciA9IHRoaXMudGltZXN0YW1wVG9NYXJrZXIoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIG1hcmtlciA9IHRoaXMudGltZXN0YW1wVG9NYXJrZXIoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBtYXJrZXIgPSBhcnJheVRvVXRjRGF0ZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcmtlciA9PT0gbnVsbCB8fCAhaXNWYWxpZERhdGUobWFya2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbWFya2VyOiBtYXJrZXIsIGlzVGltZVVuc3BlY2lmaWVkOiBmYWxzZSwgZm9yY2VkVHpvOiBudWxsIH07XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IHBhcnNlKHMpO1xuICAgICAgICBpZiAocGFydHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrZXIgPSBwYXJ0cy5tYXJrZXI7XG4gICAgICAgIHZhciBmb3JjZWRUem8gPSBudWxsO1xuICAgICAgICBpZiAocGFydHMudGltZVpvbmVPZmZzZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbkNvbXB1dGVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKG1hcmtlci52YWx1ZU9mKCkgLSBwYXJ0cy50aW1lWm9uZU9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JjZWRUem8gPSBwYXJ0cy50aW1lWm9uZU9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBtYXJrZXI6IG1hcmtlciwgaXNUaW1lVW5zcGVjaWZpZWQ6IHBhcnRzLmlzVGltZVVuc3BlY2lmaWVkLCBmb3JjZWRUem86IGZvcmNlZFR6byB9O1xuICAgIH07XG4gICAgLy8gQWNjZXNzb3JzXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0WWVhciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtYXJrZXIpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0TW9udGggPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG1hcmtlcik7XG4gICAgfTtcbiAgICAvLyBBZGRpbmcgLyBTdWJ0cmFjdGluZ1xuICAgIERhdGVFbnYucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzBdICs9IGR1ci55ZWFycztcbiAgICAgICAgYVsxXSArPSBkdXIubW9udGhzO1xuICAgICAgICBhWzJdICs9IGR1ci5kYXlzO1xuICAgICAgICBhWzZdICs9IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzBdIC09IGR1ci55ZWFycztcbiAgICAgICAgYVsxXSAtPSBkdXIubW9udGhzO1xuICAgICAgICBhWzJdIC09IGR1ci5kYXlzO1xuICAgICAgICBhWzZdIC09IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5hZGRZZWFycyA9IGZ1bmN0aW9uIChtYXJrZXIsIG4pIHtcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgYVswXSArPSBuO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuYWRkTW9udGhzID0gZnVuY3Rpb24gKG1hcmtlciwgbikge1xuICAgICAgICB2YXIgYSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW0ubWFya2VyVG9BcnJheShtYXJrZXIpO1xuICAgICAgICBhWzFdICs9IG47XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgfTtcbiAgICAvLyBEaWZmaW5nIFdob2xlIFVuaXRzXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZGlmZldob2xlWWVhcnMgPSBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgIHZhciBjYWxlbmRhclN5c3RlbSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW07XG4gICAgICAgIGlmICh0aW1lQXNNcyhtMCkgPT09IHRpbWVBc01zKG0xKSAmJlxuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyRGF5KG0wKSA9PT0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyRGF5KG0xKSAmJlxuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTApID09PSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0xKSAtIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZGlmZldob2xlTW9udGhzID0gZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICB2YXIgY2FsZW5kYXJTeXN0ZW0gPSB0aGlzLmNhbGVuZGFyU3lzdGVtO1xuICAgICAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkgJiZcbiAgICAgICAgICAgIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobTApKSArXG4gICAgICAgICAgICAgICAgKGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtMCkpICogMTI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICAvLyBSYW5nZSAvIER1cmF0aW9uXG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZ3JlYXRlc3RXaG9sZVVuaXQgPSBmdW5jdGlvbiAobTAsIG0xKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3llYXInLCB2YWx1ZTogbiB9O1xuICAgICAgICB9XG4gICAgICAgIG4gPSB0aGlzLmRpZmZXaG9sZU1vbnRocyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZldob2xlV2Vla3MobTAsIG0xKTtcbiAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICd3ZWVrJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZldob2xlRGF5cyhtMCwgbTEpO1xuICAgICAgICBpZiAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ2RheScsIHZhbHVlOiBuIH07XG4gICAgICAgIH1cbiAgICAgICAgbiA9IGRpZmZIb3VycyhtMCwgbTEpO1xuICAgICAgICBpZiAoaXNJbnQobikpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZk1pbnV0ZXMobTAsIG0xKTtcbiAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnbWludXRlJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICBuID0gZGlmZlNlY29uZHMobTAsIG0xKTtcbiAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnc2Vjb25kJywgdmFsdWU6IG4gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB1bml0OiAnbWlsbGlzZWNvbmQnLCB2YWx1ZTogbTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpIH07XG4gICAgfTtcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jb3VudER1cmF0aW9uc0JldHdlZW4gPSBmdW5jdGlvbiAobTAsIG0xLCBkKSB7XG4gICAgICAgIC8vIFRPRE86IGNhbiB1c2UgZ3JlYXRlc3RXaG9sZVVuaXRcbiAgICAgICAgdmFyIGRpZmY7XG4gICAgICAgIGlmIChkLnllYXJzKSB7XG4gICAgICAgICAgICBkaWZmID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hZZWFycyhkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZC5tb250aHMpIHtcbiAgICAgICAgICAgIGRpZmYgPSB0aGlzLmRpZmZXaG9sZU1vbnRocyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hNb250aHMoZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGQuZGF5cykge1xuICAgICAgICAgICAgZGlmZiA9IGRpZmZXaG9sZURheXMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChkaWZmICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpZmYgLyBhc1JvdWdoRGF5cyhkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyBhc1JvdWdoTXMoZCk7XG4gICAgfTtcbiAgICAvLyBTdGFydC1PZlxuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2YgPSBmdW5jdGlvbiAobSwgdW5pdCkge1xuICAgICAgICBpZiAodW5pdCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mWWVhcihtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bml0ID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mTW9udGgobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mV2VlayhtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bml0ID09PSAnZGF5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZEYXkobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ2hvdXInKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRPZkhvdXIobSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ21pbnV0ZScpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFydE9mTWludXRlKG0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuaXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRPZlNlY29uZChtKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuc3RhcnRPZlllYXIgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtKVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2ZNb250aCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoW1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0pLFxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtKVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2ZXZWVrID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uYXJyYXlUb01hcmtlcihbXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSksXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG0pLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCkgLSAoKG0uZ2V0VVRDRGF5KCkgLSB0aGlzLndlZWtEb3cgKyA3KSAlIDcpXG4gICAgICAgIF0pO1xuICAgIH07XG4gICAgLy8gV2VlayBOdW1iZXJcbiAgICBEYXRlRW52LnByb3RvdHlwZS5jb21wdXRlV2Vla051bWJlciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgaWYgKHRoaXMud2Vla051bWJlckZ1bmMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlZWtOdW1iZXJGdW5jKHRoaXMudG9EYXRlKG1hcmtlcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobWFya2VyLCB0aGlzLndlZWtEb3csIHRoaXMud2Vla0RveSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFRPRE86IGNob2tlIG9uIHRpbWVab25lTmFtZTogbG9uZ1xuICAgIERhdGVFbnYucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGZvcm1hdHRlciwgZGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGRhdGVPcHRpb25zID09PSB2b2lkIDApIHsgZGF0ZU9wdGlvbnMgPSB7fTsgfVxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdCh7XG4gICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlT3B0aW9ucy5mb3JjZWRUem8gIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgZGF0ZU9wdGlvbnMuZm9yY2VkVHpvIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihtYXJrZXIpXG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH07XG4gICAgRGF0ZUVudi5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZm9ybWF0dGVyLCBkYXRlT3B0aW9ucykge1xuICAgICAgICBpZiAoZGF0ZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBkYXRlT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmIChkYXRlT3B0aW9ucy5pc0VuZEV4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgZW5kID0gYWRkTXMoZW5kLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRSYW5nZSh7XG4gICAgICAgICAgICBtYXJrZXI6IHN0YXJ0LFxuICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGRhdGVPcHRpb25zLmZvcmNlZFN0YXJ0VHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgIGRhdGVPcHRpb25zLmZvcmNlZFN0YXJ0VHpvIDpcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihzdGFydClcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbWFya2VyOiBlbmQsXG4gICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogZGF0ZU9wdGlvbnMuZm9yY2VkRW5kVHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgIGRhdGVPcHRpb25zLmZvcmNlZEVuZFR6byA6XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRGb3JNYXJrZXIoZW5kKVxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLmZvcm1hdElzbyA9IGZ1bmN0aW9uIChtYXJrZXIsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICBpZiAoZXh0cmFPcHRpb25zID09PSB2b2lkIDApIHsgZXh0cmFPcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIHRpbWVab25lT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFleHRyYU9wdGlvbnMub21pdFRpbWVab25lT2Zmc2V0KSB7XG4gICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zLmZvcmNlZFR6byAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQgPSBleHRyYU9wdGlvbnMuZm9yY2VkVHpvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQgPSB0aGlzLm9mZnNldEZvck1hcmtlcihtYXJrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZElzb1N0cmluZyhtYXJrZXIsIHRpbWVab25lT2Zmc2V0LCBleHRyYU9wdGlvbnMub21pdFRpbWUpO1xuICAgIH07XG4gICAgLy8gVGltZVpvbmVcbiAgICBEYXRlRW52LnByb3RvdHlwZS50aW1lc3RhbXBUb01hcmtlciA9IGZ1bmN0aW9uIChtcykge1xuICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGRhdGVUb0xvY2FsQXJyYXkobmV3IERhdGUobXMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycgfHwgIXRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUodGhpcy5uYW1lZFRpbWVab25lSW1wbC50aW1lc3RhbXBUb0FycmF5KG1zKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERhdGVFbnYucHJvdG90eXBlLm9mZnNldEZvck1hcmtlciA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gLWFycmF5VG9Mb2NhbERhdGUoZGF0ZVRvVXRjQXJyYXkobSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7IC8vIGNvbnZlcnQgXCJpbnZlcnNlXCIgb2Zmc2V0IHRvIFwibm9ybWFsXCIgb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVkVGltZVpvbmVJbXBsLm9mZnNldEZvckFycmF5KGRhdGVUb1V0Y0FycmF5KG0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8vIENvbnZlcnNpb25cbiAgICBEYXRlRW52LnByb3RvdHlwZS50b0RhdGUgPSBmdW5jdGlvbiAobSwgZm9yY2VkVHpvKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb0xvY2FsRGF0ZShkYXRlVG9VdGNBcnJheShtKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSk7IC8vIG1ha2Ugc3VyZSBpdCdzIGEgY29weVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLm5hbWVkVGltZVpvbmVJbXBsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobS52YWx1ZU9mKCkgLSAoZm9yY2VkVHpvIHx8IDApKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSAtXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lZFRpbWVab25lSW1wbC5vZmZzZXRGb3JBcnJheShkYXRlVG9VdGNBcnJheShtKSkgKiAxMDAwICogNjAgLy8gY29udmVydCBtaW51dGVzIC0+IG1zXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGF0ZUVudjtcbn0oKSk7XG5cbnZhciBTSU1QTEVfU09VUkNFX1BST1BTID0ge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgYWxsRGF5RGVmYXVsdDogQm9vbGVhbixcbiAgICBldmVudERhdGFUcmFuc2Zvcm06IEZ1bmN0aW9uLFxuICAgIHN1Y2Nlc3M6IEZ1bmN0aW9uLFxuICAgIGZhaWx1cmU6IEZ1bmN0aW9uXG59O1xudmFyIHVpZCQyID0gMDtcbmZ1bmN0aW9uIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGRlZnMgPSBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZXZlbnRTb3VyY2VEZWZzO1xuICAgIHJldHVybiAhZGVmc1tldmVudFNvdXJjZS5zb3VyY2VEZWZJZF0uaWdub3JlUmFuZ2U7XG59XG5mdW5jdGlvbiBwYXJzZUV2ZW50U291cmNlKHJhdywgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGVmcyA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudFNvdXJjZURlZnM7XG4gICAgZm9yICh2YXIgaSA9IGRlZnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsgLy8gbGF0ZXItYWRkZWQgcGx1Z2lucyB0YWtlIHByZWNlZGVuY2VcbiAgICAgICAgdmFyIGRlZiA9IGRlZnNbaV07XG4gICAgICAgIHZhciBtZXRhID0gZGVmLnBhcnNlTWV0YShyYXcpO1xuICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgICAgdmFyIHJlcyA9IHBhcnNlRXZlbnRTb3VyY2VQcm9wcyh0eXBlb2YgcmF3ID09PSAnb2JqZWN0JyA/IHJhdyA6IHt9LCBtZXRhLCBpLCBjYWxlbmRhcik7XG4gICAgICAgICAgICByZXMuX3JhdyA9IHJhdztcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBwYXJzZUV2ZW50U291cmNlUHJvcHMocmF3LCBtZXRhLCBzb3VyY2VEZWZJZCwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbGVmdG92ZXJzMCA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhdywgU0lNUExFX1NPVVJDRV9QUk9QUywge30sIGxlZnRvdmVyczApO1xuICAgIHZhciBsZWZ0b3ZlcnMxID0ge307XG4gICAgdmFyIHVpID0gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhsZWZ0b3ZlcnMwLCBjYWxlbmRhciwgbGVmdG92ZXJzMSk7XG4gICAgcHJvcHMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgIHByb3BzLmxhdGVzdEZldGNoSWQgPSAnJztcbiAgICBwcm9wcy5mZXRjaFJhbmdlID0gbnVsbDtcbiAgICBwcm9wcy5wdWJsaWNJZCA9IFN0cmluZyhyYXcuaWQgfHwgJycpO1xuICAgIHByb3BzLnNvdXJjZUlkID0gU3RyaW5nKHVpZCQyKyspO1xuICAgIHByb3BzLnNvdXJjZURlZklkID0gc291cmNlRGVmSWQ7XG4gICAgcHJvcHMubWV0YSA9IG1ldGE7XG4gICAgcHJvcHMudWkgPSB1aTtcbiAgICBwcm9wcy5leHRlbmRlZFByb3BzID0gbGVmdG92ZXJzMTtcbiAgICByZXR1cm4gcHJvcHM7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZUV2ZW50U291cmNlcyAoZXZlbnRTb3VyY2VzLCBhY3Rpb24sIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnQUREX0VWRU5UX1NPVVJDRVMnOiAvLyBhbHJlYWR5IHBhcnNlZFxuICAgICAgICAgICAgcmV0dXJuIGFkZFNvdXJjZXMoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlcywgZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnUkVNT1ZFX0VWRU5UX1NPVVJDRSc6XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlU291cmNlKGV2ZW50U291cmNlcywgYWN0aW9uLnNvdXJjZUlkKTtcbiAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaERpcnR5U291cmNlcyhldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdGRVRDSF9FVkVOVF9TT1VSQ0VTJzpcbiAgICAgICAgY2FzZSAnQ0hBTkdFX1RJTUVaT05FJzpcbiAgICAgICAgICAgIHJldHVybiBmZXRjaFNvdXJjZXNCeUlkcyhldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZHMgP1xuICAgICAgICAgICAgICAgIGFycmF5VG9IYXNoKGFjdGlvbi5zb3VyY2VJZHMpIDpcbiAgICAgICAgICAgICAgICBleGNsdWRlU3RhdGljU291cmNlcyhldmVudFNvdXJjZXMsIGNhbGVuZGFyKSwgZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOlxuICAgICAgICBjYXNlICdSRUNFSVZFX0VWRU5UX0VSUk9SJzpcbiAgICAgICAgICAgIHJldHVybiByZWNlaXZlUmVzcG9uc2UoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlSWQsIGFjdGlvbi5mZXRjaElkLCBhY3Rpb24uZmV0Y2hSYW5nZSk7XG4gICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgIH1cbn1cbnZhciB1aWQkMyA9IDA7XG5mdW5jdGlvbiBhZGRTb3VyY2VzKGV2ZW50U291cmNlSGFzaCwgc291cmNlcywgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgaGFzaCA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgc291cmNlc18xID0gc291cmNlczsgX2kgPCBzb3VyY2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzXzFbX2ldO1xuICAgICAgICBoYXNoW3NvdXJjZS5zb3VyY2VJZF0gPSBzb3VyY2U7XG4gICAgfVxuICAgIGlmIChmZXRjaFJhbmdlKSB7XG4gICAgICAgIGhhc2ggPSBmZXRjaERpcnR5U291cmNlcyhoYXNoLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgfVxuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnRTb3VyY2VIYXNoLCBoYXNoKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVNvdXJjZShldmVudFNvdXJjZUhhc2gsIHNvdXJjZUlkKSB7XG4gICAgcmV0dXJuIGZpbHRlckhhc2goZXZlbnRTb3VyY2VIYXNoLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50U291cmNlLnNvdXJjZUlkICE9PSBzb3VyY2VJZDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZldGNoRGlydHlTb3VyY2VzKHNvdXJjZUhhc2gsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGZldGNoU291cmNlc0J5SWRzKHNvdXJjZUhhc2gsIGZpbHRlckhhc2goc291cmNlSGFzaCwgZnVuY3Rpb24gKGV2ZW50U291cmNlKSB7XG4gICAgICAgIHJldHVybiBpc1NvdXJjZURpcnR5KGV2ZW50U291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgfSksIGZldGNoUmFuZ2UsIGNhbGVuZGFyKTtcbn1cbmZ1bmN0aW9uIGlzU291cmNlRGlydHkoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgaWYgKCFkb2VzU291cmNlTmVlZFJhbmdlKGV2ZW50U291cmNlLCBjYWxlbmRhcikpIHtcbiAgICAgICAgcmV0dXJuICFldmVudFNvdXJjZS5sYXRlc3RGZXRjaElkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICFjYWxlbmRhci5vcHQoJ2xhenlGZXRjaGluZycpIHx8XG4gICAgICAgICAgICAhZXZlbnRTb3VyY2UuZmV0Y2hSYW5nZSB8fFxuICAgICAgICAgICAgZmV0Y2hSYW5nZS5zdGFydCA8IGV2ZW50U291cmNlLmZldGNoUmFuZ2Uuc3RhcnQgfHxcbiAgICAgICAgICAgIGZldGNoUmFuZ2UuZW5kID4gZXZlbnRTb3VyY2UuZmV0Y2hSYW5nZS5lbmQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZmV0Y2hTb3VyY2VzQnlJZHMocHJldlNvdXJjZXMsIHNvdXJjZUlkSGFzaCwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICB2YXIgbmV4dFNvdXJjZXMgPSB7fTtcbiAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBwcmV2U291cmNlcykge1xuICAgICAgICB2YXIgc291cmNlID0gcHJldlNvdXJjZXNbc291cmNlSWRdO1xuICAgICAgICBpZiAoc291cmNlSWRIYXNoW3NvdXJjZUlkXSkge1xuICAgICAgICAgICAgbmV4dFNvdXJjZXNbc291cmNlSWRdID0gZmV0Y2hTb3VyY2Uoc291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXh0U291cmNlc1tzb3VyY2VJZF0gPSBzb3VyY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRTb3VyY2VzO1xufVxuZnVuY3Rpb24gZmV0Y2hTb3VyY2UoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIHNvdXJjZURlZiA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudFNvdXJjZURlZnNbZXZlbnRTb3VyY2Uuc291cmNlRGVmSWRdO1xuICAgIHZhciBmZXRjaElkID0gU3RyaW5nKHVpZCQzKyspO1xuICAgIHNvdXJjZURlZi5mZXRjaCh7XG4gICAgICAgIGV2ZW50U291cmNlOiBldmVudFNvdXJjZSxcbiAgICAgICAgY2FsZW5kYXI6IGNhbGVuZGFyLFxuICAgICAgICByYW5nZTogZmV0Y2hSYW5nZVxuICAgIH0sIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIHJhd0V2ZW50cyA9IHJlcy5yYXdFdmVudHM7XG4gICAgICAgIHZhciBjYWxTdWNjZXNzID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZVN1Y2Nlc3MnKTtcbiAgICAgICAgdmFyIGNhbFN1Y2Nlc3NSZXM7XG4gICAgICAgIHZhciBzb3VyY2VTdWNjZXNzUmVzO1xuICAgICAgICBpZiAoZXZlbnRTb3VyY2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgc291cmNlU3VjY2Vzc1JlcyA9IGV2ZW50U291cmNlLnN1Y2Nlc3MocmF3RXZlbnRzLCByZXMueGhyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsU3VjY2Vzcykge1xuICAgICAgICAgICAgY2FsU3VjY2Vzc1JlcyA9IGNhbFN1Y2Nlc3MocmF3RXZlbnRzLCByZXMueGhyKTtcbiAgICAgICAgfVxuICAgICAgICByYXdFdmVudHMgPSBzb3VyY2VTdWNjZXNzUmVzIHx8IGNhbFN1Y2Nlc3NSZXMgfHwgcmF3RXZlbnRzO1xuICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVDRUlWRV9FVkVOVFMnLFxuICAgICAgICAgICAgc291cmNlSWQ6IGV2ZW50U291cmNlLnNvdXJjZUlkLFxuICAgICAgICAgICAgZmV0Y2hJZDogZmV0Y2hJZCxcbiAgICAgICAgICAgIGZldGNoUmFuZ2U6IGZldGNoUmFuZ2UsXG4gICAgICAgICAgICByYXdFdmVudHM6IHJhd0V2ZW50c1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdmFyIGNhbGxGYWlsdXJlID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZUZhaWx1cmUnKTtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yLm1lc3NhZ2UsIGVycm9yKTtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlLmZhaWx1cmUpIHtcbiAgICAgICAgICAgIGV2ZW50U291cmNlLmZhaWx1cmUoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsRmFpbHVyZSkge1xuICAgICAgICAgICAgY2FsbEZhaWx1cmUoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX0VWRU5UX0VSUk9SJyxcbiAgICAgICAgICAgIHNvdXJjZUlkOiBldmVudFNvdXJjZS5zb3VyY2VJZCxcbiAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnRTb3VyY2UsIHsgaXNGZXRjaGluZzogdHJ1ZSwgbGF0ZXN0RmV0Y2hJZDogZmV0Y2hJZCB9KTtcbn1cbmZ1bmN0aW9uIHJlY2VpdmVSZXNwb25zZShzb3VyY2VIYXNoLCBzb3VyY2VJZCwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZXZlbnRTb3VyY2UgPSBzb3VyY2VIYXNoW3NvdXJjZUlkXTtcbiAgICBpZiAoZXZlbnRTb3VyY2UgJiYgLy8gbm90IGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICBmZXRjaElkID09PSBldmVudFNvdXJjZS5sYXRlc3RGZXRjaElkKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgc291cmNlSGFzaCwgKF9hID0ge30sIF9hW3NvdXJjZUlkXSA9IF9fYXNzaWduKHt9LCBldmVudFNvdXJjZSwgeyBpc0ZldGNoaW5nOiBmYWxzZSwgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSB9KSwgX2EpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZUhhc2g7XG59XG5mdW5jdGlvbiBleGNsdWRlU3RhdGljU291cmNlcyhldmVudFNvdXJjZXMsIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGZpbHRlckhhc2goZXZlbnRTb3VyY2VzLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKTtcbiAgICB9KTtcbn1cblxudmFyIERhdGVQcm9maWxlR2VuZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERhdGVQcm9maWxlR2VuZXJhdG9yKHZpZXdTcGVjLCBjYWxlbmRhcikge1xuICAgICAgICB0aGlzLnZpZXdTcGVjID0gdmlld1NwZWM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHZpZXdTcGVjLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdGhpcy5pbml0SGlkZGVuRGF5cygpO1xuICAgIH1cbiAgICAvKiBEYXRlIFJhbmdlIENvbXB1dGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHdoYXQgdGhlIGRhdGVzL3JhbmdlcyB3aWxsIGJlIGZvciB0aGUgXCJwcmV2XCIgdmlldy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRQcmV2ID0gZnVuY3Rpb24gKGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciBwcmV2RGF0ZSA9IGRhdGVFbnYuc3VidHJhY3QoZGF0ZUVudi5zdGFydE9mKGN1cnJlbnREYXRlLCBjdXJyZW50RGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdCksIC8vIGltcG9ydGFudCBmb3Igc3RhcnQtb2YtbW9udGhcbiAgICAgICAgY3VycmVudERhdGVQcm9maWxlLmRhdGVJbmNyZW1lbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZChwcmV2RGF0ZSwgLTEpO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIHdpdGggaW5mbyBhYm91dCB3aGF0IHRoZSBkYXRlcy9yYW5nZXMgd2lsbCBiZSBmb3IgdGhlIFwibmV4dFwiIHZpZXcuXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkTmV4dCA9IGZ1bmN0aW9uIChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICB2YXIgbmV4dERhdGUgPSBkYXRlRW52LmFkZChkYXRlRW52LnN0YXJ0T2YoY3VycmVudERhdGUsIGN1cnJlbnREYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0KSwgLy8gaW1wb3J0YW50IGZvciBzdGFydC1vZi1tb250aFxuICAgICAgICBjdXJyZW50RGF0ZVByb2ZpbGUuZGF0ZUluY3JlbWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKG5leHREYXRlLCAxKTtcbiAgICB9O1xuICAgIC8vIEJ1aWxkcyBhIHN0cnVjdHVyZSBob2xkaW5nIGRhdGVzL3JhbmdlcyBmb3IgcmVuZGVyaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAvLyBPcHRpb25hbCBkaXJlY3Rpb24gcGFyYW0gaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGRhdGUgaXMgYmVpbmcgaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWRcbiAgICAvLyBmcm9tIGl0cyBwcmV2aW91cyB2YWx1ZS4gZGVjcmVtZW50ZWQgPSAtMSwgaW5jcmVtZW50ZWQgPSAxIChkZWZhdWx0KS5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoY3VycmVudERhdGUsIGRpcmVjdGlvbiwgZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgIGlmIChmb3JjZVRvVmFsaWQgPT09IHZvaWQgMCkgeyBmb3JjZVRvVmFsaWQgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgdmFsaWRSYW5nZTtcbiAgICAgICAgdmFyIG1pblRpbWUgPSBudWxsO1xuICAgICAgICB2YXIgbWF4VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBjdXJyZW50SW5mbztcbiAgICAgICAgdmFyIGlzUmFuZ2VBbGxEYXk7XG4gICAgICAgIHZhciByZW5kZXJSYW5nZTtcbiAgICAgICAgdmFyIGFjdGl2ZVJhbmdlO1xuICAgICAgICB2YXIgaXNWYWxpZDtcbiAgICAgICAgdmFsaWRSYW5nZSA9IHRoaXMuYnVpbGRWYWxpZFJhbmdlKCk7XG4gICAgICAgIHZhbGlkUmFuZ2UgPSB0aGlzLnRyaW1IaWRkZW5EYXlzKHZhbGlkUmFuZ2UpO1xuICAgICAgICBpZiAoZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICBjdXJyZW50RGF0ZSA9IGNvbnN0cmFpbk1hcmtlclRvUmFuZ2UoY3VycmVudERhdGUsIHZhbGlkUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJbmZvID0gdGhpcy5idWlsZEN1cnJlbnRSYW5nZUluZm8oY3VycmVudERhdGUsIGRpcmVjdGlvbik7XG4gICAgICAgIGlzUmFuZ2VBbGxEYXkgPSAvXih5ZWFyfG1vbnRofHdlZWt8ZGF5KSQvLnRlc3QoY3VycmVudEluZm8udW5pdCk7XG4gICAgICAgIHJlbmRlclJhbmdlID0gdGhpcy5idWlsZFJlbmRlclJhbmdlKHRoaXMudHJpbUhpZGRlbkRheXMoY3VycmVudEluZm8ucmFuZ2UpLCBjdXJyZW50SW5mby51bml0LCBpc1JhbmdlQWxsRGF5KTtcbiAgICAgICAgcmVuZGVyUmFuZ2UgPSB0aGlzLnRyaW1IaWRkZW5EYXlzKHJlbmRlclJhbmdlKTtcbiAgICAgICAgYWN0aXZlUmFuZ2UgPSByZW5kZXJSYW5nZTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd05vbkN1cnJlbnREYXRlcykge1xuICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMoYWN0aXZlUmFuZ2UsIGN1cnJlbnRJbmZvLnJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBtaW5UaW1lID0gY3JlYXRlRHVyYXRpb24odGhpcy5vcHRpb25zLm1pblRpbWUpO1xuICAgICAgICBtYXhUaW1lID0gY3JlYXRlRHVyYXRpb24odGhpcy5vcHRpb25zLm1heFRpbWUpO1xuICAgICAgICBhY3RpdmVSYW5nZSA9IHRoaXMuYWRqdXN0QWN0aXZlUmFuZ2UoYWN0aXZlUmFuZ2UsIG1pblRpbWUsIG1heFRpbWUpO1xuICAgICAgICBhY3RpdmVSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhhY3RpdmVSYW5nZSwgdmFsaWRSYW5nZSk7IC8vIG1pZ2h0IHJldHVybiBudWxsXG4gICAgICAgIC8vIGl0J3MgaW52YWxpZCBpZiB0aGUgb3JpZ2luYWxseSByZXF1ZXN0ZWQgZGF0ZSBpcyBub3QgY29udGFpbmVkLFxuICAgICAgICAvLyBvciBpZiB0aGUgcmFuZ2UgaXMgY29tcGxldGVseSBvdXRzaWRlIG9mIHRoZSB2YWxpZCByYW5nZS5cbiAgICAgICAgaXNWYWxpZCA9IHJhbmdlc0ludGVyc2VjdChjdXJyZW50SW5mby5yYW5nZSwgdmFsaWRSYW5nZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBjb25zdHJhaW50IGZvciB3aGVyZSBwcmV2L25leHQgb3BlcmF0aW9ucyBjYW4gZ28gYW5kIHdoZXJlIGV2ZW50cyBjYW4gYmUgZHJhZ2dlZC9yZXNpemVkIHRvLlxuICAgICAgICAgICAgLy8gYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgc3RhcnQgYW5kIGVuZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgdmFsaWRSYW5nZTogdmFsaWRSYW5nZSxcbiAgICAgICAgICAgIC8vIHJhbmdlIHRoZSB2aWV3IGlzIGZvcm1hbGx5IHJlc3BvbnNpYmxlIGZvci5cbiAgICAgICAgICAgIC8vIGZvciBleGFtcGxlLCBhIG1vbnRoIHZpZXcgbWlnaHQgaGF2ZSAxc3QtMzFzdCwgZXhjbHVkaW5nIHBhZGRlZCBkYXRlc1xuICAgICAgICAgICAgY3VycmVudFJhbmdlOiBjdXJyZW50SW5mby5yYW5nZSxcbiAgICAgICAgICAgIC8vIG5hbWUgb2YgbGFyZ2VzdCB1bml0IGJlaW5nIGRpc3BsYXllZCwgbGlrZSBcIm1vbnRoXCIgb3IgXCJ3ZWVrXCJcbiAgICAgICAgICAgIGN1cnJlbnRSYW5nZVVuaXQ6IGN1cnJlbnRJbmZvLnVuaXQsXG4gICAgICAgICAgICBpc1JhbmdlQWxsRGF5OiBpc1JhbmdlQWxsRGF5LFxuICAgICAgICAgICAgLy8gZGF0ZXMgdGhhdCBkaXNwbGF5IGV2ZW50cyBhbmQgYWNjZXB0IGRyYWctbi1kcm9wXG4gICAgICAgICAgICAvLyB3aWxsIGJlIGBudWxsYCBpZiBubyBkYXRlcyBhY2NlcHQgZXZlbnRzXG4gICAgICAgICAgICBhY3RpdmVSYW5nZTogYWN0aXZlUmFuZ2UsXG4gICAgICAgICAgICAvLyBkYXRlIHJhbmdlIHdpdGggYSByZW5kZXJlZCBza2VsZXRvblxuICAgICAgICAgICAgLy8gaW5jbHVkZXMgbm90LWFjdGl2ZSBkYXlzIHRoYXQgbmVlZCBzb21lIHNvcnQgb2YgRE9NXG4gICAgICAgICAgICByZW5kZXJSYW5nZTogcmVuZGVyUmFuZ2UsXG4gICAgICAgICAgICAvLyBEdXJhdGlvbiBvYmplY3QgdGhhdCBkZW5vdGVzIHRoZSBmaXJzdCB2aXNpYmxlIHRpbWUgb2YgYW55IGdpdmVuIGRheVxuICAgICAgICAgICAgbWluVGltZTogbWluVGltZSxcbiAgICAgICAgICAgIC8vIER1cmF0aW9uIG9iamVjdCB0aGF0IGRlbm90ZXMgdGhlIGV4Y2x1c2l2ZSB2aXNpYmxlIGVuZCB0aW1lIG9mIGFueSBnaXZlbiBkYXlcbiAgICAgICAgICAgIG1heFRpbWU6IG1heFRpbWUsXG4gICAgICAgICAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxuICAgICAgICAgICAgLy8gaG93IGZhciB0aGUgY3VycmVudCBkYXRlIHdpbGwgbW92ZSBmb3IgYSBwcmV2L25leHQgb3BlcmF0aW9uXG4gICAgICAgICAgICBkYXRlSW5jcmVtZW50OiB0aGlzLmJ1aWxkRGF0ZUluY3JlbWVudChjdXJyZW50SW5mby5kdXJhdGlvbilcbiAgICAgICAgICAgIC8vIHBhc3MgYSBmYWxsYmFjayAobWlnaHQgYmUgbnVsbCkgXlxuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGFuIG9iamVjdCB3aXRoIG9wdGlvbmFsIHN0YXJ0L2VuZCBwcm9wZXJ0aWVzLlxuICAgIC8vIEluZGljYXRlcyB0aGUgbWluaW11bS9tYXhpbXVtIGRhdGVzIHRvIGRpc3BsYXkuXG4gICAgLy8gbm90IHJlc3BvbnNpYmxlIGZvciB0cmltbWluZyBoaWRkZW4gZGF5cy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRWYWxpZFJhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZU9wdGlvbigndmFsaWRSYW5nZScsIHRoaXMuY2FsZW5kYXIuZ2V0Tm93KCkpIHx8XG4gICAgICAgICAgICB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTsgLy8gY29tcGxldGVseSBvcGVuLWVuZGVkXG4gICAgfTtcbiAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHRoZSBcImN1cnJlbnRcIiByYW5nZSwgdGhlIHJhbmdlIHRoYXQgaXNcbiAgICAvLyBoaWdobGlnaHRlZCBhcyBiZWluZyB0aGUgY3VycmVudCBtb250aCBmb3IgZXhhbXBsZS5cbiAgICAvLyBTZWUgYnVpbGQoKSBmb3IgYSBkZXNjcmlwdGlvbiBvZiBgZGlyZWN0aW9uYC5cbiAgICAvLyBHdWFyYW50ZWVkIHRvIGhhdmUgYHJhbmdlYCBhbmQgYHVuaXRgIHByb3BlcnRpZXMuIGBkdXJhdGlvbmAgaXMgb3B0aW9uYWwuXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkQ3VycmVudFJhbmdlSW5mbyA9IGZ1bmN0aW9uIChkYXRlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdmlld1NwZWMgPSBfYS52aWV3U3BlYywgZGF0ZUVudiA9IF9hLmRhdGVFbnY7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciB1bml0ID0gbnVsbDtcbiAgICAgICAgdmFyIHJhbmdlID0gbnVsbDtcbiAgICAgICAgdmFyIGRheUNvdW50O1xuICAgICAgICBpZiAodmlld1NwZWMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gdmlld1NwZWMuZHVyYXRpb247XG4gICAgICAgICAgICB1bml0ID0gdmlld1NwZWMuZHVyYXRpb25Vbml0O1xuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24oZGF0ZSwgZGlyZWN0aW9uLCBkdXJhdGlvbiwgdW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGRheUNvdW50ID0gdGhpcy5vcHRpb25zLmRheUNvdW50KSkge1xuICAgICAgICAgICAgdW5pdCA9ICdkYXknO1xuICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmJ1aWxkUmFuZ2VGcm9tRGF5Q291bnQoZGF0ZSwgZGlyZWN0aW9uLCBkYXlDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHJhbmdlID0gdGhpcy5idWlsZEN1c3RvbVZpc2libGVSYW5nZShkYXRlKSkpIHtcbiAgICAgICAgICAgIHVuaXQgPSBkYXRlRW52LmdyZWF0ZXN0V2hvbGVVbml0KHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpLnVuaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHRoaXMuZ2V0RmFsbGJhY2tEdXJhdGlvbigpO1xuICAgICAgICAgICAgdW5pdCA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkdXJhdGlvbikudW5pdDtcbiAgICAgICAgICAgIHJhbmdlID0gdGhpcy5idWlsZFJhbmdlRnJvbUR1cmF0aW9uKGRhdGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIHVuaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGR1cmF0aW9uOiBkdXJhdGlvbiwgdW5pdDogdW5pdCwgcmFuZ2U6IHJhbmdlIH07XG4gICAgfTtcbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuZ2V0RmFsbGJhY2tEdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZGF5OiAxIH0pO1xuICAgIH07XG4gICAgLy8gUmV0dXJucyBhIG5ldyBhY3RpdmVSYW5nZSB0byBoYXZlIHRpbWUgdmFsdWVzICh1bi1hbWJpZ3VhdGUpXG4gICAgLy8gbWluVGltZSBvciBtYXhUaW1lIGNhdXNlcyB0aGUgcmFuZ2UgdG8gZXhwYW5kLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5hZGp1c3RBY3RpdmVSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSwgbWluVGltZSwgbWF4VGltZSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgIGlmICh0aGlzLnZpZXdTcGVjLmNsYXNzLnByb3RvdHlwZS51c2VzTWluTWF4VGltZSkge1xuICAgICAgICAgICAgLy8gZXhwYW5kIGFjdGl2ZSByYW5nZSBpZiBtaW5UaW1lIGlzIG5lZ2F0aXZlICh3aHkgbm90IHdoZW4gcG9zaXRpdmU/KVxuICAgICAgICAgICAgaWYgKGFzUm91Z2hEYXlzKG1pblRpbWUpIDwgMCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuYWRkKHN0YXJ0LCBtaW5UaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV4cGFuZCBhY3RpdmUgcmFuZ2UgaWYgbWF4VGltZSBpcyBiZXlvbmQgb25lIGRheSAod2h5IG5vdCB3aGVuIHBvc2l0aXZlPylcbiAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhtYXhUaW1lKSA+IDEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydE9mRGF5KGVuZCk7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICBlbmQgPSBhZGREYXlzKGVuZCwgLTEpO1xuICAgICAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKGVuZCwgbWF4VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBcImN1cnJlbnRcIiByYW5nZSB3aGVuIGl0IGlzIHNwZWNpZmllZCBhcyBhbiBleHBsaWNpdCBkdXJhdGlvbi5cbiAgICAvLyBgdW5pdGAgaXMgdGhlIGFscmVhZHktY29tcHV0ZWQgZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yIHVuaXQgb2YgZHVyYXRpb24uXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24gPSBmdW5jdGlvbiAoZGF0ZSwgZGlyZWN0aW9uLCBkdXJhdGlvbiwgdW5pdCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIGFsaWdubWVudCA9IHRoaXMub3B0aW9ucy5kYXRlQWxpZ25tZW50O1xuICAgICAgICB2YXIgZGF0ZUluY3JlbWVudElucHV0O1xuICAgICAgICB2YXIgZGF0ZUluY3JlbWVudER1cmF0aW9uO1xuICAgICAgICB2YXIgc3RhcnQ7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIC8vIGNvbXB1dGUgd2hhdCB0aGUgYWxpZ25tZW50IHNob3VsZCBiZVxuICAgICAgICBpZiAoIWFsaWdubWVudCkge1xuICAgICAgICAgICAgZGF0ZUluY3JlbWVudElucHV0ID0gdGhpcy5vcHRpb25zLmRhdGVJbmNyZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZGF0ZUluY3JlbWVudElucHV0KSB7XG4gICAgICAgICAgICAgICAgZGF0ZUluY3JlbWVudER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24oZGF0ZUluY3JlbWVudElucHV0KTtcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHNtYWxsZXIgb2YgdGhlIHR3byB1bml0c1xuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoTXMoZGF0ZUluY3JlbWVudER1cmF0aW9uKSA8IGFzUm91Z2hNcyhkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGRhdGVJbmNyZW1lbnREdXJhdGlvbiwgIWdldFdlZWtzRnJvbUlucHV0KGRhdGVJbmNyZW1lbnRJbnB1dCkpLnVuaXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQgPSB1bml0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsaWdubWVudCA9IHVuaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHZpZXcgZGlzcGxheXMgYSBzaW5nbGUgZGF5IG9yIHNtYWxsZXJcbiAgICAgICAgaWYgKGFzUm91Z2hEYXlzKGR1cmF0aW9uKSA8PSAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0hpZGRlbkRheShzdGFydCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydE9mRGF5KHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wdXRlUmVzKCkge1xuICAgICAgICAgICAgc3RhcnQgPSBkYXRlRW52LnN0YXJ0T2YoZGF0ZSwgYWxpZ25tZW50KTtcbiAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKHN0YXJ0LCBkdXJhdGlvbik7XG4gICAgICAgICAgICByZXMgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICBjb21wdXRlUmVzKCk7XG4gICAgICAgIC8vIGlmIHJhbmdlIGlzIGNvbXBsZXRlbHkgZW52ZWxvcGVkIGJ5IGhpZGRlbiBkYXlzLCBnbyBwYXN0IHRoZSBoaWRkZW4gZGF5c1xuICAgICAgICBpZiAoIXRoaXMudHJpbUhpZGRlbkRheXMocmVzKSkge1xuICAgICAgICAgICAgZGF0ZSA9IHRoaXMuc2tpcEhpZGRlbkRheXMoZGF0ZSwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbXB1dGVSZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBcImN1cnJlbnRcIiByYW5nZSB3aGVuIGEgZGF5Q291bnQgaXMgc3BlY2lmaWVkLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJhbmdlRnJvbURheUNvdW50ID0gZnVuY3Rpb24gKGRhdGUsIGRpcmVjdGlvbiwgZGF5Q291bnQpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciBjdXN0b21BbGlnbm1lbnQgPSB0aGlzLm9wdGlvbnMuZGF0ZUFsaWdubWVudDtcbiAgICAgICAgdmFyIHJ1bm5pbmdDb3VudCA9IDA7XG4gICAgICAgIHZhciBzdGFydCA9IGRhdGU7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIGlmIChjdXN0b21BbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mKHN0YXJ0LCBjdXN0b21BbGlnbm1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7XG4gICAgICAgIHN0YXJ0ID0gdGhpcy5za2lwSGlkZGVuRGF5cyhzdGFydCwgZGlyZWN0aW9uKTtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGVuZCA9IGFkZERheXMoZW5kLCAxKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0hpZGRlbkRheShlbmQpKSB7XG4gICAgICAgICAgICAgICAgcnVubmluZ0NvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHJ1bm5pbmdDb3VudCA8IGRheUNvdW50KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH07XG4gICAgLy8gQnVpbGRzIGEgbm9ybWFsaXplZCByYW5nZSBvYmplY3QgZm9yIHRoZSBcInZpc2libGVcIiByYW5nZSxcbiAgICAvLyB3aGljaCBpcyBhIHdheSB0byBkZWZpbmUgdGhlIGN1cnJlbnRSYW5nZSBhbmQgYWN0aXZlUmFuZ2UgYXQgdGhlIHNhbWUgdGltZS5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRDdXN0b21WaXNpYmxlUmFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgdmFyIHZpc2libGVSYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPcHRpb24oJ3Zpc2libGVSYW5nZScsIGRhdGVFbnYudG9EYXRlKGRhdGUpKTtcbiAgICAgICAgaWYgKHZpc2libGVSYW5nZSAmJiAodmlzaWJsZVJhbmdlLnN0YXJ0ID09IG51bGwgfHwgdmlzaWJsZVJhbmdlLmVuZCA9PSBudWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpc2libGVSYW5nZTtcbiAgICB9O1xuICAgIC8vIENvbXB1dGVzIHRoZSByYW5nZSB0aGF0IHdpbGwgcmVwcmVzZW50IHRoZSBlbGVtZW50L2NlbGxzIGZvciAqcmVuZGVyaW5nKixcbiAgICAvLyBidXQgd2hpY2ggbWF5IGhhdmUgdm9pZGVkIGRheXMvdGltZXMuXG4gICAgLy8gbm90IHJlc3BvbnNpYmxlIGZvciB0cmltbWluZyBoaWRkZW4gZGF5cy5cbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRSZW5kZXJSYW5nZSA9IGZ1bmN0aW9uIChjdXJyZW50UmFuZ2UsIGN1cnJlbnRSYW5nZVVuaXQsIGlzUmFuZ2VBbGxEYXkpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRSYW5nZTtcbiAgICB9O1xuICAgIC8vIENvbXB1dGUgdGhlIGR1cmF0aW9uIHZhbHVlIHRoYXQgc2hvdWxkIGJlIGFkZGVkL3N1YnN0cmFjdGVkIHRvIHRoZSBjdXJyZW50IGRhdGVcbiAgICAvLyB3aGVuIGEgcHJldi9uZXh0IG9wZXJhdGlvbiBoYXBwZW5zLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZERhdGVJbmNyZW1lbnQgPSBmdW5jdGlvbiAoZmFsbGJhY2spIHtcbiAgICAgICAgdmFyIGRhdGVJbmNyZW1lbnRJbnB1dCA9IHRoaXMub3B0aW9ucy5kYXRlSW5jcmVtZW50O1xuICAgICAgICB2YXIgY3VzdG9tQWxpZ25tZW50O1xuICAgICAgICBpZiAoZGF0ZUluY3JlbWVudElucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oZGF0ZUluY3JlbWVudElucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoY3VzdG9tQWxpZ25tZW50ID0gdGhpcy5vcHRpb25zLmRhdGVBbGlnbm1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oMSwgY3VzdG9tQWxpZ25tZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZGF5czogMSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQXJndW1lbnRzIGFmdGVyIG5hbWUgd2lsbCBiZSBmb3J3YXJkZWQgdG8gYSBoeXBvdGhldGljYWwgZnVuY3Rpb24gdmFsdWVcbiAgICAvLyBXQVJOSU5HOiBwYXNzZWQtaW4gYXJndW1lbnRzIHdpbGwgYmUgZ2l2ZW4gdG8gZ2VuZXJhdG9yIGZ1bmN0aW9ucyBhcy1pcyBhbmQgY2FuIGNhdXNlIHNpZGUtZWZmZWN0cy5cbiAgICAvLyBBbHdheXMgY2xvbmUgeW91ciBvYmplY3RzIGlmIHlvdSBmZWFyIG11dGF0aW9uLlxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5nZXRSYW5nZU9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG90aGVyQXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gdGhpcy5vcHRpb25zW25hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KG51bGwsIG90aGVyQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgdmFsID0gcGFyc2VSYW5nZSh2YWwsIHRoaXMuZGF0ZUVudik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgdmFsID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZSh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICAvKiBIaWRkZW4gRGF5c1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgLy8gSW5pdGlhbGl6ZXMgaW50ZXJuYWwgdmFyaWFibGVzIHJlbGF0ZWQgdG8gY2FsY3VsYXRpbmcgaGlkZGVuIGRheXMtb2Ytd2Vla1xuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5pbml0SGlkZGVuRGF5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkRheXMgPSB0aGlzLm9wdGlvbnMuaGlkZGVuRGF5cyB8fCBbXTsgLy8gYXJyYXkgb2YgZGF5LW9mLXdlZWsgaW5kaWNlcyB0aGF0IGFyZSBoaWRkZW5cbiAgICAgICAgdmFyIGlzSGlkZGVuRGF5SGFzaCA9IFtdOyAvLyBpcyB0aGUgZGF5LW9mLXdlZWsgaGlkZGVuPyAoaGFzaCB3aXRoIGRheS1vZi13ZWVrLWluZGV4IC0+IGJvb2wpXG4gICAgICAgIHZhciBkYXlDbnQgPSAwO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53ZWVrZW5kcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGhpZGRlbkRheXMucHVzaCgwLCA2KTsgLy8gMD1zdW5kYXksIDY9c2F0dXJkYXlcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIShpc0hpZGRlbkRheUhhc2hbaV0gPSBoaWRkZW5EYXlzLmluZGV4T2YoaSkgIT09IC0xKSkge1xuICAgICAgICAgICAgICAgIGRheUNudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZGF5Q250KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaGlkZGVuRGF5cycpOyAvLyBhbGwgZGF5cyB3ZXJlIGhpZGRlbj8gYmFkLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNIaWRkZW5EYXlIYXNoID0gaXNIaWRkZW5EYXlIYXNoO1xuICAgIH07XG4gICAgLy8gUmVtb3ZlIGRheXMgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIHJhbmdlIHRoYXQgYXJlIGNvbXB1dGVkIGFzIGhpZGRlbi5cbiAgICAvLyBJZiB0aGUgd2hvbGUgcmFuZ2UgaXMgdHJpbW1lZCBvZmYsIHJldHVybnMgbnVsbFxuICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS50cmltSGlkZGVuRGF5cyA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IHJhbmdlLmVuZDtcbiAgICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoZW5kLCAtMSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgfHwgc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8vIElzIHRoZSBjdXJyZW50IGRheSBoaWRkZW4/XG4gICAgLy8gYGRheWAgaXMgYSBkYXktb2Ytd2VlayBpbmRleCAoMC02KSwgb3IgYSBEYXRlICh1c2VkIGZvciBVVEMpXG4gICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmlzSGlkZGVuRGF5ID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICBpZiAoZGF5IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgZGF5ID0gZGF5LmdldFVUQ0RheSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmlzSGlkZGVuRGF5SGFzaFtkYXldO1xuICAgIH07XG4gICAgLy8gSW5jcmVtZW50aW5nIHRoZSBjdXJyZW50IGRheSB1bnRpbCBpdCBpcyBubyBsb25nZXIgYSBoaWRkZW4gZGF5LCByZXR1cm5pbmcgYSBjb3B5LlxuICAgIC8vIERPRVMgTk9UIENPTlNJREVSIHZhbGlkUmFuZ2UhXG4gICAgLy8gSWYgdGhlIGluaXRpYWwgdmFsdWUgb2YgYGRhdGVgIGlzIG5vdCBhIGhpZGRlbiBkYXksIGRvbid0IGRvIGFueXRoaW5nLlxuICAgIC8vIFBhc3MgYGlzRXhjbHVzaXZlYCBhcyBgdHJ1ZWAgaWYgeW91IGFyZSBkZWFsaW5nIHdpdGggYW4gZW5kIGRhdGUuXG4gICAgLy8gYGluY2AgZGVmYXVsdHMgdG8gYDFgIChpbmNyZW1lbnQgb25lIGRheSBmb3J3YXJkIGVhY2ggdGltZSlcbiAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuc2tpcEhpZGRlbkRheXMgPSBmdW5jdGlvbiAoZGF0ZSwgaW5jLCBpc0V4Y2x1c2l2ZSkge1xuICAgICAgICBpZiAoaW5jID09PSB2b2lkIDApIHsgaW5jID0gMTsgfVxuICAgICAgICBpZiAoaXNFeGNsdXNpdmUgPT09IHZvaWQgMCkgeyBpc0V4Y2x1c2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHdoaWxlICh0aGlzLmlzSGlkZGVuRGF5SGFzaFsoZGF0ZS5nZXRVVENEYXkoKSArIChpc0V4Y2x1c2l2ZSA/IGluYyA6IDApICsgNykgJSA3XSkge1xuICAgICAgICAgICAgZGF0ZSA9IGFkZERheXMoZGF0ZSwgaW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRlUHJvZmlsZUdlbmVyYXRvcjtcbn0oKSk7XG4vLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGF2b2lkIGNvbXBhcmluZyBEYXRlUHJvZmlsZXMuIGl0J3MgdGVkaW91c1xuZnVuY3Rpb24gaXNEYXRlUHJvZmlsZXNFcXVhbChwMCwgcDEpIHtcbiAgICByZXR1cm4gcmFuZ2VzRXF1YWwocDAudmFsaWRSYW5nZSwgcDEudmFsaWRSYW5nZSkgJiZcbiAgICAgICAgcmFuZ2VzRXF1YWwocDAuYWN0aXZlUmFuZ2UsIHAxLmFjdGl2ZVJhbmdlKSAmJlxuICAgICAgICByYW5nZXNFcXVhbChwMC5yZW5kZXJSYW5nZSwgcDEucmVuZGVyUmFuZ2UpICYmXG4gICAgICAgIGR1cmF0aW9uc0VxdWFsKHAwLm1pblRpbWUsIHAxLm1pblRpbWUpICYmXG4gICAgICAgIGR1cmF0aW9uc0VxdWFsKHAwLm1heFRpbWUsIHAxLm1heFRpbWUpO1xuICAgIC8qXG4gICAgVE9ETzogY29tcGFyZSBtb3JlP1xuICAgICAgY3VycmVudFJhbmdlOiBEYXRlUmFuZ2VcbiAgICAgIGN1cnJlbnRSYW5nZVVuaXQ6IHN0cmluZ1xuICAgICAgaXNSYW5nZUFsbERheTogYm9vbGVhblxuICAgICAgaXNWYWxpZDogYm9vbGVhblxuICAgICAgZGF0ZUluY3JlbWVudDogRHVyYXRpb25cbiAgICAqL1xufVxuXG5mdW5jdGlvbiByZWR1Y2UgKHN0YXRlLCBhY3Rpb24sIGNhbGVuZGFyKSB7XG4gICAgdmFyIHZpZXdUeXBlID0gcmVkdWNlVmlld1R5cGUoc3RhdGUudmlld1R5cGUsIGFjdGlvbik7XG4gICAgdmFyIGRhdGVQcm9maWxlID0gcmVkdWNlRGF0ZVByb2ZpbGUoc3RhdGUuZGF0ZVByb2ZpbGUsIGFjdGlvbiwgc3RhdGUuY3VycmVudERhdGUsIHZpZXdUeXBlLCBjYWxlbmRhcik7XG4gICAgdmFyIGV2ZW50U291cmNlcyA9IHJlZHVjZUV2ZW50U291cmNlcyhzdGF0ZS5ldmVudFNvdXJjZXMsIGFjdGlvbiwgZGF0ZVByb2ZpbGUsIGNhbGVuZGFyKTtcbiAgICB2YXIgbmV4dFN0YXRlID0gX19hc3NpZ24oe30sIHN0YXRlLCB7IHZpZXdUeXBlOiB2aWV3VHlwZSxcbiAgICAgICAgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZTogcmVkdWNlQ3VycmVudERhdGUoc3RhdGUuY3VycmVudERhdGUsIGFjdGlvbiwgZGF0ZVByb2ZpbGUpLCBldmVudFNvdXJjZXM6IGV2ZW50U291cmNlcywgZXZlbnRTdG9yZTogcmVkdWNlRXZlbnRTdG9yZShzdGF0ZS5ldmVudFN0b3JlLCBhY3Rpb24sIGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUsIGNhbGVuZGFyKSwgZGF0ZVNlbGVjdGlvbjogcmVkdWNlRGF0ZVNlbGVjdGlvbihzdGF0ZS5kYXRlU2VsZWN0aW9uLCBhY3Rpb24sIGNhbGVuZGFyKSwgZXZlbnRTZWxlY3Rpb246IHJlZHVjZVNlbGVjdGVkRXZlbnQoc3RhdGUuZXZlbnRTZWxlY3Rpb24sIGFjdGlvbiksIGV2ZW50RHJhZzogcmVkdWNlRXZlbnREcmFnKHN0YXRlLmV2ZW50RHJhZywgYWN0aW9uLCBldmVudFNvdXJjZXMsIGNhbGVuZGFyKSwgZXZlbnRSZXNpemU6IHJlZHVjZUV2ZW50UmVzaXplKHN0YXRlLmV2ZW50UmVzaXplLCBhY3Rpb24sIGV2ZW50U291cmNlcywgY2FsZW5kYXIpLCBldmVudFNvdXJjZUxvYWRpbmdMZXZlbDogY29tcHV0ZUxvYWRpbmdMZXZlbChldmVudFNvdXJjZXMpLCBsb2FkaW5nTGV2ZWw6IGNvbXB1dGVMb2FkaW5nTGV2ZWwoZXZlbnRTb3VyY2VzKSB9KTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLnJlZHVjZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcmVkdWNlckZ1bmMgPSBfYVtfaV07XG4gICAgICAgIG5leHRTdGF0ZSA9IHJlZHVjZXJGdW5jKG5leHRTdGF0ZSwgYWN0aW9uLCBjYWxlbmRhcik7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGFjdGlvbi50eXBlLCBuZXh0U3RhdGUpXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbn1cbmZ1bmN0aW9uIHJlZHVjZVZpZXdUeXBlKGN1cnJlbnRWaWV3VHlwZSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24udmlld1R5cGU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZpZXdUeXBlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZURhdGVQcm9maWxlKGN1cnJlbnREYXRlUHJvZmlsZSwgYWN0aW9uLCBjdXJyZW50RGF0ZSwgdmlld1R5cGUsIGNhbGVuZGFyKSB7XG4gICAgdmFyIG5ld0RhdGVQcm9maWxlO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUFJFVic6XG4gICAgICAgICAgICBuZXdEYXRlUHJvZmlsZSA9IGNhbGVuZGFyLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV0uYnVpbGRQcmV2KGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBjYWxlbmRhci5kYXRlUHJvZmlsZUdlbmVyYXRvcnNbdmlld1R5cGVdLmJ1aWxkTmV4dChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTRVRfREFURSc6XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnREYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSB8fFxuICAgICAgICAgICAgICAgICFyYW5nZUNvbnRhaW5zTWFya2VyKGN1cnJlbnREYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UsIGFjdGlvbi5kYXRlTWFya2VyKSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGVQcm9maWxlID0gY2FsZW5kYXIuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzW3ZpZXdUeXBlXS5idWlsZChhY3Rpb24uZGF0ZU1hcmtlciwgdW5kZWZpbmVkLCB0cnVlIC8vIGZvcmNlVG9WYWxpZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU0VUX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICB2YXIgZ2VuZXJhdG9yID0gY2FsZW5kYXIuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzW3ZpZXdUeXBlXTtcbiAgICAgICAgICAgIGlmICghZ2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHZpZXdUeXBlID9cbiAgICAgICAgICAgICAgICAgICAgJ1RoZSBGdWxsQ2FsZW5kYXIgdmlldyBcIicgKyB2aWV3VHlwZSArICdcIiBkb2VzIG5vdCBleGlzdC4gTWFrZSBzdXJlIHlvdXIgcGx1Z2lucyBhcmUgbG9hZGVkIGNvcnJlY3RseS4nIDpcbiAgICAgICAgICAgICAgICAgICAgJ05vIGF2YWlsYWJsZSBGdWxsQ2FsZW5kYXIgdmlldyBwbHVnaW5zLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBnZW5lcmF0b3IuYnVpbGQoYWN0aW9uLmRhdGVNYXJrZXIgfHwgY3VycmVudERhdGUsIHVuZGVmaW5lZCwgdHJ1ZSAvLyBmb3JjZVRvVmFsaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKG5ld0RhdGVQcm9maWxlICYmXG4gICAgICAgIG5ld0RhdGVQcm9maWxlLmlzVmFsaWQgJiZcbiAgICAgICAgIShjdXJyZW50RGF0ZVByb2ZpbGUgJiYgaXNEYXRlUHJvZmlsZXNFcXVhbChjdXJyZW50RGF0ZVByb2ZpbGUsIG5ld0RhdGVQcm9maWxlKSkpIHtcbiAgICAgICAgcmV0dXJuIG5ld0RhdGVQcm9maWxlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlUHJvZmlsZTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWR1Y2VDdXJyZW50RGF0ZShjdXJyZW50RGF0ZSwgYWN0aW9uLCBkYXRlUHJvZmlsZSkge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUFJFVic6XG4gICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIHZhciBuZXdEYXRlID0gYWN0aW9uLmRhdGVNYXJrZXIgfHwgY3VycmVudERhdGU7XG4gICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UgJiYgIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIG5ld0RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdEYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZURhdGVTZWxlY3Rpb24oY3VycmVudFNlbGVjdGlvbiwgYWN0aW9uLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VMRUNUX0RBVEVTJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uc2VsZWN0aW9uO1xuICAgICAgICBjYXNlICdVTlNFTEVDVF9EQVRFUyc6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50U2VsZWN0aW9uO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlZHVjZVNlbGVjdGVkRXZlbnQoY3VycmVudEluc3RhbmNlSWQsIGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VMRUNUX0VWRU5UJzpcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZXZlbnRJbnN0YW5jZUlkO1xuICAgICAgICBjYXNlICdVTlNFTEVDVF9FVkVOVCc6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEluc3RhbmNlSWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVkdWNlRXZlbnREcmFnKGN1cnJlbnREcmFnLCBhY3Rpb24sIHNvdXJjZXMsIGNhbGVuZGFyKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdTRVRfRVZFTlRfRFJBRyc6XG4gICAgICAgICAgICB2YXIgbmV3RHJhZyA9IGFjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRFdmVudHM6IG5ld0RyYWcuYWZmZWN0ZWRFdmVudHMsXG4gICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbmV3RHJhZy5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IG5ld0RyYWcuaXNFdmVudCxcbiAgICAgICAgICAgICAgICBvcmlnU2VnOiBuZXdEcmFnLm9yaWdTZWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ1VOU0VUX0VWRU5UX0RSQUcnOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERyYWc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVkdWNlRXZlbnRSZXNpemUoY3VycmVudFJlc2l6ZSwgYWN0aW9uLCBzb3VyY2VzLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VUX0VWRU5UX1JFU0laRSc6XG4gICAgICAgICAgICB2YXIgbmV3UmVzaXplID0gYWN0aW9uLnN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogbmV3UmVzaXplLmFmZmVjdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IG5ld1Jlc2l6ZS5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IG5ld1Jlc2l6ZS5pc0V2ZW50LFxuICAgICAgICAgICAgICAgIG9yaWdTZWc6IG5ld1Jlc2l6ZS5vcmlnU2VnXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdVTlNFVF9FVkVOVF9SRVNJWkUnOlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFJlc2l6ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wdXRlTG9hZGluZ0xldmVsKGV2ZW50U291cmNlcykge1xuICAgIHZhciBjbnQgPSAwO1xuICAgIGZvciAodmFyIHNvdXJjZUlkIGluIGV2ZW50U291cmNlcykge1xuICAgICAgICBpZiAoZXZlbnRTb3VyY2VzW3NvdXJjZUlkXS5pc0ZldGNoaW5nKSB7XG4gICAgICAgICAgICBjbnQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY250O1xufVxuXG52YXIgU1RBTkRBUkRfUFJPUFMgPSB7XG4gICAgc3RhcnQ6IG51bGwsXG4gICAgZW5kOiBudWxsLFxuICAgIGFsbERheTogQm9vbGVhblxufTtcbmZ1bmN0aW9uIHBhcnNlRGF0ZVNwYW4ocmF3LCBkYXRlRW52LCBkZWZhdWx0RHVyYXRpb24pIHtcbiAgICB2YXIgc3BhbiA9IHBhcnNlT3BlbkRhdGVTcGFuKHJhdywgZGF0ZUVudik7XG4gICAgdmFyIHJhbmdlID0gc3Bhbi5yYW5nZTtcbiAgICBpZiAoIXJhbmdlLnN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoIXJhbmdlLmVuZCkge1xuICAgICAgICBpZiAoZGVmYXVsdER1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2UuZW5kID0gZGF0ZUVudi5hZGQocmFuZ2Uuc3RhcnQsIGRlZmF1bHREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwYW47XG59XG4vKlxuVE9ETzogc29tZWhvdyBjb21iaW5lIHdpdGggcGFyc2VSYW5nZT9cbldpbGwgcmV0dXJuIG51bGwgaWYgdGhlIHN0YXJ0L2VuZCBwcm9wcyB3ZXJlIHByZXNlbnQgYnV0IHBhcnNlZCBpbnZhbGlkbHkuXG4qL1xuZnVuY3Rpb24gcGFyc2VPcGVuRGF0ZVNwYW4ocmF3LCBkYXRlRW52KSB7XG4gICAgdmFyIGxlZnRvdmVycyA9IHt9O1xuICAgIHZhciBzdGFuZGFyZFByb3BzID0gcmVmaW5lUHJvcHMocmF3LCBTVEFOREFSRF9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgdmFyIHN0YXJ0TWV0YSA9IHN0YW5kYXJkUHJvcHMuc3RhcnQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5zdGFydCkgOiBudWxsO1xuICAgIHZhciBlbmRNZXRhID0gc3RhbmRhcmRQcm9wcy5lbmQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5lbmQpIDogbnVsbDtcbiAgICB2YXIgYWxsRGF5ID0gc3RhbmRhcmRQcm9wcy5hbGxEYXk7XG4gICAgaWYgKGFsbERheSA9PSBudWxsKSB7XG4gICAgICAgIGFsbERheSA9IChzdGFydE1ldGEgJiYgc3RhcnRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKSAmJlxuICAgICAgICAgICAgKCFlbmRNZXRhIHx8IGVuZE1ldGEuaXNUaW1lVW5zcGVjaWZpZWQpO1xuICAgIH1cbiAgICAvLyB1c2UgdGhpcyBsZWZ0b3ZlciBvYmplY3QgYXMgdGhlIHNlbGVjdGlvbiBvYmplY3RcbiAgICBsZWZ0b3ZlcnMucmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0OiBzdGFydE1ldGEgPyBzdGFydE1ldGEubWFya2VyIDogbnVsbCxcbiAgICAgICAgZW5kOiBlbmRNZXRhID8gZW5kTWV0YS5tYXJrZXIgOiBudWxsXG4gICAgfTtcbiAgICBsZWZ0b3ZlcnMuYWxsRGF5ID0gYWxsRGF5O1xuICAgIHJldHVybiBsZWZ0b3ZlcnM7XG59XG5mdW5jdGlvbiBpc0RhdGVTcGFuc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgIHJldHVybiByYW5nZXNFcXVhbChzcGFuMC5yYW5nZSwgc3BhbjEucmFuZ2UpICYmXG4gICAgICAgIHNwYW4wLmFsbERheSA9PT0gc3BhbjEuYWxsRGF5ICYmXG4gICAgICAgIGlzU3BhblByb3BzRXF1YWwoc3BhbjAsIHNwYW4xKTtcbn1cbi8vIHRoZSBOT04tREFURS1SRUxBVEVEIHByb3BzXG5mdW5jdGlvbiBpc1NwYW5Qcm9wc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4xKSB7XG4gICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ3JhbmdlJyAmJiBwcm9wTmFtZSAhPT0gJ2FsbERheScpIHtcbiAgICAgICAgICAgIGlmIChzcGFuMFtwcm9wTmFtZV0gIT09IHNwYW4xW3Byb3BOYW1lXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhcmUgdGhlcmUgYW55IHByb3BzIHRoYXQgc3BhbjAgaGFzIHRoYXQgc3BhbjEgRE9FU04nVCBoYXZlP1xuICAgIC8vIGJvdGggaGF2ZSByYW5nZS9hbGxEYXksIHNvIG5vIG5lZWQgdG8gc3BlY2lhbC1jYXNlLlxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4wKSB7XG4gICAgICAgIGlmICghKHByb3BOYW1lIGluIHNwYW4xKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYnVpbGREYXRlU3BhbkFwaShzcGFuLCBkYXRlRW52KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGRhdGVFbnYudG9EYXRlKHNwYW4ucmFuZ2Uuc3RhcnQpLFxuICAgICAgICBlbmQ6IGRhdGVFbnYudG9EYXRlKHNwYW4ucmFuZ2UuZW5kKSxcbiAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICBlbmRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2UuZW5kLCB7IG9taXRUaW1lOiBzcGFuLmFsbERheSB9KSxcbiAgICAgICAgYWxsRGF5OiBzcGFuLmFsbERheVxuICAgIH07XG59XG5mdW5jdGlvbiBidWlsZERhdGVQb2ludEFwaShzcGFuLCBkYXRlRW52KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoc3Bhbi5yYW5nZS5zdGFydCksXG4gICAgICAgIGRhdGVTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICBhbGxEYXk6IHNwYW4uYWxsRGF5XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZhYnJpY2F0ZUV2ZW50UmFuZ2UoZGF0ZVNwYW4sIGV2ZW50VWlCYXNlcywgY2FsZW5kYXIpIHtcbiAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZih7IGVkaXRhYmxlOiBmYWxzZSB9LCAnJywgLy8gc291cmNlSWRcbiAgICBkYXRlU3Bhbi5hbGxEYXksIHRydWUsIC8vIGhhc0VuZFxuICAgIGNhbGVuZGFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWY6IGRlZixcbiAgICAgICAgdWk6IGNvbXBpbGVFdmVudFVpKGRlZiwgZXZlbnRVaUJhc2VzKSxcbiAgICAgICAgaW5zdGFuY2U6IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCBkYXRlU3Bhbi5yYW5nZSksXG4gICAgICAgIHJhbmdlOiBkYXRlU3Bhbi5yYW5nZSxcbiAgICAgICAgaXNTdGFydDogdHJ1ZSxcbiAgICAgICAgaXNFbmQ6IHRydWVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlVmlld0RlZnMoZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgIHZhciBoYXNoID0ge307XG4gICAgdmFyIHZpZXdUeXBlO1xuICAgIGZvciAodmlld1R5cGUgaW4gZGVmYXVsdENvbmZpZ3MpIHtcbiAgICAgICAgZW5zdXJlVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgfVxuICAgIGZvciAodmlld1R5cGUgaW4gb3ZlcnJpZGVDb25maWdzKSB7XG4gICAgICAgIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpIHtcbiAgICBpZiAoaGFzaFt2aWV3VHlwZV0pIHtcbiAgICAgICAgcmV0dXJuIGhhc2hbdmlld1R5cGVdO1xuICAgIH1cbiAgICB2YXIgdmlld0RlZiA9IGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgaWYgKHZpZXdEZWYpIHtcbiAgICAgICAgaGFzaFt2aWV3VHlwZV0gPSB2aWV3RGVmO1xuICAgIH1cbiAgICByZXR1cm4gdmlld0RlZjtcbn1cbmZ1bmN0aW9uIGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgIHZhciBkZWZhdWx0Q29uZmlnID0gZGVmYXVsdENvbmZpZ3Nbdmlld1R5cGVdO1xuICAgIHZhciBvdmVycmlkZUNvbmZpZyA9IG92ZXJyaWRlQ29uZmlnc1t2aWV3VHlwZV07XG4gICAgdmFyIHF1ZXJ5UHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAoZGVmYXVsdENvbmZpZyAmJiBkZWZhdWx0Q29uZmlnW25hbWVdICE9PSBudWxsKSA/IGRlZmF1bHRDb25maWdbbmFtZV0gOlxuICAgICAgICAgICAgKChvdmVycmlkZUNvbmZpZyAmJiBvdmVycmlkZUNvbmZpZ1tuYW1lXSAhPT0gbnVsbCkgPyBvdmVycmlkZUNvbmZpZ1tuYW1lXSA6IG51bGwpO1xuICAgIH07XG4gICAgdmFyIHRoZUNsYXNzID0gcXVlcnlQcm9wKCdjbGFzcycpO1xuICAgIHZhciBzdXBlclR5cGUgPSBxdWVyeVByb3AoJ3N1cGVyVHlwZScpO1xuICAgIGlmICghc3VwZXJUeXBlICYmIHRoZUNsYXNzKSB7XG4gICAgICAgIHN1cGVyVHlwZSA9XG4gICAgICAgICAgICBmaW5kVmlld05hbWVCeVN1YmNsYXNzKHRoZUNsYXNzLCBvdmVycmlkZUNvbmZpZ3MpIHx8XG4gICAgICAgICAgICAgICAgZmluZFZpZXdOYW1lQnlTdWJjbGFzcyh0aGVDbGFzcywgZGVmYXVsdENvbmZpZ3MpO1xuICAgIH1cbiAgICB2YXIgc3VwZXJEZWYgPSBudWxsO1xuICAgIGlmIChzdXBlclR5cGUpIHtcbiAgICAgICAgaWYgKHN1cGVyVHlwZSA9PT0gdmlld1R5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBoYXZlIGEgY3VzdG9tIHZpZXcgdHlwZSB0aGF0IHJlZmVyZW5jZXMgaXRzZWxmJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXJEZWYgPSBlbnN1cmVWaWV3RGVmKHN1cGVyVHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgfVxuICAgIGlmICghdGhlQ2xhc3MgJiYgc3VwZXJEZWYpIHtcbiAgICAgICAgdGhlQ2xhc3MgPSBzdXBlckRlZi5jbGFzcztcbiAgICB9XG4gICAgaWYgKCF0aGVDbGFzcykge1xuICAgICAgICByZXR1cm4gbnVsbDsgLy8gZG9uJ3QgdGhyb3cgYSB3YXJuaW5nLCBtaWdodCBiZSBzZXR0aW5ncyBmb3IgYSBzaW5nbGUtdW5pdCB2aWV3XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHZpZXdUeXBlLFxuICAgICAgICBjbGFzczogdGhlQ2xhc3MsXG4gICAgICAgIGRlZmF1bHRzOiBfX2Fzc2lnbih7fSwgKHN1cGVyRGVmID8gc3VwZXJEZWYuZGVmYXVsdHMgOiB7fSksIChkZWZhdWx0Q29uZmlnID8gZGVmYXVsdENvbmZpZy5vcHRpb25zIDoge30pKSxcbiAgICAgICAgb3ZlcnJpZGVzOiBfX2Fzc2lnbih7fSwgKHN1cGVyRGVmID8gc3VwZXJEZWYub3ZlcnJpZGVzIDoge30pLCAob3ZlcnJpZGVDb25maWcgPyBvdmVycmlkZUNvbmZpZy5vcHRpb25zIDoge30pKVxuICAgIH07XG59XG5mdW5jdGlvbiBmaW5kVmlld05hbWVCeVN1YmNsYXNzKHZpZXdTdWJjbGFzcywgY29uZmlncykge1xuICAgIHZhciBzdXBlclByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZpZXdTdWJjbGFzcy5wcm90b3R5cGUpO1xuICAgIGZvciAodmFyIHZpZXdUeXBlIGluIGNvbmZpZ3MpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IGNvbmZpZ3Nbdmlld1R5cGVdO1xuICAgICAgICAvLyBuZWVkIERJUkVDVCBzdWJjbGFzcywgc28gaW5zdGFuY2VvZiB3b24ndCBkbyBpdFxuICAgICAgICBpZiAocGFyc2VkLmNsYXNzICYmIHBhcnNlZC5jbGFzcy5wcm90b3R5cGUgPT09IHN1cGVyUHJvdG8pIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3VHlwZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmlld0NvbmZpZ3MoaW5wdXRzKSB7XG4gICAgcmV0dXJuIG1hcEhhc2goaW5wdXRzLCBwYXJzZVZpZXdDb25maWcpO1xufVxudmFyIFZJRVdfREVGX1BST1BTID0ge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjbGFzczogbnVsbFxufTtcbmZ1bmN0aW9uIHBhcnNlVmlld0NvbmZpZyhpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW5wdXQgPSB7IGNsYXNzOiBpbnB1dCB9O1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKGlucHV0LCBWSUVXX0RFRl9QUk9QUywge30sIG9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1cGVyVHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgY2xhc3M6IHByb3BzLmNsYXNzLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRWaWV3U3BlY3MoZGVmYXVsdElucHV0cywgb3B0aW9uc01hbmFnZXIpIHtcbiAgICB2YXIgZGVmYXVsdENvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKGRlZmF1bHRJbnB1dHMpO1xuICAgIHZhciBvdmVycmlkZUNvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKG9wdGlvbnNNYW5hZ2VyLm92ZXJyaWRlcy52aWV3cyk7XG4gICAgdmFyIHZpZXdEZWZzID0gY29tcGlsZVZpZXdEZWZzKGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgIHJldHVybiBtYXBIYXNoKHZpZXdEZWZzLCBmdW5jdGlvbiAodmlld0RlZikge1xuICAgICAgICByZXR1cm4gYnVpbGRWaWV3U3BlYyh2aWV3RGVmLCBvdmVycmlkZUNvbmZpZ3MsIG9wdGlvbnNNYW5hZ2VyKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGJ1aWxkVmlld1NwZWModmlld0RlZiwgb3ZlcnJpZGVDb25maWdzLCBvcHRpb25zTWFuYWdlcikge1xuICAgIHZhciBkdXJhdGlvbklucHV0ID0gdmlld0RlZi5vdmVycmlkZXMuZHVyYXRpb24gfHxcbiAgICAgICAgdmlld0RlZi5kZWZhdWx0cy5kdXJhdGlvbiB8fFxuICAgICAgICBvcHRpb25zTWFuYWdlci5keW5hbWljT3ZlcnJpZGVzLmR1cmF0aW9uIHx8XG4gICAgICAgIG9wdGlvbnNNYW5hZ2VyLm92ZXJyaWRlcy5kdXJhdGlvbjtcbiAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgIHZhciBkdXJhdGlvblVuaXQgPSAnJztcbiAgICB2YXIgc2luZ2xlVW5pdCA9ICcnO1xuICAgIHZhciBzaW5nbGVVbml0T3ZlcnJpZGVzID0ge307XG4gICAgaWYgKGR1cmF0aW9uSW5wdXQpIHtcbiAgICAgICAgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihkdXJhdGlvbklucHV0KTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7IC8vIHZhbGlkP1xuICAgICAgICAgICAgdmFyIGRlbm9tID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGR1cmF0aW9uLCAhZ2V0V2Vla3NGcm9tSW5wdXQoZHVyYXRpb25JbnB1dCkpO1xuICAgICAgICAgICAgZHVyYXRpb25Vbml0ID0gZGVub20udW5pdDtcbiAgICAgICAgICAgIGlmIChkZW5vbS52YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHNpbmdsZVVuaXQgPSBkdXJhdGlvblVuaXQ7XG4gICAgICAgICAgICAgICAgc2luZ2xlVW5pdE92ZXJyaWRlcyA9IG92ZXJyaWRlQ29uZmlnc1tkdXJhdGlvblVuaXRdID8gb3ZlcnJpZGVDb25maWdzW2R1cmF0aW9uVW5pdF0ub3B0aW9ucyA6IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBxdWVyeUJ1dHRvblRleHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgYnV0dG9uVGV4dE1hcCA9IG9wdGlvbnMuYnV0dG9uVGV4dCB8fCB7fTtcbiAgICAgICAgdmFyIGJ1dHRvblRleHRLZXkgPSB2aWV3RGVmLmRlZmF1bHRzLmJ1dHRvblRleHRLZXk7XG4gICAgICAgIGlmIChidXR0b25UZXh0S2V5ICE9IG51bGwgJiYgYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBidXR0b25UZXh0TWFwW3ZpZXdEZWYudHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHZpZXdEZWYudHlwZSxcbiAgICAgICAgY2xhc3M6IHZpZXdEZWYuY2xhc3MsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25Vbml0OiBkdXJhdGlvblVuaXQsXG4gICAgICAgIHNpbmdsZVVuaXQ6IHNpbmdsZVVuaXQsXG4gICAgICAgIG9wdGlvbnM6IF9fYXNzaWduKHt9LCBnbG9iYWxEZWZhdWx0cywgdmlld0RlZi5kZWZhdWx0cywgb3B0aW9uc01hbmFnZXIuZGlyRGVmYXVsdHMsIG9wdGlvbnNNYW5hZ2VyLmxvY2FsZURlZmF1bHRzLCBvcHRpb25zTWFuYWdlci5vdmVycmlkZXMsIHNpbmdsZVVuaXRPdmVycmlkZXMsIHZpZXdEZWYub3ZlcnJpZGVzLCBvcHRpb25zTWFuYWdlci5keW5hbWljT3ZlcnJpZGVzKSxcbiAgICAgICAgYnV0dG9uVGV4dE92ZXJyaWRlOiBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIuZHluYW1pY092ZXJyaWRlcykgfHxcbiAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25zTWFuYWdlci5vdmVycmlkZXMpIHx8IC8vIGNvbnN0cnVjdG9yLXNwZWNpZmllZCBidXR0b25UZXh0IGxvb2t1cCBoYXNoIHRha2VzIHByZWNlZGVuY2VcbiAgICAgICAgICAgIHZpZXdEZWYub3ZlcnJpZGVzLmJ1dHRvblRleHQsXG4gICAgICAgIGJ1dHRvblRleHREZWZhdWx0OiBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIubG9jYWxlRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIuZGlyRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICB2aWV3RGVmLmRlZmF1bHRzLmJ1dHRvblRleHQgfHxcbiAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChnbG9iYWxEZWZhdWx0cykgfHxcbiAgICAgICAgICAgIHZpZXdEZWYudHlwZSAvLyBmYWxsIGJhY2sgdG8gZ2l2ZW4gdmlldyBuYW1lXG4gICAgfTtcbn1cblxudmFyIFRvb2xiYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvb2xiYXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVG9vbGJhcihjb250ZXh0LCBleHRyYUNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmVuZGVyTGF5b3V0ID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJMYXlvdXQsIF90aGlzLnVucmVuZGVyTGF5b3V0KTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVRpdGxlID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVUaXRsZSwgbnVsbCwgW190aGlzLl9yZW5kZXJMYXlvdXRdKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZUJ1dHRvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlQWN0aXZlQnV0dG9uLCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICBfdGhpcy5fdXBkYXRlVG9kYXkgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZVRvZGF5LCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICBfdGhpcy5fdXBkYXRlUHJldiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlUHJldiwgbnVsbCwgW190aGlzLl9yZW5kZXJMYXlvdXRdKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZU5leHQgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZU5leHQsIG51bGwsIFtfdGhpcy5fcmVuZGVyTGF5b3V0XSk7XG4gICAgICAgIF90aGlzLmVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy10b29sYmFyICcgKyBleHRyYUNsYXNzTmFtZSB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUb29sYmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyTGF5b3V0LnVucmVuZGVyKCk7IC8vIHNob3VsZCB1bnJlbmRlciBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLl9yZW5kZXJMYXlvdXQocHJvcHMubGF5b3V0KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVGl0bGUocHJvcHMudGl0bGUpO1xuICAgICAgICB0aGlzLl91cGRhdGVBY3RpdmVCdXR0b24ocHJvcHMuYWN0aXZlQnV0dG9uKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVG9kYXkocHJvcHMuaXNUb2RheUVuYWJsZWQpO1xuICAgICAgICB0aGlzLl91cGRhdGVQcmV2KHByb3BzLmlzUHJldkVuYWJsZWQpO1xuICAgICAgICB0aGlzLl91cGRhdGVOZXh0KHByb3BzLmlzTmV4dEVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUucmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKGxheW91dCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB0aGlzLnZpZXdzV2l0aEJ1dHRvbnMgPSBbXTtcbiAgICAgICAgYXBwZW5kVG9FbGVtZW50KGVsLCB0aGlzLnJlbmRlclNlY3Rpb24oJ2xlZnQnLCBsYXlvdXQubGVmdCkpO1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbignY2VudGVyJywgbGF5b3V0LmNlbnRlcikpO1xuICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbigncmlnaHQnLCBsYXlvdXQucmlnaHQpKTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnVucmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9ICcnO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUucmVuZGVyU2VjdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgYnV0dG9uU3RyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHRoZW1lID0gX2EudGhlbWUsIGNhbGVuZGFyID0gX2EuY2FsZW5kYXI7XG4gICAgICAgIHZhciBvcHRpb25zTWFuYWdlciA9IGNhbGVuZGFyLm9wdGlvbnNNYW5hZ2VyO1xuICAgICAgICB2YXIgdmlld1NwZWNzID0gY2FsZW5kYXIudmlld1NwZWNzO1xuICAgICAgICB2YXIgc2VjdGlvbkVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy0nICsgcG9zaXRpb24gfSk7XG4gICAgICAgIHZhciBjYWxlbmRhckN1c3RvbUJ1dHRvbnMgPSBvcHRpb25zTWFuYWdlci5jb21wdXRlZC5jdXN0b21CdXR0b25zIHx8IHt9O1xuICAgICAgICB2YXIgY2FsZW5kYXJCdXR0b25UZXh0T3ZlcnJpZGVzID0gb3B0aW9uc01hbmFnZXIub3ZlcnJpZGVzLmJ1dHRvblRleHQgfHwge307XG4gICAgICAgIHZhciBjYWxlbmRhckJ1dHRvblRleHQgPSBvcHRpb25zTWFuYWdlci5jb21wdXRlZC5idXR0b25UZXh0IHx8IHt9O1xuICAgICAgICBpZiAoYnV0dG9uU3RyKSB7XG4gICAgICAgICAgICBidXR0b25TdHIuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25Hcm91cFN0ciwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBncm91cENoaWxkcmVuID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGlzT25seUJ1dHRvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBncm91cEVsO1xuICAgICAgICAgICAgICAgIGJ1dHRvbkdyb3VwU3RyLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uTmFtZSwgaikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VzdG9tQnV0dG9uUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3U3BlYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkNsaWNrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uSWNvbjsgLy8gb25seSBvbmUgb2YgdGhlc2Ugd2lsbCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvblRleHQ7IC8vIFwiXG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25Jbm5lckh0bWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25DbGFzc2VzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uRWw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25BcmlhQXR0cjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbk5hbWUgPT09ICd0aXRsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChodG1sVG9FbGVtZW50KCc8aDI+Jm5ic3A7PC9oMj4nKSk7IC8vIHdlIGFsd2F5cyB3YW50IGl0IHRvIHRha2UgdXAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICBpc09ubHlCdXR0b25zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGN1c3RvbUJ1dHRvblByb3BzID0gY2FsZW5kYXJDdXN0b21CdXR0b25zW2J1dHRvbk5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21CdXR0b25Qcm9wcy5jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQnV0dG9uUHJvcHMuY2xpY2suY2FsbChidXR0b25FbCwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyhjdXN0b21CdXR0b25Qcm9wcykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGN1c3RvbUJ1dHRvblByb3BzLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHZpZXdTcGVjID0gdmlld1NwZWNzW2J1dHRvbk5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdzV2l0aEJ1dHRvbnMucHVzaChidXR0b25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuY2hhbmdlVmlldyhidXR0b25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25UZXh0ID0gdmlld1NwZWMuYnV0dG9uVGV4dE92ZXJyaWRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEljb25DbGFzcyhidXR0b25OYW1lKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSB2aWV3U3BlYy5idXR0b25UZXh0RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYWxlbmRhcltidXR0b25OYW1lXSkgeyAvLyBhIGNhbGVuZGFyIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhcltidXR0b25OYW1lXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSBjYWxlbmRhckJ1dHRvblRleHRPdmVycmlkZXNbYnV0dG9uTmFtZV0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGNhbGVuZGFyQnV0dG9uVGV4dFtidXR0b25OYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBeIGV2ZXJ5dGhpbmcgZWxzZSBpcyBjb25zaWRlcmVkIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsYXNzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYy0nICsgYnV0dG9uTmFtZSArICctYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWUuZ2V0Q2xhc3MoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25Jbm5lckh0bWwgPSBodG1sRXNjYXBlKGJ1dHRvblRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25BcmlhQXR0ciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b25JY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbklubmVySHRtbCA9IFwiPHNwYW4gY2xhc3M9J1wiICsgYnV0dG9uSWNvbiArIFwiJz48L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkFyaWFBdHRyID0gJyBhcmlhLWxhYmVsPVwiJyArIGJ1dHRvbk5hbWUgKyAnXCInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25FbCA9IGh0bWxUb0VsZW1lbnQoLy8gdHlwZT1cImJ1dHRvblwiIHNvIHRoYXQgaXQgZG9lc24ndCBzdWJtaXQgYSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJyArIGJ1dHRvbkNsYXNzZXMuam9pbignICcpICsgJ1wiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkFyaWFBdHRyICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4nICsgYnV0dG9uSW5uZXJIdG1sICsgJzwvYnV0dG9uPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9uQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChidXR0b25FbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBDaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkdyb3VwQ2xhc3NOYW1lID0gdGhlbWUuZ2V0Q2xhc3MoJ2J1dHRvbkdyb3VwJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09ubHlCdXR0b25zICYmIGJ1dHRvbkdyb3VwQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEVsLmNsYXNzTGlzdC5hZGQoYnV0dG9uR3JvdXBDbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudChncm91cEVsLCBncm91cENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbkVsLmFwcGVuZENoaWxkKGdyb3VwRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHNlY3Rpb25FbCwgZ3JvdXBDaGlsZHJlbik7IC8vIDEgb3IgMCBjaGlsZHJlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWN0aW9uRWw7XG4gICAgfTtcbiAgICBUb29sYmFyLnByb3RvdHlwZS51cGRhdGVUb2RheSA9IGZ1bmN0aW9uIChpc1RvZGF5RW5hYmxlZCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbkVuYWJsZWQoJ3RvZGF5JywgaXNUb2RheUVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlUHJldiA9IGZ1bmN0aW9uIChpc1ByZXZFbmFibGVkKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRW5hYmxlZCgncHJldicsIGlzUHJldkVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlTmV4dCA9IGZ1bmN0aW9uIChpc05leHRFbmFibGVkKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRW5hYmxlZCgnbmV4dCcsIGlzTmV4dEVuYWJsZWQpO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlVGl0bGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICBmaW5kRWxlbWVudHModGhpcy5lbCwgJ2gyJykuZm9yRWFjaChmdW5jdGlvbiAodGl0bGVFbCkge1xuICAgICAgICAgICAgdGl0bGVFbC5pbm5lclRleHQgPSB0ZXh0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZUFjdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIChidXR0b25OYW1lKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnRoZW1lLmdldENsYXNzKCdidXR0b25BY3RpdmUnKTtcbiAgICAgICAgZmluZEVsZW1lbnRzKHRoaXMuZWwsICdidXR0b24nKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25FbCkge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbk5hbWUgJiYgYnV0dG9uRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy0nICsgYnV0dG9uTmFtZSArICctYnV0dG9uJykpIHtcbiAgICAgICAgICAgICAgICBidXR0b25FbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidXR0b25FbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVG9vbGJhci5wcm90b3R5cGUudG9nZ2xlQnV0dG9uRW5hYmxlZCA9IGZ1bmN0aW9uIChidXR0b25OYW1lLCBib29sKSB7XG4gICAgICAgIGZpbmRFbGVtZW50cyh0aGlzLmVsLCAnLmZjLScgKyBidXR0b25OYW1lICsgJy1idXR0b24nKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25FbCkge1xuICAgICAgICAgICAgYnV0dG9uRWwuZGlzYWJsZWQgPSAhYm9vbDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gVG9vbGJhcjtcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBDYWxlbmRhckNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2FsZW5kYXJDb21wb25lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2FsZW5kYXJDb21wb25lbnQoY29udGV4dCwgZWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3JlbmRlclRvb2xiYXJzID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJUb29sYmFycyk7XG4gICAgICAgIF90aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMgPSBtZW1vaXplKGJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMpO1xuICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICBwcmVwZW5kVG9FbGVtZW50KGVsLCBfdGhpcy5jb250ZW50RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLXZpZXctY29udGFpbmVyJyB9KSk7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IF90aGlzLmNhbGVuZGFyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLnZpZXdDb250YWluZXJNb2RpZmllcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbW9kaWZ5Vmlld0NvbnRhaW5lciA9IF9hW19pXTtcbiAgICAgICAgICAgIG1vZGlmeVZpZXdDb250YWluZXIoX3RoaXMuY29udGVudEVsLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMudG9nZ2xlRWxDbGFzc05hbWVzKHRydWUpO1xuICAgICAgICBfdGhpcy5jb21wdXRlVGl0bGUgPSBtZW1vaXplKGNvbXB1dGVUaXRsZSk7XG4gICAgICAgIF90aGlzLnBhcnNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VCdXNpbmVzc0hvdXJzKGlucHV0LCBfdGhpcy5jYWxlbmRhcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mb290ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5jb250ZW50RWwpO1xuICAgICAgICB0aGlzLnRvZ2dsZUVsQ2xhc3NOYW1lcyhmYWxzZSk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnRvZ2dsZUVsQ2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHZhciBjbGFzc0xpc3QgPSB0aGlzLmVsLmNsYXNzTGlzdDtcbiAgICAgICAgdmFyIGRpckNsYXNzTmFtZSA9ICdmYy0nICsgdGhpcy5vcHQoJ2RpcicpO1xuICAgICAgICB2YXIgdGhlbWVDbGFzc05hbWUgPSB0aGlzLnRoZW1lLmdldENsYXNzKCd3aWRnZXQnKTtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZjJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKGRpckNsYXNzTmFtZSk7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoZW1lQ2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2ZjJyk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGRpckNsYXNzTmFtZSk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoZW1lQ2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLmZyZWV6ZUhlaWdodCgpO1xuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmNvbXB1dGVUaXRsZShwcm9wcy5kYXRlUHJvZmlsZSwgcHJvcHMudmlld1NwZWMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3JlbmRlclRvb2xiYXJzKHByb3BzLnZpZXdTcGVjLCBwcm9wcy5kYXRlUHJvZmlsZSwgcHJvcHMuY3VycmVudERhdGUsIHByb3BzLmRhdGVQcm9maWxlR2VuZXJhdG9yLCB0aXRsZSk7XG4gICAgICAgIHRoaXMucmVuZGVyVmlldyhwcm9wcywgdGl0bGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgdGhpcy50aGF3SGVpZ2h0KCk7XG4gICAgfTtcbiAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyVG9vbGJhcnMgPSBmdW5jdGlvbiAodmlld1NwZWMsIGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSwgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHRpdGxlKSB7XG4gICAgICAgIHZhciBoZWFkZXJMYXlvdXQgPSB0aGlzLm9wdCgnaGVhZGVyJyk7XG4gICAgICAgIHZhciBmb290ZXJMYXlvdXQgPSB0aGlzLm9wdCgnZm9vdGVyJyk7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLmNhbGVuZGFyLmdldE5vdygpO1xuICAgICAgICB2YXIgdG9kYXlJbmZvID0gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGQobm93KTtcbiAgICAgICAgdmFyIHByZXZJbmZvID0gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGRQcmV2KGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSk7XG4gICAgICAgIHZhciBuZXh0SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkTmV4dChkYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICB2YXIgdG9vbGJhclByb3BzID0ge1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uOiB2aWV3U3BlYy50eXBlLFxuICAgICAgICAgICAgaXNUb2RheUVuYWJsZWQ6IHRvZGF5SW5mby5pc1ZhbGlkICYmICFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgbm93KSxcbiAgICAgICAgICAgIGlzUHJldkVuYWJsZWQ6IHByZXZJbmZvLmlzVmFsaWQsXG4gICAgICAgICAgICBpc05leHRFbmFibGVkOiBuZXh0SW5mby5pc1ZhbGlkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChoZWFkZXJMYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlciA9IG5ldyBUb29sYmFyKHRoaXMuY29udGV4dCwgJ2ZjLWhlYWRlci10b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgcHJlcGVuZFRvRWxlbWVudCh0aGlzLmVsLCB0aGlzLmhlYWRlci5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhlYWRlci5yZWNlaXZlUHJvcHMoX19hc3NpZ24oeyBsYXlvdXQ6IGhlYWRlckxheW91dCB9LCB0b29sYmFyUHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb290ZXJMYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5mb290ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvb3RlciA9IG5ldyBUb29sYmFyKHRoaXMuY29udGV4dCwgJ2ZjLWZvb3Rlci10b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHRoaXMuZWwsIHRoaXMuZm9vdGVyLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9vdGVyLnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7IGxheW91dDogZm9vdGVyTGF5b3V0IH0sIHRvb2xiYXJQcm9wcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZm9vdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmZvb3Rlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmZvb3RlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJWaWV3ID0gZnVuY3Rpb24gKHByb3BzLCB0aXRsZSkge1xuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgdmFyIHZpZXdTcGVjID0gcHJvcHMudmlld1NwZWMsIGRhdGVQcm9maWxlR2VuZXJhdG9yID0gcHJvcHMuZGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG4gICAgICAgIGlmICghdmlldyB8fCB2aWV3LnZpZXdTcGVjICE9PSB2aWV3U3BlYykge1xuICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLnZpZXcgPSBuZXcgdmlld1NwZWNbJ2NsYXNzJ10oe1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyOiB0aGlzLmNhbGVuZGFyLFxuICAgICAgICAgICAgICAgIHZpZXc6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0ZUVudjogdGhpcy5kYXRlRW52LFxuICAgICAgICAgICAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHZpZXdTcGVjLm9wdGlvbnNcbiAgICAgICAgICAgIH0sIHZpZXdTcGVjLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgdGhpcy5jb250ZW50RWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmlldy5hZGRTY3JvbGwodmlldy5xdWVyeVNjcm9sbCgpKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3LnRpdGxlID0gdGl0bGU7IC8vIGZvciB0aGUgQVBJXG4gICAgICAgIHZhciB2aWV3UHJvcHMgPSB7XG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJzOiB0aGlzLnBhcnNlQnVzaW5lc3NIb3Vycyh2aWV3U3BlYy5vcHRpb25zLmJ1c2luZXNzSG91cnMpLFxuICAgICAgICAgICAgZXZlbnRTdG9yZTogcHJvcHMuZXZlbnRTdG9yZSxcbiAgICAgICAgICAgIGV2ZW50VWlCYXNlczogcHJvcHMuZXZlbnRVaUJhc2VzLFxuICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcHJvcHMuZGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLFxuICAgICAgICAgICAgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplXG4gICAgICAgIH07XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lcnMgPSB0aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnModGhpcy5jYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3Mudmlld1Byb3BzVHJhbnNmb3JtZXJzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB0cmFuc2Zvcm1lcnNfMSA9IHRyYW5zZm9ybWVyczsgX2kgPCB0cmFuc2Zvcm1lcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyc18xW19pXTtcbiAgICAgICAgICAgIF9fYXNzaWduKHZpZXdQcm9wcywgdHJhbnNmb3JtZXIudHJhbnNmb3JtKHZpZXdQcm9wcywgdmlld1NwZWMsIHByb3BzLCB2aWV3KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5yZWNlaXZlUHJvcHModmlld1Byb3BzKTtcbiAgICB9O1xuICAgIC8vIFNpemluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUpIHtcbiAgICAgICAgaWYgKGlzUmVzaXplID09PSB2b2lkIDApIHsgaXNSZXNpemUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgaWYgKGlzUmVzaXplKSB7XG4gICAgICAgICAgICB2aWV3LmFkZFNjcm9sbCh2aWV3LnF1ZXJ5U2Nyb2xsKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Jlc2l6ZSB8fCB0aGlzLmlzSGVpZ2h0QXV0byA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVIZWlnaHRWYXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy51cGRhdGVTaXplKGlzUmVzaXplLCB0aGlzLnZpZXdIZWlnaHQsIHRoaXMuaXNIZWlnaHRBdXRvKTtcbiAgICAgICAgdmlldy51cGRhdGVOb3dJbmRpY2F0b3IoKTsgLy8gd2UgbmVlZCB0byBndWFyYW50ZWUgdGhpcyB3aWxsIHJ1biBhZnRlciB1cGRhdGVTaXplXG4gICAgICAgIHZpZXcucG9wU2Nyb2xsKGlzUmVzaXplKTtcbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5jb21wdXRlSGVpZ2h0VmFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gdGhpcy5jYWxlbmRhcjsgLy8geXVjay4gbmVlZCB0byBoYW5kbGUgZHluYW1pYyBvcHRpb25zXG4gICAgICAgIHZhciBoZWlnaHRJbnB1dCA9IGNhbGVuZGFyLm9wdCgnaGVpZ2h0Jyk7XG4gICAgICAgIHZhciBjb250ZW50SGVpZ2h0SW5wdXQgPSBjYWxlbmRhci5vcHQoJ2NvbnRlbnRIZWlnaHQnKTtcbiAgICAgICAgdGhpcy5pc0hlaWdodEF1dG8gPSBoZWlnaHRJbnB1dCA9PT0gJ2F1dG8nIHx8IGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ2F1dG8nO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ251bWJlcicpIHsgLy8gZXhpc3RzIGFuZCBub3QgJ2F1dG8nXG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBjb250ZW50SGVpZ2h0SW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGlzdHMgYW5kIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGNvbnRlbnRIZWlnaHRJbnB1dCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBoZWlnaHRJbnB1dCA9PT0gJ251bWJlcicpIHsgLy8gZXhpc3RzIGFuZCBub3QgJ2F1dG8nXG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBoZWlnaHRJbnB1dCAtIHRoaXMucXVlcnlUb29sYmFyc0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBoZWlnaHRJbnB1dCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGlzdHMgYW5kIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGhlaWdodElucHV0KCkgLSB0aGlzLnF1ZXJ5VG9vbGJhcnNIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoZWlnaHRJbnB1dCA9PT0gJ3BhcmVudCcpIHsgLy8gc2V0IHRvIGhlaWdodCBvZiBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdGhpcy5lbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gcGFyZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gdGhpcy5xdWVyeVRvb2xiYXJzSGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuY29udGVudEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC9cbiAgICAgICAgICAgICAgICBNYXRoLm1heChjYWxlbmRhci5vcHQoJ2FzcGVjdFJhdGlvJyksIC41KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5xdWVyeVRvb2xiYXJzSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyKSB7XG4gICAgICAgICAgICBoZWlnaHQgKz0gY29tcHV0ZUhlaWdodEFuZE1hcmdpbnModGhpcy5oZWFkZXIuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgaGVpZ2h0ICs9IGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKHRoaXMuZm9vdGVyLmVsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG4gICAgLy8gSGVpZ2h0IFwiRnJlZXppbmdcIlxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLmZyZWV6ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmVsLCB7XG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnRoYXdIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFwcGx5U3R5bGUodGhpcy5lbCwge1xuICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnJ1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDYWxlbmRhckNvbXBvbmVudDtcbn0oQ29tcG9uZW50KSk7XG4vLyBUaXRsZSBhbmQgRGF0ZSBGb3JtYXR0aW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ29tcHV0ZXMgd2hhdCB0aGUgdGl0bGUgYXQgdGhlIHRvcCBvZiB0aGUgY2FsZW5kYXIgc2hvdWxkIGJlIGZvciB0aGlzIHZpZXdcbmZ1bmN0aW9uIGNvbXB1dGVUaXRsZShkYXRlUHJvZmlsZSwgdmlld09wdGlvbnMpIHtcbiAgICB2YXIgcmFuZ2U7XG4gICAgLy8gZm9yIHZpZXdzIHRoYXQgc3BhbiBhIGxhcmdlIHVuaXQgb2YgdGltZSwgc2hvdyB0aGUgcHJvcGVyIGludGVydmFsLCBpZ25vcmluZyBzdHJheSBkYXlzIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICBpZiAoL14oeWVhcnxtb250aCkkLy50ZXN0KGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpKSB7XG4gICAgICAgIHJhbmdlID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlO1xuICAgIH1cbiAgICBlbHNlIHsgLy8gZm9yIGRheSB1bml0cyBvciBzbWFsbGVyLCB1c2UgdGhlIGFjdHVhbCBkYXkgcmFuZ2VcbiAgICAgICAgcmFuZ2UgPSBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0ZUVudi5mb3JtYXRSYW5nZShyYW5nZS5zdGFydCwgcmFuZ2UuZW5kLCBjcmVhdGVGb3JtYXR0ZXIodmlld09wdGlvbnMudGl0bGVGb3JtYXQgfHwgY29tcHV0ZVRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSwgdmlld09wdGlvbnMudGl0bGVSYW5nZVNlcGFyYXRvciksIHsgaXNFbmRFeGNsdXNpdmU6IGRhdGVQcm9maWxlLmlzUmFuZ2VBbGxEYXkgfSk7XG59XG4vLyBHZW5lcmF0ZXMgdGhlIGZvcm1hdCBzdHJpbmcgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdGl0bGUgZm9yIHRoZSBjdXJyZW50IGRhdGUgcmFuZ2UuXG4vLyBBdHRlbXB0cyB0byBjb21wdXRlIHRoZSBtb3N0IGFwcHJvcHJpYXRlIGZvcm1hdCBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgd2l0aCBgdGl0bGVGb3JtYXRgLlxuZnVuY3Rpb24gY29tcHV0ZVRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZVVuaXQgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0O1xuICAgIGlmIChjdXJyZW50UmFuZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnJlbnRSYW5nZVVuaXQgPT09ICdtb250aCcpIHtcbiAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnIH07IC8vIGxpa2UgXCJTZXB0ZW1iZXIgMjAxNFwiXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZGF5cyA9IGRpZmZXaG9sZURheXMoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0LCBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UuZW5kKTtcbiAgICAgICAgaWYgKGRheXMgIT09IG51bGwgJiYgZGF5cyA+IDEpIHtcbiAgICAgICAgICAgIC8vIG11bHRpLWRheSByYW5nZS4gc2hvcnRlciwgbGlrZSBcIlNlcCA5IC0gMTAgMjAxNFwiXG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb25lIGRheS4gbG9uZ2VyLCBsaWtlIFwiU2VwdGVtYmVyIDkgMjAxNFwiXG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH07XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBQbHVnaW5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBidWlsZFZpZXdQcm9wVHJhbnNmb3JtZXJzKHRoZUNsYXNzZXMpIHtcbiAgICByZXR1cm4gdGhlQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKHRoZUNsYXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhlQ2xhc3MoKTtcbiAgICB9KTtcbn1cblxudmFyIEludGVyYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVyYWN0aW9uKHNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgIH1cbiAgICBJbnRlcmFjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBJbnRlcmFjdGlvbjtcbn0oKSk7XG5mdW5jdGlvbiBwYXJzZUludGVyYWN0aW9uU2V0dGluZ3MoY29tcG9uZW50LCBpbnB1dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICBlbDogaW5wdXQuZWwsXG4gICAgICAgIHVzZUV2ZW50Q2VudGVyOiBpbnB1dC51c2VFdmVudENlbnRlciAhPSBudWxsID8gaW5wdXQudXNlRXZlbnRDZW50ZXIgOiB0cnVlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlKHNldHRpbmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfYSA9IHt9LFxuICAgICAgICBfYVtzZXR0aW5ncy5jb21wb25lbnQudWlkXSA9IHNldHRpbmdzLFxuICAgICAgICBfYTtcbn1cbi8vIGdsb2JhbCBzdGF0ZVxudmFyIGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSA9IHt9O1xuXG4vKlxuRGV0ZWN0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBldmVudCB3aXRoaW4gYSBEYXRlQ29tcG9uZW50XG4qL1xudmFyIEV2ZW50Q2xpY2tpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZW50Q2xpY2tpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXZlbnRDbGlja2luZyhzZXR0aW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaGFuZGxlU2VnQ2xpY2sgPSBmdW5jdGlvbiAoZXYsIHNlZ0VsKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX3RoaXMuY29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIHNlZyA9IGdldEVsU2VnKHNlZ0VsKTtcbiAgICAgICAgICAgIGlmIChzZWcgJiYgLy8gbWlnaHQgYmUgdGhlIDxkaXY+IHN1cnJvdW5kaW5nIHRoZSBtb3JlIGxpbmtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgLy8gb3VyIHdheSB0byBzaW11bGF0ZSBhIGxpbmsgY2xpY2sgZm9yIGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgPGE+IHRhZ3NcbiAgICAgICAgICAgICAgICAvLyBncmFiIGJlZm9yZSB0cmlnZ2VyIGZpcmVkIGluIGNhc2UgdHJpZ2dlciB0cmFzaGVzIERPTSB0aHJ1IHJlcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgdmFyIGhhc1VybENvbnRhaW5lciA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgJy5mYy1oYXMtdXJsJyk7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGhhc1VybENvbnRhaW5lciA/IGhhc1VybENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdJykuaHJlZiA6ICcnO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50Q2xpY2snLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWdFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY29tcG9uZW50LmNhbGVuZGFyLCBzZWcuZXZlbnRSYW5nZS5kZWYsIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgIWV2LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICBfdGhpcy5kZXN0cm95ID0gbGlzdGVuQnlTZWxlY3Rvcihjb21wb25lbnQuZWwsICdjbGljaycsIGNvbXBvbmVudC5mZ1NlZ1NlbGVjdG9yICsgJywnICsgY29tcG9uZW50LmJnU2VnU2VsZWN0b3IsIF90aGlzLmhhbmRsZVNlZ0NsaWNrKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRDbGlja2luZztcbn0oSW50ZXJhY3Rpb24pKTtcblxuLypcblRyaWdnZXJzIGV2ZW50cyBhbmQgYWRkcy9yZW1vdmVzIGNvcmUgY2xhc3NOYW1lcyB3aGVuIHRoZSB1c2VyJ3MgcG9pbnRlclxuZW50ZXJzL2xlYXZlcyBldmVudC1lbGVtZW50cyBvZiBhIGNvbXBvbmVudC5cbiovXG52YXIgRXZlbnRIb3ZlcmluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRXZlbnRIb3ZlcmluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudEhvdmVyaW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAvLyBmb3Igc2ltdWxhdGluZyBhbiBldmVudE1vdXNlTGVhdmUgd2hlbiB0aGUgZXZlbnQgZWwgaXMgZGVzdHJveWVkIHdoaWxlIG1vdXNlIGlzIG92ZXIgaXRcbiAgICAgICAgX3RoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKGVsID09PSBfdGhpcy5jdXJyZW50U2VnRWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVTZWdMZWF2ZShudWxsLCBfdGhpcy5jdXJyZW50U2VnRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVTZWdFbnRlciA9IGZ1bmN0aW9uIChldiwgc2VnRWwpIHtcbiAgICAgICAgICAgIGlmIChnZXRFbFNlZyhzZWdFbCkpIHsgLy8gVE9ETzogYmV0dGVyIHdheSB0byBtYWtlIHN1cmUgbm90IGhvdmVyaW5nIG92ZXIgbW9yZSsgbGluayBvciBpdHMgd3JhcHBlclxuICAgICAgICAgICAgICAgIHNlZ0VsLmNsYXNzTGlzdC5hZGQoJ2ZjLWFsbG93LW1vdXNlLXJlc2l6ZScpO1xuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRTZWdFbCA9IHNlZ0VsO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJFdmVudCgnZXZlbnRNb3VzZUVudGVyJywgZXYsIHNlZ0VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlU2VnTGVhdmUgPSBmdW5jdGlvbiAoZXYsIHNlZ0VsKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudFNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgc2VnRWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtYWxsb3ctbW91c2UtcmVzaXplJyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFNlZ0VsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyRXZlbnQoJ2V2ZW50TW91c2VMZWF2ZScsIGV2LCBzZWdFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wb25lbnQgPSBzZXR0aW5ncy5jb21wb25lbnQ7XG4gICAgICAgIF90aGlzLnJlbW92ZUhvdmVyTGlzdGVuZXJzID0gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29tcG9uZW50LmVsLCBjb21wb25lbnQuZmdTZWdTZWxlY3RvciArICcsJyArIGNvbXBvbmVudC5iZ1NlZ1NlbGVjdG9yLCBfdGhpcy5oYW5kbGVTZWdFbnRlciwgX3RoaXMuaGFuZGxlU2VnTGVhdmUpO1xuICAgICAgICBjb21wb25lbnQuY2FsZW5kYXIub24oJ2V2ZW50RWxSZW1vdmUnLCBfdGhpcy5oYW5kbGVFdmVudEVsUmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUhvdmVyTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LmNhbGVuZGFyLm9mZignZXZlbnRFbFJlbW92ZScsIHRoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSk7XG4gICAgfTtcbiAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS50cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiAocHVibGljRXZOYW1lLCBldiwgc2VnRWwpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50O1xuICAgICAgICB2YXIgc2VnID0gZ2V0RWxTZWcoc2VnRWwpO1xuICAgICAgICBpZiAoIWV2IHx8IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5wdWJsaWNseVRyaWdnZXIocHVibGljRXZOYW1lLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbDogc2VnRWwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkodGhpcy5jb21wb25lbnQuY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50SG92ZXJpbmc7XG59KEludGVyYWN0aW9uKSk7XG5cbnZhciBTdGFuZGFyZFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGFuZGFyZFRoZW1lLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YW5kYXJkVGhlbWUoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN0YW5kYXJkVGhlbWU7XG59KFRoZW1lKSk7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5jbGFzc2VzID0ge1xuICAgIHdpZGdldDogJ2ZjLXVudGhlbWVkJyxcbiAgICB3aWRnZXRIZWFkZXI6ICdmYy13aWRnZXQtaGVhZGVyJyxcbiAgICB3aWRnZXRDb250ZW50OiAnZmMtd2lkZ2V0LWNvbnRlbnQnLFxuICAgIGJ1dHRvbkdyb3VwOiAnZmMtYnV0dG9uLWdyb3VwJyxcbiAgICBidXR0b246ICdmYy1idXR0b24gZmMtYnV0dG9uLXByaW1hcnknLFxuICAgIGJ1dHRvbkFjdGl2ZTogJ2ZjLWJ1dHRvbi1hY3RpdmUnLFxuICAgIHBvcG92ZXJIZWFkZXI6ICdmYy13aWRnZXQtaGVhZGVyJyxcbiAgICBwb3BvdmVyQ29udGVudDogJ2ZjLXdpZGdldC1jb250ZW50JyxcbiAgICAvLyBkYXkgZ3JpZFxuICAgIGhlYWRlclJvdzogJ2ZjLXdpZGdldC1oZWFkZXInLFxuICAgIGRheVJvdzogJ2ZjLXdpZGdldC1jb250ZW50JyxcbiAgICAvLyBsaXN0IHZpZXdcbiAgICBsaXN0VmlldzogJ2ZjLXdpZGdldC1jb250ZW50J1xufTtcblN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmJhc2VJY29uQ2xhc3MgPSAnZmMtaWNvbic7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHtcbiAgICBjbG9zZTogJ2ZjLWljb24teCcsXG4gICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1sZWZ0JyxcbiAgICBuZXh0OiAnZmMtaWNvbi1jaGV2cm9uLXJpZ2h0JyxcbiAgICBwcmV2WWVhcjogJ2ZjLWljb24tY2hldnJvbnMtbGVmdCcsXG4gICAgbmV4dFllYXI6ICdmYy1pY29uLWNoZXZyb25zLXJpZ2h0J1xufTtcblN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZU9wdGlvbiA9ICdidXR0b25JY29ucyc7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24gPSAnaWNvbic7XG5TdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVQcmVmaXggPSAnZmMtaWNvbi0nO1xuXG52YXIgQ2FsZW5kYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FsZW5kYXIoZWwsIG92ZXJyaWRlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnBhcnNlUmF3TG9jYWxlcyA9IG1lbW9pemUocGFyc2VSYXdMb2NhbGVzKTtcbiAgICAgICAgdGhpcy5idWlsZExvY2FsZSA9IG1lbW9pemUoYnVpbGRMb2NhbGUpO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0ZUVudiA9IG1lbW9pemUoYnVpbGREYXRlRW52KTtcbiAgICAgICAgdGhpcy5idWlsZFRoZW1lID0gbWVtb2l6ZShidWlsZFRoZW1lKTtcbiAgICAgICAgdGhpcy5idWlsZEV2ZW50VWlTaW5nbGVCYXNlID0gbWVtb2l6ZSh0aGlzLl9idWlsZEV2ZW50VWlTaW5nbGVCYXNlKTtcbiAgICAgICAgdGhpcy5idWlsZFNlbGVjdGlvbkNvbmZpZyA9IG1lbW9pemUodGhpcy5fYnVpbGRTZWxlY3Rpb25Db25maWcpO1xuICAgICAgICB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlID0gbWVtb2l6ZU91dHB1dChidWlsZEV2ZW50VWlCeVNvdXJjZSwgaXNQcm9wc0VxdWFsKTtcbiAgICAgICAgdGhpcy5idWlsZEV2ZW50VWlCYXNlcyA9IG1lbW9pemUoYnVpbGRFdmVudFVpQmFzZXMpO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uc1N0b3JlID0ge307XG4gICAgICAgIHRoaXMuYWN0aW9uUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5pc1JlZHVjaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIGlzRGlzcGxheWluZzogYm9vbGVhbiA9IGZhbHNlIC8vIGluc3RhbGxlZCBpbiBET00/IGFjY2VwdGluZyByZW5kZXJzP1xuICAgICAgICB0aGlzLm5lZWRzUmVyZW5kZXIgPSBmYWxzZTsgLy8gbmVlZHMgYSByZW5kZXI/XG4gICAgICAgIHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmluZyA9IGZhbHNlOyAvLyBjdXJyZW50bHkgaW4gdGhlIGV4ZWN1dGVSZW5kZXIgZnVuY3Rpb24/XG4gICAgICAgIHRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCA9IDA7XG4gICAgICAgIHRoaXMuYnVpbGREZWxheWVkUmVyZW5kZXIgPSBtZW1vaXplKGJ1aWxkRGVsYXllZFJlcmVuZGVyKTtcbiAgICAgICAgdGhpcy5hZnRlclNpemluZ1RyaWdnZXJzID0ge307XG4gICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRGF0ZXNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNFdmVudHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5vcHRpb25zTWFuYWdlciA9IG5ldyBPcHRpb25zTWFuYWdlcihvdmVycmlkZXMgfHwge30pO1xuICAgICAgICB0aGlzLnBsdWdpblN5c3RlbSA9IG5ldyBQbHVnaW5TeXN0ZW0oKTtcbiAgICAgICAgLy8gb25seSBkbyBvbmNlLiBkb24ndCBkbyBpbiBoYW5kbGVPcHRpb25zLiBiZWNhdXNlIGNhbid0IHJlbW92ZSBwbHVnaW5zXG4gICAgICAgIHRoaXMuYWRkUGx1Z2luSW5wdXRzKHRoaXMub3B0aW9uc01hbmFnZXIuY29tcHV0ZWQucGx1Z2lucyB8fCBbXSk7XG4gICAgICAgIHRoaXMuaGFuZGxlT3B0aW9ucyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKTtcbiAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ19pbml0Jyk7IC8vIGZvciB0ZXN0c1xuICAgICAgICB0aGlzLmh5ZHJhdGUoKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhckludGVyYWN0aW9ucyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLmNhbGVuZGFySW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjYWxlbmRhckludGVyYWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsZW5kYXJJbnRlcmFjdGlvbkNsYXNzKF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5hZGRQbHVnaW5JbnB1dHMgPSBmdW5jdGlvbiAocGx1Z2luSW5wdXRzKSB7XG4gICAgICAgIHZhciBwbHVnaW5EZWZzID0gcmVmaW5lUGx1Z2luRGVmcyhwbHVnaW5JbnB1dHMpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBsdWdpbkRlZnNfMSA9IHBsdWdpbkRlZnM7IF9pIDwgcGx1Z2luRGVmc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbkRlZiA9IHBsdWdpbkRlZnNfMVtfaV07XG4gICAgICAgICAgICB0aGlzLnBsdWdpblN5c3RlbS5hZGQocGx1Z2luRGVmKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbGVuZGFyLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgLy8gcHVibGljIEFQSVxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCA/IHRoaXMuY29tcG9uZW50LnZpZXcgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvLyBQdWJsaWMgQVBJIGZvciByZW5kZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyYWJsZUV2ZW50U3RvcmUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVSZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFJlcmVuZGVyKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5kZXN0cm95KCk7IC8vIGRvbid0IG51bGwtb3V0LiBpbiBjYXNlIEFQSSBuZWVkcyBhY2Nlc3NcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDsgLy8gdW1tID8/P1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuY2FsZW5kYXJJbnRlcmFjdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCdfZGVzdHJveWVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEhhbmRsZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYmluZEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBldmVudCBkZWxlZ2F0aW9uIGZvciBuYXYgbGlua3NcbiAgICAgICAgdGhpcy5yZW1vdmVOYXZMaW5rTGlzdGVuZXIgPSBsaXN0ZW5CeVNlbGVjdG9yKHRoaXMuZWwsICdjbGljaycsICdhW2RhdGEtZ290b10nLCBmdW5jdGlvbiAoZXYsIGFuY2hvckVsKSB7XG4gICAgICAgICAgICB2YXIgZ290b09wdGlvbnMgPSBhbmNob3JFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZ290bycpO1xuICAgICAgICAgICAgZ290b09wdGlvbnMgPSBnb3RvT3B0aW9ucyA/IEpTT04ucGFyc2UoZ290b09wdGlvbnMpIDoge307XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IF90aGlzLmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgZGF0ZU1hcmtlciA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGdvdG9PcHRpb25zLmRhdGUpO1xuICAgICAgICAgICAgdmFyIHZpZXdUeXBlID0gZ290b09wdGlvbnMudHlwZTtcbiAgICAgICAgICAgIC8vIHByb3BlcnR5IGxpa2UgXCJuYXZMaW5rRGF5Q2xpY2tcIi4gbWlnaHQgYmUgYSBzdHJpbmcgb3IgYSBmdW5jdGlvblxuICAgICAgICAgICAgdmFyIGN1c3RvbUFjdGlvbiA9IF90aGlzLnZpZXdPcHQoJ25hdkxpbmsnICsgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHZpZXdUeXBlKSArICdDbGljaycpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21BY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjdXN0b21BY3Rpb24oZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlciksIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tQWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZSA9IGN1c3RvbUFjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuem9vbVRvKGRhdGVNYXJrZXIsIHZpZXdUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLm9wdCgnaGFuZGxlV2luZG93UmVzaXplJykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZVByb3h5ID0gZGVib3VuY2UoLy8gcHJldmVudHMgcmFwaWQgY2FsbHNcbiAgICAgICAgICAgIHRoaXMud2luZG93UmVzaXplLmJpbmQodGhpcyksIHRoaXMub3B0KCd3aW5kb3dSZXNpemVEZWxheScpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS51bmJpbmRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVOYXZMaW5rTGlzdGVuZXIoKTtcbiAgICAgICAgaWYgKHRoaXMud2luZG93UmVzaXplUHJveHkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZVByb3h5KTtcbiAgICAgICAgICAgIHRoaXMud2luZG93UmVzaXplUHJveHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBEaXNwYXRjaGVyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaHlkcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuYnVpbGRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgdmFyIHJhd1NvdXJjZXMgPSB0aGlzLm9wdCgnZXZlbnRTb3VyY2VzJykgfHwgW107XG4gICAgICAgIHZhciBzaW5nbGVSYXdTb3VyY2UgPSB0aGlzLm9wdCgnZXZlbnRzJyk7XG4gICAgICAgIHZhciBzb3VyY2VzID0gW107IC8vIHBhcnNlZFxuICAgICAgICBpZiAoc2luZ2xlUmF3U291cmNlKSB7XG4gICAgICAgICAgICByYXdTb3VyY2VzLnVuc2hpZnQoc2luZ2xlUmF3U291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJhd1NvdXJjZXNfMSA9IHJhd1NvdXJjZXM7IF9pIDwgcmF3U291cmNlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJhd1NvdXJjZSA9IHJhd1NvdXJjZXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgc291cmNlID0gcGFyc2VFdmVudFNvdXJjZShyYXdTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0Y2hSZW5kZXJpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goeyB0eXBlOiAnSU5JVCcgfSk7IC8vIHBhc3MgaW4gc291cmNlcyBoZXJlP1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goeyB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLCBzb3VyY2VzOiBzb3VyY2VzIH0pO1xuICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICB2aWV3VHlwZTogX3RoaXMub3B0KCdkZWZhdWx0VmlldycpIHx8IF90aGlzLnBsdWdpblN5c3RlbS5ob29rcy5kZWZhdWx0Vmlld1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkSW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlld1R5cGU6IG51bGwsXG4gICAgICAgICAgICBsb2FkaW5nTGV2ZWw6IDAsXG4gICAgICAgICAgICBldmVudFNvdXJjZUxvYWRpbmdMZXZlbDogMCxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlOiB0aGlzLmdldEluaXRpYWxEYXRlKCksXG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogbnVsbCxcbiAgICAgICAgICAgIGV2ZW50U291cmNlczoge30sXG4gICAgICAgICAgICBldmVudFN0b3JlOiBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb246IG51bGwsXG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbjogJycsXG4gICAgICAgICAgICBldmVudERyYWc6IG51bGwsXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmFjdGlvblF1ZXVlLnB1c2goYWN0aW9uKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVkdWNpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaXNSZWR1Y2luZyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuYWN0aW9uUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucmVkdWNlKHRoaXMuc3RhdGUsIHRoaXMuYWN0aW9uUXVldWUuc2hpZnQoKSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgdGhpcy5pc1JlZHVjaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIW9sZFN0YXRlLmxvYWRpbmdMZXZlbCAmJiBuZXdTdGF0ZS5sb2FkaW5nTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignbG9hZGluZycsIFt0cnVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbGRTdGF0ZS5sb2FkaW5nTGV2ZWwgJiYgIW5ld1N0YXRlLmxvYWRpbmdMZXZlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCdsb2FkaW5nJywgW2ZhbHNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuY29tcG9uZW50LnZpZXc7XG4gICAgICAgICAgICBpZiAob2xkU3RhdGUuZXZlbnRTdG9yZSAhPT0gbmV3U3RhdGUuZXZlbnRTdG9yZSB8fCB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLmV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0V2ZW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5kYXRlUHJvZmlsZSAhPT0gbmV3U3RhdGUuZGF0ZVByb2ZpbGUgfHwgdGhpcy5uZWVkc0Z1bGxSZXJlbmRlcikge1xuICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5kYXRlUHJvZmlsZSAmJiB2aWV3KSB7IC8vIHdoeSB3b3VsZCB2aWV3IGJlIG51bGwhP1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignZGF0ZXNEZXN0cm95JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHZpZXcuZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNEYXRlc1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnZpZXdUeXBlICE9PSBuZXdTdGF0ZS52aWV3VHlwZSB8fCB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnZpZXdUeXBlICYmIHZpZXcpIHsgLy8gd2h5IHdvdWxkIHZpZXcgYmUgbnVsbCE/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCd2aWV3U2tlbGV0b25EZXN0cm95JywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHZpZXcuZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RSZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24sIGNhbGVuZGFyKSB7XG4gICAgICAgIHJldHVybiByZWR1Y2Uoc3RhdGUsIGFjdGlvbiwgY2FsZW5kYXIpO1xuICAgIH07XG4gICAgLy8gUmVuZGVyIFF1ZXVlXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVxdWVzdFJlcmVuZGVyID0gZnVuY3Rpb24gKG5lZWRzRnVsbCkge1xuICAgICAgICBpZiAobmVlZHNGdWxsID09PSB2b2lkIDApIHsgbmVlZHNGdWxsID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc0Z1bGxSZXJlbmRlciA9IHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgfHwgbmVlZHNGdWxsO1xuICAgICAgICB0aGlzLmRlbGF5ZWRSZXJlbmRlcigpOyAvLyB3aWxsIGNhbGwgYSBkZWJvdW5jZWQtdmVyc2lvbiBvZiB0cnlSZXJlbmRlclxuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnRyeVJlcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQgJiYgLy8gbXVzdCBiZSBhY2NlcHRpbmcgcmVuZGVyc1xuICAgICAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyICYmIC8vIGluZGljYXRlcyB0aGF0IGEgcmVyZW5kZXIgd2FzIHJlcXVlc3RlZFxuICAgICAgICAgICAgIXRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCAmJiAvLyBub3QgcGF1c2VkXG4gICAgICAgICAgICAhdGhpcy5pc1JlbmRlcmluZyAvLyBub3QgY3VycmVudGx5IGluIHRoZSByZW5kZXIgbG9vcFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYmF0Y2hSZW5kZXJpbmcgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICB0aGlzLnJlbmRlcmluZ1BhdXNlRGVwdGgrKztcbiAgICAgICAgZnVuYygpO1xuICAgICAgICB0aGlzLnJlbmRlcmluZ1BhdXNlRGVwdGgtLTtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNSZXJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVyZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZXhlY3V0ZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5lZWRzRnVsbFJlcmVuZGVyID0gdGhpcy5uZWVkc0Z1bGxSZXJlbmRlcjsgLy8gc2F2ZSBiZWZvcmUgY2xlYXJpbmdcbiAgICAgICAgLy8gY2xlYXIgdGhlc2UgQkVGT1JFIHRoZSByZW5kZXIgc28gdGhhdCBuZXcgdmFsdWVzIHdpbGwgYWNjdW11bGF0ZSBkdXJpbmcgcmVuZGVyXG4gICAgICAgIHRoaXMubmVlZHNSZXJlbmRlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5lZWRzRnVsbFJlcmVuZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlckNvbXBvbmVudChuZWVkc0Z1bGxSZXJlbmRlcik7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gcmVjZWl2ZWQgYSByZXJlbmRlciByZXF1ZXN0IHdoaWxlIHJlbmRlcmluZ1xuICAgICAgICBpZiAodGhpcy5uZWVkc1JlcmVuZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRSZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKlxuICAgIGRvbid0IGNhbGwgdGhpcyBkaXJlY3RseS4gdXNlIGV4ZWN1dGVSZW5kZXIgaW5zdGVhZFxuICAgICovXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlckNvbXBvbmVudCA9IGZ1bmN0aW9uIChuZWVkc0Z1bGwpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgc3RhdGUgPSBfYS5zdGF0ZSwgY29tcG9uZW50ID0gX2EuY29tcG9uZW50O1xuICAgICAgICB2YXIgdmlld1R5cGUgPSBzdGF0ZS52aWV3VHlwZTtcbiAgICAgICAgdmFyIHZpZXdTcGVjID0gdGhpcy52aWV3U3BlY3Nbdmlld1R5cGVdO1xuICAgICAgICB2YXIgc2F2ZWRTY3JvbGwgPSAobmVlZHNGdWxsICYmIGNvbXBvbmVudCkgPyBjb21wb25lbnQudmlldy5xdWVyeVNjcm9sbCgpIDogbnVsbDtcbiAgICAgICAgaWYgKCF2aWV3U3BlYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmlldyB0eXBlIFxcXCJcIiArIHZpZXdUeXBlICsgXCJcXFwiIGlzIG5vdCB2YWxpZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBldmVudCBzb3VyY2VzIGFyZSBzdGlsbCBsb2FkaW5nIGFuZCBwcm9ncmVzc2l2ZSByZW5kZXJpbmcgaGFzbid0IGJlZW4gZW5hYmxlZCxcbiAgICAgICAgLy8ga2VlcCByZW5kZXJpbmcgdGhlIGxhc3QgZnVsbHkgbG9hZGVkIHNldCBvZiBldmVudHNcbiAgICAgICAgdmFyIHJlbmRlcmFibGVFdmVudFN0b3JlID0gdGhpcy5yZW5kZXJhYmxlRXZlbnRTdG9yZSA9XG4gICAgICAgICAgICAoc3RhdGUuZXZlbnRTb3VyY2VMb2FkaW5nTGV2ZWwgJiYgIXRoaXMub3B0KCdwcm9ncmVzc2l2ZUV2ZW50UmVuZGVyaW5nJykpID9cbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmFibGVFdmVudFN0b3JlIDpcbiAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudFN0b3JlO1xuICAgICAgICB2YXIgZXZlbnRVaVNpbmdsZUJhc2UgPSB0aGlzLmJ1aWxkRXZlbnRVaVNpbmdsZUJhc2Uodmlld1NwZWMub3B0aW9ucyk7XG4gICAgICAgIHZhciBldmVudFVpQnlTb3VyY2UgPSB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlKHN0YXRlLmV2ZW50U291cmNlcyk7XG4gICAgICAgIHZhciBldmVudFVpQmFzZXMgPSB0aGlzLmV2ZW50VWlCYXNlcyA9IHRoaXMuYnVpbGRFdmVudFVpQmFzZXMocmVuZGVyYWJsZUV2ZW50U3RvcmUuZGVmcywgZXZlbnRVaVNpbmdsZUJhc2UsIGV2ZW50VWlCeVNvdXJjZSk7XG4gICAgICAgIGlmIChuZWVkc0Z1bGwgfHwgIWNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5mcmVlemVIZWlnaHQoKTsgLy8gbmV4dCBjb21wb25lbnQgd2lsbCB1bmZyZWV6ZSBpdFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudCA9IG5ldyBDYWxlbmRhckNvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgdmlldzogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRlRW52OiB0aGlzLmRhdGVFbnYsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHRoaXMudGhlbWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zTWFuYWdlci5jb21wdXRlZFxuICAgICAgICAgICAgfSwgdGhpcy5lbCk7XG4gICAgICAgICAgICB0aGlzLmlzVmlld1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzRXZlbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50LnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7fSwgc3RhdGUsIHsgdmlld1NwZWM6IHZpZXdTcGVjLCBkYXRlUHJvZmlsZTogc3RhdGUuZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yOiB0aGlzLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV0sIGV2ZW50U3RvcmU6IHJlbmRlcmFibGVFdmVudFN0b3JlLCBldmVudFVpQmFzZXM6IGV2ZW50VWlCYXNlcywgZGF0ZVNlbGVjdGlvbjogc3RhdGUuZGF0ZVNlbGVjdGlvbiwgZXZlbnRTZWxlY3Rpb246IHN0YXRlLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWc6IHN0YXRlLmV2ZW50RHJhZywgZXZlbnRSZXNpemU6IHN0YXRlLmV2ZW50UmVzaXplIH0pKTtcbiAgICAgICAgaWYgKHNhdmVkU2Nyb2xsKSB7XG4gICAgICAgICAgICBjb21wb25lbnQudmlldy5hcHBseVNjcm9sbChzYXZlZFNjcm9sbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzVmlld1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3ZpZXdTa2VsZXRvblJlbmRlcicsIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbXBvbmVudC52aWV3LFxuICAgICAgICAgICAgICAgICAgICBlbDogY29tcG9uZW50LnZpZXcuZWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0RhdGVzVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2RhdGVzUmVuZGVyJywgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGVsOiBjb21wb25lbnQudmlldy5lbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRXZlbnRzVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0V2ZW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbGVhc2VBZnRlclNpemluZ1RyaWdnZXJzKCk7XG4gICAgfTtcbiAgICAvLyBPcHRpb25zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMubXV0YXRlT3B0aW9ucygoX2EgPSB7fSwgX2FbbmFtZV0gPSB2YWwsIF9hKSwgW10sIHRydWUpO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm9wdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3T3B0cygpW25hbWVdO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3U3BlY3NbdGhpcy5zdGF0ZS52aWV3VHlwZV0ub3B0aW9ucztcbiAgICB9O1xuICAgIC8qXG4gICAgaGFuZGxlcyBvcHRpb24gY2hhbmdlcyAobGlrZSBhIGRpZmYpXG4gICAgKi9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUubXV0YXRlT3B0aW9ucyA9IGZ1bmN0aW9uICh1cGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljLCBkZWVwRXF1YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNoYW5nZUhhbmRsZXJzID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3Mub3B0aW9uQ2hhbmdlSGFuZGxlcnM7XG4gICAgICAgIHZhciBub3JtYWxVcGRhdGVzID0ge307XG4gICAgICAgIHZhciBzcGVjaWFsVXBkYXRlcyA9IHt9O1xuICAgICAgICB2YXIgb2xkRGF0ZUVudiA9IHRoaXMuZGF0ZUVudjsgLy8gZG8gdGhpcyBiZWZvcmUgaGFuZGxlT3B0aW9uc1xuICAgICAgICB2YXIgaXNUaW1lWm9uZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIHZhciBpc1NpemVEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB2YXIgYW55RGlmZmljdWx0T3B0aW9ucyA9IEJvb2xlYW4ocmVtb3ZhbHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgbmFtZV8xIGluIHVwZGF0ZXMpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VIYW5kbGVyc1tuYW1lXzFdKSB7XG4gICAgICAgICAgICAgICAgc3BlY2lhbFVwZGF0ZXNbbmFtZV8xXSA9IHVwZGF0ZXNbbmFtZV8xXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vcm1hbFVwZGF0ZXNbbmFtZV8xXSA9IHVwZGF0ZXNbbmFtZV8xXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuYW1lXzIgaW4gbm9ybWFsVXBkYXRlcykge1xuICAgICAgICAgICAgaWYgKC9eKGhlaWdodHxjb250ZW50SGVpZ2h0fGFzcGVjdFJhdGlvKSQvLnRlc3QobmFtZV8yKSkge1xuICAgICAgICAgICAgICAgIGlzU2l6ZURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9eKGRlZmF1bHREYXRlfGRlZmF1bHRWaWV3KSQvLnRlc3QobmFtZV8yKSkgO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYW55RGlmZmljdWx0T3B0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVfMiA9PT0gJ3RpbWVab25lJykge1xuICAgICAgICAgICAgICAgICAgICBpc1RpbWVab25lRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNNYW5hZ2VyLm11dGF0ZShub3JtYWxVcGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljKTtcbiAgICAgICAgaWYgKGFueURpZmZpY3VsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlT3B0aW9ucyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKTtcbiAgICAgICAgICAgIHRoaXMubmVlZHNGdWxsUmVyZW5kZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmF0Y2hSZW5kZXJpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFueURpZmZpY3VsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUaW1lWm9uZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfVElNRVpPTkUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkRGF0ZUVudjogb2xkRGF0ZUVudlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogSEFDS1xuICAgICAgICAgICAgICAgIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgY2FsbGluZyB0aGlzLnJlcXVlc3RSZXJlbmRlcih0cnVlKVxuICAgICAgICAgICAgICAgIGJ1dCByZWNvbXB1dGVzIHRoZSBzdGF0ZSdzIGRhdGVQcm9maWxlXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld1R5cGU6IF90aGlzLnN0YXRlLnZpZXdUeXBlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1NpemVEaXJ0eSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNwZWNpYWwgdXBkYXRlc1xuICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWVfMyBpbiBzcGVjaWFsVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VIYW5kbGVyc1tuYW1lXzNdKHNwZWNpYWxVcGRhdGVzW25hbWVfM10sIF90aGlzLCBkZWVwRXF1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKlxuICAgIHJlYnVpbGRzIHRoaW5ncyBiYXNlZCBvZmYgb2YgYSBjb21wbGV0ZSBzZXQgb2YgcmVmaW5lZCBvcHRpb25zXG4gICAgKi9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaGFuZGxlT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwbHVnaW5Ib29rcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzO1xuICAgICAgICB0aGlzLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ob3B0aW9ucy5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbik7XG4gICAgICAgIHRoaXMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKG9wdGlvbnMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbik7XG4gICAgICAgIHRoaXMuZGVsYXllZFJlcmVuZGVyID0gdGhpcy5idWlsZERlbGF5ZWRSZXJlbmRlcihvcHRpb25zLnJlcmVuZGVyRGVsYXkpO1xuICAgICAgICB0aGlzLnRoZW1lID0gdGhpcy5idWlsZFRoZW1lKG9wdGlvbnMpO1xuICAgICAgICB2YXIgYXZhaWxhYmxlID0gdGhpcy5wYXJzZVJhd0xvY2FsZXMob3B0aW9ucy5sb2NhbGVzKTtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVSYXdMb2NhbGVzID0gYXZhaWxhYmxlLm1hcDtcbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMuYnVpbGRMb2NhbGUob3B0aW9ucy5sb2NhbGUgfHwgYXZhaWxhYmxlLmRlZmF1bHRDb2RlLCBhdmFpbGFibGUubWFwKTtcbiAgICAgICAgdGhpcy5kYXRlRW52ID0gdGhpcy5idWlsZERhdGVFbnYobG9jYWxlLCBvcHRpb25zLnRpbWVab25lLCBwbHVnaW5Ib29rcy5uYW1lZFRpbWVab25lZEltcGwsIG9wdGlvbnMuZmlyc3REYXksIG9wdGlvbnMud2Vla051bWJlckNhbGN1bGF0aW9uLCBvcHRpb25zLndlZWtMYWJlbCwgcGx1Z2luSG9va3MuY21kRm9ybWF0dGVyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25Db25maWcgPSB0aGlzLmJ1aWxkU2VsZWN0aW9uQ29uZmlnKG9wdGlvbnMpOyAvLyBuZWVkcyBkYXRlRW52LiBkbyBhZnRlciA6KFxuICAgICAgICAvLyBpbmVmZmVjaWVudCB0byBkbyBldmVyeSB0aW1lP1xuICAgICAgICB0aGlzLnZpZXdTcGVjcyA9IGJ1aWxkVmlld1NwZWNzKHBsdWdpbkhvb2tzLnZpZXdzLCB0aGlzLm9wdGlvbnNNYW5hZ2VyKTtcbiAgICAgICAgLy8gaW5lZmZlY2llbnQgdG8gZG8gZXZlcnkgdGltZT9cbiAgICAgICAgdGhpcy5kYXRlUHJvZmlsZUdlbmVyYXRvcnMgPSBtYXBIYXNoKHRoaXMudmlld1NwZWNzLCBmdW5jdGlvbiAodmlld1NwZWMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdmlld1NwZWMuY2xhc3MucHJvdG90eXBlLmRhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3Modmlld1NwZWMsIF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0QXZhaWxhYmxlTG9jYWxlQ29kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF2YWlsYWJsZVJhd0xvY2FsZXMpO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLl9idWlsZFNlbGVjdGlvbkNvbmZpZyA9IGZ1bmN0aW9uIChyYXdPcHRzKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzU2NvcGVkVWlQcm9wcygnc2VsZWN0JywgcmF3T3B0cywgdGhpcyk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuX2J1aWxkRXZlbnRVaVNpbmdsZUJhc2UgPSBmdW5jdGlvbiAocmF3T3B0cykge1xuICAgICAgICBpZiAocmF3T3B0cy5lZGl0YWJsZSkgeyAvLyBzbyAnZWRpdGFibGUnIGFmZmVjdGVkIGV2ZW50c1xuICAgICAgICAgICAgcmF3T3B0cyA9IF9fYXNzaWduKHt9LCByYXdPcHRzLCB7IGV2ZW50RWRpdGFibGU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NTY29wZWRVaVByb3BzKCdldmVudCcsIHJhd09wdHMsIHRoaXMpO1xuICAgIH07XG4gICAgLy8gVHJpZ2dlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmhhc1B1YmxpY0hhbmRsZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzSGFuZGxlcnMobmFtZSkgfHxcbiAgICAgICAgICAgIHRoaXMub3B0KG5hbWUpOyAvLyBoYW5kbGVyIHNwZWNpZmllZCBpbiBvcHRpb25zXG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIG9wdEhhbmRsZXIgPSB0aGlzLm9wdChuYW1lKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyV2l0aChuYW1lLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgaWYgKG9wdEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICB2YXIgYWZ0ZXJTaXppbmdUcmlnZ2VycyA9IHRoaXMuYWZ0ZXJTaXppbmdUcmlnZ2VycztcbiAgICAgICAgKGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV0gfHwgKGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV0gPSBbXSkpLnB1c2goYXJncyk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVsZWFzZUFmdGVyU2l6aW5nVHJpZ2dlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhZnRlclNpemluZ1RyaWdnZXJzID0gdGhpcy5hZnRlclNpemluZ1RyaWdnZXJzO1xuICAgICAgICBmb3IgKHZhciBuYW1lXzQgaW4gYWZ0ZXJTaXppbmdUcmlnZ2Vycykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGFmdGVyU2l6aW5nVHJpZ2dlcnNbbmFtZV80XTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcihuYW1lXzQsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWZ0ZXJTaXppbmdUcmlnZ2VycyA9IHt9O1xuICAgIH07XG4gICAgLy8gVmlld1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUmV0dXJucyBhIGJvb2xlYW4gYWJvdXQgd2hldGhlciB0aGUgdmlldyBpcyBva2F5IHRvIGluc3RhbnRpYXRlIGF0IHNvbWUgcG9pbnRcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaXNWYWxpZFZpZXdUeXBlID0gZnVuY3Rpb24gKHZpZXdUeXBlKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlXSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuY2hhbmdlVmlldyA9IGZ1bmN0aW9uICh2aWV3VHlwZSwgZGF0ZU9yUmFuZ2UpIHtcbiAgICAgICAgdmFyIGRhdGVNYXJrZXIgPSBudWxsO1xuICAgICAgICBpZiAoZGF0ZU9yUmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT3JSYW5nZS5zdGFydCAmJiBkYXRlT3JSYW5nZS5lbmQpIHsgLy8gYSByYW5nZVxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01hbmFnZXIubXV0YXRlKHsgdmlzaWJsZVJhbmdlOiBkYXRlT3JSYW5nZSB9LCBbXSk7IC8vIHdpbGwgbm90IHJlcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVPcHRpb25zKHRoaXMub3B0aW9uc01hbmFnZXIuY29tcHV0ZWQpOyAvLyAuLi5idXQgeXVja1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIGEgZGF0ZVxuICAgICAgICAgICAgICAgIGRhdGVNYXJrZXIgPSB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKGRhdGVPclJhbmdlKTsgLy8ganVzdCBsaWtlIGdvdG9EYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgIHZpZXdUeXBlOiB2aWV3VHlwZSxcbiAgICAgICAgICAgIGRhdGVNYXJrZXI6IGRhdGVNYXJrZXJcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBGb3JjZXMgbmF2aWdhdGlvbiB0byBhIHZpZXcgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICAgIC8vIGB2aWV3VHlwZWAgY2FuIGJlIGEgc3BlY2lmaWMgdmlldyBuYW1lIG9yIGEgZ2VuZXJpYyBvbmUgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLlxuICAgIC8vIG5lZWRzIHRvIGNoYW5nZVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS56b29tVG8gPSBmdW5jdGlvbiAoZGF0ZU1hcmtlciwgdmlld1R5cGUpIHtcbiAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgIHZpZXdUeXBlID0gdmlld1R5cGUgfHwgJ2RheSc7IC8vIGRheSBpcyBkZWZhdWx0IHpvb21cbiAgICAgICAgc3BlYyA9IHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlXSB8fFxuICAgICAgICAgICAgdGhpcy5nZXRVbml0Vmlld1NwZWModmlld1R5cGUpO1xuICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgIGlmIChzcGVjKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX1ZJRVdfVFlQRScsXG4gICAgICAgICAgICAgICAgdmlld1R5cGU6IHNwZWMudHlwZSxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBkYXRlTWFya2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogZGF0ZU1hcmtlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdpdmVuIGEgZHVyYXRpb24gc2luZ3VsYXIgdW5pdCwgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLCBmaW5kcyBhIG1hdGNoaW5nIHZpZXcgc3BlYy5cbiAgICAvLyBQcmVmZXJlbmNlIGlzIGdpdmVuIHRvIHZpZXdzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGJ1dHRvbnMuXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldFVuaXRWaWV3U3BlYyA9IGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgdmFyIHZpZXdUeXBlcyA9IFtdO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgIC8vIHB1dCB2aWV3cyB0aGF0IGhhdmUgYnV0dG9ucyBmaXJzdC4gdGhlcmUgd2lsbCBiZSBkdXBsaWNhdGVzLCBidXQgb2hcbiAgICAgICAgaWYgKGNvbXBvbmVudC5oZWFkZXIpIHtcbiAgICAgICAgICAgIHZpZXdUeXBlcy5wdXNoLmFwcGx5KHZpZXdUeXBlcywgY29tcG9uZW50LmhlYWRlci52aWV3c1dpdGhCdXR0b25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcG9uZW50LmZvb3Rlcikge1xuICAgICAgICAgICAgdmlld1R5cGVzLnB1c2guYXBwbHkodmlld1R5cGVzLCBjb21wb25lbnQuZm9vdGVyLnZpZXdzV2l0aEJ1dHRvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHZpZXdUeXBlIGluIHRoaXMudmlld1NwZWNzKSB7XG4gICAgICAgICAgICB2aWV3VHlwZXMucHVzaCh2aWV3VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZpZXdUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3BlYyA9IHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlc1tpXV07XG4gICAgICAgICAgICBpZiAoc3BlYykge1xuICAgICAgICAgICAgICAgIGlmIChzcGVjLnNpbmdsZVVuaXQgPT09IHVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwZWM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDdXJyZW50IERhdGVcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRJbml0aWFsRGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlZmF1bHREYXRlSW5wdXQgPSB0aGlzLm9wdCgnZGVmYXVsdERhdGUnKTtcbiAgICAgICAgLy8gY29tcHV0ZSB0aGUgaW5pdGlhbCBhbWJpZy10aW1lem9uZSBkYXRlXG4gICAgICAgIGlmIChkZWZhdWx0RGF0ZUlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKGRlZmF1bHREYXRlSW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm93KCk7IC8vIGdldE5vdyBhbHJlYWR5IHJldHVybnMgdW56b25lZFxuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1BSRVYnIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdORVhUJyB9KTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5wcmV2WWVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkWWVhcnModGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSwgLTEpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLm5leHRZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgIGRhdGVNYXJrZXI6IHRoaXMuZGF0ZUVudi5hZGRZZWFycyh0aGlzLnN0YXRlLmN1cnJlbnREYXRlLCAxKVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS50b2RheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmdldE5vdygpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdvdG9EYXRlID0gZnVuY3Rpb24gKHpvbmVkRGF0ZUlucHV0KSB7XG4gICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnU0VUX0RBVEUnLFxuICAgICAgICAgICAgZGF0ZU1hcmtlcjogdGhpcy5kYXRlRW52LmNyZWF0ZU1hcmtlcih6b25lZERhdGVJbnB1dClcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuaW5jcmVtZW50RGF0ZSA9IGZ1bmN0aW9uIChkZWx0YUlucHV0KSB7XG4gICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICBpZiAoZGVsdGEpIHsgLy8gZWxzZSwgd2FybiBhYm91dCBpbnZhbGlkIGlucHV0P1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkKHRoaXMuc3RhdGUuY3VycmVudERhdGUsIGRlbHRhKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGZvciBleHRlcm5hbCBBUElcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSk7XG4gICAgfTtcbiAgICAvLyBEYXRlIEZvcm1hdHRpbmcgVXRpbHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5mb3JtYXREYXRlID0gZnVuY3Rpb24gKGQsIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KGRhdGVFbnYuY3JlYXRlTWFya2VyKGQpLCBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0dGVyKSk7XG4gICAgfTtcbiAgICAvLyBgc2V0dGluZ3NgIGlzIGZvciBmb3JtYXR0ZXIgQU5EIGlzRW5kRXhjbHVzaXZlXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKGQwLCBkMSwgc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKGRhdGVFbnYuY3JlYXRlTWFya2VyKGQwKSwgZGF0ZUVudi5jcmVhdGVNYXJrZXIoZDEpLCBjcmVhdGVGb3JtYXR0ZXIoc2V0dGluZ3MsIHRoaXMub3B0KCdkZWZhdWx0UmFuZ2VTZXBhcmF0b3InKSksIHNldHRpbmdzKTtcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5mb3JtYXRJc28gPSBmdW5jdGlvbiAoZCwgb21pdFRpbWUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdElzbyhkYXRlRW52LmNyZWF0ZU1hcmtlcihkKSwgeyBvbWl0VGltZTogb21pdFRpbWUgfSk7XG4gICAgfTtcbiAgICAvLyBTaXppbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIENhbGVuZGFyLnByb3RvdHlwZS53aW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSGFuZGxpbmdXaW5kb3dSZXNpemUgJiZcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ICYmIC8vIHdoeT9cbiAgICAgICAgICAgIGV2LnRhcmdldCA9PT0gd2luZG93IC8vIG5vdCBhIGpxdWkgcmVzaXplIGV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5pc0hhbmRsaW5nV2luZG93UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3dpbmRvd1Jlc2l6ZScsIFt0aGlzLnZpZXddKTtcbiAgICAgICAgICAgIHRoaXMuaXNIYW5kbGluZ1dpbmRvd1Jlc2l6ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7IC8vIHdoZW4/XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVTaXplKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDb21wb25lbnQgUmVnaXN0cmF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIHNldHRpbmdzSW5wdXQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gcGFyc2VJbnRlcmFjdGlvblNldHRpbmdzKGNvbXBvbmVudCwgc2V0dGluZ3NJbnB1dCk7XG4gICAgICAgIHZhciBERUZBVUxUX0lOVEVSQUNUSU9OUyA9IFtcbiAgICAgICAgICAgIEV2ZW50Q2xpY2tpbmcsXG4gICAgICAgICAgICBFdmVudEhvdmVyaW5nXG4gICAgICAgIF07XG4gICAgICAgIHZhciBpbnRlcmFjdGlvbkNsYXNzZXMgPSBERUZBVUxUX0lOVEVSQUNUSU9OUy5jb25jYXQodGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuY29tcG9uZW50SW50ZXJhY3Rpb25zKTtcbiAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IGludGVyYWN0aW9uQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGludGVyYWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaW50ZXJhY3Rpb25DbGFzcyhzZXR0aW5ncyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdID0gaW50ZXJhY3Rpb25zO1xuICAgICAgICBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmVbY29tcG9uZW50LnVpZF0gPSBzZXR0aW5ncztcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gX2FbX2ldO1xuICAgICAgICAgICAgbGlzdGVuZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgICAgICBkZWxldGUgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgIH07XG4gICAgLy8gRGF0ZSBTZWxlY3Rpb24gLyBFdmVudCBTZWxlY3Rpb24gLyBEYXlDbGlja1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhpcyBwdWJsaWMgbWV0aG9kIHJlY2VpdmVzIHN0YXJ0L2VuZCBkYXRlcyBpbiBhbnkgZm9ybWF0LCB3aXRoIGFueSB0aW1lem9uZVxuICAgIC8vIE5PVEU6IGFyZ3Mgd2VyZSBjaGFuZ2VkIGZyb20gdjNcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKGRhdGVPck9iaiwgZW5kRGF0ZSkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uSW5wdXQ7XG4gICAgICAgIGlmIChlbmREYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT3JPYmouc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbklucHV0ID0gZGF0ZU9yT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlT3JPYmosXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbnVsbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25JbnB1dCA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogZGF0ZU9yT2JqLFxuICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZWN0aW9uID0gcGFyc2VEYXRlU3BhbihzZWxlY3Rpb25JbnB1dCwgdGhpcy5kYXRlRW52LCBjcmVhdGVEdXJhdGlvbih7IGRheXM6IDEgfSkgLy8gVE9ETzogY2FjaGUgdGhpcz9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbikgeyAvLyB0aHJvdyBwYXJzZSBlcnJvciBvdGhlcndpc2U/XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogc2VsZWN0aW9uIH0pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRGF0ZVNlbGVjdChzZWxlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBwdWJsaWMgbWV0aG9kXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnVuc2VsZWN0ID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kYXRlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0RBVEVTJyB9KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckRhdGVVbnNlbGVjdChwZXYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUudHJpZ2dlckRhdGVTZWxlY3QgPSBmdW5jdGlvbiAoc2VsZWN0aW9uLCBwZXYpIHtcbiAgICAgICAgdmFyIGFyZyA9IF9fYXNzaWduKHt9LCB0aGlzLmJ1aWxkRGF0ZVNwYW5BcGkoc2VsZWN0aW9uKSwgeyBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCwgdmlldzogdGhpcy52aWV3IH0pO1xuICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignc2VsZWN0JywgW2FyZ10pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnRyaWdnZXJEYXRlVW5zZWxlY3QgPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCd1bnNlbGVjdCcsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCxcbiAgICAgICAgICAgICAgICB2aWV3OiB0aGlzLnZpZXdcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiByZWNlaXZlIHBldj9cbiAgICBDYWxlbmRhci5wcm90b3R5cGUudHJpZ2dlckRhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRlU3BhbiwgZGF5RWwsIHZpZXcsIGV2KSB7XG4gICAgICAgIHZhciBhcmcgPSBfX2Fzc2lnbih7fSwgdGhpcy5idWlsZERhdGVQb2ludEFwaShkYXRlU3BhbiksIHsgZGF5RWw6IGRheUVsLCBqc0V2ZW50OiBldiwgLy8gSXMgdGhpcyBhbHdheXMgYSBtb3VzZSBldmVudD8gU2VlICM0NjU1XG4gICAgICAgICAgICB2aWV3OiB2aWV3IH0pO1xuICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignZGF0ZUNsaWNrJywgW2FyZ10pO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkRGF0ZVBvaW50QXBpID0gZnVuY3Rpb24gKGRhdGVTcGFuKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuZGF0ZVBvaW50VHJhbnNmb3JtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfYVtfaV07XG4gICAgICAgICAgICBfX2Fzc2lnbihwcm9wcywgdHJhbnNmb3JtKGRhdGVTcGFuLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgX19hc3NpZ24ocHJvcHMsIGJ1aWxkRGF0ZVBvaW50QXBpKGRhdGVTcGFuLCB0aGlzLmRhdGVFbnYpKTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmJ1aWxkRGF0ZVNwYW5BcGkgPSBmdW5jdGlvbiAoZGF0ZVNwYW4pIHtcbiAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnBsdWdpblN5c3RlbS5ob29rcy5kYXRlU3BhblRyYW5zZm9ybXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gX2FbX2ldO1xuICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIHRyYW5zZm9ybShkYXRlU3BhbiwgdGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIF9fYXNzaWduKHByb3BzLCBidWlsZERhdGVTcGFuQXBpKGRhdGVTcGFuLCB0aGlzLmRhdGVFbnYpKTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG4gICAgLy8gRGF0ZSBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUmV0dXJucyBhIERhdGVNYXJrZXIgZm9yIHRoZSBjdXJyZW50IGRhdGUsIGFzIGRlZmluZWQgYnkgdGhlIGNsaWVudCdzIGNvbXB1dGVyIG9yIGZyb20gdGhlIGBub3dgIG9wdGlvblxuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXROb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub3cgPSB0aGlzLm9wdCgnbm93Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBub3cgPSBub3coKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm93ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTm93TWFya2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi5jcmVhdGVNYXJrZXIobm93KTtcbiAgICB9O1xuICAgIC8vIEV2ZW50LURhdGUgVXRpbGl0aWVzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBHaXZlbiBhbiBldmVudCdzIGFsbERheSBzdGF0dXMgYW5kIHN0YXJ0IGRhdGUsIHJldHVybiB3aGF0IGl0cyBmYWxsYmFjayBlbmQgZGF0ZSBzaG91bGQgYmUuXG4gICAgLy8gVE9ETzogcmVuYW1lIHRvIGNvbXB1dGVEZWZhdWx0RXZlbnRFbmRcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RGVmYXVsdEV2ZW50RW5kID0gZnVuY3Rpb24gKGFsbERheSwgbWFya2VyKSB7XG4gICAgICAgIHZhciBlbmQgPSBtYXJrZXI7XG4gICAgICAgIGlmIChhbGxEYXkpIHtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0T2ZEYXkoZW5kKTtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuZGF0ZUVudi5hZGQoZW5kLCB0aGlzLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuZGF0ZUVudi5hZGQoZW5kLCB0aGlzLmRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbmQ7XG4gICAgfTtcbiAgICAvLyBQdWJsaWMgRXZlbnRzIEFQSVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50SW5wdXQsIHNvdXJjZUlucHV0KSB7XG4gICAgICAgIGlmIChldmVudElucHV0IGluc3RhbmNlb2YgRXZlbnRBcGkpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBldmVudElucHV0Ll9kZWY7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudElucHV0Ll9pbnN0YW5jZTtcbiAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50U3RvcmUuZGVmc1tkZWYuZGVmSWRdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRUdXBsZVRvU3RvcmUoeyBkZWY6IGRlZiwgaW5zdGFuY2U6IGluc3RhbmNlIH0pIC8vIFRPRE86IGJldHRlciB1dGlsIGZvciB0d28gYXJncz9cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmVudElucHV0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2VJZDtcbiAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgIHNvdXJjZUlkID0gc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzb3VyY2VJbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlQXBpID0gdGhpcy5nZXRFdmVudFNvdXJjZUJ5SWQoc291cmNlSW5wdXQpOyAvLyBUT0RPOiB1c2UgYW4gaW50ZXJuYWwgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghc291cmNlQXBpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBhbiBldmVudCBzb3VyY2Ugd2l0aCBJRCBcIicgKyBzb3VyY2VJbnB1dCArICdcIicpOyAvLyBUT0RPOiB0ZXN0XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VJZCA9IHNvdXJjZUFwaS5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0dXBsZSA9IHBhcnNlRXZlbnQoZXZlbnRJbnB1dCwgc291cmNlSWQsIHRoaXMpO1xuICAgICAgICBpZiAodHVwbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEFwaSh0aGlzLCB0dXBsZS5kZWYsIHR1cGxlLmRlZi5yZWN1cnJpbmdEZWYgPyBudWxsIDogdHVwbGUuaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgLy8gVE9ETzogb3B0aW1pemVcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RXZlbnRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuc3RhdGUuZXZlbnRTdG9yZSwgZGVmcyA9IF9hLmRlZnMsIGluc3RhbmNlcyA9IF9hLmluc3RhbmNlcztcbiAgICAgICAgaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBkZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tkZWZJZF07XG4gICAgICAgICAgICBpZiAoZGVmLnB1YmxpY0lkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRBcGkodGhpcywgZGVmLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuZGVmSWQgPT09IGRlZi5kZWZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRBcGkodGhpcywgZGVmLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuZ2V0RXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnN0YXRlLmV2ZW50U3RvcmUsIGRlZnMgPSBfYS5kZWZzLCBpbnN0YW5jZXMgPSBfYS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBldmVudEFwaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgZXZlbnRBcGlzLnB1c2gobmV3IEV2ZW50QXBpKHRoaXMsIGRlZiwgaW5zdGFuY2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcGlzO1xuICAgIH07XG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbW92ZUFsbEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdSRU1PVkVfQUxMX0VWRU5UUycgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVyZW5kZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUkVTRVRfRVZFTlRTJyB9KTtcbiAgICB9O1xuICAgIC8vIFB1YmxpYyBFdmVudCBTb3VyY2VzIEFQSVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldEV2ZW50U291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNvdXJjZUhhc2ggPSB0aGlzLnN0YXRlLmV2ZW50U291cmNlcztcbiAgICAgICAgdmFyIHNvdXJjZUFwaXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaW50ZXJuYWxJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICBzb3VyY2VBcGlzLnB1c2gobmV3IEV2ZW50U291cmNlQXBpKHRoaXMsIHNvdXJjZUhhc2hbaW50ZXJuYWxJZF0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlQXBpcztcbiAgICB9O1xuICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRFdmVudFNvdXJjZUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIHNvdXJjZUhhc2ggPSB0aGlzLnN0YXRlLmV2ZW50U291cmNlcztcbiAgICAgICAgaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlSGFzaFtzb3VyY2VJZF0ucHVibGljSWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLCBzb3VyY2VIYXNoW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUuYWRkRXZlbnRTb3VyY2UgPSBmdW5jdGlvbiAoc291cmNlSW5wdXQpIHtcbiAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50U291cmNlc1tzb3VyY2VJbnB1dC5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VJbnB1dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBwYXJzZUV2ZW50U291cmNlKHNvdXJjZUlucHV0LCB0aGlzKTtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlKSB7IC8vIFRPRE86IGVycm9yIG90aGVyd2lzZT9cbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLCBzb3VyY2VzOiBbZXZlbnRTb3VyY2VdIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLCBldmVudFNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVtb3ZlQWxsRXZlbnRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUycgfSk7XG4gICAgfTtcbiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVmZXRjaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyB9KTtcbiAgICB9O1xuICAgIC8vIFNjcm9sbFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgQ2FsZW5kYXIucHJvdG90eXBlLnNjcm9sbFRvVGltZSA9IGZ1bmN0aW9uICh0aW1lSW5wdXQpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24odGltZUlucHV0KTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC52aWV3LnNjcm9sbFRvRHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ2FsZW5kYXI7XG59KCkpO1xuRW1pdHRlck1peGluLm1peEludG8oQ2FsZW5kYXIpO1xuLy8gZm9yIG1lbW9pemVyc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGJ1aWxkRGF0ZUVudihsb2NhbGUsIHRpbWVab25lLCBuYW1lZFRpbWVab25lSW1wbCwgZmlyc3REYXksIHdlZWtOdW1iZXJDYWxjdWxhdGlvbiwgd2Vla0xhYmVsLCBjbWRGb3JtYXR0ZXIpIHtcbiAgICByZXR1cm4gbmV3IERhdGVFbnYoe1xuICAgICAgICBjYWxlbmRhclN5c3RlbTogJ2dyZWdvcnknLFxuICAgICAgICB0aW1lWm9uZTogdGltZVpvbmUsXG4gICAgICAgIG5hbWVkVGltZVpvbmVJbXBsOiBuYW1lZFRpbWVab25lSW1wbCxcbiAgICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICAgIHdlZWtOdW1iZXJDYWxjdWxhdGlvbjogd2Vla051bWJlckNhbGN1bGF0aW9uLFxuICAgICAgICBmaXJzdERheTogZmlyc3REYXksXG4gICAgICAgIHdlZWtMYWJlbDogd2Vla0xhYmVsLFxuICAgICAgICBjbWRGb3JtYXR0ZXI6IGNtZEZvcm1hdHRlclxuICAgIH0pO1xufVxuZnVuY3Rpb24gYnVpbGRUaGVtZShjYWxlbmRhck9wdGlvbnMpIHtcbiAgICB2YXIgdGhlbWVDbGFzcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLnRoZW1lQ2xhc3Nlc1tjYWxlbmRhck9wdGlvbnMudGhlbWVTeXN0ZW1dIHx8IFN0YW5kYXJkVGhlbWU7XG4gICAgcmV0dXJuIG5ldyB0aGVtZUNsYXNzKGNhbGVuZGFyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBidWlsZERlbGF5ZWRSZXJlbmRlcih3YWl0KSB7XG4gICAgdmFyIGZ1bmMgPSB0aGlzLnRyeVJlcmVuZGVyLmJpbmQodGhpcyk7XG4gICAgaWYgKHdhaXQgIT0gbnVsbCkge1xuICAgICAgICBmdW5jID0gZGVib3VuY2UoZnVuYywgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xufVxuZnVuY3Rpb24gYnVpbGRFdmVudFVpQnlTb3VyY2UoZXZlbnRTb3VyY2VzKSB7XG4gICAgcmV0dXJuIG1hcEhhc2goZXZlbnRTb3VyY2VzLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50U291cmNlLnVpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYnVpbGRFdmVudFVpQmFzZXMoZXZlbnREZWZzLCBldmVudFVpU2luZ2xlQmFzZSwgZXZlbnRVaUJ5U291cmNlKSB7XG4gICAgdmFyIGV2ZW50VWlCYXNlcyA9IHsgJyc6IGV2ZW50VWlTaW5nbGVCYXNlIH07XG4gICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnREZWZzKSB7XG4gICAgICAgIHZhciBkZWYgPSBldmVudERlZnNbZGVmSWRdO1xuICAgICAgICBpZiAoZGVmLnNvdXJjZUlkICYmIGV2ZW50VWlCeVNvdXJjZVtkZWYuc291cmNlSWRdKSB7XG4gICAgICAgICAgICBldmVudFVpQmFzZXNbZGVmSWRdID0gZXZlbnRVaUJ5U291cmNlW2RlZi5zb3VyY2VJZF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50VWlCYXNlcztcbn1cblxudmFyIFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZpZXcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlldyhjb250ZXh0LCB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQsIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtdmlldyBmYy0nICsgdmlld1NwZWMudHlwZSArICctdmlldycgfSksIHRydWUgLy8gaXNWaWV3IChIQUNLKVxuICAgICAgICApIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJlbmRlckRhdGVzTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJEYXRlc1dyYXAsIF90aGlzLnVucmVuZGVyRGF0ZXNXcmFwKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQnVzaW5lc3NIb3Vyc01lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyQnVzaW5lc3NIb3VycywgX3RoaXMudW5yZW5kZXJCdXNpbmVzc0hvdXJzLCBbX3RoaXMucmVuZGVyRGF0ZXNNZW1dKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbk1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIF90aGlzLnVucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudHNNZW0gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckV2ZW50cywgX3RoaXMudW5yZW5kZXJFdmVudHMsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbk1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRXZlbnRTZWxlY3Rpb25XcmFwLCBfdGhpcy51bnJlbmRlckV2ZW50U2VsZWN0aW9uV3JhcCwgW190aGlzLnJlbmRlckV2ZW50c01lbV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudERyYWdNZW0gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckV2ZW50RHJhZ1dyYXAsIF90aGlzLnVucmVuZGVyRXZlbnREcmFnV3JhcCwgW190aGlzLnJlbmRlckRhdGVzTWVtXSk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50UmVzaXplTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJFdmVudFJlc2l6ZVdyYXAsIF90aGlzLnVucmVuZGVyRXZlbnRSZXNpemVXcmFwLCBbX3RoaXMucmVuZGVyRGF0ZXNNZW1dKTtcbiAgICAgICAgX3RoaXMudmlld1NwZWMgPSB2aWV3U3BlYztcbiAgICAgICAgX3RoaXMuZGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSBkYXRlUHJvZmlsZUdlbmVyYXRvcjtcbiAgICAgICAgX3RoaXMudHlwZSA9IHZpZXdTcGVjLnR5cGU7XG4gICAgICAgIF90aGlzLmV2ZW50T3JkZXJTcGVjcyA9IHBhcnNlRmllbGRTcGVjcyhfdGhpcy5vcHQoJ2V2ZW50T3JkZXInKSk7XG4gICAgICAgIF90aGlzLm5leHREYXlUaHJlc2hvbGQgPSBjcmVhdGVEdXJhdGlvbihfdGhpcy5vcHQoJ25leHREYXlUaHJlc2hvbGQnKSk7XG4gICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKF90aGlzLmVsKTtcbiAgICAgICAgX3RoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwiYWN0aXZlU3RhcnRcIiwge1xuICAgICAgICAvLyBEYXRlIFNldHRpbmcvVW5zZXR0aW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZS5zdGFydCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3LnByb3RvdHlwZSwgXCJhY3RpdmVFbmRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYudG9EYXRlKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UuZW5kKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXcucHJvdG90eXBlLCBcImN1cnJlbnRTdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2Uuc3RhcnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwiY3VycmVudEVuZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UuZW5kKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLy8gR2VuZXJhbCBSZW5kZXJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVzTWVtKHByb3BzLmRhdGVQcm9maWxlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCdXNpbmVzc0hvdXJzTWVtKHByb3BzLmJ1c2luZXNzSG91cnMpO1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb25NZW0ocHJvcHMuZGF0ZVNlbGVjdGlvbik7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRzTWVtKHByb3BzLmV2ZW50U3RvcmUpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uTWVtKHByb3BzLmV2ZW50U2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWdNZW0ocHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZU1lbShwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlc01lbS51bnJlbmRlcigpOyAvLyBzaG91bGQgdW5yZW5kZXIgZXZlcnl0aGluZyBlbHNlXG4gICAgfTtcbiAgICAvLyBTaXppbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0bykge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNhbGVuZGFyO1xuICAgICAgICBpZiAoaXNSZXNpemUgfHwgLy8gSEFDS1MuLi5cbiAgICAgICAgICAgIGNhbGVuZGFyLmlzVmlld1VwZGF0ZWQgfHxcbiAgICAgICAgICAgIGNhbGVuZGFyLmlzRGF0ZXNVcGRhdGVkIHx8XG4gICAgICAgICAgICBjYWxlbmRhci5pc0V2ZW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIC8vIHNvcnQgb2YgdGhlIGNhdGNoLWFsbCBzaXppbmdcbiAgICAgICAgICAgIC8vIGFueXRoaW5nIHRoYXQgbWlnaHQgY2F1c2UgZGltZW5zaW9uIGNoYW5nZXNcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQmFzZVNpemUoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZUJhc2VTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB2aWV3SGVpZ2h0LCBpc0F1dG8pIHtcbiAgICB9O1xuICAgIC8vIERhdGUgUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJEYXRlc1dyYXAgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlcyhkYXRlUHJvZmlsZSk7XG4gICAgICAgIHRoaXMuYWRkU2Nyb2xsKHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbih0aGlzLm9wdCgnc2Nyb2xsVGltZScpKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFydE5vd0luZGljYXRvcihkYXRlUHJvZmlsZSk7IC8vIHNob3VsZG4ndCByZW5kZXIgeWV0IGJlY2F1c2UgdXBkYXRlU2l6ZSB3aWxsIGJlIGNhbGxlZCBzb29uXG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVzV3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wTm93SW5kaWNhdG9yKCk7XG4gICAgICAgIHRoaXMudW5yZW5kZXJEYXRlcygpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRGF0ZXMgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8vIEJ1c2luZXNzIEhvdXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJCdXNpbmVzc0hvdXJzID0gZnVuY3Rpb24gKGJ1c2luZXNzSG91cnMpIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckJ1c2luZXNzSG91cnMgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLy8gRGF0ZSBTZWxlY3Rpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckRhdGVTZWxlY3Rpb25XcmFwID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJEYXRlU2VsZWN0aW9uV3JhcCA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckRhdGVTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHsgfTtcbiAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IH07XG4gICAgLy8gRXZlbnQgUmVuZGVyaW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudHMgPSBmdW5jdGlvbiAoZXZlbnRTdG9yZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8vIHV0aWwgZm9yIHN1YmNsYXNzZXNcbiAgICBWaWV3LnByb3RvdHlwZS5zbGljZUV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBhbGxEYXkpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIHNsaWNlRXZlbnRTdG9yZShldmVudFN0b3JlLCBwcm9wcy5ldmVudFVpQmFzZXMsIHByb3BzLmRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBhbGxEYXkgPyB0aGlzLm5leHREYXlUaHJlc2hvbGQgOiBudWxsKS5mZztcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVFdmVudERyYWdnYWJsZSA9IGZ1bmN0aW9uIChldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXJzID0gdGhpcy5jYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM7XG4gICAgICAgIHZhciB2YWwgPSBldmVudFVpLnN0YXJ0RWRpdGFibGU7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgdHJhbnNmb3JtZXJzXzEgPSB0cmFuc2Zvcm1lcnM7IF9pIDwgdHJhbnNmb3JtZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcnNfMVtfaV07XG4gICAgICAgICAgICB2YWwgPSB0cmFuc2Zvcm1lcih2YWwsIGV2ZW50RGVmLCBldmVudFVpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUgPSBmdW5jdGlvbiAoZXZlbnREZWYsIGV2ZW50VWkpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50VWkuZHVyYXRpb25FZGl0YWJsZSAmJiB0aGlzLm9wdCgnZXZlbnRSZXNpemFibGVGcm9tU3RhcnQnKTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVFdmVudEVuZFJlc2l6YWJsZSA9IGZ1bmN0aW9uIChldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICByZXR1cm4gZXZlbnRVaS5kdXJhdGlvbkVkaXRhYmxlO1xuICAgIH07XG4gICAgLy8gRXZlbnQgU2VsZWN0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFNlbGVjdGlvbldyYXAgPSBmdW5jdGlvbiAoaW5zdGFuY2VJZCkge1xuICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbihpbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFNlbGVjdGlvbldyYXAgPSBmdW5jdGlvbiAoaW5zdGFuY2VJZCkge1xuICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50U2VsZWN0aW9uKGluc3RhbmNlSWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7IH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7IH07XG4gICAgLy8gRXZlbnQgRHJhZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyRXZlbnREcmFnV3JhcCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnREcmFnKHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudERyYWdXcmFwID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50RHJhZyhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7IH07XG4gICAgLy8gRXZlbnQgUmVzaXplXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFJlc2l6ZVdyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckV2ZW50UmVzaXplKHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFJlc2l6ZVdyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnVucmVuZGVyRXZlbnRSZXNpemUoc3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFJlc2l6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRSZXNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHsgfTtcbiAgICAvKiBOb3cgSW5kaWNhdG9yXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBJbW1lZGlhdGVseSByZW5kZXIgdGhlIGN1cnJlbnQgdGltZSBpbmRpY2F0b3IgYW5kIGJlZ2lucyByZS1yZW5kZXJpbmcgaXQgYXQgYW4gaW50ZXJ2YWwsXG4gICAgLy8gd2hpY2ggaXMgZGVmaW5lZCBieSB0aGlzLmdldE5vd0luZGljYXRvclVuaXQoKS5cbiAgICAvLyBUT0RPOiBzb21laG93IGRvIHRoaXMgZm9yIHRoZSBjdXJyZW50IHdob2xlIGRheSdzIGJhY2tncm91bmQgdG9vXG4gICAgVmlldy5wcm90b3R5cGUuc3RhcnROb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciB1bml0O1xuICAgICAgICB2YXIgdXBkYXRlO1xuICAgICAgICB2YXIgZGVsYXk7IC8vIG1zIHdhaXQgdmFsdWVcbiAgICAgICAgaWYgKHRoaXMub3B0KCdub3dJbmRpY2F0b3InKSkge1xuICAgICAgICAgICAgdW5pdCA9IHRoaXMuZ2V0Tm93SW5kaWNhdG9yVW5pdChkYXRlUHJvZmlsZSk7XG4gICAgICAgICAgICBpZiAodW5pdCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRoaXMudXBkYXRlTm93SW5kaWNhdG9yLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsTm93RGF0ZSA9IHRoaXMuY2FsZW5kYXIuZ2V0Tm93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsTm93UXVlcmllZE1zID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgLy8gd2FpdCB1bnRpbCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGludGVydmFsXG4gICAgICAgICAgICAgICAgZGVsYXkgPSBkYXRlRW52LmFkZChkYXRlRW52LnN0YXJ0T2YodGhpcy5pbml0aWFsTm93RGF0ZSwgdW5pdCksIGNyZWF0ZUR1cmF0aW9uKDEsIHVuaXQpKS52YWx1ZU9mKCkgLSB0aGlzLmluaXRpYWxOb3dEYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBhbHdheXMgdXNlIHNldFRpbWVvdXQsIHdhaXRpbmcgdW50aWwgc3RhcnQgb2YgbmV4dCB1bml0XG4gICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubm93SW5kaWNhdG9yVGltZW91dElEID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bml0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAxMDAwOyAvLyBldmVyeSBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMTAwMCAqIDYwOyAvLyBvdGhlcndpc2UsIGV2ZXJ5IG1pbnV0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm5vd0luZGljYXRvckludGVydmFsSUQgPSBzZXRJbnRlcnZhbCh1cGRhdGUsIGRlbGF5KTsgLy8gdXBkYXRlIGV2ZXJ5IGludGVydmFsXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVuZGVyaW5nIHdpbGwgYmUgaW5pdGlhdGVkIGluIHVwZGF0ZVNpemVcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gcmVyZW5kZXJzIHRoZSBub3cgaW5kaWNhdG9yLCBjb21wdXRpbmcgdGhlIG5ldyBjdXJyZW50IHRpbWUgZnJvbSB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXMgcGFzc2VkXG4gICAgLy8gc2luY2UgdGhlIGluaXRpYWwgZ2V0Tm93IGNhbGwuXG4gICAgVmlldy5wcm90b3R5cGUudXBkYXRlTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSAmJiAvLyBhIHdheSB0byBkZXRlcm1pbmUgaWYgZGF0ZXMgd2VyZSByZW5kZXJlZCB5ZXRcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbE5vd0RhdGUgLy8gYWN0aXZhdGVkIGJlZm9yZT9cbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnVucmVuZGVyTm93SW5kaWNhdG9yKCk7IC8vIHdvbid0IHVucmVuZGVyIGlmIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vd0luZGljYXRvcihhZGRNcyh0aGlzLmluaXRpYWxOb3dEYXRlLCBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHRoaXMuaW5pdGlhbE5vd1F1ZXJpZWRNcykpO1xuICAgICAgICAgICAgdGhpcy5pc05vd0luZGljYXRvclJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSW1tZWRpYXRlbHkgdW5yZW5kZXJzIHRoZSB2aWV3J3MgY3VycmVudCB0aW1lIGluZGljYXRvciBhbmQgc3RvcHMgYW55IHJlLXJlbmRlcmluZyB0aW1lcnMuXG4gICAgLy8gV29uJ3QgY2F1c2Ugc2lkZSBlZmZlY3RzIGlmIGluZGljYXRvciBpc24ndCByZW5kZXJlZC5cbiAgICBWaWV3LnByb3RvdHlwZS5zdG9wTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc05vd0luZGljYXRvclJlbmRlcmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQpO1xuICAgICAgICAgICAgICAgIHRoaXMubm93SW5kaWNhdG9yVGltZW91dElEID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm5vd0luZGljYXRvckludGVydmFsSUQpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMubm93SW5kaWNhdG9ySW50ZXJ2YWxJRCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JJbnRlcnZhbElEID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudW5yZW5kZXJOb3dJbmRpY2F0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuaXNOb3dJbmRpY2F0b3JSZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5nZXROb3dJbmRpY2F0b3JVbml0ID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIC8vIHN1YmNsYXNzZXMgc2hvdWxkIGltcGxlbWVudFxuICAgIH07XG4gICAgLy8gUmVuZGVycyBhIGN1cnJlbnQgdGltZSBpbmRpY2F0b3IgYXQgdGhlIGdpdmVuIGRhdGV0aW1lXG4gICAgVmlldy5wcm90b3R5cGUucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgLy8gU1VCQ0xBU1NFUyBNVVNUIFBBU1MgVE8gQ0hJTERSRU4hXG4gICAgfTtcbiAgICAvLyBVbmRvZXMgdGhlIHJlbmRlcmluZyBhY3Rpb25zIGZyb20gcmVuZGVyTm93SW5kaWNhdG9yXG4gICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNVQkNMQVNTRVMgTVVTVCBQQVNTIFRPIENISUxEUkVOIVxuICAgIH07XG4gICAgLyogU2Nyb2xsZXJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIFZpZXcucHJvdG90eXBlLmFkZFNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwpIHtcbiAgICAgICAgdmFyIHF1ZXVlZFNjcm9sbCA9IHRoaXMucXVldWVkU2Nyb2xsIHx8ICh0aGlzLnF1ZXVlZFNjcm9sbCA9IHt9KTtcbiAgICAgICAgX19hc3NpZ24ocXVldWVkU2Nyb2xsLCBzY3JvbGwpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucG9wU2Nyb2xsID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIHRoaXMuYXBwbHlRdWV1ZWRTY3JvbGwoaXNSZXNpemUpO1xuICAgICAgICB0aGlzLnF1ZXVlZFNjcm9sbCA9IG51bGw7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5hcHBseVF1ZXVlZFNjcm9sbCA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSkge1xuICAgICAgICB0aGlzLmFwcGx5U2Nyb2xsKHRoaXMucXVldWVkU2Nyb2xsIHx8IHt9LCBpc1Jlc2l6ZSk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5xdWVyeVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHt9O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSkgeyAvLyBkYXRlcyByZW5kZXJlZCB5ZXQ/XG4gICAgICAgICAgICBfX2Fzc2lnbihzY3JvbGwsIHRoaXMucXVlcnlEYXRlU2Nyb2xsKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY3JvbGw7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5hcHBseVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwsIGlzUmVzaXplKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHNjcm9sbC5kdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzY3JvbGwuZHVyYXRpb247XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSkgeyAvLyBkYXRlcyByZW5kZXJlZCB5ZXQ/XG4gICAgICAgICAgICAgICAgX19hc3NpZ24oc2Nyb2xsLCB0aGlzLmNvbXB1dGVEYXRlU2Nyb2xsKGR1cmF0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUpIHsgLy8gZGF0ZXMgcmVuZGVyZWQgeWV0P1xuICAgICAgICAgICAgdGhpcy5hcHBseURhdGVTY3JvbGwoc2Nyb2xsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHt9OyAvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5xdWVyeURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fTsgLy8gc3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudFxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICAvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50XG4gICAgfTtcbiAgICAvLyBmb3IgQVBJXG4gICAgVmlldy5wcm90b3R5cGUuc2Nyb2xsVG9EdXJhdGlvbiA9IGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB0aGlzLmFwcGx5U2Nyb2xsKHsgZHVyYXRpb246IGR1cmF0aW9uIH0sIGZhbHNlKTtcbiAgICB9O1xuICAgIHJldHVybiBWaWV3O1xufShEYXRlQ29tcG9uZW50KSk7XG5FbWl0dGVyTWl4aW4ubWl4SW50byhWaWV3KTtcblZpZXcucHJvdG90eXBlLnVzZXNNaW5NYXhUaW1lID0gZmFsc2U7XG5WaWV3LnByb3RvdHlwZS5kYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzID0gRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG5cbnZhciBGZ0V2ZW50UmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmdFdmVudFJlbmRlcmVyKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5zZWdzID0gW107XG4gICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdGhpcy5yYW5nZVVwZGF0ZWQoKTsgLy8gY2FsbGVkIHRvbyBmcmVxdWVudGx5IDooXG4gICAgICAgIC8vIHJlbmRlciBhbiBgLmVsYCBvbiBlYWNoIHNlZ1xuICAgICAgICAvLyByZXR1cm5zIGEgc3Vic2V0IG9mIHRoZSBzZWdzLiBzZWdzIHRoYXQgd2VyZSBhY3R1YWxseSByZW5kZXJlZFxuICAgICAgICBzZWdzID0gdGhpcy5yZW5kZXJTZWdFbHMoc2VncywgbWlycm9ySW5mbyk7XG4gICAgICAgIHRoaXMuc2VncyA9IHNlZ3M7XG4gICAgICAgIHRoaXMuYXR0YWNoU2VncyhzZWdzLCBtaXJyb3JJbmZvKTtcbiAgICAgICAgdGhpcy5pc1NpemVEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuY29udGV4dC52aWV3LnRyaWdnZXJSZW5kZXJlZFNlZ3ModGhpcy5zZWdzLCBCb29sZWFuKG1pcnJvckluZm8pKTtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUudW5yZW5kZXIgPSBmdW5jdGlvbiAoX3NlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnZpZXcudHJpZ2dlcldpbGxSZW1vdmVTZWdzKHRoaXMuc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgIHRoaXMuZGV0YWNoU2Vncyh0aGlzLnNlZ3MpO1xuICAgICAgICB0aGlzLnNlZ3MgPSBbXTtcbiAgICB9O1xuICAgIC8vIFVwZGF0ZXMgdmFsdWVzIHRoYXQgcmVseSBvbiBvcHRpb25zIGFuZCBhbHNvIHJlbGF0ZSB0byByYW5nZVxuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUucmFuZ2VVcGRhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuY29udGV4dC5vcHRpb25zO1xuICAgICAgICB2YXIgZGlzcGxheUV2ZW50VGltZTtcbiAgICAgICAgdmFyIGRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgdGhpcy5ldmVudFRpbWVGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIob3B0aW9ucy5ldmVudFRpbWVGb3JtYXQgfHwgdGhpcy5jb21wdXRlRXZlbnRUaW1lRm9ybWF0KCksIG9wdGlvbnMuZGVmYXVsdFJhbmdlU2VwYXJhdG9yKTtcbiAgICAgICAgZGlzcGxheUV2ZW50VGltZSA9IG9wdGlvbnMuZGlzcGxheUV2ZW50VGltZTtcbiAgICAgICAgaWYgKGRpc3BsYXlFdmVudFRpbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGxheUV2ZW50VGltZSA9IHRoaXMuY29tcHV0ZURpc3BsYXlFdmVudFRpbWUoKTsgLy8gbWlnaHQgYmUgYmFzZWQgb2ZmIG9mIHJhbmdlXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGxheUV2ZW50RW5kID0gb3B0aW9ucy5kaXNwbGF5RXZlbnRFbmQ7XG4gICAgICAgIGlmIChkaXNwbGF5RXZlbnRFbmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGxheUV2ZW50RW5kID0gdGhpcy5jb21wdXRlRGlzcGxheUV2ZW50RW5kKCk7IC8vIG1pZ2h0IGJlIGJhc2VkIG9mZiBvZiByYW5nZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGxheUV2ZW50VGltZSA9IGRpc3BsYXlFdmVudFRpbWU7XG4gICAgICAgIHRoaXMuZGlzcGxheUV2ZW50RW5kID0gZGlzcGxheUV2ZW50RW5kO1xuICAgIH07XG4gICAgLy8gUmVuZGVycyBhbmQgYXNzaWducyBhbiBgZWxgIHByb3BlcnR5IGZvciBlYWNoIGZvcmVncm91bmQgZXZlbnQgc2VnbWVudC5cbiAgICAvLyBPbmx5IHJldHVybnMgc2VnbWVudHMgdGhhdCBzdWNjZXNzZnVsbHkgcmVuZGVyZWQuXG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdFbHMgPSBmdW5jdGlvbiAoc2VncywgbWlycm9ySW5mbykge1xuICAgICAgICB2YXIgaHRtbCA9ICcnO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHNlZ3MubGVuZ3RoKSB7IC8vIGRvbid0IGJ1aWxkIGFuIGVtcHR5IGh0bWwgc3RyaW5nXG4gICAgICAgICAgICAvLyBidWlsZCBhIGxhcmdlIGNvbmNhdGVuYXRpb24gb2YgZXZlbnQgc2VnbWVudCBIVE1MXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJTZWdIdG1sKHNlZ3NbaV0sIG1pcnJvckluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR3JhYiBpbmRpdmlkdWFsIGVsZW1lbnRzIGZyb20gdGhlIGNvbWJpbmVkIEhUTUwgc3RyaW5nLiBVc2UgZWFjaCBhcyB0aGUgZGVmYXVsdCByZW5kZXJpbmcuXG4gICAgICAgICAgICAvLyBUaGVuLCBjb21wdXRlIHRoZSAnZWwnIGZvciBlYWNoIHNlZ21lbnQuIEFuIGVsIG1pZ2h0IGJlIG51bGwgaWYgdGhlIGV2ZW50UmVuZGVyIGNhbGxiYWNrIHJldHVybmVkIGZhbHNlLlxuICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWdzID0gZmlsdGVyU2Vnc1ZpYUVscyh0aGlzLmNvbnRleHQudmlldywgc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICAvLyBHZW5lcmljIHV0aWxpdHkgZm9yIGdlbmVyYXRpbmcgdGhlIEhUTUwgY2xhc3NOYW1lcyBmb3IgYW4gZXZlbnQgc2VnbWVudCdzIGVsZW1lbnRcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNlZ0NsYXNzZXMgPSBmdW5jdGlvbiAoc2VnLCBpc0RyYWdnYWJsZSwgaXNSZXNpemFibGUsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBbXG4gICAgICAgICAgICAnZmMtZXZlbnQnLFxuICAgICAgICAgICAgc2VnLmlzU3RhcnQgPyAnZmMtc3RhcnQnIDogJ2ZjLW5vdC1zdGFydCcsXG4gICAgICAgICAgICBzZWcuaXNFbmQgPyAnZmMtZW5kJyA6ICdmYy1ub3QtZW5kJ1xuICAgICAgICBdLmNvbmNhdChzZWcuZXZlbnRSYW5nZS51aS5jbGFzc05hbWVzKTtcbiAgICAgICAgaWYgKGlzRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRyYWdnYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Jlc2l6YWJsZSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1yZXNpemFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlycm9ySW5mbykge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1taXJyb3InKTtcbiAgICAgICAgICAgIGlmIChtaXJyb3JJbmZvLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWlycm9ySW5mby5pc1Jlc2l6aW5nKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1yZXNpemluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgIH07XG4gICAgLy8gQ29tcHV0ZSB0aGUgdGV4dCB0aGF0IHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gYW4gZXZlbnQncyBlbGVtZW50LlxuICAgIC8vIGByYW5nZWAgY2FuIGJlIHRoZSBFdmVudCBvYmplY3QgaXRzZWxmLCBvciBzb21ldGhpbmcgcmFuZ2UtbGlrZSwgd2l0aCBhdCBsZWFzdCBhIGBzdGFydGAuXG4gICAgLy8gSWYgZXZlbnQgdGltZXMgYXJlIGRpc2FibGVkLCBvciB0aGUgZXZlbnQgaGFzIG5vIHRpbWUsIHdpbGwgcmV0dXJuIGEgYmxhbmsgc3RyaW5nLlxuICAgIC8vIElmIG5vdCBzcGVjaWZpZWQsIGZvcm1hdHRlciB3aWxsIGRlZmF1bHQgdG8gdGhlIGV2ZW50VGltZUZvcm1hdCBzZXR0aW5nLFxuICAgIC8vIGFuZCBkaXNwbGF5RW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgZGlzcGxheUV2ZW50RW5kIHNldHRpbmcuXG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5nZXRUaW1lVGV4dCA9IGZ1bmN0aW9uIChldmVudFJhbmdlLCBmb3JtYXR0ZXIsIGRpc3BsYXlFbmQpIHtcbiAgICAgICAgdmFyIGRlZiA9IGV2ZW50UmFuZ2UuZGVmLCBpbnN0YW5jZSA9IGV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUaW1lVGV4dChpbnN0YW5jZS5yYW5nZS5zdGFydCwgZGVmLmhhc0VuZCA/IGluc3RhbmNlLnJhbmdlLmVuZCA6IG51bGwsIGRlZi5hbGxEYXksIGZvcm1hdHRlciwgZGlzcGxheUVuZCwgaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sIGluc3RhbmNlLmZvcmNlZEVuZFR6byk7XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLl9nZXRUaW1lVGV4dCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBhbGxEYXksIGZvcm1hdHRlciwgZGlzcGxheUVuZCwgZm9yY2VkU3RhcnRUem8sIGZvcmNlZEVuZFR6bykge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuY29udGV4dC5kYXRlRW52O1xuICAgICAgICBpZiAoZm9ybWF0dGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlciA9IHRoaXMuZXZlbnRUaW1lRm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5RW5kID09IG51bGwpIHtcbiAgICAgICAgICAgIGRpc3BsYXlFbmQgPSB0aGlzLmRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5RXZlbnRUaW1lICYmICFhbGxEYXkpIHtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5RW5kICYmIGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKHN0YXJ0LCBlbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRTdGFydFR6bzogZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlZEVuZFR6bzogZm9yY2VkRW5kVHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem86IGZvcmNlZFN0YXJ0VHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRXZlbnRUaW1lRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBvbWl0WmVyb01pbnV0ZTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRGlzcGxheUV2ZW50VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVEaXNwbGF5RXZlbnRFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgLy8gVXRpbGl0eSBmb3IgZ2VuZXJhdGluZyBldmVudCBza2luLXJlbGF0ZWQgQ1NTIHByb3BlcnRpZXNcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNraW5Dc3MgPSBmdW5jdGlvbiAodWkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogdWkuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6IHVpLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgY29sb3I6IHVpLnRleHRDb2xvclxuICAgICAgICB9O1xuICAgIH07XG4gICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5zb3J0RXZlbnRTZWdzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHNwZWNzID0gdGhpcy5jb250ZXh0LnZpZXcuZXZlbnRPcmRlclNwZWNzO1xuICAgICAgICB2YXIgb2JqcyA9IHNlZ3MubWFwKGJ1aWxkU2VnQ29tcGFyZU9iaik7XG4gICAgICAgIG9ianMuc29ydChmdW5jdGlvbiAob2JqMCwgb2JqMSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgc3BlY3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9ianMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5fc2VnO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLmlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVTZWdTaXplcyh0aGlzLnNlZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLmlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmFzc2lnblNlZ1NpemVzKHRoaXMuc2Vncyk7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICB9O1xuICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgIH07XG4gICAgLy8gTWFuaXB1bGF0aW9uIG9uIHJlbmRlcmVkIHNlZ3NcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmhpZGVCeUhhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnNob3dCeUhhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmIChoYXNoW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnNlbGVjdEJ5SW5zdGFuY2VJZCA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zZWdzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SW5zdGFuY2UgPSBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRJbnN0YW5jZSAmJiBldmVudEluc3RhbmNlLmluc3RhbmNlSWQgPT09IGluc3RhbmNlSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsIC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnVuc2VsZWN0QnlJbnN0YW5jZUlkID0gZnVuY3Rpb24gKGluc3RhbmNlSWQpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoc2VnLmVsKSB7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZjLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmdFdmVudFJlbmRlcmVyO1xufSgpKTtcbi8vIHJldHVybnMgYSBvYmplY3Qgd2l0aCBhbGwgcHJpbWl0aXZlIHByb3BzIHRoYXQgY2FuIGJlIGNvbXBhcmVkXG5mdW5jdGlvbiBidWlsZFNlZ0NvbXBhcmVPYmooc2VnKSB7XG4gICAgdmFyIGV2ZW50RGVmID0gc2VnLmV2ZW50UmFuZ2UuZGVmO1xuICAgIHZhciByYW5nZSA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLnJhbmdlO1xuICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0ID8gcmFuZ2Uuc3RhcnQudmFsdWVPZigpIDogMDsgLy8gVE9ETzogYmV0dGVyIHN1cHBvcnQgZm9yIG9wZW4tcmFuZ2UgZXZlbnRzXG4gICAgdmFyIGVuZCA9IHJhbmdlLmVuZCA/IHJhbmdlLmVuZC52YWx1ZU9mKCkgOiAwOyAvLyBcIlxuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgZXZlbnREZWYuZXh0ZW5kZWRQcm9wcywgZXZlbnREZWYsIHsgaWQ6IGV2ZW50RGVmLnB1YmxpY0lkLCBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogZW5kLCBkdXJhdGlvbjogZW5kIC0gc3RhcnQsIGFsbERheTogTnVtYmVyKGV2ZW50RGVmLmFsbERheSksIF9zZWc6IHNlZyAvLyBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgIH0pO1xufVxuXG52YXIgRmlsbFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGxSZW5kZXJlcihjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZmlsbFNlZ1RhZyA9ICdkaXYnO1xuICAgICAgICB0aGlzLmRpcnR5U2l6ZUZsYWdzID0ge307XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWxzQnlUeXBlID0ge307XG4gICAgICAgIHRoaXMuc2Vnc0J5VHlwZSA9IHt9O1xuICAgIH1cbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmdldFNlZ3NCeVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdzQnlUeXBlW3R5cGVdIHx8IFtdO1xuICAgIH07XG4gICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcmVuZGVyZWRTZWdzID0gdGhpcy5yZW5kZXJTZWdFbHModHlwZSwgc2Vncyk7IC8vIGFzc2lnbmVzIGAuZWxgIHRvIGVhY2ggc2VnLiByZXR1cm5zIHN1Y2Nlc3NmdWxseSByZW5kZXJlZCBzZWdzXG4gICAgICAgIHZhciBjb250YWluZXJFbHMgPSB0aGlzLmF0dGFjaFNlZ3ModHlwZSwgcmVuZGVyZWRTZWdzKTtcbiAgICAgICAgaWYgKGNvbnRhaW5lckVscykge1xuICAgICAgICAgICAgKF9hID0gKHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdIHx8ICh0aGlzLmNvbnRhaW5lckVsc0J5VHlwZVt0eXBlXSA9IFtdKSkpLnB1c2guYXBwbHkoX2EsIGNvbnRhaW5lckVscyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWdzQnlUeXBlW3R5cGVdID0gcmVuZGVyZWRTZWdzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudmlldy50cmlnZ2VyUmVuZGVyZWRTZWdzKHJlbmRlcmVkU2VncywgZmFsc2UpOyAvLyBpc01pcnJvcj1mYWxzZVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlydHlTaXplRmxhZ3NbdHlwZV0gPSB0cnVlO1xuICAgIH07XG4gICAgLy8gVW5yZW5kZXJzIGEgc3BlY2lmaWMgdHlwZSBvZiBmaWxsIHRoYXQgaXMgY3VycmVudGx5IHJlbmRlcmVkIG9uIHRoZSBncmlkXG4gICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS51bnJlbmRlciA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBzZWdzID0gdGhpcy5zZWdzQnlUeXBlW3R5cGVdO1xuICAgICAgICBpZiAoc2Vncykge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdiZ0V2ZW50Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC52aWV3LnRyaWdnZXJXaWxsUmVtb3ZlU2VncyhzZWdzLCBmYWxzZSk7IC8vIGlzTWlycm9yPWZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldGFjaFNlZ3ModHlwZSwgc2Vncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJlbmRlcnMgYW5kIGFzc2lnbnMgYW4gYGVsYCBwcm9wZXJ0eSBmb3IgZWFjaCBmaWxsIHNlZ21lbnQuIEdlbmVyaWMgZW5vdWdoIHRvIHdvcmsgd2l0aCBkaWZmZXJlbnQgdHlwZXMuXG4gICAgLy8gT25seSByZXR1cm5zIHNlZ21lbnRzIHRoYXQgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkLlxuICAgIEZpbGxSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyU2VnRWxzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGh0bWwgPSAnJztcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChzZWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gYnVpbGQgYSBsYXJnZSBjb25jYXRlbmF0aW9uIG9mIHNlZ21lbnQgSFRNTFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBodG1sICs9IHRoaXMucmVuZGVyU2VnSHRtbCh0eXBlLCBzZWdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdyYWIgaW5kaXZpZHVhbCBlbGVtZW50cyBmcm9tIHRoZSBjb21iaW5lZCBIVE1MIHN0cmluZy4gVXNlIGVhY2ggYXMgdGhlIGRlZmF1bHQgcmVuZGVyaW5nLlxuICAgICAgICAgICAgLy8gVGhlbiwgY29tcHV0ZSB0aGUgJ2VsJyBmb3IgZWFjaCBzZWdtZW50LlxuICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgc2VncyA9IGZpbHRlclNlZ3NWaWFFbHModGhpcy5jb250ZXh0LnZpZXcsIHNlZ3MsIGZhbHNlIC8vIGlzTWlycm9yLiBiYWNrZ3JvdW5kIGV2ZW50cyBjYW4gbmV2ZXIgYmUgbWlycm9yIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcnJlY3QgZWxlbWVudCB0eXBlPyAod291bGQgYmUgYmFkIGlmIGEgbm9uLVREIHdlcmUgaW5zZXJ0ZWQgaW50byBhIHRhYmxlIGZvciBleGFtcGxlKVxuICAgICAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudE1hdGNoZXMoc2VnLmVsLCBfdGhpcy5maWxsU2VnVGFnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBIVE1MIG5lZWRlZCBmb3Igb25lIGZpbGwgc2VnbWVudC4gR2VuZXJpYyBlbm91Z2ggdG8gd29yayB3aXRoIGRpZmZlcmVudCB0eXBlcy5cbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ0h0bWwgPSBmdW5jdGlvbiAodHlwZSwgc2VnKSB7XG4gICAgICAgIHZhciBjc3MgPSBudWxsO1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtdO1xuICAgICAgICBpZiAodHlwZSAhPT0gJ2hpZ2hsaWdodCcgJiYgdHlwZSAhPT0gJ2J1c2luZXNzSG91cnMnKSB7XG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBzZWcuZXZlbnRSYW5nZS51aS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgIT09ICdoaWdobGlnaHQnKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzID0gY2xhc3NOYW1lcy5jb25jYXQoc2VnLmV2ZW50UmFuZ2UudWkuY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1iZ2V2ZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLScgKyB0eXBlLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPCcgKyB0aGlzLmZpbGxTZWdUYWcgK1xuICAgICAgICAgICAgKGNsYXNzTmFtZXMubGVuZ3RoID8gJyBjbGFzcz1cIicgKyBjbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgOiAnJykgK1xuICAgICAgICAgICAgKGNzcyA/ICcgc3R5bGU9XCInICsgY3NzVG9TdHIoY3NzKSArICdcIicgOiAnJykgK1xuICAgICAgICAgICAgJz48LycgKyB0aGlzLmZpbGxTZWdUYWcgKyAnPic7XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmRldGFjaFNlZ3MgPSBmdW5jdGlvbiAodHlwZSwgc2Vncykge1xuICAgICAgICB2YXIgY29udGFpbmVyRWxzID0gdGhpcy5jb250YWluZXJFbHNCeVR5cGVbdHlwZV07XG4gICAgICAgIGlmIChjb250YWluZXJFbHMpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckVscy5mb3JFYWNoKHJlbW92ZUVsZW1lbnQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTaXplcyA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3IgKHZhciB0eXBlIGluIHRoaXMuc2Vnc0J5VHlwZSkge1xuICAgICAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMuZGlydHlTaXplRmxhZ3NbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVTZWdTaXplcyh0aGlzLnNlZ3NCeVR5cGVbdHlwZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIGZvciAodmFyIHR5cGUgaW4gdGhpcy5zZWdzQnlUeXBlKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy5kaXJ0eVNpemVGbGFnc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduU2VnU2l6ZXModGhpcy5zZWdzQnlUeXBlW3R5cGVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpcnR5U2l6ZUZsYWdzID0ge307XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTZWdTaXplcyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgfTtcbiAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICB9O1xuICAgIHJldHVybiBGaWxsUmVuZGVyZXI7XG59KCkpO1xuXG52YXIgTmFtZWRUaW1lWm9uZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmVOYW1lKSB7XG4gICAgICAgIHRoaXMudGltZVpvbmVOYW1lID0gdGltZVpvbmVOYW1lO1xuICAgIH1cbiAgICByZXR1cm4gTmFtZWRUaW1lWm9uZUltcGw7XG59KCkpO1xuXG4vKlxuQW4gYWJzdHJhY3Rpb24gZm9yIGEgZHJhZ2dpbmcgaW50ZXJhY3Rpb24gb3JpZ2luYXRpbmcgb24gYW4gZXZlbnQuXG5Eb2VzIGhpZ2hlci1sZXZlbCB0aGluZ3MgdGhhbiBQb2ludGVyRHJhZ2dlciwgc3VjaCBhcyBwb3NzaWJseTpcbi0gYSBcIm1pcnJvclwiIHRoYXQgbW92ZXMgd2l0aCB0aGUgcG9pbnRlclxuLSBhIG1pbmltdW0gbnVtYmVyIG9mIHBpeGVscyBvciBvdGhlciBjcml0ZXJpYSBmb3IgYSB0cnVlIGRyYWcgdG8gYmVnaW5cblxuc3ViY2xhc3NlcyBtdXN0IGVtaXQ6XG4tIHBvaW50ZXJkb3duXG4tIGRyYWdzdGFydFxuLSBkcmFnbW92ZVxuLSBwb2ludGVydXBcbi0gZHJhZ2VuZFxuKi9cbnZhciBFbGVtZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudERyYWdnaW5nKGVsKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyTWl4aW4oKTtcbiAgICB9XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAvLyBvcHRpb25hbCBpZiBzdWJjbGFzcyBkb2Vzbid0IHdhbnQgdG8gc3VwcG9ydCBhIG1pcnJvclxuICAgIH07XG4gICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JOZWVkc1JldmVydCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIC8vIG9wdGlvbmFsIGlmIHN1YmNsYXNzIGRvZXNuJ3Qgd2FudCB0byBzdXBwb3J0IGEgbWlycm9yXG4gICAgfTtcbiAgICBFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldEF1dG9TY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICB9O1xuICAgIHJldHVybiBFbGVtZW50RHJhZ2dpbmc7XG59KCkpO1xuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGVJbnB1dCwgc2V0dGluZ3MpIHtcbiAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgdmFyIGRhdGVFbnYgPSBidWlsZERhdGVFbnYkMShzZXR0aW5ncyk7XG4gICAgdmFyIGZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcihzZXR0aW5ncyk7XG4gICAgdmFyIGRhdGVNZXRhID0gZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKGRhdGVJbnB1dCk7XG4gICAgaWYgKCFkYXRlTWV0YSkgeyAvLyBUT0RPOiB3YXJuaW5nP1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBkYXRlRW52LmZvcm1hdChkYXRlTWV0YS5tYXJrZXIsIGZvcm1hdHRlciwge1xuICAgICAgICBmb3JjZWRUem86IGRhdGVNZXRhLmZvcmNlZFR6b1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZm9ybWF0UmFuZ2Uoc3RhcnRJbnB1dCwgZW5kSW5wdXQsIHNldHRpbmdzIC8vIG1peHR1cmUgb2YgZW52IGFuZCBmb3JtYXR0ZXIgc2V0dGluZ3Ncbikge1xuICAgIHZhciBkYXRlRW52ID0gYnVpbGREYXRlRW52JDEodHlwZW9mIHNldHRpbmdzID09PSAnb2JqZWN0JyAmJiBzZXR0aW5ncyA/IHNldHRpbmdzIDoge30pOyAvLyBwYXNzIGluIGlmIG5vbi1udWxsIG9iamVjdFxuICAgIHZhciBmb3JtYXR0ZXIgPSBjcmVhdGVGb3JtYXR0ZXIoc2V0dGluZ3MsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRSYW5nZVNlcGFyYXRvcik7XG4gICAgdmFyIHN0YXJ0TWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShzdGFydElucHV0KTtcbiAgICB2YXIgZW5kTWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShlbmRJbnB1dCk7XG4gICAgaWYgKCFzdGFydE1ldGEgfHwgIWVuZE1ldGEpIHsgLy8gVE9ETzogd2FybmluZz9cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXRSYW5nZShzdGFydE1ldGEubWFya2VyLCBlbmRNZXRhLm1hcmtlciwgZm9ybWF0dGVyLCB7XG4gICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICBmb3JjZWRFbmRUem86IGVuZE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICBpc0VuZEV4Y2x1c2l2ZTogc2V0dGluZ3MuaXNFbmRFeGNsdXNpdmVcbiAgICB9KTtcbn1cbi8vIFRPRE86IG1vcmUgRFJZIGFuZCBvcHRpbWl6ZWRcbmZ1bmN0aW9uIGJ1aWxkRGF0ZUVudiQxKHNldHRpbmdzKSB7XG4gICAgdmFyIGxvY2FsZSA9IGJ1aWxkTG9jYWxlKHNldHRpbmdzLmxvY2FsZSB8fCAnZW4nLCBwYXJzZVJhd0xvY2FsZXMoW10pLm1hcCk7IC8vIFRPRE86IGRvbid0IGhhcmRjb2RlICdlbicgZXZlcnl3aGVyZVxuICAgIC8vIGVuc3VyZSByZXF1aXJlZCBzZXR0aW5nc1xuICAgIHNldHRpbmdzID0gX19hc3NpZ24oeyB0aW1lWm9uZTogZ2xvYmFsRGVmYXVsdHMudGltZVpvbmUsIGNhbGVuZGFyU3lzdGVtOiAnZ3JlZ29yeScgfSwgc2V0dGluZ3MsIHsgbG9jYWxlOiBsb2NhbGUgfSk7XG4gICAgcmV0dXJuIG5ldyBEYXRlRW52KHNldHRpbmdzKTtcbn1cblxudmFyIERSQUdfTUVUQV9QUk9QUyA9IHtcbiAgICBzdGFydFRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICBjcmVhdGU6IEJvb2xlYW4sXG4gICAgc291cmNlSWQ6IFN0cmluZ1xufTtcbnZhciBEUkFHX01FVEFfREVGQVVMVFMgPSB7XG4gICAgY3JlYXRlOiB0cnVlXG59O1xuZnVuY3Rpb24gcGFyc2VEcmFnTWV0YShyYXcpIHtcbiAgICB2YXIgbGVmdG92ZXJQcm9wcyA9IHt9O1xuICAgIHZhciByZWZpbmVkID0gcmVmaW5lUHJvcHMocmF3LCBEUkFHX01FVEFfUFJPUFMsIERSQUdfTUVUQV9ERUZBVUxUUywgbGVmdG92ZXJQcm9wcyk7XG4gICAgcmVmaW5lZC5sZWZ0b3ZlclByb3BzID0gbGVmdG92ZXJQcm9wcztcbiAgICByZXR1cm4gcmVmaW5lZDtcbn1cblxuLy8gQ29tcHV0ZXMgYSBkZWZhdWx0IGNvbHVtbiBoZWFkZXIgZm9ybWF0dGluZyBzdHJpbmcgaWYgYGNvbEZvcm1hdGAgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZFxuZnVuY3Rpb24gY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0KGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXlDbnQpIHtcbiAgICAvLyBpZiBtb3JlIHRoYW4gb25lIHdlZWsgcm93LCBvciBpZiB0aGVyZSBhcmUgYSBsb3Qgb2YgY29sdW1ucyB3aXRoIG5vdCBtdWNoIHNwYWNlLFxuICAgIC8vIHB1dCBqdXN0IHRoZSBkYXkgbnVtYmVycyB3aWxsIGJlIGluIGVhY2ggY2VsbFxuICAgIGlmICghZGF0ZXNSZXBEaXN0aW5jdERheXMgfHwgZGF5Q250ID4gMTApIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ3Nob3J0JyB9OyAvLyBcIlNhdFwiXG4gICAgfVxuICAgIGVsc2UgaWYgKGRheUNudCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdudW1lcmljJywgZGF5OiAnbnVtZXJpYycsIG9taXRDb21tYXM6IHRydWUgfTsgLy8gXCJTYXQgMTEvMTJcIlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgd2Vla2RheTogJ2xvbmcnIH07IC8vIFwiU2F0dXJkYXlcIlxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbmRlckRhdGVDZWxsKGRhdGVNYXJrZXIsIGRhdGVQcm9maWxlLCBkYXRlc1JlcERpc3RpbmN0RGF5cywgY29sQ250LCBjb2xIZWFkRm9ybWF0LCBjb250ZXh0LCBjb2xzcGFuLCBvdGhlckF0dHJzKSB7XG4gICAgdmFyIHZpZXcgPSBjb250ZXh0LnZpZXcsIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIHRoZW1lID0gY29udGV4dC50aGVtZSwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICB2YXIgaXNEYXRlVmFsaWQgPSByYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBkYXRlTWFya2VyKTsgLy8gVE9ETzogY2FsbGVkIHRvbyBmcmVxdWVudGx5LiBjYWNoZSBzb21laG93LlxuICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAnZmMtZGF5LWhlYWRlcicsXG4gICAgICAgIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKVxuICAgIF07XG4gICAgdmFyIGlubmVySHRtbDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29sdW1uSGVhZGVySHRtbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbm5lckh0bWwgPSBvcHRpb25zLmNvbHVtbkhlYWRlckh0bWwoZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlcikpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5jb2x1bW5IZWFkZXJUZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlubmVySHRtbCA9IGh0bWxFc2NhcGUob3B0aW9ucy5jb2x1bW5IZWFkZXJUZXh0KGRhdGVFbnYudG9EYXRlKGRhdGVNYXJrZXIpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbm5lckh0bWwgPSBodG1sRXNjYXBlKGRhdGVFbnYuZm9ybWF0KGRhdGVNYXJrZXIsIGNvbEhlYWRGb3JtYXQpKTtcbiAgICB9XG4gICAgLy8gaWYgb25seSBvbmUgcm93IG9mIGRheXMsIHRoZSBjbGFzc05hbWVzIG9uIHRoZSBoZWFkZXIgY2FuIHJlcHJlc2VudCB0aGUgc3BlY2lmaWMgZGF5cyBiZW5lYXRoXG4gICAgaWYgKGRhdGVzUmVwRGlzdGluY3REYXlzKSB7XG4gICAgICAgIGNsYXNzTmFtZXMgPSBjbGFzc05hbWVzLmNvbmNhdChcbiAgICAgICAgLy8gaW5jbHVkZXMgdGhlIGRheS1vZi13ZWVrIGNsYXNzXG4gICAgICAgIC8vIG5vVGhlbWVIaWdobGlnaHQ9dHJ1ZSAoZG9uJ3QgaGlnaGxpZ2h0IHRoZSBoZWFkZXIpXG4gICAgICAgIGdldERheUNsYXNzZXMoZGF0ZU1hcmtlciwgZGF0ZVByb2ZpbGUsIGNvbnRleHQsIHRydWUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtJyArIERBWV9JRFNbZGF0ZU1hcmtlci5nZXRVVENEYXkoKV0pOyAvLyBvbmx5IGFkZCB0aGUgZGF5LW9mLXdlZWsgY2xhc3NcbiAgICB9XG4gICAgcmV0dXJuICcnICtcbiAgICAgICAgJzx0aCBjbGFzcz1cIicgKyBjbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAoKGlzRGF0ZVZhbGlkICYmIGRhdGVzUmVwRGlzdGluY3REYXlzKSA/XG4gICAgICAgICAgICAnIGRhdGEtZGF0ZT1cIicgKyBkYXRlRW52LmZvcm1hdElzbyhkYXRlTWFya2VyLCB7IG9taXRUaW1lOiB0cnVlIH0pICsgJ1wiJyA6XG4gICAgICAgICAgICAnJykgK1xuICAgICAgICAoY29sc3BhbiA+IDEgP1xuICAgICAgICAgICAgJyBjb2xzcGFuPVwiJyArIGNvbHNwYW4gKyAnXCInIDpcbiAgICAgICAgICAgICcnKSArXG4gICAgICAgIChvdGhlckF0dHJzID9cbiAgICAgICAgICAgICcgJyArIG90aGVyQXR0cnMgOlxuICAgICAgICAgICAgJycpICtcbiAgICAgICAgJz4nICtcbiAgICAgICAgKGlzRGF0ZVZhbGlkID9cbiAgICAgICAgICAgIC8vIGRvbid0IG1ha2UgYSBsaW5rIGlmIHRoZSBoZWFkaW5nIGNvdWxkIHJlcHJlc2VudCBtdWx0aXBsZSBkYXlzLCBvciBpZiB0aGVyZSdzIG9ubHkgb25lIGRheSAoZm9yY2VPZmYpXG4gICAgICAgICAgICBidWlsZEdvdG9BbmNob3JIdG1sKHZpZXcsIHsgZGF0ZTogZGF0ZU1hcmtlciwgZm9yY2VPZmY6ICFkYXRlc1JlcERpc3RpbmN0RGF5cyB8fCBjb2xDbnQgPT09IDEgfSwgaW5uZXJIdG1sKSA6XG4gICAgICAgICAgICAvLyBpZiBub3QgdmFsaWQsIGRpc3BsYXkgdGV4dCwgYnV0IG5vIGxpbmtcbiAgICAgICAgICAgIGlubmVySHRtbCkgK1xuICAgICAgICAnPC90aD4nO1xufVxuXG52YXIgRGF5SGVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlIZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5SGVhZGVyKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIHBhcmVudEVsLmlubmVySFRNTCA9ICcnOyAvLyBiZWNhdXNlIG1pZ2h0IGJlIG5ic3BcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoX3RoaXMuZWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtcm93ICcgKyBfdGhpcy50aGVtZS5nZXRDbGFzcygnaGVhZGVyUm93JykgKyAnXCI+JyArXG4gICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwiJyArIF90aGlzLnRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArICdcIj4nICtcbiAgICAgICAgICAgICc8dGhlYWQ+PC90aGVhZD4nICtcbiAgICAgICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAgICAgJzwvZGl2PicpKTtcbiAgICAgICAgX3RoaXMudGhlYWQgPSBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERheUhlYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICB9O1xuICAgIERheUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBkYXRlcyA9IHByb3BzLmRhdGVzLCBkYXRlc1JlcERpc3RpbmN0RGF5cyA9IHByb3BzLmRhdGVzUmVwRGlzdGluY3REYXlzO1xuICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgaWYgKHByb3BzLnJlbmRlckludHJvSHRtbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChwcm9wcy5yZW5kZXJJbnRyb0h0bWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbEhlYWRGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIodGhpcy5vcHQoJ2NvbHVtbkhlYWRlckZvcm1hdCcpIHx8XG4gICAgICAgICAgICBjb21wdXRlRmFsbGJhY2tIZWFkZXJGb3JtYXQoZGF0ZXNSZXBEaXN0aW5jdERheXMsIGRhdGVzLmxlbmd0aCkpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGVzXzEgPSBkYXRlczsgX2kgPCBkYXRlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlc18xW19pXTtcbiAgICAgICAgICAgIHBhcnRzLnB1c2gocmVuZGVyRGF0ZUNlbGwoZGF0ZSwgcHJvcHMuZGF0ZVByb2ZpbGUsIGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXRlcy5sZW5ndGgsIGNvbEhlYWRGb3JtYXQsIHRoaXMuY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICBwYXJ0cy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aGVhZC5pbm5lckhUTUwgPSAnPHRyPicgKyBwYXJ0cy5qb2luKCcnKSArICc8L3RyPic7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5SGVhZGVyO1xufShDb21wb25lbnQpKTtcblxudmFyIERheVNlcmllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXlTZXJpZXMocmFuZ2UsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBkYXRlID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgIHZhciBpbmRpY2VzID0gW107XG4gICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICB2YXIgZGF5SW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKGRhdGUgPCBlbmQpIHsgLy8gbG9vcCBlYWNoIGRheSBmcm9tIHN0YXJ0IHRvIGVuZFxuICAgICAgICAgICAgaWYgKGRhdGVQcm9maWxlR2VuZXJhdG9yLmlzSGlkZGVuRGF5KGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGRheUluZGV4ICsgMC41KTsgLy8gbWFyayB0aGF0IGl0J3MgYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXlJbmRleCsrO1xuICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChkYXlJbmRleCk7XG4gICAgICAgICAgICAgICAgZGF0ZXMucHVzaChkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGUgPSBhZGREYXlzKGRhdGUsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0ZXMgPSBkYXRlcztcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgdGhpcy5jbnQgPSBkYXRlcy5sZW5ndGg7XG4gICAgfVxuICAgIERheVNlcmllcy5wcm90b3R5cGUuc2xpY2VSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICB2YXIgZmlyc3RJbmRleCA9IHRoaXMuZ2V0RGF0ZURheUluZGV4KHJhbmdlLnN0YXJ0KTsgLy8gaW5jbHVzaXZlIGZpcnN0IGluZGV4XG4gICAgICAgIHZhciBsYXN0SW5kZXggPSB0aGlzLmdldERhdGVEYXlJbmRleChhZGREYXlzKHJhbmdlLmVuZCwgLTEpKTsgLy8gaW5jbHVzaXZlIGxhc3QgaW5kZXhcbiAgICAgICAgdmFyIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5tYXgoMCwgZmlyc3RJbmRleCk7XG4gICAgICAgIHZhciBjbGlwcGVkTGFzdEluZGV4ID0gTWF0aC5taW4odGhpcy5jbnQgLSAxLCBsYXN0SW5kZXgpO1xuICAgICAgICAvLyBkZWFsIHdpdGggaW4tYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5jZWlsKGNsaXBwZWRGaXJzdEluZGV4KTsgLy8gaW4tYmV0d2VlbiBzdGFydHMgcm91bmQgdG8gbmV4dCBjZWxsXG4gICAgICAgIGNsaXBwZWRMYXN0SW5kZXggPSBNYXRoLmZsb29yKGNsaXBwZWRMYXN0SW5kZXgpOyAvLyBpbi1iZXR3ZWVuIGVuZHMgcm91bmQgdG8gcHJldiBjZWxsXG4gICAgICAgIGlmIChjbGlwcGVkRmlyc3RJbmRleCA8PSBjbGlwcGVkTGFzdEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZpcnN0SW5kZXg6IGNsaXBwZWRGaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgIGxhc3RJbmRleDogY2xpcHBlZExhc3RJbmRleCxcbiAgICAgICAgICAgICAgICBpc1N0YXJ0OiBmaXJzdEluZGV4ID09PSBjbGlwcGVkRmlyc3RJbmRleCxcbiAgICAgICAgICAgICAgICBpc0VuZDogbGFzdEluZGV4ID09PSBjbGlwcGVkTGFzdEluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEdpdmVuIGEgZGF0ZSwgcmV0dXJucyBpdHMgY2hyb25vbG9jaWFsIGNlbGwtaW5kZXggZnJvbSB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgZ3JpZC5cbiAgICAvLyBJZiB0aGUgZGF0ZSBsaWVzIGJldHdlZW4gY2VsbHMgKGJlY2F1c2Ugb2YgaGlkZGVuRGF5cyksIHJldHVybnMgYSBmbG9hdGluZy1wb2ludCB2YWx1ZSBiZXR3ZWVuIG9mZnNldHMuXG4gICAgLy8gSWYgYmVmb3JlIHRoZSBmaXJzdCBvZmZzZXQsIHJldHVybnMgYSBuZWdhdGl2ZSBudW1iZXIuXG4gICAgLy8gSWYgYWZ0ZXIgdGhlIGxhc3Qgb2Zmc2V0LCByZXR1cm5zIGFuIG9mZnNldCBwYXN0IHRoZSBsYXN0IGNlbGwgb2Zmc2V0LlxuICAgIC8vIE9ubHkgd29ya3MgZm9yICpzdGFydCogZGF0ZXMgb2YgY2VsbHMuIFdpbGwgbm90IHdvcmsgZm9yIGV4Y2x1c2l2ZSBlbmQgZGF0ZXMgZm9yIGNlbGxzLlxuICAgIERheVNlcmllcy5wcm90b3R5cGUuZ2V0RGF0ZURheUluZGV4ID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIGluZGljZXMgPSB0aGlzLmluZGljZXM7XG4gICAgICAgIHZhciBkYXlPZmZzZXQgPSBNYXRoLmZsb29yKGRpZmZEYXlzKHRoaXMuZGF0ZXNbMF0sIGRhdGUpKTtcbiAgICAgICAgaWYgKGRheU9mZnNldCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRpY2VzWzBdIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXlPZmZzZXQgPj0gaW5kaWNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGljZXNbZGF5T2Zmc2V0XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERheVNlcmllcztcbn0oKSk7XG5cbnZhciBEYXlUYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXlUYWJsZShkYXlTZXJpZXMsIGJyZWFrT25XZWVrcykge1xuICAgICAgICB2YXIgZGF0ZXMgPSBkYXlTZXJpZXMuZGF0ZXM7XG4gICAgICAgIHZhciBkYXlzUGVyUm93O1xuICAgICAgICB2YXIgZmlyc3REYXk7XG4gICAgICAgIHZhciByb3dDbnQ7XG4gICAgICAgIGlmIChicmVha09uV2Vla3MpIHtcbiAgICAgICAgICAgIC8vIGNvdW50IGNvbHVtbnMgdW50aWwgdGhlIGRheS1vZi13ZWVrIHJlcGVhdHNcbiAgICAgICAgICAgIGZpcnN0RGF5ID0gZGF0ZXNbMF0uZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICBmb3IgKGRheXNQZXJSb3cgPSAxOyBkYXlzUGVyUm93IDwgZGF0ZXMubGVuZ3RoOyBkYXlzUGVyUm93KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5c1BlclJvd10uZ2V0VVRDRGF5KCkgPT09IGZpcnN0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvd0NudCA9IE1hdGguY2VpbChkYXRlcy5sZW5ndGggLyBkYXlzUGVyUm93KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJvd0NudCA9IDE7XG4gICAgICAgICAgICBkYXlzUGVyUm93ID0gZGF0ZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm93Q250ID0gcm93Q250O1xuICAgICAgICB0aGlzLmNvbENudCA9IGRheXNQZXJSb3c7XG4gICAgICAgIHRoaXMuZGF5U2VyaWVzID0gZGF5U2VyaWVzO1xuICAgICAgICB0aGlzLmNlbGxzID0gdGhpcy5idWlsZENlbGxzKCk7XG4gICAgICAgIHRoaXMuaGVhZGVyRGF0ZXMgPSB0aGlzLmJ1aWxkSGVhZGVyRGF0ZXMoKTtcbiAgICB9XG4gICAgRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByb3dzID0gW107XG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMucm93Q250OyByb3crKykge1xuICAgICAgICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmNvbENudDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuYnVpbGRDZWxsKHJvdywgY29sKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzLnB1c2goY2VsbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH07XG4gICAgRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0ZTogdGhpcy5kYXlTZXJpZXMuZGF0ZXNbcm93ICogdGhpcy5jb2xDbnQgKyBjb2xdXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBEYXlUYWJsZS5wcm90b3R5cGUuYnVpbGRIZWFkZXJEYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY29sQ250OyBjb2wrKykge1xuICAgICAgICAgICAgZGF0ZXMucHVzaCh0aGlzLmNlbGxzWzBdW2NvbF0uZGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVzO1xuICAgIH07XG4gICAgRGF5VGFibGUucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgdmFyIGNvbENudCA9IHRoaXMuY29sQ250O1xuICAgICAgICB2YXIgc2VyaWVzU2VnID0gdGhpcy5kYXlTZXJpZXMuc2xpY2VSYW5nZShyYW5nZSk7XG4gICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgIGlmIChzZXJpZXNTZWcpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdEluZGV4ID0gc2VyaWVzU2VnLmZpcnN0SW5kZXgsIGxhc3RJbmRleCA9IHNlcmllc1NlZy5sYXN0SW5kZXg7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBmaXJzdEluZGV4O1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gY29sQ250KTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gTWF0aC5taW4oKHJvdyArIDEpICogY29sQ250LCBsYXN0SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICBzZWdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDb2w6IGluZGV4ICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29sOiAobmV4dEluZGV4IC0gMSkgJSBjb2xDbnQsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNlcmllc1NlZy5pc1N0YXJ0ICYmIGluZGV4ID09PSBmaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VyaWVzU2VnLmlzRW5kICYmIChuZXh0SW5kZXggLSAxKSA9PT0gbGFzdEluZGV4XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5VGFibGU7XG59KCkpO1xuXG52YXIgU2xpY2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNsaWNlcigpIHtcbiAgICAgICAgdGhpcy5zbGljZUJ1c2luZXNzSG91cnMgPSBtZW1vaXplKHRoaXMuX3NsaWNlQnVzaW5lc3NIb3Vycyk7XG4gICAgICAgIHRoaXMuc2xpY2VEYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zbGljZURhdGVTcGFuKTtcbiAgICAgICAgdGhpcy5zbGljZUV2ZW50U3RvcmUgPSBtZW1vaXplKHRoaXMuX3NsaWNlRXZlbnRTdG9yZSk7XG4gICAgICAgIHRoaXMuc2xpY2VFdmVudERyYWcgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgICAgICB0aGlzLnNsaWNlRXZlbnRSZXNpemUgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgIH1cbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudFVpQmFzZXMgPSBwcm9wcy5ldmVudFVpQmFzZXM7XG4gICAgICAgIHZhciBldmVudFNlZ3MgPSB0aGlzLnNsaWNlRXZlbnRTdG9yZS5hcHBseSh0aGlzLCBbcHJvcHMuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlU2VsZWN0aW9uU2VnczogdGhpcy5zbGljZURhdGVTZWxlY3Rpb24uYXBwbHkodGhpcywgW3Byb3BzLmRhdGVTZWxlY3Rpb24sIGV2ZW50VWlCYXNlcywgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJTZWdzOiB0aGlzLnNsaWNlQnVzaW5lc3NIb3Vycy5hcHBseSh0aGlzLCBbcHJvcHMuYnVzaW5lc3NIb3VycywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbXBvbmVudF0uY29uY2F0KGV4dHJhQXJncykpLFxuICAgICAgICAgICAgZmdFdmVudFNlZ3M6IGV2ZW50U2Vncy5mZyxcbiAgICAgICAgICAgIGJnRXZlbnRTZWdzOiBldmVudFNlZ3MuYmcsXG4gICAgICAgICAgICBldmVudERyYWc6IHRoaXMuc2xpY2VFdmVudERyYWcuYXBwbHkodGhpcywgW3Byb3BzLmV2ZW50RHJhZywgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogdGhpcy5zbGljZUV2ZW50UmVzaXplLmFwcGx5KHRoaXMsIFtwcm9wcy5ldmVudFJlc2l6ZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSksXG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb25cbiAgICAgICAgfTsgLy8gVE9ETzogZ2l2ZSBpbnRlcmFjdGlvblNlZ3M/XG4gICAgfTtcbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlTm93RGF0ZSA9IGZ1bmN0aW9uICgvLyBkb2VzIG5vdCBtZW1vaXplXG4gICAgZGF0ZSwgY29tcG9uZW50KSB7XG4gICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGV4dHJhQXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VEYXRlU3Bhbi5hcHBseSh0aGlzLCBbeyByYW5nZTogeyBzdGFydDogZGF0ZSwgZW5kOiBhZGRNcyhkYXRlLCAxKSB9LCBhbGxEYXk6IGZhbHNlIH0sXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGNvbXBvbmVudF0uY29uY2F0KGV4dHJhQXJncykpO1xuICAgIH07XG4gICAgU2xpY2VyLnByb3RvdHlwZS5fc2xpY2VCdXNpbmVzc0hvdXJzID0gZnVuY3Rpb24gKGJ1c2luZXNzSG91cnMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYnVzaW5lc3NIb3Vycykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zbGljZUV2ZW50U3RvcmUuYXBwbHkodGhpcywgW2V4cGFuZFJlY3VycmluZyhidXNpbmVzc0hvdXJzLCBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIEJvb2xlYW4obmV4dERheVRocmVzaG9sZCkpLCBjb21wb25lbnQuY2FsZW5kYXIpLFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBkYXRlUHJvZmlsZSxcbiAgICAgICAgICAgIG5leHREYXlUaHJlc2hvbGQsXG4gICAgICAgICAgICBjb21wb25lbnRdLmNvbmNhdChleHRyYUFyZ3MpKS5iZztcbiAgICB9O1xuICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlRXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDU7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudFN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VSZXMgPSBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIEJvb2xlYW4obmV4dERheVRocmVzaG9sZCkpLCBuZXh0RGF5VGhyZXNob2xkKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYmc6IHRoaXMuc2xpY2VFdmVudFJhbmdlcyhyYW5nZVJlcy5iZywgY29tcG9uZW50LCBleHRyYUFyZ3MpLFxuICAgICAgICAgICAgICAgIGZnOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGNvbXBvbmVudCwgZXh0cmFBcmdzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGJnOiBbXSwgZmc6IFtdIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb24sIGV2ZW50VWlCYXNlcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgZXh0cmFBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gNTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSA1XSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJhbmdlUmVzID0gc2xpY2VFdmVudFN0b3JlKGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMsIGV2ZW50VWlCYXNlcywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgbmV4dERheVRocmVzaG9sZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWdzOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGNvbXBvbmVudCwgZXh0cmFBcmdzKSxcbiAgICAgICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzOiBpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cy5pbnN0YW5jZXMsXG4gICAgICAgICAgICBpc0V2ZW50OiBpbnRlcmFjdGlvbi5pc0V2ZW50LFxuICAgICAgICAgICAgc291cmNlU2VnOiBpbnRlcmFjdGlvbi5vcmlnU2VnXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZURhdGVTcGFuID0gZnVuY3Rpb24gKGRhdGVTcGFuLCBldmVudFVpQmFzZXMsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgZXh0cmFBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRlU3Bhbikge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBldmVudFJhbmdlID0gZmFicmljYXRlRXZlbnRSYW5nZShkYXRlU3BhbiwgZXZlbnRVaUJhc2VzLCBjb21wb25lbnQuY2FsZW5kYXIpO1xuICAgICAgICB2YXIgc2VncyA9IHRoaXMuc2xpY2VSYW5nZS5hcHBseSh0aGlzLCBbZGF0ZVNwYW4ucmFuZ2VdLmNvbmNhdChleHRyYUFyZ3MpKTtcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBzZWdzXzEgPSBzZWdzOyBfYSA8IHNlZ3NfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2FdO1xuICAgICAgICAgICAgc2VnLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgIHNlZy5ldmVudFJhbmdlID0gZXZlbnRSYW5nZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VncztcbiAgICB9O1xuICAgIC8qXG4gICAgXCJjb21wbGV0ZVwiIHNlZyBtZWFucyBpdCBoYXMgY29tcG9uZW50IGFuZCBldmVudFJhbmdlXG4gICAgKi9cbiAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlRXZlbnRSYW5nZXMgPSBmdW5jdGlvbiAoZXZlbnRSYW5nZXMsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgIGV4dHJhQXJncykge1xuICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGV2ZW50UmFuZ2VzXzEgPSBldmVudFJhbmdlczsgX2kgPCBldmVudFJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBldmVudFJhbmdlc18xW19pXTtcbiAgICAgICAgICAgIHNlZ3MucHVzaC5hcHBseShzZWdzLCB0aGlzLnNsaWNlRXZlbnRSYW5nZShldmVudFJhbmdlLCBjb21wb25lbnQsIGV4dHJhQXJncykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgLypcbiAgICBcImNvbXBsZXRlXCIgc2VnIG1lYW5zIGl0IGhhcyBjb21wb25lbnQgYW5kIGV2ZW50UmFuZ2VcbiAgICAqL1xuICAgIFNsaWNlci5wcm90b3R5cGUuc2xpY2VFdmVudFJhbmdlID0gZnVuY3Rpb24gKGV2ZW50UmFuZ2UsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgIGV4dHJhQXJncykge1xuICAgICAgICB2YXIgc2VncyA9IHRoaXMuc2xpY2VSYW5nZS5hcHBseSh0aGlzLCBbZXZlbnRSYW5nZS5yYW5nZV0uY29uY2F0KGV4dHJhQXJncykpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMltfaV07XG4gICAgICAgICAgICBzZWcuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICAgICAgc2VnLmV2ZW50UmFuZ2UgPSBldmVudFJhbmdlO1xuICAgICAgICAgICAgc2VnLmlzU3RhcnQgPSBldmVudFJhbmdlLmlzU3RhcnQgJiYgc2VnLmlzU3RhcnQ7XG4gICAgICAgICAgICBzZWcuaXNFbmQgPSBldmVudFJhbmdlLmlzRW5kICYmIHNlZy5pc0VuZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VncztcbiAgICB9O1xuICAgIHJldHVybiBTbGljZXI7XG59KCkpO1xuLypcbmZvciBpbmNvcnBvcmF0aW5nIG1pblRpbWUvbWF4VGltZSBpZiBhcHByb3ByaWF0ZVxuVE9ETzogc2hvdWxkIGJlIHBhcnQgb2YgRGF0ZVByb2ZpbGUhXG5UaW1lbGluZURhdGVQcm9maWxlIGFscmVhZHkgZG9lcyB0aGlzIGJ0d1xuKi9cbmZ1bmN0aW9uIGNvbXB1dGVBY3RpdmVSYW5nZShkYXRlUHJvZmlsZSwgaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICB2YXIgcmFuZ2UgPSBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZTtcbiAgICBpZiAoaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogYWRkTXMocmFuZ2Uuc3RhcnQsIGRhdGVQcm9maWxlLm1pblRpbWUubWlsbGlzZWNvbmRzKSxcbiAgICAgICAgZW5kOiBhZGRNcyhyYW5nZS5lbmQsIGRhdGVQcm9maWxlLm1heFRpbWUubWlsbGlzZWNvbmRzIC0gODY0ZTUpIC8vIDg2NGU1ID0gbXMgaW4gYSBkYXlcbiAgICB9O1xufVxuXG4vLyBleHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIHZlcnNpb24gPSAnNC4zLjEnO1xuXG5leHBvcnQgeyBDYWxlbmRhciwgQ29tcG9uZW50LCBEYXRlQ29tcG9uZW50LCBEYXRlRW52LCBEYXRlUHJvZmlsZUdlbmVyYXRvciwgRGF5SGVhZGVyLCBEYXlTZXJpZXMsIERheVRhYmxlLCBFbGVtZW50RHJhZ2dpbmcsIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLCBFbWl0dGVyTWl4aW4sIEV2ZW50QXBpLCBGZ0V2ZW50UmVuZGVyZXIsIEZpbGxSZW5kZXJlciwgSW50ZXJhY3Rpb24sIE1peGluLCBOYW1lZFRpbWVab25lSW1wbCwgUG9zaXRpb25DYWNoZSwgU2Nyb2xsQ29tcG9uZW50LCBTY3JvbGxDb250cm9sbGVyLCBTbGljZXIsIFNwbGl0dGVyLCBUaGVtZSwgVmlldywgV2luZG93U2Nyb2xsQ29udHJvbGxlciwgYWRkRGF5cywgYWRkRHVyYXRpb25zLCBhZGRNcywgYWRkV2Vla3MsIGFsbG93Q29udGV4dE1lbnUsIGFsbG93U2VsZWN0aW9uLCBhcHBlbmRUb0VsZW1lbnQsIGFwcGx5QWxsLCBhcHBseU11dGF0aW9uVG9FdmVudFN0b3JlLCBhcHBseVN0eWxlLCBhcHBseVN0eWxlUHJvcCwgYXNSb3VnaE1pbnV0ZXMsIGFzUm91Z2hNcywgYXNSb3VnaFNlY29uZHMsIGJ1aWxkR290b0FuY2hvckh0bWwsIGJ1aWxkU2VnQ29tcGFyZU9iaiwgY2FwaXRhbGlzZUZpcnN0TGV0dGVyLCBjb21iaW5lRXZlbnRVaXMsIGNvbXBhcmVCeUZpZWxkU3BlYywgY29tcGFyZUJ5RmllbGRTcGVjcywgY29tcGFyZU51bWJlcnMsIGNvbXBlbnNhdGVTY3JvbGwsIGNvbXB1dGVDbGlwcGluZ1JlY3QsIGNvbXB1dGVFZGdlcywgY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0LCBjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucywgY29tcHV0ZUlubmVyUmVjdCwgY29tcHV0ZVJlY3QsIGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UsIGNvbmZpZywgY29uc3RyYWluUG9pbnQsIGNyZWF0ZUR1cmF0aW9uLCBjcmVhdGVFbGVtZW50LCBjcmVhdGVFbXB0eUV2ZW50U3RvcmUsIGNyZWF0ZUV2ZW50SW5zdGFuY2UsIGNyZWF0ZUZvcm1hdHRlciwgY3JlYXRlUGx1Z2luLCBjc3NUb1N0ciwgZGVib3VuY2UsIGRpZmZEYXRlcywgZGlmZkRheUFuZFRpbWUsIGRpZmZEYXlzLCBkaWZmUG9pbnRzLCBkaWZmV2Vla3MsIGRpZmZXaG9sZURheXMsIGRpZmZXaG9sZVdlZWtzLCBkaXNhYmxlQ3Vyc29yLCBkaXN0cmlidXRlSGVpZ2h0LCBlbGVtZW50Q2xvc2VzdCwgZWxlbWVudE1hdGNoZXMsIGVuYWJsZUN1cnNvciwgZXZlbnRUdXBsZVRvU3RvcmUsIGZpbHRlckV2ZW50U3RvcmVEZWZzLCBmaWx0ZXJIYXNoLCBmaW5kQ2hpbGRyZW4sIGZpbmRFbGVtZW50cywgZmxleGlibGVDb21wYXJlLCBmb3JjZUNsYXNzTmFtZSwgZm9ybWF0RGF0ZSwgZm9ybWF0SXNvVGltZVN0cmluZywgZm9ybWF0UmFuZ2UsIGdldEFsbERheUh0bWwsIGdldENsaXBwaW5nUGFyZW50cywgZ2V0RGF5Q2xhc3NlcywgZ2V0RWxTZWcsIGdldFJlY3RDZW50ZXIsIGdldFJlbGV2YW50RXZlbnRzLCBnbG9iYWxEZWZhdWx0cywgZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yLCBoYXNCZ1JlbmRlcmluZywgaHRtbEVzY2FwZSwgaHRtbFRvRWxlbWVudCwgaW5zZXJ0QWZ0ZXJFbGVtZW50LCBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmUsIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlLCBpbnRlcnNlY3RSYW5nZXMsIGludGVyc2VjdFJlY3RzLCBpc0FycmF5c0VxdWFsLCBpc0RhdGVTcGFuc0VxdWFsLCBpc0ludCwgaXNJbnRlcmFjdGlvblZhbGlkLCBpc011bHRpRGF5UmFuZ2UsIGlzUHJvcHNFcXVhbCwgaXNQcm9wc1ZhbGlkLCBpc1NpbmdsZURheSwgaXNWYWxpZERhdGUsIGxpc3RlbkJ5U2VsZWN0b3IsIG1hcEhhc2gsIG1hdGNoQ2VsbFdpZHRocywgbWVtb2l6ZSwgbWVtb2l6ZU91dHB1dCwgbWVtb2l6ZVJlbmRlcmluZywgbWVyZ2VFdmVudFN0b3JlcywgbXVsdGlwbHlEdXJhdGlvbiwgcGFkU3RhcnQsIHBhcnNlQnVzaW5lc3NIb3VycywgcGFyc2VEcmFnTWV0YSwgcGFyc2VFdmVudERlZiwgcGFyc2VGaWVsZFNwZWNzLCBwYXJzZSBhcyBwYXJzZU1hcmtlciwgcG9pbnRJbnNpZGVSZWN0LCBwcmVwZW5kVG9FbGVtZW50LCBwcmV2ZW50Q29udGV4dE1lbnUsIHByZXZlbnREZWZhdWx0LCBwcmV2ZW50U2VsZWN0aW9uLCBwcm9jZXNzU2NvcGVkVWlQcm9wcywgcmFuZ2VDb250YWluc01hcmtlciwgcmFuZ2VDb250YWluc1JhbmdlLCByYW5nZXNFcXVhbCwgcmFuZ2VzSW50ZXJzZWN0LCByZWZpbmVQcm9wcywgcmVtb3ZlRWxlbWVudCwgcmVtb3ZlRXhhY3QsIHJlbmRlckRhdGVDZWxsLCByZXF1ZXN0SnNvbiwgc2xpY2VFdmVudFN0b3JlLCBzdGFydE9mRGF5LCBzdWJ0cmFjdElubmVyRWxIZWlnaHQsIHRyYW5zbGF0ZVJlY3QsIHVuY29tcGVuc2F0ZVNjcm9sbCwgdW5kaXN0cmlidXRlSGVpZ2h0LCB1bnByb21pc2lmeSwgdmVyc2lvbiwgd2hlblRyYW5zaXRpb25Eb25lLCB3aG9sZURpdmlkZUR1cmF0aW9ucyB9O1xuIiwiLyohXG5GdWxsQ2FsZW5kYXIgSW50ZXJhY3Rpb24gUGx1Z2luIHY0LjMuMFxuRG9jcyAmIExpY2Vuc2U6IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL1xuKGMpIDIwMTkgQWRhbSBTaGF3XG4qL1xuXG5pbXBvcnQgeyBjb25maWcsIGVsZW1lbnRDbG9zZXN0LCBFbWl0dGVyTWl4aW4sIGFwcGx5U3R5bGUsIHdoZW5UcmFuc2l0aW9uRG9uZSwgcmVtb3ZlRWxlbWVudCwgU2Nyb2xsQ29udHJvbGxlciwgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIsIGNvbXB1dGVJbm5lclJlY3QsIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIsIHByZXZlbnRTZWxlY3Rpb24sIHByZXZlbnRDb250ZXh0TWVudSwgYWxsb3dTZWxlY3Rpb24sIGFsbG93Q29udGV4dE1lbnUsIEVsZW1lbnREcmFnZ2luZywgY29tcHV0ZVJlY3QsIGdldENsaXBwaW5nUGFyZW50cywgcG9pbnRJbnNpZGVSZWN0LCBpc0RhdGVTcGFuc0VxdWFsLCBjb25zdHJhaW5Qb2ludCwgaW50ZXJzZWN0UmVjdHMsIGdldFJlY3RDZW50ZXIsIGRpZmZQb2ludHMsIG1hcEhhc2gsIHJhbmdlQ29udGFpbnNSYW5nZSwgaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUsIEludGVyYWN0aW9uLCBlbmFibGVDdXJzb3IsIGRpc2FibGVDdXJzb3IsIGNvbXBhcmVOdW1iZXJzLCBnZXRFbFNlZywgZ2V0UmVsZXZhbnRFdmVudHMsIEV2ZW50QXBpLCBjcmVhdGVFbXB0eUV2ZW50U3RvcmUsIGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUsIGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSwgc3RhcnRPZkRheSwgZGlmZkRhdGVzLCBjcmVhdGVEdXJhdGlvbiwgZXZlbnRUdXBsZVRvU3RvcmUsIGlzSW50ZXJhY3Rpb25WYWxpZCwgcGFyc2VEcmFnTWV0YSwgZWxlbWVudE1hdGNoZXMsIHBhcnNlRXZlbnREZWYsIGNyZWF0ZUV2ZW50SW5zdGFuY2UsIGdsb2JhbERlZmF1bHRzLCBjcmVhdGVQbHVnaW4gfSBmcm9tICdAZnVsbGNhbGVuZGFyL2NvcmUnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG5jb25maWcudG91Y2hNb3VzZUlnbm9yZVdhaXQgPSA1MDA7XG52YXIgaWdub3JlTW91c2VEZXB0aCA9IDA7XG52YXIgbGlzdGVuZXJDbnQgPSAwO1xudmFyIGlzV2luZG93VG91Y2hNb3ZlQ2FuY2VsbGVkID0gZmFsc2U7XG4vKlxuVXNlcyBhIFwicG9pbnRlclwiIGFic3RyYWN0aW9uLCB3aGljaCBtb25pdG9ycyBVSSBldmVudHMgZm9yIGJvdGggbW91c2UgYW5kIHRvdWNoLlxuVHJhY2tzIHdoZW4gdGhlIHBvaW50ZXIgXCJkcmFnc1wiIG9uIGEgY2VydGFpbiBlbGVtZW50LCBtZWFuaW5nIGRvd24rbW92ZSt1cC5cblxuQWxzbywgdHJhY2tzIGlmIHRoZXJlIHdhcyB0b3VjaC1zY3JvbGxpbmcuXG5BbHNvLCBjYW4gcHJldmVudCB0b3VjaC1zY3JvbGxpbmcgZnJvbSBoYXBwZW5pbmcuXG5BbHNvLCBjYW4gZmlyZSBwb2ludGVybW92ZSBldmVudHMgd2hlbiBzY3JvbGxpbmcgaGFwcGVucyB1bmRlcm5lYXRoLCBldmVuIHdoZW4gbm8gcmVhbCBwb2ludGVyIG1vdmVtZW50LlxuXG5lbWl0czpcbi0gcG9pbnRlcmRvd25cbi0gcG9pbnRlcm1vdmVcbi0gcG9pbnRlcnVwXG4qL1xudmFyIFBvaW50ZXJEcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb2ludGVyRHJhZ2dpbmcoY29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdWJqZWN0RWwgPSBudWxsO1xuICAgICAgICB0aGlzLmRvd25FbCA9IG51bGw7XG4gICAgICAgIC8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgZGlyZWN0bHkgYXNzaWduZWQgYnkgY2FsbGVyXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSAnJzsgLy8gd2lsbCBjYXVzZSBzdWJqZWN0RWwgaW4gYWxsIGVtaXR0ZWQgZXZlbnRzIHRvIGJlIHRoaXMgZWxlbWVudFxuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdG9yID0gJyc7XG4gICAgICAgIHRoaXMuc2hvdWxkSWdub3JlTW92ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3VsZFdhdGNoU2Nyb2xsID0gdHJ1ZTsgLy8gZm9yIHNpbXVsYXRpbmcgcG9pbnRlcm1vdmUgb24gc2Nyb2xsXG4gICAgICAgIC8vIGludGVybmFsIHN0YXRlc1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1RvdWNoRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53YXNUb3VjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAvLyBNb3VzZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdXNlKCkgJiZcbiAgICAgICAgICAgICAgICBpc1ByaW1hcnlNb3VzZUJ1dHRvbihldikgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy50cnlTdGFydChldikpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tTW91c2UoZXYsIHRydWUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcmRvd24nLCBwZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLmluaXRTY3JvbGxXYXRjaChwZXYpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tTW91c2UoZXYpO1xuICAgICAgICAgICAgX3RoaXMucmVjb3JkQ29vcmRzKHBldik7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJtb3ZlJywgcGV2KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBfdGhpcy5jcmVhdGVFdmVudEZyb21Nb3VzZShldikpO1xuICAgICAgICAgICAgX3RoaXMuY2xlYW51cCgpOyAvLyBjYWxsIGxhc3Qgc28gdGhhdCBwb2ludGVydXAgaGFzIGFjY2VzcyB0byBwcm9wc1xuICAgICAgICB9O1xuICAgICAgICAvLyBUb3VjaFxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHRoaXMuaGFuZGxlVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLnRyeVN0YXJ0KGV2KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzVG91Y2hEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHBldiA9IF90aGlzLmNyZWF0ZUV2ZW50RnJvbVRvdWNoKGV2LCB0cnVlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJkb3duJywgcGV2KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbml0U2Nyb2xsV2F0Y2gocGV2KTtcbiAgICAgICAgICAgICAgICAvLyB1bmxpa2UgbW91c2UsIG5lZWQgdG8gYXR0YWNoIHRvIHRhcmdldCwgbm90IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ1NzYwMDE0XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIF90aGlzLmhhbmRsZVRvdWNoRW5kKTtcbiAgICAgICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBfdGhpcy5oYW5kbGVUb3VjaEVuZCk7IC8vIHRyZWF0IGl0IGFzIGEgdG91Y2ggZW5kXG4gICAgICAgICAgICAgICAgLy8gYXR0YWNoIGEgaGFuZGxlciB0byBnZXQgY2FsbGVkIHdoZW4gQU5ZIHNjcm9sbCBhY3Rpb24gaGFwcGVucyBvbiB0aGUgcGFnZS5cbiAgICAgICAgICAgICAgICAvLyB0aGlzIHdhcyBpbXBvc3NpYmxlIHRvIGRvIHdpdGggbm9ybWFsIG9uL29mZiBiZWNhdXNlICdzY3JvbGwnIGRvZXNuJ3QgYnViYmxlLlxuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMyOTU0NTY1Lzk2MzQyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVRvdWNoU2Nyb2xsLCB0cnVlIC8vIHVzZUNhcHR1cmVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVRvdWNoTW92ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHBldiA9IF90aGlzLmNyZWF0ZUV2ZW50RnJvbVRvdWNoKGV2KTtcbiAgICAgICAgICAgIF90aGlzLnJlY29yZENvb3JkcyhwZXYpO1xuICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVybW92ZScsIHBldik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0RyYWdnaW5nKSB7IC8vIGRvbmUgdG8gZ3VhcmQgYWdhaW5zdCB0b3VjaGVuZCBmb2xsb3dlZCBieSB0b3VjaGNhbmNlbFxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIF90aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgX3RoaXMuaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIF90aGlzLmhhbmRsZVRvdWNoRW5kKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgX3RoaXMuaGFuZGxlVG91Y2hTY3JvbGwsIHRydWUpOyAvLyB1c2VDYXB0dXJlZD10cnVlXG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBfdGhpcy5jcmVhdGVFdmVudEZyb21Ub3VjaChldikpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNsZWFudXAoKTsgLy8gY2FsbCBsYXN0IHNvIHRoYXQgcG9pbnRlcnVwIGhhcyBhY2Nlc3MgdG8gcHJvcHNcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1RvdWNoRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGFydElnbm9yaW5nTW91c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLndhc1RvdWNoU2Nyb2xsID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYWdlWCA9ICh3aW5kb3cucGFnZVhPZmZzZXQgLSBfdGhpcy5wcmV2U2Nyb2xsWCkgKyBfdGhpcy5wcmV2UGFnZVg7XG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VZID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIF90aGlzLnByZXZTY3JvbGxZKSArIF90aGlzLnByZXZQYWdlWTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJtb3ZlJywge1xuICAgICAgICAgICAgICAgICAgICBvcmlnRXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgICAgICBpc1RvdWNoOiBfdGhpcy5pc1RvdWNoRHJhZ2dpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3RFbDogX3RoaXMuc3ViamVjdEVsLFxuICAgICAgICAgICAgICAgICAgICBwYWdlWDogcGFnZVgsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBwYWdlWSxcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFYOiBwYWdlWCAtIF90aGlzLm9yaWdQYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFZOiBwYWdlWSAtIF90aGlzLm9yaWdQYWdlWVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsID0gY29udGFpbmVyRWw7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyTWl4aW4oKTtcbiAgICAgICAgY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgICAgICBjb250YWluZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIGxpc3RlbmVyQ3JlYXRlZCgpO1xuICAgIH1cbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgbGlzdGVuZXJEZXN0cm95ZWQoKTtcbiAgICB9O1xuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUudHJ5U3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIHN1YmplY3RFbCA9IHRoaXMucXVlcnlTdWJqZWN0RWwoZXYpO1xuICAgICAgICB2YXIgZG93bkVsID0gZXYudGFyZ2V0O1xuICAgICAgICBpZiAoc3ViamVjdEVsICYmXG4gICAgICAgICAgICAoIXRoaXMuaGFuZGxlU2VsZWN0b3IgfHwgZWxlbWVudENsb3Nlc3QoZG93bkVsLCB0aGlzLmhhbmRsZVNlbGVjdG9yKSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViamVjdEVsID0gc3ViamVjdEVsO1xuICAgICAgICAgICAgdGhpcy5kb3duRWwgPSBkb3duRWw7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlOyAvLyBkbyB0aGlzIGZpcnN0IHNvIGNhbmNlbFRvdWNoU2Nyb2xsIHdpbGwgd29ya1xuICAgICAgICAgICAgdGhpcy53YXNUb3VjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdWJqZWN0RWwgPSBudWxsO1xuICAgICAgICB0aGlzLmRvd25FbCA9IG51bGw7XG4gICAgICAgIC8vIGtlZXAgd2FzVG91Y2hTY3JvbGwgYXJvdW5kIGZvciBsYXRlciBhY2Nlc3NcbiAgICAgICAgdGhpcy5kZXN0cm95U2Nyb2xsV2F0Y2goKTtcbiAgICB9O1xuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUucXVlcnlTdWJqZWN0RWwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Q2xvc2VzdChldi50YXJnZXQsIHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyRWw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuc2hvdWxkSWdub3JlTW91c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpZ25vcmVNb3VzZURlcHRoIHx8IHRoaXMuaXNUb3VjaERyYWdnaW5nO1xuICAgIH07XG4gICAgLy8gY2FuIGJlIGNhbGxlZCBieSB1c2VyIG9mIHRoaXMgY2xhc3MsIHRvIGNhbmNlbCB0b3VjaC1iYXNlZCBzY3JvbGxpbmcgZm9yIHRoZSBjdXJyZW50IGRyYWdcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmNhbmNlbFRvdWNoU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFNjcm9sbGluZyB0aGF0IHNpbXVsYXRlcyBwb2ludGVybW92ZXNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5pbml0U2Nyb2xsV2F0Y2ggPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkQ29vcmRzKGV2KTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCwgdHJ1ZSk7IC8vIHVzZUNhcHR1cmU9dHJ1ZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnJlY29yZENvb3JkcyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRXYXRjaFNjcm9sbCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2UGFnZVggPSBldi5wYWdlWDtcbiAgICAgICAgICAgIHRoaXMucHJldlBhZ2VZID0gZXYucGFnZVk7XG4gICAgICAgICAgICB0aGlzLnByZXZTY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5wcmV2U2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95U2Nyb2xsV2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFdhdGNoU2Nyb2xsKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwsIHRydWUpOyAvLyB1c2VDYXB0dXJlZD10cnVlXG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEV2ZW50IE5vcm1hbGl6YXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jcmVhdGVFdmVudEZyb21Nb3VzZSA9IGZ1bmN0aW9uIChldiwgaXNGaXJzdCkge1xuICAgICAgICB2YXIgZGVsdGFYID0gMDtcbiAgICAgICAgdmFyIGRlbHRhWSA9IDA7XG4gICAgICAgIC8vIFRPRE86IHJlcGVhdCBjb2RlXG4gICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgICB0aGlzLm9yaWdQYWdlWCA9IGV2LnBhZ2VYO1xuICAgICAgICAgICAgdGhpcy5vcmlnUGFnZVkgPSBldi5wYWdlWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IGV2LnBhZ2VYIC0gdGhpcy5vcmlnUGFnZVg7XG4gICAgICAgICAgICBkZWx0YVkgPSBldi5wYWdlWSAtIHRoaXMub3JpZ1BhZ2VZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcmlnRXZlbnQ6IGV2LFxuICAgICAgICAgICAgaXNUb3VjaDogZmFsc2UsXG4gICAgICAgICAgICBzdWJqZWN0RWw6IHRoaXMuc3ViamVjdEVsLFxuICAgICAgICAgICAgcGFnZVg6IGV2LnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IGV2LnBhZ2VZLFxuICAgICAgICAgICAgZGVsdGFYOiBkZWx0YVgsXG4gICAgICAgICAgICBkZWx0YVk6IGRlbHRhWVxuICAgICAgICB9O1xuICAgIH07XG4gICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jcmVhdGVFdmVudEZyb21Ub3VjaCA9IGZ1bmN0aW9uIChldiwgaXNGaXJzdCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGV2LnRvdWNoZXM7XG4gICAgICAgIHZhciBwYWdlWDtcbiAgICAgICAgdmFyIHBhZ2VZO1xuICAgICAgICB2YXIgZGVsdGFYID0gMDtcbiAgICAgICAgdmFyIGRlbHRhWSA9IDA7XG4gICAgICAgIC8vIGlmIHRvdWNoIGNvb3JkcyBhdmFpbGFibGUsIHByZWZlcixcbiAgICAgICAgLy8gYmVjYXVzZSBGRiB3b3VsZCBnaXZlIGJhZCBldi5wYWdlWCBldi5wYWdlWVxuICAgICAgICBpZiAodG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcGFnZVggPSB0b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgcGFnZVkgPSB0b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFnZVggPSBldi5wYWdlWDtcbiAgICAgICAgICAgIHBhZ2VZID0gZXYucGFnZVk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogcmVwZWF0IGNvZGVcbiAgICAgICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgICAgICAgIHRoaXMub3JpZ1BhZ2VYID0gcGFnZVg7XG4gICAgICAgICAgICB0aGlzLm9yaWdQYWdlWSA9IHBhZ2VZO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsdGFYID0gcGFnZVggLSB0aGlzLm9yaWdQYWdlWDtcbiAgICAgICAgICAgIGRlbHRhWSA9IHBhZ2VZIC0gdGhpcy5vcmlnUGFnZVk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yaWdFdmVudDogZXYsXG4gICAgICAgICAgICBpc1RvdWNoOiB0cnVlLFxuICAgICAgICAgICAgc3ViamVjdEVsOiB0aGlzLnN1YmplY3RFbCxcbiAgICAgICAgICAgIHBhZ2VYOiBwYWdlWCxcbiAgICAgICAgICAgIHBhZ2VZOiBwYWdlWSxcbiAgICAgICAgICAgIGRlbHRhWDogZGVsdGFYLFxuICAgICAgICAgICAgZGVsdGFZOiBkZWx0YVlcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBQb2ludGVyRHJhZ2dpbmc7XG59KCkpO1xuLy8gUmV0dXJucyBhIGJvb2xlYW4gd2hldGhlciB0aGlzIHdhcyBhIGxlZnQgbW91c2UgY2xpY2sgYW5kIG5vIGN0cmwga2V5ICh3aGljaCBtZWFucyByaWdodCBjbGljayBvbiBNYWMpXG5mdW5jdGlvbiBpc1ByaW1hcnlNb3VzZUJ1dHRvbihldikge1xuICAgIHJldHVybiBldi5idXR0b24gPT09IDAgJiYgIWV2LmN0cmxLZXk7XG59XG4vLyBJZ25vcmluZyBmYWtlIG1vdXNlIGV2ZW50cyBnZW5lcmF0ZWQgYnkgdG91Y2hcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0SWdub3JpbmdNb3VzZSgpIHtcbiAgICBpZ25vcmVNb3VzZURlcHRoKys7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlnbm9yZU1vdXNlRGVwdGgtLTtcbiAgICB9LCBjb25maWcudG91Y2hNb3VzZUlnbm9yZVdhaXQpO1xufVxuLy8gV2Ugd2FudCB0byBhdHRhY2ggdG91Y2htb3ZlIGFzIGVhcmx5IGFzIHBvc3NpYmxlIGZvciBTYWZhcmlcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGxpc3RlbmVyQ3JlYXRlZCgpIHtcbiAgICBpZiAoIShsaXN0ZW5lckNudCsrKSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25XaW5kb3dUb3VjaE1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdGVuZXJEZXN0cm95ZWQoKSB7XG4gICAgaWYgKCEoLS1saXN0ZW5lckNudCkpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uV2luZG93VG91Y2hNb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG9uV2luZG93VG91Y2hNb3ZlKGV2KSB7XG4gICAgaWYgKGlzV2luZG93VG91Y2hNb3ZlQ2FuY2VsbGVkKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufVxuXG4vKlxuQW4gZWZmZWN0IGluIHdoaWNoIGFuIGVsZW1lbnQgZm9sbG93cyB0aGUgbW92ZW1lbnQgb2YgYSBwb2ludGVyIGFjcm9zcyB0aGUgc2NyZWVuLlxuVGhlIG1vdmluZyBlbGVtZW50IGlzIGEgY2xvbmUgb2Ygc29tZSBvdGhlciBlbGVtZW50LlxuTXVzdCBjYWxsIHN0YXJ0ICsgaGFuZGxlTW92ZSArIHN0b3AuXG4qL1xudmFyIEVsZW1lbnRNaXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudE1pcnJvcigpIHtcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTsgLy8gbXVzdCBiZSBleHBsaWNpdGx5IGVuYWJsZWRcbiAgICAgICAgdGhpcy5zb3VyY2VFbCA9IG51bGw7XG4gICAgICAgIHRoaXMubWlycm9yRWwgPSBudWxsO1xuICAgICAgICB0aGlzLnNvdXJjZUVsUmVjdCA9IG51bGw7IC8vIHNjcmVlbiBjb29yZHMgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgZGlyZWN0bHkgYnkgY2FsbGVyXG4gICAgICAgIHRoaXMucGFyZW50Tm9kZSA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIHRoaXMuekluZGV4ID0gOTk5OTtcbiAgICAgICAgdGhpcy5yZXZlcnREdXJhdGlvbiA9IDA7XG4gICAgfVxuICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHNvdXJjZUVsLCBwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VFbCA9IHNvdXJjZUVsO1xuICAgICAgICB0aGlzLnNvdXJjZUVsUmVjdCA9IHRoaXMuc291cmNlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMub3JpZ1NjcmVlblggPSBwYWdlWCAtIHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgdGhpcy5vcmlnU2NyZWVuWSA9IHBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICB0aGlzLmRlbHRhWCA9IDA7XG4gICAgICAgIHRoaXMuZGVsdGFZID0gMDtcbiAgICAgICAgdGhpcy51cGRhdGVFbFBvc2l0aW9uKCk7XG4gICAgfTtcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICB0aGlzLmRlbHRhWCA9IChwYWdlWCAtIHdpbmRvdy5wYWdlWE9mZnNldCkgLSB0aGlzLm9yaWdTY3JlZW5YO1xuICAgICAgICB0aGlzLmRlbHRhWSA9IChwYWdlWSAtIHdpbmRvdy5wYWdlWU9mZnNldCkgLSB0aGlzLm9yaWdTY3JlZW5ZO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsUG9zaXRpb24oKTtcbiAgICB9O1xuICAgIC8vIGNhbiBiZSBjYWxsZWQgYmVmb3JlIHN0YXJ0XG4gICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuc2V0SXNWaXNpYmxlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5taXJyb3JFbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pcnJvckVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBib29sOyAvLyBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIHVwZGF0ZUVsUG9zaXRpb25cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsUG9zaXRpb24oKTsgLy8gYmVjYXVzZSB3YXMgbm90IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBpbnZpc2libGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pcnJvckVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWlycm9yRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBib29sO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBhbHdheXMgYXN5bmNcbiAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKG5lZWRzUmV2ZXJ0QW5pbWF0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChuZWVkc1JldmVydEFuaW1hdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5taXJyb3JFbCAmJlxuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgJiZcbiAgICAgICAgICAgIHRoaXMucmV2ZXJ0RHVyYXRpb24gJiYgLy8gaWYgMCwgdHJhbnNpdGlvbiB3b24ndCB3b3JrXG4gICAgICAgICAgICAodGhpcy5kZWx0YVggfHwgdGhpcy5kZWx0YVkpIC8vIGlmIHNhbWUgY29vcmRzLCB0cmFuc2l0aW9uIHdvbid0IHdvcmtcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmRvUmV2ZXJ0QW5pbWF0aW9uKGRvbmUsIHRoaXMucmV2ZXJ0RHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChkb25lLCAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuZG9SZXZlcnRBbmltYXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHJldmVydER1cmF0aW9uKSB7XG4gICAgICAgIHZhciBtaXJyb3JFbCA9IHRoaXMubWlycm9yRWw7XG4gICAgICAgIHZhciBmaW5hbFNvdXJjZUVsUmVjdCA9IHRoaXMuc291cmNlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIGJlY2F1c2UgYXV0b3Njcm9sbGluZyBtaWdodCBoYXZlIGhhcHBlbmVkXG4gICAgICAgIG1pcnJvckVsLnN0eWxlLnRyYW5zaXRpb24gPVxuICAgICAgICAgICAgJ3RvcCAnICsgcmV2ZXJ0RHVyYXRpb24gKyAnbXMsJyArXG4gICAgICAgICAgICAgICAgJ2xlZnQgJyArIHJldmVydER1cmF0aW9uICsgJ21zJztcbiAgICAgICAgYXBwbHlTdHlsZShtaXJyb3JFbCwge1xuICAgICAgICAgICAgbGVmdDogZmluYWxTb3VyY2VFbFJlY3QubGVmdCxcbiAgICAgICAgICAgIHRvcDogZmluYWxTb3VyY2VFbFJlY3QudG9wXG4gICAgICAgIH0pO1xuICAgICAgICB3aGVuVHJhbnNpdGlvbkRvbmUobWlycm9yRWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1pcnJvckVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWlycm9yRWwpIHtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5taXJyb3JFbCk7XG4gICAgICAgICAgICB0aGlzLm1pcnJvckVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvdXJjZUVsID0gbnVsbDtcbiAgICB9O1xuICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnVwZGF0ZUVsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZUVsICYmIHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlKHRoaXMuZ2V0TWlycm9yRWwoKSwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMuc291cmNlRWxSZWN0LmxlZnQgKyB0aGlzLmRlbHRhWCxcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMuc291cmNlRWxSZWN0LnRvcCArIHRoaXMuZGVsdGFZXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuZ2V0TWlycm9yRWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzb3VyY2VFbFJlY3QgPSB0aGlzLnNvdXJjZUVsUmVjdDtcbiAgICAgICAgdmFyIG1pcnJvckVsID0gdGhpcy5taXJyb3JFbDtcbiAgICAgICAgaWYgKCFtaXJyb3JFbCkge1xuICAgICAgICAgICAgbWlycm9yRWwgPSB0aGlzLm1pcnJvckVsID0gdGhpcy5zb3VyY2VFbC5jbG9uZU5vZGUodHJ1ZSk7IC8vIGNsb25lQ2hpbGRyZW49dHJ1ZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCBsb25nIHRhcHMgb3IgYW55IG1vdXNlIGludGVyYWN0aW9uIGNhdXNpbmcgc2VsZWN0aW9uL21lbnVzLlxuICAgICAgICAgICAgLy8gd291bGQgdXNlIHByZXZlbnRTZWxlY3Rpb24oKSwgYnV0IHRoYXQgcHJldmVudHMgc2VsZWN0c3RhcnQsIGNhdXNpbmcgcHJvYmxlbXMuXG4gICAgICAgICAgICBtaXJyb3JFbC5jbGFzc0xpc3QuYWRkKCdmYy11bnNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgIG1pcnJvckVsLmNsYXNzTGlzdC5hZGQoJ2ZjLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBhcHBseVN0eWxlKG1pcnJvckVsLCB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgekluZGV4OiB0aGlzLnpJbmRleCxcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnJyxcbiAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICB3aWR0aDogc291cmNlRWxSZWN0LnJpZ2h0IC0gc291cmNlRWxSZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzb3VyY2VFbFJlY3QuYm90dG9tIC0gc291cmNlRWxSZWN0LnRvcCxcbiAgICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobWlycm9yRWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaXJyb3JFbDtcbiAgICB9O1xuICAgIHJldHVybiBFbGVtZW50TWlycm9yO1xufSgpKTtcblxuLypcbklzIGEgY2FjaGUgZm9yIGEgZ2l2ZW4gZWxlbWVudCdzIHNjcm9sbCBpbmZvcm1hdGlvbiAoYWxsIHRoZSBpbmZvIHRoYXQgU2Nyb2xsQ29udHJvbGxlciBzdG9yZXMpXG5pbiBhZGRpdGlvbiB0aGUgXCJjbGllbnQgcmVjdGFuZ2xlXCIgb2YgdGhlIGVsZW1lbnQuLiB0aGUgYXJlYSB3aXRoaW4gdGhlIHNjcm9sbGJhcnMuXG5cblRoZSBjYWNoZSBjYW4gYmUgaW4gb25lIG9mIHR3byBtb2Rlczpcbi0gZG9lc0xpc3RlbmluZzpmYWxzZSAtIGlnbm9yZXMgd2hlbiB0aGUgY29udGFpbmVyIGlzIHNjcm9sbGVkIGJ5IHNvbWVvbmUgZWxzZVxuLSBkb2VzTGlzdGVuaW5nOnRydWUgLSB3YXRjaCBmb3Igc2Nyb2xsaW5nIGFuZCB1cGRhdGUgdGhlIGNhY2hlXG4qL1xudmFyIFNjcm9sbEdlb21DYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2Nyb2xsR2VvbUNhY2hlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcm9sbEdlb21DYWNoZShzY3JvbGxDb250cm9sbGVyLCBkb2VzTGlzdGVuaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnNjcm9sbFRvcCA9IF90aGlzLnNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxMZWZ0ID0gX3RoaXMuc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxMZWZ0KCk7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTY3JvbGxDaGFuZ2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsQ29udHJvbGxlciA9IHNjcm9sbENvbnRyb2xsZXI7XG4gICAgICAgIF90aGlzLmRvZXNMaXN0ZW5pbmcgPSBkb2VzTGlzdGVuaW5nO1xuICAgICAgICBfdGhpcy5zY3JvbGxUb3AgPSBfdGhpcy5vcmlnU2Nyb2xsVG9wID0gc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxUb3AoKTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsTGVmdCA9IF90aGlzLm9yaWdTY3JvbGxMZWZ0ID0gc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxMZWZ0KCk7XG4gICAgICAgIF90aGlzLnNjcm9sbFdpZHRoID0gc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxXaWR0aCgpO1xuICAgICAgICBfdGhpcy5zY3JvbGxIZWlnaHQgPSBzY3JvbGxDb250cm9sbGVyLmdldFNjcm9sbEhlaWdodCgpO1xuICAgICAgICBfdGhpcy5jbGllbnRXaWR0aCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0Q2xpZW50V2lkdGgoKTtcbiAgICAgICAgX3RoaXMuY2xpZW50SGVpZ2h0ID0gc2Nyb2xsQ29udHJvbGxlci5nZXRDbGllbnRIZWlnaHQoKTtcbiAgICAgICAgX3RoaXMuY2xpZW50UmVjdCA9IF90aGlzLmNvbXB1dGVDbGllbnRSZWN0KCk7IC8vIGRvIGxhc3QgaW4gY2FzZSBpdCBuZWVkcyBjYWNoZWQgdmFsdWVzXG4gICAgICAgIGlmIChfdGhpcy5kb2VzTGlzdGVuaW5nKSB7XG4gICAgICAgICAgICBfdGhpcy5nZXRFdmVudFRhcmdldCgpLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RXZlbnRUYXJnZXQoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxUb3A7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcm9sbExlZnQ7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICh0b3ApIHtcbiAgICAgICAgdGhpcy5zY3JvbGxDb250cm9sbGVyLnNldFNjcm9sbFRvcCh0b3ApO1xuICAgICAgICBpZiAoIXRoaXMuZG9lc0xpc3RlbmluZykge1xuICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCByZWx5aW5nIG9uIHRoZSBlbGVtZW50IHRvIG5vcm1hbGl6ZSBvdXQtb2YtYm91bmRzIHNjcm9sbCB2YWx1ZXNcbiAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gc2FuaXRpemUgb3Vyc2VsdmVzXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IE1hdGgubWF4KE1hdGgubWluKHRvcCwgdGhpcy5nZXRNYXhTY3JvbGxUb3AoKSksIDApO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGxDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHRvcCkge1xuICAgICAgICB0aGlzLnNjcm9sbENvbnRyb2xsZXIuc2V0U2Nyb2xsTGVmdCh0b3ApO1xuICAgICAgICBpZiAoIXRoaXMuZG9lc0xpc3RlbmluZykge1xuICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCByZWx5aW5nIG9uIHRoZSBlbGVtZW50IHRvIG5vcm1hbGl6ZSBvdXQtb2YtYm91bmRzIHNjcm9sbCB2YWx1ZXNcbiAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gc2FuaXRpemUgb3Vyc2VsdmVzXG4gICAgICAgICAgICB0aGlzLnNjcm9sbExlZnQgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIHRoaXMuZ2V0TWF4U2Nyb2xsTGVmdCgpKSwgMCk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNjcm9sbENoYW5nZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldENsaWVudFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRXaWR0aDtcbiAgICB9O1xuICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRIZWlnaHQ7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxXaWR0aDtcbiAgICB9O1xuICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxIZWlnaHQ7XG4gICAgfTtcbiAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmhhbmRsZVNjcm9sbENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIHJldHVybiBTY3JvbGxHZW9tQ2FjaGU7XG59KFNjcm9sbENvbnRyb2xsZXIpKTtcbnZhciBFbGVtZW50U2Nyb2xsR2VvbUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50U2Nyb2xsR2VvbUNhY2hlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUoZWwsIGRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG5ldyBFbGVtZW50U2Nyb2xsQ29udHJvbGxlcihlbCksIGRvZXNMaXN0ZW5pbmcpIHx8IHRoaXM7XG4gICAgfVxuICAgIEVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY3JvbGxDb250cm9sbGVyLmVsO1xuICAgIH07XG4gICAgRWxlbWVudFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuY29tcHV0ZUNsaWVudFJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlSW5uZXJSZWN0KHRoaXMuc2Nyb2xsQ29udHJvbGxlci5lbCk7XG4gICAgfTtcbiAgICByZXR1cm4gRWxlbWVudFNjcm9sbEdlb21DYWNoZTtcbn0oU2Nyb2xsR2VvbUNhY2hlKSk7XG52YXIgV2luZG93U2Nyb2xsR2VvbUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhXaW5kb3dTY3JvbGxHZW9tQ2FjaGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2luZG93U2Nyb2xsR2VvbUNhY2hlKGRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG5ldyBXaW5kb3dTY3JvbGxDb250cm9sbGVyKCksIGRvZXNMaXN0ZW5pbmcpIHx8IHRoaXM7XG4gICAgfVxuICAgIFdpbmRvd1Njcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0RXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfTtcbiAgICBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmNvbXB1dGVDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMuc2Nyb2xsTGVmdCArIHRoaXMuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICB0b3A6IHRoaXMuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgYm90dG9tOiB0aGlzLnNjcm9sbFRvcCArIHRoaXMuY2xpZW50SGVpZ2h0XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvLyB0aGUgd2luZG93IGlzIHRoZSBvbmx5IHNjcm9sbCBvYmplY3QgdGhhdCBjaGFuZ2VzIGl0J3MgcmVjdGFuZ2xlIHJlbGF0aXZlXG4gICAgLy8gdG8gdGhlIGRvY3VtZW50J3MgdG9wbGVmdCBhcyBpdCBzY3JvbGxzXG4gICAgV2luZG93U2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5oYW5kbGVTY3JvbGxDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xpZW50UmVjdCA9IHRoaXMuY29tcHV0ZUNsaWVudFJlY3QoKTtcbiAgICB9O1xuICAgIHJldHVybiBXaW5kb3dTY3JvbGxHZW9tQ2FjaGU7XG59KFNjcm9sbEdlb21DYWNoZSkpO1xuXG4vLyBJZiBhdmFpbGFibGUgd2UgYXJlIHVzaW5nIG5hdGl2ZSBcInBlcmZvcm1hbmNlXCIgQVBJIGluc3RlYWQgb2YgXCJEYXRlXCJcbi8vIFJlYWQgbW9yZSBhYm91dCBpdCBvbiBNRE46XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2VcbnZhciBnZXRUaW1lID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSAnZnVuY3Rpb24nID8gcGVyZm9ybWFuY2Uubm93IDogRGF0ZS5ub3c7XG4vKlxuRm9yIGEgcG9pbnRlciBpbnRlcmFjdGlvbiwgYXV0b21hdGljYWxseSBzY3JvbGxzIGNlcnRhaW4gc2Nyb2xsIGNvbnRhaW5lcnMgd2hlbiB0aGUgcG9pbnRlclxuYXBwcm9hY2hlcyB0aGUgZWRnZS5cblxuVGhlIGNhbGxlciBtdXN0IGNhbGwgc3RhcnQgKyBoYW5kbGVNb3ZlICsgc3RvcC5cbiovXG52YXIgQXV0b1Njcm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1dG9TY3JvbGxlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgYnkgY2FsbGVyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY3JvbGxRdWVyeSA9IFt3aW5kb3csICcuZmMtc2Nyb2xsZXInXTtcbiAgICAgICAgdGhpcy5lZGdlVGhyZXNob2xkID0gNTA7IC8vIHBpeGVsc1xuICAgICAgICB0aGlzLm1heFZlbG9jaXR5ID0gMzAwOyAvLyBwaXhlbHMgcGVyIHNlY29uZFxuICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5YID0gbnVsbDtcbiAgICAgICAgdGhpcy5wb2ludGVyU2NyZWVuWSA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY3JvbGxDYWNoZXMgPSBudWxsO1xuICAgICAgICAvLyBwcm90ZWN0IGFnYWluc3QgdGhlIGluaXRpYWwgcG9pbnRlcmRvd24gYmVpbmcgdG9vIGNsb3NlIHRvIGFuIGVkZ2UgYW5kIHN0YXJ0aW5nIHRoZSBzY3JvbGxcbiAgICAgICAgdGhpcy5ldmVyTW92ZWRVcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZXJNb3ZlZERvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ldmVyTW92ZWRMZWZ0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlck1vdmVkUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbmltYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzQW5pbWF0aW5nKSB7IC8vIHdhc24ndCBjYW5jZWxsZWQgYmV0d2VlbiBhbmltYXRpb24gY2FsbHNcbiAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IF90aGlzLmNvbXB1dGVCZXN0RWRnZShfdGhpcy5wb2ludGVyU2NyZWVuWCArIHdpbmRvdy5wYWdlWE9mZnNldCwgX3RoaXMucG9pbnRlclNjcmVlblkgKyB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGlmIChlZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVNpZGUoZWRnZSwgKG5vdyAtIF90aGlzLm1zU2luY2VSZXF1ZXN0KSAvIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0QW5pbWF0aW9uKG5vdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlOyAvLyB3aWxsIHN0b3AgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ2FjaGVzID0gdGhpcy5idWlsZENhY2hlcygpO1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyU2NyZWVuWCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5ZID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkVXAgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRMZWZ0ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1vdmUocGFnZVgsIHBhZ2VZKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHZhciBwb2ludGVyU2NyZWVuWCA9IHBhZ2VYIC0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIHBvaW50ZXJTY3JlZW5ZID0gcGFnZVkgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgeURlbHRhID0gdGhpcy5wb2ludGVyU2NyZWVuWSA9PT0gbnVsbCA/IDAgOiBwb2ludGVyU2NyZWVuWSAtIHRoaXMucG9pbnRlclNjcmVlblk7XG4gICAgICAgICAgICB2YXIgeERlbHRhID0gdGhpcy5wb2ludGVyU2NyZWVuWCA9PT0gbnVsbCA/IDAgOiBwb2ludGVyU2NyZWVuWCAtIHRoaXMucG9pbnRlclNjcmVlblg7XG4gICAgICAgICAgICBpZiAoeURlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkVXAgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoeURlbHRhID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkRG93biA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeERlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkTGVmdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4RGVsdGEgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRSaWdodCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5YID0gcG9pbnRlclNjcmVlblg7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5ZID0gcG9pbnRlclNjcmVlblk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb24oZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTsgLy8gd2lsbCBzdG9wIGFuaW1hdGlvblxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBzY3JvbGxDYWNoZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNjcm9sbENhY2hlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUucmVxdWVzdEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgdGhpcy5tc1NpbmNlUmVxdWVzdCA9IG5vdztcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZSk7XG4gICAgfTtcbiAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmhhbmRsZVNpZGUgPSBmdW5jdGlvbiAoZWRnZSwgc2Vjb25kcykge1xuICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBlZGdlLnNjcm9sbENhY2hlO1xuICAgICAgICB2YXIgZWRnZVRocmVzaG9sZCA9IHRoaXMuZWRnZVRocmVzaG9sZDtcbiAgICAgICAgdmFyIGludkRpc3RhbmNlID0gZWRnZVRocmVzaG9sZCAtIGVkZ2UuZGlzdGFuY2U7XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IC8vIHRoZSBjbG9zZXIgdG8gdGhlIGVkZ2UsIHRoZSBmYXN0ZXIgd2Ugc2Nyb2xsXG4gICAgICAgICAoaW52RGlzdGFuY2UgKiBpbnZEaXN0YW5jZSkgLyAoZWRnZVRocmVzaG9sZCAqIGVkZ2VUaHJlc2hvbGQpICogLy8gcXVhZHJhdGljXG4gICAgICAgICAgICB0aGlzLm1heFZlbG9jaXR5ICogc2Vjb25kcztcbiAgICAgICAgdmFyIHNpZ24gPSAxO1xuICAgICAgICBzd2l0Y2ggKGVkZ2UubmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIHNjcm9sbENhY2hlLnNldFNjcm9sbExlZnQoc2Nyb2xsQ2FjaGUuZ2V0U2Nyb2xsTGVmdCgpICsgdmVsb2NpdHkgKiBzaWduKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICBzY3JvbGxDYWNoZS5zZXRTY3JvbGxUb3Aoc2Nyb2xsQ2FjaGUuZ2V0U2Nyb2xsVG9wKCkgKyB2ZWxvY2l0eSAqIHNpZ24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBsZWZ0L3RvcCBhcmUgcmVsYXRpdmUgdG8gZG9jdW1lbnQgdG9wbGVmdFxuICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUuY29tcHV0ZUJlc3RFZGdlID0gZnVuY3Rpb24gKGxlZnQsIHRvcCkge1xuICAgICAgICB2YXIgZWRnZVRocmVzaG9sZCA9IHRoaXMuZWRnZVRocmVzaG9sZDtcbiAgICAgICAgdmFyIGJlc3RTaWRlID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBzY3JvbGxDYWNoZS5jbGllbnRSZWN0O1xuICAgICAgICAgICAgdmFyIGxlZnREaXN0ID0gbGVmdCAtIHJlY3QubGVmdDtcbiAgICAgICAgICAgIHZhciByaWdodERpc3QgPSByZWN0LnJpZ2h0IC0gbGVmdDtcbiAgICAgICAgICAgIHZhciB0b3BEaXN0ID0gdG9wIC0gcmVjdC50b3A7XG4gICAgICAgICAgICB2YXIgYm90dG9tRGlzdCA9IHJlY3QuYm90dG9tIC0gdG9wO1xuICAgICAgICAgICAgLy8gY29tcGxldGVseSB3aXRoaW4gdGhlIHJlY3Q/XG4gICAgICAgICAgICBpZiAobGVmdERpc3QgPj0gMCAmJiByaWdodERpc3QgPj0gMCAmJiB0b3BEaXN0ID49IDAgJiYgYm90dG9tRGlzdCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcERpc3QgPD0gZWRnZVRocmVzaG9sZCAmJiB0aGlzLmV2ZXJNb3ZlZFVwICYmIHNjcm9sbENhY2hlLmNhblNjcm9sbFVwKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFiZXN0U2lkZSB8fCBiZXN0U2lkZS5kaXN0YW5jZSA+IHRvcERpc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RTaWRlID0geyBzY3JvbGxDYWNoZTogc2Nyb2xsQ2FjaGUsIG5hbWU6ICd0b3AnLCBkaXN0YW5jZTogdG9wRGlzdCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYm90dG9tRGlzdCA8PSBlZGdlVGhyZXNob2xkICYmIHRoaXMuZXZlck1vdmVkRG93biAmJiBzY3JvbGxDYWNoZS5jYW5TY3JvbGxEb3duKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFiZXN0U2lkZSB8fCBiZXN0U2lkZS5kaXN0YW5jZSA+IGJvdHRvbURpc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RTaWRlID0geyBzY3JvbGxDYWNoZTogc2Nyb2xsQ2FjaGUsIG5hbWU6ICdib3R0b20nLCBkaXN0YW5jZTogYm90dG9tRGlzdCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGVmdERpc3QgPD0gZWRnZVRocmVzaG9sZCAmJiB0aGlzLmV2ZXJNb3ZlZExlZnQgJiYgc2Nyb2xsQ2FjaGUuY2FuU2Nyb2xsTGVmdCgpICYmXG4gICAgICAgICAgICAgICAgICAgICghYmVzdFNpZGUgfHwgYmVzdFNpZGUuZGlzdGFuY2UgPiBsZWZ0RGlzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdFNpZGUgPSB7IHNjcm9sbENhY2hlOiBzY3JvbGxDYWNoZSwgbmFtZTogJ2xlZnQnLCBkaXN0YW5jZTogbGVmdERpc3QgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0RGlzdCA8PSBlZGdlVGhyZXNob2xkICYmIHRoaXMuZXZlck1vdmVkUmlnaHQgJiYgc2Nyb2xsQ2FjaGUuY2FuU2Nyb2xsUmlnaHQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAoIWJlc3RTaWRlIHx8IGJlc3RTaWRlLmRpc3RhbmNlID4gcmlnaHREaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICBiZXN0U2lkZSA9IHsgc2Nyb2xsQ2FjaGU6IHNjcm9sbENhY2hlLCBuYW1lOiAncmlnaHQnLCBkaXN0YW5jZTogcmlnaHREaXN0IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiZXN0U2lkZTtcbiAgICB9O1xuICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUuYnVpbGRDYWNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2Nyb2xsRWxzKCkubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKGVsID09PSB3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdpbmRvd1Njcm9sbEdlb21DYWNoZShmYWxzZSk7IC8vIGZhbHNlID0gZG9uJ3QgbGlzdGVuIHRvIHVzZXItZ2VuZXJhdGVkIHNjcm9sbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudFNjcm9sbEdlb21DYWNoZShlbCwgZmFsc2UpOyAvLyBmYWxzZSA9IGRvbid0IGxpc3RlbiB0byB1c2VyLWdlbmVyYXRlZCBzY3JvbGxzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5xdWVyeVNjcm9sbEVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxRdWVyeTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSA9IF9hW19pXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgZWxzLnB1c2gocXVlcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxzLnB1c2guYXBwbHkoZWxzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbHM7XG4gICAgfTtcbiAgICByZXR1cm4gQXV0b1Njcm9sbGVyO1xufSgpKTtcblxuLypcbk1vbml0b3JzIGRyYWdnaW5nIG9uIGFuIGVsZW1lbnQuIEhhcyBhIG51bWJlciBvZiBoaWdoLWxldmVsIGZlYXR1cmVzOlxuLSBtaW5pbXVtIGRpc3RhbmNlIHJlcXVpcmVkIGJlZm9yZSBkcmFnZ2luZ1xuLSBtaW5pbXVtIHdhaXQgdGltZSAoXCJkZWxheVwiKSBiZWZvcmUgZHJhZ2dpbmdcbi0gYSBtaXJyb3IgZWxlbWVudCB0aGF0IGZvbGxvd3MgdGhlIHBvaW50ZXJcbiovXG52YXIgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGNvbnRhaW5lckVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lckVsKSB8fCB0aGlzO1xuICAgICAgICAvLyBvcHRpb25zIHRoYXQgY2FuIGJlIGRpcmVjdGx5IHNldCBieSBjYWxsZXJcbiAgICAgICAgLy8gdGhlIGNhbGxlciBjYW4gYWxzbyBzZXQgdGhlIFBvaW50ZXJEcmFnZ2luZydzIG9wdGlvbnMgYXMgd2VsbFxuICAgICAgICBfdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgIF90aGlzLm1pbkRpc3RhbmNlID0gMDtcbiAgICAgICAgX3RoaXMudG91Y2hTY3JvbGxBbGxvd2VkID0gdHJ1ZTsgLy8gcHJldmVudHMgZHJhZyBmcm9tIHN0YXJ0aW5nIGFuZCBibG9ja3Mgc2Nyb2xsaW5nIGR1cmluZyBkcmFnXG4gICAgICAgIF90aGlzLm1pcnJvck5lZWRzUmV2ZXJ0ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzSW50ZXJhY3RpbmcgPSBmYWxzZTsgLy8gaXMgdGhlIHVzZXIgdmFsaWRseSBtb3ZpbmcgdGhlIHBvaW50ZXI/IGxhc3RzIHVudGlsIHBvaW50ZXJ1cFxuICAgICAgICBfdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7IC8vIGlzIGl0IElOVEVOVEZVTExZIGRyYWdnaW5nPyBsYXN0cyB1bnRpbCBhZnRlciByZXZlcnQgYW5pbWF0aW9uXG4gICAgICAgIF90aGlzLmlzRGVsYXlFbmRlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0Rpc3RhbmNlU3VycGFzc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmRlbGF5VGltZW91dElkID0gbnVsbDtcbiAgICAgICAgX3RoaXMub25Qb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0RyYWdnaW5nKSB7IC8vIHNvIG5ldyBkcmFnIGRvZXNuJ3QgaGFwcGVuIHdoaWxlIHJldmVydCBhbmltYXRpb24gaXMgZ29pbmdcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0ludGVyYWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0RlbGF5RW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0Rpc3RhbmNlU3VycGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcHJldmVudFNlbGVjdGlvbihkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgICAgICBwcmV2ZW50Q29udGV4dE1lbnUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBsaW5rcyBmcm9tIGJlaW5nIHZpc2l0ZWQgaWYgdGhlcmUncyBhbiBldmVudHVhbCBkcmFnLlxuICAgICAgICAgICAgICAgIC8vIGFsc28gcHJldmVudHMgc2VsZWN0aW9uIGluIG9sZGVyIGJyb3dzZXJzIChtYXliZT8pLlxuICAgICAgICAgICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIHRvdWNoLCBiZXNpZGVzLCBicm93c2VyIHdvdWxkIGNvbXBsYWluIGFib3V0IHBhc3NpdmVuZXNzLlxuICAgICAgICAgICAgICAgIGlmICghZXYuaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICBldi5vcmlnRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnBvaW50ZXIuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhY3Rpb25zIHJlbGF0ZWQgdG8gaW5pdGlhdGluZyBkcmFnc3RhcnQrZHJhZ21vdmUrZHJhZ2VuZC4uLlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5taXJyb3Iuc2V0SXNWaXNpYmxlKGZhbHNlKTsgLy8gcmVzZXQuIGNhbGxlciBtdXN0IHNldC12aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1pcnJvci5zdGFydChldi5zdWJqZWN0RWwsIGV2LnBhZ2VYLCBldi5wYWdlWSk7IC8vIG11c3QgaGFwcGVuIG9uIGZpcnN0IHBvaW50ZXIgZG93blxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGFydERlbGF5KGV2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5taW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlRGlzdGFuY2VTdXJwYXNzZWQoZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5vblBvaW50ZXJNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNJbnRlcmFjdGluZykgeyAvLyBpZiBmYWxzZSwgc3RpbGwgd2FpdGluZyBmb3IgcHJldmlvdXMgZHJhZydzIHJldmVydFxuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcm1vdmUnLCBldik7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0Rpc3RhbmNlU3VycGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW5EaXN0YW5jZSA9IF90aGlzLm1pbkRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VTcSA9IHZvaWQgMDsgLy8gY3VycmVudCBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4sIHNxdWFyZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhWCA9IGV2LmRlbHRhWCwgZGVsdGFZID0gZXYuZGVsdGFZO1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZVNxID0gZGVsdGFYICogZGVsdGFYICsgZGVsdGFZICogZGVsdGFZO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VTcSA+PSBtaW5EaXN0YW5jZSAqIG1pbkRpc3RhbmNlKSB7IC8vIHVzZSBweXRoYWdvcmVhbiB0aGVvcmVtXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVEaXN0YW5jZVN1cnBhc3NlZChldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYSByZWFsIHBvaW50ZXIgbW92ZT8gKG5vdCBvbmUgc2ltdWxhdGVkIGJ5IHNjcm9sbGluZylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2Lm9yaWdFdmVudC50eXBlICE9PSAnc2Nyb2xsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWlycm9yLmhhbmRsZU1vdmUoZXYucGFnZVgsIGV2LnBhZ2VZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmF1dG9TY3JvbGxlci5oYW5kbGVNb3ZlKGV2LnBhZ2VYLCBldi5wYWdlWSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnbW92ZScsIGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uUG9pbnRlclVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNJbnRlcmFjdGluZykgeyAvLyBpZiBmYWxzZSwgc3RpbGwgd2FpdGluZyBmb3IgcHJldmlvdXMgZHJhZydzIHJldmVydFxuICAgICAgICAgICAgICAgIF90aGlzLmlzSW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhbGxvd1NlbGVjdGlvbihkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgICAgICBhbGxvd0NvbnRleHRNZW51KGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcnVwJywgZXYpOyAvLyBjYW4gcG90ZW50aWFsbHkgc2V0IG1pcnJvck5lZWRzUmV2ZXJ0XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXV0b1Njcm9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJ5U3RvcERyYWcoZXYpOyAvLyB3aGljaCB3aWxsIHN0b3AgdGhlIG1pcnJvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZGVsYXlUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVsYXlUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvaW50ZXIgPSBfdGhpcy5wb2ludGVyID0gbmV3IFBvaW50ZXJEcmFnZ2luZyhjb250YWluZXJFbCk7XG4gICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5vblBvaW50ZXJEb3duKTtcbiAgICAgICAgcG9pbnRlci5lbWl0dGVyLm9uKCdwb2ludGVybW92ZScsIF90aGlzLm9uUG9pbnRlck1vdmUpO1xuICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIF90aGlzLm9uUG9pbnRlclVwKTtcbiAgICAgICAgX3RoaXMubWlycm9yID0gbmV3IEVsZW1lbnRNaXJyb3IoKTtcbiAgICAgICAgX3RoaXMuYXV0b1Njcm9sbGVyID0gbmV3IEF1dG9TY3JvbGxlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9pbnRlci5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zdGFydERlbGF5ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXlUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZWxheVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlRGVsYXlFbmQoZXYpO1xuICAgICAgICAgICAgfSwgdGhpcy5kZWxheSk7IC8vIG5vdCBhc3NpZ25hYmxlIHRvIG51bWJlciFcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRGVsYXlFbmQoZXYpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5oYW5kbGVEZWxheUVuZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB0aGlzLmlzRGVsYXlFbmRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudHJ5U3RhcnREcmFnKGV2KTtcbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmhhbmRsZURpc3RhbmNlU3VycGFzc2VkID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHRoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudHJ5U3RhcnREcmFnKGV2KTtcbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnRyeVN0YXJ0RHJhZyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAodGhpcy5pc0RlbGF5RW5kZWQgJiYgdGhpcy5pc0Rpc3RhbmNlU3VycGFzc2VkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRlci53YXNUb3VjaFNjcm9sbCB8fCB0aGlzLnRvdWNoU2Nyb2xsQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5taXJyb3JOZWVkc1JldmVydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYXV0b1Njcm9sbGVyLnN0YXJ0KGV2LnBhZ2VYLCBldi5wYWdlWSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdzdGFydCcsIGV2KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b3VjaFNjcm9sbEFsbG93ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlci5jYW5jZWxUb3VjaFNjcm9sbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUudHJ5U3RvcERyYWcgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgLy8gLnN0b3AoKSBpcyBBTFdBWVMgYXN5bmNocm9ub3VzLCB3aGljaCB3ZSBORUVEIGJlY2F1c2Ugd2Ugd2FudCBhbGwgcG9pbnRlcnVwIGV2ZW50c1xuICAgICAgICAvLyB0aGF0IGNvbWUgZnJvbSB0aGUgZG9jdW1lbnQgdG8gZmlyZSBiZWZvcmVoYW5kLiBtdWNoIG1vcmUgY29udmVuaWVudCB0aGlzIHdheS5cbiAgICAgICAgdGhpcy5taXJyb3Iuc3RvcCh0aGlzLm1pcnJvck5lZWRzUmV2ZXJ0LCB0aGlzLnN0b3BEcmFnLmJpbmQodGhpcywgZXYpIC8vIGJvdW5kIHdpdGggYXJnc1xuICAgICAgICApO1xuICAgIH07XG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc3RvcERyYWcgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnZW5kJywgZXYpO1xuICAgIH07XG4gICAgLy8gZmlsbCBpbiB0aGUgaW1wbGVtZW50YXRpb25zLi4uXG4gICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0SWdub3JlTW92ZSA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHRoaXMucG9pbnRlci5zaG91bGRJZ25vcmVNb3ZlID0gYm9vbDtcbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldE1pcnJvcklzVmlzaWJsZSA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHRoaXMubWlycm9yLnNldElzVmlzaWJsZShib29sKTtcbiAgICB9O1xuICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldE1pcnJvck5lZWRzUmV2ZXJ0ID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgdGhpcy5taXJyb3JOZWVkc1JldmVydCA9IGJvb2w7XG4gICAgfTtcbiAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRBdXRvU2Nyb2xsRW5hYmxlZCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgIHRoaXMuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGJvb2w7XG4gICAgfTtcbiAgICByZXR1cm4gRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZztcbn0oRWxlbWVudERyYWdnaW5nKSk7XG5cbi8qXG5XaGVuIHRoaXMgY2xhc3MgaXMgaW5zdGFudGlhdGVkLCBpdCByZWNvcmRzIHRoZSBvZmZzZXQgb2YgYW4gZWxlbWVudCAocmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50IHRvcGxlZnQpLFxuYW5kIGNvbnRpbnVlcyB0byBtb25pdG9yIHNjcm9sbGluZywgdXBkYXRpbmcgdGhlIGNhY2hlZCBjb29yZGluYXRlcyBpZiBpdCBuZWVkcyB0by5cbkRvZXMgbm90IGFjY2VzcyB0aGUgRE9NIGFmdGVyIGluc3RhbnRpYXRpb24sIHNvIGhpZ2hseSBwZXJmb3JtYW50LlxuXG5BbHNvIGtlZXBzIHRyYWNrIG9mIGFsbCBzY3JvbGxpbmcvb3ZlcmZsb3c6aGlkZGVuIGNvbnRhaW5lcnMgdGhhdCBhcmUgcGFyZW50cyBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuYW5kIGFuIGRldGVybWluZSBpZiBhIGdpdmVuIHBvaW50IGlzIGluc2lkZSB0aGUgY29tYmluZWQgY2xpcHBpbmcgcmVjdGFuZ2xlLlxuKi9cbnZhciBPZmZzZXRUcmFja2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9mZnNldFRyYWNrZXIoZWwpIHtcbiAgICAgICAgdGhpcy5vcmlnUmVjdCA9IGNvbXB1dGVSZWN0KGVsKTtcbiAgICAgICAgLy8gd2lsbCB3b3JrIGZpbmUgZm9yIGRpdnMgdGhhdCBoYXZlIG92ZXJmbG93OmhpZGRlblxuICAgICAgICB0aGlzLnNjcm9sbENhY2hlcyA9IGdldENsaXBwaW5nUGFyZW50cyhlbCkubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbGVtZW50U2Nyb2xsR2VvbUNhY2hlKGVsLCB0cnVlKTsgLy8gbGlzdGVuPXRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9mZnNldFRyYWNrZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbENhY2hlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHNjcm9sbENhY2hlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2Zmc2V0VHJhY2tlci5wcm90b3R5cGUuY29tcHV0ZUxlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZWZ0ID0gdGhpcy5vcmlnUmVjdC5sZWZ0O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICBsZWZ0ICs9IHNjcm9sbENhY2hlLm9yaWdTY3JvbGxMZWZ0IC0gc2Nyb2xsQ2FjaGUuZ2V0U2Nyb2xsTGVmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZWZ0O1xuICAgIH07XG4gICAgT2Zmc2V0VHJhY2tlci5wcm90b3R5cGUuY29tcHV0ZVRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvcCA9IHRoaXMub3JpZ1JlY3QudG9wO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICB0b3AgKz0gc2Nyb2xsQ2FjaGUub3JpZ1Njcm9sbFRvcCAtIHNjcm9sbENhY2hlLmdldFNjcm9sbFRvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3A7XG4gICAgfTtcbiAgICBPZmZzZXRUcmFja2VyLnByb3RvdHlwZS5pc1dpdGhpbkNsaXBwaW5nID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICB2YXIgcG9pbnQgPSB7IGxlZnQ6IHBhZ2VYLCB0b3A6IHBhZ2VZIH07XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbENhY2hlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IF9hW19pXTtcbiAgICAgICAgICAgIGlmICghaXNJZ25vcmVkQ2xpcHBpbmcoc2Nyb2xsQ2FjaGUuZ2V0RXZlbnRUYXJnZXQoKSkgJiZcbiAgICAgICAgICAgICAgICAhcG9pbnRJbnNpZGVSZWN0KHBvaW50LCBzY3JvbGxDYWNoZS5jbGllbnRSZWN0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBPZmZzZXRUcmFja2VyO1xufSgpKTtcbi8vIGNlcnRhaW4gY2xpcHBpbmcgY29udGFpbmVycyBzaG91bGQgbmV2ZXIgY29uc3RyYWluIGludGVyYWN0aW9ucywgbGlrZSA8aHRtbD4gYW5kIDxib2R5PlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Z1bGxjYWxlbmRhci9mdWxsY2FsZW5kYXIvaXNzdWVzLzM2MTVcbmZ1bmN0aW9uIGlzSWdub3JlZENsaXBwaW5nKG5vZGUpIHtcbiAgICB2YXIgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcbiAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ0hUTUwnIHx8IHRhZ05hbWUgPT09ICdCT0RZJztcbn1cblxuLypcblRyYWNrcyBtb3ZlbWVudCBvdmVyIG11bHRpcGxlIGRyb3BwYWJsZSBhcmVhcyAoYWthIFwiaGl0c1wiKVxudGhhdCBleGlzdCBpbiBvbmUgb3IgbW9yZSBEYXRlQ29tcG9uZW50cy5cblJlbGllcyBvbiBhbiBleGlzdGluZyBkcmFnZ2FibGUuXG5cbmVtaXRzOlxuLSBwb2ludGVyZG93blxuLSBkcmFnc3RhcnRcbi0gaGl0Y2hhbmdlIC0gZmlyZXMgaW5pdGlhbGx5LCBldmVuIGlmIG5vdCBvdmVyIGEgaGl0XG4tIHBvaW50ZXJ1cFxuLSAoaGl0Y2hhbmdlIC0gYWdhaW4sIHRvIG51bGwsIGlmIGVuZGVkIG92ZXIgYSBoaXQpXG4tIGRyYWdlbmRcbiovXG52YXIgSGl0RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGl0RHJhZ2dpbmcoZHJhZ2dpbmcsIGRyb3BwYWJsZVN0b3JlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgc2V0IGJ5IGNhbGxlclxuICAgICAgICB0aGlzLnVzZVN1YmplY3RDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXF1aXJlSW5pdGlhbCA9IHRydWU7IC8vIGlmIGRvZXNuJ3Qgc3RhcnQgb3V0IG9uIGEgaGl0LCB3b24ndCBlbWl0IGFueSBldmVudHNcbiAgICAgICAgdGhpcy5pbml0aWFsSGl0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbmFsSGl0ID0gbnVsbDsgLy8gd29uJ3QgZXZlciBiZSBwb3B1bGF0ZWQgaWYgc2hvdWxkSWdub3JlTW92ZVxuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5kcmFnZ2luZztcbiAgICAgICAgICAgIF90aGlzLmluaXRpYWxIaXQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMubW92aW5nSGl0ID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmZpbmFsSGl0ID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLnByZXBhcmVIaXRzKCk7XG4gICAgICAgICAgICBfdGhpcy5wcm9jZXNzRmlyc3RDb29yZChldik7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaW5pdGlhbEhpdCB8fCAhX3RoaXMucmVxdWlyZUluaXRpYWwpIHtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJkb3duJywgZXYpOyAvLyBUT0RPOiBmaXJlIHRoaXMgYmVmb3JlIGNvbXB1dGluZyBwcm9jZXNzRmlyc3RDb29yZCwgc28gbGlzdGVuZXJzIGNhbiBjYW5jZWwuIHRoaXMgZ2V0cyBmaXJlZCBieSBhbG1vc3QgZXZlcnkgaGFuZGxlciA6KFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0SWdub3JlTW92ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVEcmFnU3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ3N0YXJ0JywgZXYpO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlTW92ZShldiwgdHJ1ZSk7IC8vIGZvcmNlID0gZmlyZSBldmVuIGlmIGluaXRpYWxseSBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ01vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ21vdmUnLCBldik7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVNb3ZlKGV2KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLnJlbGVhc2VIaXRzKCk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJ1cCcsIGV2KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVEcmFnRW5kID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMubW92aW5nSGl0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdoaXR1cGRhdGUnLCBudWxsLCB0cnVlLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5maW5hbEhpdCA9IF90aGlzLm1vdmluZ0hpdDtcbiAgICAgICAgICAgIF90aGlzLm1vdmluZ0hpdCA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdlbmQnLCBldik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJvcHBhYmxlU3RvcmUgPSBkcm9wcGFibGVTdG9yZTtcbiAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnbW92ZScsIHRoaXMuaGFuZGxlRHJhZ01vdmUpO1xuICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCk7XG4gICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZHJhZ2dpbmc7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyTWl4aW4oKTtcbiAgICB9XG4gICAgLy8gc2V0cyBpbml0aWFsSGl0XG4gICAgLy8gc2V0cyBjb29yZEFkanVzdFxuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5wcm9jZXNzRmlyc3RDb29yZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgb3JpZ1BvaW50ID0geyBsZWZ0OiBldi5wYWdlWCwgdG9wOiBldi5wYWdlWSB9O1xuICAgICAgICB2YXIgYWRqdXN0ZWRQb2ludCA9IG9yaWdQb2ludDtcbiAgICAgICAgdmFyIHN1YmplY3RFbCA9IGV2LnN1YmplY3RFbDtcbiAgICAgICAgdmFyIHN1YmplY3RSZWN0O1xuICAgICAgICBpZiAoc3ViamVjdEVsICE9PSBkb2N1bWVudCkge1xuICAgICAgICAgICAgc3ViamVjdFJlY3QgPSBjb21wdXRlUmVjdChzdWJqZWN0RWwpO1xuICAgICAgICAgICAgYWRqdXN0ZWRQb2ludCA9IGNvbnN0cmFpblBvaW50KGFkanVzdGVkUG9pbnQsIHN1YmplY3RSZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5pdGlhbEhpdCA9IHRoaXMuaW5pdGlhbEhpdCA9IHRoaXMucXVlcnlIaXRGb3JPZmZzZXQoYWRqdXN0ZWRQb2ludC5sZWZ0LCBhZGp1c3RlZFBvaW50LnRvcCk7XG4gICAgICAgIGlmIChpbml0aWFsSGl0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy51c2VTdWJqZWN0Q2VudGVyICYmIHN1YmplY3RSZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWNlZFN1YmplY3RSZWN0ID0gaW50ZXJzZWN0UmVjdHMoc3ViamVjdFJlY3QsIGluaXRpYWxIaXQucmVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWNlZFN1YmplY3RSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFkanVzdGVkUG9pbnQgPSBnZXRSZWN0Q2VudGVyKHNsaWNlZFN1YmplY3RSZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvb3JkQWRqdXN0ID0gZGlmZlBvaW50cyhhZGp1c3RlZFBvaW50LCBvcmlnUG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb29yZEFkanVzdCA9IHsgbGVmdDogMCwgdG9wOiAwIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5oYW5kbGVNb3ZlID0gZnVuY3Rpb24gKGV2LCBmb3JjZUhhbmRsZSkge1xuICAgICAgICB2YXIgaGl0ID0gdGhpcy5xdWVyeUhpdEZvck9mZnNldChldi5wYWdlWCArIHRoaXMuY29vcmRBZGp1c3QubGVmdCwgZXYucGFnZVkgKyB0aGlzLmNvb3JkQWRqdXN0LnRvcCk7XG4gICAgICAgIGlmIChmb3JjZUhhbmRsZSB8fCAhaXNIaXRzRXF1YWwodGhpcy5tb3ZpbmdIaXQsIGhpdCkpIHtcbiAgICAgICAgICAgIHRoaXMubW92aW5nSGl0ID0gaGl0O1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2hpdHVwZGF0ZScsIGhpdCwgZmFsc2UsIGV2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSGl0RHJhZ2dpbmcucHJvdG90eXBlLnByZXBhcmVIaXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9mZnNldFRyYWNrZXJzID0gbWFwSGFzaCh0aGlzLmRyb3BwYWJsZVN0b3JlLCBmdW5jdGlvbiAoaW50ZXJhY3Rpb25TZXR0aW5ncykge1xuICAgICAgICAgICAgaW50ZXJhY3Rpb25TZXR0aW5ncy5jb21wb25lbnQuYnVpbGRQb3NpdGlvbkNhY2hlcygpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRUcmFja2VyKGludGVyYWN0aW9uU2V0dGluZ3MuZWwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEhpdERyYWdnaW5nLnByb3RvdHlwZS5yZWxlYXNlSGl0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldFRyYWNrZXJzID0gdGhpcy5vZmZzZXRUcmFja2VycztcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gb2Zmc2V0VHJhY2tlcnMpIHtcbiAgICAgICAgICAgIG9mZnNldFRyYWNrZXJzW2lkXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZzZXRUcmFja2VycyA9IHt9O1xuICAgIH07XG4gICAgSGl0RHJhZ2dpbmcucHJvdG90eXBlLnF1ZXJ5SGl0Rm9yT2Zmc2V0ID0gZnVuY3Rpb24gKG9mZnNldExlZnQsIG9mZnNldFRvcCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBkcm9wcGFibGVTdG9yZSA9IF9hLmRyb3BwYWJsZVN0b3JlLCBvZmZzZXRUcmFja2VycyA9IF9hLm9mZnNldFRyYWNrZXJzO1xuICAgICAgICB2YXIgYmVzdEhpdCA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGlkIGluIGRyb3BwYWJsZVN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gZHJvcHBhYmxlU3RvcmVbaWRdLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBvZmZzZXRUcmFja2VyID0gb2Zmc2V0VHJhY2tlcnNbaWRdO1xuICAgICAgICAgICAgaWYgKG9mZnNldFRyYWNrZXIuaXNXaXRoaW5DbGlwcGluZyhvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbkxlZnQgPSBvZmZzZXRUcmFja2VyLmNvbXB1dGVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpblRvcCA9IG9mZnNldFRyYWNrZXIuY29tcHV0ZVRvcCgpO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbkxlZnQgPSBvZmZzZXRMZWZ0IC0gb3JpZ2luTGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25Ub3AgPSBvZmZzZXRUb3AgLSBvcmlnaW5Ub3A7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdSZWN0ID0gb2Zmc2V0VHJhY2tlci5vcmlnUmVjdDtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvcmlnUmVjdC5yaWdodCAtIG9yaWdSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9yaWdSZWN0LmJvdHRvbSAtIG9yaWdSZWN0LnRvcDtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBiZSB3aXRoaW4gdGhlIGVsZW1lbnQncyBib3VuZHNcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkxlZnQgPj0gMCAmJiBwb3NpdGlvbkxlZnQgPCB3aWR0aCAmJlxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblRvcCA+PSAwICYmIHBvc2l0aW9uVG9wIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoaXQgPSBjb21wb25lbnQucXVlcnlIaXQocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgaGl0IGlzIHdpdGhpbiBhY3RpdmVSYW5nZSwgbWVhbmluZyBpdCdzIG5vdCBhIGRlYWwgY2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgIWNvbXBvbmVudC5wcm9wcy5kYXRlUHJvZmlsZSB8fCAvLyBoYWNrIGZvciBEYXlUaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VDb250YWluc1JhbmdlKGNvbXBvbmVudC5wcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgaGl0LmRhdGVTcGFuLnJhbmdlKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghYmVzdEhpdCB8fCBoaXQubGF5ZXIgPiBiZXN0SGl0LmxheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogYmV0dGVyIHdheSB0byByZS1vcmllbnQgcmVjdGFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXQucmVjdC5sZWZ0ICs9IG9yaWdpbkxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaXQucmVjdC5yaWdodCArPSBvcmlnaW5MZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaGl0LnJlY3QudG9wICs9IG9yaWdpblRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpdC5yZWN0LmJvdHRvbSArPSBvcmlnaW5Ub3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0SGl0ID0gaGl0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiZXN0SGl0O1xuICAgIH07XG4gICAgcmV0dXJuIEhpdERyYWdnaW5nO1xufSgpKTtcbmZ1bmN0aW9uIGlzSGl0c0VxdWFsKGhpdDAsIGhpdDEpIHtcbiAgICBpZiAoIWhpdDAgJiYgIWhpdDEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChCb29sZWFuKGhpdDApICE9PSBCb29sZWFuKGhpdDEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGF0ZVNwYW5zRXF1YWwoaGl0MC5kYXRlU3BhbiwgaGl0MS5kYXRlU3Bhbik7XG59XG5cbi8qXG5Nb25pdG9ycyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhIHNwZWNpZmljIGRhdGUvdGltZSBvZiBhIGNvbXBvbmVudC5cbkEgcG9pbnRlcmRvd24rcG9pbnRlcnVwIG9uIHRoZSBzYW1lIFwiaGl0XCIgY29uc3RpdHV0ZXMgYSBjbGljay5cbiovXG52YXIgRGF0ZUNsaWNraW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXRlQ2xpY2tpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF0ZUNsaWNraW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmc7XG4gICAgICAgICAgICAvLyBkbyB0aGlzIGluIHBvaW50ZXJkb3duIChub3QgZHJhZ2VuZCkgYmVjYXVzZSBET00gbWlnaHQgYmUgbXV0YXRlZCBieSB0aGUgdGltZSBkcmFnZW5kIGlzIGZpcmVkXG4gICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFfdGhpcy5jb21wb25lbnQuaXNWYWxpZERhdGVEb3duRWwoZHJhZ2dpbmcucG9pbnRlci5kb3duRWwpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gd29uJ3QgZXZlbiBmaXJlIGlmIG1vdmluZyB3YXMgaWdub3JlZFxuICAgICAgICBfdGhpcy5oYW5kbGVEcmFnRW5kID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX3RoaXMuY29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBfdGhpcy5kcmFnZ2luZy5wb2ludGVyO1xuICAgICAgICAgICAgaWYgKCFwb2ludGVyLndhc1RvdWNoU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuaGl0RHJhZ2dpbmcsIGluaXRpYWxIaXQgPSBfYS5pbml0aWFsSGl0LCBmaW5hbEhpdCA9IF9hLmZpbmFsSGl0O1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsSGl0ICYmIGZpbmFsSGl0ICYmIGlzSGl0c0VxdWFsKGluaXRpYWxIaXQsIGZpbmFsSGl0KSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuY2FsZW5kYXIudHJpZ2dlckRhdGVDbGljayhpbml0aWFsSGl0LmRhdGVTcGFuLCBpbml0aWFsSGl0LmRheUVsLCBjb21wb25lbnQudmlldywgZXYub3JpZ0V2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wb25lbnQgPSBzZXR0aW5ncy5jb21wb25lbnQ7XG4gICAgICAgIC8vIHdlIERPIHdhbnQgdG8gd2F0Y2ggcG9pbnRlciBtb3ZlcyBiZWNhdXNlIG90aGVyd2lzZSBmaW5hbEhpdCB3b24ndCBnZXQgcG9wdWxhdGVkXG4gICAgICAgIF90aGlzLmRyYWdnaW5nID0gbmV3IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcoY29tcG9uZW50LmVsKTtcbiAgICAgICAgX3RoaXMuZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGl0RHJhZ2dpbmcgPSBfdGhpcy5oaXREcmFnZ2luZyA9IG5ldyBIaXREcmFnZ2luZyhfdGhpcy5kcmFnZ2luZywgaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUoc2V0dGluZ3MpKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCBfdGhpcy5oYW5kbGVEcmFnRW5kKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEYXRlQ2xpY2tpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZGVzdHJveSgpO1xuICAgIH07XG4gICAgcmV0dXJuIERhdGVDbGlja2luZztcbn0oSW50ZXJhY3Rpb24pKTtcblxuLypcblRyYWNrcyB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBwb3J0aW9uIG9mIHRpbWUgb2YgYSBjb21wb25lbnQsXG5jb25zdGl0dXRlZCBieSBhIGRyYWcgb3ZlciBkYXRlIGNlbGxzLCB3aXRoIGEgcG9zc2libGUgZGVsYXkgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZHJhZy5cbiovXG52YXIgRGF0ZVNlbGVjdGluZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF0ZVNlbGVjdGluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXRlU2VsZWN0aW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kcmFnU2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBjb21wb25lbnQgPSBfYS5jb21wb25lbnQsIGRyYWdnaW5nID0gX2EuZHJhZ2dpbmc7XG4gICAgICAgICAgICB2YXIgY2FuU2VsZWN0ID0gY29tcG9uZW50Lm9wdCgnc2VsZWN0YWJsZScpICYmXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmlzVmFsaWREYXRlRG93bkVsKGV2Lm9yaWdFdmVudC50YXJnZXQpO1xuICAgICAgICAgICAgLy8gZG9uJ3QgYm90aGVyIHRvIHdhdGNoIGV4cGVuc2l2ZSBtb3ZlcyBpZiBjb21wb25lbnQgd29uJ3QgZG8gc2VsZWN0aW9uXG4gICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFjYW5TZWxlY3QpO1xuICAgICAgICAgICAgLy8gaWYgdG91Y2gsIHJlcXVpcmUgdXNlciB0byBob2xkIGRvd25cbiAgICAgICAgICAgIGRyYWdnaW5nLmRlbGF5ID0gZXYuaXNUb3VjaCA/IGdldENvbXBvbmVudFRvdWNoRGVsYXkoY29tcG9uZW50KSA6IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgX3RoaXMuY29tcG9uZW50LmNhbGVuZGFyLnVuc2VsZWN0KGV2KTsgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsKSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBfdGhpcy5jb21wb25lbnQuY2FsZW5kYXI7XG4gICAgICAgICAgICB2YXIgZHJhZ1NlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IGpvaW5IaXRzSW50b1NlbGVjdGlvbihfdGhpcy5oaXREcmFnZ2luZy5pbml0aWFsSGl0LCBoaXQsIGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5kYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRyYWdTZWxlY3Rpb24gfHwgIV90aGlzLmNvbXBvbmVudC5pc0RhdGVTZWxlY3Rpb25WYWxpZChkcmFnU2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBkcmFnU2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHJhZ1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogZHJhZ1NlbGVjdGlvbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0ZpbmFsKSB7IC8vIG9ubHkgdW5zZWxlY3QgaWYgbW92ZWQgYXdheSB3aGlsZSBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0RBVEVTJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnU2VsZWN0aW9uID0gZHJhZ1NlbGVjdGlvbjsgLy8gb25seSBjbGVhciBpZiBtb3ZlZCBhd2F5IGZyb20gYWxsIGhpdHMgd2hpbGUgZHJhZ2dpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLmRyYWdTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3Rpb24gaXMgYWxyZWFkeSByZW5kZXJlZCwgc28ganVzdCBuZWVkIHRvIHJlcG9ydCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wb25lbnQuY2FsZW5kYXIudHJpZ2dlckRhdGVTZWxlY3QoX3RoaXMuZHJhZ1NlbGVjdGlvbiwgcGV2KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnU2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHNldHRpbmdzLmNvbXBvbmVudDtcbiAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmcgPSBuZXcgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyhjb21wb25lbnQuZWwpO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgZHJhZ2dpbmcubWluRGlzdGFuY2UgPSBjb21wb25lbnQub3B0KCdzZWxlY3RNaW5EaXN0YW5jZScpIHx8IDA7XG4gICAgICAgIGRyYWdnaW5nLmF1dG9TY3JvbGxlci5pc0VuYWJsZWQgPSBjb21wb25lbnQub3B0KCdkcmFnU2Nyb2xsJyk7XG4gICAgICAgIHZhciBoaXREcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nID0gbmV3IEhpdERyYWdnaW5nKF90aGlzLmRyYWdnaW5nLCBpbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZShzZXR0aW5ncykpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignaGl0dXBkYXRlJywgX3RoaXMuaGFuZGxlSGl0VXBkYXRlKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcnVwJywgX3RoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEYXRlU2VsZWN0aW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRlU2VsZWN0aW5nO1xufShJbnRlcmFjdGlvbikpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VG91Y2hEZWxheShjb21wb25lbnQpIHtcbiAgICB2YXIgZGVsYXkgPSBjb21wb25lbnQub3B0KCdzZWxlY3RMb25nUHJlc3NEZWxheScpO1xuICAgIGlmIChkZWxheSA9PSBudWxsKSB7XG4gICAgICAgIGRlbGF5ID0gY29tcG9uZW50Lm9wdCgnbG9uZ1ByZXNzRGVsYXknKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGF5O1xufVxuZnVuY3Rpb24gam9pbkhpdHNJbnRvU2VsZWN0aW9uKGhpdDAsIGhpdDEsIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnMpIHtcbiAgICB2YXIgZGF0ZVNwYW4wID0gaGl0MC5kYXRlU3BhbjtcbiAgICB2YXIgZGF0ZVNwYW4xID0gaGl0MS5kYXRlU3BhbjtcbiAgICB2YXIgbXMgPSBbXG4gICAgICAgIGRhdGVTcGFuMC5yYW5nZS5zdGFydCxcbiAgICAgICAgZGF0ZVNwYW4wLnJhbmdlLmVuZCxcbiAgICAgICAgZGF0ZVNwYW4xLnJhbmdlLnN0YXJ0LFxuICAgICAgICBkYXRlU3BhbjEucmFuZ2UuZW5kXG4gICAgXTtcbiAgICBtcy5zb3J0KGNvbXBhcmVOdW1iZXJzKTtcbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMSA9IGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM7IF9pIDwgZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVyc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzXzFbX2ldO1xuICAgICAgICB2YXIgcmVzID0gdHJhbnNmb3JtZXIoaGl0MCwgaGl0MSk7XG4gICAgICAgIGlmIChyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXMpIHtcbiAgICAgICAgICAgIF9fYXNzaWduKHByb3BzLCByZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb3BzLnJhbmdlID0geyBzdGFydDogbXNbMF0sIGVuZDogbXNbM10gfTtcbiAgICBwcm9wcy5hbGxEYXkgPSBkYXRlU3BhbjAuYWxsRGF5O1xuICAgIHJldHVybiBwcm9wcztcbn1cblxudmFyIEV2ZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZW50RHJhZ2dpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRXZlbnREcmFnZ2luZyhzZXR0aW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgLy8gaW50ZXJuYWwgc3RhdGVcbiAgICAgICAgX3RoaXMuc3ViamVjdFNlZyA9IG51bGw7IC8vIHRoZSBzZWcgYmVpbmcgc2VsZWN0ZWQvZHJhZ2dlZFxuICAgICAgICBfdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmV2ZW50UmFuZ2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IG51bGw7IC8vIHRoZSBldmVudHMgYmVpbmcgZHJhZ2dlZFxuICAgICAgICBfdGhpcy5yZWNlaXZpbmdDYWxlbmRhciA9IG51bGw7XG4gICAgICAgIF90aGlzLnZhbGlkTXV0YXRpb24gPSBudWxsO1xuICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIG9yaWdUYXJnZXQgPSBldi5vcmlnRXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCwgZHJhZ2dpbmcgPSBfYS5kcmFnZ2luZztcbiAgICAgICAgICAgIHZhciBtaXJyb3IgPSBkcmFnZ2luZy5taXJyb3I7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbENhbGVuZGFyID0gY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICAgICAgdmFyIHN1YmplY3RTZWcgPSBfdGhpcy5zdWJqZWN0U2VnID0gZ2V0RWxTZWcoZXYuc3ViamVjdEVsKTtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gX3RoaXMuZXZlbnRSYW5nZSA9IHN1YmplY3RTZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlSWQgPSBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IGdldFJlbGV2YW50RXZlbnRzKGluaXRpYWxDYWxlbmRhci5zdGF0ZS5ldmVudFN0b3JlLCBldmVudEluc3RhbmNlSWQpO1xuICAgICAgICAgICAgZHJhZ2dpbmcubWluRGlzdGFuY2UgPSBldi5pc1RvdWNoID8gMCA6IGNvbXBvbmVudC5vcHQoJ2V2ZW50RHJhZ01pbkRpc3RhbmNlJyk7XG4gICAgICAgICAgICBkcmFnZ2luZy5kZWxheSA9XG4gICAgICAgICAgICAgICAgLy8gb25seSBkbyBhIHRvdWNoIGRlbGF5IGlmIHRvdWNoIGFuZCB0aGlzIGV2ZW50IGhhc24ndCBiZWVuIHNlbGVjdGVkIHlldFxuICAgICAgICAgICAgICAgIChldi5pc1RvdWNoICYmIGV2ZW50SW5zdGFuY2VJZCAhPT0gY29tcG9uZW50LnByb3BzLmV2ZW50U2VsZWN0aW9uKSA/XG4gICAgICAgICAgICAgICAgICAgIGdldENvbXBvbmVudFRvdWNoRGVsYXkkMShjb21wb25lbnQpIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIG1pcnJvci5wYXJlbnROb2RlID0gaW5pdGlhbENhbGVuZGFyLmVsO1xuICAgICAgICAgICAgbWlycm9yLnJldmVydER1cmF0aW9uID0gY29tcG9uZW50Lm9wdCgnZHJhZ1JldmVydER1cmF0aW9uJyk7XG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKG9yaWdUYXJnZXQpICYmXG4gICAgICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KG9yaWdUYXJnZXQsICcuZmMtcmVzaXplcicpOyAvLyBOT1Qgb24gYSByZXNpemVyXG4gICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFpc1ZhbGlkKTtcbiAgICAgICAgICAgIC8vIGRpc2FibGUgZHJhZ2dpbmcgZm9yIGVsZW1lbnRzIHRoYXQgYXJlIHJlc2l6YWJsZSAoaWUsIHNlbGVjdGFibGUpXG4gICAgICAgICAgICAvLyBidXQgYXJlIG5vdCBkcmFnZ2FibGVcbiAgICAgICAgICAgIF90aGlzLmlzRHJhZ2dpbmcgPSBpc1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgZXYuc3ViamVjdEVsLmNsYXNzTGlzdC5jb250YWlucygnZmMtZHJhZ2dhYmxlJyk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGluaXRpYWxDYWxlbmRhciA9IF90aGlzLmNvbXBvbmVudC5jYWxlbmRhcjtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gX3RoaXMuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlSWQgPSBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICBpZiAoZXYuaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gc2VsZWN0IGEgZGlmZmVyZW50IGV2ZW50P1xuICAgICAgICAgICAgICAgIGlmIChldmVudEluc3RhbmNlSWQgIT09IF90aGlzLmNvbXBvbmVudC5wcm9wcy5ldmVudFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ2FsZW5kYXIuZGlzcGF0Y2goeyB0eXBlOiAnU0VMRUNUX0VWRU5UJywgZXZlbnRJbnN0YW5jZUlkOiBldmVudEluc3RhbmNlSWQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgbm93IHVzaW5nIG1vdXNlLCBidXQgd2FzIHByZXZpb3VzIHRvdWNoIGludGVyYWN0aW9uLCBjbGVhciBzZWxlY3RlZCBldmVudFxuICAgICAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhci5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFTEVDVF9FVkVOVCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhci51bnNlbGVjdChldik7IC8vIHVuc2VsZWN0ICpkYXRlKiBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICBpbml0aWFsQ2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudERyYWdTdGFydCcsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IF90aGlzLnN1YmplY3RTZWcuZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGluaXRpYWxDYWxlbmRhciwgZXZlbnRSYW5nZS5kZWYsIGV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYub3JpZ0V2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogX3RoaXMuY29tcG9uZW50LnZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVsZXZhbnRFdmVudHMgPSBfdGhpcy5yZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgIHZhciBpbml0aWFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuaW5pdGlhbEhpdDtcbiAgICAgICAgICAgIHZhciBpbml0aWFsQ2FsZW5kYXIgPSBfdGhpcy5jb21wb25lbnQuY2FsZW5kYXI7XG4gICAgICAgICAgICAvLyBzdGF0ZXMgYmFzZWQgb24gbmV3IGhpdFxuICAgICAgICAgICAgdmFyIHJlY2VpdmluZ0NhbGVuZGFyID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogcmVsZXZhbnRFdmVudHMsXG4gICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgaXNFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcmlnU2VnOiBfdGhpcy5zdWJqZWN0U2VnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgIHZhciByZWNlaXZpbmdDb21wb25lbnQgPSBoaXQuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyID0gcmVjZWl2aW5nQ29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsQ2FsZW5kYXIgPT09IHJlY2VpdmluZ0NhbGVuZGFyIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbXBvbmVudC5vcHQoJ2VkaXRhYmxlJykgJiYgcmVjZWl2aW5nQ29tcG9uZW50Lm9wdCgnZHJvcHBhYmxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb24gPSBjb21wdXRlRXZlbnRNdXRhdGlvbihpbml0aWFsSGl0LCBoaXQsIHJlY2VpdmluZ0NhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudERyYWdNdXRhdGlvbk1hc3NhZ2Vycyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShyZWxldmFudEV2ZW50cywgcmVjZWl2aW5nQ2FsZW5kYXIuZXZlbnRVaUJhc2VzLCBtdXRhdGlvbiwgcmVjZWl2aW5nQ2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IG11dGF0ZWRSZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVjZWl2aW5nQ29tcG9uZW50LmlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ2FsZW5kYXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmRpc3BsYXlEcmFnKHJlY2VpdmluZ0NhbGVuZGFyLCBpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICBpZiAoIWlzSW52YWxpZCkge1xuICAgICAgICAgICAgICAgIGVuYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0ZpbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxDYWxlbmRhciA9PT0gcmVjZWl2aW5nQ2FsZW5kYXIgJiYgLy8gVE9ETzogd3JpdGUgdGVzdCBmb3IgdGhpc1xuICAgICAgICAgICAgICAgICAgICBpc0hpdHNFcXVhbChpbml0aWFsSGl0LCBoaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcuc2V0TWlycm9yTmVlZHNSZXZlcnQoIW11dGF0aW9uKTtcbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgdGhlIG1pcnJvciBpZiBubyBhbHJlYWR5LXJlbmRlcmVkIG1pcnJvclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHdpc2ggd2UgY291bGQgc29tZWhvdyB3YWl0IGZvciBkaXNwYXRjaCB0byBndWFyYW50ZWUgcmVuZGVyXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcuc2V0TWlycm9ySXNWaXNpYmxlKCFoaXQgfHwgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYy1taXJyb3InKSk7XG4gICAgICAgICAgICAgICAgLy8gYXNzaWduIHN0YXRlcyBiYXNlZCBvbiBuZXcgaGl0XG4gICAgICAgICAgICAgICAgX3RoaXMucmVjZWl2aW5nQ2FsZW5kYXIgPSByZWNlaXZpbmdDYWxlbmRhcjtcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbXV0YXRpb247XG4gICAgICAgICAgICAgICAgX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7IC8vIGJlY2F1c2UgaGFuZGxlRHJhZ0VuZCB3b24ndCBmaXJlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaXRpYWxDYWxlbmRhcl8xID0gX3RoaXMuY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmlldyA9IF90aGlzLmNvbXBvbmVudC52aWV3O1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCByZWNlaXZpbmdDYWxlbmRhciA9IF9hLnJlY2VpdmluZ0NhbGVuZGFyLCB2YWxpZE11dGF0aW9uID0gX2EudmFsaWRNdXRhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnREZWYgPSBfdGhpcy5ldmVudFJhbmdlLmRlZjtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50QXBpID0gbmV3IEV2ZW50QXBpKGluaXRpYWxDYWxlbmRhcl8xLCBldmVudERlZiwgZXZlbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlbGV2YW50RXZlbnRzXzEgPSBfdGhpcy5yZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIHZhciBmaW5hbEhpdCA9IF90aGlzLmhpdERyYWdnaW5nLmZpbmFsSGl0O1xuICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyRHJhZygpOyAvLyBtdXN0IGhhcHBlbiBhZnRlciByZXZlcnQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgaW5pdGlhbENhbGVuZGFyXzEucHVibGljbHlUcmlnZ2VyKCdldmVudERyYWdTdG9wJywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbDogX3RoaXMuc3ViamVjdFNlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IGluaXRpYWxWaWV3XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRNdXRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBkcm9wcGVkIHdpdGhpbiBzYW1lIGNhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNlaXZpbmdDYWxlbmRhciA9PT0gaW5pdGlhbENhbGVuZGFyXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhcl8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBtdXRhdGVkUmVsZXZhbnRFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gaW5pdGlhbENhbGVuZGFyXzEucGx1Z2luU3lzdGVtLmhvb2tzLmV2ZW50RHJvcFRyYW5zZm9ybWVyczsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBfYltfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19hc3NpZ24odHJhbnNmb3JtZWQsIHRyYW5zZm9ybWVyKHZhbGlkTXV0YXRpb24sIGluaXRpYWxDYWxlbmRhcl8xKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnREcm9wQXJnID0gX19hc3NpZ24oe30sIHRyYW5zZm9ybWVkLCB7IGVsOiBldi5zdWJqZWN0RWwsIGRlbHRhOiB2YWxpZE11dGF0aW9uLmRhdGVzRGVsdGEsIG9sZEV2ZW50OiBldmVudEFwaSwgZXZlbnQ6IG5ldyBFdmVudEFwaSgvLyB0aGUgZGF0YSBBRlRFUiB0aGUgbXV0YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ2FsZW5kYXJfMSwgbXV0YXRlZFJlbGV2YW50RXZlbnRzLmRlZnNbZXZlbnREZWYuZGVmSWRdLCBldmVudEluc3RhbmNlID8gbXV0YXRlZFJlbGV2YW50RXZlbnRzLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdIDogbnVsbCksIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ2FsZW5kYXJfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHJlbGV2YW50RXZlbnRzXzFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwganNFdmVudDogZXYub3JpZ0V2ZW50LCB2aWV3OiBpbml0aWFsVmlldyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhcl8xLnB1YmxpY2x5VHJpZ2dlcignZXZlbnREcm9wJywgW2V2ZW50RHJvcEFyZ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvcHBlZCBpbiBkaWZmZXJlbnQgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWNlaXZpbmdDYWxlbmRhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENhbGVuZGFyXzEucHVibGljbHlUcmlnZ2VyKCdldmVudExlYXZlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZEVsOiBldi5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogaW5pdGlhbFZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDYWxlbmRhcl8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX0VWRU5UX0lOU1RBTkNFUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzOiBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMuaW5zdGFuY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRUxFQ1RfRVZFTlQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEluc3RhbmNlSWQ6IGV2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRyb3BBcmcgPSBfX2Fzc2lnbih7fSwgcmVjZWl2aW5nQ2FsZW5kYXIuYnVpbGREYXRlUG9pbnRBcGkoZmluYWxIaXQuZGF0ZVNwYW4pLCB7IGRyYWdnZWRFbDogZXYuc3ViamVjdEVsLCBqc0V2ZW50OiBldi5vcmlnRXZlbnQsIHZpZXc6IGZpbmFsSGl0LmNvbXBvbmVudCAvLyBzaG91bGQgdGhpcyBiZSBmaW5hbEhpdC5jb21wb25lbnQudmlldz8gU2VlICM0NjQ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDYWxlbmRhci5wdWJsaWNseVRyaWdnZXIoJ2Ryb3AnLCBbZHJvcEFyZ10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudFJlY2VpdmUnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkRWw6IGV2LnN1YmplY3RFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaSgvLyB0aGUgZGF0YSBBRlRFUiB0aGUgbXV0YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ2FsZW5kYXIsIG11dGF0ZWRSZWxldmFudEV2ZW50cy5kZWZzW2V2ZW50RGVmLmRlZklkXSwgbXV0YXRlZFJlbGV2YW50RXZlbnRzLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogZmluYWxIaXQuY29tcG9uZW50IC8vIHNob3VsZCB0aGlzIGJlIGZpbmFsSGl0LmNvbXBvbmVudC52aWV3PyBTZWUgIzQ2NDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENhbGVuZGFyXzEucHVibGljbHlUcmlnZ2VyKCdfbm9FdmVudERyb3AnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nID0gbmV3IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcoY29tcG9uZW50LmVsKTtcbiAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IEV2ZW50RHJhZ2dpbmcuU0VMRUNUT1I7XG4gICAgICAgIGRyYWdnaW5nLnRvdWNoU2Nyb2xsQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICBkcmFnZ2luZy5hdXRvU2Nyb2xsZXIuaXNFbmFibGVkID0gY29tcG9uZW50Lm9wdCgnZHJhZ1Njcm9sbCcpO1xuICAgICAgICB2YXIgaGl0RHJhZ2dpbmcgPSBfdGhpcy5oaXREcmFnZ2luZyA9IG5ldyBIaXREcmFnZ2luZyhfdGhpcy5kcmFnZ2luZywgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcudXNlU3ViamVjdENlbnRlciA9IHNldHRpbmdzLnVzZUV2ZW50Q2VudGVyO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignaGl0dXBkYXRlJywgX3RoaXMuaGFuZGxlSGl0VXBkYXRlKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcnVwJywgX3RoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ2VuZCcsIF90aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV2ZW50RHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZGVzdHJveSgpO1xuICAgIH07XG4gICAgLy8gcmVuZGVyIGEgZHJhZyBzdGF0ZSBvbiB0aGUgbmV4dCByZWNlaXZpbmdDYWxlbmRhclxuICAgIEV2ZW50RHJhZ2dpbmcucHJvdG90eXBlLmRpc3BsYXlEcmFnID0gZnVuY3Rpb24gKG5leHRDYWxlbmRhciwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGluaXRpYWxDYWxlbmRhciA9IHRoaXMuY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICB2YXIgcHJldkNhbGVuZGFyID0gdGhpcy5yZWNlaXZpbmdDYWxlbmRhcjtcbiAgICAgICAgLy8gZG9lcyB0aGUgcHJldmlvdXMgY2FsZW5kYXIgbmVlZCB0byBiZSBjbGVhcmVkP1xuICAgICAgICBpZiAocHJldkNhbGVuZGFyICYmIHByZXZDYWxlbmRhciAhPT0gbmV4dENhbGVuZGFyKSB7XG4gICAgICAgICAgICAvLyBkb2VzIHRoZSBpbml0aWFsIGNhbGVuZGFyIG5lZWQgdG8gYmUgY2xlYXJlZD9cbiAgICAgICAgICAgIC8vIGlmIHNvLCBkb24ndCBjbGVhciBhbGwgdGhlIHdheS4gd2Ugc3RpbGwgbmVlZCB0byB0byBoaWRlIHRoZSBhZmZlY3RlZEV2ZW50c1xuICAgICAgICAgICAgaWYgKHByZXZDYWxlbmRhciA9PT0gaW5pdGlhbENhbGVuZGFyKSB7XG4gICAgICAgICAgICAgICAgcHJldkNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9FVkVOVF9EUkFHJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBzdGF0ZS5hZmZlY3RlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdTZWc6IHN0YXRlLm9yaWdTZWdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIGNvbXBsZXRlbHkgY2xlYXIgdGhlIG9sZCBjYWxlbmRhciBpZiBpdCB3YXNuJ3QgdGhlIGluaXRpYWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByZXZDYWxlbmRhci5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dENhbGVuZGFyKSB7XG4gICAgICAgICAgICBuZXh0Q2FsZW5kYXIuZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VWRU5UX0RSQUcnLCBzdGF0ZTogc3RhdGUgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RHJhZ2dpbmcucHJvdG90eXBlLmNsZWFyRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluaXRpYWxDYWxlbmRhciA9IHRoaXMuY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICB2YXIgcmVjZWl2aW5nQ2FsZW5kYXIgPSB0aGlzLnJlY2VpdmluZ0NhbGVuZGFyO1xuICAgICAgICBpZiAocmVjZWl2aW5nQ2FsZW5kYXIpIHtcbiAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VUX0VWRU5UX0RSQUcnIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZSBpbml0aWFsIGNhbGVuZGFyIG1pZ2h0IGhhdmUgYW4gZHVtbXkgZHJhZyBzdGF0ZSBmcm9tIGRpc3BsYXlEcmFnXG4gICAgICAgIGlmIChpbml0aWFsQ2FsZW5kYXIgIT09IHJlY2VpdmluZ0NhbGVuZGFyKSB7XG4gICAgICAgICAgICBpbml0aWFsQ2FsZW5kYXIuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfRFJBRycgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RHJhZ2dpbmcucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdFNlZyA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZW50UmFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWNlaXZpbmdDYWxlbmRhciA9IG51bGw7XG4gICAgICAgIHRoaXMudmFsaWRNdXRhdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICB9O1xuICAgIEV2ZW50RHJhZ2dpbmcuU0VMRUNUT1IgPSAnLmZjLWRyYWdnYWJsZSwgLmZjLXJlc2l6YWJsZSc7IC8vIFRPRE86IHRlc3QgdGhpcyBpbiBJRTExXG4gICAgcmV0dXJuIEV2ZW50RHJhZ2dpbmc7XG59KEludGVyYWN0aW9uKSk7XG5mdW5jdGlvbiBjb21wdXRlRXZlbnRNdXRhdGlvbihoaXQwLCBoaXQxLCBtYXNzYWdlcnMpIHtcbiAgICB2YXIgZGF0ZVNwYW4wID0gaGl0MC5kYXRlU3BhbjtcbiAgICB2YXIgZGF0ZVNwYW4xID0gaGl0MS5kYXRlU3BhbjtcbiAgICB2YXIgZGF0ZTAgPSBkYXRlU3BhbjAucmFuZ2Uuc3RhcnQ7XG4gICAgdmFyIGRhdGUxID0gZGF0ZVNwYW4xLnJhbmdlLnN0YXJ0O1xuICAgIHZhciBzdGFuZGFyZFByb3BzID0ge307XG4gICAgaWYgKGRhdGVTcGFuMC5hbGxEYXkgIT09IGRhdGVTcGFuMS5hbGxEYXkpIHtcbiAgICAgICAgc3RhbmRhcmRQcm9wcy5hbGxEYXkgPSBkYXRlU3BhbjEuYWxsRGF5O1xuICAgICAgICBzdGFuZGFyZFByb3BzLmhhc0VuZCA9IGhpdDEuY29tcG9uZW50Lm9wdCgnYWxsRGF5TWFpbnRhaW5EdXJhdGlvbicpO1xuICAgICAgICBpZiAoZGF0ZVNwYW4xLmFsbERheSkge1xuICAgICAgICAgICAgLy8gbWVhbnMgZGF0ZTEgaXMgYWxyZWFkeSBzdGFydC1vZi1kYXksXG4gICAgICAgICAgICAvLyBidXQgZGF0ZTAgbmVlZHMgdG8gYmUgY29udmVydGVkXG4gICAgICAgICAgICBkYXRlMCA9IHN0YXJ0T2ZEYXkoZGF0ZTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBkZWx0YSA9IGRpZmZEYXRlcyhkYXRlMCwgZGF0ZTEsIGhpdDAuY29tcG9uZW50LmRhdGVFbnYsIGhpdDAuY29tcG9uZW50ID09PSBoaXQxLmNvbXBvbmVudCA/XG4gICAgICAgIGhpdDAuY29tcG9uZW50LmxhcmdlVW5pdCA6XG4gICAgICAgIG51bGwpO1xuICAgIGlmIChkZWx0YS5taWxsaXNlY29uZHMpIHsgLy8gaGFzIGhvdXJzL21pbnV0ZXMvc2Vjb25kc1xuICAgICAgICBzdGFuZGFyZFByb3BzLmFsbERheSA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgbXV0YXRpb24gPSB7XG4gICAgICAgIGRhdGVzRGVsdGE6IGRlbHRhLFxuICAgICAgICBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzXG4gICAgfTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIG1hc3NhZ2Vyc18xID0gbWFzc2FnZXJzOyBfaSA8IG1hc3NhZ2Vyc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgbWFzc2FnZXIgPSBtYXNzYWdlcnNfMVtfaV07XG4gICAgICAgIG1hc3NhZ2VyKG11dGF0aW9uLCBoaXQwLCBoaXQxKTtcbiAgICB9XG4gICAgcmV0dXJuIG11dGF0aW9uO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VG91Y2hEZWxheSQxKGNvbXBvbmVudCkge1xuICAgIHZhciBkZWxheSA9IGNvbXBvbmVudC5vcHQoJ2V2ZW50TG9uZ1ByZXNzRGVsYXknKTtcbiAgICBpZiAoZGVsYXkgPT0gbnVsbCkge1xuICAgICAgICBkZWxheSA9IGNvbXBvbmVudC5vcHQoJ2xvbmdQcmVzc0RlbGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBkZWxheTtcbn1cblxudmFyIEV2ZW50RHJhZ2dpbmckMSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRXZlbnREcmFnZ2luZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudERyYWdnaW5nKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZyA9IG51bGw7IC8vIFRPRE86IHJlbmFtZSB0byByZXNpemluZ1NlZz8gc3ViamVjdFNlZz9cbiAgICAgICAgX3RoaXMuZXZlbnRSYW5nZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgX3RoaXMudmFsaWRNdXRhdGlvbiA9IG51bGw7XG4gICAgICAgIF90aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX3RoaXMuY29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIHNlZyA9IF90aGlzLnF1ZXJ5U2VnKGV2KTtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gX3RoaXMuZXZlbnRSYW5nZSA9IHNlZy5ldmVudFJhbmdlO1xuICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcubWluRGlzdGFuY2UgPSBjb21wb25lbnQub3B0KCdldmVudERyYWdNaW5EaXN0YW5jZScpO1xuICAgICAgICAgICAgLy8gaWYgdG91Y2gsIG5lZWQgdG8gYmUgd29ya2luZyB3aXRoIGEgc2VsZWN0ZWQgZXZlbnRcbiAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLnNldElnbm9yZU1vdmUoIV90aGlzLmNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKGV2Lm9yaWdFdmVudC50YXJnZXQpIHx8XG4gICAgICAgICAgICAgICAgKGV2LmlzVG91Y2ggJiYgX3RoaXMuY29tcG9uZW50LnByb3BzLmV2ZW50U2VsZWN0aW9uICE9PSBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQpKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBfdGhpcy5jb21wb25lbnQuY2FsZW5kYXI7XG4gICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IF90aGlzLmV2ZW50UmFuZ2U7XG4gICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IGdldFJlbGV2YW50RXZlbnRzKGNhbGVuZGFyLnN0YXRlLmV2ZW50U3RvcmUsIF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZyA9IF90aGlzLnF1ZXJ5U2VnKGV2KTtcbiAgICAgICAgICAgIGNhbGVuZGFyLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICBjYWxlbmRhci5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50UmVzaXplU3RhcnQnLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbDogX3RoaXMuZHJhZ2dpbmdTZWcuZWwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIGV2ZW50UmFuZ2UuZGVmLCBldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYub3JpZ0V2ZW50LFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiBfdGhpcy5jb21wb25lbnQudmlld1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsLCBldikge1xuICAgICAgICAgICAgdmFyIGNhbGVuZGFyID0gX3RoaXMuY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICAgICAgdmFyIHJlbGV2YW50RXZlbnRzID0gX3RoaXMucmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEhpdCA9IF90aGlzLmhpdERyYWdnaW5nLmluaXRpYWxIaXQ7XG4gICAgICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRFdmVudHM6IHJlbGV2YW50RXZlbnRzLFxuICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3JpZ1NlZzogX3RoaXMuZHJhZ2dpbmdTZWdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgbXV0YXRpb24gPSBjb21wdXRlTXV0YXRpb24oaW5pdGlhbEhpdCwgaGl0LCBldi5zdWJqZWN0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy1zdGFydC1yZXNpemVyJyksIGV2ZW50SW5zdGFuY2UucmFuZ2UsIGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5ldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUocmVsZXZhbnRFdmVudHMsIGNhbGVuZGFyLmV2ZW50VWlCYXNlcywgbXV0YXRpb24sIGNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY29tcG9uZW50LmlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXV0YXRlZFJlbGV2YW50RXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX0VWRU5UX1JFU0laRScsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBpbnRlcmFjdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfUkVTSVpFJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24gJiYgaXNIaXRzRXF1YWwoaW5pdGlhbEhpdCwgaGl0KSkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkTXV0YXRpb24gPSBtdXRhdGlvbjtcbiAgICAgICAgICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBtdXRhdGVkUmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IF90aGlzLmNvbXBvbmVudC5jYWxlbmRhcjtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gX3RoaXMuY29tcG9uZW50LnZpZXc7XG4gICAgICAgICAgICB2YXIgZXZlbnREZWYgPSBfdGhpcy5ldmVudFJhbmdlLmRlZjtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gX3RoaXMuZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgIHZhciBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgZXZlbnREZWYsIGV2ZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgdmFyIHJlbGV2YW50RXZlbnRzID0gX3RoaXMucmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudFJlc2l6ZVN0b3AnLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbDogX3RoaXMuZHJhZ2dpbmdTZWcuZWwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYub3JpZ0V2ZW50LFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMudmFsaWRNdXRhdGlvbikge1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IG11dGF0ZWRSZWxldmFudEV2ZW50c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLnB1YmxpY2x5VHJpZ2dlcignZXZlbnRSZXNpemUnLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBfdGhpcy5kcmFnZ2luZ1NlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGVsdGE6IF90aGlzLnZhbGlkTXV0YXRpb24uc3RhcnREZWx0YSB8fCBjcmVhdGVEdXJhdGlvbigwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZERlbHRhOiBfdGhpcy52YWxpZE11dGF0aW9uLmVuZERlbHRhIHx8IGNyZWF0ZUR1cmF0aW9uKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldkV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoLy8gdGhlIGRhdGEgQUZURVIgdGhlIG11dGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhciwgbXV0YXRlZFJlbGV2YW50RXZlbnRzLmRlZnNbZXZlbnREZWYuZGVmSWRdLCBldmVudEluc3RhbmNlID8gbXV0YXRlZFJlbGV2YW50RXZlbnRzLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdIDogbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNRVJHRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiByZWxldmFudEV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdfbm9FdmVudFJlc2l6ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIC8vIG9rYXkgdG8ga2VlcCBldmVudEluc3RhbmNlIGFyb3VuZC4gdXNlZnVsIHRvIHNldCBpdCBpbiBoYW5kbGVQb2ludGVyRG93blxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGNvbXBvbmVudC5lbCk7XG4gICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSAnLmZjLXJlc2l6ZXInO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGNvbXBvbmVudC5vcHQoJ2RyYWdTY3JvbGwnKTtcbiAgICAgICAgdmFyIGhpdERyYWdnaW5nID0gX3RoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoX3RoaXMuZHJhZ2dpbmcsIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlKHNldHRpbmdzKSk7XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCBfdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdoaXR1cGRhdGUnLCBfdGhpcy5oYW5kbGVIaXRVcGRhdGUpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgX3RoaXMuaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBFdmVudERyYWdnaW5nLnByb3RvdHlwZS5xdWVyeVNlZyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICByZXR1cm4gZ2V0RWxTZWcoZWxlbWVudENsb3Nlc3QoZXYuc3ViamVjdEVsLCB0aGlzLmNvbXBvbmVudC5mZ1NlZ1NlbGVjdG9yKSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlbnREcmFnZ2luZztcbn0oSW50ZXJhY3Rpb24pKTtcbmZ1bmN0aW9uIGNvbXB1dGVNdXRhdGlvbihoaXQwLCBoaXQxLCBpc0Zyb21TdGFydCwgaW5zdGFuY2VSYW5nZSwgdHJhbnNmb3Jtcykge1xuICAgIHZhciBkYXRlRW52ID0gaGl0MC5jb21wb25lbnQuZGF0ZUVudjtcbiAgICB2YXIgZGF0ZTAgPSBoaXQwLmRhdGVTcGFuLnJhbmdlLnN0YXJ0O1xuICAgIHZhciBkYXRlMSA9IGhpdDEuZGF0ZVNwYW4ucmFuZ2Uuc3RhcnQ7XG4gICAgdmFyIGRlbHRhID0gZGlmZkRhdGVzKGRhdGUwLCBkYXRlMSwgZGF0ZUVudiwgaGl0MC5jb21wb25lbnQubGFyZ2VVbml0KTtcbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHRyYW5zZm9ybXNfMSA9IHRyYW5zZm9ybXM7IF9pIDwgdHJhbnNmb3Jtc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc18xW19pXTtcbiAgICAgICAgdmFyIHJlcyA9IHRyYW5zZm9ybShoaXQwLCBoaXQxKTtcbiAgICAgICAgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlcykge1xuICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIHJlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRnJvbVN0YXJ0KSB7XG4gICAgICAgIGlmIChkYXRlRW52LmFkZChpbnN0YW5jZVJhbmdlLnN0YXJ0LCBkZWx0YSkgPCBpbnN0YW5jZVJhbmdlLmVuZCkge1xuICAgICAgICAgICAgcHJvcHMuc3RhcnREZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZGF0ZUVudi5hZGQoaW5zdGFuY2VSYW5nZS5lbmQsIGRlbHRhKSA+IGluc3RhbmNlUmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgIHByb3BzLmVuZERlbHRhID0gZGVsdGE7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBVbnNlbGVjdEF1dG8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVW5zZWxlY3RBdXRvKGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaXNSZWNlbnRQb2ludGVyRGF0ZVNlbGVjdCA9IGZhbHNlOyAvLyB3aXNoIHdlIGNvdWxkIHVzZSBhIHNlbGVjdG9yIHRvIGRldGVjdCBkYXRlIHNlbGVjdGlvbiwgYnV0IHVzZXMgaGl0IHN5c3RlbVxuICAgICAgICB0aGlzLm9uU2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdEluZm8pIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RJbmZvLmpzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1JlY2VudFBvaW50ZXJEYXRlU2VsZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkRvY3VtZW50UG9pbnRlclVwID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIGNhbGVuZGFyID0gX2EuY2FsZW5kYXIsIGRvY3VtZW50UG9pbnRlciA9IF9hLmRvY3VtZW50UG9pbnRlcjtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNhbGVuZGFyLnN0YXRlO1xuICAgICAgICAgICAgLy8gdG91Y2gtc2Nyb2xsaW5nIHNob3VsZCBuZXZlciB1bmZvY3VzIGFueSB0eXBlIG9mIHNlbGVjdGlvblxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudFBvaW50ZXIud2FzVG91Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZGF0ZVNlbGVjdGlvbiAmJiAvLyBhbiBleGlzdGluZyBkYXRlIHNlbGVjdGlvbj9cbiAgICAgICAgICAgICAgICAgICAgIV90aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgLy8gYSBuZXcgcG9pbnRlci1pbml0aWF0ZWQgZGF0ZSBzZWxlY3Rpb24gc2luY2UgbGFzdCBvbkRvY3VtZW50UG9pbnRlclVwP1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5zZWxlY3RBdXRvID0gY2FsZW5kYXIudmlld09wdCgndW5zZWxlY3RBdXRvJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1bnNlbGVjdENhbmNlbCA9IGNhbGVuZGFyLnZpZXdPcHQoJ3Vuc2VsZWN0Q2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bnNlbGVjdEF1dG8gJiYgKCF1bnNlbGVjdEF1dG8gfHwgIWVsZW1lbnRDbG9zZXN0KGRvY3VtZW50UG9pbnRlci5kb3duRWwsIHVuc2VsZWN0Q2FuY2VsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLnVuc2VsZWN0KHBldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmV2ZW50U2VsZWN0aW9uICYmIC8vIGFuIGV4aXN0aW5nIGV2ZW50IHNlbGVjdGVkP1xuICAgICAgICAgICAgICAgICAgICAhZWxlbWVudENsb3Nlc3QoZG9jdW1lbnRQb2ludGVyLmRvd25FbCwgRXZlbnREcmFnZ2luZy5TRUxFQ1RPUikgLy8gaW50ZXJhY3Rpb24gRElETidUIHN0YXJ0IG9uIGFuIGV2ZW50XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0VWRU5UJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5pc1JlY2VudFBvaW50ZXJEYXRlU2VsZWN0ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdmFyIGRvY3VtZW50UG9pbnRlciA9IHRoaXMuZG9jdW1lbnRQb2ludGVyID0gbmV3IFBvaW50ZXJEcmFnZ2luZyhkb2N1bWVudCk7XG4gICAgICAgIGRvY3VtZW50UG9pbnRlci5zaG91bGRJZ25vcmVNb3ZlID0gdHJ1ZTtcbiAgICAgICAgZG9jdW1lbnRQb2ludGVyLnNob3VsZFdhdGNoU2Nyb2xsID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50UG9pbnRlci5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCB0aGlzLm9uRG9jdW1lbnRQb2ludGVyVXApO1xuICAgICAgICAvKlxuICAgICAgICBUT0RPOiBiZXR0ZXIgd2F5IHRvIGtub3cgYWJvdXQgd2hldGhlciB0aGVyZSB3YXMgYSBzZWxlY3Rpb24gd2l0aCB0aGUgcG9pbnRlclxuICAgICAgICAqL1xuICAgICAgICBjYWxlbmRhci5vbignc2VsZWN0JywgdGhpcy5vblNlbGVjdCk7XG4gICAgfVxuICAgIFVuc2VsZWN0QXV0by5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhci5vZmYoJ3NlbGVjdCcsIHRoaXMub25TZWxlY3QpO1xuICAgICAgICB0aGlzLmRvY3VtZW50UG9pbnRlci5kZXN0cm95KCk7XG4gICAgfTtcbiAgICByZXR1cm4gVW5zZWxlY3RBdXRvO1xufSgpKTtcblxuLypcbkdpdmVuIGFuIGFscmVhZHkgaW5zdGFudGlhdGVkIGRyYWdnYWJsZSBvYmplY3QgZm9yIG9uZS1vci1tb3JlIGVsZW1lbnRzLFxuSW50ZXJwcmV0cyBhbnkgZHJhZ2dpbmcgYXMgYW4gYXR0ZW1wdCB0byBkcmFnIGFuIGV2ZW50cyB0aGF0IGxpdmVzIG91dHNpZGVcbm9mIGEgY2FsZW5kYXIgb250byBhIGNhbGVuZGFyLlxuKi9cbnZhciBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZyhkcmFnZ2luZywgc3VwcGxpZWREcmFnTWV0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlY2VpdmluZ0NhbGVuZGFyID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcm9wcGFibGVFdmVudCA9IG51bGw7IC8vIHdpbGwgZXhpc3QgZm9yIGFsbCBkcmFncywgZXZlbiBpZiBjcmVhdGU6ZmFsc2VcbiAgICAgICAgdGhpcy5zdXBwbGllZERyYWdNZXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcmFnTWV0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5kcmFnTWV0YSA9IF90aGlzLmJ1aWxkRHJhZ01ldGEoZXYuc3ViamVjdEVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsLCBldikge1xuICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuaGl0RHJhZ2dpbmcuZHJhZ2dpbmc7XG4gICAgICAgICAgICB2YXIgcmVjZWl2aW5nQ2FsZW5kYXIgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgaXNFdmVudDogX3RoaXMuZHJhZ01ldGEuY3JlYXRlLFxuICAgICAgICAgICAgICAgIG9yaWdTZWc6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2aW5nQ2FsZW5kYXIgPSBoaXQuY29tcG9uZW50LmNhbGVuZGFyO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jYW5Ecm9wRWxPbkNhbGVuZGFyKGV2LnN1YmplY3RFbCwgcmVjZWl2aW5nQ2FsZW5kYXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZUV2ZW50ID0gY29tcHV0ZUV2ZW50Rm9yRGF0ZVNwYW4oaGl0LmRhdGVTcGFuLCBfdGhpcy5kcmFnTWV0YSwgcmVjZWl2aW5nQ2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gZXZlbnRUdXBsZVRvU3RvcmUoZHJvcHBhYmxlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSAhaXNJbnRlcmFjdGlvblZhbGlkKGludGVyYWN0aW9uLCByZWNlaXZpbmdDYWxlbmRhcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmRpc3BsYXlEcmFnKHJlY2VpdmluZ0NhbGVuZGFyLCBpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAvLyBzaG93IG1pcnJvciBpZiBubyBhbHJlYWR5LXJlbmRlcmVkIG1pcnJvciBlbGVtZW50IE9SIGlmIHdlIGFyZSBzaHV0dGluZyBkb3duIHRoZSBtaXJyb3IgKD8pXG4gICAgICAgICAgICAvLyBUT0RPOiB3aXNoIHdlIGNvdWxkIHNvbWVob3cgd2FpdCBmb3IgZGlzcGF0Y2ggdG8gZ3VhcmFudGVlIHJlbmRlclxuICAgICAgICAgICAgZHJhZ2dpbmcuc2V0TWlycm9ySXNWaXNpYmxlKGlzRmluYWwgfHwgIWRyb3BwYWJsZUV2ZW50IHx8ICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmMtbWlycm9yJykpO1xuICAgICAgICAgICAgaWYgKCFpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICBlbmFibGVDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpc2FibGVDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNGaW5hbCkge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnNldE1pcnJvck5lZWRzUmV2ZXJ0KCFkcm9wcGFibGVFdmVudCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVjZWl2aW5nQ2FsZW5kYXIgPSByZWNlaXZpbmdDYWxlbmRhcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5kcm9wcGFibGVFdmVudCA9IGRyb3BwYWJsZUV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgcmVjZWl2aW5nQ2FsZW5kYXIgPSBfYS5yZWNlaXZpbmdDYWxlbmRhciwgZHJvcHBhYmxlRXZlbnQgPSBfYS5kcm9wcGFibGVFdmVudDtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyRHJhZygpO1xuICAgICAgICAgICAgaWYgKHJlY2VpdmluZ0NhbGVuZGFyICYmIGRyb3BwYWJsZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuZmluYWxIaXQ7XG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsVmlldyA9IGZpbmFsSGl0LmNvbXBvbmVudC52aWV3O1xuICAgICAgICAgICAgICAgIHZhciBkcmFnTWV0YSA9IF90aGlzLmRyYWdNZXRhO1xuICAgICAgICAgICAgICAgIHZhciBhcmcgPSBfX2Fzc2lnbih7fSwgcmVjZWl2aW5nQ2FsZW5kYXIuYnVpbGREYXRlUG9pbnRBcGkoZmluYWxIaXQuZGF0ZVNwYW4pLCB7IGRyYWdnZWRFbDogcGV2LnN1YmplY3RFbCwganNFdmVudDogcGV2Lm9yaWdFdmVudCwgdmlldzogZmluYWxWaWV3IH0pO1xuICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyLnB1YmxpY2x5VHJpZ2dlcignZHJvcCcsIFthcmddKTtcbiAgICAgICAgICAgICAgICBpZiAoZHJhZ01ldGEuY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNRVJHRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRUdXBsZVRvU3RvcmUoZHJvcHBhYmxlRXZlbnQpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VMRUNUX0VWRU5UJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEluc3RhbmNlSWQ6IGRyb3BwYWJsZUV2ZW50Lmluc3RhbmNlLmluc3RhbmNlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpZ25hbCB0aGF0IGFuIGV4dGVybmFsIGV2ZW50IGxhbmRlZFxuICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDYWxlbmRhci5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50UmVjZWl2ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkRWw6IHBldi5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShyZWNlaXZpbmdDYWxlbmRhciwgZHJvcHBhYmxlRXZlbnQuZGVmLCBkcm9wcGFibGVFdmVudC5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogZmluYWxWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnJlY2VpdmluZ0NhbGVuZGFyID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhpdERyYWdnaW5nID0gdGhpcy5oaXREcmFnZ2luZyA9IG5ldyBIaXREcmFnZ2luZyhkcmFnZ2luZywgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlKTtcbiAgICAgICAgaGl0RHJhZ2dpbmcucmVxdWlyZUluaXRpYWwgPSBmYWxzZTsgLy8gd2lsbCBzdGFydCBvdXRzaWRlIG9mIGEgY29tcG9uZW50XG4gICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignaGl0dXBkYXRlJywgdGhpcy5oYW5kbGVIaXRVcGRhdGUpO1xuICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgdGhpcy5oYW5kbGVEcmFnRW5kKTtcbiAgICAgICAgdGhpcy5zdXBwbGllZERyYWdNZXRhID0gc3VwcGxpZWREcmFnTWV0YTtcbiAgICB9XG4gICAgRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmJ1aWxkRHJhZ01ldGEgPSBmdW5jdGlvbiAoc3ViamVjdEVsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zdXBwbGllZERyYWdNZXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRHJhZ01ldGEodGhpcy5zdXBwbGllZERyYWdNZXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5zdXBwbGllZERyYWdNZXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VEcmFnTWV0YSh0aGlzLnN1cHBsaWVkRHJhZ01ldGEoc3ViamVjdEVsKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RHJhZ01ldGFGcm9tRWwoc3ViamVjdEVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmRpc3BsYXlEcmFnID0gZnVuY3Rpb24gKG5leHRDYWxlbmRhciwgc3RhdGUpIHtcbiAgICAgICAgdmFyIHByZXZDYWxlbmRhciA9IHRoaXMucmVjZWl2aW5nQ2FsZW5kYXI7XG4gICAgICAgIGlmIChwcmV2Q2FsZW5kYXIgJiYgcHJldkNhbGVuZGFyICE9PSBuZXh0Q2FsZW5kYXIpIHtcbiAgICAgICAgICAgIHByZXZDYWxlbmRhci5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dENhbGVuZGFyKSB7XG4gICAgICAgICAgICBuZXh0Q2FsZW5kYXIuZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VWRU5UX0RSQUcnLCBzdGF0ZTogc3RhdGUgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4dGVybmFsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5jbGVhckRyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY2VpdmluZ0NhbGVuZGFyKSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZ0NhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VUX0VWRU5UX0RSQUcnIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuY2FuRHJvcEVsT25DYWxlbmRhciA9IGZ1bmN0aW9uIChlbCwgcmVjZWl2aW5nQ2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIGRyb3BBY2NlcHQgPSByZWNlaXZpbmdDYWxlbmRhci5vcHQoJ2Ryb3BBY2NlcHQnKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkcm9wQWNjZXB0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZHJvcEFjY2VwdChlbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRyb3BBY2NlcHQgPT09ICdzdHJpbmcnICYmIGRyb3BBY2NlcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKGVsZW1lbnRNYXRjaGVzKGVsLCBkcm9wQWNjZXB0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmc7XG59KCkpO1xuLy8gVXRpbHMgZm9yIGNvbXB1dGluZyBldmVudCBzdG9yZSBmcm9tIHRoZSBEcmFnTWV0YVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gY29tcHV0ZUV2ZW50Rm9yRGF0ZVNwYW4oZGF0ZVNwYW4sIGRyYWdNZXRhLCBjYWxlbmRhcikge1xuICAgIHZhciBkZWZQcm9wcyA9IF9fYXNzaWduKHt9LCBkcmFnTWV0YS5sZWZ0b3ZlclByb3BzKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmV4dGVybmFsRGVmVHJhbnNmb3JtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IF9hW19pXTtcbiAgICAgICAgX19hc3NpZ24oZGVmUHJvcHMsIHRyYW5zZm9ybShkYXRlU3BhbiwgZHJhZ01ldGEpKTtcbiAgICB9XG4gICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYoZGVmUHJvcHMsIGRyYWdNZXRhLnNvdXJjZUlkLCBkYXRlU3Bhbi5hbGxEYXksIGNhbGVuZGFyLm9wdCgnZm9yY2VFdmVudER1cmF0aW9uJykgfHwgQm9vbGVhbihkcmFnTWV0YS5kdXJhdGlvbiksIC8vIGhhc0VuZFxuICAgIGNhbGVuZGFyKTtcbiAgICB2YXIgc3RhcnQgPSBkYXRlU3Bhbi5yYW5nZS5zdGFydDtcbiAgICAvLyBvbmx5IHJlbHkgb24gdGltZSBpbmZvIGlmIGRyb3Agem9uZSBpcyBhbGwtZGF5LFxuICAgIC8vIG90aGVyd2lzZSwgd2UgYWxyZWFkeSBrbm93IHRoZSB0aW1lXG4gICAgaWYgKGRhdGVTcGFuLmFsbERheSAmJiBkcmFnTWV0YS5zdGFydFRpbWUpIHtcbiAgICAgICAgc3RhcnQgPSBjYWxlbmRhci5kYXRlRW52LmFkZChzdGFydCwgZHJhZ01ldGEuc3RhcnRUaW1lKTtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGRyYWdNZXRhLmR1cmF0aW9uID9cbiAgICAgICAgY2FsZW5kYXIuZGF0ZUVudi5hZGQoc3RhcnQsIGRyYWdNZXRhLmR1cmF0aW9uKSA6XG4gICAgICAgIGNhbGVuZGFyLmdldERlZmF1bHRFdmVudEVuZChkYXRlU3Bhbi5hbGxEYXksIHN0YXJ0KTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVFdmVudEluc3RhbmNlKGRlZi5kZWZJZCwgeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0pO1xuICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcbn1cbi8vIFV0aWxzIGZvciBleHRyYWN0aW5nIGRhdGEgZnJvbSBlbGVtZW50XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBnZXREcmFnTWV0YUZyb21FbChlbCkge1xuICAgIHZhciBzdHIgPSBnZXRFbWJlZGRlZEVsRGF0YShlbCwgJ2V2ZW50Jyk7XG4gICAgdmFyIG9iaiA9IHN0ciA/XG4gICAgICAgIEpTT04ucGFyc2Uoc3RyKSA6XG4gICAgICAgIHsgY3JlYXRlOiBmYWxzZSB9OyAvLyBpZiBubyBlbWJlZGRlZCBkYXRhLCBhc3N1bWUgbm8gZXZlbnQgY3JlYXRpb25cbiAgICByZXR1cm4gcGFyc2VEcmFnTWV0YShvYmopO1xufVxuY29uZmlnLmRhdGFBdHRyUHJlZml4ID0gJyc7XG5mdW5jdGlvbiBnZXRFbWJlZGRlZEVsRGF0YShlbCwgbmFtZSkge1xuICAgIHZhciBwcmVmaXggPSBjb25maWcuZGF0YUF0dHJQcmVmaXg7XG4gICAgdmFyIHByZWZpeGVkTmFtZSA9IChwcmVmaXggPyBwcmVmaXggKyAnLScgOiAnJykgKyBuYW1lO1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIHByZWZpeGVkTmFtZSkgfHwgJyc7XG59XG5cbi8qXG5NYWtlcyBhbiBlbGVtZW50ICh0aGF0IGlzICpleHRlcm5hbCogdG8gYW55IGNhbGVuZGFyKSBkcmFnZ2FibGUuXG5DYW4gcGFzcyBpbiBkYXRhIHRoYXQgZGV0ZXJtaW5lcyBob3cgYW4gZXZlbnQgd2lsbCBiZSBjcmVhdGVkIHdoZW4gZHJvcHBlZCBvbnRvIGEgY2FsZW5kYXIuXG5MZXZlcmFnZXMgRnVsbENhbGVuZGFyJ3MgaW50ZXJuYWwgZHJhZy1uLWRyb3AgZnVuY3Rpb25hbGl0eSBXSVRIT1VUIGEgdGhpcmQtcGFydHkgZHJhZyBzeXN0ZW0uXG4qL1xudmFyIEV4dGVybmFsRHJhZ2dhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4dGVybmFsRHJhZ2dhYmxlKGVsLCBzZXR0aW5ncykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nO1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuc2V0dGluZ3MsIG1pbkRpc3RhbmNlID0gX2EubWluRGlzdGFuY2UsIGxvbmdQcmVzc0RlbGF5ID0gX2EubG9uZ1ByZXNzRGVsYXk7XG4gICAgICAgICAgICBkcmFnZ2luZy5taW5EaXN0YW5jZSA9XG4gICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIG1pbkRpc3RhbmNlIDpcbiAgICAgICAgICAgICAgICAgICAgKGV2LmlzVG91Y2ggPyAwIDogZ2xvYmFsRGVmYXVsdHMuZXZlbnREcmFnTWluRGlzdGFuY2UpO1xuICAgICAgICAgICAgZHJhZ2dpbmcuZGVsYXkgPVxuICAgICAgICAgICAgICAgIGV2LmlzVG91Y2ggPyAvLyBUT0RPOiBldmVudHVhbGx5IHJlYWQgZXZlbnRMb25nUHJlc3NEZWxheSBpbnN0ZWFkIHZ2dlxuICAgICAgICAgICAgICAgICAgICAobG9uZ1ByZXNzRGVsYXkgIT0gbnVsbCA/IGxvbmdQcmVzc0RlbGF5IDogZ2xvYmFsRGVmYXVsdHMubG9uZ1ByZXNzRGVsYXkpIDpcbiAgICAgICAgICAgICAgICAgICAgMDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVEcmFnU3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChldi5pc1RvdWNoICYmXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcuZGVsYXkgJiZcbiAgICAgICAgICAgICAgICBldi5zdWJqZWN0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy1ldmVudCcpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcubWlycm9yLmdldE1pcnJvckVsKCkuY2xhc3NMaXN0LmFkZCgnZmMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB2YXIgZHJhZ2dpbmcgPSB0aGlzLmRyYWdnaW5nID0gbmV3IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcoZWwpO1xuICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHNldHRpbmdzLml0ZW1TZWxlY3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICBkcmFnZ2luZy5wb2ludGVyLnNlbGVjdG9yID0gc2V0dGluZ3MuaXRlbVNlbGVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5hcHBlbmRUbyAhPSBudWxsKSB7XG4gICAgICAgICAgICBkcmFnZ2luZy5taXJyb3IucGFyZW50Tm9kZSA9IHNldHRpbmdzLmFwcGVuZFRvOyAvLyBUT0RPOiB3cml0ZSB0ZXN0c1xuICAgICAgICB9XG4gICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgbmV3IEV4dGVybmFsRWxlbWVudERyYWdnaW5nKGRyYWdnaW5nLCBzZXR0aW5ncy5ldmVudERhdGEpO1xuICAgIH1cbiAgICBFeHRlcm5hbERyYWdnYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgfTtcbiAgICByZXR1cm4gRXh0ZXJuYWxEcmFnZ2FibGU7XG59KCkpO1xuXG4vKlxuRGV0ZWN0cyB3aGVuIGEgKlRISVJELVBBUlRZKiBkcmFnLW4tZHJvcCBzeXN0ZW0gaW50ZXJhY3RzIHdpdGggZWxlbWVudHMuXG5UaGUgdGhpcmQtcGFydHkgc3lzdGVtIGlzIHJlc3BvbnNpYmxlIGZvciBkcmF3aW5nIHRoZSB2aXN1YWxzIGVmZmVjdHMgb2YgdGhlIGRyYWcuXG5UaGlzIGNsYXNzIHNpbXBseSBtb25pdG9ycyBmb3IgcG9pbnRlciBtb3ZlbWVudHMgYW5kIGZpcmVzIGV2ZW50cy5cbkl0IGFsc28gaGFzIHRoZSBhYmlsaXR5IHRvIGhpZGUgdGhlIG1vdmluZyBlbGVtZW50ICh0aGUgXCJtaXJyb3JcIikgZHVyaW5nIHRoZSBkcmFnLlxuKi9cbnZhciBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcoY29udGFpbmVyRWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyRWwpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNob3VsZElnbm9yZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubWlycm9yU2VsZWN0b3IgPSAnJztcbiAgICAgICAgX3RoaXMuY3VycmVudE1pcnJvckVsID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcmRvd24nLCBldik7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBmaXJlIGRyYWdzdGFydCByaWdodCBhd2F5LiBkb2VzIG5vdCBzdXBwb3J0IGRlbGF5IG9yIG1pbi1kaXN0YW5jZVxuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ3N0YXJ0JywgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyTW92ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnbW92ZScsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJ1cCcsIGV2KTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgIC8vIGZpcmUgZHJhZ2VuZCByaWdodCBhd2F5LiBkb2VzIG5vdCBzdXBwb3J0IGEgcmV2ZXJ0IGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ2VuZCcsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvaW50ZXIgPSBfdGhpcy5wb2ludGVyID0gbmV3IFBvaW50ZXJEcmFnZ2luZyhjb250YWluZXJFbCk7XG4gICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcm1vdmUnLCBfdGhpcy5oYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcnVwJywgX3RoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wb2ludGVyLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIEluZmVycmVkRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRJZ25vcmVNb3ZlID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgdGhpcy5zaG91bGRJZ25vcmVNb3ZlID0gYm9vbDtcbiAgICB9O1xuICAgIEluZmVycmVkRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgICAgLy8gcmVzdG9yZSBhIHByZXZpb3VzbHkgaGlkZGVuIGVsZW1lbnQuXG4gICAgICAgICAgICAvLyB1c2UgdGhlIHJlZmVyZW5jZSBpbiBjYXNlIHRoZSBzZWxlY3RvciBjbGFzcyBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWlycm9yRWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNaXJyb3JFbC5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWlycm9yRWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1pcnJvckVsID0gdGhpcy5taXJyb3JTZWxlY3RvciA/XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm1pcnJvclNlbGVjdG9yKSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIGlmIChtaXJyb3JFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1pcnJvckVsID0gbWlycm9yRWw7XG4gICAgICAgICAgICAgICAgbWlycm9yRWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmc7XG59KEVsZW1lbnREcmFnZ2luZykpO1xuXG4vKlxuQnJpZGdlcyB0aGlyZC1wYXJ0eSBkcmFnLW4tZHJvcCBzeXN0ZW1zIHdpdGggRnVsbENhbGVuZGFyLlxuTXVzdCBiZSBpbnN0YW50aWF0ZWQgYW5kIGRlc3Ryb3llZCBieSBjYWxsZXIuXG4qL1xudmFyIFRoaXJkUGFydHlEcmFnZ2FibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGhpcmRQYXJ0eURyYWdnYWJsZShjb250YWluZXJPclNldHRpbmdzLCBzZXR0aW5ncykge1xuICAgICAgICB2YXIgY29udGFpbmVyRWwgPSBkb2N1bWVudDtcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyB3aXNoIHdlIGNvdWxkIGp1c3QgdGVzdCBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0LCBidXQgZG9lc24ndCB3b3JrIGluIElFMTFcbiAgICAgICAgY29udGFpbmVyT3JTZXR0aW5ncyA9PT0gZG9jdW1lbnQgfHxcbiAgICAgICAgICAgIGNvbnRhaW5lck9yU2V0dGluZ3MgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBjb250YWluZXJFbCA9IGNvbnRhaW5lck9yU2V0dGluZ3M7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0dGluZ3MgPSAoY29udGFpbmVyT3JTZXR0aW5ncyB8fCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRyYWdnaW5nID0gdGhpcy5kcmFnZ2luZyA9IG5ldyBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZyhjb250YWluZXJFbCk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuaXRlbVNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IHNldHRpbmdzLml0ZW1TZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250YWluZXJFbCA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSAnW2RhdGEtZXZlbnRdJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLm1pcnJvclNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZHJhZ2dpbmcubWlycm9yU2VsZWN0b3IgPSBzZXR0aW5ncy5taXJyb3JTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBuZXcgRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcoZHJhZ2dpbmcsIHNldHRpbmdzLmV2ZW50RGF0YSk7XG4gICAgfVxuICAgIFRoaXJkUGFydHlEcmFnZ2FibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmcuZGVzdHJveSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFRoaXJkUGFydHlEcmFnZ2FibGU7XG59KCkpO1xuXG52YXIgbWFpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBbRGF0ZUNsaWNraW5nLCBEYXRlU2VsZWN0aW5nLCBFdmVudERyYWdnaW5nLCBFdmVudERyYWdnaW5nJDFdLFxuICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBbVW5zZWxlY3RBdXRvXSxcbiAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWFpbjtcbmV4cG9ydCB7IEV4dGVybmFsRHJhZ2dhYmxlIGFzIERyYWdnYWJsZSwgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZywgUG9pbnRlckRyYWdnaW5nLCBUaGlyZFBhcnR5RHJhZ2dhYmxlIH07XG4iLCIvKiFcbkZ1bGxDYWxlbmRhciBSZXNvdXJjZXMgQ29tbW9uIFBsdWdpbiB2NC4zLjFcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9zY2hlZHVsZXJcbihjKSAyMDE5IEFkYW0gU2hhd1xuKi9cblxuaW1wb3J0IHsgbWVtb2l6ZSwgZmlsdGVySGFzaCwgcmFuZ2VzSW50ZXJzZWN0LCBtZW1vaXplT3V0cHV0LCBpc1Byb3BzRXF1YWwsIG1hcEhhc2gsIGNvbWJpbmVFdmVudFVpcywgcmVmaW5lUHJvcHMsIHJhbmdlc0VxdWFsLCBwcm9jZXNzU2NvcGVkVWlQcm9wcywgcGFyc2VCdXNpbmVzc0hvdXJzLCBFdmVudEFwaSwgQ2FsZW5kYXIsIFNwbGl0dGVyLCBtZXJnZUV2ZW50U3RvcmVzLCBpc1Byb3BzVmFsaWQsIGFwcGVuZFRvRWxlbWVudCwgaHRtbEVzY2FwZSwgY3NzVG9TdHIsIGNvbmZpZywgaXNWYWxpZERhdGUsIGFkZERheXMsIHVucHJvbWlzaWZ5LCByZXF1ZXN0SnNvbiwgaHRtbFRvRWxlbWVudCwgcmVtb3ZlRWxlbWVudCwgY3JlYXRlRm9ybWF0dGVyLCBjb21wdXRlRmFsbGJhY2tIZWFkZXJGb3JtYXQsIHJlbmRlckRhdGVDZWxsLCBmaW5kRWxlbWVudHMsIENvbXBvbmVudCwgZmxleGlibGVDb21wYXJlLCBjb21wYXJlQnlGaWVsZFNwZWNzLCBjcmVhdGVQbHVnaW4gfSBmcm9tICdAZnVsbGNhbGVuZGFyL2NvcmUnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG5mdW5jdGlvbiBtYXNzYWdlRXZlbnREcmFnTXV0YXRpb24oZXZlbnRNdXRhdGlvbiwgaGl0MCwgaGl0MSkge1xuICAgIHZhciByZXNvdXJjZTAgPSBoaXQwLmRhdGVTcGFuLnJlc291cmNlSWQ7XG4gICAgdmFyIHJlc291cmNlMSA9IGhpdDEuZGF0ZVNwYW4ucmVzb3VyY2VJZDtcbiAgICBpZiAocmVzb3VyY2UwICYmIHJlc291cmNlMSAmJlxuICAgICAgICByZXNvdXJjZTAgIT09IHJlc291cmNlMSkge1xuICAgICAgICBldmVudE11dGF0aW9uLnJlc291cmNlTXV0YXRpb24gPSB7XG4gICAgICAgICAgICBtYXRjaFJlc291cmNlSWQ6IHJlc291cmNlMCxcbiAgICAgICAgICAgIHNldFJlc291cmNlSWQ6IHJlc291cmNlMVxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qXG5UT0RPOiBhbGwgdGhpcyB3b3VsZCBiZSBtdWNoIGVhc2llciBpZiB3ZSB3ZXJlIHVzaW5nIGEgaGFzaCFcbiovXG5mdW5jdGlvbiBhcHBseUV2ZW50RGVmTXV0YXRpb24oZXZlbnREZWYsIG11dGF0aW9uLCBjYWxlbmRhcikge1xuICAgIHZhciByZXNvdXJjZU11dGF0aW9uID0gbXV0YXRpb24ucmVzb3VyY2VNdXRhdGlvbjtcbiAgICBpZiAocmVzb3VyY2VNdXRhdGlvbiAmJiBjb21wdXRlUmVzb3VyY2VFZGl0YWJsZShldmVudERlZiwgY2FsZW5kYXIpKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGV2ZW50RGVmLnJlc291cmNlSWRzLmluZGV4T2YocmVzb3VyY2VNdXRhdGlvbi5tYXRjaFJlc291cmNlSWQpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VJZHMgPSBldmVudERlZi5yZXNvdXJjZUlkcy5zbGljZSgpOyAvLyBjb3B5XG4gICAgICAgICAgICByZXNvdXJjZUlkcy5zcGxpY2UoaW5kZXgsIDEpOyAvLyByZW1vdmVcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUlkcy5pbmRleE9mKHJlc291cmNlTXV0YXRpb24uc2V0UmVzb3VyY2VJZCkgPT09IC0xKSB7IC8vIG5vdCBhbHJlYWR5IGluIHRoZXJlXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZHMucHVzaChyZXNvdXJjZU11dGF0aW9uLnNldFJlc291cmNlSWQpOyAvLyBhZGRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50RGVmLnJlc291cmNlSWRzID0gcmVzb3VyY2VJZHM7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKlxuSEFDS1xuVE9ETzogdXNlIEV2ZW50VWkgc3lzdGVtIGluc3RlYWQgb2YgdGhpc1xuKi9cbmZ1bmN0aW9uIGNvbXB1dGVSZXNvdXJjZUVkaXRhYmxlKGV2ZW50RGVmLCBjYWxlbmRhcikge1xuICAgIHZhciByZXNvdXJjZUVkaXRhYmxlID0gZXZlbnREZWYucmVzb3VyY2VFZGl0YWJsZTtcbiAgICBpZiAocmVzb3VyY2VFZGl0YWJsZSA9PSBudWxsKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBldmVudERlZi5zb3VyY2VJZCAmJiBjYWxlbmRhci5zdGF0ZS5ldmVudFNvdXJjZXNbZXZlbnREZWYuc291cmNlSWRdO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXNvdXJjZUVkaXRhYmxlID0gc291cmNlLmV4dGVuZGVkUHJvcHMucmVzb3VyY2VFZGl0YWJsZTsgLy8gdXNlZCB0aGUgU291cmNlOjpleHRlbmRlZFByb3BzIGhhY2tcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb3VyY2VFZGl0YWJsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXNvdXJjZUVkaXRhYmxlID0gY2FsZW5kYXIub3B0KCdldmVudFJlc291cmNlRWRpdGFibGUnKTtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUVkaXRhYmxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZUVkaXRhYmxlID0gY2FsZW5kYXIub3B0KCdlZGl0YWJsZScpOyAvLyBUT0RPOiB1c2UgZGVmYXVsdHMgc3lzdGVtIGluc3RlYWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VFZGl0YWJsZTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUV2ZW50RHJvcChtdXRhdGlvbiwgY2FsZW5kYXIpIHtcbiAgICB2YXIgcmVzb3VyY2VNdXRhdGlvbiA9IG11dGF0aW9uLnJlc291cmNlTXV0YXRpb247XG4gICAgaWYgKHJlc291cmNlTXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9sZFJlc291cmNlOiBjYWxlbmRhci5nZXRSZXNvdXJjZUJ5SWQocmVzb3VyY2VNdXRhdGlvbi5tYXRjaFJlc291cmNlSWQpLFxuICAgICAgICAgICAgbmV3UmVzb3VyY2U6IGNhbGVuZGFyLmdldFJlc291cmNlQnlJZChyZXNvdXJjZU11dGF0aW9uLnNldFJlc291cmNlSWQpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2xkUmVzb3VyY2U6IG51bGwsXG4gICAgICAgICAgICBuZXdSZXNvdXJjZTogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbn1cblxudmFyIFJlc291cmNlRGF0YUFkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlRGF0YUFkZGVyKCkge1xuICAgICAgICB0aGlzLmZpbHRlclJlc291cmNlcyA9IG1lbW9pemUoZmlsdGVyUmVzb3VyY2VzKTtcbiAgICB9XG4gICAgUmVzb3VyY2VEYXRhQWRkZXIucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uICh2aWV3UHJvcHMsIHZpZXdTcGVjLCBjYWxlbmRhclByb3BzLCB2aWV3KSB7XG4gICAgICAgIGlmICh2aWV3U3BlYy5jbGFzcy5uZWVkc1Jlc291cmNlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZVN0b3JlOiB0aGlzLmZpbHRlclJlc291cmNlcyhjYWxlbmRhclByb3BzLnJlc291cmNlU3RvcmUsIHZpZXcub3B0KCdmaWx0ZXJSZXNvdXJjZXNXaXRoRXZlbnRzJyksIGNhbGVuZGFyUHJvcHMuZXZlbnRTdG9yZSwgY2FsZW5kYXJQcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSksXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zOiBjYWxlbmRhclByb3BzLnJlc291cmNlRW50aXR5RXhwYW5zaW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlRGF0YUFkZGVyO1xufSgpKTtcbmZ1bmN0aW9uIGZpbHRlclJlc291cmNlcyhyZXNvdXJjZVN0b3JlLCBkb0ZpbHRlclJlc291cmNlc1dpdGhFdmVudHMsIGV2ZW50U3RvcmUsIGFjdGl2ZVJhbmdlKSB7XG4gICAgaWYgKGRvRmlsdGVyUmVzb3VyY2VzV2l0aEV2ZW50cykge1xuICAgICAgICB2YXIgaW5zdGFuY2VzSW5SYW5nZSA9IGZpbHRlckV2ZW50SW5zdGFuY2VzSW5SYW5nZShldmVudFN0b3JlLmluc3RhbmNlcywgYWN0aXZlUmFuZ2UpO1xuICAgICAgICB2YXIgaGFzRXZlbnRzXzEgPSBjb21wdXRlSGFzRXZlbnRzKGluc3RhbmNlc0luUmFuZ2UsIGV2ZW50U3RvcmUuZGVmcyk7XG4gICAgICAgIF9fYXNzaWduKGhhc0V2ZW50c18xLCBjb21wdXRlQW5jZXN0b3JIYXNFdmVudHMoaGFzRXZlbnRzXzEsIHJlc291cmNlU3RvcmUpKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlckhhc2gocmVzb3VyY2VTdG9yZSwgZnVuY3Rpb24gKHJlc291cmNlLCByZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzRXZlbnRzXzFbcmVzb3VyY2VJZF07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlU3RvcmU7XG4gICAgfVxufVxuZnVuY3Rpb24gZmlsdGVyRXZlbnRJbnN0YW5jZXNJblJhbmdlKGV2ZW50SW5zdGFuY2VzLCBhY3RpdmVSYW5nZSkge1xuICAgIHJldHVybiBmaWx0ZXJIYXNoKGV2ZW50SW5zdGFuY2VzLCBmdW5jdGlvbiAoZXZlbnRJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gcmFuZ2VzSW50ZXJzZWN0KGV2ZW50SW5zdGFuY2UucmFuZ2UsIGFjdGl2ZVJhbmdlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVIYXNFdmVudHMoZXZlbnRJbnN0YW5jZXMsIGV2ZW50RGVmcykge1xuICAgIHZhciBoYXNFdmVudHMgPSB7fTtcbiAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGV2ZW50SW5zdGFuY2VzKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50SW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZXZlbnREZWZzW2luc3RhbmNlLmRlZklkXS5yZXNvdXJjZUlkczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZUlkID0gX2FbX2ldO1xuICAgICAgICAgICAgaGFzRXZlbnRzW3Jlc291cmNlSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzRXZlbnRzO1xufVxuLypcbm1hcmsgcmVzb3VyY2VzIGFzIGhhdmluZyBldmVudHMgaWYgYW55IG9mIHRoZWlyIGFuY2VzdG9ycyBoYXZlIHRoZW1cbk5PVEU6IHJlc291cmNlU3RvcmUgbWlnaHQgbm90IGhhdmUgYWxsIHRoZSByZXNvdXJjZXMgdGhhdCBoYXNFdmVudHN7fSBoYXMga2V5ZWRcbiovXG5mdW5jdGlvbiBjb21wdXRlQW5jZXN0b3JIYXNFdmVudHMoaGFzRXZlbnRzLCByZXNvdXJjZVN0b3JlKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gaGFzRXZlbnRzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHZvaWQgMDtcbiAgICAgICAgd2hpbGUgKChyZXNvdXJjZSA9IHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF0pKSB7XG4gICAgICAgICAgICByZXNvdXJjZUlkID0gcmVzb3VyY2UucGFyZW50SWQ7IC8vIG5vdyBmdW5jdGlvbmluZyBhcyB0aGUgcGFyZW50SWRcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Jlc291cmNlSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyBmb3Igd2hlbiBub24tcmVzb3VyY2UgdmlldyBzaG91bGQgYmUgZ2l2ZW4gRXZlbnRVaSBpbmZvIChmb3IgZXZlbnQgY29sb3JpbmcvY29uc3RyYWludHMgYmFzZWQgb2ZmIG9mIHJlc291cmNlIGRhdGEpXG52YXIgUmVzb3VyY2VFdmVudENvbmZpZ0FkZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc291cmNlRXZlbnRDb25maWdBZGRlcigpIHtcbiAgICAgICAgdGhpcy5idWlsZFJlc291cmNlRXZlbnRVaXMgPSBtZW1vaXplT3V0cHV0KGJ1aWxkUmVzb3VyY2VFdmVudFVpcywgaXNQcm9wc0VxdWFsKTtcbiAgICAgICAgdGhpcy5pbmplY3RSZXNvdXJjZUV2ZW50VWlzID0gbWVtb2l6ZShpbmplY3RSZXNvdXJjZUV2ZW50VWlzKTtcbiAgICB9XG4gICAgUmVzb3VyY2VFdmVudENvbmZpZ0FkZGVyLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiAodmlld1Byb3BzLCB2aWV3U3BlYywgY2FsZW5kYXJQcm9wcykge1xuICAgICAgICBpZiAoIXZpZXdTcGVjLmNsYXNzLm5lZWRzUmVzb3VyY2VEYXRhKSB7IC8vIGlzIGEgbm9uLXJlc291cmNlIHZpZXc/XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGV2ZW50VWlCYXNlczogdGhpcy5pbmplY3RSZXNvdXJjZUV2ZW50VWlzKHZpZXdQcm9wcy5ldmVudFVpQmFzZXMsIHZpZXdQcm9wcy5ldmVudFN0b3JlLmRlZnMsIHRoaXMuYnVpbGRSZXNvdXJjZUV2ZW50VWlzKGNhbGVuZGFyUHJvcHMucmVzb3VyY2VTdG9yZSkpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVzb3VyY2VFdmVudENvbmZpZ0FkZGVyO1xufSgpKTtcbmZ1bmN0aW9uIGJ1aWxkUmVzb3VyY2VFdmVudFVpcyhyZXNvdXJjZVN0b3JlKSB7XG4gICAgcmV0dXJuIG1hcEhhc2gocmVzb3VyY2VTdG9yZSwgZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICAgIHJldHVybiByZXNvdXJjZS51aTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGluamVjdFJlc291cmNlRXZlbnRVaXMoZXZlbnRVaUJhc2VzLCBldmVudERlZnMsIHJlc291cmNlRXZlbnRVaXMpIHtcbiAgICByZXR1cm4gbWFwSGFzaChldmVudFVpQmFzZXMsIGZ1bmN0aW9uIChldmVudFVpLCBkZWZJZCkge1xuICAgICAgICBpZiAoZGVmSWQpIHsgLy8gbm90IHRoZSAnJyBrZXlcbiAgICAgICAgICAgIHJldHVybiBpbmplY3RSZXNvdXJjZUV2ZW50VWkoZXZlbnRVaSwgZXZlbnREZWZzW2RlZklkXSwgcmVzb3VyY2VFdmVudFVpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRVaTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gaW5qZWN0UmVzb3VyY2VFdmVudFVpKG9yaWdFdmVudFVpLCBldmVudERlZiwgcmVzb3VyY2VFdmVudFVpcykge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIC8vIGZpcnN0IHJlc291cmNlIHRha2VzIHByZWNlZGVuY2UsIHdoaWNoIGZpZ2h0cyB3aXRoIHRoZSBvcmRlcmluZyBvZiBjb21iaW5lRXZlbnRVaXMsIHRodXMgdGhlIHVuc2hpZnRzXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGV2ZW50RGVmLnJlc291cmNlSWRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcmVzb3VyY2VJZCA9IF9hW19pXTtcbiAgICAgICAgaWYgKHJlc291cmNlRXZlbnRVaXNbcmVzb3VyY2VJZF0pIHtcbiAgICAgICAgICAgIHBhcnRzLnVuc2hpZnQocmVzb3VyY2VFdmVudFVpc1tyZXNvdXJjZUlkXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydHMudW5zaGlmdChvcmlnRXZlbnRVaSk7XG4gICAgcmV0dXJuIGNvbWJpbmVFdmVudFVpcyhwYXJ0cyk7XG59XG4vLyBmb3IgbWFraW5nIHN1cmUgZXZlbnRzIHRoYXQgaGF2ZSBlZGl0YWJsZSByZXNvdXJjZXMgYXJlIGFsd2F5cyBkcmFnZ2FibGUgaW4gcmVzb3VyY2Ugdmlld3NcbmZ1bmN0aW9uIHRyYW5zZm9ybUlzRHJhZ2dhYmxlKHZhbCwgZXZlbnREZWYsIGV2ZW50VWksIHZpZXcpIHtcbiAgICBpZiAoIXZhbCkge1xuICAgICAgICBpZiAodmlldy52aWV3U3BlYy5jbGFzcy5uZWVkc1Jlc291cmNlRGF0YSkge1xuICAgICAgICAgICAgaWYgKGNvbXB1dGVSZXNvdXJjZUVkaXRhYmxlKGV2ZW50RGVmLCB2aWV3LmNhbGVuZGFyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59XG5cbnZhciBSRVNPVVJDRV9TT1VSQ0VfUFJPUFMgPSB7XG4gICAgaWQ6IFN0cmluZ1xufTtcbnZhciBkZWZzID0gW107XG52YXIgdWlkID0gMDtcbmZ1bmN0aW9uIHJlZ2lzdGVyUmVzb3VyY2VTb3VyY2VEZWYoZGVmKSB7XG4gICAgZGVmcy5wdXNoKGRlZik7XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZVNvdXJjZURlZihpZCkge1xuICAgIHJldHVybiBkZWZzW2lkXTtcbn1cbmZ1bmN0aW9uIGRvZXNTb3VyY2VJZ25vcmVSYW5nZShzb3VyY2UpIHtcbiAgICByZXR1cm4gQm9vbGVhbihkZWZzW3NvdXJjZS5zb3VyY2VEZWZJZF0uaWdub3JlUmFuZ2UpO1xufVxuZnVuY3Rpb24gcGFyc2VSZXNvdXJjZVNvdXJjZShpbnB1dCkge1xuICAgIGZvciAodmFyIGkgPSBkZWZzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7IC8vIGxhdGVyLWFkZGVkIHBsdWdpbnMgdGFrZSBwcmVjZWRlbmNlXG4gICAgICAgIHZhciBkZWYgPSBkZWZzW2ldO1xuICAgICAgICB2YXIgbWV0YSA9IGRlZi5wYXJzZU1ldGEoaW5wdXQpO1xuICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgICAgdmFyIHJlcyA9IHBhcnNlUmVzb3VyY2VTb3VyY2VQcm9wcygodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgPyBpbnB1dCA6IHt9LCBtZXRhLCBpKTtcbiAgICAgICAgICAgIHJlcy5fcmF3ID0gaW5wdXQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VSZXNvdXJjZVNvdXJjZVByb3BzKGlucHV0LCBtZXRhLCBzb3VyY2VEZWZJZCkge1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKGlucHV0LCBSRVNPVVJDRV9TT1VSQ0VfUFJPUFMpO1xuICAgIHByb3BzLnNvdXJjZUlkID0gU3RyaW5nKHVpZCsrKTtcbiAgICBwcm9wcy5zb3VyY2VEZWZJZCA9IHNvdXJjZURlZklkO1xuICAgIHByb3BzLm1ldGEgPSBtZXRhO1xuICAgIHByb3BzLnB1YmxpY0lkID0gcHJvcHMuaWQ7XG4gICAgcHJvcHMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgIHByb3BzLmxhdGVzdEZldGNoSWQgPSAnJztcbiAgICBwcm9wcy5mZXRjaFJhbmdlID0gbnVsbDtcbiAgICBkZWxldGUgcHJvcHMuaWQ7XG4gICAgcmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXNvdXJjZVNvdXJjZSAoc291cmNlLCBhY3Rpb24sIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnSU5JVCc6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU291cmNlKGNhbGVuZGFyLm9wdCgncmVzb3VyY2VzJyksIGNhbGVuZGFyKTtcbiAgICAgICAgY2FzZSAnUkVTRVRfUkVTT1VSQ0VfU09VUkNFJzpcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTb3VyY2UoYWN0aW9uLnJlc291cmNlU291cmNlSW5wdXQsIGNhbGVuZGFyLCB0cnVlKTtcbiAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVSYW5nZShzb3VyY2UsIGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgIGNhc2UgJ1JFQ0VJVkVfUkVTT1VSQ0VTJzpcbiAgICAgICAgY2FzZSAnUkVDRUlWRV9SRVNPVVJDRV9FUlJPUic6XG4gICAgICAgICAgICByZXR1cm4gcmVjZWl2ZVJlc3BvbnNlKHNvdXJjZSwgYWN0aW9uLmZldGNoSWQsIGFjdGlvbi5mZXRjaFJhbmdlKTtcbiAgICAgICAgY2FzZSAnUkVGRVRDSF9SRVNPVVJDRVMnOlxuICAgICAgICAgICAgcmV0dXJuIGZldGNoU291cmNlKHNvdXJjZSwgZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxufVxudmFyIHVpZCQxID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZVNvdXJjZShpbnB1dCwgY2FsZW5kYXIsIGZvcmNlRmV0Y2gpIHtcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHBhcnNlUmVzb3VyY2VTb3VyY2UoaW5wdXQpO1xuICAgICAgICBpZiAoZm9yY2VGZXRjaCB8fCAhY2FsZW5kYXIub3B0KCdyZWZldGNoUmVzb3VyY2VzT25OYXZpZ2F0ZScpKSB7IC8vIGJlY2F1c2UgYXNzdW1lcyBoYW5kbGVSYW5nZSB3aWxsIGRvIGl0IGxhdGVyXG4gICAgICAgICAgICBzb3VyY2UgPSBmZXRjaFNvdXJjZShzb3VyY2UsIG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhhbmRsZVJhbmdlKHNvdXJjZSwgYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgaWYgKGNhbGVuZGFyLm9wdCgncmVmZXRjaFJlc291cmNlc09uTmF2aWdhdGUnKSAmJlxuICAgICAgICAhZG9lc1NvdXJjZUlnbm9yZVJhbmdlKHNvdXJjZSkgJiZcbiAgICAgICAgKCFzb3VyY2UuZmV0Y2hSYW5nZSB8fCAhcmFuZ2VzRXF1YWwoc291cmNlLmZldGNoUmFuZ2UsIGFjdGl2ZVJhbmdlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoU291cmNlKHNvdXJjZSwgYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxufVxuZnVuY3Rpb24gZmV0Y2hTb3VyY2Uoc291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcikge1xuICAgIHZhciBzb3VyY2VEZWYgPSBnZXRSZXNvdXJjZVNvdXJjZURlZihzb3VyY2Uuc291cmNlRGVmSWQpO1xuICAgIHZhciBmZXRjaElkID0gU3RyaW5nKHVpZCQxKyspO1xuICAgIHNvdXJjZURlZi5mZXRjaCh7XG4gICAgICAgIHJlc291cmNlU291cmNlOiBzb3VyY2UsXG4gICAgICAgIGNhbGVuZGFyOiBjYWxlbmRhcixcbiAgICAgICAgcmFuZ2U6IGZldGNoUmFuZ2VcbiAgICB9LCBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vIEhBQ0tcbiAgICAgICAgLy8gZG8gYmVmb3JlIGNhbGxpbmcgZGlzcGF0Y2ggaW4gY2FzZSBkaXNwYXRjaCByZW5kZXJzIHN5bmNocm9ub3VzbHlcbiAgICAgICAgY2FsZW5kYXIuYWZ0ZXJTaXppbmdUcmlnZ2Vycy5fcmVzb3VyY2VzUmVuZGVyZWQgPSBbbnVsbF07IC8vIGZpcmUgb25jZVxuICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVDRUlWRV9SRVNPVVJDRVMnLFxuICAgICAgICAgICAgZmV0Y2hJZDogZmV0Y2hJZCxcbiAgICAgICAgICAgIGZldGNoUmFuZ2U6IGZldGNoUmFuZ2UsXG4gICAgICAgICAgICByYXdSZXNvdXJjZXM6IHJlcy5yYXdSZXNvdXJjZXNcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX1JFU09VUkNFX0VSUk9SJyxcbiAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgc291cmNlLCB7IGlzRmV0Y2hpbmc6IHRydWUsIGxhdGVzdEZldGNoSWQ6IGZldGNoSWQgfSk7XG59XG5mdW5jdGlvbiByZWNlaXZlUmVzcG9uc2Uoc291cmNlLCBmZXRjaElkLCBmZXRjaFJhbmdlKSB7XG4gICAgaWYgKGZldGNoSWQgPT09IHNvdXJjZS5sYXRlc3RGZXRjaElkKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgc291cmNlLCB7IGlzRmV0Y2hpbmc6IGZhbHNlLCBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xufVxuXG52YXIgUkVTT1VSQ0VfUFJPUFMgPSB7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHBhcmVudElkOiBTdHJpbmcsXG4gICAgYnVzaW5lc3NIb3VyczogbnVsbCxcbiAgICBjaGlsZHJlbjogbnVsbCxcbiAgICBleHRlbmRlZFByb3BzOiBudWxsXG59O1xudmFyIFBSSVZBVEVfSURfUFJFRklYID0gJ19mYzonO1xudmFyIHVpZCQyID0gMDtcbi8qXG5uZWVkcyBhIGZ1bGwgc3RvcmUgc28gdGhhdCBpdCBjYW4gcG9wdWxhdGUgY2hpbGRyZW4gdG9vXG4qL1xuZnVuY3Rpb24gcGFyc2VSZXNvdXJjZShpbnB1dCwgcGFyZW50SWQsIHN0b3JlLCBjYWxlbmRhcikge1xuICAgIGlmIChwYXJlbnRJZCA9PT0gdm9pZCAwKSB7IHBhcmVudElkID0gJyc7IH1cbiAgICB2YXIgbGVmdG92ZXJzMCA9IHt9O1xuICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKGlucHV0LCBSRVNPVVJDRV9QUk9QUywge30sIGxlZnRvdmVyczApO1xuICAgIHZhciBsZWZ0b3ZlcnMxID0ge307XG4gICAgdmFyIHVpID0gcHJvY2Vzc1Njb3BlZFVpUHJvcHMoJ2V2ZW50JywgbGVmdG92ZXJzMCwgY2FsZW5kYXIsIGxlZnRvdmVyczEpO1xuICAgIGlmICghcHJvcHMuaWQpIHtcbiAgICAgICAgcHJvcHMuaWQgPSBQUklWQVRFX0lEX1BSRUZJWCArICh1aWQkMisrKTtcbiAgICB9XG4gICAgaWYgKCFwcm9wcy5wYXJlbnRJZCkgeyAvLyBnaXZlIHByZWNlZGVuY2UgdG8gdGhlIHBhcmVudElkIHByb3BlcnR5XG4gICAgICAgIHByb3BzLnBhcmVudElkID0gcGFyZW50SWQ7XG4gICAgfVxuICAgIHByb3BzLmJ1c2luZXNzSG91cnMgPSBwcm9wcy5idXNpbmVzc0hvdXJzID8gcGFyc2VCdXNpbmVzc0hvdXJzKHByb3BzLmJ1c2luZXNzSG91cnMsIGNhbGVuZGFyKSA6IG51bGw7XG4gICAgcHJvcHMudWkgPSB1aTtcbiAgICBwcm9wcy5leHRlbmRlZFByb3BzID0gX19hc3NpZ24oe30sIGxlZnRvdmVyczEsIHByb3BzLmV4dGVuZGVkUHJvcHMpO1xuICAgIC8vIGhlbHAgb3V0IFJlc291cmNlQXBpIGZyb20gaGF2aW5nIHVzZXIgbW9kaWZ5IHByb3BzXG4gICAgT2JqZWN0LmZyZWV6ZSh1aS5jbGFzc05hbWVzKTtcbiAgICBPYmplY3QuZnJlZXplKHByb3BzLmV4dGVuZGVkUHJvcHMpO1xuICAgIGlmIChzdG9yZVtwcm9wcy5pZF0pIDtcbiAgICBlbHNlIHtcbiAgICAgICAgc3RvcmVbcHJvcHMuaWRdID0gcHJvcHM7XG4gICAgICAgIGlmIChwcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHByb3BzLmNoaWxkcmVuOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZElucHV0ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHBhcnNlUmVzb3VyY2UoY2hpbGRJbnB1dCwgcHJvcHMuaWQsIHN0b3JlLCBjYWxlbmRhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgcHJvcHMuY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BzO1xufVxuLypcblRPRE86IHVzZSB0aGlzIGluIG1vcmUgcGxhY2VzXG4qL1xuZnVuY3Rpb24gZ2V0UHVibGljSWQoaWQpIHtcbiAgICBpZiAoaWQuaW5kZXhPZihQUklWQVRFX0lEX1BSRUZJWCkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJlc291cmNlU3RvcmUgKHN0b3JlLCBhY3Rpb24sIHNvdXJjZSwgY2FsZW5kYXIpIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0lOSVQnOlxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICBjYXNlICdSRUNFSVZFX1JFU09VUkNFUyc6XG4gICAgICAgICAgICByZXR1cm4gcmVjZWl2ZVJhd1Jlc291cmNlcyhzdG9yZSwgYWN0aW9uLnJhd1Jlc291cmNlcywgYWN0aW9uLmZldGNoSWQsIHNvdXJjZSwgY2FsZW5kYXIpO1xuICAgICAgICBjYXNlICdBRERfUkVTT1VSQ0UnOlxuICAgICAgICAgICAgcmV0dXJuIGFkZFJlc291cmNlKHN0b3JlLCBhY3Rpb24ucmVzb3VyY2VIYXNoKTtcbiAgICAgICAgY2FzZSAnUkVNT1ZFX1JFU09VUkNFJzpcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVSZXNvdXJjZShzdG9yZSwgYWN0aW9uLnJlc291cmNlSWQpO1xuICAgICAgICBjYXNlICdTRVRfUkVTT1VSQ0VfUFJPUCc6XG4gICAgICAgICAgICByZXR1cm4gc2V0UmVzb3VyY2VQcm9wKHN0b3JlLCBhY3Rpb24ucmVzb3VyY2VJZCwgYWN0aW9uLnByb3BOYW1lLCBhY3Rpb24ucHJvcFZhbHVlKTtcbiAgICAgICAgY2FzZSAnUkVTRVRfUkVTT1VSQ0VTJzpcbiAgICAgICAgICAgIC8vIG11c3QgbWFrZSB0aGUgY2FsZW5kYXIgdGhpbmsgZWFjaCByZXNvdXJjZSBpcyBhIG5ldyBvYmplY3QgOi9cbiAgICAgICAgICAgIHJldHVybiBtYXBIYXNoKHN0b3JlLCBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHJlc291cmNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlY2VpdmVSYXdSZXNvdXJjZXMoZXhpc3RpbmdTdG9yZSwgaW5wdXRzLCBmZXRjaElkLCBzb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgaWYgKHNvdXJjZS5sYXRlc3RGZXRjaElkID09PSBmZXRjaElkKSB7XG4gICAgICAgIHZhciBuZXh0U3RvcmUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBpbnB1dHNfMSA9IGlucHV0czsgX2kgPCBpbnB1dHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IGlucHV0c18xW19pXTtcbiAgICAgICAgICAgIHBhcnNlUmVzb3VyY2UoaW5wdXQsICcnLCBuZXh0U3RvcmUsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dFN0b3JlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nU3RvcmU7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkUmVzb3VyY2UoZXhpc3RpbmdTdG9yZSwgYWRkaXRpb25zKSB7XG4gICAgLy8gVE9ETzogd2FybiBhYm91dCBkdXBsaWNhdGUgSURzXG4gICAgcmV0dXJuIF9fYXNzaWduKHt9LCBleGlzdGluZ1N0b3JlLCBhZGRpdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlUmVzb3VyY2UoZXhpc3RpbmdTdG9yZSwgcmVzb3VyY2VJZCkge1xuICAgIHZhciBuZXdTdG9yZSA9IF9fYXNzaWduKHt9LCBleGlzdGluZ1N0b3JlKTtcbiAgICBkZWxldGUgbmV3U3RvcmVbcmVzb3VyY2VJZF07XG4gICAgLy8gcHJvbW90ZSBjaGlsZHJlblxuICAgIGZvciAodmFyIGNoaWxkUmVzb3VyY2VJZCBpbiBuZXdTdG9yZSkgeyAvLyBhIGNoaWxkLCAqbWF5YmUqIGJ1dCBwcm9iYWJseSBub3RcbiAgICAgICAgaWYgKG5ld1N0b3JlW2NoaWxkUmVzb3VyY2VJZF0ucGFyZW50SWQgPT09IHJlc291cmNlSWQpIHtcbiAgICAgICAgICAgIG5ld1N0b3JlW2NoaWxkUmVzb3VyY2VJZF0gPSBfX2Fzc2lnbih7fSwgbmV3U3RvcmVbY2hpbGRSZXNvdXJjZUlkXSwgeyBwYXJlbnRJZDogJycgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xufVxuZnVuY3Rpb24gc2V0UmVzb3VyY2VQcm9wKGV4aXN0aW5nU3RvcmUsIHJlc291cmNlSWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgZXhpc3RpbmdSZXNvdXJjZSA9IGV4aXN0aW5nU3RvcmVbcmVzb3VyY2VJZF07XG4gICAgLy8gVE9ETzogc2FuaXRpemF0aW9uXG4gICAgaWYgKGV4aXN0aW5nUmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBleGlzdGluZ1N0b3JlLCAoX2EgPSB7fSwgX2FbcmVzb3VyY2VJZF0gPSBfX2Fzc2lnbih7fSwgZXhpc3RpbmdSZXNvdXJjZSwgKF9iID0ge30sIF9iW25hbWVdID0gdmFsdWUsIF9iKSksIF9hKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdTdG9yZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJlc291cmNlRW50aXR5RXhwYW5zaW9ucyhleHBhbnNpb25zLCBhY3Rpb24pIHtcbiAgICB2YXIgX2E7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdJTklUJzpcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgY2FzZSAnU0VUX1JFU09VUkNFX0VOVElUWV9FWFBBTkRFRCc6XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIGV4cGFuc2lvbnMsIChfYSA9IHt9LCBfYVthY3Rpb24uaWRdID0gYWN0aW9uLmlzRXhwYW5kZWQsIF9hKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZXhwYW5zaW9ucztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlc291cmNlc1JlZHVjZXJzIChzdGF0ZSwgYWN0aW9uLCBjYWxlbmRhcikge1xuICAgIHZhciByZXNvdXJjZVNvdXJjZSA9IHJlZHVjZVJlc291cmNlU291cmNlKHN0YXRlLnJlc291cmNlU291cmNlLCBhY3Rpb24sIHN0YXRlLmRhdGVQcm9maWxlLCBjYWxlbmRhcik7XG4gICAgdmFyIHJlc291cmNlU3RvcmUgPSByZWR1Y2VSZXNvdXJjZVN0b3JlKHN0YXRlLnJlc291cmNlU3RvcmUsIGFjdGlvbiwgcmVzb3VyY2VTb3VyY2UsIGNhbGVuZGFyKTtcbiAgICB2YXIgcmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zID0gcmVkdWNlUmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zKHN0YXRlLnJlc291cmNlRW50aXR5RXhwYW5zaW9ucywgYWN0aW9uKTtcbiAgICByZXR1cm4gX19hc3NpZ24oe30sIHN0YXRlLCB7IHJlc291cmNlU291cmNlOiByZXNvdXJjZVNvdXJjZSxcbiAgICAgICAgcmVzb3VyY2VTdG9yZTogcmVzb3VyY2VTdG9yZSxcbiAgICAgICAgcmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zOiByZXNvdXJjZUVudGl0eUV4cGFuc2lvbnMgfSk7XG59XG5cbnZhciBSRVNPVVJDRV9SRUxBVEVEX1BST1BTID0ge1xuICAgIHJlc291cmNlSWQ6IFN0cmluZyxcbiAgICByZXNvdXJjZUlkczogZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiAoaXRlbXMgfHwgW10pLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICByZXNvdXJjZUVkaXRhYmxlOiBCb29sZWFuXG59O1xuZnVuY3Rpb24gcGFyc2VFdmVudERlZihkZWYsIHByb3BzLCBsZWZ0b3ZlcnMpIHtcbiAgICB2YXIgcmVzb3VyY2VSZWxhdGVkUHJvcHMgPSByZWZpbmVQcm9wcyhwcm9wcywgUkVTT1VSQ0VfUkVMQVRFRF9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgdmFyIHJlc291cmNlSWRzID0gcmVzb3VyY2VSZWxhdGVkUHJvcHMucmVzb3VyY2VJZHM7XG4gICAgaWYgKHJlc291cmNlUmVsYXRlZFByb3BzLnJlc291cmNlSWQpIHtcbiAgICAgICAgcmVzb3VyY2VJZHMucHVzaChyZXNvdXJjZVJlbGF0ZWRQcm9wcy5yZXNvdXJjZUlkKTtcbiAgICB9XG4gICAgZGVmLnJlc291cmNlSWRzID0gcmVzb3VyY2VJZHM7XG4gICAgZGVmLnJlc291cmNlRWRpdGFibGUgPSByZXNvdXJjZVJlbGF0ZWRQcm9wcy5yZXNvdXJjZUVkaXRhYmxlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRlU2VsZWN0aW9uSm9pbihoaXQwLCBoaXQxKSB7XG4gICAgdmFyIHJlc291cmNlSWQwID0gaGl0MC5kYXRlU3Bhbi5yZXNvdXJjZUlkO1xuICAgIHZhciByZXNvdXJjZUlkMSA9IGhpdDEuZGF0ZVNwYW4ucmVzb3VyY2VJZDtcbiAgICBpZiAocmVzb3VyY2VJZDAgJiYgcmVzb3VyY2VJZDEpIHtcbiAgICAgICAgaWYgKGhpdDAuY29tcG9uZW50LmFsbG93QWNyb3NzUmVzb3VyY2VzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgcmVzb3VyY2VJZDAgIT09IHJlc291cmNlSWQxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyByZXNvdXJjZUlkOiByZXNvdXJjZUlkMCB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgUmVzb3VyY2VBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VBcGkoY2FsZW5kYXIsIHJhd1Jlc291cmNlKSB7XG4gICAgICAgIHRoaXMuX2NhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgICAgIHRoaXMuX3Jlc291cmNlID0gcmF3UmVzb3VyY2U7XG4gICAgfVxuICAgIFJlc291cmNlQXBpLnByb3RvdHlwZS5zZXRQcm9wID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfUkVTT1VSQ0VfUFJPUCcsXG4gICAgICAgICAgICByZXNvdXJjZUlkOiB0aGlzLl9yZXNvdXJjZS5pZCxcbiAgICAgICAgICAgIHByb3BOYW1lOiBuYW1lLFxuICAgICAgICAgICAgcHJvcFZhbHVlOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc291cmNlQXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfUkVTT1VSQ0UnLFxuICAgICAgICAgICAgcmVzb3VyY2VJZDogdGhpcy5fcmVzb3VyY2UuaWRcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXNvdXJjZUFwaS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLl9jYWxlbmRhcjtcbiAgICAgICAgdmFyIHBhcmVudElkID0gdGhpcy5fcmVzb3VyY2UucGFyZW50SWQ7XG4gICAgICAgIGlmIChwYXJlbnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZUFwaShjYWxlbmRhciwgY2FsZW5kYXIuc3RhdGUucmVzb3VyY2VTb3VyY2VbcGFyZW50SWRdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZUFwaS5wcm90b3R5cGUuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGlzUmVzb3VyY2VJZCA9IHRoaXMuX3Jlc291cmNlLmlkO1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLl9jYWxlbmRhcjtcbiAgICAgICAgdmFyIHJlc291cmNlU3RvcmUgPSBjYWxlbmRhci5zdGF0ZS5yZXNvdXJjZVN0b3JlO1xuICAgICAgICB2YXIgY2hpbGRBcGlzID0gW107XG4gICAgICAgIGZvciAodmFyIHJlc291cmNlSWQgaW4gcmVzb3VyY2VTdG9yZSkge1xuICAgICAgICAgICAgaWYgKHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF0ucGFyZW50SWQgPT09IHRoaXNSZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRBcGlzLnB1c2gobmV3IFJlc291cmNlQXBpKGNhbGVuZGFyLCByZXNvdXJjZVN0b3JlW3Jlc291cmNlSWRdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkQXBpcztcbiAgICB9O1xuICAgIC8qXG4gICAgdGhpcyBpcyByZWFsbHkgaW5lZmZpY2llbnQhXG4gICAgVE9ETzogbWFrZSBFdmVudEFwaTo6cmVzb3VyY2VJZHMgYSBoYXNoIG9yIGtlZXAgYW4gaW5kZXggaW4gdGhlIENhbGVuZGFyJ3Mgc3RhdGVcbiAgICAqL1xuICAgIFJlc291cmNlQXBpLnByb3RvdHlwZS5nZXRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGlzUmVzb3VyY2VJZCA9IHRoaXMuX3Jlc291cmNlLmlkO1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLl9jYWxlbmRhcjtcbiAgICAgICAgdmFyIF9hID0gY2FsZW5kYXIuc3RhdGUuZXZlbnRTdG9yZSwgZGVmcyA9IF9hLmRlZnMsIGluc3RhbmNlcyA9IF9hLmluc3RhbmNlcztcbiAgICAgICAgdmFyIGV2ZW50QXBpcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgaWYgKGRlZi5yZXNvdXJjZUlkcy5pbmRleE9mKHRoaXNSZXNvdXJjZUlkKSAhPT0gLTEpIHsgLy8gaW5lZmZpY2llbnQhISFcbiAgICAgICAgICAgICAgICBldmVudEFwaXMucHVzaChuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIGRlZiwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcGlzO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UuaWQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwidGl0bGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnRpdGxlOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2VBcGkucHJvdG90eXBlLCBcImV2ZW50Q29uc3RyYWludFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UudWkuY29uc3RyYWludHNbMF0gfHwgbnVsbDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJldmVudE92ZXJsYXBcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLm92ZXJsYXA7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXZlbnRBbGxvd1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UudWkuYWxsb3dzWzBdIHx8IG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZXZlbnRCYWNrZ3JvdW5kQ29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Jlc291cmNlLnVpLmJhY2tncm91bmRDb2xvcjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJldmVudEJvcmRlckNvbG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXNvdXJjZS51aS5ib3JkZXJDb2xvcjsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJldmVudFRleHRDb2xvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UudWkudGV4dENvbG9yOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2VBcGkucHJvdG90eXBlLCBcImV2ZW50Q2xhc3NOYW1lc1wiLCB7XG4gICAgICAgIC8vIE5PVEU6IHVzZXIgY2FuJ3QgbW9kaWZ5IHRoZXNlIGJlY2F1c2UgT2JqZWN0LmZyZWV6ZSB3YXMgY2FsbGVkIGluIGV2ZW50LWRlZiBwYXJzaW5nXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzb3VyY2UudWkuY2xhc3NOYW1lczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc291cmNlQXBpLnByb3RvdHlwZSwgXCJleHRlbmRlZFByb3BzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXNvdXJjZS5leHRlbmRlZFByb3BzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUmVzb3VyY2VBcGk7XG59KCkpO1xuXG5DYWxlbmRhci5wcm90b3R5cGUuYWRkUmVzb3VyY2UgPSBmdW5jdGlvbiAoaW5wdXQsIHNjcm9sbFRvKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChzY3JvbGxUbyA9PT0gdm9pZCAwKSB7IHNjcm9sbFRvID0gdHJ1ZTsgfVxuICAgIHZhciByZXNvdXJjZUhhc2g7XG4gICAgdmFyIHJlc291cmNlO1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlc291cmNlQXBpKSB7XG4gICAgICAgIHJlc291cmNlID0gaW5wdXQuX3Jlc291cmNlO1xuICAgICAgICByZXNvdXJjZUhhc2ggPSAoX2EgPSB7fSwgX2FbcmVzb3VyY2UuaWRdID0gcmVzb3VyY2UsIF9hKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc291cmNlSGFzaCA9IHt9O1xuICAgICAgICByZXNvdXJjZSA9IHBhcnNlUmVzb3VyY2UoaW5wdXQsICcnLCByZXNvdXJjZUhhc2gsIHRoaXMpO1xuICAgIH1cbiAgICAvLyBIQUNLXG4gICAgaWYgKHNjcm9sbFRvKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnZpZXcuYWRkU2Nyb2xsKHsgZm9yY2VkUm93SWQ6IHJlc291cmNlLmlkIH0pO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ0FERF9SRVNPVVJDRScsXG4gICAgICAgIHJlc291cmNlSGFzaDogcmVzb3VyY2VIYXNoXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBSZXNvdXJjZUFwaSh0aGlzLCByZXNvdXJjZSk7XG59O1xuQ2FsZW5kYXIucHJvdG90eXBlLmdldFJlc291cmNlQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGlkID0gU3RyaW5nKGlkKTtcbiAgICBpZiAodGhpcy5zdGF0ZS5yZXNvdXJjZVN0b3JlKSB7IC8vIGd1YXJkIGFnYWluc3QgY2FsZW5kYXIgd2l0aCBubyByZXNvdXJjZSBmdW5jdGlvbmFsaXR5XG4gICAgICAgIHZhciByYXdSZXNvdXJjZSA9IHRoaXMuc3RhdGUucmVzb3VyY2VTdG9yZVtpZF07XG4gICAgICAgIGlmIChyYXdSZXNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNvdXJjZUFwaSh0aGlzLCByYXdSZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuQ2FsZW5kYXIucHJvdG90eXBlLmdldFJlc291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzb3VyY2VTdG9yZSA9IHRoaXMuc3RhdGUucmVzb3VyY2VTdG9yZTtcbiAgICB2YXIgcmVzb3VyY2VBcGlzID0gW107XG4gICAgaWYgKHJlc291cmNlU3RvcmUpIHsgLy8gZ3VhcmQgYWdhaW5zdCBjYWxlbmRhciB3aXRoIG5vIHJlc291cmNlIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgICAgICByZXNvdXJjZUFwaXMucHVzaChuZXcgUmVzb3VyY2VBcGkodGhpcywgcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZUFwaXM7XG59O1xuQ2FsZW5kYXIucHJvdG90eXBlLmdldFRvcExldmVsUmVzb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXNvdXJjZVN0b3JlID0gdGhpcy5zdGF0ZS5yZXNvdXJjZVN0b3JlO1xuICAgIHZhciByZXNvdXJjZUFwaXMgPSBbXTtcbiAgICBpZiAocmVzb3VyY2VTdG9yZSkgeyAvLyBndWFyZCBhZ2FpbnN0IGNhbGVuZGFyIHdpdGggbm8gcmVzb3VyY2UgZnVuY3Rpb25hbGl0eVxuICAgICAgICBmb3IgKHZhciByZXNvdXJjZUlkIGluIHJlc291cmNlU3RvcmUpIHtcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXS5wYXJlbnRJZCkge1xuICAgICAgICAgICAgICAgIHJlc291cmNlQXBpcy5wdXNoKG5ldyBSZXNvdXJjZUFwaSh0aGlzLCByZXNvdXJjZVN0b3JlW3Jlc291cmNlSWRdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlQXBpcztcbn07XG5DYWxlbmRhci5wcm90b3R5cGUucmVyZW5kZXJSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdSRVNFVF9SRVNPVVJDRVMnXG4gICAgfSk7XG59O1xuQ2FsZW5kYXIucHJvdG90eXBlLnJlZmV0Y2hSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdSRUZFVENIX1JFU09VUkNFUydcbiAgICB9KTtcbn07XG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRlUG9pbnQoZGF0ZVNwYW4sIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGRhdGVTcGFuLnJlc291cmNlSWQgP1xuICAgICAgICB7IHJlc291cmNlOiBjYWxlbmRhci5nZXRSZXNvdXJjZUJ5SWQoZGF0ZVNwYW4ucmVzb3VyY2VJZCkgfSA6XG4gICAgICAgIHt9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtRGF0ZVNwYW4oZGF0ZVNwYW4sIGNhbGVuZGFyKSB7XG4gICAgcmV0dXJuIGRhdGVTcGFuLnJlc291cmNlSWQgP1xuICAgICAgICB7IHJlc291cmNlOiBjYWxlbmRhci5nZXRSZXNvdXJjZUJ5SWQoZGF0ZVNwYW4ucmVzb3VyY2VJZCkgfSA6XG4gICAgICAgIHt9O1xufVxuXG4vKlxuc3BsaXRzIHRoaW5ncyBCQVNFRCBPRkYgT0Ygd2hpY2ggcmVzb3VyY2VzIHRoZXkgYXJlIGFzc29jaWF0ZWQgd2l0aC5cbmNyZWF0ZXMgYSAnJyBlbnRyeSB3aGljaCBpcyB3aGVuIHNvbWV0aGluZyBoYXMgTk8gcmVzb3VyY2UuXG4qL1xudmFyIFJlc291cmNlU3BsaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlc291cmNlU3BsaXR0ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VTcGxpdHRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBSZXNvdXJjZVNwbGl0dGVyLnByb3RvdHlwZS5nZXRLZXlJbmZvID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7ICcnOiB7fSB9LCBwcm9wcy5yZXNvdXJjZVN0b3JlIC8vIGFscmVhZHkgaGFzIGB1aWAgYW5kIGBidXNpbmVzc0hvdXJzYCBrZXlzIVxuICAgICAgICApO1xuICAgIH07XG4gICAgUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5c0ZvckRhdGVTcGFuID0gZnVuY3Rpb24gKGRhdGVTcGFuKSB7XG4gICAgICAgIHJldHVybiBbZGF0ZVNwYW4ucmVzb3VyY2VJZCB8fCAnJ107XG4gICAgfTtcbiAgICBSZXNvdXJjZVNwbGl0dGVyLnByb3RvdHlwZS5nZXRLZXlzRm9yRXZlbnREZWYgPSBmdW5jdGlvbiAoZXZlbnREZWYpIHtcbiAgICAgICAgdmFyIHJlc291cmNlSWRzID0gZXZlbnREZWYucmVzb3VyY2VJZHM7XG4gICAgICAgIGlmICghcmVzb3VyY2VJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gWycnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb3VyY2VJZHM7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzb3VyY2VTcGxpdHRlcjtcbn0oU3BsaXR0ZXIpKTtcblxuZnVuY3Rpb24gaXNQcm9wc1ZhbGlkV2l0aFJlc291cmNlcyhwcm9wcywgY2FsZW5kYXIpIHtcbiAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgUmVzb3VyY2VTcGxpdHRlcigpO1xuICAgIHZhciBzZXRzID0gc3BsaXR0ZXIuc3BsaXRQcm9wcyhfX2Fzc2lnbih7fSwgcHJvcHMsIHsgcmVzb3VyY2VTdG9yZTogY2FsZW5kYXIuc3RhdGUucmVzb3VyY2VTdG9yZSB9KSk7XG4gICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiBzZXRzKSB7XG4gICAgICAgIHZhciBwcm9wc18xID0gc2V0c1tyZXNvdXJjZUlkXTtcbiAgICAgICAgLy8gbWVyZ2UgaW4gZXZlbnQgZGF0YSBmcm9tIHRoZSBub24tcmVzb3VyY2Ugc2VnbWVudFxuICAgICAgICBpZiAocmVzb3VyY2VJZCAmJiBzZXRzWycnXSkgeyAvLyBjdXJyZW50IHNlZ21lbnQgaXMgbm90IHRoZSBub24tcmVzb3VyY2Ugb25lLCBhbmQgdGhlcmUgSVMgYSBub24tcmVzb3VyY2Ugb25lXG4gICAgICAgICAgICBwcm9wc18xID0gX19hc3NpZ24oe30sIHByb3BzXzEsIHsgZXZlbnRTdG9yZTogbWVyZ2VFdmVudFN0b3JlcyhzZXRzWycnXS5ldmVudFN0b3JlLCBwcm9wc18xLmV2ZW50U3RvcmUpLCBldmVudFVpQmFzZXM6IF9fYXNzaWduKHt9LCBzZXRzWycnXS5ldmVudFVpQmFzZXMsIHByb3BzXzEuZXZlbnRVaUJhc2VzKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUHJvcHNWYWxpZChwcm9wc18xLCBjYWxlbmRhciwgeyByZXNvdXJjZUlkOiByZXNvdXJjZUlkIH0sIGZpbHRlckNvbmZpZy5iaW5kKG51bGwsIHJlc291cmNlSWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZmlsdGVyQ29uZmlnKHJlc291cmNlSWQsIGNvbmZpZykge1xuICAgIHJldHVybiBfX2Fzc2lnbih7fSwgY29uZmlnLCB7IGNvbnN0cmFpbnRzOiBmaWx0ZXJDb25zdHJhaW50cyhyZXNvdXJjZUlkLCBjb25maWcuY29uc3RyYWludHMpIH0pO1xufVxuZnVuY3Rpb24gZmlsdGVyQ29uc3RyYWludHMocmVzb3VyY2VJZCwgY29uc3RyYWludHMpIHtcbiAgICByZXR1cm4gY29uc3RyYWludHMubWFwKGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHZhciBkZWZzID0gY29uc3RyYWludC5kZWZzO1xuICAgICAgICBpZiAoZGVmcykgeyAvLyB3ZSBhcmUgZGVhbGluZyB3aXRoIGFuIEV2ZW50U3RvcmVcbiAgICAgICAgICAgIC8vIGlmIGFueSBvZiB0aGUgZXZlbnRzIGRlZmluZSBjb25zdHJhaW50cyB0byByZXNvdXJjZXMgdGhhdCBhcmUgTk9UIHRoaXMgcmVzb3VyY2UsXG4gICAgICAgICAgICAvLyB0aGVuIHRoaXMgcmVzb3VyY2UgaXMgdW5jb25kaXRpb25hbGx5IHByb2hpYml0ZWQsIHdoaWNoIGlzIHdoYXQgYSBgZmFsc2VgIHZhbHVlIGRvZXMuXG4gICAgICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBkZWZzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc291cmNlSWRzID0gZGVmc1tkZWZJZF0ucmVzb3VyY2VJZHM7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlSWRzLmxlbmd0aCAmJiByZXNvdXJjZUlkcy5pbmRleE9mKHJlc291cmNlSWQpID09PSAtMSkgeyAvLyBUT0RPOiB1c2UgYSBoYXNoPyEhISAoZm9yIG90aGVyIHJlYXNvbnMgdG9vKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25zdHJhaW50O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHRlcm5hbERlZihkYXRlU3Bhbikge1xuICAgIHJldHVybiBkYXRlU3Bhbi5yZXNvdXJjZUlkID9cbiAgICAgICAgeyByZXNvdXJjZUlkOiBkYXRlU3Bhbi5yZXNvdXJjZUlkIH0gOlxuICAgICAgICB7fTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXZlbnRSZXNpemVKb2luKGhpdDAsIGhpdDEpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gaGl0MC5jb21wb25lbnQ7XG4gICAgaWYgKGNvbXBvbmVudC5hbGxvd0Fjcm9zc1Jlc291cmNlcyA9PT0gZmFsc2UgJiZcbiAgICAgICAgaGl0MC5kYXRlU3Bhbi5yZXNvdXJjZUlkICE9PSBoaXQxLmRhdGVTcGFuLnJlc291cmNlSWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuRXZlbnRBcGkucHJvdG90eXBlLmdldFJlc291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLl9jYWxlbmRhcjtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnJlc291cmNlSWRzLm1hcChmdW5jdGlvbiAocmVzb3VyY2VJZCkge1xuICAgICAgICByZXR1cm4gY2FsZW5kYXIuZ2V0UmVzb3VyY2VCeUlkKHJlc291cmNlSWQpO1xuICAgIH0pO1xufTtcbkV2ZW50QXBpLnByb3RvdHlwZS5zZXRSZXNvdXJjZXMgPSBmdW5jdGlvbiAocmVzb3VyY2VzKSB7XG4gICAgdmFyIHJlc291cmNlSWRzID0gW107XG4gICAgLy8gbWFzc2FnZSByZXNvdXJjZXMgLT4gcmVzb3VyY2VJZHNcbiAgICBmb3IgKHZhciBfaSA9IDAsIHJlc291cmNlc18xID0gcmVzb3VyY2VzOyBfaSA8IHJlc291cmNlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSByZXNvdXJjZXNfMVtfaV07XG4gICAgICAgIHZhciByZXNvdXJjZUlkID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc291cmNlSWQgPSByZXNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXNvdXJjZUlkID0gU3RyaW5nKHJlc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIFJlc291cmNlQXBpKSB7XG4gICAgICAgICAgICByZXNvdXJjZUlkID0gcmVzb3VyY2UuaWQ7IC8vIGd1YXJhbnRlZWQgdG8gYWx3YXlzIGhhdmUgYW4gSUQuIGhtbW1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybigndW5rbm93biByZXNvdXJjZSB0eXBlOiAnICsgcmVzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICByZXNvdXJjZUlkcy5wdXNoKHJlc291cmNlSWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMubXV0YXRlKHtcbiAgICAgICAgc3RhbmRhcmRQcm9wczoge1xuICAgICAgICAgICAgcmVzb3VyY2VJZHM6IHJlc291cmNlSWRzXG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbnZhciBSRUxFQVNFX0RBVEUgPSAnMjAxOS0wOC0xMCc7IC8vIGZvciBTY2hlZHVsZXJcbnZhciBVUEdSQURFX1dJTkRPVyA9IDM2NSArIDc7IC8vIGRheXMuIDEgd2VlayBsZWV3YXksIGZvciB0eiBzaGlmdCByZWFzb25zIHRvb1xudmFyIExJQ0VOU0VfSU5GT19VUkwgPSAnaHR0cDovL2Z1bGxjYWxlbmRhci5pby9zY2hlZHVsZXIvbGljZW5zZS8nO1xudmFyIFBSRVNFVF9MSUNFTlNFX0tFWVMgPSBbXG4gICAgJ0dQTC1NeS1Qcm9qZWN0LUlzLU9wZW4tU291cmNlJyxcbiAgICAnQ0MtQXR0cmlidXRpb24tTm9uQ29tbWVyY2lhbC1Ob0Rlcml2YXRpdmVzJ1xuXTtcbnZhciBDU1MgPSB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgJ3otaW5kZXgnOiA5OTk5OSxcbiAgICBib3R0b206ICcxcHgnLFxuICAgIGxlZnQ6ICcxcHgnLFxuICAgIGJhY2tncm91bmQ6ICcjZWVlJyxcbiAgICAnYm9yZGVyLWNvbG9yJzogJyNkZGQnLFxuICAgICdib3JkZXItc3R5bGUnOiAnc29saWQnLFxuICAgICdib3JkZXItd2lkdGgnOiAnMXB4IDFweCAwIDAnLFxuICAgIHBhZGRpbmc6ICcycHggNHB4JyxcbiAgICAnZm9udC1zaXplJzogJzEycHgnLFxuICAgICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6ICczcHgnXG59O1xuZnVuY3Rpb24gaW5qZWN0TGljZW5zZVdhcm5pbmcoY29udGFpbmVyRWwsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGtleSA9IGNhbGVuZGFyLm9wdCgnc2NoZWR1bGVyTGljZW5zZUtleScpO1xuICAgIGlmICghaXNJbW11bmVVcmwod2luZG93LmxvY2F0aW9uLmhyZWYpICYmICFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgYXBwZW5kVG9FbGVtZW50KGNvbnRhaW5lckVsLCAnPGRpdiBjbGFzcz1cImZjLWxpY2Vuc2UtbWVzc2FnZVwiIHN0eWxlPVwiJyArIGh0bWxFc2NhcGUoY3NzVG9TdHIoQ1NTKSkgKyAnXCI+JyArXG4gICAgICAgICAgICAnUGxlYXNlIHVzZSBhIHZhbGlkIGxpY2Vuc2Uga2V5LiA8YSBocmVmPVwiJyArIExJQ0VOU0VfSU5GT19VUkwgKyAnXCI+TW9yZSBJbmZvPC9hPicgK1xuICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgIH1cbn1cbi8qXG5UaGlzIGRlY3J5cHRpb24gaXMgbm90IG1lYW50IHRvIGJlIGJ1bGxldHByb29mLiBKdXN0IGEgd2F5IHRvIHJlbWluZCBhYm91dCBhbiB1cGdyYWRlLlxuKi9cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gICAgaWYgKFBSRVNFVF9MSUNFTlNFX0tFWVMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHBhcnRzID0gKGtleSB8fCAnJykubWF0Y2goL14oXFxkKylcXC1mY3NcXC0oXFxkKykkLyk7XG4gICAgaWYgKHBhcnRzICYmIChwYXJ0c1sxXS5sZW5ndGggPT09IDEwKSkge1xuICAgICAgICB2YXIgcHVyY2hhc2VEYXRlID0gbmV3IERhdGUocGFyc2VJbnQocGFydHNbMl0sIDEwKSAqIDEwMDApO1xuICAgICAgICB2YXIgcmVsZWFzZURhdGUgPSBuZXcgRGF0ZShjb25maWcubW9ja1NjaGVkdWxlclJlbGVhc2VEYXRlIHx8IFJFTEVBU0VfREFURSk7XG4gICAgICAgIGlmIChpc1ZhbGlkRGF0ZShyZWxlYXNlRGF0ZSkpIHsgLy8gdG9rZW4gd29uJ3QgYmUgcmVwbGFjZWQgaW4gZGV2IG1vZGVcbiAgICAgICAgICAgIHZhciBtaW5QdXJjaGFzZURhdGUgPSBhZGREYXlzKHJlbGVhc2VEYXRlLCAtVVBHUkFERV9XSU5ET1cpO1xuICAgICAgICAgICAgaWYgKG1pblB1cmNoYXNlRGF0ZSA8IHB1cmNoYXNlRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzSW1tdW5lVXJsKHVybCkge1xuICAgIHJldHVybiAvXFx3K1xcOlxcL1xcL2Z1bGxjYWxlbmRhclxcLmlvXFwvfFxcL2V4YW1wbGVzXFwvW1xcdy1dK1xcLmh0bWwkLy50ZXN0KHVybCk7XG59XG5cbnZhciBvcHRpb25DaGFuZ2VIYW5kbGVycyA9IHtcbiAgICByZXNvdXJjZXM6IGhhbmRsZVJlc291cmNlc1xufTtcbmZ1bmN0aW9uIGhhbmRsZVJlc291cmNlcyhuZXdTb3VyY2VJbnB1dCwgY2FsZW5kYXIsIGRlZXBFcXVhbCkge1xuICAgIHZhciBvbGRTb3VyY2VJbnB1dCA9IGNhbGVuZGFyLnN0YXRlLnJlc291cmNlU291cmNlLl9yYXc7XG4gICAgaWYgKCFkZWVwRXF1YWwob2xkU291cmNlSW5wdXQsIG5ld1NvdXJjZUlucHV0KSkge1xuICAgICAgICBjYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnUkVTRVRfUkVTT1VSQ0VfU09VUkNFJyxcbiAgICAgICAgICAgIHJlc291cmNlU291cmNlSW5wdXQ6IG5ld1NvdXJjZUlucHV0XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxucmVnaXN0ZXJSZXNvdXJjZVNvdXJjZURlZih7XG4gICAgaWdub3JlUmFuZ2U6IHRydWUsXG4gICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJhdykpIHtcbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyYXcucmVzb3VyY2VzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJhdy5yZXNvdXJjZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBmZXRjaDogZnVuY3Rpb24gKGFyZywgc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgIHN1Y2Nlc3NDYWxsYmFjayh7XG4gICAgICAgICAgICByYXdSZXNvdXJjZXM6IGFyZy5yZXNvdXJjZVNvdXJjZS5tZXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5yZWdpc3RlclJlc291cmNlU291cmNlRGVmKHtcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByYXcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdy5yZXNvdXJjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcucmVzb3VyY2VzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBhcmcuY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgdmFyIGZ1bmMgPSBhcmcucmVzb3VyY2VTb3VyY2UubWV0YTtcbiAgICAgICAgdmFyIHB1YmxpY0FyZyA9IHt9O1xuICAgICAgICBpZiAoYXJnLnJhbmdlKSB7XG4gICAgICAgICAgICBwdWJsaWNBcmcgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGRhdGVFbnYudG9EYXRlKGFyZy5yYW5nZS5zdGFydCksXG4gICAgICAgICAgICAgICAgZW5kOiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICBzdGFydFN0cjogZGF0ZUVudi5mb3JtYXRJc28oYXJnLnJhbmdlLnN0YXJ0KSxcbiAgICAgICAgICAgICAgICBlbmRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKGFyZy5yYW5nZS5lbmQpLFxuICAgICAgICAgICAgICAgIHRpbWVab25lOiBkYXRlRW52LnRpbWVab25lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IG1ha2UgbW9yZSBkcnkgd2l0aCBFdmVudFNvdXJjZUZ1bmNcbiAgICAgICAgLy8gVE9ETzogYWNjZXB0IGEgcmVzcG9uc2U/XG4gICAgICAgIHVucHJvbWlzaWZ5KGZ1bmMuYmluZChudWxsLCBwdWJsaWNBcmcpLCBmdW5jdGlvbiAocmF3UmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKHsgcmF3UmVzb3VyY2VzOiByYXdSZXNvdXJjZXMgfSk7IC8vIG5lZWRzIGFuIG9iamVjdCByZXNwb25zZVxuICAgICAgICB9LCBmYWlsdXJlIC8vIHNlbmQgZXJyb3JPYmogZGlyZWN0bHkgdG8gZmFpbHVyZSBjYWxsYmFja1xuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5yZWdpc3RlclJlc291cmNlU291cmNlRGVmKHtcbiAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByYXcgPSB7IHVybDogcmF3IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXJhdyB8fCB0eXBlb2YgcmF3ICE9PSAnb2JqZWN0JyB8fCAhcmF3LnVybCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVybDogcmF3LnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogKHJhdy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICBleHRyYVBhcmFtczogcmF3LmV4dHJhUGFyYW1zXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBmZXRjaDogZnVuY3Rpb24gKGFyZywgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG1ldGEgPSBhcmcucmVzb3VyY2VTb3VyY2UubWV0YTtcbiAgICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgYXJnLnJhbmdlLCBhcmcuY2FsZW5kYXIpO1xuICAgICAgICByZXF1ZXN0SnNvbihtZXRhLm1ldGhvZCwgbWV0YS51cmwsIHJlcXVlc3RQYXJhbXMsIGZ1bmN0aW9uIChyYXdSZXNvdXJjZXMsIHhocikge1xuICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHsgcmF3UmVzb3VyY2VzOiByYXdSZXNvdXJjZXMsIHhocjogeGhyIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAobWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2soeyBtZXNzYWdlOiBtZXNzYWdlLCB4aHI6IHhociB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG4vLyBUT0RPOiBzb21laG93IGNvbnNvbGlkYXRlIHdpdGggZXZlbnQganNvbiBmZWVkXG5mdW5jdGlvbiBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgcmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgdmFyIGRhdGVFbnYgPSBjYWxlbmRhci5kYXRlRW52O1xuICAgIHZhciBzdGFydFBhcmFtO1xuICAgIHZhciBlbmRQYXJhbTtcbiAgICB2YXIgdGltZVpvbmVQYXJhbTtcbiAgICB2YXIgY3VzdG9tUmVxdWVzdFBhcmFtcztcbiAgICB2YXIgcGFyYW1zID0ge307XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICAgIC8vIHN0YXJ0UGFyYW0gPSBtZXRhLnN0YXJ0UGFyYW1cbiAgICAgICAgLy8gaWYgKHN0YXJ0UGFyYW0gPT0gbnVsbCkge1xuICAgICAgICBzdGFydFBhcmFtID0gY2FsZW5kYXIub3B0KCdzdGFydFBhcmFtJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gZW5kUGFyYW0gPSBtZXRhLmVuZFBhcmFtXG4gICAgICAgIC8vIGlmIChlbmRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgIGVuZFBhcmFtID0gY2FsZW5kYXIub3B0KCdlbmRQYXJhbScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHRpbWVab25lUGFyYW0gPSBtZXRhLnRpbWVab25lUGFyYW1cbiAgICAgICAgLy8gaWYgKHRpbWVab25lUGFyYW0gPT0gbnVsbCkge1xuICAgICAgICB0aW1lWm9uZVBhcmFtID0gY2FsZW5kYXIub3B0KCd0aW1lWm9uZVBhcmFtJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgcGFyYW1zW3N0YXJ0UGFyYW1dID0gZGF0ZUVudi5mb3JtYXRJc28ocmFuZ2Uuc3RhcnQpO1xuICAgICAgICBwYXJhbXNbZW5kUGFyYW1dID0gZGF0ZUVudi5mb3JtYXRJc28ocmFuZ2UuZW5kKTtcbiAgICAgICAgaWYgKGRhdGVFbnYudGltZVpvbmUgIT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgIHBhcmFtc1t0aW1lWm9uZVBhcmFtXSA9IGRhdGVFbnYudGltZVpvbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0cmlldmUgYW55IG91dGJvdW5kIEdFVC9QT1NUIGRhdGEgZnJvbSB0aGUgb3B0aW9uc1xuICAgIGlmICh0eXBlb2YgbWV0YS5leHRyYVBhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBzdXBwbGllZCBhcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGtleS92YWx1ZSBvYmplY3RcbiAgICAgICAgY3VzdG9tUmVxdWVzdFBhcmFtcyA9IG1ldGEuZXh0cmFQYXJhbXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHByb2JhYmx5IHN1cHBsaWVkIGFzIGEgc3RyYWlnaHQga2V5L3ZhbHVlIG9iamVjdFxuICAgICAgICBjdXN0b21SZXF1ZXN0UGFyYW1zID0gbWV0YS5leHRyYVBhcmFtcyB8fCB7fTtcbiAgICB9XG4gICAgX19hc3NpZ24ocGFyYW1zLCBjdXN0b21SZXF1ZXN0UGFyYW1zKTtcbiAgICByZXR1cm4gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBidWlsZFJlc291cmNlVGV4dEZ1bmMocmVzb3VyY2VUZXh0U2V0dGluZywgY2FsZW5kYXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc291cmNlVGV4dFNldHRpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlVGV4dFNldHRpbmcobmV3IFJlc291cmNlQXBpKGNhbGVuZGFyLCByZXNvdXJjZSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLnRpdGxlIHx8IGdldFB1YmxpY0lkKHJlc291cmNlLmlkKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnZhciBSZXNvdXJjZURheUhlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVzb3VyY2VEYXlIZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VEYXlIZWFkZXIoY29udGV4dCwgcGFyZW50RWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGF0ZXNBYm92ZVJlc291cmNlcyA9IF90aGlzLm9wdCgnZGF0ZXNBYm92ZVJlc291cmNlcycpO1xuICAgICAgICBfdGhpcy5yZXNvdXJjZVRleHRGdW5jID0gYnVpbGRSZXNvdXJjZVRleHRGdW5jKF90aGlzLm9wdCgncmVzb3VyY2VUZXh0JyksIF90aGlzLmNhbGVuZGFyKTtcbiAgICAgICAgcGFyZW50RWwuaW5uZXJIVE1MID0gJyc7IC8vIGJlY2F1c2UgbWlnaHQgYmUgbmJzcFxuICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChfdGhpcy5lbCA9IGh0bWxUb0VsZW1lbnQoJzxkaXYgY2xhc3M9XCJmYy1yb3cgJyArIF90aGlzLnRoZW1lLmdldENsYXNzKCdoZWFkZXJSb3cnKSArICdcIj4nICtcbiAgICAgICAgICAgICc8dGFibGUgY2xhc3M9XCInICsgX3RoaXMudGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlR3JpZCcpICsgJ1wiPicgK1xuICAgICAgICAgICAgJzx0aGVhZD48L3RoZWFkPicgK1xuICAgICAgICAgICAgJzwvdGFibGU+JyArXG4gICAgICAgICAgICAnPC9kaXY+JykpO1xuICAgICAgICBfdGhpcy50aGVhZCA9IF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3RoZWFkJyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVzb3VyY2VEYXlIZWFkZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgfTtcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBodG1sO1xuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIodGhpcy5vcHQoJ2NvbHVtbkhlYWRlckZvcm1hdCcpIHx8XG4gICAgICAgICAgICBjb21wdXRlRmFsbGJhY2tIZWFkZXJGb3JtYXQocHJvcHMuZGF0ZXNSZXBEaXN0aW5jdERheXMsIHByb3BzLmRhdGVzLmxlbmd0aCkpO1xuICAgICAgICBpZiAocHJvcHMuZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBodG1sID0gdGhpcy5yZW5kZXJSZXNvdXJjZVJvdyhwcm9wcy5yZXNvdXJjZXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZXNBYm92ZVJlc291cmNlcykge1xuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLnJlbmRlckRheUFuZFJlc291cmNlUm93cyhwcm9wcy5kYXRlcywgcHJvcHMucmVzb3VyY2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLnJlbmRlclJlc291cmNlQW5kRGF5Um93cyhwcm9wcy5yZXNvdXJjZXMsIHByb3BzLmRhdGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRoZWFkLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMucHJvY2Vzc1Jlc291cmNlRWxzKHByb3BzLnJlc291cmNlcyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyUmVzb3VyY2VSb3cgPSBmdW5jdGlvbiAocmVzb3VyY2VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjZWxsSHRtbHMgPSByZXNvdXJjZXMubWFwKGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlclJlc291cmNlQ2VsbChyZXNvdXJjZSwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFRyKGNlbGxIdG1scyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucmVuZGVyRGF5QW5kUmVzb3VyY2VSb3dzID0gZnVuY3Rpb24gKGRhdGVzLCByZXNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGRhdGVIdG1scyA9IFtdO1xuICAgICAgICB2YXIgcmVzb3VyY2VIdG1scyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGVzXzEgPSBkYXRlczsgX2kgPCBkYXRlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlc18xW19pXTtcbiAgICAgICAgICAgIGRhdGVIdG1scy5wdXNoKHRoaXMucmVuZGVyRGF0ZUNlbGwoZGF0ZSwgcmVzb3VyY2VzLmxlbmd0aCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCByZXNvdXJjZXNfMSA9IHJlc291cmNlczsgX2EgPCByZXNvdXJjZXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSByZXNvdXJjZXNfMVtfYV07XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VIdG1scy5wdXNoKHRoaXMucmVuZGVyUmVzb3VyY2VDZWxsKHJlc291cmNlLCAxLCBkYXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRUcihkYXRlSHRtbHMpICtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRUcihyZXNvdXJjZUh0bWxzKTtcbiAgICB9O1xuICAgIFJlc291cmNlRGF5SGVhZGVyLnByb3RvdHlwZS5yZW5kZXJSZXNvdXJjZUFuZERheVJvd3MgPSBmdW5jdGlvbiAocmVzb3VyY2VzLCBkYXRlcykge1xuICAgICAgICB2YXIgcmVzb3VyY2VIdG1scyA9IFtdO1xuICAgICAgICB2YXIgZGF0ZUh0bWxzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcmVzb3VyY2VzXzIgPSByZXNvdXJjZXM7IF9pIDwgcmVzb3VyY2VzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSByZXNvdXJjZXNfMltfaV07XG4gICAgICAgICAgICByZXNvdXJjZUh0bWxzLnB1c2godGhpcy5yZW5kZXJSZXNvdXJjZUNlbGwocmVzb3VyY2UsIGRhdGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBkYXRlc18yID0gZGF0ZXM7IF9hIDwgZGF0ZXNfMi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGVzXzJbX2FdO1xuICAgICAgICAgICAgICAgIGRhdGVIdG1scy5wdXNoKHRoaXMucmVuZGVyRGF0ZUNlbGwoZGF0ZSwgMSwgcmVzb3VyY2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFRyKHJlc291cmNlSHRtbHMpICtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRUcihkYXRlSHRtbHMpO1xuICAgIH07XG4gICAgLy8gQ2VsbCBSZW5kZXJpbmcgVXRpbHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gYSBjZWxsIHdpdGggdGhlIHJlc291cmNlIG5hbWUuIG1pZ2h0IGJlIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIGRheVxuICAgIFJlc291cmNlRGF5SGVhZGVyLnByb3RvdHlwZS5yZW5kZXJSZXNvdXJjZUNlbGwgPSBmdW5jdGlvbiAocmVzb3VyY2UsIGNvbHNwYW4sIGRhdGUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHJldHVybiAnPHRoIGNsYXNzPVwiZmMtcmVzb3VyY2UtY2VsbFwiJyArXG4gICAgICAgICAgICAnIGRhdGEtcmVzb3VyY2UtaWQ9XCInICsgcmVzb3VyY2UuaWQgKyAnXCInICtcbiAgICAgICAgICAgIChkYXRlID9cbiAgICAgICAgICAgICAgICAnIGRhdGEtZGF0ZT1cIicgKyBkYXRlRW52LmZvcm1hdElzbyhkYXRlLCB7IG9taXRUaW1lOiB0cnVlIH0pICsgJ1wiJyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgIChjb2xzcGFuID4gMSA/XG4gICAgICAgICAgICAgICAgJyBjb2xzcGFuPVwiJyArIGNvbHNwYW4gKyAnXCInIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgJz4nICtcbiAgICAgICAgICAgIGh0bWxFc2NhcGUodGhpcy5yZXNvdXJjZVRleHRGdW5jKHJlc291cmNlKSkgK1xuICAgICAgICAgICAgJzwvdGg+JztcbiAgICB9O1xuICAgIC8vIGEgY2VsbCB3aXRoIGRhdGUgdGV4dC4gbWlnaHQgaGF2ZSBhIHJlc291cmNlIGFzc29jaWF0ZWQgd2l0aCBpdFxuICAgIFJlc291cmNlRGF5SGVhZGVyLnByb3RvdHlwZS5yZW5kZXJEYXRlQ2VsbCA9IGZ1bmN0aW9uIChkYXRlLCBjb2xzcGFuLCByZXNvdXJjZSkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gcmVuZGVyRGF0ZUNlbGwoZGF0ZSwgcHJvcHMuZGF0ZVByb2ZpbGUsIHByb3BzLmRhdGVzUmVwRGlzdGluY3REYXlzLCBwcm9wcy5kYXRlcy5sZW5ndGggKiBwcm9wcy5yZXNvdXJjZXMubGVuZ3RoLCB0aGlzLmRhdGVGb3JtYXQsIHRoaXMuY29udGV4dCwgY29sc3BhbiwgcmVzb3VyY2UgPyAnZGF0YS1yZXNvdXJjZS1pZD1cIicgKyByZXNvdXJjZS5pZCArICdcIicgOiAnJyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUuYnVpbGRUciA9IGZ1bmN0aW9uIChjZWxsSHRtbHMpIHtcbiAgICAgICAgaWYgKCFjZWxsSHRtbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjZWxsSHRtbHMgPSBbJzx0ZD4mbmJzcDs8L3RkPiddO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJlbmRlckludHJvSHRtbCkge1xuICAgICAgICAgICAgY2VsbEh0bWxzID0gW3RoaXMucHJvcHMucmVuZGVySW50cm9IdG1sKCldLmNvbmNhdChjZWxsSHRtbHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUnRsKSB7XG4gICAgICAgICAgICBjZWxsSHRtbHMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPHRyPicgK1xuICAgICAgICAgICAgY2VsbEh0bWxzLmpvaW4oJycpICtcbiAgICAgICAgICAgICc8L3RyPic7XG4gICAgfTtcbiAgICAvLyBQb3N0LXJlbmRlcmluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBnaXZlbiBhIGNvbnRhaW5lciB3aXRoIGFscmVhZHkgcmVuZGVyZWQgcmVzb3VyY2UgY2VsbHNcbiAgICBSZXNvdXJjZURheUhlYWRlci5wcm90b3R5cGUucHJvY2Vzc1Jlc291cmNlRWxzID0gZnVuY3Rpb24gKHJlc291cmNlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgZmluZEVsZW1lbnRzKHRoaXMudGhlYWQsICcuZmMtcmVzb3VyY2UtY2VsbCcpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUsIGNvbCkge1xuICAgICAgICAgICAgY29sID0gY29sICUgcmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc1J0bCkge1xuICAgICAgICAgICAgICAgIGNvbCA9IHJlc291cmNlcy5sZW5ndGggLSAxIC0gY29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VzW2NvbF07XG4gICAgICAgICAgICB2aWV3LnB1YmxpY2x5VHJpZ2dlcigncmVzb3VyY2VSZW5kZXInLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogbmV3IFJlc291cmNlQXBpKF90aGlzLmNhbGVuZGFyLCByZXNvdXJjZSksXG4gICAgICAgICAgICAgICAgICAgIGVsOiBub2RlLFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlRGF5SGVhZGVyO1xufShDb21wb25lbnQpKTtcblxudmFyIEFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBYnN0cmFjdFJlc291cmNlRGF5VGFibGUoZGF5VGFibGUsIHJlc291cmNlcykge1xuICAgICAgICB0aGlzLmRheVRhYmxlID0gZGF5VGFibGU7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gcmVzb3VyY2VzO1xuICAgICAgICB0aGlzLnJlc291cmNlSW5kZXggPSBuZXcgUmVzb3VyY2VJbmRleChyZXNvdXJjZXMpO1xuICAgICAgICB0aGlzLnJvd0NudCA9IGRheVRhYmxlLnJvd0NudDtcbiAgICAgICAgdGhpcy5jb2xDbnQgPSBkYXlUYWJsZS5jb2xDbnQgKiByZXNvdXJjZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmNlbGxzID0gdGhpcy5idWlsZENlbGxzKCk7XG4gICAgfVxuICAgIEFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZS5wcm90b3R5cGUuYnVpbGRDZWxscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcm93Q250ID0gX2Eucm93Q250LCBkYXlUYWJsZSA9IF9hLmRheVRhYmxlLCByZXNvdXJjZXMgPSBfYS5yZXNvdXJjZXM7XG4gICAgICAgIHZhciByb3dzID0gW107XG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHJvd0NudDsgcm93KyspIHtcbiAgICAgICAgICAgIHZhciByb3dDZWxscyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgZGF0ZUNvbCA9IDA7IGRhdGVDb2wgPCBkYXlUYWJsZS5jb2xDbnQ7IGRhdGVDb2wrKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHJlc291cmNlQ29sID0gMDsgcmVzb3VyY2VDb2wgPCByZXNvdXJjZXMubGVuZ3RoOyByZXNvdXJjZUNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlc1tyZXNvdXJjZUNvbF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBodG1sQXR0cnMgPSAnZGF0YS1yZXNvdXJjZS1pZD1cIicgKyByZXNvdXJjZS5pZCArICdcIic7XG4gICAgICAgICAgICAgICAgICAgIHJvd0NlbGxzW3RoaXMuY29tcHV0ZUNvbChkYXRlQ29sLCByZXNvdXJjZUNvbCldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF5VGFibGUuY2VsbHNbcm93XVtkYXRlQ29sXS5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEF0dHJzOiBodG1sQXR0cnNcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzLnB1c2gocm93Q2VsbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dzO1xuICAgIH07XG4gICAgcmV0dXJuIEFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZTtcbn0oKSk7XG4vKlxucmVzb3VyY2VzIG92ZXIgZGF0ZXNcbiovXG52YXIgUmVzb3VyY2VEYXlUYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVzb3VyY2VEYXlUYWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXNvdXJjZURheVRhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFJlc291cmNlRGF5VGFibGUucHJvdG90eXBlLmNvbXB1dGVDb2wgPSBmdW5jdGlvbiAoZGF0ZUksIHJlc291cmNlSSkge1xuICAgICAgICByZXR1cm4gcmVzb3VyY2VJICogdGhpcy5kYXlUYWJsZS5jb2xDbnQgKyBkYXRlSTtcbiAgICB9O1xuICAgIC8qXG4gICAgYWxsIGRhdGUgcmFuZ2VzIGFyZSBpbnRhY3RcbiAgICAqL1xuICAgIFJlc291cmNlRGF5VGFibGUucHJvdG90eXBlLmNvbXB1dGVDb2xSYW5nZXMgPSBmdW5jdGlvbiAoZGF0ZVN0YXJ0SSwgZGF0ZUVuZEksIHJlc291cmNlSSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpcnN0Q29sOiB0aGlzLmNvbXB1dGVDb2woZGF0ZVN0YXJ0SSwgcmVzb3VyY2VJKSxcbiAgICAgICAgICAgICAgICBsYXN0Q29sOiB0aGlzLmNvbXB1dGVDb2woZGF0ZUVuZEksIHJlc291cmNlSSksXG4gICAgICAgICAgICAgICAgaXNTdGFydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc0VuZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc291cmNlRGF5VGFibGU7XG59KEFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZSkpO1xuLypcbmRhdGVzIG92ZXIgcmVzb3VyY2VzXG4qL1xudmFyIERheVJlc291cmNlVGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheVJlc291cmNlVGFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5UmVzb3VyY2VUYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBEYXlSZXNvdXJjZVRhYmxlLnByb3RvdHlwZS5jb21wdXRlQ29sID0gZnVuY3Rpb24gKGRhdGVJLCByZXNvdXJjZUkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGVJICogdGhpcy5yZXNvdXJjZXMubGVuZ3RoICsgcmVzb3VyY2VJO1xuICAgIH07XG4gICAgLypcbiAgICBldmVyeSBzaW5nbGUgZGF5IGlzIGJyb2tlbiB1cFxuICAgICovXG4gICAgRGF5UmVzb3VyY2VUYWJsZS5wcm90b3R5cGUuY29tcHV0ZUNvbFJhbmdlcyA9IGZ1bmN0aW9uIChkYXRlU3RhcnRJLCBkYXRlRW5kSSwgcmVzb3VyY2VJKSB7XG4gICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSBkYXRlU3RhcnRJOyBpIDw9IGRhdGVFbmRJOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2wgPSB0aGlzLmNvbXB1dGVDb2woaSwgcmVzb3VyY2VJKTtcbiAgICAgICAgICAgIHNlZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgZmlyc3RDb2w6IGNvbCxcbiAgICAgICAgICAgICAgICBsYXN0Q29sOiBjb2wsXG4gICAgICAgICAgICAgICAgaXNTdGFydDogaSA9PT0gZGF0ZVN0YXJ0SSxcbiAgICAgICAgICAgICAgICBpc0VuZDogaSA9PT0gZGF0ZUVuZElcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzO1xuICAgIH07XG4gICAgcmV0dXJuIERheVJlc291cmNlVGFibGU7XG59KEFic3RyYWN0UmVzb3VyY2VEYXlUYWJsZSkpO1xudmFyIFJlc291cmNlSW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb3VyY2VJbmRleChyZXNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGljZXNCeUlkID0ge307XG4gICAgICAgIHZhciBpZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpZCA9IHJlc291cmNlc1tpXS5pZDtcbiAgICAgICAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgIGluZGljZXNCeUlkW2lkXSA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZHMgPSBpZHM7XG4gICAgICAgIHRoaXMuaW5kaWNlc0J5SWQgPSBpbmRpY2VzQnlJZDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSByZXNvdXJjZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gUmVzb3VyY2VJbmRleDtcbn0oKSk7XG4vKlxuVE9ETzoganVzdCB1c2UgUmVzb3VyY2VIYXNoIHNvbWVob3c/IGNvdWxkIHRoZW4gdXNlIHRoZSBnZW5lcmljIFJlc291cmNlU3BsaXR0ZXJcbiovXG52YXIgVlJlc291cmNlU3BsaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZSZXNvdXJjZVNwbGl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZSZXNvdXJjZVNwbGl0dGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIFZSZXNvdXJjZVNwbGl0dGVyLnByb3RvdHlwZS5nZXRLZXlJbmZvID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZURheVRhYmxlID0gcHJvcHMucmVzb3VyY2VEYXlUYWJsZTtcbiAgICAgICAgdmFyIGhhc2ggPSBtYXBIYXNoKHJlc291cmNlRGF5VGFibGUucmVzb3VyY2VJbmRleC5pbmRpY2VzQnlJZCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvdXJjZURheVRhYmxlLnJlc291cmNlc1tpXTsgLy8gaGFzIGB1aWAgQU5EIGBidXNpbmVzc0hvdXJzYCBrZXlzIVxuICAgICAgICB9KTsgLy8gOihcbiAgICAgICAgaGFzaFsnJ10gPSB7fTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfTtcbiAgICBWUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5c0ZvckRhdGVTcGFuID0gZnVuY3Rpb24gKGRhdGVTcGFuKSB7XG4gICAgICAgIHJldHVybiBbZGF0ZVNwYW4ucmVzb3VyY2VJZCB8fCAnJ107XG4gICAgfTtcbiAgICBWUmVzb3VyY2VTcGxpdHRlci5wcm90b3R5cGUuZ2V0S2V5c0ZvckV2ZW50RGVmID0gZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgIHZhciByZXNvdXJjZUlkcyA9IGV2ZW50RGVmLnJlc291cmNlSWRzO1xuICAgICAgICBpZiAoIXJlc291cmNlSWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc291cmNlSWRzO1xuICAgIH07XG4gICAgcmV0dXJuIFZSZXNvdXJjZVNwbGl0dGVyO1xufShTcGxpdHRlcikpO1xuLy8gam9pbmVyXG52YXIgTk9fU0VHUyA9IFtdOyAvLyBmb3IgbWVtb2l6aW5nXG52YXIgVlJlc291cmNlSm9pbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZSZXNvdXJjZUpvaW5lcigpIHtcbiAgICAgICAgdGhpcy5qb2luRGF0ZVNlbGVjdGlvbiA9IG1lbW9pemUodGhpcy5qb2luU2Vncyk7XG4gICAgICAgIHRoaXMuam9pbkJ1c2luZXNzSG91cnMgPSBtZW1vaXplKHRoaXMuam9pblNlZ3MpO1xuICAgICAgICB0aGlzLmpvaW5GZ0V2ZW50cyA9IG1lbW9pemUodGhpcy5qb2luU2Vncyk7XG4gICAgICAgIHRoaXMuam9pbkJnRXZlbnRzID0gbWVtb2l6ZSh0aGlzLmpvaW5TZWdzKTtcbiAgICAgICAgdGhpcy5qb2luRXZlbnREcmFncyA9IG1lbW9pemUodGhpcy5qb2luSW50ZXJhY3Rpb25zKTtcbiAgICAgICAgdGhpcy5qb2luRXZlbnRSZXNpemVzID0gbWVtb2l6ZSh0aGlzLmpvaW5JbnRlcmFjdGlvbnMpO1xuICAgIH1cbiAgICAvKlxuICAgIHByb3BTZXRzIGFsc28gaGFzIGEgJycga2V5IGZvciB0aGluZ3Mgd2l0aCBubyByZXNvdXJjZVxuICAgICovXG4gICAgVlJlc291cmNlSm9pbmVyLnByb3RvdHlwZS5qb2luUHJvcHMgPSBmdW5jdGlvbiAocHJvcFNldHMsIHJlc291cmNlRGF5VGFibGUpIHtcbiAgICAgICAgdmFyIGRhdGVTZWxlY3Rpb25TZXRzID0gW107XG4gICAgICAgIHZhciBidXNpbmVzc0hvdXJzU2V0cyA9IFtdO1xuICAgICAgICB2YXIgZmdFdmVudFNldHMgPSBbXTtcbiAgICAgICAgdmFyIGJnRXZlbnRTZXRzID0gW107XG4gICAgICAgIHZhciBldmVudERyYWdzID0gW107XG4gICAgICAgIHZhciBldmVudFJlc2l6ZXMgPSBbXTtcbiAgICAgICAgdmFyIGV2ZW50U2VsZWN0aW9uID0gJyc7XG4gICAgICAgIHZhciBrZXlzID0gcmVzb3VyY2VEYXlUYWJsZS5yZXNvdXJjZUluZGV4Lmlkcy5jb25jYXQoWycnXSk7IC8vIGFkZCBpbiB0aGUgYWxsLXJlc291cmNlIGtleVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBwcm9wU2V0c1trZXldO1xuICAgICAgICAgICAgZGF0ZVNlbGVjdGlvblNldHMucHVzaChwcm9wcy5kYXRlU2VsZWN0aW9uU2Vncyk7XG4gICAgICAgICAgICBidXNpbmVzc0hvdXJzU2V0cy5wdXNoKGtleSA/IHByb3BzLmJ1c2luZXNzSG91clNlZ3MgOiBOT19TRUdTKTsgLy8gZG9uJ3QgaW5jbHVkZSByZWR1bmRhbnQgYWxsLXJlc291cmNlIGJ1c2luZXNzaG91cnNcbiAgICAgICAgICAgIGZnRXZlbnRTZXRzLnB1c2goa2V5ID8gcHJvcHMuZmdFdmVudFNlZ3MgOiBOT19TRUdTKTsgLy8gZG9uJ3QgaW5jbHVkZSBmZyBhbGwtcmVzb3VyY2Ugc2Vnc1xuICAgICAgICAgICAgYmdFdmVudFNldHMucHVzaChwcm9wcy5iZ0V2ZW50U2Vncyk7XG4gICAgICAgICAgICBldmVudERyYWdzLnB1c2gocHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgICAgIGV2ZW50UmVzaXplcy5wdXNoKHByb3BzLmV2ZW50UmVzaXplKTtcbiAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uID0gZXZlbnRTZWxlY3Rpb24gfHwgcHJvcHMuZXZlbnRTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25TZWdzOiB0aGlzLmpvaW5EYXRlU2VsZWN0aW9uLmFwcGx5KHRoaXMsIFtyZXNvdXJjZURheVRhYmxlXS5jb25jYXQoZGF0ZVNlbGVjdGlvblNldHMpKSxcbiAgICAgICAgICAgIGJ1c2luZXNzSG91clNlZ3M6IHRoaXMuam9pbkJ1c2luZXNzSG91cnMuYXBwbHkodGhpcywgW3Jlc291cmNlRGF5VGFibGVdLmNvbmNhdChidXNpbmVzc0hvdXJzU2V0cykpLFxuICAgICAgICAgICAgZmdFdmVudFNlZ3M6IHRoaXMuam9pbkZnRXZlbnRzLmFwcGx5KHRoaXMsIFtyZXNvdXJjZURheVRhYmxlXS5jb25jYXQoZmdFdmVudFNldHMpKSxcbiAgICAgICAgICAgIGJnRXZlbnRTZWdzOiB0aGlzLmpvaW5CZ0V2ZW50cy5hcHBseSh0aGlzLCBbcmVzb3VyY2VEYXlUYWJsZV0uY29uY2F0KGJnRXZlbnRTZXRzKSksXG4gICAgICAgICAgICBldmVudERyYWc6IHRoaXMuam9pbkV2ZW50RHJhZ3MuYXBwbHkodGhpcywgW3Jlc291cmNlRGF5VGFibGVdLmNvbmNhdChldmVudERyYWdzKSksXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogdGhpcy5qb2luRXZlbnRSZXNpemVzLmFwcGx5KHRoaXMsIFtyZXNvdXJjZURheVRhYmxlXS5jb25jYXQoZXZlbnRSZXNpemVzKSksXG4gICAgICAgICAgICBldmVudFNlbGVjdGlvbjogZXZlbnRTZWxlY3Rpb25cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFZSZXNvdXJjZUpvaW5lci5wcm90b3R5cGUuam9pblNlZ3MgPSBmdW5jdGlvbiAocmVzb3VyY2VEYXlUYWJsZSkge1xuICAgICAgICB2YXIgc2VnR3JvdXBzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBzZWdHcm91cHNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc291cmNlQ250ID0gcmVzb3VyY2VEYXlUYWJsZS5yZXNvdXJjZXMubGVuZ3RoO1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRTZWdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2VDbnQ7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IHNlZ0dyb3Vwc1tpXTsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2JbX2FdO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkU2Vncy5wdXNoLmFwcGx5KHRyYW5zZm9ybWVkU2VncywgdGhpcy50cmFuc2Zvcm1TZWcoc2VnLCByZXNvdXJjZURheVRhYmxlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gc2VnR3JvdXBzW3Jlc291cmNlQ250XTsgX2MgPCBfZC5sZW5ndGg7IF9jKyspIHsgLy8gb25lIGJleW9uZC4gdGhlIGFsbC1yZXNvdXJjZVxuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfZFtfY107XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRTZWdzLnB1c2guYXBwbHkoLy8gb25lIGJleW9uZC4gdGhlIGFsbC1yZXNvdXJjZVxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkU2VncywgdGhpcy50cmFuc2Zvcm1TZWcoc2VnLCByZXNvdXJjZURheVRhYmxlLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkU2VncztcbiAgICB9O1xuICAgIC8qXG4gICAgZm9yIGV4cGFuZGluZyBub24tcmVzb3VyY2Ugc2VncyB0byBhbGwgcmVzb3VyY2VzLlxuICAgIG9ubHkgZm9yIHB1YmxpYyB1c2UuXG4gICAgbm8gbWVtb2l6aW5nLlxuICAgICovXG4gICAgVlJlc291cmNlSm9pbmVyLnByb3RvdHlwZS5leHBhbmRTZWdzID0gZnVuY3Rpb24gKHJlc291cmNlRGF5VGFibGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIHJlc291cmNlQ250ID0gcmVzb3VyY2VEYXlUYWJsZS5yZXNvdXJjZXMubGVuZ3RoO1xuICAgICAgICB2YXIgdHJhbnNmb3JtZWRTZWdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb3VyY2VDbnQ7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzEgPSBzZWdzOyBfaSA8IHNlZ3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFNlZ3MucHVzaC5hcHBseSh0cmFuc2Zvcm1lZFNlZ3MsIHRoaXMudHJhbnNmb3JtU2VnKHNlZywgcmVzb3VyY2VEYXlUYWJsZSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFNlZ3M7XG4gICAgfTtcbiAgICBWUmVzb3VyY2VKb2luZXIucHJvdG90eXBlLmpvaW5JbnRlcmFjdGlvbnMgPSBmdW5jdGlvbiAocmVzb3VyY2VEYXlUYWJsZSkge1xuICAgICAgICB2YXIgaW50ZXJhY3Rpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpbnRlcmFjdGlvbnNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc291cmNlQ250ID0gcmVzb3VyY2VEYXlUYWJsZS5yZXNvdXJjZXMubGVuZ3RoO1xuICAgICAgICB2YXIgYWZmZWN0ZWRJbnN0YW5jZXMgPSB7fTtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkU2VncyA9IFtdO1xuICAgICAgICB2YXIgaXNFdmVudCA9IGZhbHNlO1xuICAgICAgICB2YXIgc291cmNlU2VnID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvdXJjZUNudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSBpbnRlcmFjdGlvbnNbaV07XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gaW50ZXJhY3Rpb24uc2VnczsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IF9iW19hXTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRTZWdzLnB1c2guYXBwbHkodHJhbnNmb3JtZWRTZWdzLCB0aGlzLnRyYW5zZm9ybVNlZyhzZWcsIHJlc291cmNlRGF5VGFibGUsIGkpIC8vIFRPRE86IHRlbXBsYXRlaWZ5IEludGVyYWN0aW9uOjpzZWdzXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9fYXNzaWduKGFmZmVjdGVkSW5zdGFuY2VzLCBpbnRlcmFjdGlvbi5hZmZlY3RlZEluc3RhbmNlcyk7XG4gICAgICAgICAgICAgICAgaXNFdmVudCA9IGlzRXZlbnQgfHwgaW50ZXJhY3Rpb24uaXNFdmVudDtcbiAgICAgICAgICAgICAgICBzb3VyY2VTZWcgPSBzb3VyY2VTZWcgfHwgaW50ZXJhY3Rpb24uc291cmNlU2VnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGludGVyYWN0aW9uc1tyZXNvdXJjZUNudF0pIHsgLy8gb25lIGJleW9uZC4gdGhlIGFsbC1yZXNvdXJjZVxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gMCwgX2QgPSBpbnRlcmFjdGlvbnNbcmVzb3VyY2VDbnRdLnNlZ3M7IF9jIDwgX2QubGVuZ3RoOyBfYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfZFtfY107XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkU2Vncy5wdXNoLmFwcGx5KHRyYW5zZm9ybWVkU2VncywgdGhpcy50cmFuc2Zvcm1TZWcoc2VnLCByZXNvdXJjZURheVRhYmxlLCBpKSAvLyBUT0RPOiB0ZW1wbGF0ZWlmeSBJbnRlcmFjdGlvbjo6c2Vnc1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWZmZWN0ZWRJbnN0YW5jZXM6IGFmZmVjdGVkSW5zdGFuY2VzLFxuICAgICAgICAgICAgc2VnczogdHJhbnNmb3JtZWRTZWdzLFxuICAgICAgICAgICAgaXNFdmVudDogaXNFdmVudCxcbiAgICAgICAgICAgIHNvdXJjZVNlZzogc291cmNlU2VnXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gVlJlc291cmNlSm9pbmVyO1xufSgpKTtcblxuLypcbmRvZXNuJ3QgYWNjZXB0IGdyb3VwaW5nXG4qL1xuZnVuY3Rpb24gZmxhdHRlblJlc291cmNlcyhyZXNvdXJjZVN0b3JlLCBvcmRlclNwZWNzKSB7XG4gICAgcmV0dXJuIGJ1aWxkUm93Tm9kZXMocmVzb3VyY2VTdG9yZSwgW10sIG9yZGVyU3BlY3MsIGZhbHNlLCB7fSwgdHJ1ZSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5yZXNvdXJjZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUm93Tm9kZXMocmVzb3VyY2VTdG9yZSwgZ3JvdXBTcGVjcywgb3JkZXJTcGVjcywgaXNWR3JvdXBpbmcsIGV4cGFuc2lvbnMsIGV4cGFuc2lvbkRlZmF1bHQpIHtcbiAgICB2YXIgY29tcGxleE5vZGVzID0gYnVpbGRIaWVyYXJjaHkocmVzb3VyY2VTdG9yZSwgaXNWR3JvdXBpbmcgPyAtMSA6IDEsIGdyb3VwU3BlY3MsIG9yZGVyU3BlY3MpO1xuICAgIHZhciBmbGF0Tm9kZXMgPSBbXTtcbiAgICBmbGF0dGVuTm9kZXMoY29tcGxleE5vZGVzLCBmbGF0Tm9kZXMsIGlzVkdyb3VwaW5nLCBbXSwgMCwgZXhwYW5zaW9ucywgZXhwYW5zaW9uRGVmYXVsdCk7XG4gICAgcmV0dXJuIGZsYXROb2Rlcztcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5Ob2Rlcyhjb21wbGV4Tm9kZXMsIHJlcywgaXNWR3JvdXBpbmcsIHJvd1NwYW5zLCBkZXB0aCwgZXhwYW5zaW9ucywgZXhwYW5zaW9uRGVmYXVsdCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcGxleE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb21wbGV4Tm9kZSA9IGNvbXBsZXhOb2Rlc1tpXTtcbiAgICAgICAgdmFyIGdyb3VwID0gY29tcGxleE5vZGUuZ3JvdXA7XG4gICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgaWYgKGlzVkdyb3VwaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0Um93SW5kZXggPSByZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciByb3dTcGFuSW5kZXggPSByb3dTcGFucy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZmxhdHRlbk5vZGVzKGNvbXBsZXhOb2RlLmNoaWxkcmVuLCByZXMsIGlzVkdyb3VwaW5nLCByb3dTcGFucy5jb25jYXQoMCksIGRlcHRoLCBleHBhbnNpb25zLCBleHBhbnNpb25EZWZhdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RSb3dJbmRleCA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Um93ID0gcmVzW2ZpcnN0Um93SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RSb3dTcGFucyA9IGZpcnN0Um93LnJvd1NwYW5zID0gZmlyc3RSb3cucm93U3BhbnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RSb3dTcGFuc1tyb3dTcGFuSW5kZXhdID0gcmVzLmxlbmd0aCAtIGZpcnN0Um93SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gZ3JvdXAuc3BlYy5maWVsZCArICc6JyArIGdyb3VwLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBpc0V4cGFuZGVkID0gZXhwYW5zaW9uc1tpZF0gIT0gbnVsbCA/IGV4cGFuc2lvbnNbaWRdIDogZXhwYW5zaW9uRGVmYXVsdDtcbiAgICAgICAgICAgICAgICByZXMucHVzaCh7IGlkOiBpZCwgZ3JvdXA6IGdyb3VwLCBpc0V4cGFuZGVkOiBpc0V4cGFuZGVkIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpc0V4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5Ob2Rlcyhjb21wbGV4Tm9kZS5jaGlsZHJlbiwgcmVzLCBpc1ZHcm91cGluZywgcm93U3BhbnMsIGRlcHRoICsgMSwgZXhwYW5zaW9ucywgZXhwYW5zaW9uRGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXBsZXhOb2RlLnJlc291cmNlKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBjb21wbGV4Tm9kZS5yZXNvdXJjZS5pZDtcbiAgICAgICAgICAgIHZhciBpc0V4cGFuZGVkID0gZXhwYW5zaW9uc1tpZF0gIT0gbnVsbCA/IGV4cGFuc2lvbnNbaWRdIDogZXhwYW5zaW9uRGVmYXVsdDtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgcm93U3BhbnM6IHJvd1NwYW5zLFxuICAgICAgICAgICAgICAgIGRlcHRoOiBkZXB0aCxcbiAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiBpc0V4cGFuZGVkLFxuICAgICAgICAgICAgICAgIGhhc0NoaWxkcmVuOiBCb29sZWFuKGNvbXBsZXhOb2RlLmNoaWxkcmVuLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IGNvbXBsZXhOb2RlLnJlc291cmNlLFxuICAgICAgICAgICAgICAgIHJlc291cmNlRmllbGRzOiBjb21wbGV4Tm9kZS5yZXNvdXJjZUZpZWxkc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGZsYXR0ZW5Ob2Rlcyhjb21wbGV4Tm9kZS5jaGlsZHJlbiwgcmVzLCBpc1ZHcm91cGluZywgcm93U3BhbnMsIGRlcHRoICsgMSwgZXhwYW5zaW9ucywgZXhwYW5zaW9uRGVmYXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBidWlsZEhpZXJhcmNoeShyZXNvdXJjZVN0b3JlLCBtYXhEZXB0aCwgZ3JvdXBTcGVjcywgb3JkZXJTcGVjcykge1xuICAgIHZhciByZXNvdXJjZU5vZGVzID0gYnVpbGRSZXNvdXJjZU5vZGVzKHJlc291cmNlU3RvcmUsIG9yZGVyU3BlY3MpO1xuICAgIHZhciBidWlsdE5vZGVzID0gW107XG4gICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZU5vZGVzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZU5vZGUgPSByZXNvdXJjZU5vZGVzW3Jlc291cmNlSWRdO1xuICAgICAgICBpZiAoIXJlc291cmNlTm9kZS5yZXNvdXJjZS5wYXJlbnRJZCkge1xuICAgICAgICAgICAgaW5zZXJ0UmVzb3VyY2VOb2RlKHJlc291cmNlTm9kZSwgYnVpbHROb2RlcywgZ3JvdXBTcGVjcywgMCwgbWF4RGVwdGgsIG9yZGVyU3BlY3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWlsdE5vZGVzO1xufVxuZnVuY3Rpb24gYnVpbGRSZXNvdXJjZU5vZGVzKHJlc291cmNlU3RvcmUsIG9yZGVyU3BlY3MpIHtcbiAgICB2YXIgbm9kZUhhc2ggPSB7fTtcbiAgICBmb3IgKHZhciByZXNvdXJjZUlkIGluIHJlc291cmNlU3RvcmUpIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXTtcbiAgICAgICAgbm9kZUhhc2hbcmVzb3VyY2VJZF0gPSB7XG4gICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UsXG4gICAgICAgICAgICByZXNvdXJjZUZpZWxkczogYnVpbGRSZXNvdXJjZUZpZWxkcyhyZXNvdXJjZSksXG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yICh2YXIgcmVzb3VyY2VJZCBpbiByZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlU3RvcmVbcmVzb3VyY2VJZF07XG4gICAgICAgIGlmIChyZXNvdXJjZS5wYXJlbnRJZCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBub2RlSGFzaFtyZXNvdXJjZS5wYXJlbnRJZF07XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGluc2VydFJlc291cmNlTm9kZUluU2libGluZ3Mobm9kZUhhc2hbcmVzb3VyY2VJZF0sIHBhcmVudE5vZGUuY2hpbGRyZW4sIG9yZGVyU3BlY3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlSGFzaDtcbn1cbmZ1bmN0aW9uIGluc2VydFJlc291cmNlTm9kZShyZXNvdXJjZU5vZGUsIG5vZGVzLCBncm91cFNwZWNzLCBkZXB0aCwgbWF4RGVwdGgsIG9yZGVyU3BlY3MpIHtcbiAgICBpZiAoZ3JvdXBTcGVjcy5sZW5ndGggJiYgKG1heERlcHRoID09PSAtMSB8fCBkZXB0aCA8PSBtYXhEZXB0aCkpIHtcbiAgICAgICAgdmFyIGdyb3VwTm9kZSA9IGVuc3VyZUdyb3VwTm9kZXMocmVzb3VyY2VOb2RlLCBub2RlcywgZ3JvdXBTcGVjc1swXSk7XG4gICAgICAgIGluc2VydFJlc291cmNlTm9kZShyZXNvdXJjZU5vZGUsIGdyb3VwTm9kZS5jaGlsZHJlbiwgZ3JvdXBTcGVjcy5zbGljZSgxKSwgZGVwdGggKyAxLCBtYXhEZXB0aCwgb3JkZXJTcGVjcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbnNlcnRSZXNvdXJjZU5vZGVJblNpYmxpbmdzKHJlc291cmNlTm9kZSwgbm9kZXMsIG9yZGVyU3BlY3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuc3VyZUdyb3VwTm9kZXMocmVzb3VyY2VOb2RlLCBub2RlcywgZ3JvdXBTcGVjKSB7XG4gICAgdmFyIGdyb3VwVmFsdWUgPSByZXNvdXJjZU5vZGUucmVzb3VyY2VGaWVsZHNbZ3JvdXBTcGVjLmZpZWxkXTtcbiAgICB2YXIgZ3JvdXBOb2RlO1xuICAgIHZhciBuZXdHcm91cEluZGV4O1xuICAgIC8vIGZpbmQgYW4gZXhpc3RpbmcgZ3JvdXAgdGhhdCBtYXRjaGVzLCBvciBkZXRlcm1pbmUgdGhlIHBvc2l0aW9uIGZvciBhIG5ldyBncm91cFxuICAgIGlmIChncm91cFNwZWMub3JkZXIpIHtcbiAgICAgICAgZm9yIChuZXdHcm91cEluZGV4ID0gMDsgbmV3R3JvdXBJbmRleCA8IG5vZGVzLmxlbmd0aDsgbmV3R3JvdXBJbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW25ld0dyb3VwSW5kZXhdO1xuICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXApIHtcbiAgICAgICAgICAgICAgICB2YXIgY21wID0gZmxleGlibGVDb21wYXJlKGdyb3VwVmFsdWUsIG5vZGUuZ3JvdXAudmFsdWUpICogZ3JvdXBTcGVjLm9yZGVyO1xuICAgICAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBOb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgeyAvLyB0aGUgZ3JvdXBzIGFyZSB1bm9yZGVyZWRcbiAgICAgICAgZm9yIChuZXdHcm91cEluZGV4ID0gMDsgbmV3R3JvdXBJbmRleCA8IG5vZGVzLmxlbmd0aDsgbmV3R3JvdXBJbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW25ld0dyb3VwSW5kZXhdO1xuICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXAgJiYgZ3JvdXBWYWx1ZSA9PT0gbm9kZS5ncm91cC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFncm91cE5vZGUpIHtcbiAgICAgICAgZ3JvdXBOb2RlID0ge1xuICAgICAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZ3JvdXBWYWx1ZSxcbiAgICAgICAgICAgICAgICBzcGVjOiBncm91cFNwZWNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgfTtcbiAgICAgICAgbm9kZXMuc3BsaWNlKG5ld0dyb3VwSW5kZXgsIDAsIGdyb3VwTm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBncm91cE5vZGU7XG59XG5mdW5jdGlvbiBpbnNlcnRSZXNvdXJjZU5vZGVJblNpYmxpbmdzKHJlc291cmNlTm9kZSwgc2libGluZ3MsIG9yZGVyU3BlY3MpIHtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNtcCA9IGNvbXBhcmVCeUZpZWxkU3BlY3Moc2libGluZ3NbaV0ucmVzb3VyY2VGaWVsZHMsIHJlc291cmNlTm9kZS5yZXNvdXJjZUZpZWxkcywgb3JkZXJTcGVjcyk7XG4gICAgICAgIGlmIChjbXAgPiAwKSB7IC8vIHdlbnQgMSBwYXN0LiBpbnNlcnQgYXQgaVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2libGluZ3Muc3BsaWNlKGksIDAsIHJlc291cmNlTm9kZSk7XG59XG5mdW5jdGlvbiBidWlsZFJlc291cmNlRmllbGRzKHJlc291cmNlKSB7XG4gICAgdmFyIG9iaiA9IF9fYXNzaWduKHt9LCByZXNvdXJjZS5leHRlbmRlZFByb3BzLCByZXNvdXJjZS51aSwgcmVzb3VyY2UpO1xuICAgIGRlbGV0ZSBvYmoudWk7XG4gICAgZGVsZXRlIG9iai5leHRlbmRlZFByb3BzO1xuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBpc0dyb3Vwc0VxdWFsKGdyb3VwMCwgZ3JvdXAxKSB7XG4gICAgcmV0dXJuIGdyb3VwMC5zcGVjID09PSBncm91cDEuc3BlYyAmJiBncm91cDAudmFsdWUgPT09IGdyb3VwMS52YWx1ZTtcbn1cblxudmFyIG1haW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgIHJlZHVjZXJzOiBbcmVzb3VyY2VzUmVkdWNlcnNdLFxuICAgIGV2ZW50RGVmUGFyc2VyczogW3BhcnNlRXZlbnREZWZdLFxuICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBbdHJhbnNmb3JtSXNEcmFnZ2FibGVdLFxuICAgIGV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzOiBbbWFzc2FnZUV2ZW50RHJhZ011dGF0aW9uXSxcbiAgICBldmVudERlZk11dGF0aW9uQXBwbGllcnM6IFthcHBseUV2ZW50RGVmTXV0YXRpb25dLFxuICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IFt0cmFuc2Zvcm1EYXRlU2VsZWN0aW9uSm9pbl0sXG4gICAgZGF0ZVBvaW50VHJhbnNmb3JtczogW3RyYW5zZm9ybURhdGVQb2ludF0sXG4gICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBbdHJhbnNmb3JtRGF0ZVNwYW5dLFxuICAgIHZpZXdQcm9wc1RyYW5zZm9ybWVyczogW1Jlc291cmNlRGF0YUFkZGVyLCBSZXNvdXJjZUV2ZW50Q29uZmlnQWRkZXJdLFxuICAgIGlzUHJvcHNWYWxpZDogaXNQcm9wc1ZhbGlkV2l0aFJlc291cmNlcyxcbiAgICBleHRlcm5hbERlZlRyYW5zZm9ybXM6IFt0cmFuc2Zvcm1FeHRlcm5hbERlZl0sXG4gICAgZXZlbnRSZXNpemVKb2luVHJhbnNmb3JtczogW3RyYW5zZm9ybUV2ZW50UmVzaXplSm9pbl0sXG4gICAgdmlld0NvbnRhaW5lck1vZGlmaWVyczogW2luamVjdExpY2Vuc2VXYXJuaW5nXSxcbiAgICBldmVudERyb3BUcmFuc2Zvcm1lcnM6IFt0cmFuc2Zvcm1FdmVudERyb3BdLFxuICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiBvcHRpb25DaGFuZ2VIYW5kbGVyc1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1haW47XG5leHBvcnQgeyBBYnN0cmFjdFJlc291cmNlRGF5VGFibGUsIERheVJlc291cmNlVGFibGUsIFJlc291cmNlQXBpLCBSZXNvdXJjZURheUhlYWRlciwgUmVzb3VyY2VEYXlUYWJsZSwgUmVzb3VyY2VTcGxpdHRlciwgVlJlc291cmNlSm9pbmVyLCBWUmVzb3VyY2VTcGxpdHRlciwgYnVpbGRSZXNvdXJjZUZpZWxkcywgYnVpbGRSZXNvdXJjZVRleHRGdW5jLCBidWlsZFJvd05vZGVzLCBmbGF0dGVuUmVzb3VyY2VzLCBpc0dyb3Vwc0VxdWFsIH07XG4iLCIvKiFcbkZ1bGxDYWxlbmRhciBSZXNvdXJjZSBUaW1lbGluZSBQbHVnaW4gdjQuMy4wXG5Eb2NzICYgTGljZW5zZTogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vc2NoZWR1bGVyXG4oYykgMjAxOSBBZGFtIFNoYXdcbiovXG5cbmltcG9ydCB7IHJlbW92ZUVsZW1lbnQsIENvbXBvbmVudCwgbWVtb2l6ZVJlbmRlcmluZywgY3JlYXRlRWxlbWVudCwgaHRtbFRvRWxlbWVudCwgaHRtbEVzY2FwZSwgaXNBcnJheXNFcXVhbCwgRW1pdHRlck1peGluLCBtZW1vaXplLCBwYXJzZUZpZWxkU3BlY3MsIFBvc2l0aW9uQ2FjaGUsIGFwcGx5U3R5bGVQcm9wLCBWaWV3LCBjcmVhdGVQbHVnaW4gfSBmcm9tICdAZnVsbGNhbGVuZGFyL2NvcmUnO1xuaW1wb3J0IFRpbWVsaW5lUGx1Z2luLCB7IFRpbWVsaW5lTGFuZSwgSGVhZGVyQm9keUxheW91dCwgVGltZUF4aXMsIFNjcm9sbEpvaW5lciwgU3RpY2t5U2Nyb2xsZXIgfSBmcm9tICdAZnVsbGNhbGVuZGFyL3RpbWVsaW5lJztcbmltcG9ydCBSZXNvdXJjZUNvbW1vblBsdWdpbiwgeyBpc0dyb3Vwc0VxdWFsLCBidWlsZFJlc291cmNlRmllbGRzLCBidWlsZFJlc291cmNlVGV4dEZ1bmMsIFJlc291cmNlQXBpLCBSZXNvdXJjZVNwbGl0dGVyLCBidWlsZFJvd05vZGVzIH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9yZXNvdXJjZS1jb21tb24nO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG52YXIgUm93ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSb3csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUm93KGNvbnRleHQsIHNwcmVhZHNoZWV0UGFyZW50LCBzcHJlYWRzaGVldE5leHRTaWJsaW5nLCB0aW1lQXhpc1BhcmVudCwgdGltZUF4aXNOZXh0U2libGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1NpemVEaXJ0eSA9IGZhbHNlO1xuICAgICAgICBzcHJlYWRzaGVldFBhcmVudC5pbnNlcnRCZWZvcmUoX3RoaXMuc3ByZWFkc2hlZXRUciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyksIHNwcmVhZHNoZWV0TmV4dFNpYmxpbmcpO1xuICAgICAgICB0aW1lQXhpc1BhcmVudC5pbnNlcnRCZWZvcmUoX3RoaXMudGltZUF4aXNUciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyksIHRpbWVBeGlzTmV4dFNpYmxpbmcpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJvdy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLnNwcmVhZHNoZWV0VHIpO1xuICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMudGltZUF4aXNUcik7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgUm93LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBSb3c7XG59KENvbXBvbmVudCkpO1xuXG5mdW5jdGlvbiB1cGRhdGVFeHBhbmRlckljb24oZWwsIGlzRXhwYW5kZWQpIHtcbiAgICB2YXIgY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0O1xuICAgIGlmIChpc0V4cGFuZGVkKSB7XG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2ZjLWljb24tcGx1cy1zcXVhcmUnKTtcbiAgICAgICAgY2xhc3NMaXN0LmFkZCgnZmMtaWNvbi1taW51cy1zcXVhcmUnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2ZjLWljb24tbWludXMtc3F1YXJlJyk7XG4gICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZjLWljb24tcGx1cy1zcXVhcmUnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhckV4cGFuZGVySWNvbihlbCkge1xuICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7XG4gICAgY2xhc3NMaXN0LnJlbW92ZSgnZmMtaWNvbi1taW51cy1zcXVhcmUnKTtcbiAgICBjbGFzc0xpc3QucmVtb3ZlKCdmYy1pY29uLXBsdXMtc3F1YXJlJyk7XG59XG5mdW5jdGlvbiB1cGRhdGVUclJlc291cmNlSWQodHIsIHJlc291cmNlSWQpIHtcbiAgICB0ci5zZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2UtaWQnLCByZXNvdXJjZUlkKTtcbn1cblxudmFyIEdyb3VwUm93ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhHcm91cFJvdywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBHcm91cFJvdygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yZW5kZXJDZWxscyA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyQ2VsbHMsIF90aGlzLnVucmVuZGVyQ2VsbHMpO1xuICAgICAgICBfdGhpcy5fdXBkYXRlRXhwYW5kZXJJY29uID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVFeHBhbmRlckljb24sIG51bGwsIFtfdGhpcy5fcmVuZGVyQ2VsbHNdKTtcbiAgICAgICAgX3RoaXMub25FeHBhbmRlckNsaWNrID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wcztcbiAgICAgICAgICAgIF90aGlzLmNhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX1JFU09VUkNFX0VOVElUWV9FWFBBTkRFRCcsXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzLmlkLFxuICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6ICFwcm9wcy5pc0V4cGFuZGVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBHcm91cFJvdy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckNlbGxzKHByb3BzLmdyb3VwLCBwcm9wcy5zcHJlYWRzaGVldENvbENudCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUV4cGFuZGVySWNvbihwcm9wcy5pc0V4cGFuZGVkKTtcbiAgICAgICAgdGhpcy5pc1NpemVEaXJ0eSA9IHRydWU7XG4gICAgfTtcbiAgICBHcm91cFJvdy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3JlbmRlckNlbGxzLnVucmVuZGVyKCk7IC8vIHNob3VsZCB1bnJlbmRlciBldmVyeXRoaW5nIGVsc2VcbiAgICB9O1xuICAgIEdyb3VwUm93LnByb3RvdHlwZS5yZW5kZXJDZWxscyA9IGZ1bmN0aW9uIChncm91cCwgc3ByZWFkc2hlZXRDb2xDbnQpIHtcbiAgICAgICAgdmFyIHNwcmVhZHNoZWV0Q29udGVudEVsID0gdGhpcy5yZW5kZXJTcHJlYWRzaGVldENvbnRlbnQoZ3JvdXApO1xuICAgICAgICB0aGlzLnNwcmVhZHNoZWV0VHIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgndGQnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdmYy1kaXZpZGVyJyxcbiAgICAgICAgICAgIGNvbFNwYW46IHNwcmVhZHNoZWV0Q29sQ250IC8vIHNwYW4gYWNyb3NzIGFsbCBjb2x1bW5zXG4gICAgICAgIH0sIHRoaXMuc3ByZWFkc2hlZXRIZWlnaHRFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwsIHNwcmVhZHNoZWV0Q29udGVudEVsKSkgLy8gbmVlZGVkIGJ5IHNldFRySW5uZXJIZWlnaHRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5leHBhbmRlckljb25FbCA9IHNwcmVhZHNoZWV0Q29udGVudEVsLnF1ZXJ5U2VsZWN0b3IoJy5mYy1pY29uJyk7XG4gICAgICAgIHRoaXMuZXhwYW5kZXJJY29uRWwucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25FeHBhbmRlckNsaWNrKTtcbiAgICAgICAgLy8gaW5zZXJ0IGEgc2luZ2xlIGNlbGwsIHdpdGggYSBzaW5nbGUgZW1wdHkgPGRpdj4uXG4gICAgICAgIC8vIHRoZXJlIHdpbGwgYmUgbm8gY29udGVudFxuICAgICAgICB0aGlzLnRpbWVBeGlzVHIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgndGQnLCB7IGNsYXNzTmFtZTogJ2ZjLWRpdmlkZXInIH0sIHRoaXMudGltZUF4aXNIZWlnaHRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSk7XG4gICAgfTtcbiAgICBHcm91cFJvdy5wcm90b3R5cGUudW5yZW5kZXJDZWxscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zcHJlYWRzaGVldFRyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0aGlzLnRpbWVBeGlzVHIuaW5uZXJIVE1MID0gJyc7XG4gICAgfTtcbiAgICAvKlxuICAgIFJlbmRlcnMgdGhlIGNvbnRlbnQgd3JhcHBlciBlbGVtZW50IHRoYXQgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoaXMgcm93J3MgVEQgY2VsbC5cbiAgICAqL1xuICAgIEdyb3VwUm93LnByb3RvdHlwZS5yZW5kZXJTcHJlYWRzaGVldENvbnRlbnQgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLnJlbmRlckNlbGxUZXh0KGdyb3VwKTtcbiAgICAgICAgdmFyIGNvbnRlbnRFbCA9IGh0bWxUb0VsZW1lbnQoJzxkaXYgY2xhc3M9XCJmYy1jZWxsLWNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWV4cGFuZGVyXCI+JyArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1pY29uXCI+PC9zcGFuPicgK1xuICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWNlbGwtdGV4dFwiPicgK1xuICAgICAgICAgICAgKHRleHQgPyBodG1sRXNjYXBlKHRleHQpIDogJyZuYnNwOycpICtcbiAgICAgICAgICAgICc8L3NwYW4+JyArXG4gICAgICAgICAgICAnPC9kaXY+Jyk7XG4gICAgICAgIHZhciBmaWx0ZXIgPSBncm91cC5zcGVjLnJlbmRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnRlbnRFbCA9IGZpbHRlcihjb250ZW50RWwsIGdyb3VwLnZhbHVlKSB8fCBjb250ZW50RWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRlbnRFbDtcbiAgICB9O1xuICAgIEdyb3VwUm93LnByb3RvdHlwZS5yZW5kZXJDZWxsVGV4dCA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICB2YXIgdGV4dCA9IGdyb3VwLnZhbHVlIHx8ICcnOyAvLyBtaWdodCBiZSBudWxsL3VuZGVmaW5lZCBpZiBhbiBhZC1ob2MgZ3JvdXBpbmdcbiAgICAgICAgdmFyIGZpbHRlciA9IGdyb3VwLnNwZWMudGV4dDtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRleHQgPSBmaWx0ZXIodGV4dCkgfHwgdGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuICAgIEdyb3VwUm93LnByb3RvdHlwZS5nZXRIZWlnaHRFbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5zcHJlYWRzaGVldEhlaWdodEVsLCB0aGlzLnRpbWVBeGlzSGVpZ2h0RWxdO1xuICAgIH07XG4gICAgR3JvdXBSb3cucHJvdG90eXBlLnVwZGF0ZUV4cGFuZGVySWNvbiA9IGZ1bmN0aW9uIChpc0V4cGFuZGVkKSB7XG4gICAgICAgIHVwZGF0ZUV4cGFuZGVySWNvbih0aGlzLmV4cGFuZGVySWNvbkVsLCBpc0V4cGFuZGVkKTtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cFJvdztcbn0oUm93KSk7XG5Hcm91cFJvdy5hZGRFcXVhbGl0eUZ1bmNzKHtcbiAgICBncm91cDogaXNHcm91cHNFcXVhbCAvLyBIQUNLIGZvciBSZXNvdXJjZVRpbWVsaW5lVmlldzo6cmVuZGVyUm93c1xufSk7XG5cbnZhciBTcHJlYWRzaGVldFJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ByZWFkc2hlZXRSb3csIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ByZWFkc2hlZXRSb3coY29udGV4dCwgdHIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3JlbmRlclJvdyA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyUm93LCBfdGhpcy51bnJlbmRlclJvdyk7XG4gICAgICAgIF90aGlzLl91cGRhdGVUclJlc291cmNlSWQgPSBtZW1vaXplUmVuZGVyaW5nKHVwZGF0ZVRyUmVzb3VyY2VJZCwgbnVsbCwgW190aGlzLl9yZW5kZXJSb3ddKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUV4cGFuZGVySWNvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlRXhwYW5kZXJJY29uLCBudWxsLCBbX3RoaXMuX3JlbmRlclJvd10pO1xuICAgICAgICBfdGhpcy5vbkV4cGFuZGVyQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgICAgICAgX3RoaXMuY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfUkVTT1VSQ0VfRU5USVRZX0VYUEFOREVEJyxcbiAgICAgICAgICAgICAgICBpZDogcHJvcHMuaWQsXG4gICAgICAgICAgICAgICAgaXNFeHBhbmRlZDogIXByb3BzLmlzRXhwYW5kZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy50ciA9IHRyO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNwcmVhZHNoZWV0Um93LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyUm93KHByb3BzLnJlc291cmNlLCBwcm9wcy5yb3dTcGFucywgcHJvcHMuZGVwdGgsIHByb3BzLmNvbFNwZWNzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVHJSZXNvdXJjZUlkKHRoaXMudHIsIHByb3BzLnJlc291cmNlLmlkKTsgLy8gVE9ETzogb25seSB1c2UgcHVibGljIElEP1xuICAgICAgICB0aGlzLl91cGRhdGVFeHBhbmRlckljb24ocHJvcHMuaGFzQ2hpbGRyZW4sIHByb3BzLmlzRXhwYW5kZWQpO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXRSb3cucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9yZW5kZXJSb3cudW5yZW5kZXIoKTsgLy8gc2hvdWxkIHVucmVuZGVyIGV2ZXJ5dGhpbmcgZWxzZVxuICAgIH07XG4gICAgU3ByZWFkc2hlZXRSb3cucHJvdG90eXBlLnJlbmRlclJvdyA9IGZ1bmN0aW9uIChyZXNvdXJjZSwgcm93U3BhbnMsIGRlcHRoLCBjb2xTcGVjcykge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0ciA9IF9hLnRyLCB0aGVtZSA9IF9hLnRoZW1lLCBjYWxlbmRhciA9IF9hLmNhbGVuZGFyLCB2aWV3ID0gX2EudmlldztcbiAgICAgICAgdmFyIHJlc291cmNlRmllbGRzID0gYnVpbGRSZXNvdXJjZUZpZWxkcyhyZXNvdXJjZSk7IC8vIHNsaWdodGx5IGluZWZmaWNpZW50LiBhbHJlYWR5IGRvbmUgdXAgdGhlIGNhbGwgc3RhY2tcbiAgICAgICAgdmFyIG1haW5UZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xTcGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbFNwZWMgPSBjb2xTcGVjc1tpXTtcbiAgICAgICAgICAgIHZhciByb3dTcGFuID0gcm93U3BhbnNbaV07XG4gICAgICAgICAgICBpZiAocm93U3BhbiA9PT0gMCkgeyAvLyBub3QgcmVzcG9uc2libGUgZm9yIGdyb3VwLWJhc2VkIHJvd3MuIFZSb3dHcm91cCBpc1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm93U3BhbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcm93U3BhbiA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChjb2xTcGVjLmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHJlc291cmNlRmllbGRzW2NvbFNwZWMuZmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGJ1aWxkUmVzb3VyY2VUZXh0RnVuYyhjb2xTcGVjLnRleHQsIGNhbGVuZGFyKShyZXNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29udGVudEVsID0gaHRtbFRvRWxlbWVudCgnPGRpdiBjbGFzcz1cImZjLWNlbGwtY29udGVudFwiPicgK1xuICAgICAgICAgICAgICAgIChjb2xTcGVjLmlzTWFpbiA/IHJlbmRlckljb25IdG1sKGRlcHRoKSA6ICcnKSArXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtY2VsbC10ZXh0XCI+JyArXG4gICAgICAgICAgICAgICAgKHRleHQgPyBodG1sRXNjYXBlKHRleHQpIDogJyZuYnNwOycpICtcbiAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sU3BlYy5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHsgLy8gYSBmaWx0ZXIgZnVuY3Rpb24gZm9yIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgY29udGVudEVsID0gY29sU3BlYy5yZW5kZXIobmV3IFJlc291cmNlQXBpKGNhbGVuZGFyLCByZXNvdXJjZSksIGNvbnRlbnRFbCkgfHwgY29udGVudEVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJvd1NwYW4gPiAxKSB7XG4gICAgICAgICAgICAgICAgY29udGVudEVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXN0aWNreScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRkID0gY3JlYXRlRWxlbWVudCgndGQnLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpLFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IHJvd1NwYW5cbiAgICAgICAgICAgIH0sIGNvbnRlbnRFbCk7XG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgcm93IG5lZWRzIHRvIGhhdmUgYW4gaW5uZXIgZGl2IGZvciBzZXRUcklubmVySGVpZ2h0XG4gICAgICAgICAgICBpZiAoY29sU3BlYy5pc01haW4pIHtcbiAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZCh0aGlzLmhlaWdodEVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCwgdGQuY2hpbGROb2RlcykgLy8gaW5uZXIgd3JhcFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbWFpblRkID0gdGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5leHBhbmRlckljb25FbCA9IHRyLnF1ZXJ5U2VsZWN0b3IoJy5mYy1leHBhbmRlci1zcGFjZSAuZmMtaWNvbicpO1xuICAgICAgICAvLyB3YWl0IHVudGlsIHZlcnkgZW5kXG4gICAgICAgIHZpZXcucHVibGljbHlUcmlnZ2VyKCdyZXNvdXJjZVJlbmRlcicsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogbmV3IFJlc291cmNlQXBpKGNhbGVuZGFyLCByZXNvdXJjZSksXG4gICAgICAgICAgICAgICAgZWw6IG1haW5UZCxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXRSb3cucHJvdG90eXBlLnVucmVuZGVyUm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyLmlubmVySFRNTCA9ICcnO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXRSb3cucHJvdG90eXBlLnVwZGF0ZUV4cGFuZGVySWNvbiA9IGZ1bmN0aW9uIChoYXNDaGlsZHJlbiwgaXNFeHBhbmRlZCkge1xuICAgICAgICB2YXIgZXhwYW5kZXJJY29uRWwgPSB0aGlzLmV4cGFuZGVySWNvbkVsO1xuICAgICAgICB2YXIgZXhwYW5kZXJFbCA9IGV4cGFuZGVySWNvbkVsLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGlmIChleHBhbmRlckljb25FbCAmJlxuICAgICAgICAgICAgZXhwYW5kZXJFbCAvLyB3aHkgd291bGQgdGhpcyBiZSBudWxsPz8gd2FzIHRoZSBjYXNlIGluIElFMTFcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBleHBhbmRlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkV4cGFuZGVyQ2xpY2spO1xuICAgICAgICAgICAgICAgIGV4cGFuZGVyRWwuY2xhc3NMaXN0LmFkZCgnZmMtZXhwYW5kZXInKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVFeHBhbmRlckljb24oZXhwYW5kZXJJY29uRWwsIGlzRXhwYW5kZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwYW5kZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25FeHBhbmRlckNsaWNrKTtcbiAgICAgICAgICAgICAgICBleHBhbmRlckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZjLWV4cGFuZGVyJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJFeHBhbmRlckljb24oZXhwYW5kZXJJY29uRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3ByZWFkc2hlZXRSb3c7XG59KENvbXBvbmVudCkpO1xuLypcblJlbmRlcnMgdGhlIEhUTUwgcmVzcG9uc2libGUgZm9yIHRoZSBzdWJyb3cgZXhwYW5kZXIgYXJlYSxcbmFzIHdlbGwgYXMgdGhlIHNwYWNlIGJlZm9yZSBpdCAodXNlZCB0byBhbGlnbiBleHBhbmRlcnMgb2Ygc2ltaWxhciBkZXB0aHMpXG4qL1xuZnVuY3Rpb24gcmVuZGVySWNvbkh0bWwoZGVwdGgpIHtcbiAgICB2YXIgaHRtbCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwdGg7IGkrKykge1xuICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cImZjLWljb25cIj48L3NwYW4+JztcbiAgICB9XG4gICAgaHRtbCArPVxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1leHBhbmRlci1zcGFjZVwiPicgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtaWNvblwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICc8L3NwYW4+JztcbiAgICByZXR1cm4gaHRtbDtcbn1cblxudmFyIFJlc291cmNlUm93ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZXNvdXJjZVJvdywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXNvdXJjZVJvdyhjb250ZXh0LCBhLCBiLCBjLCBkLCB0aW1lQXhpcykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0LCBhLCBiLCBjLCBkKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdXBkYXRlVHJSZXNvdXJjZUlkID0gbWVtb2l6ZVJlbmRlcmluZyh1cGRhdGVUclJlc291cmNlSWQpO1xuICAgICAgICBfdGhpcy5zcHJlYWRzaGVldFJvdyA9IG5ldyBTcHJlYWRzaGVldFJvdyhjb250ZXh0LCBfdGhpcy5zcHJlYWRzaGVldFRyKTtcbiAgICAgICAgX3RoaXMudGltZUF4aXNUci5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCd0ZCcsIHsgY2xhc3NOYW1lOiBfdGhpcy50aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpIH0sIF90aGlzLmlubmVyQ29udGFpbmVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkpO1xuICAgICAgICBfdGhpcy5sYW5lID0gbmV3IFRpbWVsaW5lTGFuZShjb250ZXh0LCBfdGhpcy5pbm5lckNvbnRhaW5lckVsLCBfdGhpcy5pbm5lckNvbnRhaW5lckVsLCB0aW1lQXhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVzb3VyY2VSb3cucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3ByZWFkc2hlZXRSb3cuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmxhbmUuZGVzdHJveSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFJlc291cmNlUm93LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgLy8gc3ByZWFkc2hlZXRSb3cgaGFuZGxlcyBjYWxsaW5nIHVwZGF0ZVRyUmVzb3VyY2VJZCBmb3Igc3ByZWFkc2hlZXRUclxuICAgICAgICB0aGlzLnNwcmVhZHNoZWV0Um93LnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICBjb2xTcGVjczogcHJvcHMuY29sU3BlY3MsXG4gICAgICAgICAgICBpZDogcHJvcHMuaWQsXG4gICAgICAgICAgICByb3dTcGFuczogcHJvcHMucm93U3BhbnMsXG4gICAgICAgICAgICBkZXB0aDogcHJvcHMuZGVwdGgsXG4gICAgICAgICAgICBpc0V4cGFuZGVkOiBwcm9wcy5pc0V4cGFuZGVkLFxuICAgICAgICAgICAgaGFzQ2hpbGRyZW46IHByb3BzLmhhc0NoaWxkcmVuLFxuICAgICAgICAgICAgcmVzb3VyY2U6IHByb3BzLnJlc291cmNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl91cGRhdGVUclJlc291cmNlSWQodGhpcy50aW1lQXhpc1RyLCBwcm9wcy5yZXNvdXJjZS5pZCk7XG4gICAgICAgIHRoaXMubGFuZS5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgbmV4dERheVRocmVzaG9sZDogcHJvcHMubmV4dERheVRocmVzaG9sZCxcbiAgICAgICAgICAgIGJ1c2luZXNzSG91cnM6IHByb3BzLmJ1c2luZXNzSG91cnMsXG4gICAgICAgICAgICBldmVudFN0b3JlOiBwcm9wcy5ldmVudFN0b3JlLFxuICAgICAgICAgICAgZXZlbnRVaUJhc2VzOiBwcm9wcy5ldmVudFVpQmFzZXMsXG4gICAgICAgICAgICBkYXRlU2VsZWN0aW9uOiBwcm9wcy5kYXRlU2VsZWN0aW9uLFxuICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IHByb3BzLmV2ZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgZXZlbnREcmFnOiBwcm9wcy5ldmVudERyYWcsXG4gICAgICAgICAgICBldmVudFJlc2l6ZTogcHJvcHMuZXZlbnRSZXNpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSB0cnVlO1xuICAgIH07XG4gICAgUmVzb3VyY2VSb3cucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGVTaXplLmNhbGwodGhpcywgaXNSZXNpemUpO1xuICAgICAgICB0aGlzLmxhbmUudXBkYXRlU2l6ZShpc1Jlc2l6ZSk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVJvdy5wcm90b3R5cGUuZ2V0SGVpZ2h0RWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuc3ByZWFkc2hlZXRSb3cuaGVpZ2h0RWwsIHRoaXMuaW5uZXJDb250YWluZXJFbF07XG4gICAgfTtcbiAgICByZXR1cm4gUmVzb3VyY2VSb3c7XG59KFJvdykpO1xuUmVzb3VyY2VSb3cuYWRkRXF1YWxpdHlGdW5jcyh7XG4gICAgcm93U3BhbnM6IGlzQXJyYXlzRXF1YWwgLy8gSEFDSyBmb3IgaXNTaXplRGlydHksIFJlc291cmNlVGltZWxpbmVWaWV3OjpyZW5kZXJSb3dzXG59KTtcblxudmFyIENPTF9NSU5fV0lEVEggPSAzMDtcbnZhciBTcHJlYWRzaGVldEhlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ByZWFkc2hlZXRIZWFkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ByZWFkc2hlZXRIZWFkZXIoY29udGV4dCwgcGFyZW50RWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucmVzaXphYmxlcyA9IFtdO1xuICAgICAgICBfdGhpcy5jb2xXaWR0aHMgPSBbXTtcbiAgICAgICAgX3RoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyTWl4aW4oKTtcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoX3RoaXMudGFibGVFbCA9IGNyZWF0ZUVsZW1lbnQoJ3RhYmxlJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBfdGhpcy50aGVtZS5nZXRDbGFzcygndGFibGVHcmlkJylcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNwcmVhZHNoZWV0SGVhZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5yZXNpemFibGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJlc2l6YWJsZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHJlc2l6YWJsZS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLnRhYmxlRWwpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0SGVhZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdmFyIHRoZW1lID0gdGhpcy50aGVtZTtcbiAgICAgICAgdmFyIGNvbFNwZWNzID0gcHJvcHMuY29sU3BlY3M7XG4gICAgICAgIHZhciBodG1sID0gJzxjb2xncm91cD4nICsgcHJvcHMuY29sVGFncyArICc8L2NvbGdyb3VwPicgK1xuICAgICAgICAgICAgJzx0Ym9keT4nO1xuICAgICAgICBpZiAocHJvcHMuc3VwZXJIZWFkZXJUZXh0KSB7XG4gICAgICAgICAgICBodG1sICs9XG4gICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImZjLXN1cGVyXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGggY2xhc3M9XCInICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldEhlYWRlcicpICsgJ1wiIGNvbHNwYW49XCInICsgY29sU3BlY3MubGVuZ3RoICsgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWNlbGwtY29udGVudFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1jZWxsLXRleHRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgaHRtbEVzY2FwZShwcm9wcy5zdXBlckhlYWRlclRleHQpICtcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAnPC90aD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvdHI+JztcbiAgICAgICAgfVxuICAgICAgICBodG1sICs9ICc8dHI+JztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xTcGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG8gPSBjb2xTcGVjc1tpXTtcbiAgICAgICAgICAgIHZhciBpc0xhc3QgPSBpID09PSAoY29sU3BlY3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBodG1sICs9XG4gICAgICAgICAgICAgICAgXCI8dGggY2xhc3M9XFxcIlwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldEhlYWRlcicpICsgXCJcXFwiPlwiICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmMtY2VsbC1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgICAgIChvLmlzTWFpbiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1leHBhbmRlci1zcGFjZVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWljb25cIj48L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLWNlbGwtdGV4dFwiPicgK1xuICAgICAgICAgICAgICAgICAgICBodG1sRXNjYXBlKG8ubGFiZWxUZXh0IHx8ICcnKSArIC8vIHdoYXQgYWJvdXQgbm9ybWFsaXppbmcgdGhpcyB2YWx1ZSBhaGVhZCBvZiB0aW1lP1xuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICghaXNMYXN0ID8gJzxkaXYgY2xhc3M9XCJmYy1jb2wtcmVzaXplclwiPjwvZGl2PicgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L3RoPic7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSAnPC90cj4nO1xuICAgICAgICBodG1sICs9ICc8L3Rib2R5Pic7XG4gICAgICAgIHRoaXMudGFibGVFbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLnRoRWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy50YWJsZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJykpO1xuICAgICAgICB0aGlzLmNvbEVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMudGFibGVFbC5xdWVyeVNlbGVjdG9yQWxsKCdjb2wnKSk7XG4gICAgICAgIHRoaXMucmVzaXplckVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMudGFibGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuZmMtY29sLXJlc2l6ZXInKSk7XG4gICAgICAgIHRoaXMuaW5pdENvbFJlc2l6aW5nKCk7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldEhlYWRlci5wcm90b3R5cGUuaW5pdENvbFJlc2l6aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgRWxlbWVudERyYWdnaW5nSW1wbCA9IHRoaXMuY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmVsZW1lbnREcmFnZ2luZ0ltcGw7XG4gICAgICAgIGlmIChFbGVtZW50RHJhZ2dpbmdJbXBsKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6YWJsZXMgPSB0aGlzLnJlc2l6ZXJFbHMubWFwKGZ1bmN0aW9uIChoYW5kbGVFbCwgY29sSW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ2dpbmcgPSBuZXcgRWxlbWVudERyYWdnaW5nSW1wbChoYW5kbGVFbCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0V2lkdGg7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFdpZHRoID0gX3RoaXMuY29sV2lkdGhzW2NvbEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGFydFdpZHRoICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRXaWR0aCA9IF90aGlzLnRoRWxzW2NvbEluZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdtb3ZlJywgZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb2xXaWR0aHNbY29sSW5kZXhdID0gTWF0aC5tYXgoc3RhcnRXaWR0aCArIHBldi5kZWx0YVggKiAoX3RoaXMuaXNSdGwgPyAtMSA6IDEpLCBDT0xfTUlOX1dJRFRIKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdjb2x3aWR0aGNoYW5nZScsIF90aGlzLmNvbFdpZHRocyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0QXV0b1Njcm9sbEVuYWJsZWQoZmFsc2UpOyAvLyBiZWNhdXNlIGdldHMgd2VpcmQgd2l0aCBhdXRvLXNjcm9sbGluZyB0aW1lIGFyZWFcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhZ2dpbmc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFNwcmVhZHNoZWV0SGVhZGVyO1xufShDb21wb25lbnQpKTtcblxudmFyIFNwcmVhZHNoZWV0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTcHJlYWRzaGVldCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTcHJlYWRzaGVldChjb250ZXh0LCBoZWFkUGFyZW50RWwsIGJvZHlQYXJlbnRFbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmVuZGVyQ2VsbHMgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckNlbGxzLCBfdGhpcy51bnJlbmRlckNlbGxzKTtcbiAgICAgICAgX3RoaXMubGF5b3V0ID0gbmV3IEhlYWRlckJvZHlMYXlvdXQoaGVhZFBhcmVudEVsLCBib2R5UGFyZW50RWwsICdjbGlwcGVkLXNjcm9sbCcpO1xuICAgICAgICB2YXIgaGVhZGVyRW5oYW5jZWRTY3JvbGxlciA9IF90aGlzLmxheW91dC5oZWFkZXJTY3JvbGxlci5lbmhhbmNlZFNjcm9sbDtcbiAgICAgICAgdmFyIGJvZHlFbmhhbmNlZFNjcm9sbGVyID0gX3RoaXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbDtcbiAgICAgICAgX3RoaXMuaGVhZGVyID0gbmV3IFNwcmVhZHNoZWV0SGVhZGVyKGNvbnRleHQsIGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIuY2FudmFzLmNvbnRlbnRFbCk7XG4gICAgICAgIF90aGlzLmhlYWRlci5lbWl0dGVyLm9uKCdjb2x3aWR0aGNoYW5nZScsIGZ1bmN0aW9uIChjb2xXaWR0aHMpIHtcbiAgICAgICAgICAgIF90aGlzLmFwcGx5Q29sV2lkdGhzKGNvbFdpZHRocyk7XG4gICAgICAgIH0pO1xuICAgICAgICBib2R5RW5oYW5jZWRTY3JvbGxlci5jYW52YXMuY29udGVudEVsXG4gICAgICAgICAgICAuYXBwZW5kQ2hpbGQoX3RoaXMuYm9keUNvbnRhaW5lckVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy1yb3dzJyB9LCAnPHRhYmxlPicgK1xuICAgICAgICAgICAgJzxjb2xncm91cCAvPicgK1xuICAgICAgICAgICAgJzx0Ym9keSAvPicgK1xuICAgICAgICAgICAgJzwvdGFibGU+JykpO1xuICAgICAgICBfdGhpcy5ib2R5Q29sR3JvdXAgPSBfdGhpcy5ib2R5Q29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignY29sZ3JvdXAnKTtcbiAgICAgICAgX3RoaXMuYm9keVRib2R5ID0gX3RoaXMuYm9keUNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5Jyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ByZWFkc2hlZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5sYXlvdXQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJDZWxscy51bnJlbmRlcigpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2VsbHMocHJvcHMuc3VwZXJIZWFkZXJUZXh0LCBwcm9wcy5jb2xTcGVjcyk7XG4gICAgfTtcbiAgICBTcHJlYWRzaGVldC5wcm90b3R5cGUucmVuZGVyQ2VsbHMgPSBmdW5jdGlvbiAoc3VwZXJIZWFkZXJUZXh0LCBjb2xTcGVjcykge1xuICAgICAgICB2YXIgY29sVGFncyA9IHRoaXMucmVuZGVyQ29sVGFncyhjb2xTcGVjcyk7XG4gICAgICAgIHRoaXMuaGVhZGVyLnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICBzdXBlckhlYWRlclRleHQ6IHN1cGVySGVhZGVyVGV4dCxcbiAgICAgICAgICAgIGNvbFNwZWNzOiBjb2xTcGVjcyxcbiAgICAgICAgICAgIGNvbFRhZ3M6IGNvbFRhZ3NcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYm9keUNvbEdyb3VwLmlubmVySFRNTCA9IGNvbFRhZ3M7XG4gICAgICAgIHRoaXMuYm9keUNvbEVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuYm9keUNvbEdyb3VwLnF1ZXJ5U2VsZWN0b3JBbGwoJ2NvbCcpKTtcbiAgICAgICAgdGhpcy5hcHBseUNvbFdpZHRocyhjb2xTcGVjcy5tYXAoZnVuY3Rpb24gKGNvbFNwZWMpIHsgcmV0dXJuIGNvbFNwZWMud2lkdGg7IH0pKTtcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS51bnJlbmRlckNlbGxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJvZHlDb2xHcm91cC5pbm5lckhUTUwgPSAnJztcbiAgICB9O1xuICAgIFNwcmVhZHNoZWV0LnByb3RvdHlwZS5yZW5kZXJDb2xUYWdzID0gZnVuY3Rpb24gKGNvbFNwZWNzKSB7XG4gICAgICAgIHZhciBodG1sID0gJyc7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29sU3BlY3NfMSA9IGNvbFNwZWNzOyBfaSA8IGNvbFNwZWNzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IGNvbFNwZWNzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKG8uaXNNYWluKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPGNvbCBjbGFzcz1cImZjLW1haW4tY29sXCIvPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8Y29sLz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXQucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUsIHRvdGFsSGVpZ2h0LCBpc0F1dG8pIHtcbiAgICAgICAgdGhpcy5sYXlvdXQuc2V0SGVpZ2h0KHRvdGFsSGVpZ2h0LCBpc0F1dG8pO1xuICAgIH07XG4gICAgU3ByZWFkc2hlZXQucHJvdG90eXBlLmFwcGx5Q29sV2lkdGhzID0gZnVuY3Rpb24gKGNvbFdpZHRocykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBjb2xXaWR0aHMuZm9yRWFjaChmdW5jdGlvbiAoY29sV2lkdGgsIGNvbEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgaGVhZEVsID0gX3RoaXMuaGVhZGVyLmNvbEVsc1tjb2xJbmRleF07IC8vIGJhZCB0byBhY2Nlc3MgY2hpbGRcbiAgICAgICAgICAgIHZhciBib2R5RWwgPSBfdGhpcy5ib2R5Q29sRWxzW2NvbEluZGV4XTtcbiAgICAgICAgICAgIHZhciBzdHlsZVZhbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sV2lkdGggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVWYWwgPSBjb2xXaWR0aCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgY29sV2lkdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0eWxlVmFsID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFkRWwuc3R5bGUud2lkdGggPSBib2R5RWwuc3R5bGUud2lkdGggPSBzdHlsZVZhbDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ByZWFkc2hlZXQ7XG59KENvbXBvbmVudCkpO1xuXG52YXIgTUlOX1JFU09VUkNFX0FSRUFfV0lEVEggPSAzMDsgLy8gZGVmaW5pdGVseSBiaWdnZXIgdGhhbiBzY3JvbGxiYXJzXG52YXIgUmVzb3VyY2VUaW1lbGluZVZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlc291cmNlVGltZWxpbmVWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlc291cmNlVGltZWxpbmVWaWV3KGNvbnRleHQsIHZpZXdTcGVjLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgcGFyZW50RWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCwgdmlld1NwZWMsIGRhdGVQcm9maWxlR2VuZXJhdG9yLCBwYXJlbnRFbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdGlja3lTY3JvbGxEaXJ0eSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5yb3dOb2RlcyA9IFtdO1xuICAgICAgICBfdGhpcy5yb3dDb21wb25lbnRzID0gW107XG4gICAgICAgIF90aGlzLnJvd0NvbXBvbmVudHNCeUlkID0ge307XG4gICAgICAgIF90aGlzLnJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmdzID0gW107XG4gICAgICAgIF90aGlzLnNwbGl0dGVyID0gbmV3IFJlc291cmNlU3BsaXR0ZXIoKTsgLy8gZG9lc24ndCBsZXQgaXQgZG8gYnVzaW5lc3NIb3VycyB0aG9cbiAgICAgICAgX3RoaXMuaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzID0gbWVtb2l6ZShoYXNSZXNvdXJjZUJ1c2luZXNzSG91cnMpO1xuICAgICAgICBfdGhpcy5idWlsZFJvd05vZGVzID0gbWVtb2l6ZShidWlsZFJvd05vZGVzKTtcbiAgICAgICAgX3RoaXMuaGFzTmVzdGluZyA9IG1lbW9pemUoaGFzTmVzdGluZyk7XG4gICAgICAgIF90aGlzLl91cGRhdGVIYXNOZXN0aW5nID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVIYXNOZXN0aW5nKTtcbiAgICAgICAgdmFyIGFsbENvbFNwZWNzID0gX3RoaXMub3B0KCdyZXNvdXJjZUNvbHVtbnMnKSB8fCBbXTtcbiAgICAgICAgdmFyIGxhYmVsVGV4dCA9IF90aGlzLm9wdCgncmVzb3VyY2VMYWJlbFRleHQnKTsgLy8gVE9ETzogdmlldy5vdmVycmlkZVxuICAgICAgICB2YXIgZGVmYXVsdExhYmVsVGV4dCA9ICdSZXNvdXJjZXMnOyAvLyBUT0RPOiB2aWV3LmRlZmF1bHRzXG4gICAgICAgIHZhciBzdXBlckhlYWRlclRleHQgPSBudWxsO1xuICAgICAgICBpZiAoIWFsbENvbFNwZWNzLmxlbmd0aCkge1xuICAgICAgICAgICAgYWxsQ29sU3BlY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0OiBsYWJlbFRleHQgfHwgZGVmYXVsdExhYmVsVGV4dCxcbiAgICAgICAgICAgICAgICB0ZXh0OiBidWlsZFJlc291cmNlVGV4dEZ1bmMoX3RoaXMub3B0KCdyZXNvdXJjZVRleHQnKSwgX3RoaXMuY2FsZW5kYXIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVySGVhZGVyVGV4dCA9IGxhYmVsVGV4dDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGxhaW5Db2xTcGVjcyA9IFtdO1xuICAgICAgICB2YXIgZ3JvdXBDb2xTcGVjcyA9IFtdO1xuICAgICAgICB2YXIgZ3JvdXBTcGVjcyA9IFtdO1xuICAgICAgICB2YXIgaXNWR3JvdXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzSEdyb3VwaW5nID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYWxsQ29sU3BlY3NfMSA9IGFsbENvbFNwZWNzOyBfaSA8IGFsbENvbFNwZWNzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29sU3BlYyA9IGFsbENvbFNwZWNzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKGNvbFNwZWMuZ3JvdXApIHtcbiAgICAgICAgICAgICAgICBncm91cENvbFNwZWNzLnB1c2goY29sU3BlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGFpbkNvbFNwZWNzLnB1c2goY29sU3BlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGxhaW5Db2xTcGVjc1swXS5pc01haW4gPSB0cnVlO1xuICAgICAgICBpZiAoZ3JvdXBDb2xTcGVjcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdyb3VwU3BlY3MgPSBncm91cENvbFNwZWNzO1xuICAgICAgICAgICAgaXNWR3JvdXBpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhHcm91cEZpZWxkID0gX3RoaXMub3B0KCdyZXNvdXJjZUdyb3VwRmllbGQnKTtcbiAgICAgICAgICAgIGlmIChoR3JvdXBGaWVsZCkge1xuICAgICAgICAgICAgICAgIGlzSEdyb3VwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBncm91cFNwZWNzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogaEdyb3VwRmllbGQsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IF90aGlzLm9wdCgncmVzb3VyY2VHcm91cFRleHQnKSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBfdGhpcy5vcHQoJ3Jlc291cmNlR3JvdXBSZW5kZXInKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBhbGxPcmRlclNwZWNzID0gcGFyc2VGaWVsZFNwZWNzKF90aGlzLm9wdCgncmVzb3VyY2VPcmRlcicpKTtcbiAgICAgICAgdmFyIHBsYWluT3JkZXJTcGVjcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGFsbE9yZGVyU3BlY3NfMSA9IGFsbE9yZGVyU3BlY3M7IF9hIDwgYWxsT3JkZXJTcGVjc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIG9yZGVyU3BlYyA9IGFsbE9yZGVyU3BlY3NfMVtfYV07XG4gICAgICAgICAgICB2YXIgaXNHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBncm91cFNwZWNzXzEgPSBncm91cFNwZWNzOyBfYiA8IGdyb3VwU3BlY3NfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBTcGVjID0gZ3JvdXBTcGVjc18xW19iXTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBTcGVjLmZpZWxkID09PSBvcmRlclNwZWMuZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBTcGVjLm9yZGVyID0gb3JkZXJTcGVjLm9yZGVyOyAvLyAtMSwgMCwgMVxuICAgICAgICAgICAgICAgICAgICBpc0dyb3VwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgcGxhaW5PcmRlclNwZWNzLnB1c2gob3JkZXJTcGVjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5zdXBlckhlYWRlclRleHQgPSBzdXBlckhlYWRlclRleHQ7XG4gICAgICAgIF90aGlzLmlzVkdyb3VwaW5nID0gaXNWR3JvdXBpbmc7XG4gICAgICAgIF90aGlzLmlzSEdyb3VwaW5nID0gaXNIR3JvdXBpbmc7XG4gICAgICAgIF90aGlzLmdyb3VwU3BlY3MgPSBncm91cFNwZWNzO1xuICAgICAgICBfdGhpcy5jb2xTcGVjcyA9IGdyb3VwQ29sU3BlY3MuY29uY2F0KHBsYWluQ29sU3BlY3MpO1xuICAgICAgICBfdGhpcy5vcmRlclNwZWNzID0gcGxhaW5PcmRlclNwZWNzO1xuICAgICAgICAvLyBTVEFSVCBSRU5ERVJJTkcuLi5cbiAgICAgICAgX3RoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZmMtdGltZWxpbmUnKTtcbiAgICAgICAgaWYgKF90aGlzLm9wdCgnZXZlbnRPdmVybGFwJykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdmYy1uby1vdmVybGFwJyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZWwuaW5uZXJIVE1MID0gX3RoaXMucmVuZGVyU2tlbGV0b25IdG1sKCk7XG4gICAgICAgIF90aGlzLnJlc291cmNlQXJlYUhlYWRFbCA9IF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3RoZWFkIC5mYy1yZXNvdXJjZS1hcmVhJyk7XG4gICAgICAgIF90aGlzLnNldFJlc291cmNlQXJlYVdpZHRoKF90aGlzLm9wdCgncmVzb3VyY2VBcmVhV2lkdGgnKSk7XG4gICAgICAgIF90aGlzLmluaXRSZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5nKCk7XG4gICAgICAgIF90aGlzLm1pc2NIZWlnaHQgPSBfdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIF90aGlzLnNwcmVhZHNoZWV0ID0gbmV3IFNwcmVhZHNoZWV0KF90aGlzLmNvbnRleHQsIF90aGlzLnJlc291cmNlQXJlYUhlYWRFbCwgX3RoaXMuZWwucXVlcnlTZWxlY3RvcigndGJvZHkgLmZjLXJlc291cmNlLWFyZWEnKSk7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzID0gbmV3IFRpbWVBeGlzKF90aGlzLmNvbnRleHQsIF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3RoZWFkIC5mYy10aW1lLWFyZWEnKSwgX3RoaXMuZWwucXVlcnlTZWxlY3RvcigndGJvZHkgLmZjLXRpbWUtYXJlYScpKTtcbiAgICAgICAgdmFyIHRpbWVBeGlzUm93Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy1yb3dzJyB9LCAnPHRhYmxlPjx0Ym9keSAvPjwvdGFibGU+Jyk7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLmNvbnRlbnRFbC5hcHBlbmRDaGlsZCh0aW1lQXhpc1Jvd0NvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzVGJvZHkgPSB0aW1lQXhpc1Jvd0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCd0Ym9keScpO1xuICAgICAgICBfdGhpcy5sYW5lID0gbmV3IFRpbWVsaW5lTGFuZShfdGhpcy5jb250ZXh0LCBudWxsLCBfdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5iZ0VsLCBfdGhpcy50aW1lQXhpcyk7XG4gICAgICAgIF90aGlzLmJvZHlTY3JvbGxKb2luZXIgPSBuZXcgU2Nyb2xsSm9pbmVyKCd2ZXJ0aWNhbCcsIFtcbiAgICAgICAgICAgIF90aGlzLnNwcmVhZHNoZWV0LmxheW91dC5ib2R5U2Nyb2xsZXIsXG4gICAgICAgICAgICBfdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyXG4gICAgICAgIF0pO1xuICAgICAgICAvLyBhZnRlciBzY3JvbGxqb2luZXJcbiAgICAgICAgX3RoaXMuc3ByZWFkc2hlZXRCb2R5U3RpY2t5U2Nyb2xsZXIgPSBuZXcgU3RpY2t5U2Nyb2xsZXIoX3RoaXMuc3ByZWFkc2hlZXQubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbCwgX3RoaXMuaXNSdGwsIHRydWUgLy8gaXNWZXJ0aWNhbFxuICAgICAgICApO1xuICAgICAgICBfdGhpcy5zcHJlYWRzaGVldC5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgc3VwZXJIZWFkZXJUZXh0OiBfdGhpcy5zdXBlckhlYWRlclRleHQsXG4gICAgICAgICAgICBjb2xTcGVjczogX3RoaXMuY29sU3BlY3NcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENvbXBvbmVudC4uLlxuICAgICAgICBjb250ZXh0LmNhbGVuZGFyLnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMsIHtcbiAgICAgICAgICAgIGVsOiBfdGhpcy50aW1lQXhpcy5zbGF0cy5lbFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUucmVuZGVyU2tlbGV0b25IdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhlbWUgPSB0aGlzLnRoZW1lO1xuICAgICAgICByZXR1cm4gXCI8dGFibGUgY2xhc3M9XFxcIlwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlR3JpZCcpICsgXCJcXFwiPiA8dGhlYWQgY2xhc3M9XFxcImZjLWhlYWRcXFwiPiA8dHI+IDx0ZCBjbGFzcz1cXFwiZmMtcmVzb3VyY2UtYXJlYSBcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKSArIFwiXFxcIj48L3RkPiA8dGQgY2xhc3M9XFxcImZjLWRpdmlkZXIgZmMtY29sLXJlc2l6ZXIgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyBcIlxcXCI+PC90ZD4gPHRkIGNsYXNzPVxcXCJmYy10aW1lLWFyZWEgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyBcIlxcXCI+PC90ZD4gPC90cj4gPC90aGVhZD4gPHRib2R5IGNsYXNzPVxcXCJmYy1ib2R5XFxcIj4gPHRyPiA8dGQgY2xhc3M9XFxcImZjLXJlc291cmNlLWFyZWEgXCIgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpICsgXCJcXFwiPjwvdGQ+IDx0ZCBjbGFzcz1cXFwiZmMtZGl2aWRlciBmYy1jb2wtcmVzaXplciBcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKSArIFwiXFxcIj48L3RkPiA8dGQgY2xhc3M9XFxcImZjLXRpbWUtYXJlYSBcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRDb250ZW50JykgKyBcIlxcXCI+PC90ZD4gPC90cj4gPC90Ym9keT4gPC90YWJsZT5cIjtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG4gICAgICAgIHZhciBzcGxpdFByb3BzID0gdGhpcy5zcGxpdHRlci5zcGxpdFByb3BzKHByb3BzKTtcbiAgICAgICAgdmFyIGhhc1Jlc291cmNlQnVzaW5lc3NIb3VycyA9IHRoaXMuaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzKHByb3BzLnJlc291cmNlU3RvcmUpO1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGZvciBhbGwtcmVzb3VyY2UgYmcgZXZlbnRzIC8gc2VsZWN0aW9ucyAvIGJ1c2luZXNzLWhvdXJzXG4gICAgICAgIHRoaXMubGFuZS5yZWNlaXZlUHJvcHMoX19hc3NpZ24oe30sIHNwbGl0UHJvcHNbJyddLCB7IGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZDogdGhpcy5uZXh0RGF5VGhyZXNob2xkLCBidXNpbmVzc0hvdXJzOiBoYXNSZXNvdXJjZUJ1c2luZXNzSG91cnMgPyBudWxsIDogcHJvcHMuYnVzaW5lc3NIb3VycyB9KSk7XG4gICAgICAgIHZhciBuZXdSb3dOb2RlcyA9IHRoaXMuYnVpbGRSb3dOb2Rlcyhwcm9wcy5yZXNvdXJjZVN0b3JlLCB0aGlzLmdyb3VwU3BlY3MsIHRoaXMub3JkZXJTcGVjcywgdGhpcy5pc1ZHcm91cGluZywgcHJvcHMucmVzb3VyY2VFbnRpdHlFeHBhbnNpb25zLCB0aGlzLm9wdCgncmVzb3VyY2VzSW5pdGlhbGx5RXhwYW5kZWQnKSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUhhc05lc3RpbmcodGhpcy5oYXNOZXN0aW5nKG5ld1Jvd05vZGVzKSk7XG4gICAgICAgIHRoaXMuZGlmZlJvd3MobmV3Um93Tm9kZXMpO1xuICAgICAgICB0aGlzLnJlbmRlclJvd3MocHJvcHMuZGF0ZVByb2ZpbGUsIGhhc1Jlc291cmNlQnVzaW5lc3NIb3VycyA/IHByb3BzLmJ1c2luZXNzSG91cnMgOiBudWxsLCAvLyBDT05GVVNJTkcsIGNvbW1lbnRcbiAgICAgICAgc3BsaXRQcm9wcyk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUudXBkYXRlSGFzTmVzdGluZyA9IGZ1bmN0aW9uIChpc05lc3RpbmcpIHtcbiAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHRoaXMuZWwuY2xhc3NMaXN0O1xuICAgICAgICBpZiAoaXNOZXN0aW5nKSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdmYy1mbGF0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdmYy1mbGF0Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5kaWZmUm93cyA9IGZ1bmN0aW9uIChuZXdOb2Rlcykge1xuICAgICAgICB2YXIgb2xkTm9kZXMgPSB0aGlzLnJvd05vZGVzO1xuICAgICAgICB2YXIgb2xkTGVuID0gb2xkTm9kZXMubGVuZ3RoO1xuICAgICAgICB2YXIgb2xkSW5kZXhIYXNoID0ge307IC8vIGlkIC0+IGluZGV4XG4gICAgICAgIHZhciBvbGRJID0gMDtcbiAgICAgICAgdmFyIG5ld0kgPSAwO1xuICAgICAgICBmb3IgKG9sZEkgPSAwOyBvbGRJIDwgb2xkTGVuOyBvbGRJKyspIHtcbiAgICAgICAgICAgIG9sZEluZGV4SGFzaFtvbGROb2Rlc1tvbGRJXS5pZF0gPSBvbGRJO1xuICAgICAgICB9XG4gICAgICAgIC8vIGl0ZXJhdGUgbmV3IG5vZGVzXG4gICAgICAgIGZvciAob2xkSSA9IDAsIG5ld0kgPSAwOyBuZXdJIDwgbmV3Tm9kZXMubGVuZ3RoOyBuZXdJKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdOb2RlID0gbmV3Tm9kZXNbbmV3SV07XG4gICAgICAgICAgICB2YXIgb2xkSUZvdW5kID0gb2xkSW5kZXhIYXNoW25ld05vZGUuaWRdO1xuICAgICAgICAgICAgaWYgKG9sZElGb3VuZCAhPSBudWxsICYmIG9sZElGb3VuZCA+PSBvbGRJKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVSb3dzKG5ld0ksIG9sZElGb3VuZCAtIG9sZEksIG9sZE5vZGVzKTsgLy8gd29uJ3QgZG8gYW55dGhpbmcgaWYgc2FtZSBpbmRleFxuICAgICAgICAgICAgICAgIG9sZEkgPSBvbGRJRm91bmQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSb3cobmV3SSwgbmV3Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2xkIHJvd3MgdGhhdCB3ZXJlbid0IGZvdW5kIG5lZWQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICB0aGlzLnJlbW92ZVJvd3MobmV3SSwgb2xkTGVuIC0gb2xkSSwgb2xkTm9kZXMpOyAvLyB3b24ndCBkbyBhbnl0aGluZyBpZiBzYW1lIGluZGV4XG4gICAgICAgIHRoaXMucm93Tm9kZXMgPSBuZXdOb2RlcztcbiAgICB9O1xuICAgIC8qXG4gICAgcm93Q29tcG9uZW50cyBpcyB0aGUgaW4tcHJvZ3Jlc3MgcmVzdWx0XG4gICAgKi9cbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuYWRkUm93ID0gZnVuY3Rpb24gKGluZGV4LCByb3dOb2RlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJvd0NvbXBvbmVudHMgPSBfYS5yb3dDb21wb25lbnRzLCByb3dDb21wb25lbnRzQnlJZCA9IF9hLnJvd0NvbXBvbmVudHNCeUlkO1xuICAgICAgICB2YXIgbmV4dENvbXBvbmVudCA9IHJvd0NvbXBvbmVudHNbaW5kZXhdO1xuICAgICAgICB2YXIgbmV3Q29tcG9uZW50ID0gdGhpcy5idWlsZENoaWxkQ29tcG9uZW50KHJvd05vZGUsIHRoaXMuc3ByZWFkc2hlZXQuYm9keVRib2R5LCBuZXh0Q29tcG9uZW50ID8gbmV4dENvbXBvbmVudC5zcHJlYWRzaGVldFRyIDogbnVsbCwgdGhpcy50aW1lQXhpc1Rib2R5LCBuZXh0Q29tcG9uZW50ID8gbmV4dENvbXBvbmVudC50aW1lQXhpc1RyIDogbnVsbCk7XG4gICAgICAgIHJvd0NvbXBvbmVudHMuc3BsaWNlKGluZGV4LCAwLCBuZXdDb21wb25lbnQpO1xuICAgICAgICByb3dDb21wb25lbnRzQnlJZFtyb3dOb2RlLmlkXSA9IG5ld0NvbXBvbmVudDtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW1vdmVSb3dzID0gZnVuY3Rpb24gKHN0YXJ0SW5kZXgsIGxlbiwgb2xkUm93Tm9kZXMpIHtcbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcm93Q29tcG9uZW50cyA9IF9hLnJvd0NvbXBvbmVudHMsIHJvd0NvbXBvbmVudHNCeUlkID0gX2Eucm93Q29tcG9uZW50c0J5SWQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvd0NvbXBvbmVudCA9IHJvd0NvbXBvbmVudHNbc3RhcnRJbmRleCArIGldO1xuICAgICAgICAgICAgICAgIHJvd0NvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJvd0NvbXBvbmVudHNCeUlkW29sZFJvd05vZGVzW2ldLmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvd0NvbXBvbmVudHMuc3BsaWNlKHN0YXJ0SW5kZXgsIGxlbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5idWlsZENoaWxkQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5vZGUsIHNwcmVhZHNoZWV0VGJvZHksIHNwcmVhZHNoZWV0TmV4dCwgdGltZUF4aXNUYm9keSwgdGltZUF4aXNOZXh0KSB7XG4gICAgICAgIGlmIChub2RlLmdyb3VwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyb3VwUm93KHRoaXMuY29udGV4dCwgc3ByZWFkc2hlZXRUYm9keSwgc3ByZWFkc2hlZXROZXh0LCB0aW1lQXhpc1Rib2R5LCB0aW1lQXhpc05leHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUucmVzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2VSb3codGhpcy5jb250ZXh0LCBzcHJlYWRzaGVldFRib2R5LCBzcHJlYWRzaGVldE5leHQsIHRpbWVBeGlzVGJvZHksIHRpbWVBeGlzTmV4dCwgdGhpcy50aW1lQXhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXJSb3dzID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlLCBmYWxsYmFja0J1c2luZXNzSG91cnMsIHNwbGl0UHJvcHMpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgcm93Tm9kZXMgPSBfYS5yb3dOb2Rlcywgcm93Q29tcG9uZW50cyA9IF9hLnJvd0NvbXBvbmVudHM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByb3dOb2RlID0gcm93Tm9kZXNbaV07XG4gICAgICAgICAgICB2YXIgcm93Q29tcG9uZW50ID0gcm93Q29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChyb3dOb2RlLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgcm93Q29tcG9uZW50LnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgIHNwcmVhZHNoZWV0Q29sQ250OiB0aGlzLmNvbFNwZWNzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJvd05vZGUuaWQsXG4gICAgICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQ6IHJvd05vZGUuaXNFeHBhbmRlZCxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHJvd05vZGUuZ3JvdXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHJvd05vZGUucmVzb3VyY2U7XG4gICAgICAgICAgICAgICAgcm93Q29tcG9uZW50LnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7fSwgc3BsaXRQcm9wc1tyZXNvdXJjZS5pZF0sIHsgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkOiB0aGlzLm5leHREYXlUaHJlc2hvbGQsIGJ1c2luZXNzSG91cnM6IHJlc291cmNlLmJ1c2luZXNzSG91cnMgfHwgZmFsbGJhY2tCdXNpbmVzc0hvdXJzLCBjb2xTcGVjczogdGhpcy5jb2xTcGVjcywgaWQ6IHJvd05vZGUuaWQsIHJvd1NwYW5zOiByb3dOb2RlLnJvd1NwYW5zLCBkZXB0aDogcm93Tm9kZS5kZXB0aCwgaXNFeHBhbmRlZDogcm93Tm9kZS5pc0V4cGFuZGVkLCBoYXNDaGlsZHJlbjogcm93Tm9kZS5oYXNDaGlsZHJlbiwgcmVzb3VyY2U6IHJvd05vZGUucmVzb3VyY2UgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSwgdmlld0hlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIC8vIEZZSTogdGhpcyBvcmRlcmluZyBpcyByZWFsbHkgaW1wb3J0YW50XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIHZhciBpc0Jhc2VTaXppbmcgPSBpc1Jlc2l6ZSB8fCBjYWxlbmRhci5pc1ZpZXdVcGRhdGVkIHx8IGNhbGVuZGFyLmlzRGF0ZXNVcGRhdGVkIHx8IGNhbGVuZGFyLmlzRXZlbnRzVXBkYXRlZDtcbiAgICAgICAgaWYgKGlzQmFzZVNpemluZykge1xuICAgICAgICAgICAgdGhpcy5zeW5jSGVhZEhlaWdodHMoKTtcbiAgICAgICAgICAgIHRoaXMudGltZUF4aXMudXBkYXRlU2l6ZShpc1Jlc2l6ZSwgdmlld0hlaWdodCAtIHRoaXMubWlzY0hlaWdodCwgaXNBdXRvKTtcbiAgICAgICAgICAgIHRoaXMuc3ByZWFkc2hlZXQudXBkYXRlU2l6ZShpc1Jlc2l6ZSwgdmlld0hlaWdodCAtIHRoaXMubWlzY0hlaWdodCwgaXNBdXRvKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcm93U2l6aW5nQ250ID0gdGhpcy51cGRhdGVSb3dTaXplcyhpc1Jlc2l6ZSk7XG4gICAgICAgIHRoaXMubGFuZS51cGRhdGVTaXplKGlzUmVzaXplKTsgLy8gaXMgZWZmaWNpZW50LiB1c2VzIGZsYWdzXG4gICAgICAgIGlmIChpc0Jhc2VTaXppbmcgfHwgcm93U2l6aW5nQ250KSB7XG4gICAgICAgICAgICB0aGlzLmJvZHlTY3JvbGxKb2luZXIudXBkYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVBeGlzLmxheW91dC5zY3JvbGxKb2luZXIudXBkYXRlKCk7IC8vIGhhY2tcbiAgICAgICAgICAgIHRoaXMucm93UG9zaXRpb25zID0gbmV3IFBvc2l0aW9uQ2FjaGUodGhpcy50aW1lQXhpcy5zbGF0cy5lbCwgdGhpcy5yb3dDb21wb25lbnRzLm1hcChmdW5jdGlvbiAocm93Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvd0NvbXBvbmVudC50aW1lQXhpc1RyO1xuICAgICAgICAgICAgfSksIGZhbHNlLCAvLyBpc0hvcml6b250YWxcbiAgICAgICAgICAgIHRydWUgLy8gaXNWZXJ0aWNhbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucm93UG9zaXRpb25zLmJ1aWxkKCk7XG4gICAgICAgICAgICB0aGlzLmlzU3RpY2t5U2Nyb2xsRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuc3luY0hlYWRIZWlnaHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3ByZWFkc2hlZXRIZWFkRWwgPSB0aGlzLnNwcmVhZHNoZWV0LmhlYWRlci50YWJsZUVsO1xuICAgICAgICB2YXIgdGltZUF4aXNIZWFkRWwgPSB0aGlzLnRpbWVBeGlzLmhlYWRlci50YWJsZUVsO1xuICAgICAgICBzcHJlYWRzaGVldEhlYWRFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgdGltZUF4aXNIZWFkRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgIHZhciBtYXggPSBNYXRoLm1heChzcHJlYWRzaGVldEhlYWRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsIHRpbWVBeGlzSGVhZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCk7XG4gICAgICAgIHNwcmVhZHNoZWV0SGVhZEVsLnN0eWxlLmhlaWdodCA9XG4gICAgICAgICAgICB0aW1lQXhpc0hlYWRFbC5zdHlsZS5oZWlnaHQgPSBtYXggKyAncHgnO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnVwZGF0ZVJvd1NpemVzID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIHZhciBkaXJ0eVJvd0NvbXBvbmVudHMgPSB0aGlzLnJvd0NvbXBvbmVudHM7XG4gICAgICAgIGlmICghaXNSZXNpemUpIHtcbiAgICAgICAgICAgIGRpcnR5Um93Q29tcG9uZW50cyA9IGRpcnR5Um93Q29tcG9uZW50cy5maWx0ZXIoZnVuY3Rpb24gKHJvd0NvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByb3dDb21wb25lbnQuaXNTaXplRGlydHk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxBcnJheXMgPSBkaXJ0eVJvd0NvbXBvbmVudHMubWFwKGZ1bmN0aW9uIChyb3dDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3dDb21wb25lbnQuZ2V0SGVpZ2h0RWxzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyByZXNldCB0byBuYXR1cmFsIGhlaWdodHNcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbEFycmF5c18xID0gZWxBcnJheXM7IF9pIDwgZWxBcnJheXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBlbEFycmF5ID0gZWxBcnJheXNfMVtfaV07XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGVsQXJyYXlfMSA9IGVsQXJyYXk7IF9hIDwgZWxBcnJheV8xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IGVsQXJyYXlfMVtfYV07XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGV0IHJvd3MgdXBkYXRlIHRoZWlyIGNvbnRlbnRzJyBoZWlnaHRzXG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgZGlydHlSb3dDb21wb25lbnRzXzEgPSBkaXJ0eVJvd0NvbXBvbmVudHM7IF9iIDwgZGlydHlSb3dDb21wb25lbnRzXzEubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICB2YXIgcm93Q29tcG9uZW50ID0gZGlydHlSb3dDb21wb25lbnRzXzFbX2JdO1xuICAgICAgICAgICAgcm93Q29tcG9uZW50LnVwZGF0ZVNpemUoaXNSZXNpemUpOyAvLyB3aWxsIHJlc2V0IGlzU2l6ZURpcnR5XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heEhlaWdodHMgPSBlbEFycmF5cy5tYXAoZnVuY3Rpb24gKGVsQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBtYXhIZWlnaHQgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbEFycmF5XzIgPSBlbEFycmF5OyBfaSA8IGVsQXJyYXlfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBlbEFycmF5XzJbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKG1heEhlaWdodCA9PT0gbnVsbCB8fCBoZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXhIZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsQXJyYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gZWxBcnJheXNbaV07IF9jIDwgX2QubGVuZ3RoOyBfYysrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gX2RbX2NdO1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IG1heEhlaWdodHNbaV0gKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJ0eVJvd0NvbXBvbmVudHMubGVuZ3RoO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnJvd0NvbXBvbmVudHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcm93Q29tcG9uZW50ID0gX2FbX2ldO1xuICAgICAgICAgICAgcm93Q29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvd05vZGVzID0gW107XG4gICAgICAgIHRoaXMucm93Q29tcG9uZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnNwcmVhZHNoZWV0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50aW1lQXhpcy5kZXN0cm95KCk7XG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLnJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmdzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlQXJlYVdpZHRoRHJhZ2dpbmcgPSBfY1tfYl07XG4gICAgICAgICAgICByZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNwcmVhZHNoZWV0Qm9keVN0aWNreVNjcm9sbGVyLmRlc3Ryb3koKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIudW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KHRoaXMpO1xuICAgIH07XG4gICAgLy8gTm93IEluZGljYXRvclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5nZXROb3dJbmRpY2F0b3JVbml0ID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbWVBeGlzLmdldE5vd0luZGljYXRvclVuaXQoZGF0ZVByb2ZpbGUpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnJlbmRlck5vd0luZGljYXRvciA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMucmVuZGVyTm93SW5kaWNhdG9yKGRhdGUpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnVucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnVucmVuZGVyTm93SW5kaWNhdG9yKCk7XG4gICAgfTtcbiAgICAvLyBTY3JvbGxpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB0aGlzIGlzIHVzZWZ1bCBmb3Igc2Nyb2xsaW5nIHByZXYvbmV4dCBkYXRlcyB3aGlsZSByZXNvdXJjZSBpcyBzY3JvbGxlZCBkb3duXG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5U2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Nyb2xsID0gX3N1cGVyLnByb3RvdHlwZS5xdWVyeVNjcm9sbC5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgICAgICBfX2Fzc2lnbihzY3JvbGwsIHRoaXMucXVlcnlSZXNvdXJjZVNjcm9sbCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2Nyb2xsO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLmFwcGx5U2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCwgaXNSZXNpemUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5hcHBseVNjcm9sbC5jYWxsKHRoaXMsIHNjcm9sbCwgaXNSZXNpemUpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yZXNvdXJjZVN0b3JlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UmVzb3VyY2VTY3JvbGwoc2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhdm9pZCB1cGRhdGluZyBzdGlja3lzY3JvbGwgdG9vIG9mdGVuXG4gICAgICAgIGlmIChpc1Jlc2l6ZSB8fCB0aGlzLmlzU3RpY2t5U2Nyb2xsRGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdGlja3lTY3JvbGxEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zcHJlYWRzaGVldEJvZHlTdGlja3lTY3JvbGxlci51cGRhdGVTaXplKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVBeGlzLnVwZGF0ZVN0aWNreVNjcm9sbGVycygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUF4aXMuY29tcHV0ZURhdGVTY3JvbGwoZHVyYXRpb24pO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5RGF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUF4aXMucXVlcnlEYXRlU2Nyb2xsKCk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLmFwcGx5RGF0ZVNjcm9sbChzY3JvbGwpO1xuICAgIH07XG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5UmVzb3VyY2VTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJvd0NvbXBvbmVudHMgPSBfYS5yb3dDb21wb25lbnRzLCByb3dOb2RlcyA9IF9hLnJvd05vZGVzO1xuICAgICAgICB2YXIgc2Nyb2xsID0ge307XG4gICAgICAgIHZhciBzY3JvbGxlclRvcCA9IHRoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7IC8vIGZpeGVkIHBvc2l0aW9uXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93Q29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJvd0NvbXBvbmVudCA9IHJvd0NvbXBvbmVudHNbaV07XG4gICAgICAgICAgICB2YXIgcm93Tm9kZSA9IHJvd05vZGVzW2ldO1xuICAgICAgICAgICAgdmFyIGVsID0gcm93Q29tcG9uZW50LnRpbWVBeGlzVHI7XG4gICAgICAgICAgICB2YXIgZWxCb3R0b20gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207IC8vIGZpeGVkIHBvc2l0aW9uXG4gICAgICAgICAgICBpZiAoZWxCb3R0b20gPiBzY3JvbGxlclRvcCkge1xuICAgICAgICAgICAgICAgIHNjcm9sbC5yb3dJZCA9IHJvd05vZGUuaWQ7XG4gICAgICAgICAgICAgICAgc2Nyb2xsLmJvdHRvbSA9IGVsQm90dG9tIC0gc2Nyb2xsZXJUb3A7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogd2hhdCBhYm91dCBsZWZ0IHNjcm9sbCBzdGF0ZSBmb3Igc3ByZWFkc2hlZXQgYXJlYT9cbiAgICAgICAgcmV0dXJuIHNjcm9sbDtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5hcHBseVJlc291cmNlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICB2YXIgcm93SWQgPSBzY3JvbGwuZm9yY2VkUm93SWQgfHwgc2Nyb2xsLnJvd0lkO1xuICAgICAgICBpZiAocm93SWQpIHtcbiAgICAgICAgICAgIHZhciByb3dDb21wb25lbnQgPSB0aGlzLnJvd0NvbXBvbmVudHNCeUlkW3Jvd0lkXTtcbiAgICAgICAgICAgIGlmIChyb3dDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSByb3dDb21wb25lbnQudGltZUF4aXNUcjtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyVG9wID0gdGhpcy50aW1lQXhpcy5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSAoc2Nyb2xsLmZvcmNlZFJvd0lkID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1JlY3QudG9wIDogLy8ganVzdCB1c2UgdG9wIGVkZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1JlY3QuYm90dG9tIC0gc2Nyb2xsLmJvdHRvbSkgLSAvLyBwaXhlbHMgZnJvbSBib3R0b20gZWRnZVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJUb3A7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5zZXRTY3JvbGxUb3Aoc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJlYWRzaGVldC5sYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLnNldFNjcm9sbFRvcChzY3JvbGxUb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gVE9ETzogc2Nyb2xsVG9SZXNvdXJjZVxuICAgIC8vIEhpdCBTeXN0ZW1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUuYnVpbGRQb3NpdGlvbkNhY2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aW1lQXhpcy5zbGF0cy51cGRhdGVTaXplKCk7XG4gICAgICAgIHRoaXMucm93UG9zaXRpb25zLmJ1aWxkKCk7XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5wcm90b3R5cGUucXVlcnlIaXQgPSBmdW5jdGlvbiAocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCkge1xuICAgICAgICB2YXIgcm93UG9zaXRpb25zID0gdGhpcy5yb3dQb3NpdGlvbnM7XG4gICAgICAgIHZhciBzbGF0cyA9IHRoaXMudGltZUF4aXMuc2xhdHM7XG4gICAgICAgIHZhciByb3dJbmRleCA9IHJvd1Bvc2l0aW9ucy50b3BUb0luZGV4KHBvc2l0aW9uVG9wKTtcbiAgICAgICAgaWYgKHJvd0luZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IHRoaXMucm93Tm9kZXNbcm93SW5kZXhdLnJlc291cmNlO1xuICAgICAgICAgICAgaWYgKHJlc291cmNlKSB7IC8vIG5vdCBhIGdyb3VwXG4gICAgICAgICAgICAgICAgdmFyIHNsYXRIaXQgPSBzbGF0cy5wb3NpdGlvblRvSGl0KHBvc2l0aW9uTGVmdCk7XG4gICAgICAgICAgICAgICAgaWYgKHNsYXRIaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVTcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHNsYXRIaXQuZGF0ZVNwYW4ucmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiBzbGF0SGl0LmRhdGVTcGFuLmFsbERheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZUlkOiByZXNvdXJjZS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBzbGF0SGl0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHNsYXRIaXQucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiByb3dQb3NpdGlvbnMudG9wc1tyb3dJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiByb3dQb3NpdGlvbnMuYm90dG9tc1tyb3dJbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlFbDogc2xhdEhpdC5kYXlFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAwXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSZXNvdXJjZSBBcmVhXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgUmVzb3VyY2VUaW1lbGluZVZpZXcucHJvdG90eXBlLnNldFJlc291cmNlQXJlYVdpZHRoID0gZnVuY3Rpb24gKHdpZHRoVmFsKSB7XG4gICAgICAgIHRoaXMucmVzb3VyY2VBcmVhV2lkdGggPSB3aWR0aFZhbDtcbiAgICAgICAgYXBwbHlTdHlsZVByb3AodGhpcy5yZXNvdXJjZUFyZWFIZWFkRWwsICd3aWR0aCcsIHdpZHRoVmFsIHx8ICcnKTtcbiAgICB9O1xuICAgIFJlc291cmNlVGltZWxpbmVWaWV3LnByb3RvdHlwZS5pbml0UmVzb3VyY2VBcmVhV2lkdGhEcmFnZ2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlQXJlYURpdmlkZXJFbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYy1jb2wtcmVzaXplcicpKTtcbiAgICAgICAgdmFyIEVsZW1lbnREcmFnZ2luZ0ltcGwgPSB0aGlzLmNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy5lbGVtZW50RHJhZ2dpbmdJbXBsO1xuICAgICAgICBpZiAoRWxlbWVudERyYWdnaW5nSW1wbCkge1xuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZUFyZWFXaWR0aERyYWdnaW5ncyA9IHJlc291cmNlQXJlYURpdmlkZXJFbHMubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IG5ldyBFbGVtZW50RHJhZ2dpbmdJbXBsKGVsKTtcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ1N0YXJ0V2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdXaWR0aDtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYWdTdGFydFdpZHRoID0gX3RoaXMucmVzb3VyY2VBcmVhV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0V2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnU3RhcnRXaWR0aCA9IF90aGlzLnJlc291cmNlQXJlYUhlYWRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2aWV3V2lkdGggPSBfdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnbW92ZScsIGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gZHJhZ1N0YXJ0V2lkdGggKyBwZXYuZGVsdGFYICogKF90aGlzLmlzUnRsID8gLTEgOiAxKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3V2lkdGggPSBNYXRoLm1heChuZXdXaWR0aCwgTUlOX1JFU09VUkNFX0FSRUFfV0lEVEgpO1xuICAgICAgICAgICAgICAgICAgICBuZXdXaWR0aCA9IE1hdGgubWluKG5ld1dpZHRoLCB2aWV3V2lkdGggLSBNSU5fUkVTT1VSQ0VfQVJFQV9XSURUSCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFJlc291cmNlQXJlYVdpZHRoKG5ld1dpZHRoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRBdXRvU2Nyb2xsRW5hYmxlZChmYWxzZSk7IC8vIGJlY2F1c2UgZ2V0cyB3ZWlyZCB3aXRoIGF1dG8tc2Nyb2xsaW5nIHRpbWUgYXJlYVxuICAgICAgICAgICAgICAgIHJldHVybiBkcmFnZ2luZztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNvdXJjZVRpbWVsaW5lVmlldy5uZWVkc1Jlc291cmNlRGF0YSA9IHRydWU7IC8vIGZvciBSZXNvdXJjZVZpZXdQcm9wc1xuICAgIHJldHVybiBSZXNvdXJjZVRpbWVsaW5lVmlldztcbn0oVmlldykpO1xuZnVuY3Rpb24gaGFzUmVzb3VyY2VCdXNpbmVzc0hvdXJzKHJlc291cmNlU3RvcmUpIHtcbiAgICBmb3IgKHZhciByZXNvdXJjZUlkIGluIHJlc291cmNlU3RvcmUpIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gcmVzb3VyY2VTdG9yZVtyZXNvdXJjZUlkXTtcbiAgICAgICAgaWYgKHJlc291cmNlLmJ1c2luZXNzSG91cnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc05lc3Rpbmcobm9kZXMpIHtcbiAgICBmb3IgKHZhciBfaSA9IDAsIG5vZGVzXzEgPSBub2RlczsgX2kgPCBub2Rlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzXzFbX2ldO1xuICAgICAgICBpZiAobm9kZS5ncm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5yZXNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBtYWluID0gY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiBbUmVzb3VyY2VDb21tb25QbHVnaW4sIFRpbWVsaW5lUGx1Z2luXSxcbiAgICBkZWZhdWx0VmlldzogJ3Jlc291cmNlVGltZWxpbmVEYXknLFxuICAgIHZpZXdzOiB7XG4gICAgICAgIHJlc291cmNlVGltZWxpbmU6IHtcbiAgICAgICAgICAgIGNsYXNzOiBSZXNvdXJjZVRpbWVsaW5lVmlldyxcbiAgICAgICAgICAgIHJlc291cmNlQXJlYVdpZHRoOiAnMzAlJyxcbiAgICAgICAgICAgIHJlc291cmNlc0luaXRpYWxseUV4cGFuZGVkOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnRSZXNpemFibGVGcm9tU3RhcnQ6IHRydWUgLy8gVE9ETzogbm90IERSWSB3aXRoIHRoaXMgc2FtZSBzZXR0aW5nIGluIHRoZSBtYWluIHRpbWVsaW5lIGNvbmZpZ1xuICAgICAgICB9LFxuICAgICAgICByZXNvdXJjZVRpbWVsaW5lRGF5OiB7XG4gICAgICAgICAgICB0eXBlOiAncmVzb3VyY2VUaW1lbGluZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBkYXlzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUaW1lbGluZVdlZWs6IHtcbiAgICAgICAgICAgIHR5cGU6ICdyZXNvdXJjZVRpbWVsaW5lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IHdlZWtzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUaW1lbGluZU1vbnRoOiB7XG4gICAgICAgICAgICB0eXBlOiAncmVzb3VyY2VUaW1lbGluZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBtb250aHM6IDEgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvdXJjZVRpbWVsaW5lWWVhcjoge1xuICAgICAgICAgICAgdHlwZTogJ3Jlc291cmNlVGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgeWVhcnM6IDEgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1haW47XG5leHBvcnQgeyBSZXNvdXJjZVRpbWVsaW5lVmlldyB9O1xuIiwiLyohXG5GdWxsQ2FsZW5kYXIgVGltZWxpbmUgUGx1Z2luIHY0LjMuMFxuRG9jcyAmIExpY2Vuc2U6IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL3NjaGVkdWxlclxuKGMpIDIwMTkgQWRhbSBTaGF3XG4qL1xuXG5pbXBvcnQgeyBodG1sVG9FbGVtZW50LCBmb3JjZUNsYXNzTmFtZSwgYXBwbHlTdHlsZSwgZGVib3VuY2UsIHByZXZlbnREZWZhdWx0LCBTY3JvbGxDb21wb25lbnQsIEVtaXR0ZXJNaXhpbiwgcmVtb3ZlRWxlbWVudCwgY3JlYXRlRWxlbWVudCwgY29tcHV0ZUVkZ2VzLCBhc1JvdWdoTXMsIGlzU2luZ2xlRGF5LCBnZXREYXlDbGFzc2VzLCBmaW5kRWxlbWVudHMsIENvbXBvbmVudCwgUG9zaXRpb25DYWNoZSwgZmluZENoaWxkcmVuLCBpc0ludCwgbXVsdGlwbHlEdXJhdGlvbiwgY29uZmlnLCBjcmVhdGVGb3JtYXR0ZXIsIGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvciwgY3JlYXRlRHVyYXRpb24sIHdob2xlRGl2aWRlRHVyYXRpb25zLCBhZGREYXlzLCBzdGFydE9mRGF5LCBjb21wdXRlVmlzaWJsZURheVJhbmdlLCBhc1JvdWdoTWludXRlcywgcGFkU3RhcnQsIGFzUm91Z2hTZWNvbmRzLCBkaWZmV2hvbGVEYXlzLCBidWlsZEdvdG9BbmNob3JIdG1sLCBodG1sRXNjYXBlLCB0cmFuc2xhdGVSZWN0LCByYW5nZUNvbnRhaW5zTWFya2VyLCBjc3NUb1N0ciwgY29tcHV0ZUhlaWdodEFuZE1hcmdpbnMsIGFwcGx5U3R5bGVQcm9wLCBGZ0V2ZW50UmVuZGVyZXIsIEZpbGxSZW5kZXJlciwgbWVtb2l6ZVJlbmRlcmluZywgRGF0ZUNvbXBvbmVudCwgaW50ZXJzZWN0UmFuZ2VzLCBhZGRNcywgU2xpY2VyLCBWaWV3LCBjcmVhdGVQbHVnaW4gfSBmcm9tICdAZnVsbGNhbGVuZGFyL2NvcmUnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG4vKlxuQSByZWN0YW5ndWxhciBhcmVhIG9mIGNvbnRlbnQgdGhhdCBsaXZlcyB3aXRoaW4gYSBTY3JvbGxlci5cbkNhbiBoYXZlIFwiZ3V0dGVyc1wiLCBhcmVhcyBvZiBkZWFkIHNwYWNpbmcgYXJvdW5kIHRoZSBwZXJpbWV0ZXIuXG5BbHNvIHZlcnkgdXNlZnVsIGZvciBmb3JjaW5nIGEgd2lkdGgsIHdoaWNoIGEgU2Nyb2xsZXIgY2Fubm90IGRvIGFsb25lLlxuSGFzIGEgY29udGVudCBhcmVhIHRoYXQgbGl2ZXMgYWJvdmUgYSBiYWNrZ3JvdW5kIGFyZWEuXG4qL1xudmFyIFNjcm9sbGVyQ2FudmFzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbGVyQ2FudmFzKCkge1xuICAgICAgICB0aGlzLmd1dHRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5lbCA9IGh0bWxUb0VsZW1lbnQoXCI8ZGl2IGNsYXNzPVxcXCJmYy1zY3JvbGxlci1jYW52YXNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJmYy1jb250ZW50XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZmMtYmdcXFwiPjwvZGl2PiA8L2Rpdj5cIik7XG4gICAgICAgIHRoaXMuY29udGVudEVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuZmMtY29udGVudCcpO1xuICAgICAgICB0aGlzLmJnRWwgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5mYy1iZycpO1xuICAgIH1cbiAgICAvKlxuICAgIElmIGZhbHN5LCByZXNldHMgYWxsIHRoZSBndXR0ZXJzIHRvIDBcbiAgICAqL1xuICAgIFNjcm9sbGVyQ2FudmFzLnByb3RvdHlwZS5zZXRHdXR0ZXJzID0gZnVuY3Rpb24gKGd1dHRlcnMpIHtcbiAgICAgICAgaWYgKCFndXR0ZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmd1dHRlcnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9fYXNzaWduKHRoaXMuZ3V0dGVycywgZ3V0dGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG4gICAgfTtcbiAgICBTY3JvbGxlckNhbnZhcy5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICB9O1xuICAgIFNjcm9sbGVyQ2FudmFzLnByb3RvdHlwZS5zZXRNaW5XaWR0aCA9IGZ1bmN0aW9uIChtaW5XaWR0aCkge1xuICAgICAgICB0aGlzLm1pbldpZHRoID0gbWluV2lkdGg7XG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgIH07XG4gICAgU2Nyb2xsZXJDYW52YXMucHJvdG90eXBlLmNsZWFyV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSBudWxsO1xuICAgICAgICB0aGlzLm1pbldpZHRoID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG4gICAgfTtcbiAgICBTY3JvbGxlckNhbnZhcy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZ3V0dGVycyA9IF9hLmd1dHRlcnMsIGVsID0gX2EuZWw7XG4gICAgICAgIC8vIGlzIGJvcmRlci1ib3ggKHdpZHRoIGluY2x1ZGVzIHBhZGRpbmcpXG4gICAgICAgIGZvcmNlQ2xhc3NOYW1lKGVsLCAnZmMtZ3V0dGVyLWxlZnQnLCBndXR0ZXJzLmxlZnQpO1xuICAgICAgICBmb3JjZUNsYXNzTmFtZShlbCwgJ2ZjLWd1dHRlci1yaWdodCcsIGd1dHRlcnMucmlnaHQpO1xuICAgICAgICBmb3JjZUNsYXNzTmFtZShlbCwgJ2ZjLWd1dHRlci10b3AnLCBndXR0ZXJzLnRvcCk7XG4gICAgICAgIGZvcmNlQ2xhc3NOYW1lKGVsLCAnZmMtZ3V0dGVyLWJvdHRvbScsIGd1dHRlcnMuYm90dG9tKTtcbiAgICAgICAgYXBwbHlTdHlsZShlbCwge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IGd1dHRlcnMubGVmdCB8fCAnJyxcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogZ3V0dGVycy5yaWdodCB8fCAnJyxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IGd1dHRlcnMudG9wIHx8ICcnLFxuICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVycy5ib3R0b20gfHwgJycsXG4gICAgICAgICAgICB3aWR0aDogKHRoaXMud2lkdGggIT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggKyAoZ3V0dGVycy5sZWZ0IHx8IDApICsgKGd1dHRlcnMucmlnaHQgfHwgMCkgOlxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgbWluV2lkdGg6ICh0aGlzLm1pbldpZHRoICE9IG51bGwpID9cbiAgICAgICAgICAgICAgICB0aGlzLm1pbldpZHRoICsgKGd1dHRlcnMubGVmdCB8fCAwKSArIChndXR0ZXJzLnJpZ2h0IHx8IDApIDpcbiAgICAgICAgICAgICAgICAnJ1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmJnRWwsIHtcbiAgICAgICAgICAgIGxlZnQ6IGd1dHRlcnMubGVmdCB8fCAnJyxcbiAgICAgICAgICAgIHJpZ2h0OiBndXR0ZXJzLnJpZ2h0IHx8ICcnLFxuICAgICAgICAgICAgdG9wOiBndXR0ZXJzLnRvcCB8fCAnJyxcbiAgICAgICAgICAgIGJvdHRvbTogZ3V0dGVycy5ib3R0b20gfHwgJydcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gU2Nyb2xsZXJDYW52YXM7XG59KCkpO1xuXG52YXIgRW5oYW5jZWRTY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW5oYW5jZWRTY3JvbGxlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbmhhbmNlZFNjcm9sbGVyKG92ZXJmbG93WCwgb3ZlcmZsb3dZKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG92ZXJmbG93WCwgb3ZlcmZsb3dZKSB8fCB0aGlzO1xuICAgICAgICAvLyBTY3JvbGwgRXZlbnRzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgX3RoaXMucmVwb3J0U2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1Njcm9sbGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlcG9ydFNjcm9sbFN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdzY3JvbGwnKTtcbiAgICAgICAgICAgIF90aGlzLmlzTW92aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLnJlcXVlc3RNb3ZpbmdFbmQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMucmVwb3J0U2Nyb2xsU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3Njcm9sbFN0YXJ0JywgX3RoaXMuaXNUb3VjaGluZyk7IC8vIGNyZWF0ZWQgaW4gY29uc3RydWN0b3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gd2lsbCBmaXJlICpiZWZvcmUqIHRoZSBzY3JvbGwgZXZlbnQgaXMgZmlyZWRcbiAgICAgICAgX3RoaXMucmVwb3J0VG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmlzVG91Y2hpbmcgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5yZXBvcnRUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc1RvdWNoaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNUb3VjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRvdWNoIHNjcm9sbGluZyB3YXMgcmUtZW5hYmxlZCBkdXJpbmcgYSByZWNlbnQgdG91Y2ggc2Nyb2xsXG4gICAgICAgICAgICAgICAgLy8gdGhlbiB1bmJpbmQgdGhlIGhhbmRsZXJzIHRoYXQgYXJlIHByZXZlbnRpbmcgaXQgZnJvbSBoYXBwZW5pbmcuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzVG91Y2hTY3JvbGxFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVuYmluZFByZXZlbnRUb3VjaFNjcm9sbCgpOyAvLyB3b24ndCBkbyBhbnl0aGluZyBpZiBub3QgYm91bmRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHVzZXIgZW5kZWQgdGhlaXIgdG91Y2gsIGFuZCB0aGUgc2Nyb2xsIGFyZWEgd2Fzbid0IG1vdmluZyxcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb25zaWRlciB0aGlzIHRvIGJlIHRoZSBlbmQgb2YgdGhlIHNjcm9sbC5cbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzTW92aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcG9ydFNjcm9sbEVuZCgpOyAvLyB3b24ndCBmaXJlIGlmIGFscmVhZHkgZW5kZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzVG91Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNUb3VjaFNjcm9sbEVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5yZXF1ZXN0TW92aW5nRW5kID0gZGVib3VuY2UoX3RoaXMucmVwb3J0TW92aW5nRW5kLCA1MDApO1xuICAgICAgICBfdGhpcy5jYW52YXMgPSBuZXcgU2Nyb2xsZXJDYW52YXMoKTtcbiAgICAgICAgX3RoaXMuZWwuYXBwZW5kQ2hpbGQoX3RoaXMuY2FudmFzLmVsKTtcbiAgICAgICAgX3RoaXMuYXBwbHlPdmVyZmxvdygpO1xuICAgICAgICBfdGhpcy5iaW5kSGFuZGxlcnMoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy51bmJpbmRIYW5kbGVycygpO1xuICAgIH07XG4gICAgLy8gVG91Y2ggc2Nyb2xsIHByZXZlbnRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuZGlzYWJsZVRvdWNoU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzVG91Y2hTY3JvbGxFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmluZFByZXZlbnRUb3VjaFNjcm9sbCgpOyAvLyB3aWxsIGJlIHVuYm91bmQgaW4gZW5hYmxlVG91Y2hTY3JvbGwgb3IgcmVwb3J0VG91Y2hFbmRcbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLmVuYWJsZVRvdWNoU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzVG91Y2hTY3JvbGxFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gb25seSBpbW1lZGlhdGVseSB1bmJpbmQgaWYgYSB0b3VjaCBldmVudCBpcyBOT1QgaW4gcHJvZ3Jlc3MuXG4gICAgICAgIC8vIG90aGVyd2lzZSwgaXQgd2lsbCBiZSBoYW5kbGVkIGJ5IHJlcG9ydFRvdWNoRW5kLlxuICAgICAgICBpZiAoIXRoaXMuaXNUb3VjaGluZykge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRQcmV2ZW50VG91Y2hTY3JvbGwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuYmluZFByZXZlbnRUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByZXZlbnRUb3VjaFNjcm9sbEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKHRoaXMucHJldmVudFRvdWNoU2Nyb2xsSGFuZGxlciA9IHByZXZlbnREZWZhdWx0KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLnVuYmluZFByZXZlbnRUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJldmVudFRvdWNoU2Nyb2xsSGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLnByZXZlbnRUb3VjaFNjcm9sbEhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5wcmV2ZW50VG91Y2hTY3JvbGxIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSGFuZGxlcnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuYmluZEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMucmVwb3J0U2Nyb2xsKTtcbiAgICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5yZXBvcnRUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLnJlcG9ydFRvdWNoRW5kKTtcbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLnVuYmluZEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMucmVwb3J0U2Nyb2xsKTtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5yZXBvcnRUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLnJlcG9ydFRvdWNoRW5kKTtcbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLnJlcG9ydE1vdmluZ0VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICAvLyBvbmx5IGVuZCB0aGUgc2Nyb2xsIGlmIG5vdCBjdXJyZW50bHkgdG91Y2hpbmcuXG4gICAgICAgIC8vIGlmIHRvdWNoaW5nLCB0aGUgc2Nyb2xsaW5nIHdpbGwgZW5kIGxhdGVyLCBvbiB0b3VjaGVuZC5cbiAgICAgICAgaWYgKCF0aGlzLmlzVG91Y2hpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0U2Nyb2xsRW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEVuaGFuY2VkU2Nyb2xsZXIucHJvdG90eXBlLnJlcG9ydFNjcm9sbEVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsRW5kJyk7XG4gICAgICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEhvcml6b250YWwgU2Nyb2xsIE5vcm1hbGl6YXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNDI3NjYxOS9iZXR0ZXItd2F5LXRvLWdldC10aGUtdmlld3BvcnQtb2YtYS1zY3JvbGxhYmxlLWRpdi1pbi1ydGwtbW9kZS8yNDM5NDM3NiMyNDM5NDM3NlxuICAgIC8vIFRPRE86IG1vdmUgYWxsIHRoaXMgdG8gdXRpbCBmdW5jdGlvbnNcbiAgICAvKlxuICAgIElmIFJUTCwgYW5kIHNjcm9sbGVkIHRvIHRoZSBsZWZ0LCByZXR1cm5zIE5FR0FUSVZFIHZhbHVlIChsaWtlIEZpcmVmb3gpXG4gICAgKi9cbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHZhbCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGdldFJ0bFNjcm9sbFN5c3RlbSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncG9zaXRpdmUnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAodmFsICsgZWwuY2xpZW50V2lkdGgpIC0gZWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgICAgICAgICAgICAgICAgICB2YWwgPSAtdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgLypcbiAgICBBY2NlcHRzIGEgTkVHQVRJVkUgdmFsdWUgZm9yIHdoZW4gc2Nyb2xsZWQgaW4gUlRMXG4gICAgKi9cbiAgICBFbmhhbmNlZFNjcm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmRpcmVjdGlvbjtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UnRsU2Nyb2xsU3lzdGVtKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdwb3NpdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9ICh2YWwgLSBlbC5jbGllbnRXaWR0aCkgKyBlbC5zY3JvbGxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSB2YWw7XG4gICAgfTtcbiAgICAvKlxuICAgIEFsd2F5cyByZXR1cm5zIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHNjcm9sbGVkIGZyb20gdGhlIGxlZnRtb3N0IHBvc2l0aW9uIChldmVuIGlmIFJUTCkuXG4gICAgQWx3YXlzIHBvc2l0aXZlLlxuICAgICovXG4gICAgRW5oYW5jZWRTY3JvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsRnJvbUxlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgdmFsID0gZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UnRsU2Nyb2xsU3lzdGVtKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9ICh2YWwgLSBlbC5jbGllbnRXaWR0aCkgKyBlbC5zY3JvbGxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9ICgtdmFsIC0gZWwuY2xpZW50V2lkdGgpICsgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICByZXR1cm4gRW5oYW5jZWRTY3JvbGxlcjtcbn0oU2Nyb2xsQ29tcG9uZW50KSk7XG5FbWl0dGVyTWl4aW4ubWl4SW50byhFbmhhbmNlZFNjcm9sbGVyKTtcbi8vIEhvcml6b250YWwgU2Nyb2xsIFN5c3RlbSBEZXRlY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBfcnRsU2Nyb2xsU3lzdGVtO1xuZnVuY3Rpb24gZ2V0UnRsU2Nyb2xsU3lzdGVtKCkge1xuICAgIHJldHVybiBfcnRsU2Nyb2xsU3lzdGVtIHx8IChfcnRsU2Nyb2xsU3lzdGVtID0gZGV0ZWN0UnRsU2Nyb2xsU3lzdGVtKCkpO1xufVxuZnVuY3Rpb24gZGV0ZWN0UnRsU2Nyb2xsU3lzdGVtKCkge1xuICAgIHZhciBlbCA9IGh0bWxUb0VsZW1lbnQoXCI8ZGl2IHN0eWxlPVxcXCIgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IC0xMDAwcHg7IHdpZHRoOiAxcHg7IGhlaWdodDogMXB4OyBvdmVyZmxvdzogc2Nyb2xsOyBkaXJlY3Rpb246IHJ0bDsgZm9udC1zaXplOiAxMDBweDsgXFxcIj5BPC9kaXY+XCIpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHZhciBzeXN0ZW07XG4gICAgaWYgKGVsLnNjcm9sbExlZnQgPiAwKSB7XG4gICAgICAgIHN5c3RlbSA9ICdwb3NpdGl2ZSc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gMTtcbiAgICAgICAgaWYgKGVsLnNjcm9sbExlZnQgPiAwKSB7XG4gICAgICAgICAgICBzeXN0ZW0gPSAncmV2ZXJzZSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzeXN0ZW0gPSAnbmVnYXRpdmUnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUVsZW1lbnQoZWwpO1xuICAgIHJldHVybiBzeXN0ZW07XG59XG5cbi8qXG5BIFNjcm9sbGVyLCBidXQgd2l0aCBhIHdyYXBwaW5nIGRpdiB0aGF0IGFsbG93cyBcImNsaXBwaW5nXCIgYXdheSBvZiBuYXRpdmUgc2Nyb2xsYmFycyxcbmdpdmluZyB0aGUgYXBwZWFyYW5jZSB0aGF0IHRoZXJlIGFyZSBubyBzY3JvbGxiYXJzLlxuKi9cbnZhciBDbGlwcGVkU2Nyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLypcbiAgICBSZWNlaXZlZCBvdmVyZmxvd3MgY2FuIGJlIHNldCB0byAnY2xpcHBlZCcsIG1lYW5pbmcgc2Nyb2xsYmFycyBzaG91bGRuJ3QgYmUgdmlzaWJsZVxuICAgIHRvIHRoZSB1c2VyLCBidXQgdGhlIGFyZWEgc2hvdWxkIHN0aWxsIHNjcm9sbC5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIENsaXBwZWRTY3JvbGxlcihvdmVyZmxvd1gsIG92ZXJmbG93WSwgcGFyZW50RWwpIHtcbiAgICAgICAgdGhpcy5pc0hTY3JvbGxiYXJzQ2xpcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzVlNjcm9sbGJhcnNDbGlwcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChvdmVyZmxvd1ggPT09ICdjbGlwcGVkLXNjcm9sbCcpIHtcbiAgICAgICAgICAgIG92ZXJmbG93WCA9ICdzY3JvbGwnO1xuICAgICAgICAgICAgdGhpcy5pc0hTY3JvbGxiYXJzQ2xpcHBlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG92ZXJmbG93WSA9PT0gJ2NsaXBwZWQtc2Nyb2xsJykge1xuICAgICAgICAgICAgb3ZlcmZsb3dZID0gJ3Njcm9sbCc7XG4gICAgICAgICAgICB0aGlzLmlzVlNjcm9sbGJhcnNDbGlwcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuaGFuY2VkU2Nyb2xsID0gbmV3IEVuaGFuY2VkU2Nyb2xsZXIob3ZlcmZsb3dYLCBvdmVyZmxvd1kpO1xuICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZCh0aGlzLmVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtc2Nyb2xsZXItY2xpcCdcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuZW5oYW5jZWRTY3JvbGwuZWwpO1xuICAgIH1cbiAgICBDbGlwcGVkU2Nyb2xsZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgfTtcbiAgICBDbGlwcGVkU2Nyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbmhhbmNlZFNjcm9sbCA9IHRoaXMuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIHZhciBzY3JvbGxFbCA9IGVuaGFuY2VkU2Nyb2xsLmVsO1xuICAgICAgICB2YXIgZWRnZXMgPSBjb21wdXRlRWRnZXMoc2Nyb2xsRWwpO1xuICAgICAgICB2YXIgY3NzUHJvcHMgPSB7IG1hcmdpbkxlZnQ6IDAsIG1hcmdpblJpZ2h0OiAwLCBtYXJnaW5Ub3A6IDAsIG1hcmdpbkJvdHRvbTogMCB9O1xuICAgICAgICAvLyBnaXZlIHRoZSBpbm5lciBzY3JvbGxpbmcgZGl2IG5lZ2F0aXZlIG1hcmdpbnMgc28gdGhhdCBpdHMgc2Nyb2xsYmFyc1xuICAgICAgICAvLyBhcmUgbnVkZ2VkIG91dHNpZGUgb2YgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgd3JhcHBlciwgd2hpY2ggaXMgb3ZlcmZsb3c6aGlkZGVuXG4gICAgICAgIGlmICh0aGlzLmlzVlNjcm9sbGJhcnNDbGlwcGVkKSB7XG4gICAgICAgICAgICBjc3NQcm9wcy5tYXJnaW5MZWZ0ID0gLWVkZ2VzLnNjcm9sbGJhckxlZnQ7XG4gICAgICAgICAgICBjc3NQcm9wcy5tYXJnaW5SaWdodCA9IC1lZGdlcy5zY3JvbGxiYXJSaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0hTY3JvbGxiYXJzQ2xpcHBlZCkge1xuICAgICAgICAgICAgY3NzUHJvcHMubWFyZ2luQm90dG9tID0gLWVkZ2VzLnNjcm9sbGJhckJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseVN0eWxlKHNjcm9sbEVsLCBjc3NQcm9wcyk7XG4gICAgICAgIC8vIGlmIHdlIGFyZSBhdHRlbXB0aW5nIHRvIGhpZGUgdGhlIHNjcm9sbGJhcnMgb2Zmc2NyZWVuLCBPU1gvaU9TIHdpbGwgc3RpbGxcbiAgICAgICAgLy8gZGlzcGxheSB0aGUgZmxvYXRpbmcgc2Nyb2xsYmFycy4gYXR0YWNoIGEgY2xhc3NOYW1lIHRvIGZvcmNlLWhpZGUgdGhlbS5cbiAgICAgICAgaWYgKCh0aGlzLmlzSFNjcm9sbGJhcnNDbGlwcGVkIHx8IChlbmhhbmNlZFNjcm9sbC5vdmVyZmxvd1ggPT09ICdoaWRkZW4nKSkgJiYgLy8gc2hvdWxkIG5ldmVyIHNob3c/XG4gICAgICAgICAgICAodGhpcy5pc1ZTY3JvbGxiYXJzQ2xpcHBlZCB8fCAoZW5oYW5jZWRTY3JvbGwub3ZlcmZsb3dZID09PSAnaGlkZGVuJykpICYmIC8vIHNob3VsZCBuZXZlciBzaG93P1xuICAgICAgICAgICAgISggLy8gZG9lc24ndCBoYXZlIGFueSBzY3JvbGxiYXIgbWFzc1xuICAgICAgICAgICAgZWRnZXMuc2Nyb2xsYmFyTGVmdCB8fFxuICAgICAgICAgICAgICAgIGVkZ2VzLnNjcm9sbGJhclJpZ2h0IHx8XG4gICAgICAgICAgICAgICAgZWRnZXMuc2Nyb2xsYmFyQm90dG9tKSkge1xuICAgICAgICAgICAgc2Nyb2xsRWwuY2xhc3NMaXN0LmFkZCgnZmMtbm8tc2Nyb2xsYmFycycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsRWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtbm8tc2Nyb2xsYmFycycpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDbGlwcGVkU2Nyb2xsZXIucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5lbmhhbmNlZFNjcm9sbC5zZXRIZWlnaHQoaGVpZ2h0KTtcbiAgICB9O1xuICAgIC8qXG4gICAgQWNjb3VudHMgZm9yICdjbGlwcGVkJyBzY3JvbGxiYXJzXG4gICAgKi9cbiAgICBDbGlwcGVkU2Nyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbGJhcldpZHRocyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdpZHRocyA9IHRoaXMuZW5oYW5jZWRTY3JvbGwuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgIGlmICh0aGlzLmlzVlNjcm9sbGJhcnNDbGlwcGVkKSB7XG4gICAgICAgICAgICB3aWR0aHMubGVmdCA9IDA7XG4gICAgICAgICAgICB3aWR0aHMucmlnaHQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzSFNjcm9sbGJhcnNDbGlwcGVkKSB7XG4gICAgICAgICAgICB3aWR0aHMuYm90dG9tID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2lkdGhzO1xuICAgIH07XG4gICAgcmV0dXJuIENsaXBwZWRTY3JvbGxlcjtcbn0oKSk7XG5cbnZhciBTY3JvbGxKb2luZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nyb2xsSm9pbmVyKGF4aXMsIHNjcm9sbGVycykge1xuICAgICAgICB0aGlzLmF4aXMgPSBheGlzO1xuICAgICAgICB0aGlzLnNjcm9sbGVycyA9IHNjcm9sbGVycztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNjcm9sbGVyID0gX2FbX2ldO1xuICAgICAgICAgICAgdGhpcy5pbml0U2Nyb2xsZXIoc2Nyb2xsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFNjcm9sbEpvaW5lci5wcm90b3R5cGUuaW5pdFNjcm9sbGVyID0gZnVuY3Rpb24gKHNjcm9sbGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBlbmhhbmNlZFNjcm9sbCA9IHNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsO1xuICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgdmlhIG1vdXNld2hlZWwsIHdlIGtub3cgZm9yIHN1cmUgdGhlIHRhcmdldFxuICAgICAgICAvLyBzY3JvbGxlciBzaG91bGQgYmUgdGhlIG1hc3Rlci4gY2FwdHVyZSB0aGUgdmFyaW91cyB4LWJyb3dzZXIgZXZlbnRzIHRoYXQgZmlyZS5cbiAgICAgICAgdmFyIG9uU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYXNzaWduTWFzdGVyU2Nyb2xsZXIoc2Nyb2xsZXIpO1xuICAgICAgICB9O1xuICAgICAgICAnd2hlZWwgbW91c2V3aGVlbCBEb21Nb3VzZVNjcm9sbCBNb3pNb3VzZVBpeGVsU2Nyb2xsJy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2TmFtZSkge1xuICAgICAgICAgICAgZW5oYW5jZWRTY3JvbGwuZWwuYWRkRXZlbnRMaXN0ZW5lcihldk5hbWUsIG9uU2Nyb2xsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVuaGFuY2VkU2Nyb2xsXG4gICAgICAgICAgICAub24oJ3Njcm9sbFN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5tYXN0ZXJTY3JvbGxlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLmFzc2lnbk1hc3RlclNjcm9sbGVyKHNjcm9sbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNjcm9sbGVyID09PSBfdGhpcy5tYXN0ZXJTY3JvbGxlcikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5zY3JvbGxlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdGhlclNjcm9sbGVyID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJTY3JvbGxlciAhPT0gc2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX3RoaXMuYXhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvcml6b250YWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmVsLnNjcm9sbExlZnQgPSBlbmhhbmNlZFNjcm9sbC5lbC5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZXJ0aWNhbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuc2V0U2Nyb2xsVG9wKGVuaGFuY2VkU2Nyb2xsLmdldFNjcm9sbFRvcCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ3Njcm9sbEVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxlciA9PT0gX3RoaXMubWFzdGVyU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51bmFzc2lnbk1hc3RlclNjcm9sbGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU2Nyb2xsSm9pbmVyLnByb3RvdHlwZS5hc3NpZ25NYXN0ZXJTY3JvbGxlciA9IGZ1bmN0aW9uIChzY3JvbGxlcikge1xuICAgICAgICB0aGlzLnVuYXNzaWduTWFzdGVyU2Nyb2xsZXIoKTtcbiAgICAgICAgdGhpcy5tYXN0ZXJTY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXJTY3JvbGxlciA9IF9hW19pXTtcbiAgICAgICAgICAgIGlmIChvdGhlclNjcm9sbGVyICE9PSBzY3JvbGxlcikge1xuICAgICAgICAgICAgICAgIG90aGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuZGlzYWJsZVRvdWNoU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjcm9sbEpvaW5lci5wcm90b3R5cGUudW5hc3NpZ25NYXN0ZXJTY3JvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWFzdGVyU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbGVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXJTY3JvbGxlciA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBvdGhlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmVuYWJsZVRvdWNoU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hc3RlclNjcm9sbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2Nyb2xsSm9pbmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbGxXaWR0aHMgPSB0aGlzLnNjcm9sbGVycy5tYXAoZnVuY3Rpb24gKHNjcm9sbGVyKSB7IHJldHVybiBzY3JvbGxlci5nZXRTY3JvbGxiYXJXaWR0aHMoKTsgfSk7XG4gICAgICAgIHZhciBtYXhMZWZ0ID0gMDtcbiAgICAgICAgdmFyIG1heFJpZ2h0ID0gMDtcbiAgICAgICAgdmFyIG1heFRvcCA9IDA7XG4gICAgICAgIHZhciBtYXhCb3R0b20gPSAwO1xuICAgICAgICB2YXIgd2lkdGhzO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhbGxXaWR0aHNfMSA9IGFsbFdpZHRoczsgX2kgPCBhbGxXaWR0aHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHdpZHRocyA9IGFsbFdpZHRoc18xW19pXTtcbiAgICAgICAgICAgIG1heExlZnQgPSBNYXRoLm1heChtYXhMZWZ0LCB3aWR0aHMubGVmdCk7XG4gICAgICAgICAgICBtYXhSaWdodCA9IE1hdGgubWF4KG1heFJpZ2h0LCB3aWR0aHMucmlnaHQpO1xuICAgICAgICAgICAgbWF4VG9wID0gTWF0aC5tYXgobWF4VG9wLCB3aWR0aHMudG9wKTtcbiAgICAgICAgICAgIG1heEJvdHRvbSA9IE1hdGgubWF4KG1heEJvdHRvbSwgd2lkdGhzLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2Nyb2xsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsZXIgPSB0aGlzLnNjcm9sbGVyc1tpXTtcbiAgICAgICAgICAgIHdpZHRocyA9IGFsbFdpZHRoc1tpXTtcbiAgICAgICAgICAgIHNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5zZXRHdXR0ZXJzKHRoaXMuYXhpcyA9PT0gJ2hvcml6b250YWwnID9cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG1heExlZnQgLSB3aWR0aHMubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IG1heFJpZ2h0IC0gd2lkdGhzLnJpZ2h0XG4gICAgICAgICAgICAgICAgfSA6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0b3A6IG1heFRvcCAtIHdpZHRocy50b3AsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogbWF4Qm90dG9tIC0gd2lkdGhzLmJvdHRvbVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2Nyb2xsSm9pbmVyO1xufSgpKTtcblxudmFyIEhlYWRlckJvZHlMYXlvdXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLypcbiAgICB2ZXJ0aWNhbFNjcm9sbCA9ICdhdXRvJyB8ICdjbGlwcGVkLXNjcm9sbCdcbiAgICAqL1xuICAgIGZ1bmN0aW9uIEhlYWRlckJvZHlMYXlvdXQoaGVhZGVyQ29udGFpbmVyRWwsIGJvZHlDb250YWluZXJFbCwgdmVydGljYWxTY3JvbGwpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJTY3JvbGxlciA9IG5ldyBDbGlwcGVkU2Nyb2xsZXIoJ2NsaXBwZWQtc2Nyb2xsJywgJ2hpZGRlbicsIGhlYWRlckNvbnRhaW5lckVsKTtcbiAgICAgICAgdGhpcy5ib2R5U2Nyb2xsZXIgPSBuZXcgQ2xpcHBlZFNjcm9sbGVyKCdhdXRvJywgdmVydGljYWxTY3JvbGwsIGJvZHlDb250YWluZXJFbCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsSm9pbmVyID0gbmV3IFNjcm9sbEpvaW5lcignaG9yaXpvbnRhbCcsIFtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyU2Nyb2xsZXIsXG4gICAgICAgICAgICB0aGlzLmJvZHlTY3JvbGxlclxuICAgICAgICBdKTtcbiAgICB9XG4gICAgSGVhZGVyQm9keUxheW91dC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJTY3JvbGxlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuYm9keVNjcm9sbGVyLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIEhlYWRlckJvZHlMYXlvdXQucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uICh0b3RhbEhlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIHZhciBib2R5SGVpZ2h0O1xuICAgICAgICBpZiAoaXNBdXRvKSB7XG4gICAgICAgICAgICBib2R5SGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm9keUhlaWdodCA9IHRvdGFsSGVpZ2h0IC0gdGhpcy5xdWVyeUhlYWRIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJvZHlTY3JvbGxlci5zZXRIZWlnaHQoYm9keUhlaWdodCk7XG4gICAgICAgIHRoaXMuaGVhZGVyU2Nyb2xsZXIudXBkYXRlU2l6ZSgpOyAvLyBhZGp1c3RzIGd1dHRlcnMgYW5kIGNsYXNzTmFtZXNcbiAgICAgICAgdGhpcy5ib2R5U2Nyb2xsZXIudXBkYXRlU2l6ZSgpOyAvLyBhZGp1c3RzIGd1dHRlcnMgYW5kIGNsYXNzTmFtZXNcbiAgICAgICAgdGhpcy5zY3JvbGxKb2luZXIudXBkYXRlKCk7XG4gICAgfTtcbiAgICBIZWFkZXJCb2R5TGF5b3V0LnByb3RvdHlwZS5xdWVyeUhlYWRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWRlclNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5jb250ZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH07XG4gICAgcmV0dXJuIEhlYWRlckJvZHlMYXlvdXQ7XG59KCkpO1xuXG52YXIgVGltZWxpbmVIZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVsaW5lSGVhZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lSGVhZGVyKGNvbnRleHQsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKF90aGlzLnRhYmxlRWwgPSBjcmVhdGVFbGVtZW50KCd0YWJsZScsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogX3RoaXMudGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlR3JpZCcpXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lbGluZUhlYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLnRhYmxlRWwpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lSGVhZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlcyhwcm9wcy50RGF0ZVByb2ZpbGUpO1xuICAgIH07XG4gICAgVGltZWxpbmVIZWFkZXIucHJvdG90eXBlLnJlbmRlckRhdGVzID0gZnVuY3Rpb24gKHREYXRlUHJvZmlsZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgdGhlbWUgPSBfYS50aGVtZTtcbiAgICAgICAgdmFyIGNlbGxSb3dzID0gdERhdGVQcm9maWxlLmNlbGxSb3dzO1xuICAgICAgICB2YXIgbGFzdFJvdyA9IGNlbGxSb3dzW2NlbGxSb3dzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgaXNDaHJvbm8gPSBhc1JvdWdoTXModERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwpID4gYXNSb3VnaE1zKHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pO1xuICAgICAgICB2YXIgb25lRGF5ID0gaXNTaW5nbGVEYXkodERhdGVQcm9maWxlLnNsb3REdXJhdGlvbik7XG4gICAgICAgIHZhciBodG1sID0gJzxjb2xncm91cD4nO1xuICAgICAgICAvLyBuZWVkcyB0byBiZSBhIGNvbCBmb3IgZWFjaCBib2R5IHNsYXQuIGhlYWRlciBjZWxscyB3aWxsIGhhdmUgY29sc3BhbnNcbiAgICAgICAgZm9yICh2YXIgaSA9IHREYXRlUHJvZmlsZS5zbG90Q250IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGh0bWwgKz0gJzxjb2wvPic7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSAnPC9jb2xncm91cD4nO1xuICAgICAgICBodG1sICs9ICc8dGJvZHk+JztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjZWxsUm93c18xID0gY2VsbFJvd3M7IF9pIDwgY2VsbFJvd3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByb3dDZWxscyA9IGNlbGxSb3dzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIGlzTGFzdCA9IHJvd0NlbGxzID09PSBsYXN0Um93O1xuICAgICAgICAgICAgaHRtbCArPSAnPHRyJyArIChpc0Nocm9ubyAmJiBpc0xhc3QgPyAnIGNsYXNzPVwiZmMtY2hyb25vXCInIDogJycpICsgJz4nO1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCByb3dDZWxsc18xID0gcm93Q2VsbHM7IF9iIDwgcm93Q2VsbHNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHJvd0NlbGxzXzFbX2JdO1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJDZWxsQ2xhc3NOYW1lcyA9IFt0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJyldO1xuICAgICAgICAgICAgICAgIGlmIChjZWxsLmlzV2Vla1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlckNlbGxDbGFzc05hbWVzLnB1c2goJ2ZjLWVtLWNlbGwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9uZURheSkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJDZWxsQ2xhc3NOYW1lcyA9IGhlYWRlckNlbGxDbGFzc05hbWVzLmNvbmNhdChnZXREYXlDbGFzc2VzKGNlbGwuZGF0ZSwgdGhpcy5wcm9wcy5kYXRlUHJvZmlsZSwgdGhpcy5jb250ZXh0LCB0cnVlKSAvLyBhZGRzIFwidG9kYXlcIiBjbGFzcyBhbmQgb3RoZXIgZGF5LWJhc2VkIGNsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCArPVxuICAgICAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPVwiJyArIGhlYWRlckNlbGxDbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBkYXRhLWRhdGU9XCInICsgZGF0ZUVudi5mb3JtYXRJc28oY2VsbC5kYXRlLCB7IG9taXRUaW1lOiAhdERhdGVQcm9maWxlLmlzVGltZVNjYWxlLCBvbWl0VGltZVpvbmVPZmZzZXQ6IHRydWUgfSkgKyAnXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjZWxsLmNvbHNwYW4gPiAxID8gJyBjb2xzcGFuPVwiJyArIGNlbGwuY29sc3BhbiArICdcIicgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJz4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmMtY2VsbC1jb250ZW50XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnNwYW5IdG1sICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3RoPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodG1sICs9ICc8L3RyPic7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSAnPC90Ym9keT4nO1xuICAgICAgICB0aGlzLnRhYmxlRWwuaW5uZXJIVE1MID0gaHRtbDsgLy8gVE9ETzogZG9lcyB0aGlzIHdvcmsgY3Jvc3MtYnJvd3Nlcj9cbiAgICAgICAgdGhpcy5zbGF0Q29sRWxzID0gZmluZEVsZW1lbnRzKHRoaXMudGFibGVFbCwgJ2NvbCcpO1xuICAgICAgICB0aGlzLmlubmVyRWxzID0gZmluZEVsZW1lbnRzKHRoaXMudGFibGVFbC5xdWVyeVNlbGVjdG9yKCd0cjpsYXN0LWNoaWxkJyksIC8vIGNvbXBvdW5kIHNlbGVjdG9yIHdvbid0IHdvcmsgYmVjYXVzZSBvZiBxdWVyeS1yb290IHByb2JsZW1cbiAgICAgICAgJ3RoIC5mYy1jZWxsLXRleHQnKTtcbiAgICAgICAgZmluZEVsZW1lbnRzKHRoaXMudGFibGVFbC5xdWVyeVNlbGVjdG9yQWxsKCd0cjpub3QoOmxhc3QtY2hpbGQpJyksIC8vIGNvbXBvdW5kIHNlbGVjdG9yIHdvbid0IHdvcmsgYmVjYXVzZSBvZiBxdWVyeS1yb290IHByb2JsZW1cbiAgICAgICAgJ3RoIC5mYy1jZWxsLXRleHQnKS5mb3JFYWNoKGZ1bmN0aW9uIChpbm5lckVsKSB7XG4gICAgICAgICAgICBpbm5lckVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXN0aWNreScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZUhlYWRlcjtcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBUaW1lbGluZVNsYXRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lbGluZVNsYXRzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lU2xhdHMoY29udGV4dCwgcGFyZW50RWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoX3RoaXMuZWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLXNsYXRzJyB9KSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBUaW1lbGluZVNsYXRzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlcyhwcm9wcy50RGF0ZVByb2ZpbGUpO1xuICAgIH07XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUucmVuZGVyRGF0ZXMgPSBmdW5jdGlvbiAodERhdGVQcm9maWxlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHRoZW1lID0gX2EudGhlbWUsIHZpZXcgPSBfYS52aWV3LCBkYXRlRW52ID0gX2EuZGF0ZUVudjtcbiAgICAgICAgdmFyIHNsb3REYXRlcyA9IHREYXRlUHJvZmlsZS5zbG90RGF0ZXMsIGlzV2Vla1N0YXJ0cyA9IHREYXRlUHJvZmlsZS5pc1dlZWtTdGFydHM7XG4gICAgICAgIHZhciBodG1sID0gJzx0YWJsZSBjbGFzcz1cIicgKyB0aGVtZS5nZXRDbGFzcygndGFibGVHcmlkJykgKyAnXCI+JyArXG4gICAgICAgICAgICAnPGNvbGdyb3VwPic7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xvdERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBodG1sICs9ICc8Y29sLz4nO1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gJzwvY29sZ3JvdXA+JztcbiAgICAgICAgaHRtbCArPSAnPHRib2R5Pjx0cj4nO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsb3REYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaHRtbCArPSB0aGlzLnNsYXRDZWxsSHRtbChzbG90RGF0ZXNbaV0sIGlzV2Vla1N0YXJ0c1tpXSwgdERhdGVQcm9maWxlKTtcbiAgICAgICAgfVxuICAgICAgICBodG1sICs9ICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nO1xuICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMuc2xhdENvbEVscyA9IGZpbmRFbGVtZW50cyh0aGlzLmVsLCAnY29sJyk7XG4gICAgICAgIHRoaXMuc2xhdEVscyA9IGZpbmRFbGVtZW50cyh0aGlzLmVsLCAndGQnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbG90RGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZpZXcucHVibGljbHlUcmlnZ2VyKCdkYXlSZW5kZXInLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRlRW52LnRvRGF0ZShzbG90RGF0ZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICBlbDogdGhpcy5zbGF0RWxzW2ldLFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRlckNvb3JkQ2FjaGUgPSBuZXcgUG9zaXRpb25DYWNoZSh0aGlzLmVsLCB0aGlzLnNsYXRFbHMsIHRydWUsIC8vIGlzSG9yaXpvbnRhbFxuICAgICAgICBmYWxzZSAvLyBpc1ZlcnRpY2FsXG4gICAgICAgICk7XG4gICAgICAgIC8vIGZvciB0aGUgaW5uZXIgZGl2cyB3aXRoaW4gdGhlIHNsYXRzXG4gICAgICAgIC8vIHVzZWQgZm9yIGV2ZW50IHJlbmRlcmluZyBhbmQgc2Nyb2xsVGltZSwgdG8gZGlzcmVnYXJkIHNsYXQgYm9yZGVyXG4gICAgICAgIHRoaXMuaW5uZXJDb29yZENhY2hlID0gbmV3IFBvc2l0aW9uQ2FjaGUodGhpcy5lbCwgZmluZENoaWxkcmVuKHRoaXMuc2xhdEVscywgJ2RpdicpLCB0cnVlLCAvLyBpc0hvcml6b250YWxcbiAgICAgICAgZmFsc2UgLy8gaXNWZXJ0aWNhbFxuICAgICAgICApO1xuICAgIH07XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUuc2xhdENlbGxIdG1sID0gZnVuY3Rpb24gKGRhdGUsIGlzRW0sIHREYXRlUHJvZmlsZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0aGVtZSA9IF9hLnRoZW1lLCBkYXRlRW52ID0gX2EuZGF0ZUVudjtcbiAgICAgICAgdmFyIGNsYXNzZXM7XG4gICAgICAgIGlmICh0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChpc0ludChkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2Vlbih0RGF0ZVByb2ZpbGUubm9ybWFsaXplZFJhbmdlLnN0YXJ0LCBkYXRlLCB0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCkpID9cbiAgICAgICAgICAgICAgICAnZmMtbWFqb3InIDpcbiAgICAgICAgICAgICAgICAnZmMtbWlub3InKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBnZXREYXlDbGFzc2VzKGRhdGUsIHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRheScpO1xuICAgICAgICB9XG4gICAgICAgIGNsYXNzZXMudW5zaGlmdCh0aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpKTtcbiAgICAgICAgaWYgKGlzRW0pIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtZW0tY2VsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnPHRkIGNsYXNzPVwiJyArIGNsYXNzZXMuam9pbignICcpICsgJ1wiJyArXG4gICAgICAgICAgICAnIGRhdGEtZGF0ZT1cIicgKyBkYXRlRW52LmZvcm1hdElzbyhkYXRlLCB7IG9taXRUaW1lOiAhdERhdGVQcm9maWxlLmlzVGltZVNjYWxlLCBvbWl0VGltZVpvbmVPZmZzZXQ6IHRydWUgfSkgKyAnXCInICtcbiAgICAgICAgICAgICc+PGRpdj48L2Rpdj48L3RkPic7XG4gICAgfTtcbiAgICBUaW1lbGluZVNsYXRzLnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm91dGVyQ29vcmRDYWNoZS5idWlsZCgpO1xuICAgICAgICB0aGlzLmlubmVyQ29vcmRDYWNoZS5idWlsZCgpO1xuICAgIH07XG4gICAgVGltZWxpbmVTbGF0cy5wcm90b3R5cGUucG9zaXRpb25Ub0hpdCA9IGZ1bmN0aW9uIChsZWZ0UG9zaXRpb24pIHtcbiAgICAgICAgdmFyIG91dGVyQ29vcmRDYWNoZSA9IHRoaXMub3V0ZXJDb29yZENhY2hlO1xuICAgICAgICB2YXIgdERhdGVQcm9maWxlID0gdGhpcy5wcm9wcy50RGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBzbGF0SW5kZXggPSBvdXRlckNvb3JkQ2FjaGUubGVmdFRvSW5kZXgobGVmdFBvc2l0aW9uKTtcbiAgICAgICAgaWYgKHNsYXRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBzb21ld2hhdCBzaW1pbGFyIHRvIHdoYXQgVGltZUdyaWQgZG9lcy4gY29uc29saWRhdGU/XG4gICAgICAgICAgICB2YXIgc2xhdFdpZHRoID0gb3V0ZXJDb29yZENhY2hlLmdldFdpZHRoKHNsYXRJbmRleCk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbCA9IHRoaXMuaXNSdGwgP1xuICAgICAgICAgICAgICAgIChvdXRlckNvb3JkQ2FjaGUucmlnaHRzW3NsYXRJbmRleF0gLSBsZWZ0UG9zaXRpb24pIC8gc2xhdFdpZHRoIDpcbiAgICAgICAgICAgICAgICAobGVmdFBvc2l0aW9uIC0gb3V0ZXJDb29yZENhY2hlLmxlZnRzW3NsYXRJbmRleF0pIC8gc2xhdFdpZHRoO1xuICAgICAgICAgICAgdmFyIGxvY2FsU25hcEluZGV4ID0gTWF0aC5mbG9vcihwYXJ0aWFsICogdERhdGVQcm9maWxlLnNuYXBzUGVyU2xvdCk7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmRhdGVFbnYuYWRkKHREYXRlUHJvZmlsZS5zbG90RGF0ZXNbc2xhdEluZGV4XSwgbXVsdGlwbHlEdXJhdGlvbih0RGF0ZVByb2ZpbGUuc25hcER1cmF0aW9uLCBsb2NhbFNuYXBJbmRleCkpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMuZGF0ZUVudi5hZGQoc3RhcnQsIHREYXRlUHJvZmlsZS5zbmFwRHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRlU3Bhbjoge1xuICAgICAgICAgICAgICAgICAgICByYW5nZTogeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0sXG4gICAgICAgICAgICAgICAgICAgIGFsbERheTogIXRoaXMucHJvcHMudERhdGVQcm9maWxlLmlzVGltZVNjYWxlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXlFbDogdGhpcy5zbGF0Q29sRWxzW3NsYXRJbmRleF0sXG4gICAgICAgICAgICAgICAgbGVmdDogb3V0ZXJDb29yZENhY2hlLmxlZnRzW3NsYXRJbmRleF0sXG4gICAgICAgICAgICAgICAgcmlnaHQ6IG91dGVyQ29vcmRDYWNoZS5yaWdodHNbc2xhdEluZGV4XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBUaW1lbGluZVNsYXRzO1xufShDb21wb25lbnQpKTtcblxudmFyIE1JTl9BVVRPX0xBQkVMUyA9IDE4OyAvLyBtb3JlIHRoYW4gYDEyYCBtb250aHMgYnV0IGxlc3MgdGhhdCBgMjRgIGhvdXJzXG52YXIgTUFYX0FVVE9fU0xPVFNfUEVSX0xBQkVMID0gNjsgLy8gYWxsb3dzIDYgMTAtbWluIHNsb3RzIGluIGFuIGhvdXJcbnZhciBNQVhfQVVUT19DRUxMUyA9IDIwMDsgLy8gYWxsb3dzIDQtZGF5cyB0byBoYXZlIGEgOjMwIHNsb3QgZHVyYXRpb25cbmNvbmZpZy5NQVhfVElNRUxJTkVfU0xPVFMgPSAxMDAwO1xuLy8gcG90ZW50aWFsIG5pY2UgdmFsdWVzIGZvciBzbG90LWR1cmF0aW9uIGFuZCBpbnRlcnZhbC1kdXJhdGlvblxudmFyIFNUT0NLX1NVQl9EVVJBVElPTlMgPSBbXG4gICAgeyB5ZWFyczogMSB9LFxuICAgIHsgbW9udGhzOiAxIH0sXG4gICAgeyBkYXlzOiAxIH0sXG4gICAgeyBob3VyczogMSB9LFxuICAgIHsgbWludXRlczogMzAgfSxcbiAgICB7IG1pbnV0ZXM6IDE1IH0sXG4gICAgeyBtaW51dGVzOiAxMCB9LFxuICAgIHsgbWludXRlczogNSB9LFxuICAgIHsgbWludXRlczogMSB9LFxuICAgIHsgc2Vjb25kczogMzAgfSxcbiAgICB7IHNlY29uZHM6IDE1IH0sXG4gICAgeyBzZWNvbmRzOiAxMCB9LFxuICAgIHsgc2Vjb25kczogNSB9LFxuICAgIHsgc2Vjb25kczogMSB9LFxuICAgIHsgbWlsbGlzZWNvbmRzOiA1MDAgfSxcbiAgICB7IG1pbGxpc2Vjb25kczogMTAwIH0sXG4gICAgeyBtaWxsaXNlY29uZHM6IDEwIH0sXG4gICAgeyBtaWxsaXNlY29uZHM6IDEgfVxuXTtcbmZ1bmN0aW9uIGJ1aWxkVGltZWxpbmVEYXRlUHJvZmlsZShkYXRlUHJvZmlsZSwgdmlldykge1xuICAgIHZhciBkYXRlRW52ID0gdmlldy5kYXRlRW52O1xuICAgIHZhciB0RGF0ZVByb2ZpbGUgPSB7XG4gICAgICAgIGxhYmVsSW50ZXJ2YWw6IHF1ZXJ5RHVyYXRpb25PcHRpb24odmlldywgJ3Nsb3RMYWJlbEludGVydmFsJyksXG4gICAgICAgIHNsb3REdXJhdGlvbjogcXVlcnlEdXJhdGlvbk9wdGlvbih2aWV3LCAnc2xvdER1cmF0aW9uJylcbiAgICB9O1xuICAgIHZhbGlkYXRlTGFiZWxBbmRTbG90KHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpOyAvLyB2YWxpZGF0ZSBhZnRlciBjb21wdXRlZCBncmlkIGR1cmF0aW9uXG4gICAgZW5zdXJlTGFiZWxJbnRlcnZhbCh0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KTtcbiAgICBlbnN1cmVTbG90RHVyYXRpb24odERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudik7XG4gICAgdmFyIGlucHV0ID0gdmlldy5vcHQoJ3Nsb3RMYWJlbEZvcm1hdCcpO1xuICAgIHZhciByYXdGb3JtYXRzID0gQXJyYXkuaXNBcnJheShpbnB1dCkgP1xuICAgICAgICBpbnB1dFxuICAgICAgICA6IChpbnB1dCAhPSBudWxsKSA/XG4gICAgICAgICAgICBbaW5wdXRdXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY29tcHV0ZUhlYWRlckZvcm1hdHModERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudiwgdmlldyk7XG4gICAgdERhdGVQcm9maWxlLmhlYWRlckZvcm1hdHMgPSByYXdGb3JtYXRzLm1hcChmdW5jdGlvbiAocmF3Rm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVGb3JtYXR0ZXIocmF3Rm9ybWF0KTtcbiAgICB9KTtcbiAgICB0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUgPSBCb29sZWFuKHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24ubWlsbGlzZWNvbmRzKTtcbiAgICB2YXIgbGFyZ2VVbml0ID0gbnVsbDtcbiAgICBpZiAoIXREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSkge1xuICAgICAgICB2YXIgc2xvdFVuaXQgPSBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IodERhdGVQcm9maWxlLnNsb3REdXJhdGlvbikudW5pdDtcbiAgICAgICAgaWYgKC95ZWFyfG1vbnRofHdlZWsvLnRlc3Qoc2xvdFVuaXQpKSB7XG4gICAgICAgICAgICBsYXJnZVVuaXQgPSBzbG90VW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0RGF0ZVByb2ZpbGUubGFyZ2VVbml0ID0gbGFyZ2VVbml0O1xuICAgIHREYXRlUHJvZmlsZS5lbXBoYXNpemVXZWVrcyA9XG4gICAgICAgIGlzU2luZ2xlRGF5KHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pICYmXG4gICAgICAgICAgICBjdXJyZW50UmFuZ2VBcygnd2Vla3MnLCBkYXRlUHJvZmlsZSwgZGF0ZUVudikgPj0gMiAmJlxuICAgICAgICAgICAgIXZpZXcub3B0KCdidXNpbmVzc0hvdXJzJyk7XG4gICAgLypcbiAgICBjb25zb2xlLmxvZygnbGFiZWwgaW50ZXJ2YWwgPScsIHRpbWVsaW5lVmlldy5sYWJlbEludGVydmFsLmh1bWFuaXplKCkpXG4gICAgY29uc29sZS5sb2coJ3Nsb3QgZHVyYXRpb24gPScsIHRpbWVsaW5lVmlldy5zbG90RHVyYXRpb24uaHVtYW5pemUoKSlcbiAgICBjb25zb2xlLmxvZygnaGVhZGVyIGZvcm1hdHMgPScsIHRpbWVsaW5lVmlldy5oZWFkZXJGb3JtYXRzKVxuICAgIGNvbnNvbGUubG9nKCdpc1RpbWVTY2FsZScsIHRpbWVsaW5lVmlldy5pc1RpbWVTY2FsZSlcbiAgICBjb25zb2xlLmxvZygnbGFyZ2VVbml0JywgdGltZWxpbmVWaWV3LmxhcmdlVW5pdClcbiAgICAqL1xuICAgIHZhciByYXdTbmFwRHVyYXRpb24gPSB2aWV3Lm9wdCgnc25hcER1cmF0aW9uJyk7XG4gICAgdmFyIHNuYXBEdXJhdGlvbjtcbiAgICB2YXIgc25hcHNQZXJTbG90O1xuICAgIGlmIChyYXdTbmFwRHVyYXRpb24pIHtcbiAgICAgICAgc25hcER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocmF3U25hcER1cmF0aW9uKTtcbiAgICAgICAgc25hcHNQZXJTbG90ID0gd2hvbGVEaXZpZGVEdXJhdGlvbnModERhdGVQcm9maWxlLnNsb3REdXJhdGlvbiwgc25hcER1cmF0aW9uKTtcbiAgICAgICAgLy8gXiBUT0RPOiB3YXJuaW5nIGlmIG5vdCB3aG9sZT9cbiAgICB9XG4gICAgaWYgKHNuYXBzUGVyU2xvdCA9PSBudWxsKSB7XG4gICAgICAgIHNuYXBEdXJhdGlvbiA9IHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb247XG4gICAgICAgIHNuYXBzUGVyU2xvdCA9IDE7XG4gICAgfVxuICAgIHREYXRlUHJvZmlsZS5zbmFwRHVyYXRpb24gPSBzbmFwRHVyYXRpb247XG4gICAgdERhdGVQcm9maWxlLnNuYXBzUGVyU2xvdCA9IHNuYXBzUGVyU2xvdDtcbiAgICAvLyBtb3JlLi4uXG4gICAgdmFyIHRpbWVXaW5kb3dNcyA9IGFzUm91Z2hNcyhkYXRlUHJvZmlsZS5tYXhUaW1lKSAtIGFzUm91Z2hNcyhkYXRlUHJvZmlsZS5taW5UaW1lKTtcbiAgICAvLyBUT0RPOiB3aHkgbm90IHVzZSBub3JtYWxpemVSYW5nZSE/XG4gICAgdmFyIG5vcm1hbGl6ZWRTdGFydCA9IG5vcm1hbGl6ZURhdGUoZGF0ZVByb2ZpbGUucmVuZGVyUmFuZ2Uuc3RhcnQsIHREYXRlUHJvZmlsZSwgZGF0ZUVudik7XG4gICAgdmFyIG5vcm1hbGl6ZWRFbmQgPSBub3JtYWxpemVEYXRlKGRhdGVQcm9maWxlLnJlbmRlclJhbmdlLmVuZCwgdERhdGVQcm9maWxlLCBkYXRlRW52KTtcbiAgICAvLyBhcHBseSBtaW5UaW1lL21heFRpbWVcbiAgICAvLyBUT0RPOiBWaWV3IHNob3VsZCBiZSByZXNwb25zaWJsZS5cbiAgICBpZiAodERhdGVQcm9maWxlLmlzVGltZVNjYWxlKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRTdGFydCA9IGRhdGVFbnYuYWRkKG5vcm1hbGl6ZWRTdGFydCwgZGF0ZVByb2ZpbGUubWluVGltZSk7XG4gICAgICAgIG5vcm1hbGl6ZWRFbmQgPSBkYXRlRW52LmFkZChhZGREYXlzKG5vcm1hbGl6ZWRFbmQsIC0xKSwgZGF0ZVByb2ZpbGUubWF4VGltZSk7XG4gICAgfVxuICAgIHREYXRlUHJvZmlsZS50aW1lV2luZG93TXMgPSB0aW1lV2luZG93TXM7XG4gICAgdERhdGVQcm9maWxlLm5vcm1hbGl6ZWRSYW5nZSA9IHsgc3RhcnQ6IG5vcm1hbGl6ZWRTdGFydCwgZW5kOiBub3JtYWxpemVkRW5kIH07XG4gICAgdmFyIHNsb3REYXRlcyA9IFtdO1xuICAgIHZhciBkYXRlID0gbm9ybWFsaXplZFN0YXJ0O1xuICAgIHdoaWxlIChkYXRlIDwgbm9ybWFsaXplZEVuZCkge1xuICAgICAgICBpZiAoaXNWYWxpZERhdGUoZGF0ZSwgdERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgdmlldykpIHtcbiAgICAgICAgICAgIHNsb3REYXRlcy5wdXNoKGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGUgPSBkYXRlRW52LmFkZChkYXRlLCB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKTtcbiAgICB9XG4gICAgdERhdGVQcm9maWxlLnNsb3REYXRlcyA9IHNsb3REYXRlcztcbiAgICAvLyBtb3JlLi4uXG4gICAgdmFyIHNuYXBJbmRleCA9IC0xO1xuICAgIHZhciBzbmFwRGlmZiA9IDA7IC8vIGluZGV4IG9mIHRoZSBkaWZmIDooXG4gICAgdmFyIHNuYXBEaWZmVG9JbmRleCA9IFtdO1xuICAgIHZhciBzbmFwSW5kZXhUb0RpZmYgPSBbXTtcbiAgICBkYXRlID0gbm9ybWFsaXplZFN0YXJ0O1xuICAgIHdoaWxlIChkYXRlIDwgbm9ybWFsaXplZEVuZCkge1xuICAgICAgICBpZiAoaXNWYWxpZERhdGUoZGF0ZSwgdERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgdmlldykpIHtcbiAgICAgICAgICAgIHNuYXBJbmRleCsrO1xuICAgICAgICAgICAgc25hcERpZmZUb0luZGV4LnB1c2goc25hcEluZGV4KTtcbiAgICAgICAgICAgIHNuYXBJbmRleFRvRGlmZi5wdXNoKHNuYXBEaWZmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNuYXBEaWZmVG9JbmRleC5wdXNoKHNuYXBJbmRleCArIDAuNSk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0ZSA9IGRhdGVFbnYuYWRkKGRhdGUsIHREYXRlUHJvZmlsZS5zbmFwRHVyYXRpb24pO1xuICAgICAgICBzbmFwRGlmZisrO1xuICAgIH1cbiAgICB0RGF0ZVByb2ZpbGUuc25hcERpZmZUb0luZGV4ID0gc25hcERpZmZUb0luZGV4O1xuICAgIHREYXRlUHJvZmlsZS5zbmFwSW5kZXhUb0RpZmYgPSBzbmFwSW5kZXhUb0RpZmY7XG4gICAgdERhdGVQcm9maWxlLnNuYXBDbnQgPSBzbmFwSW5kZXggKyAxOyAvLyBpcyBhbHdheXMgb25lIGJlaGluZFxuICAgIHREYXRlUHJvZmlsZS5zbG90Q250ID0gdERhdGVQcm9maWxlLnNuYXBDbnQgLyB0RGF0ZVByb2ZpbGUuc25hcHNQZXJTbG90O1xuICAgIC8vIG1vcmUuLi5cbiAgICB0RGF0ZVByb2ZpbGUuaXNXZWVrU3RhcnRzID0gYnVpbGRJc1dlZWtTdGFydHModERhdGVQcm9maWxlLCBkYXRlRW52KTtcbiAgICB0RGF0ZVByb2ZpbGUuY2VsbFJvd3MgPSBidWlsZENlbGxSb3dzKHREYXRlUHJvZmlsZSwgZGF0ZUVudiwgdmlldyk7XG4gICAgcmV0dXJuIHREYXRlUHJvZmlsZTtcbn1cbi8qXG5zbmFwcyB0byBhcHByb3ByaWF0ZSB1bml0XG4qL1xuZnVuY3Rpb24gbm9ybWFsaXplRGF0ZShkYXRlLCB0RGF0ZVByb2ZpbGUsIGRhdGVFbnYpIHtcbiAgICB2YXIgbm9ybWFsRGF0ZSA9IGRhdGU7XG4gICAgaWYgKCF0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgbm9ybWFsRGF0ZSA9IHN0YXJ0T2ZEYXkobm9ybWFsRGF0ZSk7XG4gICAgICAgIGlmICh0RGF0ZVByb2ZpbGUubGFyZ2VVbml0KSB7XG4gICAgICAgICAgICBub3JtYWxEYXRlID0gZGF0ZUVudi5zdGFydE9mKG5vcm1hbERhdGUsIHREYXRlUHJvZmlsZS5sYXJnZVVuaXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxEYXRlO1xufVxuLypcbnNuYXBzIHRvIGFwcHJvcHJpYXRlIHVuaXRcbiovXG5mdW5jdGlvbiBub3JtYWxpemVSYW5nZShyYW5nZSwgdERhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgaWYgKCF0RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGUpIHtcbiAgICAgICAgcmFuZ2UgPSBjb21wdXRlVmlzaWJsZURheVJhbmdlKHJhbmdlKTtcbiAgICAgICAgaWYgKHREYXRlUHJvZmlsZS5sYXJnZVVuaXQpIHtcbiAgICAgICAgICAgIHZhciBkYXlSYW5nZSA9IHJhbmdlOyAvLyBwcmVzZXJ2ZSBvcmlnaW5hbCByZXN1bHRcbiAgICAgICAgICAgIHJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnN0YXJ0T2YocmFuZ2Uuc3RhcnQsIHREYXRlUHJvZmlsZS5sYXJnZVVuaXQpLFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5zdGFydE9mKHJhbmdlLmVuZCwgdERhdGVQcm9maWxlLmxhcmdlVW5pdClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBpZiBkYXRlIGlzIHBhcnRpYWxseSB0aHJvdWdoIHRoZSBpbnRlcnZhbCwgb3IgaXMgaW4gdGhlIHNhbWUgaW50ZXJ2YWwgYXMgdGhlIHN0YXJ0LFxuICAgICAgICAgICAgLy8gbWFrZSB0aGUgZXhjbHVzaXZlIGVuZCBiZSB0aGUgKm5leHQqIGludGVydmFsXG4gICAgICAgICAgICBpZiAocmFuZ2UuZW5kLnZhbHVlT2YoKSAhPT0gZGF5UmFuZ2UuZW5kLnZhbHVlT2YoKSB8fCByYW5nZS5lbmQgPD0gcmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbnYuYWRkKHJhbmdlLmVuZCwgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW5nZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWREYXRlKGRhdGUsIHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIHZpZXcpIHtcbiAgICBpZiAodmlldy5kYXRlUHJvZmlsZUdlbmVyYXRvci5pc0hpZGRlbkRheShkYXRlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSkge1xuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgdGhlIHRpbWUgaXMgd2l0aGluIG1pblRpbWUvbWF4VGltZSwgd2hpY2ggbWF5IGhhdmUgd2Fja3kgdmFsdWVzXG4gICAgICAgIHZhciBkYXkgPSBzdGFydE9mRGF5KGRhdGUpO1xuICAgICAgICB2YXIgdGltZU1zID0gZGF0ZS52YWx1ZU9mKCkgLSBkYXkudmFsdWVPZigpO1xuICAgICAgICB2YXIgbXMgPSB0aW1lTXMgLSBhc1JvdWdoTXMoZGF0ZVByb2ZpbGUubWluVGltZSk7IC8vIG1pbGxpc2Vjb25kcyBzaW5jZSBtaW5UaW1lXG4gICAgICAgIG1zID0gKChtcyAlIDg2NDAwMDAwKSArIDg2NDAwMDAwKSAlIDg2NDAwMDAwOyAvLyBtYWtlIG5lZ2F0aXZlIHZhbHVlcyB3cmFwIHRvIDI0aHIgY2xvY2tcbiAgICAgICAgcmV0dXJuIG1zIDwgdERhdGVQcm9maWxlLnRpbWVXaW5kb3dNczsgLy8gYmVmb3JlIHRoZSBtYXhUaW1lP1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gcXVlcnlEdXJhdGlvbk9wdGlvbih2aWV3LCBuYW1lKSB7XG4gICAgdmFyIGlucHV0ID0gdmlldy5vcHQobmFtZSk7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKGlucHV0KTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUxhYmVsQW5kU2xvdCh0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgdmFyIGN1cnJlbnRSYW5nZSA9IGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZTtcbiAgICAvLyBtYWtlIHN1cmUgbGFiZWxJbnRlcnZhbCBkb2Vzbid0IGV4Y2VlZCB0aGUgbWF4IG51bWJlciBvZiBjZWxsc1xuICAgIGlmICh0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCkge1xuICAgICAgICB2YXIgbGFiZWxDbnQgPSBkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2VlbihjdXJyZW50UmFuZ2Uuc3RhcnQsIGN1cnJlbnRSYW5nZS5lbmQsIHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsKTtcbiAgICAgICAgaWYgKGxhYmVsQ250ID4gY29uZmlnLk1BWF9USU1FTElORV9TTE9UUykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdzbG90TGFiZWxJbnRlcnZhbCByZXN1bHRzIGluIHRvbyBtYW55IGNlbGxzJyk7XG4gICAgICAgICAgICB0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHNsb3REdXJhdGlvbiBkb2Vzbid0IGV4Y2VlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2VsbHNcbiAgICBpZiAodERhdGVQcm9maWxlLnNsb3REdXJhdGlvbikge1xuICAgICAgICB2YXIgc2xvdENudCA9IGRhdGVFbnYuY291bnREdXJhdGlvbnNCZXR3ZWVuKGN1cnJlbnRSYW5nZS5zdGFydCwgY3VycmVudFJhbmdlLmVuZCwgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbik7XG4gICAgICAgIGlmIChzbG90Q250ID4gY29uZmlnLk1BWF9USU1FTElORV9TTE9UUykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdzbG90RHVyYXRpb24gcmVzdWx0cyBpbiB0b28gbWFueSBjZWxscycpO1xuICAgICAgICAgICAgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIGxhYmVsSW50ZXJ2YWwgaXMgYSBtdWx0aXBsZSBvZiBzbG90RHVyYXRpb25cbiAgICBpZiAodERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwgJiYgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbikge1xuICAgICAgICB2YXIgc2xvdHNQZXJMYWJlbCA9IHdob2xlRGl2aWRlRHVyYXRpb25zKHREYXRlUHJvZmlsZS5sYWJlbEludGVydmFsLCB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKTtcbiAgICAgICAgaWYgKHNsb3RzUGVyTGFiZWwgPT09IG51bGwgfHwgc2xvdHNQZXJMYWJlbCA8IDEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2xvdExhYmVsSW50ZXJ2YWwgbXVzdCBiZSBhIG11bHRpcGxlIG9mIHNsb3REdXJhdGlvbicpO1xuICAgICAgICAgICAgdERhdGVQcm9maWxlLnNsb3REdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlbnN1cmVMYWJlbEludGVydmFsKHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpIHtcbiAgICB2YXIgY3VycmVudFJhbmdlID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlO1xuICAgIHZhciBsYWJlbEludGVydmFsID0gdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWw7XG4gICAgaWYgKCFsYWJlbEludGVydmFsKSB7XG4gICAgICAgIC8vIGNvbXB1dGUgYmFzZWQgb2ZmIHRoZSBzbG90IGR1cmF0aW9uXG4gICAgICAgIC8vIGZpbmQgdGhlIGxhcmdlc3QgbGFiZWwgaW50ZXJ2YWwgd2l0aCBhbiBhY2NlcHRhYmxlIHNsb3RzLXBlci1sYWJlbFxuICAgICAgICB2YXIgaW5wdXQgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIFNUT0NLX1NVQl9EVVJBVElPTlNfMSA9IFNUT0NLX1NVQl9EVVJBVElPTlM7IF9pIDwgU1RPQ0tfU1VCX0RVUkFUSU9OU18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gU1RPQ0tfU1VCX0RVUkFUSU9OU18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgdHJ5TGFiZWxJbnRlcnZhbCA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0KTtcbiAgICAgICAgICAgICAgICB2YXIgc2xvdHNQZXJMYWJlbCA9IHdob2xlRGl2aWRlRHVyYXRpb25zKHRyeUxhYmVsSW50ZXJ2YWwsIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChzbG90c1BlckxhYmVsICE9PSBudWxsICYmIHNsb3RzUGVyTGFiZWwgPD0gTUFYX0FVVE9fU0xPVFNfUEVSX0xBQkVMKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsSW50ZXJ2YWwgPSB0cnlMYWJlbEludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB1c2UgdGhlIHNsb3QgZHVyYXRpb24gYXMgYSBsYXN0IHJlc29ydFxuICAgICAgICAgICAgaWYgKCFsYWJlbEludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxJbnRlcnZhbCA9IHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb21wdXRlIGJhc2VkIG9mZiB0aGUgdmlldydzIGR1cmF0aW9uXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBsYXJnZXN0IGxhYmVsIGludGVydmFsIHRoYXQgeWllbGRzIHRoZSBtaW5pbXVtIG51bWJlciBvZiBsYWJlbHNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgU1RPQ0tfU1VCX0RVUkFUSU9OU18yID0gU1RPQ0tfU1VCX0RVUkFUSU9OUzsgX2EgPCBTVE9DS19TVUJfRFVSQVRJT05TXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBTVE9DS19TVUJfRFVSQVRJT05TXzJbX2FdO1xuICAgICAgICAgICAgICAgIGxhYmVsSW50ZXJ2YWwgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCk7XG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsQ250ID0gZGF0ZUVudi5jb3VudER1cmF0aW9uc0JldHdlZW4oY3VycmVudFJhbmdlLnN0YXJ0LCBjdXJyZW50UmFuZ2UuZW5kLCBsYWJlbEludGVydmFsKTtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxDbnQgPj0gTUlOX0FVVE9fTEFCRUxTKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCA9IGxhYmVsSW50ZXJ2YWw7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbEludGVydmFsO1xufVxuZnVuY3Rpb24gZW5zdXJlU2xvdER1cmF0aW9uKHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpIHtcbiAgICB2YXIgY3VycmVudFJhbmdlID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlO1xuICAgIHZhciBzbG90RHVyYXRpb24gPSB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uO1xuICAgIGlmICghc2xvdER1cmF0aW9uKSB7XG4gICAgICAgIHZhciBsYWJlbEludGVydmFsID0gZW5zdXJlTGFiZWxJbnRlcnZhbCh0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCBkYXRlRW52KTsgLy8gd2lsbCBjb21wdXRlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAvLyBjb21wdXRlIGJhc2VkIG9mZiB0aGUgbGFiZWwgaW50ZXJ2YWxcbiAgICAgICAgLy8gZmluZCB0aGUgbGFyZ2VzdCBzbG90IGR1cmF0aW9uIHRoYXQgaXMgZGlmZmVyZW50IGZyb20gbGFiZWxJbnRlcnZhbCwgYnV0IHN0aWxsIGFjY2VwdGFibGVcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBTVE9DS19TVUJfRFVSQVRJT05TXzMgPSBTVE9DS19TVUJfRFVSQVRJT05TOyBfaSA8IFNUT0NLX1NVQl9EVVJBVElPTlNfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IFNUT0NLX1NVQl9EVVJBVElPTlNfM1tfaV07XG4gICAgICAgICAgICB2YXIgdHJ5U2xvdER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24oaW5wdXQpO1xuICAgICAgICAgICAgdmFyIHNsb3RzUGVyTGFiZWwgPSB3aG9sZURpdmlkZUR1cmF0aW9ucyhsYWJlbEludGVydmFsLCB0cnlTbG90RHVyYXRpb24pO1xuICAgICAgICAgICAgaWYgKHNsb3RzUGVyTGFiZWwgIT09IG51bGwgJiYgc2xvdHNQZXJMYWJlbCA+IDEgJiYgc2xvdHNQZXJMYWJlbCA8PSBNQVhfQVVUT19TTE9UU19QRVJfTEFCRUwpIHtcbiAgICAgICAgICAgICAgICBzbG90RHVyYXRpb24gPSB0cnlTbG90RHVyYXRpb247XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSBhbGxvdyB0aGUgdmFsdWUgaWYgaXQgd29uJ3QgZXhjZWVkIHRoZSB2aWV3J3MgIyBvZiBzbG90cyBsaW1pdFxuICAgICAgICBpZiAoc2xvdER1cmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc2xvdENudCA9IGRhdGVFbnYuY291bnREdXJhdGlvbnNCZXR3ZWVuKGN1cnJlbnRSYW5nZS5zdGFydCwgY3VycmVudFJhbmdlLmVuZCwgc2xvdER1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChzbG90Q250ID4gTUFYX0FVVE9fQ0VMTFMpIHtcbiAgICAgICAgICAgICAgICBzbG90RHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVzZSB0aGUgbGFiZWwgaW50ZXJ2YWwgYXMgYSBsYXN0IHJlc29ydFxuICAgICAgICBpZiAoIXNsb3REdXJhdGlvbikge1xuICAgICAgICAgICAgc2xvdER1cmF0aW9uID0gbGFiZWxJbnRlcnZhbDtcbiAgICAgICAgfVxuICAgICAgICB0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uID0gc2xvdER1cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gc2xvdER1cmF0aW9uO1xufVxuZnVuY3Rpb24gY29tcHV0ZUhlYWRlckZvcm1hdHModERhdGVQcm9maWxlLCBkYXRlUHJvZmlsZSwgZGF0ZUVudiwgdmlldykge1xuICAgIHZhciBmb3JtYXQxO1xuICAgIHZhciBmb3JtYXQyO1xuICAgIHZhciBsYWJlbEludGVydmFsID0gdERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWw7XG4gICAgdmFyIHVuaXQgPSBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IobGFiZWxJbnRlcnZhbCkudW5pdDtcbiAgICB2YXIgd2Vla051bWJlcnNWaXNpYmxlID0gdmlldy5vcHQoJ3dlZWtOdW1iZXJzJyk7XG4gICAgdmFyIGZvcm1hdDAgPSAoZm9ybWF0MSA9IChmb3JtYXQyID0gbnVsbCkpO1xuICAgIC8vIE5PVEU6IHdlZWtOdW1iZXIgY29tcHV0YXRpb24gZnVuY3Rpb24gd29udCB3b3JrXG4gICAgaWYgKCh1bml0ID09PSAnd2VlaycpICYmICF3ZWVrTnVtYmVyc1Zpc2libGUpIHtcbiAgICAgICAgdW5pdCA9ICdkYXknO1xuICAgIH1cbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICBmb3JtYXQwID0geyB5ZWFyOiAnbnVtZXJpYycgfTsgLy8gJzIwMTUnXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYW5nZUFzKCd5ZWFycycsIGRhdGVQcm9maWxlLCBkYXRlRW52KSA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0geyB5ZWFyOiAnbnVtZXJpYycgfTsgLy8gJzIwMTUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtYXQxID0geyBtb250aDogJ3Nob3J0JyB9OyAvLyAnSmFuJ1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYW5nZUFzKCd5ZWFycycsIGRhdGVQcm9maWxlLCBkYXRlRW52KSA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0geyB5ZWFyOiAnbnVtZXJpYycgfTsgLy8gJzIwMTUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtYXQxID0geyB3ZWVrOiAnbmFycm93JyB9OyAvLyAnV2s0J1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBpZiAoY3VycmVudFJhbmdlQXMoJ3llYXJzJywgZGF0ZVByb2ZpbGUsIGRhdGVFbnYpID4gMSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdDAgPSB7IHllYXI6ICdudW1lcmljJywgbW9udGg6ICdsb25nJyB9OyAvLyAnSmFudWFyeSAyMDE0J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudFJhbmdlQXMoJ21vbnRocycsIGRhdGVQcm9maWxlLCBkYXRlRW52KSA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0geyBtb250aDogJ2xvbmcnIH07IC8vICdKYW51YXJ5J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdlZWtOdW1iZXJzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdDEgPSB7IHdlZWs6ICdzaG9ydCcgfTsgLy8gJ1drIDQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtYXQyID0geyB3ZWVrZGF5OiAnbmFycm93JywgZGF5OiAnbnVtZXJpYycgfTsgLy8gJ1N1IDknXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICBpZiAod2Vla051bWJlcnNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHsgd2VlazogJ3Nob3J0JyB9OyAvLyAnV2sgNCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFuZ2VBcygnZGF5cycsIGRhdGVQcm9maWxlLCBkYXRlRW52KSA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQxID0geyB3ZWVrZGF5OiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJywgbW9udGg6ICdudW1lcmljJywgb21pdENvbW1hczogdHJ1ZSB9OyAvLyBTYXQgNC83XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtYXQyID0ge1xuICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgICAgICBvbWl0WmVyb01pbnV0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXJpZGllbTogJ3Nob3J0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgLy8gc3VmZmljaWVudGx5IGxhcmdlIG51bWJlciBvZiBkaWZmZXJlbnQgbWludXRlIGNlbGxzP1xuICAgICAgICAgICAgaWYgKChhc1JvdWdoTWludXRlcyhsYWJlbEludGVydmFsKSAvIDYwKSA+PSBNQVhfQVVUT19TTE9UU19QRVJfTEFCRUwpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQwID0ge1xuICAgICAgICAgICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtOiAnc2hvcnQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmb3JtYXQxID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzonICsgcGFkU3RhcnQocGFyYW1zLmRhdGUubWludXRlLCAyKTsgLy8gJzozMCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgICAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW06ICdzaG9ydCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAvLyBzdWZmaWNpZW50bHkgbGFyZ2UgbnVtYmVyIG9mIGRpZmZlcmVudCBzZWNvbmQgY2VsbHM/XG4gICAgICAgICAgICBpZiAoKGFzUm91Z2hTZWNvbmRzKGxhYmVsSW50ZXJ2YWwpIC8gNjApID49IE1BWF9BVVRPX1NMT1RTX1BFUl9MQUJFTCkge1xuICAgICAgICAgICAgICAgIGZvcm1hdDAgPSB7IGhvdXI6ICdudW1lcmljJywgbWludXRlOiAnMi1kaWdpdCcsIG1lcmlkaWVtOiAnbG93ZXJjYXNlJyB9OyAvLyAnODozMCBQTSdcbiAgICAgICAgICAgICAgICBmb3JtYXQxID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzonICsgcGFkU3RhcnQocGFyYW1zLmRhdGUuc2Vjb25kLCAyKTsgLy8gJzozMCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0MCA9IHsgaG91cjogJ251bWVyaWMnLCBtaW51dGU6ICcyLWRpZ2l0Jywgc2Vjb25kOiAnMi1kaWdpdCcsIG1lcmlkaWVtOiAnbG93ZXJjYXNlJyB9OyAvLyAnODozMDo0NSBQTSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgICAgICBmb3JtYXQwID0geyBob3VyOiAnbnVtZXJpYycsIG1pbnV0ZTogJzItZGlnaXQnLCBzZWNvbmQ6ICcyLWRpZ2l0JywgbWVyaWRpZW06ICdsb3dlcmNhc2UnIH07IC8vICc4OjMwOjQ1IFBNJ1xuICAgICAgICAgICAgZm9ybWF0MSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy4nICsgcGFkU3RhcnQocGFyYW1zLm1pbGxpc2Vjb25kLCAzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIFtdLmNvbmNhdChmb3JtYXQwIHx8IFtdLCBmb3JtYXQxIHx8IFtdLCBmb3JtYXQyIHx8IFtdKTtcbn1cbi8vIENvbXB1dGUgdGhlIG51bWJlciBvZiB0aGUgZ2l2ZSB1bml0cyBpbiB0aGUgXCJjdXJyZW50XCIgcmFuZ2UuXG4vLyBXb24ndCBnbyBtb3JlIHByZWNpc2UgdGhhbiBkYXlzLlxuLy8gV2lsbCByZXR1cm4gYDBgIGlmIHRoZXJlJ3Mgbm90IGEgY2xlYW4gd2hvbGUgaW50ZXJ2YWwuXG5mdW5jdGlvbiBjdXJyZW50UmFuZ2VBcyh1bml0LCBkYXRlUHJvZmlsZSwgZGF0ZUVudikge1xuICAgIHZhciByYW5nZSA9IGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZTtcbiAgICB2YXIgcmVzID0gbnVsbDtcbiAgICBpZiAodW5pdCA9PT0gJ3llYXJzJykge1xuICAgICAgICByZXMgPSBkYXRlRW52LmRpZmZXaG9sZVllYXJzKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0ID09PSAnbW9udGhzJykge1xuICAgICAgICByZXMgPSBkYXRlRW52LmRpZmZXaG9sZU1vbnRocyhyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdCA9PT0gJ3dlZWtzJykge1xuICAgICAgICByZXMgPSBkYXRlRW52LmRpZmZXaG9sZU1vbnRocyhyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdCA9PT0gJ2RheXMnKSB7XG4gICAgICAgIHJlcyA9IGRpZmZXaG9sZURheXMocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgfVxuICAgIHJldHVybiByZXMgfHwgMDtcbn1cbmZ1bmN0aW9uIGJ1aWxkSXNXZWVrU3RhcnRzKHREYXRlUHJvZmlsZSwgZGF0ZUVudikge1xuICAgIHZhciBzbG90RGF0ZXMgPSB0RGF0ZVByb2ZpbGUuc2xvdERhdGVzLCBlbXBoYXNpemVXZWVrcyA9IHREYXRlUHJvZmlsZS5lbXBoYXNpemVXZWVrcztcbiAgICB2YXIgcHJldldlZWtOdW1iZXIgPSBudWxsO1xuICAgIHZhciBpc1dlZWtTdGFydHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHNsb3REYXRlc18xID0gc2xvdERhdGVzOyBfaSA8IHNsb3REYXRlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc2xvdERhdGUgPSBzbG90RGF0ZXNfMVtfaV07XG4gICAgICAgIHZhciB3ZWVrTnVtYmVyID0gZGF0ZUVudi5jb21wdXRlV2Vla051bWJlcihzbG90RGF0ZSk7XG4gICAgICAgIHZhciBpc1dlZWtTdGFydCA9IGVtcGhhc2l6ZVdlZWtzICYmIChwcmV2V2Vla051bWJlciAhPT0gbnVsbCkgJiYgKHByZXZXZWVrTnVtYmVyICE9PSB3ZWVrTnVtYmVyKTtcbiAgICAgICAgcHJldldlZWtOdW1iZXIgPSB3ZWVrTnVtYmVyO1xuICAgICAgICBpc1dlZWtTdGFydHMucHVzaChpc1dlZWtTdGFydCk7XG4gICAgfVxuICAgIHJldHVybiBpc1dlZWtTdGFydHM7XG59XG5mdW5jdGlvbiBidWlsZENlbGxSb3dzKHREYXRlUHJvZmlsZSwgZGF0ZUVudiwgdmlldykge1xuICAgIHZhciBzbG90RGF0ZXMgPSB0RGF0ZVByb2ZpbGUuc2xvdERhdGVzO1xuICAgIHZhciBmb3JtYXRzID0gdERhdGVQcm9maWxlLmhlYWRlckZvcm1hdHM7XG4gICAgdmFyIGNlbGxSb3dzID0gZm9ybWF0cy5tYXAoZnVuY3Rpb24gKGZvcm1hdCkgeyByZXR1cm4gW107IH0pOyAvLyBpbmRleGVkIGJ5IHJvdyxjb2xcbiAgICAvLyBzcGVjaWZpY2FsbHkgZm9yIG5hdmNsaWNrc1xuICAgIHZhciByb3dVbml0cyA9IGZvcm1hdHMubWFwKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdC5nZXRMYXJnZXN0VW5pdCA/IGZvcm1hdC5nZXRMYXJnZXN0VW5pdCgpIDogbnVsbDtcbiAgICB9KTtcbiAgICAvLyBidWlsZHMgY2VsbFJvd3MgYW5kIHNsb3RDZWxsc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xvdERhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkYXRlID0gc2xvdERhdGVzW2ldO1xuICAgICAgICB2YXIgaXNXZWVrU3RhcnQgPSB0RGF0ZVByb2ZpbGUuaXNXZWVrU3RhcnRzW2ldO1xuICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBmb3JtYXRzLmxlbmd0aDsgcm93KyspIHtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzW3Jvd107XG4gICAgICAgICAgICB2YXIgcm93Q2VsbHMgPSBjZWxsUm93c1tyb3ddO1xuICAgICAgICAgICAgdmFyIGxlYWRpbmdDZWxsID0gcm93Q2VsbHNbcm93Q2VsbHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB2YXIgaXNTdXBlclJvdyA9IChmb3JtYXRzLmxlbmd0aCA+IDEpICYmIChyb3cgPCAoZm9ybWF0cy5sZW5ndGggLSAxKSk7IC8vIG1vcmUgdGhhbiBvbmUgcm93IGFuZCBub3QgdGhlIGxhc3RcbiAgICAgICAgICAgIHZhciBuZXdDZWxsID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1N1cGVyUm93KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBkYXRlRW52LmZvcm1hdChkYXRlLCBmb3JtYXQpO1xuICAgICAgICAgICAgICAgIGlmICghbGVhZGluZ0NlbGwgfHwgKGxlYWRpbmdDZWxsLnRleHQgIT09IHRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NlbGwgPSBidWlsZENlbGxPYmplY3QoZGF0ZSwgdGV4dCwgcm93VW5pdHNbcm93XSwgdmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nQ2VsbC5jb2xzcGFuICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsZWFkaW5nQ2VsbCB8fFxuICAgICAgICAgICAgICAgICAgICBpc0ludChkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2Vlbih0RGF0ZVByb2ZpbGUubm9ybWFsaXplZFJhbmdlLnN0YXJ0LCBkYXRlLCB0RGF0ZVByb2ZpbGUubGFiZWxJbnRlcnZhbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZGF0ZUVudi5mb3JtYXQoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2VsbCA9IGJ1aWxkQ2VsbE9iamVjdChkYXRlLCB0ZXh0LCByb3dVbml0c1tyb3ddLCB2aWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxlYWRpbmdDZWxsLmNvbHNwYW4gKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3Q2VsbCkge1xuICAgICAgICAgICAgICAgIG5ld0NlbGwud2Vla1N0YXJ0ID0gaXNXZWVrU3RhcnQ7XG4gICAgICAgICAgICAgICAgcm93Q2VsbHMucHVzaChuZXdDZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2VsbFJvd3M7XG59XG5mdW5jdGlvbiBidWlsZENlbGxPYmplY3QoZGF0ZSwgdGV4dCwgcm93VW5pdCwgdmlldykge1xuICAgIHZhciBzcGFuSHRtbCA9IGJ1aWxkR290b0FuY2hvckh0bWwodmlldywge1xuICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICB0eXBlOiByb3dVbml0LFxuICAgICAgICBmb3JjZU9mZjogIXJvd1VuaXRcbiAgICB9LCB7XG4gICAgICAgICdjbGFzcyc6ICdmYy1jZWxsLXRleHQnXG4gICAgfSwgaHRtbEVzY2FwZSh0ZXh0KSk7XG4gICAgcmV0dXJuIHsgdGV4dDogdGV4dCwgc3Bhbkh0bWw6IHNwYW5IdG1sLCBkYXRlOiBkYXRlLCBjb2xzcGFuOiAxLCBpc1dlZWtTdGFydDogZmFsc2UgfTtcbn1cblxudmFyIFRpbWVsaW5lTm93SW5kaWNhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lTm93SW5kaWNhdG9yKGhlYWRQYXJlbnQsIGJvZHlQYXJlbnQpIHtcbiAgICAgICAgdGhpcy5oZWFkUGFyZW50ID0gaGVhZFBhcmVudDtcbiAgICAgICAgdGhpcy5ib2R5UGFyZW50ID0gYm9keVBhcmVudDtcbiAgICB9XG4gICAgVGltZWxpbmVOb3dJbmRpY2F0b3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjb29yZCwgaXNSdGwpIHtcbiAgICAgICAgdmFyIHN0eWxlUHJvcHMgPSBpc1J0bCA/IHsgcmlnaHQ6IC1jb29yZCB9IDogeyBsZWZ0OiBjb29yZCB9O1xuICAgICAgICB0aGlzLmhlYWRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5hcnJvd0VsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtbm93LWluZGljYXRvciBmYy1ub3ctaW5kaWNhdG9yLWFycm93JyxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVByb3BzXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5ib2R5UGFyZW50LmFwcGVuZENoaWxkKHRoaXMubGluZUVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtbm93LWluZGljYXRvciBmYy1ub3ctaW5kaWNhdG9yLWxpbmUnLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlUHJvcHNcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgVGltZWxpbmVOb3dJbmRpY2F0b3IucHJvdG90eXBlLnVucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hcnJvd0VsKSB7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMuYXJyb3dFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGluZUVsKSB7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50KHRoaXMubGluZUVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lTm93SW5kaWNhdG9yO1xufSgpKTtcblxudmFyIFNUSUNLWV9QUk9QX1ZBTCA9IGNvbXB1dGVTdGlja3lQcm9wVmFsKCk7IC8vIGlmIG51bGwsIG1lYW5zIG5vdCBzdXBwb3J0ZWQgYXQgYWxsXG52YXIgSVNfTVNfRURHRSA9IC9FZGdlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xudmFyIElTX1NBRkFSSSA9IFNUSUNLWV9QUk9QX1ZBTCA9PT0gJy13ZWJraXQtc3RpY2t5JzsgLy8gZ29vZCBiL2MgZG9lc24ndCBjb25mdXNlIGNocm9tZVxudmFyIFNUSUNLWV9DTEFTU05BTUUgPSAnZmMtc3RpY2t5Jztcbi8qXG51c2VmdWwgYmV5b25kIHRoZSBuYXRpdmUgcG9zaXRpb246c3RpY2t5IGZvciB0aGVzZSByZWFzb25zOlxuLSBzdXBwb3J0IGluIElFMTFcbi0gbmljZSBjZW50ZXJpbmcgc3VwcG9ydFxuKi9cbnZhciBTdGlja3lTY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGlja3lTY3JvbGxlcihzY3JvbGxlciwgaXNSdGwsIGlzVmVydGljYWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy51c2luZ1JlbGF0aXZlID0gbnVsbDtcbiAgICAgICAgLypcbiAgICAgICAga25vd24gYnVnOiBjYWxsZWQgdHdpY2Ugb24gaW5pdC4gcHJvYmxlbSB3aGVuIG1peGluZyB3aXRoIFNjcm9sbEpvaW5lclxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoX3RoaXMuc2Nyb2xsZXIuY2FudmFzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgU1RJQ0tZX0NMQVNTTkFNRSkpO1xuICAgICAgICAgICAgdmFyIGVsR2VvbXMgPSBfdGhpcy5xdWVyeUVsR2VvbXMoZWxzKTtcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydFdpZHRoID0gX3RoaXMuc2Nyb2xsZXIuZWwuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBpZiAoX3RoaXMudXNpbmdSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbERlc3RpbmF0aW9ucyA9IF90aGlzLmNvbXB1dGVFbERlc3RpbmF0aW9ucyhlbEdlb21zLCB2aWV3cG9ydFdpZHRoKTsgLy8gcmVhZCBiZWZvcmUgcHJlcFBvc2l0aW9uaW5nXG4gICAgICAgICAgICAgICAgYXNzaWduUmVsYXRpdmVQb3NpdGlvbnMoZWxzLCBlbEdlb21zLCBlbERlc3RpbmF0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhc3NpZ25TdGlja3lQb3NpdGlvbnMoZWxzLCBlbEdlb21zLCB2aWV3cG9ydFdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgICAgICB0aGlzLnVzaW5nUmVsYXRpdmUgPVxuICAgICAgICAgICAgIVNUSUNLWV9QUk9QX1ZBTCB8fCAvLyBJRTExXG4gICAgICAgICAgICAgICAgKElTX01TX0VER0UgJiYgaXNSdGwpIHx8IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzE4ODgzMzA1L1xuICAgICAgICAgICAgICAgICgoSVNfTVNfRURHRSB8fCBJU19TQUZBUkkpICYmIGlzVmVydGljYWwpOyAvLyBiZWNhdXNlIGRvZXNuJ3Qgd29yayB3aXRoIHJvd3NwYW4gaW4gdGFibGVzLCBvdXIgb25seSB2ZXJ0aWFsIHVzZVxuICAgICAgICBpZiAodGhpcy51c2luZ1JlbGF0aXZlKSB7XG4gICAgICAgICAgICBzY3JvbGxlci5vbignc2Nyb2xsRW5kJywgdGhpcy51cGRhdGVTaXplKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBTdGlja3lTY3JvbGxlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxlci5vZmYoJ3Njcm9sbEVuZCcsIHRoaXMudXBkYXRlU2l6ZSk7XG4gICAgfTtcbiAgICBTdGlja3lTY3JvbGxlci5wcm90b3R5cGUucXVlcnlFbEdlb21zID0gZnVuY3Rpb24gKGVscykge1xuICAgICAgICB2YXIgY2FudmFzT3JpZ2luID0gdGhpcy5zY3JvbGxlci5jYW52YXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBlbEdlb21zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZWxzXzEgPSBlbHM7IF9pIDwgZWxzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBlbHNfMVtfaV07XG4gICAgICAgICAgICB2YXIgcGFyZW50Qm91bmQgPSB0cmFuc2xhdGVSZWN0KGVsLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIC1jYW52YXNPcmlnaW4ubGVmdCwgLWNhbnZhc09yaWdpbi50b3ApO1xuICAgICAgICAgICAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkVGV4dEFsaWduID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwucGFyZW50Tm9kZSkudGV4dEFsaWduOyAvLyBhc2sgdGhlIHBhcmVudFxuICAgICAgICAgICAgdmFyIGludGVuZGVkVGV4dEFsaWduID0gY29tcHV0ZWRUZXh0QWxpZ247XG4gICAgICAgICAgICB2YXIgbmF0dXJhbEJvdW5kID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb21wdXRlZFN0eWxlcy5wb3NpdGlvbiAhPT0gJ3N0aWNreScpIHtcbiAgICAgICAgICAgICAgICBuYXR1cmFsQm91bmQgPSB0cmFuc2xhdGVSZWN0KGVsUmVjdCwgLWNhbnZhc09yaWdpbi5sZWZ0IC0gKHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZXMubGVmdCkgfHwgMCksIC8vIGNvdWxkIGJlICdhdXRvJ1xuICAgICAgICAgICAgICAgIC1jYW52YXNPcmlnaW4udG9wIC0gKHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZXMudG9wKSB8fCAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLXN0aWNreS1jZW50ZXInKSkge1xuICAgICAgICAgICAgICAgIGludGVuZGVkVGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbEdlb21zLnB1c2goe1xuICAgICAgICAgICAgICAgIHBhcmVudEJvdW5kOiBwYXJlbnRCb3VuZCxcbiAgICAgICAgICAgICAgICBuYXR1cmFsQm91bmQ6IG5hdHVyYWxCb3VuZCxcbiAgICAgICAgICAgICAgICBlbFdpZHRoOiBlbFJlY3Qud2lkdGgsXG4gICAgICAgICAgICAgICAgZWxIZWlnaHQ6IGVsUmVjdC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgY29tcHV0ZWRUZXh0QWxpZ246IGNvbXB1dGVkVGV4dEFsaWduLFxuICAgICAgICAgICAgICAgIGludGVuZGVkVGV4dEFsaWduOiBpbnRlbmRlZFRleHRBbGlnblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsR2VvbXM7XG4gICAgfTtcbiAgICBTdGlja3lTY3JvbGxlci5wcm90b3R5cGUuY29tcHV0ZUVsRGVzdGluYXRpb25zID0gZnVuY3Rpb24gKGVsR2VvbXMsIHZpZXdwb3J0V2lkdGgpIHtcbiAgICAgICAgdmFyIHZpZXdwb3J0TGVmdCA9IHRoaXMuc2Nyb2xsZXIuZ2V0U2Nyb2xsRnJvbUxlZnQoKTtcbiAgICAgICAgdmFyIHZpZXdwb3J0VG9wID0gdGhpcy5zY3JvbGxlci5nZXRTY3JvbGxUb3AoKTtcbiAgICAgICAgdmFyIHZpZXdwb3J0UmlnaHQgPSB2aWV3cG9ydExlZnQgKyB2aWV3cG9ydFdpZHRoO1xuICAgICAgICByZXR1cm4gZWxHZW9tcy5tYXAoZnVuY3Rpb24gKGVsR2VvbSkge1xuICAgICAgICAgICAgdmFyIGVsV2lkdGggPSBlbEdlb20uZWxXaWR0aCwgZWxIZWlnaHQgPSBlbEdlb20uZWxIZWlnaHQsIHBhcmVudEJvdW5kID0gZWxHZW9tLnBhcmVudEJvdW5kLCBuYXR1cmFsQm91bmQgPSBlbEdlb20ubmF0dXJhbEJvdW5kO1xuICAgICAgICAgICAgdmFyIGRlc3RMZWZ0OyAvLyByZWxhdGl2ZSB0byBjYW52YXMgdG9wbGVmdFxuICAgICAgICAgICAgdmFyIGRlc3RUb3A7IC8vIFwiXG4gICAgICAgICAgICBzd2l0Y2ggKGVsR2VvbS5pbnRlbmRlZFRleHRBbGlnbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICBkZXN0TGVmdCA9IHZpZXdwb3J0TGVmdDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBkZXN0TGVmdCA9IHZpZXdwb3J0UmlnaHQgLSBlbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgICAgICBkZXN0TGVmdCA9ICh2aWV3cG9ydExlZnQgKyB2aWV3cG9ydFJpZ2h0KSAvIDIgLSBlbFdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXN0TGVmdCA9IE1hdGgubWluKGRlc3RMZWZ0LCBwYXJlbnRCb3VuZC5yaWdodCAtIGVsV2lkdGgpO1xuICAgICAgICAgICAgZGVzdExlZnQgPSBNYXRoLm1heChkZXN0TGVmdCwgcGFyZW50Qm91bmQubGVmdCk7XG4gICAgICAgICAgICBkZXN0VG9wID0gdmlld3BvcnRUb3A7XG4gICAgICAgICAgICBkZXN0VG9wID0gTWF0aC5taW4oZGVzdFRvcCwgcGFyZW50Qm91bmQuYm90dG9tIC0gZWxIZWlnaHQpO1xuICAgICAgICAgICAgZGVzdFRvcCA9IE1hdGgubWF4KGRlc3RUb3AsIG5hdHVyYWxCb3VuZC50b3ApOyAvLyBiZXR0ZXIgdG8gdXNlIG5hdHVyYWwgdG9wIGZvciB1cHBlciBib3VuZFxuICAgICAgICAgICAgcmV0dXJuIHsgbGVmdDogZGVzdExlZnQsIHRvcDogZGVzdFRvcCB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTdGlja3lTY3JvbGxlcjtcbn0oKSk7XG5mdW5jdGlvbiBhc3NpZ25SZWxhdGl2ZVBvc2l0aW9ucyhlbHMsIGVsR2VvbXMsIGVsRGVzdGluYXRpb25zKSB7XG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHZhciBuYXR1cmFsQm91bmQgPSBlbEdlb21zW2ldLm5hdHVyYWxCb3VuZDtcbiAgICAgICAgYXBwbHlTdHlsZShlbCwge1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBsZWZ0OiBlbERlc3RpbmF0aW9uc1tpXS5sZWZ0IC0gbmF0dXJhbEJvdW5kLmxlZnQsXG4gICAgICAgICAgICB0b3A6IGVsRGVzdGluYXRpb25zW2ldLnRvcCAtIG5hdHVyYWxCb3VuZC50b3BcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhc3NpZ25TdGlja3lQb3NpdGlvbnMoZWxzLCBlbEdlb21zLCB2aWV3cG9ydFdpZHRoKSB7XG4gICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHZhciBzdGlja3lMZWZ0ID0gMDtcbiAgICAgICAgaWYgKGVsR2VvbXNbaV0uaW50ZW5kZWRUZXh0QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICBzdGlja3lMZWZ0ID0gKHZpZXdwb3J0V2lkdGggLSBlbEdlb21zW2ldLmVsV2lkdGgpIC8gMjtcbiAgICAgICAgICAgIC8vIG5lZWRzIHRvIGJlIGZvcmNlZCB0byBsZWZ0P1xuICAgICAgICAgICAgaWYgKGVsR2VvbXNbaV0uY29tcHV0ZWRUZXh0QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0aWNreS1jZW50ZXInLCAnJykgLy8gcmVtZW1iZXIgZm9yIG5leHQgcXVlcnlFbEdlb21zXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUuc3R5bGUudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFwcGx5U3R5bGUoZWwsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBTVElDS1lfUFJPUF9WQUwsXG4gICAgICAgICAgICBsZWZ0OiBzdGlja3lMZWZ0LFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDBcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjb21wdXRlU3RpY2t5UHJvcFZhbCgpIHtcbiAgICB2YXIgZWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IHN0eWxlPVwicG9zaXRpb246LXdlYmtpdC1zdGlja3k7cG9zaXRpb246c3RpY2t5XCI+PC9kaXY+Jyk7XG4gICAgdmFyIHZhbCA9IGVsLnN0eWxlLnBvc2l0aW9uO1xuICAgIGlmICh2YWwuaW5kZXhPZignc3RpY2t5JykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbnZhciBUaW1lQXhpcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZUF4aXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGltZUF4aXMoY29udGV4dCwgaGVhZGVyQ29udGFpbmVyRWwsIGJvZHlDb250YWluZXJFbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICB2YXIgbGF5b3V0ID0gX3RoaXMubGF5b3V0ID0gbmV3IEhlYWRlckJvZHlMYXlvdXQoaGVhZGVyQ29udGFpbmVyRWwsIGJvZHlDb250YWluZXJFbCwgJ2F1dG8nKTtcbiAgICAgICAgdmFyIGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIgPSBsYXlvdXQuaGVhZGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIHZhciBib2R5RW5oYW5jZWRTY3JvbGxlciA9IGxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIC8vIG5lZWRzIHRvIGdvIGFmdGVyIGxheW91dCwgd2hpY2ggaGFzIFNjcm9sbEpvaW5lclxuICAgICAgICBfdGhpcy5oZWFkU3RpY2t5U2Nyb2xsZXIgPSBuZXcgU3RpY2t5U2Nyb2xsZXIoaGVhZGVyRW5oYW5jZWRTY3JvbGxlciwgX3RoaXMuaXNSdGwsIGZhbHNlKTsgLy8gaXNWZXJ0aWNhbD1mYWxzZVxuICAgICAgICBfdGhpcy5ib2R5U3RpY2t5U2Nyb2xsZXIgPSBuZXcgU3RpY2t5U2Nyb2xsZXIoYm9keUVuaGFuY2VkU2Nyb2xsZXIsIF90aGlzLmlzUnRsLCBmYWxzZSk7IC8vIGlzVmVydGljYWw9ZmFsc2VcbiAgICAgICAgX3RoaXMuaGVhZGVyID0gbmV3IFRpbWVsaW5lSGVhZGVyKGNvbnRleHQsIGhlYWRlckVuaGFuY2VkU2Nyb2xsZXIuY2FudmFzLmNvbnRlbnRFbCk7XG4gICAgICAgIF90aGlzLnNsYXRzID0gbmV3IFRpbWVsaW5lU2xhdHMoY29udGV4dCwgYm9keUVuaGFuY2VkU2Nyb2xsZXIuY2FudmFzLmJnRWwpO1xuICAgICAgICBfdGhpcy5ub3dJbmRpY2F0b3IgPSBuZXcgVGltZWxpbmVOb3dJbmRpY2F0b3IoaGVhZGVyRW5oYW5jZWRTY3JvbGxlci5jYW52YXMuZWwsIGJvZHlFbmhhbmNlZFNjcm9sbGVyLmNhbnZhcy5lbCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZUF4aXMucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGF5b3V0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5oZWFkZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnNsYXRzLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3IudW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5oZWFkU3RpY2t5U2Nyb2xsZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJvZHlTdGlja3lTY3JvbGxlci5kZXN0cm95KCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgVGltZUF4aXMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgdERhdGVQcm9maWxlID0gdGhpcy50RGF0ZVByb2ZpbGUgPVxuICAgICAgICAgICAgYnVpbGRUaW1lbGluZURhdGVQcm9maWxlKHByb3BzLmRhdGVQcm9maWxlLCB0aGlzLnZpZXcpOyAvLyBUT0RPOiBjYWNoZVxuICAgICAgICB0aGlzLmhlYWRlci5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgdERhdGVQcm9maWxlOiB0RGF0ZVByb2ZpbGVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2xhdHMucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgIHREYXRlUHJvZmlsZTogdERhdGVQcm9maWxlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gTm93IEluZGljYXRvclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5nZXROb3dJbmRpY2F0b3JVbml0ID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIC8vIHl1Y2tcbiAgICAgICAgdmFyIHREYXRlUHJvZmlsZSA9IHRoaXMudERhdGVQcm9maWxlID1cbiAgICAgICAgICAgIGJ1aWxkVGltZWxpbmVEYXRlUHJvZmlsZShkYXRlUHJvZmlsZSwgdGhpcy52aWV3KTsgLy8gVE9ETzogY2FjaGVcbiAgICAgICAgaWYgKHREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcih0RGF0ZVByb2ZpbGUuc2xvdER1cmF0aW9uKS51bml0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyB3aWxsIG9ubHkgZXhlY3V0ZSBpZiBpc1RpbWVTY2FsZVxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICBpZiAocmFuZ2VDb250YWluc01hcmtlcih0aGlzLnREYXRlUHJvZmlsZS5ub3JtYWxpemVkUmFuZ2UsIGRhdGUpKSB7XG4gICAgICAgICAgICB0aGlzLm5vd0luZGljYXRvci5yZW5kZXIodGhpcy5kYXRlVG9Db29yZChkYXRlKSwgdGhpcy5pc1J0bCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIHdpbGwgb25seSBleGVjdXRlIGlmIGlzVGltZVNjYWxlXG4gICAgVGltZUF4aXMucHJvdG90eXBlLnVucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vd0luZGljYXRvci51bnJlbmRlcigpO1xuICAgIH07XG4gICAgLy8gU2l6aW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVGltZUF4aXMucHJvdG90eXBlLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoaXNSZXNpemUsIHRvdGFsSGVpZ2h0LCBpc0F1dG8pIHtcbiAgICAgICAgdGhpcy5hcHBseVNsb3RXaWR0aCh0aGlzLmNvbXB1dGVTbG90V2lkdGgoKSk7XG4gICAgICAgIC8vIGFkanVzdHMgZ3V0dGVycy4gZG8gYWZ0ZXIgc2xvdCB3aWR0aHMgc2V0XG4gICAgICAgIHRoaXMubGF5b3V0LnNldEhlaWdodCh0b3RhbEhlaWdodCwgaXNBdXRvKTtcbiAgICAgICAgLy8gcHJldHR5IG11Y2gganVzdCBxdWVyaWVzIGNvb3Jkcy4gZG8gbGFzdFxuICAgICAgICB0aGlzLnNsYXRzLnVwZGF0ZVNpemUoKTtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS51cGRhdGVTdGlja3lTY3JvbGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGVhZFN0aWNreVNjcm9sbGVyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgdGhpcy5ib2R5U3RpY2t5U2Nyb2xsZXIudXBkYXRlU2l6ZSgpO1xuICAgIH07XG4gICAgVGltZUF4aXMucHJvdG90eXBlLmNvbXB1dGVTbG90V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzbG90V2lkdGggPSB0aGlzLm9wdCgnc2xvdFdpZHRoJykgfHwgJyc7XG4gICAgICAgIGlmIChzbG90V2lkdGggPT09ICcnKSB7XG4gICAgICAgICAgICBzbG90V2lkdGggPSB0aGlzLmNvbXB1dGVEZWZhdWx0U2xvdFdpZHRoKHRoaXMudERhdGVQcm9maWxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2xvdFdpZHRoO1xuICAgIH07XG4gICAgVGltZUF4aXMucHJvdG90eXBlLmNvbXB1dGVEZWZhdWx0U2xvdFdpZHRoID0gZnVuY3Rpb24gKHREYXRlUHJvZmlsZSkge1xuICAgICAgICB2YXIgbWF4SW5uZXJXaWR0aCA9IDA7IC8vIFRPRE86IGhhcm5lc3MgY29yZSdzIGBtYXRjaENlbGxXaWR0aHNgIGZvciB0aGlzXG4gICAgICAgIHRoaXMuaGVhZGVyLmlubmVyRWxzLmZvckVhY2goZnVuY3Rpb24gKGlubmVyRWwsIGkpIHtcbiAgICAgICAgICAgIG1heElubmVyV2lkdGggPSBNYXRoLm1heChtYXhJbm5lcldpZHRoLCBpbm5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBoZWFkaW5nQ2VsbFdpZHRoID0gTWF0aC5jZWlsKG1heElubmVyV2lkdGgpICsgMTsgLy8gYXNzdW1lIG5vIHBhZGRpbmcsIGFuZCBvbmUgcGl4ZWwgYm9yZGVyXG4gICAgICAgIC8vIGluIFRpbWVsaW5lVmlldy5kZWZhdWx0cyB3ZSBlbnN1cmVkIHRoYXQgbGFiZWxJbnRlcnZhbCBpcyBhbiBpbnRlcnZhbCBvZiBzbG90RHVyYXRpb25cbiAgICAgICAgLy8gVE9ETzogcmVuYW1lIGxhYmVsRHVyYXRpb24/XG4gICAgICAgIHZhciBzbG90c1BlckxhYmVsID0gd2hvbGVEaXZpZGVEdXJhdGlvbnModERhdGVQcm9maWxlLmxhYmVsSW50ZXJ2YWwsIHREYXRlUHJvZmlsZS5zbG90RHVyYXRpb24pO1xuICAgICAgICB2YXIgc2xvdFdpZHRoID0gTWF0aC5jZWlsKGhlYWRpbmdDZWxsV2lkdGggLyBzbG90c1BlckxhYmVsKTtcbiAgICAgICAgdmFyIG1pbldpZHRoID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5oZWFkZXIuc2xhdENvbEVsc1swXSkubWluV2lkdGg7XG4gICAgICAgIGlmIChtaW5XaWR0aCkge1xuICAgICAgICAgICAgbWluV2lkdGggPSBwYXJzZUludChtaW5XaWR0aCwgMTApO1xuICAgICAgICAgICAgaWYgKG1pbldpZHRoKSB7XG4gICAgICAgICAgICAgICAgc2xvdFdpZHRoID0gTWF0aC5tYXgoc2xvdFdpZHRoLCBtaW5XaWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsb3RXaWR0aDtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5hcHBseVNsb3RXaWR0aCA9IGZ1bmN0aW9uIChzbG90V2lkdGgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgbGF5b3V0ID0gX2EubGF5b3V0LCB0RGF0ZVByb2ZpbGUgPSBfYS50RGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBjb250YWluZXJXaWR0aCA9ICcnO1xuICAgICAgICB2YXIgY29udGFpbmVyTWluV2lkdGggPSAnJztcbiAgICAgICAgdmFyIG5vbkxhc3RTbG90V2lkdGggPSAnJztcbiAgICAgICAgaWYgKHNsb3RXaWR0aCAhPT0gJycpIHtcbiAgICAgICAgICAgIHNsb3RXaWR0aCA9IE1hdGgucm91bmQoc2xvdFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoID0gc2xvdFdpZHRoICogdERhdGVQcm9maWxlLnNsb3REYXRlcy5sZW5ndGg7XG4gICAgICAgICAgICBjb250YWluZXJNaW5XaWR0aCA9ICcnO1xuICAgICAgICAgICAgbm9uTGFzdFNsb3RXaWR0aCA9IHNsb3RXaWR0aDtcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IGxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuZ2V0Q2xpZW50V2lkdGgoKTtcbiAgICAgICAgICAgIGlmIChhdmFpbGFibGVXaWR0aCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyTWluV2lkdGggPSBhdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgICAgICBjb250YWluZXJXaWR0aCA9ICcnO1xuICAgICAgICAgICAgICAgIG5vbkxhc3RTbG90V2lkdGggPSBNYXRoLmZsb29yKGF2YWlsYWJsZVdpZHRoIC8gdERhdGVQcm9maWxlLnNsb3REYXRlcy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxheW91dC5oZWFkZXJTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuc2V0V2lkdGgoY29udGFpbmVyV2lkdGgpO1xuICAgICAgICBsYXlvdXQuaGVhZGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLnNldE1pbldpZHRoKGNvbnRhaW5lck1pbldpZHRoKTtcbiAgICAgICAgbGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuc2V0V2lkdGgoY29udGFpbmVyV2lkdGgpO1xuICAgICAgICBsYXlvdXQuYm9keVNjcm9sbGVyLmVuaGFuY2VkU2Nyb2xsLmNhbnZhcy5zZXRNaW5XaWR0aChjb250YWluZXJNaW5XaWR0aCk7XG4gICAgICAgIGlmIChub25MYXN0U2xvdFdpZHRoICE9PSAnJykge1xuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc2xhdENvbEVscy5zbGljZSgwLCAtMSkuY29uY2F0KHRoaXMuc2xhdHMuc2xhdENvbEVscy5zbGljZSgwLCAtMSkpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUud2lkdGggPSBub25MYXN0U2xvdFdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyByZXR1cm5lZCB2YWx1ZSBpcyBiZXR3ZWVuIDAgYW5kIHRoZSBudW1iZXIgb2Ygc25hcHNcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuY29tcHV0ZURhdGVTbmFwQ292ZXJhZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgdERhdGVQcm9maWxlID0gX2EudERhdGVQcm9maWxlO1xuICAgICAgICB2YXIgc25hcERpZmYgPSBkYXRlRW52LmNvdW50RHVyYXRpb25zQmV0d2Vlbih0RGF0ZVByb2ZpbGUubm9ybWFsaXplZFJhbmdlLnN0YXJ0LCBkYXRlLCB0RGF0ZVByb2ZpbGUuc25hcER1cmF0aW9uKTtcbiAgICAgICAgaWYgKHNuYXBEaWZmIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc25hcERpZmYgPj0gdERhdGVQcm9maWxlLnNuYXBEaWZmVG9JbmRleC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0RGF0ZVByb2ZpbGUuc25hcENudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzbmFwRGlmZkludCA9IE1hdGguZmxvb3Ioc25hcERpZmYpO1xuICAgICAgICAgICAgdmFyIHNuYXBDb3ZlcmFnZSA9IHREYXRlUHJvZmlsZS5zbmFwRGlmZlRvSW5kZXhbc25hcERpZmZJbnRdO1xuICAgICAgICAgICAgaWYgKGlzSW50KHNuYXBDb3ZlcmFnZSkpIHsgLy8gbm90IGFuIGluLWJldHdlZW4gdmFsdWVcbiAgICAgICAgICAgICAgICBzbmFwQ292ZXJhZ2UgKz0gc25hcERpZmYgLSBzbmFwRGlmZkludDsgLy8gYWRkIHRoZSByZW1haW5kZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGEgZnJhY3Rpb25hbCB2YWx1ZSwgbWVhbmluZyB0aGUgZGF0ZSBpcyBub3QgdmlzaWJsZVxuICAgICAgICAgICAgICAgIC8vIGFsd2F5cyByb3VuZCB1cCBpbiB0aGlzIGNhc2UuIHdvcmtzIGZvciBzdGFydCBBTkQgZW5kIGRhdGVzIGluIGEgcmFuZ2UuXG4gICAgICAgICAgICAgICAgc25hcENvdmVyYWdlID0gTWF0aC5jZWlsKHNuYXBDb3ZlcmFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc25hcENvdmVyYWdlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBmb3IgTFRSLCByZXN1bHRzIHJhbmdlIGZyb20gMCB0byB3aWR0aCBvZiBhcmVhXG4gICAgLy8gZm9yIFJUTCwgcmVzdWx0cyByYW5nZSBmcm9tIG5lZ2F0aXZlIHdpZHRoIG9mIGFyZWEgdG8gMFxuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5kYXRlVG9Db29yZCA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHZhciB0RGF0ZVByb2ZpbGUgPSB0aGlzLnREYXRlUHJvZmlsZTtcbiAgICAgICAgdmFyIHNuYXBDb3ZlcmFnZSA9IHRoaXMuY29tcHV0ZURhdGVTbmFwQ292ZXJhZ2UoZGF0ZSk7XG4gICAgICAgIHZhciBzbG90Q292ZXJhZ2UgPSBzbmFwQ292ZXJhZ2UgLyB0RGF0ZVByb2ZpbGUuc25hcHNQZXJTbG90O1xuICAgICAgICB2YXIgc2xvdEluZGV4ID0gTWF0aC5mbG9vcihzbG90Q292ZXJhZ2UpO1xuICAgICAgICBzbG90SW5kZXggPSBNYXRoLm1pbihzbG90SW5kZXgsIHREYXRlUHJvZmlsZS5zbG90Q250IC0gMSk7XG4gICAgICAgIHZhciBwYXJ0aWFsID0gc2xvdENvdmVyYWdlIC0gc2xvdEluZGV4O1xuICAgICAgICB2YXIgX2EgPSB0aGlzLnNsYXRzLCBpbm5lckNvb3JkQ2FjaGUgPSBfYS5pbm5lckNvb3JkQ2FjaGUsIG91dGVyQ29vcmRDYWNoZSA9IF9hLm91dGVyQ29vcmRDYWNoZTtcbiAgICAgICAgaWYgKHRoaXMuaXNSdGwpIHtcbiAgICAgICAgICAgIHJldHVybiAob3V0ZXJDb29yZENhY2hlLnJpZ2h0c1tzbG90SW5kZXhdIC1cbiAgICAgICAgICAgICAgICAoaW5uZXJDb29yZENhY2hlLmdldFdpZHRoKHNsb3RJbmRleCkgKiBwYXJ0aWFsKSkgLSBvdXRlckNvb3JkQ2FjaGUub3JpZ2luQ2xpZW50UmVjdC53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAob3V0ZXJDb29yZENhY2hlLmxlZnRzW3Nsb3RJbmRleF0gK1xuICAgICAgICAgICAgICAgIChpbm5lckNvb3JkQ2FjaGUuZ2V0V2lkdGgoc2xvdEluZGV4KSAqIHBhcnRpYWwpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZUF4aXMucHJvdG90eXBlLnJhbmdlVG9Db29yZHMgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSdGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHJpZ2h0OiB0aGlzLmRhdGVUb0Nvb3JkKHJhbmdlLnN0YXJ0KSwgbGVmdDogdGhpcy5kYXRlVG9Db29yZChyYW5nZS5lbmQpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBsZWZ0OiB0aGlzLmRhdGVUb0Nvb3JkKHJhbmdlLnN0YXJ0KSwgcmlnaHQ6IHRoaXMuZGF0ZVRvQ29vcmQocmFuZ2UuZW5kKSB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBTY3JvbGxpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBUaW1lQXhpcy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHRoaXMucHJvcHMuZGF0ZVByb2ZpbGU7XG4gICAgICAgIHZhciBsZWZ0ID0gMDtcbiAgICAgICAgaWYgKGRhdGVQcm9maWxlKSB7XG4gICAgICAgICAgICBsZWZ0ID0gdGhpcy5kYXRlVG9Db29yZChkYXRlRW52LmFkZChzdGFydE9mRGF5KGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLnN0YXJ0KSwgLy8gc3RhcnRPZkRheSBuZWVkZWQ/XG4gICAgICAgICAgICBkdXJhdGlvbikpO1xuICAgICAgICAgICAgLy8gaGFjayB0byBvdmVyY29tZSB0aGUgbGVmdCBib3JkZXJzIG9mIG5vbi1maXJzdCBzbGF0XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdGwgJiYgbGVmdCkge1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBsZWZ0OiBsZWZ0IH07XG4gICAgfTtcbiAgICBUaW1lQXhpcy5wcm90b3R5cGUucXVlcnlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW5oYW5jZWRTY3JvbGwgPSB0aGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBlbmhhbmNlZFNjcm9sbC5nZXRTY3JvbGxMZWZ0KClcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFRpbWVBeGlzLnByb3RvdHlwZS5hcHBseURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoc2Nyb2xsKSB7XG4gICAgICAgIC8vIFRPRE86IGxhbWUgd2UgaGF2ZSB0byB1cGRhdGUgYm90aC4gdXNlIHRoZSBzY3JvbGxqb2luZXIgaW5zdGVhZCBtYXliZVxuICAgICAgICB0aGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuc2V0U2Nyb2xsTGVmdChzY3JvbGwubGVmdCB8fCAwKTtcbiAgICAgICAgdGhpcy5sYXlvdXQuaGVhZGVyU2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuc2V0U2Nyb2xsTGVmdChzY3JvbGwubGVmdCB8fCAwKTtcbiAgICB9O1xuICAgIHJldHVybiBUaW1lQXhpcztcbn0oQ29tcG9uZW50KSk7XG5cbnZhciBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIoY29udGV4dCwgbWFzdGVyQ29udGFpbmVyRWwsIHRpbWVBeGlzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm1hc3RlckNvbnRhaW5lckVsID0gbWFzdGVyQ29udGFpbmVyRWw7XG4gICAgICAgIF90aGlzLnRpbWVBeGlzID0gdGltZUF4aXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyU2VnSHRtbCA9IGZ1bmN0aW9uIChzZWcsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmNvbnRleHQudmlldztcbiAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBzZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgdmFyIGV2ZW50RGVmID0gZXZlbnRSYW5nZS5kZWY7XG4gICAgICAgIHZhciBldmVudFVpID0gZXZlbnRSYW5nZS51aTtcbiAgICAgICAgdmFyIGlzRHJhZ2dhYmxlID0gdmlldy5jb21wdXRlRXZlbnREcmFnZ2FibGUoZXZlbnREZWYsIGV2ZW50VWkpO1xuICAgICAgICB2YXIgaXNSZXNpemFibGVGcm9tU3RhcnQgPSBzZWcuaXNTdGFydCAmJiB2aWV3LmNvbXB1dGVFdmVudFN0YXJ0UmVzaXphYmxlKGV2ZW50RGVmLCBldmVudFVpKTtcbiAgICAgICAgdmFyIGlzUmVzaXphYmxlRnJvbUVuZCA9IHNlZy5pc0VuZCAmJiB2aWV3LmNvbXB1dGVFdmVudEVuZFJlc2l6YWJsZShldmVudERlZiwgZXZlbnRVaSk7XG4gICAgICAgIHZhciBjbGFzc2VzID0gdGhpcy5nZXRTZWdDbGFzc2VzKHNlZywgaXNEcmFnZ2FibGUsIGlzUmVzaXphYmxlRnJvbVN0YXJ0IHx8IGlzUmVzaXphYmxlRnJvbUVuZCwgbWlycm9ySW5mbyk7XG4gICAgICAgIGNsYXNzZXMudW5zaGlmdCgnZmMtdGltZWxpbmUtZXZlbnQnLCAnZmMtaC1ldmVudCcpO1xuICAgICAgICB2YXIgdGltZVRleHQgPSB0aGlzLmdldFRpbWVUZXh0KGV2ZW50UmFuZ2UpO1xuICAgICAgICByZXR1cm4gJzxhIGNsYXNzPVwiJyArIGNsYXNzZXMuam9pbignICcpICsgJ1wiIHN0eWxlPVwiJyArIGNzc1RvU3RyKHRoaXMuZ2V0U2tpbkNzcyhldmVudFVpKSkgKyAnXCInICtcbiAgICAgICAgICAgIChldmVudERlZi51cmwgP1xuICAgICAgICAgICAgICAgICcgaHJlZj1cIicgKyBodG1sRXNjYXBlKGV2ZW50RGVmLnVybCkgKyAnXCInIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgJz4nICtcbiAgICAgICAgICAgICh0aW1lVGV4dCA/XG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtdGltZS13cmFwXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLXRpbWVcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgaHRtbEVzY2FwZSh0aW1lVGV4dCkgK1xuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPidcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy10aXRsZS13cmFwXCI+JyArXG4gICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy10aXRsZSBmYy1zdGlja3lcIj4nICtcbiAgICAgICAgICAgIChldmVudERlZi50aXRsZSA/IGh0bWxFc2NhcGUoZXZlbnREZWYudGl0bGUpIDogJyZuYnNwOycpICtcbiAgICAgICAgICAgICc8L3NwYW4+JyArXG4gICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgKGlzUmVzaXphYmxlRnJvbVN0YXJ0ID9cbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLXJlc2l6ZXIgZmMtc3RhcnQtcmVzaXplclwiPjwvZGl2PicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAoaXNSZXNpemFibGVGcm9tRW5kID9cbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLXJlc2l6ZXIgZmMtZW5kLXJlc2l6ZXJcIj48L2Rpdj4nIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgJzwvYT4nO1xuICAgIH07XG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZURpc3BsYXlFdmVudFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy50aW1lQXhpcy50RGF0ZVByb2ZpbGUuaXNUaW1lU2NhbGU7IC8vIGJlY2F1c2UgdGltZXMgc2hvdWxkIGJlIG9idmlvdXMgdmlhIGF4aXNcbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVEaXNwbGF5RXZlbnRFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8vIENvbXB1dGVzIGEgZGVmYXVsdCBldmVudCB0aW1lIGZvcm1hdHRpbmcgc3RyaW5nIGlmIGB0aW1lRm9ybWF0YCBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkXG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZUV2ZW50VGltZUZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgICAgICAgb21pdFplcm9NaW51dGU6IHRydWUsXG4gICAgICAgICAgICBtZXJpZGllbTogJ25hcnJvdydcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmF0dGFjaFNlZ3MgPSBmdW5jdGlvbiAoc2VncywgbWlycm9ySW5mbykge1xuICAgICAgICBpZiAoIXRoaXMuZWwgJiYgdGhpcy5tYXN0ZXJDb250YWluZXJFbCkge1xuICAgICAgICAgICAgdGhpcy5lbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtZXZlbnQtY29udGFpbmVyJyB9KTtcbiAgICAgICAgICAgIGlmIChtaXJyb3JJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdmYy1taXJyb3ItY29udGFpbmVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hc3RlckNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVsKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQoc2VnLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuZGV0YWNoU2VncyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18yID0gc2VnczsgX2kgPCBzZWdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18yW19pXTtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2VnLmVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gY29tcHV0ZXMgQU5EIGFzc2lnbnMgKGFzc2lnbnMgdGhlIGxlZnQvcmlnaHQgYXQgbGVhc3QpLiBiYWRcbiAgICBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICB2YXIgdGltZUF4aXMgPSB0aGlzLnRpbWVBeGlzO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMyA9IHNlZ3M7IF9pIDwgc2Vnc18zLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfM1tfaV07XG4gICAgICAgICAgICB2YXIgY29vcmRzID0gdGltZUF4aXMucmFuZ2VUb0Nvb3JkcyhzZWcpOyAvLyB3b3JrcyBiZWNhdXNlIFNlZyBoYXMgc3RhcnQvZW5kXG4gICAgICAgICAgICBhcHBseVN0eWxlKHNlZy5lbCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IChzZWcubGVmdCA9IGNvb3Jkcy5sZWZ0KSxcbiAgICAgICAgICAgICAgICByaWdodDogLShzZWcucmlnaHQgPSBjb29yZHMucmlnaHQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZWxpbmVMYW5lRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICBpZiAoIXRoaXMuZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21wdXRlIHNlZyB2ZXJ0aWNhbHNcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzQgPSBzZWdzOyBfaSA8IHNlZ3NfNC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzRbX2ldO1xuICAgICAgICAgICAgc2VnLmhlaWdodCA9IGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKHNlZy5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWlsZFNlZ0xldmVscyhzZWdzKTsgLy8gcG9wdWxhdGVzIGFib3ZlL2JlbG93IHByb3BzIGZvciBjb21wdXRlT2Zmc2V0Rm9yU2Vnc1xuICAgICAgICB2YXIgdG90YWxIZWlnaHQgPSBjb21wdXRlT2Zmc2V0Rm9yU2VncyhzZWdzKTsgLy8gYWxzbyBhc3NpZ25zIHNlZy50b3BcbiAgICAgICAgYXBwbHlTdHlsZVByb3AodGhpcy5lbCwgJ2hlaWdodCcsIHRvdGFsSGVpZ2h0KTtcbiAgICAgICAgLy8gYXNzaWduIHNlZyB2ZXJ0aWNhbHNcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBzZWdzXzUgPSBzZWdzOyBfYSA8IHNlZ3NfNS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzVbX2FdO1xuICAgICAgICAgICAgYXBwbHlTdHlsZVByb3Aoc2VnLmVsLCAndG9wJywgc2VnLnRvcCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkU2VnTGV2ZWxzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHNlZ0xldmVscyA9IFtdO1xuICAgICAgICBzZWdzID0gdGhpcy5zb3J0RXZlbnRTZWdzKHNlZ3MpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfNiA9IHNlZ3M7IF9pIDwgc2Vnc182Lmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHVucGxhY2VkU2VnID0gc2Vnc182W19pXTtcbiAgICAgICAgICAgIHVucGxhY2VkU2VnLmFib3ZlID0gW107XG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIGZpcnN0IGxldmVsIHdpdGggbm8gY29sbGlzaW9uc1xuICAgICAgICAgICAgdmFyIGxldmVsID0gMDsgLy8gbGV2ZWwgaW5kZXhcbiAgICAgICAgICAgIHdoaWxlIChsZXZlbCA8IHNlZ0xldmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNMZXZlbENvbGxpc2lvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBjb2xsaXNpb25zXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IHNlZ0xldmVsc1tsZXZlbF07IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbGFjZWRTZWcgPSBfYltfYV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lUm93U2Vnc0NvbGxpZGUodW5wbGFjZWRTZWcsIHBsYWNlZFNlZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucGxhY2VkU2VnLmFib3ZlLnB1c2gocGxhY2VkU2VnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGV2ZWxDb2xsaXNpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0xldmVsQ29sbGlzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbnNlcnQgaW50byB0aGUgZmlyc3Qgbm9uLWNvbGxpZGluZyBsZXZlbC4gY3JlYXRlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgKHNlZ0xldmVsc1tsZXZlbF0gfHwgKHNlZ0xldmVsc1tsZXZlbF0gPSBbXSkpXG4gICAgICAgICAgICAgICAgLnB1c2godW5wbGFjZWRTZWcpO1xuICAgICAgICAgICAgLy8gcmVjb3JkIHBvc3NpYmxlIGNvbGxpZGluZyBzZWdtZW50cyBiZWxvdyAoVE9ETzogYXV0b21hdGVkIHRlc3QgZm9yIHRoaXMpXG4gICAgICAgICAgICBsZXZlbCArPSAxO1xuICAgICAgICAgICAgd2hpbGUgKGxldmVsIDwgc2VnTGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gMCwgX2QgPSBzZWdMZXZlbHNbbGV2ZWxdOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmVsb3dTZWcgPSBfZFtfY107XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lUm93U2Vnc0NvbGxpZGUodW5wbGFjZWRTZWcsIGJlbG93U2VnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3dTZWcuYWJvdmUucHVzaCh1bnBsYWNlZFNlZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VnTGV2ZWxzO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXI7XG59KEZnRXZlbnRSZW5kZXJlcikpO1xuZnVuY3Rpb24gY29tcHV0ZU9mZnNldEZvclNlZ3Moc2Vncykge1xuICAgIHZhciBtYXggPSAwO1xuICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc183ID0gc2VnczsgX2kgPCBzZWdzXzcubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWcgPSBzZWdzXzdbX2ldO1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGNvbXB1dGVPZmZzZXRGb3JTZWcoc2VnKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG59XG5mdW5jdGlvbiBjb21wdXRlT2Zmc2V0Rm9yU2VnKHNlZykge1xuICAgIGlmICgoc2VnLnRvcCA9PSBudWxsKSkge1xuICAgICAgICBzZWcudG9wID0gY29tcHV0ZU9mZnNldEZvclNlZ3Moc2VnLmFib3ZlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlZy50b3AgKyBzZWcuaGVpZ2h0O1xufVxuZnVuY3Rpb24gdGltZVJvd1NlZ3NDb2xsaWRlKHNlZzAsIHNlZzEpIHtcbiAgICByZXR1cm4gKHNlZzAubGVmdCA8IHNlZzEucmlnaHQpICYmIChzZWcwLnJpZ2h0ID4gc2VnMS5sZWZ0KTtcbn1cblxudmFyIFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZWxpbmVMYW5lRmlsbFJlbmRlcmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlcihjb250ZXh0LCBtYXN0ZXJDb250YWluZXJFbCwgdGltZUF4aXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWFzdGVyQ29udGFpbmVyRWwgPSBtYXN0ZXJDb250YWluZXJFbDtcbiAgICAgICAgX3RoaXMudGltZUF4aXMgPSB0aW1lQXhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lbGluZUxhbmVGaWxsUmVuZGVyZXIucHJvdG90eXBlLmF0dGFjaFNlZ3MgPSBmdW5jdGlvbiAodHlwZSwgc2Vncykge1xuICAgICAgICBpZiAoc2Vncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2J1c2luZXNzSG91cnMnKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gJ2JnZXZlbnQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFraW5nIGEgbmV3IGNvbnRhaW5lciBlYWNoIHRpbWUgaXMgT0tBWVxuICAgICAgICAgICAgLy8gYWxsIHR5cGVzIG9mIHNlZ3MgKGJhY2tncm91bmQgb3IgYnVzaW5lc3MgaG91cnMgb3Igd2hhdGV2ZXIpIGFyZSByZW5kZXJlZCBpbiBvbmUgcGFzc1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy0nICsgY2xhc3NOYW1lICsgJy1jb250YWluZXInIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXN0ZXJDb250YWluZXJFbC5hcHBlbmRDaGlsZChjb250YWluZXJFbCk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2ldO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKHNlZy5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW2NvbnRhaW5lckVsXTsgLy8gcmV0dXJuIHZhbHVlXG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHRpbWVBeGlzID0gdGhpcy50aW1lQXhpcztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzIgPSBzZWdzOyBfaSA8IHNlZ3NfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzJbX2ldO1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHRpbWVBeGlzLnJhbmdlVG9Db29yZHMoc2VnKTtcbiAgICAgICAgICAgIHNlZy5sZWZ0ID0gY29vcmRzLmxlZnQ7XG4gICAgICAgICAgICBzZWcucmlnaHQgPSBjb29yZHMucmlnaHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMyA9IHNlZ3M7IF9pIDwgc2Vnc18zLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfM1tfaV07XG4gICAgICAgICAgICBhcHBseVN0eWxlKHNlZy5lbCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHNlZy5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAtc2VnLnJpZ2h0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lTGFuZUZpbGxSZW5kZXJlcjtcbn0oRmlsbFJlbmRlcmVyKSk7XG5cbnZhciBUaW1lbGluZUxhbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRpbWVsaW5lTGFuZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUaW1lbGluZUxhbmUoY29udGV4dCwgZmdDb250YWluZXJFbCwgYmdDb250YWluZXJFbCwgdGltZUF4aXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGV4dCwgYmdDb250YWluZXJFbCkgLy8gc2hvdWxkIGVsIGJlIGJnQ29udGFpbmVyRWw/Pz9cbiAgICAgICAgIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNsaWNlciA9IG5ldyBUaW1lbGluZUxhbmVTbGljZXIoKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRXZlbnREcmFnID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5fcmVuZGVyRXZlbnREcmFnLCBfdGhpcy5fdW5yZW5kZXJFdmVudERyYWcpO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFJlc2l6ZSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMuX3JlbmRlckV2ZW50UmVzaXplLCBfdGhpcy5fdW5yZW5kZXJFdmVudFJlc2l6ZSk7XG4gICAgICAgIHZhciBmaWxsUmVuZGVyZXIgPSBfdGhpcy5maWxsUmVuZGVyZXIgPSBuZXcgVGltZWxpbmVMYW5lRmlsbFJlbmRlcmVyKGNvbnRleHQsIGJnQ29udGFpbmVyRWwsIHRpbWVBeGlzKTtcbiAgICAgICAgdmFyIGV2ZW50UmVuZGVyZXIgPSBfdGhpcy5ldmVudFJlbmRlcmVyID0gbmV3IFRpbWVsaW5lTGFuZUV2ZW50UmVuZGVyZXIoY29udGV4dCwgZmdDb250YWluZXJFbCwgdGltZUF4aXMpO1xuICAgICAgICBfdGhpcy5taXJyb3JSZW5kZXJlciA9IG5ldyBUaW1lbGluZUxhbmVFdmVudFJlbmRlcmVyKGNvbnRleHQsIGZnQ29udGFpbmVyRWwsIHRpbWVBeGlzKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQnVzaW5lc3NIb3VycyA9IG1lbW9pemVSZW5kZXJpbmcoZmlsbFJlbmRlcmVyLnJlbmRlclNlZ3MuYmluZChmaWxsUmVuZGVyZXIsICdidXNpbmVzc0hvdXJzJyksIGZpbGxSZW5kZXJlci51bnJlbmRlci5iaW5kKGZpbGxSZW5kZXJlciwgJ2J1c2luZXNzSG91cnMnKSk7XG4gICAgICAgIF90aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24gPSBtZW1vaXplUmVuZGVyaW5nKGZpbGxSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZmlsbFJlbmRlcmVyLCAnaGlnaGxpZ2h0JyksIGZpbGxSZW5kZXJlci51bnJlbmRlci5iaW5kKGZpbGxSZW5kZXJlciwgJ2hpZ2hsaWdodCcpKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQmdFdmVudHMgPSBtZW1vaXplUmVuZGVyaW5nKGZpbGxSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZmlsbFJlbmRlcmVyLCAnYmdFdmVudCcpLCBmaWxsUmVuZGVyZXIudW5yZW5kZXIuYmluZChmaWxsUmVuZGVyZXIsICdiZ0V2ZW50JykpO1xuICAgICAgICBfdGhpcy5yZW5kZXJGZ0V2ZW50cyA9IG1lbW9pemVSZW5kZXJpbmcoZXZlbnRSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZXZlbnRSZW5kZXJlciksIGV2ZW50UmVuZGVyZXIudW5yZW5kZXIuYmluZChldmVudFJlbmRlcmVyKSk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uID0gbWVtb2l6ZVJlbmRlcmluZyhldmVudFJlbmRlcmVyLnNlbGVjdEJ5SW5zdGFuY2VJZC5iaW5kKGV2ZW50UmVuZGVyZXIpLCBldmVudFJlbmRlcmVyLnVuc2VsZWN0QnlJbnN0YW5jZUlkLmJpbmQoZXZlbnRSZW5kZXJlciksIFtfdGhpcy5yZW5kZXJGZ0V2ZW50c10pO1xuICAgICAgICBfdGhpcy50aW1lQXhpcyA9IHRpbWVBeGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBzbGljZWRQcm9wcyA9IHRoaXMuc2xpY2VyLnNsaWNlUHJvcHMocHJvcHMsIHByb3BzLmRhdGVQcm9maWxlLCB0aGlzLnRpbWVBeGlzLnREYXRlUHJvZmlsZS5pc1RpbWVTY2FsZSA/IG51bGwgOiBwcm9wcy5uZXh0RGF5VGhyZXNob2xkLCB0aGlzLCB0aGlzLnRpbWVBeGlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCdXNpbmVzc0hvdXJzKHNsaWNlZFByb3BzLmJ1c2luZXNzSG91clNlZ3MpO1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24oc2xpY2VkUHJvcHMuZGF0ZVNlbGVjdGlvblNlZ3MpO1xuICAgICAgICB0aGlzLnJlbmRlckJnRXZlbnRzKHNsaWNlZFByb3BzLmJnRXZlbnRTZWdzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJGZ0V2ZW50cyhzbGljZWRQcm9wcy5mZ0V2ZW50U2Vncyk7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRTZWxlY3Rpb24oc2xpY2VkUHJvcHMuZXZlbnRTZWxlY3Rpb24pO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50RHJhZyhzbGljZWRQcm9wcy5ldmVudERyYWcpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50UmVzaXplKHNsaWNlZFByb3BzLmV2ZW50UmVzaXplKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyQnVzaW5lc3NIb3Vycy51bnJlbmRlcigpO1xuICAgICAgICB0aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24udW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCZ0V2ZW50cy51bnJlbmRlcigpO1xuICAgICAgICB0aGlzLnJlbmRlckZnRXZlbnRzLnVucmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyRXZlbnRTZWxlY3Rpb24udW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWcudW5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZS51bnJlbmRlcigpO1xuICAgIH07XG4gICAgVGltZWxpbmVMYW5lLnByb3RvdHlwZS5fcmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFJlbmRlcmVyLmhpZGVCeUhhc2goc3RhdGUuYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JSZW5kZXJlci5yZW5kZXJTZWdzKHN0YXRlLnNlZ3MsIHsgaXNEcmFnZ2luZzogdHJ1ZSwgc291cmNlU2VnOiBzdGF0ZS5zb3VyY2VTZWcgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUuX3VucmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFJlbmRlcmVyLnNob3dCeUhhc2goc3RhdGUuYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JSZW5kZXJlci51bnJlbmRlcihzdGF0ZS5zZWdzLCB7IGlzRHJhZ2dpbmc6IHRydWUsIHNvdXJjZVNlZzogc3RhdGUuc291cmNlU2VnIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZUxhbmUucHJvdG90eXBlLl9yZW5kZXJFdmVudFJlc2l6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIC8vIEhBQ0suIGV2ZW50UmVuZGVyZXIgYW5kIGZpbGxSZW5kZXJlciBib3RoIHVzZSB0aGVzZSBzZWdzLiB3b3VsZCBjb21wZXRlIG92ZXIgc2VnLmVsXG4gICAgICAgICAgICB2YXIgc2Vnc0ZvckhpZ2hsaWdodCA9IHN0YXRlLnNlZ3MubWFwKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIHNlZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZW5kZXJlci5oaWRlQnlIYXNoKHN0YXRlLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICAgICAgICAgIHRoaXMuZmlsbFJlbmRlcmVyLnJlbmRlclNlZ3MoJ2hpZ2hsaWdodCcsIHNlZ3NGb3JIaWdobGlnaHQpO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JSZW5kZXJlci5yZW5kZXJTZWdzKHN0YXRlLnNlZ3MsIHsgaXNEcmFnZ2luZzogdHJ1ZSwgc291cmNlU2VnOiBzdGF0ZS5zb3VyY2VTZWcgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUuX3VucmVuZGVyRXZlbnRSZXNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50UmVuZGVyZXIuc2hvd0J5SGFzaChzdGF0ZS5hZmZlY3RlZEluc3RhbmNlcyk7XG4gICAgICAgICAgICB0aGlzLmZpbGxSZW5kZXJlci51bnJlbmRlcignaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICB0aGlzLm1pcnJvclJlbmRlcmVyLnVucmVuZGVyKHN0YXRlLnNlZ3MsIHsgaXNEcmFnZ2luZzogdHJ1ZSwgc291cmNlU2VnOiBzdGF0ZS5zb3VyY2VTZWcgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRpbWVsaW5lTGFuZS5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBmaWxsUmVuZGVyZXIgPSBfYS5maWxsUmVuZGVyZXIsIGV2ZW50UmVuZGVyZXIgPSBfYS5ldmVudFJlbmRlcmVyLCBtaXJyb3JSZW5kZXJlciA9IF9hLm1pcnJvclJlbmRlcmVyO1xuICAgICAgICBmaWxsUmVuZGVyZXIuY29tcHV0ZVNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgZXZlbnRSZW5kZXJlci5jb21wdXRlU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBtaXJyb3JSZW5kZXJlci5jb21wdXRlU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBmaWxsUmVuZGVyZXIuYXNzaWduU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBldmVudFJlbmRlcmVyLmFzc2lnblNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgbWlycm9yUmVuZGVyZXIuYXNzaWduU2l6ZXMoaXNSZXNpemUpO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lTGFuZTtcbn0oRGF0ZUNvbXBvbmVudCkpO1xudmFyIFRpbWVsaW5lTGFuZVNsaWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZWxpbmVMYW5lU2xpY2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lTGFuZVNsaWNlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBUaW1lbGluZUxhbmVTbGljZXIucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAob3JpZ1JhbmdlLCB0aW1lQXhpcykge1xuICAgICAgICB2YXIgdERhdGVQcm9maWxlID0gdGltZUF4aXMudERhdGVQcm9maWxlO1xuICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aW1lQXhpcy5wcm9wcy5kYXRlUHJvZmlsZTtcbiAgICAgICAgdmFyIG5vcm1hbFJhbmdlID0gbm9ybWFsaXplUmFuZ2Uob3JpZ1JhbmdlLCB0RGF0ZVByb2ZpbGUsIHRpbWVBeGlzLmRhdGVFbnYpO1xuICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICAvLyBwcm90ZWN0IGFnYWluc3Qgd2hlbiB0aGUgc3BhbiBpcyBlbnRpcmVseSBpbiBhbiBpbnZhbGlkIGRhdGUgcmVnaW9uXG4gICAgICAgIGlmICh0aW1lQXhpcy5jb21wdXRlRGF0ZVNuYXBDb3ZlcmFnZShub3JtYWxSYW5nZS5zdGFydCkgPCB0aW1lQXhpcy5jb21wdXRlRGF0ZVNuYXBDb3ZlcmFnZShub3JtYWxSYW5nZS5lbmQpKSB7XG4gICAgICAgICAgICAvLyBpbnRlcnNlY3QgdGhlIGZvb3RwcmludCdzIHJhbmdlIHdpdGggdGhlIGdyaWQncyByYW5nZVxuICAgICAgICAgICAgdmFyIHNsaWNlZFJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKG5vcm1hbFJhbmdlLCB0RGF0ZVByb2ZpbGUubm9ybWFsaXplZFJhbmdlKTtcbiAgICAgICAgICAgIGlmIChzbGljZWRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHNlZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzbGljZWRSYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBzbGljZWRSYW5nZS5lbmQsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IHNsaWNlZFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSA9PT0gbm9ybWFsUmFuZ2Uuc3RhcnQudmFsdWVPZigpICYmIGlzVmFsaWREYXRlKHNsaWNlZFJhbmdlLnN0YXJ0LCB0RGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlLCB0aW1lQXhpcy52aWV3KSxcbiAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IHNsaWNlZFJhbmdlLmVuZC52YWx1ZU9mKCkgPT09IG5vcm1hbFJhbmdlLmVuZC52YWx1ZU9mKCkgJiYgaXNWYWxpZERhdGUoYWRkTXMoc2xpY2VkUmFuZ2UuZW5kLCAtMSksIHREYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGUsIHRpbWVBeGlzLnZpZXcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVMYW5lU2xpY2VyO1xufShTbGljZXIpKTtcblxudmFyIFRpbWVsaW5lVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGltZWxpbmVWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lVmlldyhjb250ZXh0LCB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHBhcmVudEVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRleHQsIHZpZXdTcGVjLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgcGFyZW50RWwpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXRpbWVsaW5lJyk7XG4gICAgICAgIGlmIChfdGhpcy5vcHQoJ2V2ZW50T3ZlcmxhcCcpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgX3RoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZmMtbm8tb3ZlcmxhcCcpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmVsLmlubmVySFRNTCA9IF90aGlzLnJlbmRlclNrZWxldG9uSHRtbCgpO1xuICAgICAgICBfdGhpcy50aW1lQXhpcyA9IG5ldyBUaW1lQXhpcyhfdGhpcy5jb250ZXh0LCBfdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCAuZmMtdGltZS1hcmVhJyksIF90aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5IC5mYy10aW1lLWFyZWEnKSk7XG4gICAgICAgIF90aGlzLmxhbmUgPSBuZXcgVGltZWxpbmVMYW5lKF90aGlzLmNvbnRleHQsIF90aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGwuY2FudmFzLmNvbnRlbnRFbCwgX3RoaXMudGltZUF4aXMubGF5b3V0LmJvZHlTY3JvbGxlci5lbmhhbmNlZFNjcm9sbC5jYW52YXMuYmdFbCwgX3RoaXMudGltZUF4aXMpO1xuICAgICAgICBjb250ZXh0LmNhbGVuZGFyLnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMsIHtcbiAgICAgICAgICAgIGVsOiBfdGhpcy50aW1lQXhpcy5zbGF0cy5lbFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmxhbmUuZGVzdHJveSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhci51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQodGhpcyk7XG4gICAgfTtcbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLnJlbmRlclNrZWxldG9uSHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRoZW1lID0gdGhpcy50aGVtZTtcbiAgICAgICAgcmV0dXJuIFwiPHRhYmxlIGNsYXNzPVxcXCJcIiArIHRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArIFwiXFxcIj4gPHRoZWFkIGNsYXNzPVxcXCJmYy1oZWFkXFxcIj4gPHRyPiA8dGQgY2xhc3M9XFxcImZjLXRpbWUtYXJlYSBcIiArIHRoZW1lLmdldENsYXNzKCd3aWRnZXRIZWFkZXInKSArIFwiXFxcIj48L3RkPiA8L3RyPiA8L3RoZWFkPiA8dGJvZHkgY2xhc3M9XFxcImZjLWJvZHlcXFwiPiA8dHI+IDx0ZCBjbGFzcz1cXFwiZmMtdGltZS1hcmVhIFwiICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSArIFwiXFxcIj48L3RkPiA8L3RyPiA8L3Rib2R5PiA8L3RhYmxlPlwiO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzLCBwcm9wcyk7IC8vIGZsYWdzIGZvciB1cGRhdGVTaXplLCBhZGRTY3JvbGxcbiAgICAgICAgdGhpcy50aW1lQXhpcy5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhbmUucmVjZWl2ZVByb3BzKF9fYXNzaWduKHt9LCBwcm9wcywgeyBuZXh0RGF5VGhyZXNob2xkOiB0aGlzLm5leHREYXlUaHJlc2hvbGQgfSkpO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB0b3RhbEhlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMudXBkYXRlU2l6ZShpc1Jlc2l6ZSwgdG90YWxIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgIHRoaXMubGFuZS51cGRhdGVTaXplKGlzUmVzaXplKTtcbiAgICB9O1xuICAgIC8vIE5vdyBJbmRpY2F0b3JcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLmdldE5vd0luZGljYXRvclVuaXQgPSBmdW5jdGlvbiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUF4aXMuZ2V0Tm93SW5kaWNhdG9yVW5pdChkYXRlUHJvZmlsZSk7XG4gICAgfTtcbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLnJlbmRlck5vd0luZGljYXRvciA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMucmVuZGVyTm93SW5kaWNhdG9yKGRhdGUpO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS51bnJlbmRlck5vd0luZGljYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aW1lQXhpcy51bnJlbmRlck5vd0luZGljYXRvcigpO1xuICAgIH07XG4gICAgLy8gU2Nyb2xsIFN5c3RlbVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZUF4aXMuY29tcHV0ZURhdGVTY3JvbGwoZHVyYXRpb24pO1xuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5hcHBseVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwsIGlzUmVzaXplKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuYXBwbHlTY3JvbGwuY2FsbCh0aGlzLCBzY3JvbGwsIGlzUmVzaXplKTsgLy8gd2lsbCBjYWxsIGFwcGx5RGF0ZVNjcm9sbFxuICAgICAgICAvLyBhdm9pZCB1cGRhdGluZyBzdGlja3lzY3JvbGwgdG9vIG9mdGVuXG4gICAgICAgIC8vIFRPRE86IHJlcGVhdCBjb2RlIGFzIFJlc291cmNlVGltZWxpbmVWaWV3Ojp1cGRhdGVTaXplXG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY2FsZW5kYXI7XG4gICAgICAgIGlmIChpc1Jlc2l6ZSB8fCBjYWxlbmRhci5pc1ZpZXdVcGRhdGVkIHx8IGNhbGVuZGFyLmlzRGF0ZXNVcGRhdGVkIHx8IGNhbGVuZGFyLmlzRXZlbnRzVXBkYXRlZCkge1xuICAgICAgICAgICAgdGhpcy50aW1lQXhpcy51cGRhdGVTdGlja3lTY3JvbGxlcnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5hcHBseURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoc2Nyb2xsKSB7XG4gICAgICAgIHRoaXMudGltZUF4aXMuYXBwbHlEYXRlU2Nyb2xsKHNjcm9sbCk7XG4gICAgfTtcbiAgICBUaW1lbGluZVZpZXcucHJvdG90eXBlLnF1ZXJ5U2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW5oYW5jZWRTY3JvbGwgPSB0aGlzLnRpbWVBeGlzLmxheW91dC5ib2R5U2Nyb2xsZXIuZW5oYW5jZWRTY3JvbGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IGVuaGFuY2VkU2Nyb2xsLmdldFNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgbGVmdDogZW5oYW5jZWRTY3JvbGwuZ2V0U2Nyb2xsTGVmdCgpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvLyBIaXQgU3lzdGVtXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgVGltZWxpbmVWaWV3LnByb3RvdHlwZS5idWlsZFBvc2l0aW9uQ2FjaGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRpbWVBeGlzLnNsYXRzLnVwZGF0ZVNpemUoKTtcbiAgICB9O1xuICAgIFRpbWVsaW5lVmlldy5wcm90b3R5cGUucXVlcnlIaXQgPSBmdW5jdGlvbiAocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCwgZWxXaWR0aCwgZWxIZWlnaHQpIHtcbiAgICAgICAgdmFyIHNsYXRIaXQgPSB0aGlzLnRpbWVBeGlzLnNsYXRzLnBvc2l0aW9uVG9IaXQocG9zaXRpb25MZWZ0KTtcbiAgICAgICAgaWYgKHNsYXRIaXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLFxuICAgICAgICAgICAgICAgIGRhdGVTcGFuOiBzbGF0SGl0LmRhdGVTcGFuLFxuICAgICAgICAgICAgICAgIHJlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogc2xhdEhpdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICByaWdodDogc2xhdEhpdC5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGVsSGVpZ2h0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXlFbDogc2xhdEhpdC5kYXlFbCxcbiAgICAgICAgICAgICAgICBsYXllcjogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lVmlldztcbn0oVmlldykpO1xuXG52YXIgbWFpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZGVmYXVsdFZpZXc6ICd0aW1lbGluZURheScsXG4gICAgdmlld3M6IHtcbiAgICAgICAgdGltZWxpbmU6IHtcbiAgICAgICAgICAgIGNsYXNzOiBUaW1lbGluZVZpZXcsXG4gICAgICAgICAgICBldmVudFJlc2l6YWJsZUZyb21TdGFydDogdHJ1ZSAvLyBob3cgaXMgdGhpcyBjb25zdW1lZCBmb3IgVGltZWxpbmVWaWV3IHRobz9cbiAgICAgICAgfSxcbiAgICAgICAgdGltZWxpbmVEYXk6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0aW1lbGluZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBkYXlzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGltZWxpbmVXZWVrOiB7XG4gICAgICAgICAgICB0eXBlOiAndGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgd2Vla3M6IDEgfVxuICAgICAgICB9LFxuICAgICAgICB0aW1lbGluZU1vbnRoOiB7XG4gICAgICAgICAgICB0eXBlOiAndGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgbW9udGhzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGltZWxpbmVZZWFyOiB7XG4gICAgICAgICAgICB0eXBlOiAndGltZWxpbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IHsgeWVhcnM6IDEgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1haW47XG5leHBvcnQgeyBIZWFkZXJCb2R5TGF5b3V0LCBTY3JvbGxKb2luZXIsIFN0aWNreVNjcm9sbGVyLCBUaW1lQXhpcywgVGltZWxpbmVMYW5lLCBUaW1lbGluZVZpZXcgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyJdLCJzb3VyY2VSb290IjoiIn0=